//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents the result of a create device pool request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDevicePoolResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="devicePool")]
		public DevicePool DevicePool { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of device types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DevicePool
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DevicePoolType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public Rule[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxDevices")]
		public System.Nullable<System.Int32> MaxDevices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DevicePoolType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	/// <summary>
	/// Represents a condition for a device pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Rule
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public DeviceAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public RuleOperator Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeviceAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM_FACTOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUFACTURER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_ENABLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_DEBUG_ENABLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_VERSION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_ARN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_LABELS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEET_TYPE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS_VERSION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODEL = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABILITY = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RuleOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_OR_EQUALS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GREATER_THAN_OR_EQUALS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_IN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINS = 7,
	}
	
	/// <summary>
	/// Represents a request to the create device pool operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDevicePoolRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectArn")]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public Rule[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxDevices")]
		public System.Nullable<System.Int32> MaxDevices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArgumentException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceAccountException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInstanceProfileResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceProfile")]
		public InstanceProfile InstanceProfile { get; set; }
	}
	
	/// <summary>
	/// Represents the instance profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageCleanup")]
		public System.Nullable<System.Boolean> PackageCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="excludeAppPackagesFromCleanup")]
		public string[] ExcludeAppPackagesFromCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rebootAfterUse")]
		public System.Nullable<System.Boolean> RebootAfterUse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInstanceProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageCleanup")]
		public System.Nullable<System.Boolean> PackageCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="excludeAppPackagesFromCleanup")]
		public string[] ExcludeAppPackagesFromCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rebootAfterUse")]
		public System.Nullable<System.Boolean> RebootAfterUse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateNetworkProfileResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkProfile")]
		public NetworkProfile NetworkProfile { get; set; }
	}
	
	/// <summary>
	/// An array of settings that describes characteristics of a network profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DevicePoolType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkBandwidthBits")]
		public System.Nullable<System.Int32> UplinkBandwidthBits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downlinkBandwidthBits")]
		public System.Nullable<System.Int32> DownlinkBandwidthBits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkDelayMs")]
		public System.Nullable<System.Int32> UplinkDelayMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downlinkDelayMs")]
		public System.Nullable<System.Int32> DownlinkDelayMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkJitterMs")]
		public System.Nullable<System.Int32> UplinkJitterMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downlinkJitterMs")]
		public System.Nullable<System.Int32> DownlinkJitterMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkLossPercent")]
		public System.Nullable<System.Int32> UplinkLossPercent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downlinkLossPercent")]
		public System.Nullable<System.Int32> DownlinkLossPercent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateNetworkProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectArn")]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DevicePoolType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkBandwidthBits")]
		public System.Nullable<System.Int32> UplinkBandwidthBits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downlinkBandwidthBits")]
		public System.Nullable<System.Int32> DownlinkBandwidthBits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkDelayMs")]
		public System.Nullable<System.Int32> UplinkDelayMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downlinkDelayMs")]
		public System.Nullable<System.Int32> DownlinkDelayMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkJitterMs")]
		public System.Nullable<System.Int32> UplinkJitterMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downlinkJitterMs")]
		public System.Nullable<System.Int32> DownlinkJitterMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkLossPercent")]
		public System.Nullable<System.Int32> UplinkLossPercent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downlinkLossPercent")]
		public System.Nullable<System.Int32> DownlinkLossPercent { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a create project request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProjectResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Project Project { get; set; }
	}
	
	/// <summary>
	/// Represents an operating-system neutral workspace for running and managing tests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Project
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultJobTimeoutMinutes")]
		public System.Nullable<System.Int32> DefaultJobTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfig")]
		public VpcConfig VpcConfig { get; set; }
	}
	
	/// <summary>
	/// Contains the VPC configuration data necessary to interface with AWS Device Farm's services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the create project operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultJobTimeoutMinutes")]
		public System.Nullable<System.Int32> DefaultJobTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfig")]
		public VpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagOperationException
	{
	}
	
	/// <summary>
	/// Represents the server response from a request to create a remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRemoteAccessSessionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="remoteAccessSession")]
		public RemoteAccessSession RemoteAccessSession { get; set; }
	}
	
	/// <summary>
	/// Represents information about the remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoteAccessSession
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ExecutionResult Result { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.DateTimeOffset Started { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopped")]
		public System.DateTimeOffset Stopped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="device")]
		public Device Device { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceArn")]
		public string InstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteDebugEnabled")]
		public System.Nullable<System.Boolean> RemoteDebugEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteRecordEnabled")]
		public System.Nullable<System.Boolean> RemoteRecordEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteRecordAppArn")]
		public string RemoteRecordAppArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostAddress")]
		public string HostAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingMethod")]
		public BillingMethod BillingMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceMinutes")]
		public DeviceMinutes DeviceMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceUdid")]
		public string DeviceUdid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interactionMode")]
		public InteractionMode InteractionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skipAppResign")]
		public System.Nullable<System.Boolean> SkipAppResign { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfig")]
		public VpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_CONCURRENCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING_DEVICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPING = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ExecutionResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 6,
	}
	
	/// <summary>
	/// Represents a device type that an app is tested against.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Device
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modelId")]
		public string ModelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formFactor")]
		public DeviceFormFactor FormFactor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public DevicePlatform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os")]
		public string Os { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public CPU Cpu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public Resolution Resolution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heapSize")]
		public System.Nullable<System.Int32> HeapSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memory")]
		public System.Nullable<System.Int32> Memory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="carrier")]
		public string Carrier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="radio")]
		public string Radio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteAccessEnabled")]
		public System.Nullable<System.Boolean> RemoteAccessEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteDebugEnabled")]
		public System.Nullable<System.Boolean> RemoteDebugEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fleetType")]
		public string FleetType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fleetName")]
		public string FleetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public DeviceInstance[] Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public DeviceAvailability Availability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeviceFormFactor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLET = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DevicePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS = 1,
	}
	
	/// <summary>
	/// Represents the amount of CPU that an app is using on a physical device. Does not represent system-wide CPU usage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CPU
	{
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public string Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public string Architecture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clock")]
		public System.Nullable<System.Double> Clock { get; set; }
	}
	
	/// <summary>
	/// Represents the screen resolution of a device in height and width, expressed in pixels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Resolution
	{
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
	}
	
	/// <summary>
	/// Represents the device instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceInstance
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceArn")]
		public string DeviceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public InstanceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="udid")]
		public string Udid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceProfile")]
		public InstanceProfile InstanceProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InstanceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_USE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_AVAILABLE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeviceAvailability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMPORARY_NOT_AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGHLY_AVAILABLE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BillingMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNMETERED = 1,
	}
	
	/// <summary>
	/// Represents the total (metered or unmetered) minutes used by the resource to run tests. Contains the sum of minutes consumed by all children.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceMinutes
	{
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metered")]
		public System.Nullable<System.Double> Metered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unmetered")]
		public System.Nullable<System.Double> Unmetered { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InteractionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_VIDEO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_ONLY = 2,
	}
	
	/// <summary>
	/// Creates and submits a request to start a remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRemoteAccessSessionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectArn")]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deviceArn")]
		public string DeviceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceArn")]
		public string InstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sshPublicKey")]
		public string SshPublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteDebugEnabled")]
		public System.Nullable<System.Boolean> RemoteDebugEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteRecordEnabled")]
		public System.Nullable<System.Boolean> RemoteRecordEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteRecordAppArn")]
		public string RemoteRecordAppArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public CreateRemoteAccessSessionConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interactionMode")]
		public InteractionMode InteractionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skipAppResign")]
		public System.Nullable<System.Boolean> SkipAppResign { get; set; }
	}
	
	/// <summary>
	/// Configuration settings for a remote access session, including billing method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRemoteAccessSessionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="billingMethod")]
		public BillingMethod BillingMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpceConfigurationArns")]
		public string[] VpceConfigurationArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTestGridProjectResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="testGridProject")]
		public TestGridProject TestGridProject { get; set; }
	}
	
	/// <summary>
	/// A Selenium testing project. Projects are used to collect and collate sessions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestGridProject
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfig")]
		public TestGridVpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
	}
	
	/// <summary>
	/// The VPC security groups and subnets that are attached to a project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestGridVpcConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="securityGroupIds")]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subnetIds")]
		public string[] SubnetIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpcId")]
		public string VpcId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTestGridProjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfig")]
		public TestGridVpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServiceException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTestGridUrlResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public System.DateTimeOffset Expires { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTestGridUrlRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectArn")]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiresInSeconds")]
		public int ExpiresInSeconds { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a create upload request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUploadResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="upload")]
		public Upload Upload { get; set; }
	}
	
	/// <summary>
	/// An app or a set of one or more tests to upload or that have been uploaded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Upload
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public UploadType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public UploadStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public DevicePoolType Category { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UploadType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID_APP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS_APP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_APP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_DATA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT_TEST_PACKAGE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG_TEST_PACKAGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_TEST_PACKAGE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE_TEST_PACKAGE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY_TEST_PACKAGE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT_TEST_PACKAGE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG_TEST_PACKAGE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON_TEST_PACKAGE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE_TEST_PACKAGE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY_TEST_PACKAGE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_TEST_PACKAGE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_TEST_PACKAGE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATION_TEST_PACKAGE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATOR_TEST_PACKAGE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_TEST_PACKAGE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI_TEST_PACKAGE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT_TEST_SPEC = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG_TEST_SPEC = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_TEST_SPEC = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE_TEST_SPEC = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY_TEST_SPEC = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT_TEST_SPEC = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG_TEST_SPEC = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON_TEST_SPEC = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE_TEST_SPEC = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY_TEST_SPEC = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_TEST_SPEC = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI_TEST_SPEC = 31,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UploadStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	/// <summary>
	/// Represents a request to the create upload operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUploadRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectArn")]
		public string ProjectArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public UploadType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVPCEConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="vpceConfiguration")]
		public VPCEConfiguration VpceConfiguration { get; set; }
	}
	
	/// <summary>
	/// Represents an Amazon Virtual Private Cloud (VPC) endpoint configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VPCEConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpceConfigurationName")]
		public string VpceConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpceServiceName")]
		public string VpceServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceDnsName")]
		public string ServiceDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpceConfigurationDescription")]
		public string VpceConfigurationDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVPCEConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpceConfigurationName")]
		public string VpceConfigurationName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vpceServiceName")]
		public string VpceServiceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serviceDnsName")]
		public string ServiceDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpceConfigurationDescription")]
		public string VpceConfigurationDescription { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a delete device pool request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDevicePoolResult
	{
	}
	
	/// <summary>
	/// Represents a request to the delete device pool operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDevicePoolRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInstanceProfileResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInstanceProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteNetworkProfileResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteNetworkProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a delete project request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProjectResult
	{
	}
	
	/// <summary>
	/// Represents a request to the delete project operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// The response from the server when a request is made to delete the remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRemoteAccessSessionResult
	{
	}
	
	/// <summary>
	/// Represents the request to delete the specified remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRemoteAccessSessionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a delete run request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRunResult
	{
	}
	
	/// <summary>
	/// Represents a request to the delete run operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRunRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTestGridProjectResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTestGridProjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectArn")]
		public string ProjectArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CannotDeleteException
	{
	}
	
	/// <summary>
	/// Represents the result of a delete upload request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteUploadResult
	{
	}
	
	/// <summary>
	/// Represents a request to the delete upload operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteUploadRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVPCEConfigurationResult
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVPCEConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidOperationException
	{
	}
	
	/// <summary>
	/// Represents the account settings return values from the <code>GetAccountSettings</code> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAccountSettingsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountSettings")]
		public AccountSettings AccountSettings { get; set; }
	}
	
	/// <summary>
	/// A container for account-level settings in AWS Device Farm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsAccountNumber")]
		public string AwsAccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unmeteredDevices")]
		public PurchasedDevicesMap UnmeteredDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unmeteredRemoteAccessDevices")]
		public PurchasedDevicesMap UnmeteredRemoteAccessDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxJobTimeoutMinutes")]
		public System.Nullable<System.Int32> MaxJobTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trialMinutes")]
		public TrialMinutes TrialMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxSlots")]
		public MaxSlotMap MaxSlots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultJobTimeoutMinutes")]
		public System.Nullable<System.Int32> DefaultJobTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skipAppResign")]
		public System.Nullable<System.Boolean> SkipAppResign { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchasedDevicesMap
	{
	}
	
	/// <summary>
	/// Represents information about free trial device minutes for an AWS account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrialMinutes
	{
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remaining")]
		public System.Nullable<System.Double> Remaining { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MaxSlotMap
	{
	}
	
	/// <summary>
	/// Represents the request sent to retrieve the account settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAccountSettingsRequest
	{
	}
	
	/// <summary>
	/// Represents the result of a get device request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDeviceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="device")]
		public Device Device { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get device request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDeviceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDeviceInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceInstance")]
		public DeviceInstance DeviceInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDeviceInstanceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get device pool request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDevicePoolResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="devicePool")]
		public DevicePool DevicePool { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get device pool operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDevicePoolRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of describe device pool compatibility request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDevicePoolCompatibilityResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="compatibleDevices")]
		public DevicePoolCompatibilityResult[] CompatibleDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incompatibleDevices")]
		public DevicePoolCompatibilityResult[] IncompatibleDevices { get; set; }
	}
	
	/// <summary>
	/// Represents a device pool compatibility result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DevicePoolCompatibilityResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="device")]
		public Device Device { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="compatible")]
		public System.Nullable<System.Boolean> Compatible { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="incompatibilityMessages")]
		public IncompatibilityMessage[] IncompatibilityMessages { get; set; }
	}
	
	/// <summary>
	/// Represents information about incompatibility.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IncompatibilityMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DeviceAttribute Type { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get device pool compatibility operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDevicePoolCompatibilityRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="devicePoolArn")]
		public string DevicePoolArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appArn")]
		public string AppArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testType")]
		public TestType TestType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="test")]
		public ScheduleRunTest Test { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public ScheduleRunConfiguration Configuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_FUZZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILTIN_EXPLORER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_PERFORMANCE_PROFILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_JUNIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_TESTNG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_NODE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_RUBY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_JUNIT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_JAVA_TESTNG = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_PYTHON = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_NODE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_WEB_RUBY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATION = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UIAUTOMATOR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_UI = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_RECORD = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_REPLAY = 20,
	}
	
	/// <summary>
	/// Represents test settings. This data structure is passed in as the test parameter to ScheduleRun. For an example of the JSON request syntax, see <a>ScheduleRun</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleRunTest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TestType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testPackageArn")]
		public string TestPackageArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSpecArn")]
		public string TestSpecArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public TestParameters Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestParameters
	{
	}
	
	/// <summary>
	/// Represents the settings for a run. Includes things like location, radio states, auxiliary apps, and network profiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleRunConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="extraDataPackageArn")]
		public string ExtraDataPackageArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkProfileArn")]
		public string NetworkProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpceConfigurationArns")]
		public string[] VpceConfigurationArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerArtifactPaths")]
		public CustomerArtifactPaths CustomerArtifactPaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="radios")]
		public Radios Radios { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auxiliaryApps")]
		public string[] AuxiliaryApps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingMethod")]
		public BillingMethod BillingMethod { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a latitude and longitude pair, expressed in geographic coordinate system degrees (for example, 47.6204, -122.3491).</p> <p>Elevation is currently not supported.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public double Latitude { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public double Longitude { get; set; }
	}
	
	/// <summary>
	/// <p>A JSON object that specifies the paths where the artifacts generated by the customer's tests, on the device or in the test environment, are pulled from.</p> <p>Specify <code>deviceHostPaths</code> and optionally specify either <code>iosPaths</code> or <code>androidPaths</code>.</p> <p>For web app tests, you can specify both <code>iosPaths</code> and <code>androidPaths</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerArtifactPaths
	{
		
		[System.Runtime.Serialization.DataMember(Name="iosPaths")]
		public string[] IosPaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="androidPaths")]
		public string[] AndroidPaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceHostPaths")]
		public string[] DeviceHostPaths { get; set; }
	}
	
	/// <summary>
	/// Represents the set of radios and their states on a device. Examples of radios include Wi-Fi, GPS, Bluetooth, and NFC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Radios
	{
		
		[System.Runtime.Serialization.DataMember(Name="wifi")]
		public System.Nullable<System.Boolean> Wifi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bluetooth")]
		public System.Nullable<System.Boolean> Bluetooth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nfc")]
		public System.Nullable<System.Boolean> Nfc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gps")]
		public System.Nullable<System.Boolean> Gps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceProfileResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceProfile")]
		public InstanceProfile InstanceProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get job request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetJobResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	/// <summary>
	/// Represents a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Job
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TestType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ExecutionResult Result { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.DateTimeOffset Started { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopped")]
		public System.DateTimeOffset Stopped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="counters")]
		public Counters Counters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="device")]
		public Device Device { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceArn")]
		public string InstanceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceMinutes")]
		public DeviceMinutes DeviceMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="videoEndpoint")]
		public string VideoEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="videoCapture")]
		public System.Nullable<System.Boolean> VideoCapture { get; set; }
	}
	
	/// <summary>
	/// Represents entity counters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Counters
	{
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passed")]
		public System.Nullable<System.Int32> Passed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public System.Nullable<System.Int32> Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warned")]
		public System.Nullable<System.Int32> Warned { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errored")]
		public System.Nullable<System.Int32> Errored { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopped")]
		public System.Nullable<System.Int32> Stopped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skipped")]
		public System.Nullable<System.Int32> Skipped { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get job operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetNetworkProfileResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkProfile")]
		public NetworkProfile NetworkProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetNetworkProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Returns the status result for a device offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOfferingStatusResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="current")]
		public OfferingStatusMap Current { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPeriod")]
		public OfferingStatusMap NextPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferingStatusMap
	{
	}
	
	/// <summary>
	/// Represents the request to retrieve the offering status for the specified customer or account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOfferingStatusRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotEligibleException
	{
	}
	
	/// <summary>
	/// Represents the result of a get project request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetProjectResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Project Project { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get project operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetProjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server that lists detailed information about the remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRemoteAccessSessionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="remoteAccessSession")]
		public RemoteAccessSession RemoteAccessSession { get; set; }
	}
	
	/// <summary>
	/// Represents the request to get information about the specified remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRemoteAccessSessionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get run request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRunResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="run")]
		public Run Run { get; set; }
	}
	
	/// <summary>
	/// Represents a test run on a set of devices with a given app package, test parameters, and so on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Run
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TestType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public DevicePlatform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ExecutionResult Result { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.DateTimeOffset Started { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopped")]
		public System.DateTimeOffset Stopped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="counters")]
		public Counters Counters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalJobs")]
		public System.Nullable<System.Int32> TotalJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completedJobs")]
		public System.Nullable<System.Int32> CompletedJobs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingMethod")]
		public BillingMethod BillingMethod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceMinutes")]
		public DeviceMinutes DeviceMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkProfile")]
		public NetworkProfile NetworkProfile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parsingResultUrl")]
		public string ParsingResultUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultCode")]
		public ExecutionResultCode ResultCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seed")]
		public System.Nullable<System.Int32> Seed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appUpload")]
		public string AppUpload { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventCount")]
		public System.Nullable<System.Int32> EventCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobTimeoutMinutes")]
		public System.Nullable<System.Int32> JobTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devicePoolArn")]
		public string DevicePoolArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="radios")]
		public Radios Radios { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerArtifactPaths")]
		public CustomerArtifactPaths CustomerArtifactPaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webUrl")]
		public string WebUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skipAppResign")]
		public System.Nullable<System.Boolean> SkipAppResign { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testSpecArn")]
		public string TestSpecArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceSelectionResult")]
		public DeviceSelectionResult DeviceSelectionResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfig")]
		public VpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ExecutionResultCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARSING_FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC_ENDPOINT_SETUP_FAILED = 1,
	}
	
	/// <summary>
	/// Contains the run results requested by the device selection configuration and how many devices were returned. For an example of the JSON response syntax, see <a>ScheduleRun</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceSelectionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DeviceFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="matchedDevicesCount")]
		public System.Nullable<System.Int32> MatchedDevicesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxDevices")]
		public System.Nullable<System.Int32> MaxDevices { get; set; }
	}
	
	/// <summary>
	/// <p>Represents a device filter used to select a set of devices to be included in a test run. This data structure is passed in as the <code>deviceSelectionConfiguration</code> parameter to <code>ScheduleRun</code>. For an example of the JSON request syntax, see <a>ScheduleRun</a>.</p> <p>It is also passed in as the <code>filters</code> parameter to <code>ListDevices</code>. For an example of the JSON request syntax, see <a>ListDevices</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public DeviceFilterAttribute Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public RuleOperator Operator { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeviceFilterAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS_VERSION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODEL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABILITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM_FACTOR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUFACTURER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_ACCESS_ENABLED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_DEBUG_ENABLED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_ARN = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANCE_LABELS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEET_TYPE = 11,
	}
	
	/// <summary>
	/// Represents a request to the get run operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRunRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get suite request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSuiteResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="suite")]
		public Suite Suite { get; set; }
	}
	
	/// <summary>
	/// Represents a collection of one or more tests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Suite
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TestType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ExecutionResult Result { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.DateTimeOffset Started { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopped")]
		public System.DateTimeOffset Stopped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="counters")]
		public Counters Counters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceMinutes")]
		public DeviceMinutes DeviceMinutes { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get suite operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSuiteRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get test request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTestResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="test")]
		public Test Test { get; set; }
	}
	
	/// <summary>
	/// Represents a condition that is evaluated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Test
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TestType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ExecutionResult Result { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.DateTimeOffset Started { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopped")]
		public System.DateTimeOffset Stopped { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="counters")]
		public Counters Counters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceMinutes")]
		public DeviceMinutes DeviceMinutes { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get test operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTestRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTestGridProjectResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="testGridProject")]
		public TestGridProject TestGridProject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTestGridProjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectArn")]
		public string ProjectArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTestGridSessionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="testGridSession")]
		public TestGridSession TestGridSession { get; set; }
	}
	
	/// <summary>
	/// A <a>TestGridSession</a> is a single instance of a browser launched from the URL provided by a call to <a>CreateTestGridUrl</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestGridSession
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TestGridSessionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ended")]
		public System.DateTimeOffset Ended { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billingMinutes")]
		public System.Nullable<System.Double> BillingMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seleniumProperties")]
		public string SeleniumProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TestGridSessionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERRORED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTestGridSessionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="projectArn")]
		public string ProjectArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionArn")]
		public string SessionArn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a get upload request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetUploadResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="upload")]
		public Upload Upload { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the get upload operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetUploadRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVPCEConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="vpceConfiguration")]
		public VPCEConfiguration VpceConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVPCEConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server after AWS Device Farm makes a request to install to a remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstallToRemoteAccessSessionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="appUpload")]
		public Upload AppUpload { get; set; }
	}
	
	/// <summary>
	/// Represents the request to install an Android application (in .apk format) or an iOS application (in .ipa format) as part of a remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstallToRemoteAccessSessionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteAccessSessionArn")]
		public string RemoteAccessSessionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appArn")]
		public string AppArn { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list artifacts operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListArtifactsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public Artifact[] Artifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a test. Examples of artifacts include logs and screenshots.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Artifact
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ArtifactType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="extension")]
		public string Extension { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ArtifactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCREENSHOT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_LOG = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MESSAGE_LOG = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_LOG = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESULT_LOG = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_LOG = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBKIT_LOG = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUMENTATION_OUTPUT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXERCISER_MONKEY_OUTPUT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_JSON_OUTPUT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_PRETTY_OUTPUT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_STANDARD_OUTPUT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALABASH_JAVA_XML_OUTPUT = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATION_OUTPUT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_SERVER_OUTPUT = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_OUTPUT = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_JAVA_XML_OUTPUT = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_OUTPUT = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPIUM_PYTHON_XML_OUTPUT = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLORER_EVENT_LOG = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLORER_SUMMARY_LOG = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION_CRASH_REPORT = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XCTEST_LOG = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_ARTIFACT = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_ARTIFACT_LOG = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TESTSPEC_OUTPUT = 27,
	}
	
	/// <summary>
	/// Represents a request to the list artifacts operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListArtifactsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ArtifactCategory Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ArtifactCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCREENSHOT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDeviceInstancesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceInstances")]
		public DeviceInstance[] DeviceInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDeviceInstancesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list device pools request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDevicePoolsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="devicePools")]
		public DevicePool[] DevicePools { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list device pools request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDevicePoolsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DevicePoolType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list devices operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDevicesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public Device[] Devices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list devices request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDevicesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DeviceFilter[] Filters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInstanceProfilesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceProfiles")]
		public InstanceProfile[] InstanceProfiles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInstanceProfilesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list jobs request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public Job[] Jobs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list jobs operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListNetworkProfilesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkProfiles")]
		public NetworkProfile[] NetworkProfiles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListNetworkProfilesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DevicePoolType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOfferingPromotionsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="offeringPromotions")]
		public OfferingPromotion[] OfferingPromotions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents information about an offering promotion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferingPromotion
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOfferingPromotionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns the transaction log of the specified offerings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOfferingTransactionsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="offeringTransactions")]
		public OfferingTransaction[] OfferingTransactions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the metadata of an offering transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferingTransaction
	{
		
		[System.Runtime.Serialization.DataMember(Name="offeringStatus")]
		public OfferingStatus OfferingStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offeringPromotionId")]
		public string OfferingPromotionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdOn")]
		public System.DateTimeOffset CreatedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public MonetaryAmount Cost { get; set; }
	}
	
	/// <summary>
	/// The status of the offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OfferingStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public OfferingTransactionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offering")]
		public Offering Offering { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectiveOn")]
		public System.DateTimeOffset EffectiveOn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OfferingTransactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PURCHASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RENEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM = 2,
	}
	
	/// <summary>
	/// Represents the metadata of a device offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Offering
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public OfferingType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public DevicePlatform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurringCharges")]
		public RecurringCharge[] RecurringCharges { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OfferingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECURRING = 0,
	}
	
	/// <summary>
	/// Specifies whether charges for devices are recurring.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecurringCharge
	{
		
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public MonetaryAmount Cost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public RecurringChargeFrequency Frequency { get; set; }
	}
	
	/// <summary>
	/// A number that represents the monetary amount for an offering or transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MonetaryAmount
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public CurrencyCode CurrencyCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CurrencyCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USD = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RecurringChargeFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 0,
	}
	
	/// <summary>
	/// Represents the request to list the offering transaction history.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOfferingTransactionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the return values of the list of offerings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOfferingsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="offerings")]
		public Offering[] Offerings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to list all offerings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOfferingsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list projects request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProjectsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public Project[] Projects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list projects operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProjectsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server after AWS Device Farm makes a request to return information about the remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRemoteAccessSessionsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="remoteAccessSessions")]
		public RemoteAccessSession[] RemoteAccessSessions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the request to return information about the remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRemoteAccessSessionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list runs request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRunsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="runs")]
		public Run[] Runs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list runs operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRunsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list samples request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSamplesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="samples")]
		public Sample[] Samples { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a sample of performance data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sample
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SampleType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SampleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEMORY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THREADS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RX_RATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TX_RATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RX = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TX = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_FRAMES = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_FPS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_MIN_DRAWTIME = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_AVG_DRAWTIME = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_MAX_DRAWTIME = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_FRAMES = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_FPS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_MIN_DRAWTIME = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_AVG_DRAWTIME = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPENGL_MAX_DRAWTIME = 16,
	}
	
	/// <summary>
	/// Represents a request to the list samples operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSamplesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list suites request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSuitesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="suites")]
		public Suite[] Suites { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list suites operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSuitesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// The metadata that you apply to a resource to help you categorize and organize it. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTestGridProjectsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="testGridProjects")]
		public TestGridProject[] TestGridProjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTestGridProjectsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResult")]
		public System.Nullable<System.Int32> MaxResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTestGridSessionActionsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public TestGridSessionAction[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An action taken by a <a>TestGridSession</a> browser instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestGridSessionAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.DateTimeOffset Started { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public string StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestMethod")]
		public string RequestMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTestGridSessionActionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sessionArn")]
		public string SessionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResult")]
		public System.Nullable<System.Int32> MaxResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTestGridSessionArtifactsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public TestGridSessionArtifact[] Artifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// <p>Artifacts are video and other files that are produced in the process of running a browser in an automated context. </p> <note> <p>Video elements might be broken up into multiple artifacts as they grow in size during creation. </p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestGridSessionArtifact
	{
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TestGridSessionArtifactType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TestGridSessionArtifactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELENIUM_LOG = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTestGridSessionArtifactsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sessionArn")]
		public string SessionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TestGridSessionArtifactCategory Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResult")]
		public System.Nullable<System.Int32> MaxResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TestGridSessionArtifactCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTestGridSessionsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="testGridSessions")]
		public TestGridSession[] TestGridSessions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTestGridSessionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectArn")]
		public string ProjectArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public TestGridSessionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTimeAfter")]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTimeBefore")]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTimeAfter")]
		public System.DateTimeOffset EndTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTimeBefore")]
		public System.DateTimeOffset EndTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResult")]
		public System.Nullable<System.Int32> MaxResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list tests request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTestsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="tests")]
		public Test[] Tests { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list tests operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTestsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list unique problems request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUniqueProblemsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="uniqueProblems")]
		public UniqueProblemsByExecutionResultMap UniqueProblems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UniqueProblemsByExecutionResultMap
	{
	}
	
	/// <summary>
	/// Represents a request to the list unique problems operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUniqueProblemsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a list uploads request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUploadsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="uploads")]
		public Upload[] Uploads { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the list uploads operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUploadsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public UploadType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVPCEConfigurationsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="vpceConfigurations")]
		public VPCEConfiguration[] VpceConfigurations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVPCEConfigurationsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The result of the purchase offering (for example, success or failure).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseOfferingResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="offeringTransaction")]
		public OfferingTransaction OfferingTransaction { get; set; }
	}
	
	/// <summary>
	/// Represents a request for a purchase offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseOfferingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offeringId")]
		public string OfferingId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offeringPromotionId")]
		public string OfferingPromotionId { get; set; }
	}
	
	/// <summary>
	/// The result of a renewal offering.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenewOfferingResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="offeringTransaction")]
		public OfferingTransaction OfferingTransaction { get; set; }
	}
	
	/// <summary>
	/// A request that represents an offering renewal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenewOfferingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offeringId")]
		public string OfferingId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; }
	}
	
	/// <summary>
	/// Represents the result of a schedule run request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleRunResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="run")]
		public Run Run { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the schedule run operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleRunRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectArn")]
		public string ProjectArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appArn")]
		public string AppArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="devicePoolArn")]
		public string DevicePoolArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceSelectionConfiguration")]
		public DeviceSelectionConfiguration DeviceSelectionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="test")]
		public ScheduleRunTest Test { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public ScheduleRunConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionConfiguration")]
		public ExecutionConfiguration ExecutionConfiguration { get; set; }
	}
	
	/// <summary>
	/// Represents the device filters used in a test run and the maximum number of devices to be included in the run. It is passed in as the <code>deviceSelectionConfiguration</code> request parameter in <a>ScheduleRun</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceSelectionConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DeviceFilter[] Filters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maxDevices")]
		public int MaxDevices { get; set; }
	}
	
	/// <summary>
	/// Represents configuration information about a test run, such as the execution timeout (in minutes).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecutionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobTimeoutMinutes")]
		public System.Nullable<System.Int32> JobTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountsCleanup")]
		public System.Nullable<System.Boolean> AccountsCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appPackagesCleanup")]
		public System.Nullable<System.Boolean> AppPackagesCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="videoCapture")]
		public System.Nullable<System.Boolean> VideoCapture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skipAppResign")]
		public System.Nullable<System.Boolean> SkipAppResign { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IdempotencyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopJobResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the response from the server that describes the remote access session when AWS Device Farm stops the session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopRemoteAccessSessionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="remoteAccessSession")]
		public RemoteAccessSession RemoteAccessSession { get; set; }
	}
	
	/// <summary>
	/// Represents the request to stop the remote access session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopRemoteAccessSessionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Represents the results of your stop run attempt.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopRunResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="run")]
		public Run Run { get; set; }
	}
	
	/// <summary>
	/// Represents the request to stop a specific run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopRunRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyTagsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagPolicyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDeviceInstanceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="deviceInstance")]
		public DeviceInstance DeviceInstance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDeviceInstanceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileArn")]
		public string ProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
	}
	
	/// <summary>
	/// Represents the result of an update device pool request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDevicePoolResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="devicePool")]
		public DevicePool DevicePool { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the update device pool operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDevicePoolRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public Rule[] Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxDevices")]
		public System.Nullable<System.Int32> MaxDevices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clearMaxDevices")]
		public System.Nullable<System.Boolean> ClearMaxDevices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInstanceProfileResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="instanceProfile")]
		public InstanceProfile InstanceProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateInstanceProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageCleanup")]
		public System.Nullable<System.Boolean> PackageCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="excludeAppPackagesFromCleanup")]
		public string[] ExcludeAppPackagesFromCleanup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rebootAfterUse")]
		public System.Nullable<System.Boolean> RebootAfterUse { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateNetworkProfileResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="networkProfile")]
		public NetworkProfile NetworkProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateNetworkProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DevicePoolType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkBandwidthBits")]
		public System.Nullable<System.Int32> UplinkBandwidthBits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downlinkBandwidthBits")]
		public System.Nullable<System.Int32> DownlinkBandwidthBits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkDelayMs")]
		public System.Nullable<System.Int32> UplinkDelayMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downlinkDelayMs")]
		public System.Nullable<System.Int32> DownlinkDelayMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkJitterMs")]
		public System.Nullable<System.Int32> UplinkJitterMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downlinkJitterMs")]
		public System.Nullable<System.Int32> DownlinkJitterMs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uplinkLossPercent")]
		public System.Nullable<System.Int32> UplinkLossPercent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downlinkLossPercent")]
		public System.Nullable<System.Int32> DownlinkLossPercent { get; set; }
	}
	
	/// <summary>
	/// Represents the result of an update project request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProjectResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public Project Project { get; set; }
	}
	
	/// <summary>
	/// Represents a request to the update project operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultJobTimeoutMinutes")]
		public System.Nullable<System.Int32> DefaultJobTimeoutMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfig")]
		public VpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTestGridProjectResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="testGridProject")]
		public TestGridProject TestGridProject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTestGridProjectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="projectArn")]
		public string ProjectArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpcConfig")]
		public TestGridVpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateUploadResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="upload")]
		public Upload Upload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateUploadRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editContent")]
		public System.Nullable<System.Boolean> EditContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVPCEConfigurationResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="vpceConfiguration")]
		public VPCEConfiguration VpceConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVPCEConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpceConfigurationName")]
		public string VpceConfigurationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpceServiceName")]
		public string VpceServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceDnsName")]
		public string ServiceDnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpceConfigurationDescription")]
		public string VpceConfigurationDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NetworkProfileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	/// <summary>
	/// Information about a problem detail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProblemDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents a specific warning or failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Problem
	{
		
		[System.Runtime.Serialization.DataMember(Name="run")]
		public ProblemDetail Run { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="job")]
		public ProblemDetail Job { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suite")]
		public ProblemDetail Suite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="test")]
		public ProblemDetail Test { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="device")]
		public Device Device { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ExecutionResult Result { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A collection of one or more problems, grouped by their result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UniqueProblem
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="problems")]
		public Problem[] Problems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UploadCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a device pool.
		/// CreateDevicePool #X-Amz-Target=DeviceFarm_20150623.CreateDevicePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDevicePoolResult> CreateDevicePoolAsync(CreateDevicePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.CreateDevicePool";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDevicePoolResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a profile that can be applied to one or more private fleet device instances.
		/// CreateInstanceProfile #X-Amz-Target=DeviceFarm_20150623.CreateInstanceProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateInstanceProfileResult> CreateInstanceProfileAsync(CreateInstanceProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.CreateInstanceProfile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateInstanceProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a network profile.
		/// CreateNetworkProfile #X-Amz-Target=DeviceFarm_20150623.CreateNetworkProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateNetworkProfileResult> CreateNetworkProfileAsync(CreateNetworkProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.CreateNetworkProfile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateNetworkProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a project.
		/// CreateProject #X-Amz-Target=DeviceFarm_20150623.CreateProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProjectResult> CreateProjectAsync(CreateProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.CreateProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Specifies and starts a remote access session.
		/// CreateRemoteAccessSession #X-Amz-Target=DeviceFarm_20150623.CreateRemoteAccessSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateRemoteAccessSessionResult> CreateRemoteAccessSessionAsync(CreateRemoteAccessSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.CreateRemoteAccessSession";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateRemoteAccessSessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a Selenium testing project. Projects are used to track <a>TestGridSession</a> instances.
		/// CreateTestGridProject #X-Amz-Target=DeviceFarm_20150623.CreateTestGridProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTestGridProjectResult> CreateTestGridProjectAsync(CreateTestGridProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.CreateTestGridProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTestGridProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a signed, short-term URL that can be passed to a Selenium <code>RemoteWebDriver</code> constructor.
		/// CreateTestGridUrl #X-Amz-Target=DeviceFarm_20150623.CreateTestGridUrl
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTestGridUrlResult> CreateTestGridUrlAsync(CreateTestGridUrlRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.CreateTestGridUrl";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTestGridUrlResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Uploads an app or test scripts.
		/// CreateUpload #X-Amz-Target=DeviceFarm_20150623.CreateUpload
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUploadResult> CreateUploadAsync(CreateUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.CreateUpload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateUploadResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud (VPC) endpoint.
		/// CreateVPCEConfiguration #X-Amz-Target=DeviceFarm_20150623.CreateVPCEConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateVPCEConfigurationResult> CreateVPCEConfigurationAsync(CreateVPCEConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.CreateVPCEConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateVPCEConfigurationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a device pool given the pool ARN. Does not allow deletion of curated pools owned by the system.
		/// DeleteDevicePool #X-Amz-Target=DeviceFarm_20150623.DeleteDevicePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDevicePoolResult> DeleteDevicePoolAsync(DeleteDevicePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.DeleteDevicePool";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDevicePoolResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a profile that can be applied to one or more private device instances.
		/// DeleteInstanceProfile #X-Amz-Target=DeviceFarm_20150623.DeleteInstanceProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteInstanceProfileResult> DeleteInstanceProfileAsync(DeleteInstanceProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.DeleteInstanceProfile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteInstanceProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a network profile.
		/// DeleteNetworkProfile #X-Amz-Target=DeviceFarm_20150623.DeleteNetworkProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteNetworkProfileResult> DeleteNetworkProfileAsync(DeleteNetworkProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.DeleteNetworkProfile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteNetworkProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an AWS Device Farm project, given the project ARN.</p> <p> Deleting this resource does not stop an in-progress run.</p>
		/// DeleteProject #X-Amz-Target=DeviceFarm_20150623.DeleteProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteProjectResult> DeleteProjectAsync(DeleteProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.DeleteProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a completed remote access session and its results.
		/// DeleteRemoteAccessSession #X-Amz-Target=DeviceFarm_20150623.DeleteRemoteAccessSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRemoteAccessSessionResult> DeleteRemoteAccessSessionAsync(DeleteRemoteAccessSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.DeleteRemoteAccessSession";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRemoteAccessSessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the run, given the run ARN.</p> <p> Deleting this resource does not stop an in-progress run.</p>
		/// DeleteRun #X-Amz-Target=DeviceFarm_20150623.DeleteRun
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteRunResult> DeleteRunAsync(DeleteRunRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.DeleteRun";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteRunResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Deletes a Selenium testing project and all content generated under it. </p> <important> <p>You cannot undo this operation.</p> </important> <note> <p>You cannot delete a project if it has active sessions.</p> </note>
		/// DeleteTestGridProject #X-Amz-Target=DeviceFarm_20150623.DeleteTestGridProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTestGridProjectResult> DeleteTestGridProjectAsync(DeleteTestGridProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.DeleteTestGridProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTestGridProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an upload given the upload ARN.
		/// DeleteUpload #X-Amz-Target=DeviceFarm_20150623.DeleteUpload
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteUploadResult> DeleteUploadAsync(DeleteUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.DeleteUpload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteUploadResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a configuration for your Amazon Virtual Private Cloud (VPC) endpoint.
		/// DeleteVPCEConfiguration #X-Amz-Target=DeviceFarm_20150623.DeleteVPCEConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteVPCEConfigurationResult> DeleteVPCEConfigurationAsync(DeleteVPCEConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.DeleteVPCEConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteVPCEConfigurationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the number of unmetered iOS or unmetered Android devices that have been purchased by the account.
		/// GetAccountSettings #X-Amz-Target=DeviceFarm_20150623.GetAccountSettings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAccountSettingsResult> GetAccountSettingsAsync(GetAccountSettingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetAccountSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAccountSettingsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a unique device type.
		/// GetDevice #X-Amz-Target=DeviceFarm_20150623.GetDevice
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeviceResult> GetDeviceAsync(GetDeviceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetDevice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDeviceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a device instance that belongs to a private device fleet.
		/// GetDeviceInstance #X-Amz-Target=DeviceFarm_20150623.GetDeviceInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDeviceInstanceResult> GetDeviceInstanceAsync(GetDeviceInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetDeviceInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDeviceInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a device pool.
		/// GetDevicePool #X-Amz-Target=DeviceFarm_20150623.GetDevicePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDevicePoolResult> GetDevicePoolAsync(GetDevicePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetDevicePool";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDevicePoolResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about compatibility with a device pool.
		/// GetDevicePoolCompatibility #X-Amz-Target=DeviceFarm_20150623.GetDevicePoolCompatibility
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetDevicePoolCompatibilityResult> GetDevicePoolCompatibilityAsync(GetDevicePoolCompatibilityRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetDevicePoolCompatibility";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDevicePoolCompatibilityResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the specified instance profile.
		/// GetInstanceProfile #X-Amz-Target=DeviceFarm_20150623.GetInstanceProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetInstanceProfileResult> GetInstanceProfileAsync(GetInstanceProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetInstanceProfile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetInstanceProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a job.
		/// GetJob #X-Amz-Target=DeviceFarm_20150623.GetJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetJobResult> GetJobAsync(GetJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a network profile.
		/// GetNetworkProfile #X-Amz-Target=DeviceFarm_20150623.GetNetworkProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetNetworkProfileResult> GetNetworkProfileAsync(GetNetworkProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetNetworkProfile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetNetworkProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the current status and future status of all offerings purchased by an AWS account. The response indicates how many offerings are currently available and the offerings that will be available in the next period. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.
		/// GetOfferingStatus #X-Amz-Target=DeviceFarm_20150623.GetOfferingStatus
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetOfferingStatusResult> GetOfferingStatusAsync(string nextToken, GetOfferingStatusRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetOfferingStatus?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOfferingStatusResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a project.
		/// GetProject #X-Amz-Target=DeviceFarm_20150623.GetProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetProjectResult> GetProjectAsync(GetProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a link to a currently running remote access session.
		/// GetRemoteAccessSession #X-Amz-Target=DeviceFarm_20150623.GetRemoteAccessSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRemoteAccessSessionResult> GetRemoteAccessSessionAsync(GetRemoteAccessSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetRemoteAccessSession";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRemoteAccessSessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a run.
		/// GetRun #X-Amz-Target=DeviceFarm_20150623.GetRun
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRunResult> GetRunAsync(GetRunRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetRun";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRunResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a suite.
		/// GetSuite #X-Amz-Target=DeviceFarm_20150623.GetSuite
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetSuiteResult> GetSuiteAsync(GetSuiteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetSuite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSuiteResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about a test.
		/// GetTest #X-Amz-Target=DeviceFarm_20150623.GetTest
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetTestResult> GetTestAsync(GetTestRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetTest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTestResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a Selenium testing project.
		/// GetTestGridProject #X-Amz-Target=DeviceFarm_20150623.GetTestGridProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetTestGridProjectResult> GetTestGridProjectAsync(GetTestGridProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetTestGridProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTestGridProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>A session is an instance of a browser created through a <code>RemoteWebDriver</code> with the URL from <a>CreateTestGridUrlResult$url</a>. You can use the following to look up sessions:</p> <ul> <li> <p>The session ARN (<a>GetTestGridSessionRequest$sessionArn</a>).</p> </li> <li> <p>The project ARN and a session ID (<a>GetTestGridSessionRequest$projectArn</a> and <a>GetTestGridSessionRequest$sessionId</a>).</p> </li> </ul> <p/>
		/// GetTestGridSession #X-Amz-Target=DeviceFarm_20150623.GetTestGridSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetTestGridSessionResult> GetTestGridSessionAsync(GetTestGridSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetTestGridSession";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTestGridSessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about an upload.
		/// GetUpload #X-Amz-Target=DeviceFarm_20150623.GetUpload
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetUploadResult> GetUploadAsync(GetUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetUpload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetUploadResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the configuration settings for your Amazon Virtual Private Cloud (VPC) endpoint.
		/// GetVPCEConfiguration #X-Amz-Target=DeviceFarm_20150623.GetVPCEConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetVPCEConfigurationResult> GetVPCEConfigurationAsync(GetVPCEConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.GetVPCEConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVPCEConfigurationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Installs an application to the device in a remote access session. For Android applications, the file must be in .apk format. For iOS applications, the file must be in .ipa format.
		/// InstallToRemoteAccessSession #X-Amz-Target=DeviceFarm_20150623.InstallToRemoteAccessSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<InstallToRemoteAccessSessionResult> InstallToRemoteAccessSessionAsync(InstallToRemoteAccessSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.InstallToRemoteAccessSession";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InstallToRemoteAccessSessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about artifacts.
		/// ListArtifacts #X-Amz-Target=DeviceFarm_20150623.ListArtifacts
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListArtifactsResult> ListArtifactsAsync(string nextToken, ListArtifactsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListArtifacts?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListArtifactsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the private device instances associated with one or more AWS accounts.
		/// ListDeviceInstances #X-Amz-Target=DeviceFarm_20150623.ListDeviceInstances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListDeviceInstancesResult> ListDeviceInstancesAsync(ListDeviceInstancesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListDeviceInstances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDeviceInstancesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about device pools.
		/// ListDevicePools #X-Amz-Target=DeviceFarm_20150623.ListDevicePools
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDevicePoolsResult> ListDevicePoolsAsync(string nextToken, ListDevicePoolsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListDevicePools?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDevicePoolsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about unique device types.
		/// ListDevices #X-Amz-Target=DeviceFarm_20150623.ListDevices
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDevicesResult> ListDevicesAsync(string nextToken, ListDevicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListDevices?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDevicesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all the instance profiles in an AWS account.
		/// ListInstanceProfiles #X-Amz-Target=DeviceFarm_20150623.ListInstanceProfiles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListInstanceProfilesResult> ListInstanceProfilesAsync(ListInstanceProfilesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListInstanceProfiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInstanceProfilesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about jobs for a given test run.
		/// ListJobs #X-Amz-Target=DeviceFarm_20150623.ListJobs
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListJobsResult> ListJobsAsync(string nextToken, ListJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListJobs?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the list of available network profiles.
		/// ListNetworkProfiles #X-Amz-Target=DeviceFarm_20150623.ListNetworkProfiles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListNetworkProfilesResult> ListNetworkProfilesAsync(ListNetworkProfilesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListNetworkProfiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListNetworkProfilesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of offering promotions. Each offering promotion record contains the ID and description of the promotion. The API returns a <code>NotEligible</code> error if the caller is not permitted to invoke the operation. Contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a> if you must be able to invoke this operation.
		/// ListOfferingPromotions #X-Amz-Target=DeviceFarm_20150623.ListOfferingPromotions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListOfferingPromotionsResult> ListOfferingPromotionsAsync(ListOfferingPromotionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListOfferingPromotions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOfferingPromotionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS account. The list is paginated and ordered by a descending timestamp (most recent transactions are first). The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.
		/// ListOfferingTransactions #X-Amz-Target=DeviceFarm_20150623.ListOfferingTransactions
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOfferingTransactionsResult> ListOfferingTransactionsAsync(string nextToken, ListOfferingTransactionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListOfferingTransactions?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOfferingTransactionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of products or offerings that the user can manage through the API. Each offering record indicates the recurring price per unit and the frequency for that offering. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.
		/// ListOfferings #X-Amz-Target=DeviceFarm_20150623.ListOfferings
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOfferingsResult> ListOfferingsAsync(string nextToken, ListOfferingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListOfferings?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOfferingsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about projects.
		/// ListProjects #X-Amz-Target=DeviceFarm_20150623.ListProjects
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProjectsResult> ListProjectsAsync(string nextToken, ListProjectsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListProjects?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProjectsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all currently running remote access sessions.
		/// ListRemoteAccessSessions #X-Amz-Target=DeviceFarm_20150623.ListRemoteAccessSessions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListRemoteAccessSessionsResult> ListRemoteAccessSessionsAsync(ListRemoteAccessSessionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListRemoteAccessSessions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRemoteAccessSessionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about runs, given an AWS Device Farm project ARN.
		/// ListRuns #X-Amz-Target=DeviceFarm_20150623.ListRuns
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListRunsResult> ListRunsAsync(string nextToken, ListRunsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListRuns?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRunsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about samples, given an AWS Device Farm job ARN.
		/// ListSamples #X-Amz-Target=DeviceFarm_20150623.ListSamples
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSamplesResult> ListSamplesAsync(string nextToken, ListSamplesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListSamples?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSamplesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about test suites for a given job.
		/// ListSuites #X-Amz-Target=DeviceFarm_20150623.ListSuites
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSuitesResult> ListSuitesAsync(string nextToken, ListSuitesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListSuites?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSuitesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the tags for an AWS Device Farm resource.
		/// ListTagsForResource #X-Amz-Target=DeviceFarm_20150623.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListTagsForResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all Selenium testing projects in your account.
		/// ListTestGridProjects #X-Amz-Target=DeviceFarm_20150623.ListTestGridProjects
		/// </summary>
		/// <param name="maxResult">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestGridProjectsResult> ListTestGridProjectsAsync(string maxResult, string nextToken, ListTestGridProjectsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListTestGridProjects?maxResult=" + (maxResult==null? "" : System.Uri.EscapeDataString(maxResult))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTestGridProjectsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the actions taken in a <a>TestGridSession</a>.
		/// ListTestGridSessionActions #X-Amz-Target=DeviceFarm_20150623.ListTestGridSessionActions
		/// </summary>
		/// <param name="maxResult">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestGridSessionActionsResult> ListTestGridSessionActionsAsync(string maxResult, string nextToken, ListTestGridSessionActionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListTestGridSessionActions?maxResult=" + (maxResult==null? "" : System.Uri.EscapeDataString(maxResult))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTestGridSessionActionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of artifacts created during the session.
		/// ListTestGridSessionArtifacts #X-Amz-Target=DeviceFarm_20150623.ListTestGridSessionArtifacts
		/// </summary>
		/// <param name="maxResult">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestGridSessionArtifactsResult> ListTestGridSessionArtifactsAsync(string maxResult, string nextToken, ListTestGridSessionArtifactsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListTestGridSessionArtifacts?maxResult=" + (maxResult==null? "" : System.Uri.EscapeDataString(maxResult))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTestGridSessionArtifactsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of sessions for a <a>TestGridProject</a>.
		/// ListTestGridSessions #X-Amz-Target=DeviceFarm_20150623.ListTestGridSessions
		/// </summary>
		/// <param name="maxResult">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestGridSessionsResult> ListTestGridSessionsAsync(string maxResult, string nextToken, ListTestGridSessionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListTestGridSessions?maxResult=" + (maxResult==null? "" : System.Uri.EscapeDataString(maxResult))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTestGridSessionsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about tests in a given test suite.
		/// ListTests #X-Amz-Target=DeviceFarm_20150623.ListTests
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTestsResult> ListTestsAsync(string nextToken, ListTestsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListTests?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTestsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about unique problems, such as exceptions or crashes.</p> <p>Unique problems are defined as a single instance of an error across a run, job, or suite. For example, if a call in your application consistently raises an exception (<code>OutOfBoundsException in MyActivity.java:386</code>), <code>ListUniqueProblems</code> returns a single entry instead of many individual entries for that exception.</p>
		/// ListUniqueProblems #X-Amz-Target=DeviceFarm_20150623.ListUniqueProblems
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUniqueProblemsResult> ListUniqueProblemsAsync(string nextToken, ListUniqueProblemsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListUniqueProblems?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUniqueProblemsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about uploads, given an AWS Device Farm project ARN.
		/// ListUploads #X-Amz-Target=DeviceFarm_20150623.ListUploads
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListUploadsResult> ListUploadsAsync(string nextToken, ListUploadsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListUploads?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUploadsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all Amazon Virtual Private Cloud (VPC) endpoint configurations in the AWS account.
		/// ListVPCEConfigurations #X-Amz-Target=DeviceFarm_20150623.ListVPCEConfigurations
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListVPCEConfigurationsResult> ListVPCEConfigurationsAsync(ListVPCEConfigurationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ListVPCEConfigurations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVPCEConfigurationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Immediately purchases offerings for an AWS account. Offerings renew with the latest total purchased quantity for an offering, unless the renewal was overridden. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.
		/// PurchaseOffering #X-Amz-Target=DeviceFarm_20150623.PurchaseOffering
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PurchaseOfferingResult> PurchaseOfferingAsync(PurchaseOfferingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.PurchaseOffering";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PurchaseOfferingResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Explicitly sets the quantity of devices to renew for an offering, starting from the <code>effectiveDate</code> of the next period. The API returns a <code>NotEligible</code> error if the user is not permitted to invoke the operation. If you must be able to invoke this operation, contact <a href="mailto:aws-devicefarm-support@amazon.com">aws-devicefarm-support@amazon.com</a>.
		/// RenewOffering #X-Amz-Target=DeviceFarm_20150623.RenewOffering
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RenewOfferingResult> RenewOfferingAsync(RenewOfferingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.RenewOffering";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RenewOfferingResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Schedules a run.
		/// ScheduleRun #X-Amz-Target=DeviceFarm_20150623.ScheduleRun
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ScheduleRunResult> ScheduleRunAsync(ScheduleRunRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.ScheduleRun";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleRunResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Initiates a stop request for the current job. AWS Device Farm immediately stops the job on the device where tests have not started. You are not billed for this device. On the device where tests have started, setup suite and teardown suite tests run to completion on the device. You are billed for setup, teardown, and any tests that were in progress or already completed.
		/// StopJob #X-Amz-Target=DeviceFarm_20150623.StopJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopJobResult> StopJobAsync(StopJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.StopJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Ends a specified remote access session.
		/// StopRemoteAccessSession #X-Amz-Target=DeviceFarm_20150623.StopRemoteAccessSession
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopRemoteAccessSessionResult> StopRemoteAccessSessionAsync(StopRemoteAccessSessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.StopRemoteAccessSession";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopRemoteAccessSessionResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Initiates a stop request for the current test run. AWS Device Farm immediately stops the run on devices where tests have not started. You are not billed for these devices. On devices where tests have started executing, setup suite and teardown suite tests run to completion on those devices. You are billed for setup, teardown, and any tests that were in progress or already completed.
		/// StopRun #X-Amz-Target=DeviceFarm_20150623.StopRun
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopRunResult> StopRunAsync(StopRunRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.StopRun";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopRunResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are also deleted.
		/// TagResource #X-Amz-Target=DeviceFarm_20150623.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.TagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified tags from a resource.
		/// UntagResource #X-Amz-Target=DeviceFarm_20150623.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.UntagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates information about a private device instance.
		/// UpdateDeviceInstance #X-Amz-Target=DeviceFarm_20150623.UpdateDeviceInstance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDeviceInstanceResult> UpdateDeviceInstanceAsync(UpdateDeviceInstanceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.UpdateDeviceInstance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDeviceInstanceResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the name, description, and rules in a device pool given the attributes and the pool ARN. Rule updates are all-or-nothing, meaning they can only be updated as a whole (or not at all).
		/// UpdateDevicePool #X-Amz-Target=DeviceFarm_20150623.UpdateDevicePool
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateDevicePoolResult> UpdateDevicePoolAsync(UpdateDevicePoolRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.UpdateDevicePool";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDevicePoolResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates information about an existing private device instance profile.
		/// UpdateInstanceProfile #X-Amz-Target=DeviceFarm_20150623.UpdateInstanceProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateInstanceProfileResult> UpdateInstanceProfileAsync(UpdateInstanceProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.UpdateInstanceProfile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateInstanceProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the network profile.
		/// UpdateNetworkProfile #X-Amz-Target=DeviceFarm_20150623.UpdateNetworkProfile
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateNetworkProfileResult> UpdateNetworkProfileAsync(UpdateNetworkProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.UpdateNetworkProfile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateNetworkProfileResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Modifies the specified project name, given the project ARN and a new name.
		/// UpdateProject #X-Amz-Target=DeviceFarm_20150623.UpdateProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateProjectResult> UpdateProjectAsync(UpdateProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.UpdateProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Change details of a project.
		/// UpdateTestGridProject #X-Amz-Target=DeviceFarm_20150623.UpdateTestGridProject
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateTestGridProjectResult> UpdateTestGridProjectAsync(UpdateTestGridProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.UpdateTestGridProject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTestGridProjectResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an uploaded test spec.
		/// UpdateUpload #X-Amz-Target=DeviceFarm_20150623.UpdateUpload
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateUploadResult> UpdateUploadAsync(UpdateUploadRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.UpdateUpload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateUploadResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates information about an Amazon Virtual Private Cloud (VPC) endpoint configuration.
		/// UpdateVPCEConfiguration #X-Amz-Target=DeviceFarm_20150623.UpdateVPCEConfiguration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateVPCEConfigurationResult> UpdateVPCEConfigurationAsync(UpdateVPCEConfigurationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DeviceFarm_20150623.UpdateVPCEConfiguration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateVPCEConfigurationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum CreateDevicePoolX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.CreateDevicePool")]
		DeviceFarm_20150623_CreateDevicePool = 0,
	}
	
	public enum CreateInstanceProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.CreateInstanceProfile")]
		DeviceFarm_20150623_CreateInstanceProfile = 0,
	}
	
	public enum CreateNetworkProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.CreateNetworkProfile")]
		DeviceFarm_20150623_CreateNetworkProfile = 0,
	}
	
	public enum CreateProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.CreateProject")]
		DeviceFarm_20150623_CreateProject = 0,
	}
	
	public enum CreateRemoteAccessSessionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.CreateRemoteAccessSession")]
		DeviceFarm_20150623_CreateRemoteAccessSession = 0,
	}
	
	public enum CreateTestGridProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.CreateTestGridProject")]
		DeviceFarm_20150623_CreateTestGridProject = 0,
	}
	
	public enum CreateTestGridUrlX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.CreateTestGridUrl")]
		DeviceFarm_20150623_CreateTestGridUrl = 0,
	}
	
	public enum CreateUploadX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.CreateUpload")]
		DeviceFarm_20150623_CreateUpload = 0,
	}
	
	public enum CreateVPCEConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.CreateVPCEConfiguration")]
		DeviceFarm_20150623_CreateVPCEConfiguration = 0,
	}
	
	public enum DeleteDevicePoolX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.DeleteDevicePool")]
		DeviceFarm_20150623_DeleteDevicePool = 0,
	}
	
	public enum DeleteInstanceProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.DeleteInstanceProfile")]
		DeviceFarm_20150623_DeleteInstanceProfile = 0,
	}
	
	public enum DeleteNetworkProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.DeleteNetworkProfile")]
		DeviceFarm_20150623_DeleteNetworkProfile = 0,
	}
	
	public enum DeleteProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.DeleteProject")]
		DeviceFarm_20150623_DeleteProject = 0,
	}
	
	public enum DeleteRemoteAccessSessionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.DeleteRemoteAccessSession")]
		DeviceFarm_20150623_DeleteRemoteAccessSession = 0,
	}
	
	public enum DeleteRunX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.DeleteRun")]
		DeviceFarm_20150623_DeleteRun = 0,
	}
	
	public enum DeleteTestGridProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.DeleteTestGridProject")]
		DeviceFarm_20150623_DeleteTestGridProject = 0,
	}
	
	public enum DeleteUploadX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.DeleteUpload")]
		DeviceFarm_20150623_DeleteUpload = 0,
	}
	
	public enum DeleteVPCEConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.DeleteVPCEConfiguration")]
		DeviceFarm_20150623_DeleteVPCEConfiguration = 0,
	}
	
	public enum GetAccountSettingsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetAccountSettings")]
		DeviceFarm_20150623_GetAccountSettings = 0,
	}
	
	public enum GetDeviceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetDevice")]
		DeviceFarm_20150623_GetDevice = 0,
	}
	
	public enum GetDeviceInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetDeviceInstance")]
		DeviceFarm_20150623_GetDeviceInstance = 0,
	}
	
	public enum GetDevicePoolX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetDevicePool")]
		DeviceFarm_20150623_GetDevicePool = 0,
	}
	
	public enum GetDevicePoolCompatibilityX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetDevicePoolCompatibility")]
		DeviceFarm_20150623_GetDevicePoolCompatibility = 0,
	}
	
	public enum GetInstanceProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetInstanceProfile")]
		DeviceFarm_20150623_GetInstanceProfile = 0,
	}
	
	public enum GetJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetJob")]
		DeviceFarm_20150623_GetJob = 0,
	}
	
	public enum GetNetworkProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetNetworkProfile")]
		DeviceFarm_20150623_GetNetworkProfile = 0,
	}
	
	public enum GetOfferingStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetOfferingStatus")]
		DeviceFarm_20150623_GetOfferingStatus = 0,
	}
	
	public enum GetProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetProject")]
		DeviceFarm_20150623_GetProject = 0,
	}
	
	public enum GetRemoteAccessSessionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetRemoteAccessSession")]
		DeviceFarm_20150623_GetRemoteAccessSession = 0,
	}
	
	public enum GetRunX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetRun")]
		DeviceFarm_20150623_GetRun = 0,
	}
	
	public enum GetSuiteX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetSuite")]
		DeviceFarm_20150623_GetSuite = 0,
	}
	
	public enum GetTestX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetTest")]
		DeviceFarm_20150623_GetTest = 0,
	}
	
	public enum GetTestGridProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetTestGridProject")]
		DeviceFarm_20150623_GetTestGridProject = 0,
	}
	
	public enum GetTestGridSessionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetTestGridSession")]
		DeviceFarm_20150623_GetTestGridSession = 0,
	}
	
	public enum GetUploadX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetUpload")]
		DeviceFarm_20150623_GetUpload = 0,
	}
	
	public enum GetVPCEConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.GetVPCEConfiguration")]
		DeviceFarm_20150623_GetVPCEConfiguration = 0,
	}
	
	public enum InstallToRemoteAccessSessionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.InstallToRemoteAccessSession")]
		DeviceFarm_20150623_InstallToRemoteAccessSession = 0,
	}
	
	public enum ListArtifactsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListArtifacts")]
		DeviceFarm_20150623_ListArtifacts = 0,
	}
	
	public enum ListDeviceInstancesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListDeviceInstances")]
		DeviceFarm_20150623_ListDeviceInstances = 0,
	}
	
	public enum ListDevicePoolsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListDevicePools")]
		DeviceFarm_20150623_ListDevicePools = 0,
	}
	
	public enum ListDevicesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListDevices")]
		DeviceFarm_20150623_ListDevices = 0,
	}
	
	public enum ListInstanceProfilesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListInstanceProfiles")]
		DeviceFarm_20150623_ListInstanceProfiles = 0,
	}
	
	public enum ListJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListJobs")]
		DeviceFarm_20150623_ListJobs = 0,
	}
	
	public enum ListNetworkProfilesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListNetworkProfiles")]
		DeviceFarm_20150623_ListNetworkProfiles = 0,
	}
	
	public enum ListOfferingPromotionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListOfferingPromotions")]
		DeviceFarm_20150623_ListOfferingPromotions = 0,
	}
	
	public enum ListOfferingTransactionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListOfferingTransactions")]
		DeviceFarm_20150623_ListOfferingTransactions = 0,
	}
	
	public enum ListOfferingsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListOfferings")]
		DeviceFarm_20150623_ListOfferings = 0,
	}
	
	public enum ListProjectsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListProjects")]
		DeviceFarm_20150623_ListProjects = 0,
	}
	
	public enum ListRemoteAccessSessionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListRemoteAccessSessions")]
		DeviceFarm_20150623_ListRemoteAccessSessions = 0,
	}
	
	public enum ListRunsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListRuns")]
		DeviceFarm_20150623_ListRuns = 0,
	}
	
	public enum ListSamplesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListSamples")]
		DeviceFarm_20150623_ListSamples = 0,
	}
	
	public enum ListSuitesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListSuites")]
		DeviceFarm_20150623_ListSuites = 0,
	}
	
	public enum ListTagsForResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListTagsForResource")]
		DeviceFarm_20150623_ListTagsForResource = 0,
	}
	
	public enum ListTestGridProjectsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListTestGridProjects")]
		DeviceFarm_20150623_ListTestGridProjects = 0,
	}
	
	public enum ListTestGridSessionActionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListTestGridSessionActions")]
		DeviceFarm_20150623_ListTestGridSessionActions = 0,
	}
	
	public enum ListTestGridSessionArtifactsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListTestGridSessionArtifacts")]
		DeviceFarm_20150623_ListTestGridSessionArtifacts = 0,
	}
	
	public enum ListTestGridSessionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListTestGridSessions")]
		DeviceFarm_20150623_ListTestGridSessions = 0,
	}
	
	public enum ListTestsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListTests")]
		DeviceFarm_20150623_ListTests = 0,
	}
	
	public enum ListUniqueProblemsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListUniqueProblems")]
		DeviceFarm_20150623_ListUniqueProblems = 0,
	}
	
	public enum ListUploadsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListUploads")]
		DeviceFarm_20150623_ListUploads = 0,
	}
	
	public enum ListVPCEConfigurationsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ListVPCEConfigurations")]
		DeviceFarm_20150623_ListVPCEConfigurations = 0,
	}
	
	public enum PurchaseOfferingX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.PurchaseOffering")]
		DeviceFarm_20150623_PurchaseOffering = 0,
	}
	
	public enum RenewOfferingX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.RenewOffering")]
		DeviceFarm_20150623_RenewOffering = 0,
	}
	
	public enum ScheduleRunX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.ScheduleRun")]
		DeviceFarm_20150623_ScheduleRun = 0,
	}
	
	public enum StopJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.StopJob")]
		DeviceFarm_20150623_StopJob = 0,
	}
	
	public enum StopRemoteAccessSessionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.StopRemoteAccessSession")]
		DeviceFarm_20150623_StopRemoteAccessSession = 0,
	}
	
	public enum StopRunX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.StopRun")]
		DeviceFarm_20150623_StopRun = 0,
	}
	
	public enum TagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.TagResource")]
		DeviceFarm_20150623_TagResource = 0,
	}
	
	public enum UntagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.UntagResource")]
		DeviceFarm_20150623_UntagResource = 0,
	}
	
	public enum UpdateDeviceInstanceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.UpdateDeviceInstance")]
		DeviceFarm_20150623_UpdateDeviceInstance = 0,
	}
	
	public enum UpdateDevicePoolX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.UpdateDevicePool")]
		DeviceFarm_20150623_UpdateDevicePool = 0,
	}
	
	public enum UpdateInstanceProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.UpdateInstanceProfile")]
		DeviceFarm_20150623_UpdateInstanceProfile = 0,
	}
	
	public enum UpdateNetworkProfileX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.UpdateNetworkProfile")]
		DeviceFarm_20150623_UpdateNetworkProfile = 0,
	}
	
	public enum UpdateProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.UpdateProject")]
		DeviceFarm_20150623_UpdateProject = 0,
	}
	
	public enum UpdateTestGridProjectX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.UpdateTestGridProject")]
		DeviceFarm_20150623_UpdateTestGridProject = 0,
	}
	
	public enum UpdateUploadX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.UpdateUpload")]
		DeviceFarm_20150623_UpdateUpload = 0,
	}
	
	public enum UpdateVPCEConfigurationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeviceFarm_20150623.UpdateVPCEConfiguration")]
		DeviceFarm_20150623_UpdateVPCEConfiguration = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
