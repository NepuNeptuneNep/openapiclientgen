//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Continent
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Country
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Isp
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		[System.Runtime.Serialization.DataMember(Name="accuracyRadius")]
		public System.Nullable<System.Int32> AccuracyRadius { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cityName")]
		public string CityName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continent")]
		public Continent Continent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public Country Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Single> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Single> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subdivisions")]
		public Subdivision[] Subdivisions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Subdivision
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Proxy
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessType")]
		public string AccessType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSsl")]
		public System.Nullable<System.Boolean> IsSsl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isp")]
		public Isp Isp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastTested")]
		public string LastTested { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timings")]
		public Timings Timings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uptime")]
		public System.Nullable<System.Single> Uptime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Timings
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectTime")]
		public System.Nullable<System.Single> ConnectTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstByteTime")]
		public System.Nullable<System.Single> FirstByteTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseTime")]
		public System.Nullable<System.Single> ResponseTime { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a random proxy for chosen parameters.
		/// ProxyGetByTokenAndAddressAndPortAndProtocolAndAccessTypeAndResponseTimeAndIsSslAndUptimeAndCountryAndContinentAndTimezoneAndLastTested proxy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Proxy> ProxyGetByTokenAndAddressAndPortAndProtocolAndAccessTypeAndResponseTimeAndIsSslAndUptimeAndCountryAndContinentAndTimezoneAndLastTestedAsync(string Token, string Address, string Port, string Protocol, string AccessType, string ResponseTime, string IsSsl, string Uptime, string Country, string Continent, string Timezone, string LastTested, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "proxy?Token=" + (Token==null? "" : System.Uri.EscapeDataString(Token))+"&Address=" + (Address==null? "" : System.Uri.EscapeDataString(Address))+"&Port=" + (Port==null? "" : System.Uri.EscapeDataString(Port))+"&Protocol=" + (Protocol==null? "" : System.Uri.EscapeDataString(Protocol))+"&AccessType=" + (AccessType==null? "" : System.Uri.EscapeDataString(AccessType))+"&ResponseTime=" + (ResponseTime==null? "" : System.Uri.EscapeDataString(ResponseTime))+"&IsSsl=" + (IsSsl==null? "" : System.Uri.EscapeDataString(IsSsl))+"&Uptime=" + (Uptime==null? "" : System.Uri.EscapeDataString(Uptime))+"&Country=" + (Country==null? "" : System.Uri.EscapeDataString(Country))+"&Continent=" + (Continent==null? "" : System.Uri.EscapeDataString(Continent))+"&Timezone=" + (Timezone==null? "" : System.Uri.EscapeDataString(Timezone))+"&LastTested=" + (LastTested==null? "" : System.Uri.EscapeDataString(LastTested));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Proxy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
