//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// Short identifier for the error, suitable for indicating the specific error within client code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// List of the specific fields, and the errors found with their contents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public ErrorField[] Fields { get; set; }
		
		/// <summary>
		/// Human-readable, English description of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorField
	{
		
		/// <summary>
		/// Short identifier for the error, suitable for indicating the specific error within client code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Human-readable, English description of the problem with the contents of the field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// <ul>
		///<li style='margin-left: 12px;'>JSONPath referring to a field containing an error</li>
		///<strong style='margin-left: 12px;'>OR</strong>
		///<li style='margin-left: 12px;'>JSONPath referring to a field that refers to an object containing an error, with more detail in `pathRelated`</li>
		///</ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// JSONPath referring to a field containing an error, which is referenced by `path`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathRelated")]
		public string PathRelated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorLimit
	{
		
		/// <summary>
		/// Short identifier for the error, suitable for indicating the specific error within client code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// List of the specific fields, and the errors found with their contents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public ErrorField[] Fields { get; set; }
		
		/// <summary>
		/// Human-readable, English description of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Number of seconds to wait before attempting a similar request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retryAfterSec")]
		public string RetryAfterSec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Pagination
	{
		
		/// <summary>
		/// URI to access the first page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first")]
		public string First { get; set; }
		
		/// <summary>
		/// URI to access the last page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last")]
		public string Last { get; set; }
		
		/// <summary>
		/// URI to access the next page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// URI to access the previous page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// Number of records available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductGroup
	{
		
		/// <summary>
		/// Primary key of a grouping of related Subscriptions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productGroupKey")]
		public string ProductGroupKey { get; set; }
		
		/// <summary>
		/// The number of Subscriptions that the shopper owns in this group
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionCount")]
		public int SubscriptionCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subscription
	{
		
		/// <summary>
		/// An array of additional products that have been purchased to augment this Subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addons")]
		public SubscriptionAddon[] Addons { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="billing")]
		public SubscriptionBilling Billing { get; set; }
		
		/// <summary>
		/// Whether or not the Subscription is allowed to be canceled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelable")]
		public System.Nullable<System.Boolean> Cancelable { get; set; }
		
		/// <summary>
		/// When the Subscription was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// When the Subscription will expire
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresAt")]
		public string ExpiresAt { get; set; }
		
		/// <summary>
		/// A human readable description of this Subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The url to use or manage this Subscription's active product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="launchUrl")]
		public string LaunchUrl { get; set; }
		
		/// <summary>
		/// Unique identifier of the payment profile that will be used to automatically renew this Subscription
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentProfileId")]
		public System.Nullable<System.Int32> PaymentProfileId { get; set; }
		
		/// <summary>
		/// Whether the renewal price will be based from the list price or a locked-in price for this shopper
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceLocked")]
		public bool PriceLocked { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="product")]
		public SubscriptionProduct Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relations")]
		public SubscriptionRelations Relations { get; set; }
		
		/// <summary>
		/// Whether or not the Subscription is set to be automatically renewed via the billing agent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="renewAuto")]
		public bool RenewAuto { get; set; }
		
		/// <summary>
		/// Whether or not the Subscription is allowed to be renewed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="renewable")]
		public bool Renewable { get; set; }
		
		/// <summary>
		/// Whether the Subscription is active or the specific non-active state
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public SubscriptionStatus Status { get; set; }
		
		/// <summary>
		/// Unique identifier of the Subscription
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		/// <summary>
		/// Whether or not the Subscription is allowed to be upgraded
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upgradeable")]
		public bool Upgradeable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionAddon
	{
		
		/// <summary>
		/// The financial commitment the customer has in the product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitment")]
		public SubscriptionAddonCommitment Commitment { get; set; }
		
		/// <summary>
		/// Unique identifier of the add-in product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pfid")]
		public int Pfid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SubscriptionAddonCommitment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAID")]
		PAID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FREE")]
		FREE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRIAL")]
		TRIAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SubscriptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELED")]
		CANCELED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionBilling
	{
		
		/// <summary>
		/// The financial commitment the customer has in the product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitment")]
		public SubscriptionAddonCommitment Commitment { get; set; }
		
		/// <summary>
		/// The types of charges that are past due when `status` is PAST_DUE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pastDueTypes")]
		public string[] PastDueTypes { get; set; }
		
		/// <summary>
		/// The point in time after which the Subscription will bill for automatic renewal
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="renewAt")]
		public string RenewAt { get; set; }
		
		/// <summary>
		/// Whether payments are past due
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public SubscriptionBillingStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SubscriptionBillingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CURRENT")]
		CURRENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAST_DUE")]
		PAST_DUE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pagination")]
		public Pagination Pagination { get; set; }
		
		/// <summary>
		/// A collection of subscriptions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subscriptions")]
		public Subscription[] Subscriptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionProduct
	{
		
		/// <summary>
		/// A human readable description of the Product that is subscribed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Grouping of related Subscriptions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
		
		/// <summary>
		/// Unique identifier of the Product that is subscribed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pfid")]
		public int Pfid { get; set; }
		
		/// <summary>
		/// Primary key of a grouping of related Subscriptions
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productGroupKey")]
		public string ProductGroupKey { get; set; }
		
		/// <summary>
		/// The number of `renewalPeriodUnits` that will be added by the `renewalPfid`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="renewalPeriod")]
		public int RenewalPeriod { get; set; }
		
		/// <summary>
		/// The unit of time that `renewalPeriod` is measured in
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="renewalPeriodUnit")]
		public SubscriptionProductRenewalPeriodUnit RenewalPeriodUnit { get; set; }
		
		/// <summary>
		/// Unique identifier of the renewal Product
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="renewalPfid")]
		public int RenewalPfid { get; set; }
		
		/// <summary>
		/// Whether the product supports the `billOn` option on the renewal endpoint
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supportBillOn")]
		public bool SupportBillOn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SubscriptionProductRenewalPeriodUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONTH")]
		MONTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QUARTER")]
		QUARTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEMI_ANNUAL")]
		SEMI_ANNUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YEAR")]
		YEAR = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionRelations
	{
		
		/// <summary>
		/// A set of related Subscriptions that will be canceled automatically if this Subscription is canceled
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public string[] Children { get; set; }
		
		/// <summary>
		/// Unique identifier of this Subscription's parent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionUpdate
	{
		
		/// <summary>
		/// Unique identifier of the payment profile you want to be used for automatic renewal
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentProfileId")]
		public System.Nullable<System.Int32> PaymentProfileId { get; set; }
		
		/// <summary>
		/// Whether or not you want the Subscription renew automatically
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renewAuto")]
		public System.Nullable<System.Boolean> RenewAuto { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve a list of Subscriptions for the specified Shopper
		/// List v1/subscriptions
		/// </summary>
		/// <param name="productGroupKeys">Only return Subscriptions with the specified product groups</param>
		/// <param name="includes">Optional details to be included in the response</param>
		/// <param name="offset">Number of Subscriptions to skip before starting to return paged results (must be a multiple of the limit)</param>
		/// <param name="limit">Number of Subscriptions to retrieve in this page, starting after offset
		/// Minimum: 1
		/// Maximum: 2000
		// </param>
		/// <param name="sort">Property name that will be used to sort results. "-" indicates descending</param>
		/// <returns>Request was successful</returns>
		public async Task<SubscriptionList> ListAsync(string[] productGroupKeys, string[] includes, int offset, int limit, ListSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscriptions?"+string.Join("&", productGroupKeys.Select(z => $"productGroupKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", includes.Select(z => $"includes={System.Uri.EscapeDataString(z.ToString())}"))+"&offset="+offset+"&limit="+limit+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubscriptionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a list of ProductGroups for the specified Shopper
		/// ProductGroups v1/subscriptions/productGroups
		/// </summary>
		/// <returns>Request was successful</returns>
		public async Task<ProductGroup[]> ProductGroupsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscriptions/productGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductGroup[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancel the specified Subscription
		/// Cancel v1/subscriptions/{subscriptionId}
		/// </summary>
		/// <param name="subscriptionId">Unique identifier of the Subscription to cancel</param>
		public async Task CancelAsync(string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve details for the specified Subscription
		/// Get v1/subscriptions/{subscriptionId}
		/// </summary>
		/// <param name="subscriptionId">Unique identifier of the Subscription to retrieve</param>
		/// <returns>Request was successful</returns>
		public async Task<Subscription> GetAsync(string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Subscription>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update details for the specified Subscription
		/// Only Subscription properties that can be changed without immediate financial impact can be modified via PATCH, whereas some properties can be changed by purchasing a renewal<br/><strong>This endpoint only supports JWT authentication</strong>
		/// Update v1/subscriptions/{subscriptionId}
		/// </summary>
		/// <param name="subscriptionId">Unique identifier of the Subscription to update</param>
		/// <param name="requestBody">Details of the Subscription to change</param>
		public async Task UpdateAsync(string subscriptionId, SubscriptionUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum ListSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="expiresAt")]
		expiresAt = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-expiresAt")]
		MinusexpiresAt = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
