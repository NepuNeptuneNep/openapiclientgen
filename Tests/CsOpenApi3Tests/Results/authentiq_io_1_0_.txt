//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// OIDC Address structure
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Address
	{
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street_address")]
		public string Street_address { get; set; }
	}
	
	/// <summary>
	/// Client object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Client
	{
		
		[System.Runtime.Serialization.DataMember(Name="application_type")]
		public string Application_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_name")]
		public string Client_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_uri")]
		public string Client_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public string[] Contacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="default_max_age")]
		public System.Nullable<System.Int64> Default_max_age { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="default_scopes")]
		public string[] Default_scopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grant_types")]
		public string[] Grant_types { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo_uri")]
		public string Logo_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policy_uri")]
		public string Policy_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="redirect_uris")]
		public string[] Redirect_uris { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response_types")]
		public string[] Response_types { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tos_uri")]
		public string Tos_uri { get; set; }
	}
	
	/// <summary>
	/// Error Response defined as in Section 5.2 of OAuth 2.0 [RFC6749].
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OAuth2Error
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error_description")]
		public string Error_description { get; set; }
	}
	
	/// <summary>
	/// HTTP Problem Detail
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProblemDetail
	{
		
		/// <summary>
		/// Human-readable explanation specific to this occurrence of the problem.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The HTTP status code for this occurrence of the problem.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public int Status { get; set; }
		
		/// <summary>
		/// Human-readable summary of the problem type.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("about:blank")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; } = "about:blank";
	}
	
	/// <summary>
	/// Session object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Session
	{
		
		[System.Runtime.Serialization.DataMember(Name="authenticated_at")]
		public System.Nullable<System.DateTimeOffset> Authenticated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_name")]
		public string Client_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_uri")]
		public string Client_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concluded_at")]
		public System.Nullable<System.DateTimeOffset> Concluded_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connected_at")]
		public System.Nullable<System.DateTimeOffset> Connected_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public string[] Contacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted_at")]
		public System.Nullable<System.DateTimeOffset> Deleted_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo_uri")]
		public string Logo_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		public string Nonce { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policy_uri")]
		public string Policy_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="redirect_uri")]
		public string Redirect_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response_mode")]
		public string Response_mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response_type")]
		public string Response_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scopes_optional")]
		public string[] Scopes_optional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scopes_required")]
		public string[] Scopes_required { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scopes_seen")]
		public string[] Scopes_seen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scopes_signed")]
		public string[] Scopes_signed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="session_id")]
		public string Session_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="session_state")]
		public string Session_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="session_uri")]
		public string Session_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokens_seen")]
		public string[] Tokens_seen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tos_uri")]
		public string Tos_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Successful token response
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Token
	{
		
		/// <summary>
		/// The access token issued by the authorization server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		/// <summary>
		/// The time the access token will expire in seconds since epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public System.Nullable<System.Int64> Expires_at { get; set; }
		
		/// <summary>
		/// The lifetime in seconds of the access token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public System.Nullable<System.Int32> Expires_in { get; set; }
		
		/// <summary>
		/// ID Token value associated with the authenticated session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id_token")]
		public string Id_token { get; set; }
		
		/// <summary>
		/// The refresh token issued to the client, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
		
		/// <summary>
		/// The scope of the granted tokens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public string Token_type { get; set; }
	}
	
	/// <summary>
	/// OIDC UserInfo structure
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserInfo
	{
		
		/// <summary>
		/// OIDC Address structure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// Geolocation structure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aq:location")]
		public object Aq_location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email_verified")]
		public System.Nullable<System.Boolean> Email_verified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		public string Family_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		public string Given_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone_number_verified")]
		public System.Nullable<System.Boolean> Phone_number_verified { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Authenticate a user
		/// Start a session with Authentiq Connect to authenticate a user.
		/// 
		/// ```
		/// GET https://connect.authentiq.io/authorize?client_id=<your-client-id>&response_type=code+id_token&scope=openid+email&redirect_uri=<your-redirect-uri>&state=0123456789
		/// ```
		/// 
		/// This endpoint also supports the POST method.
		/// 
		/// Authorize authorize
		/// </summary>
		/// <param name="client_id">A client ID obtained from the [Dashboard](https://dashboard.authentiq.com/).
		///</param>
		/// <param name="response_type">The OIDC response type to use for this authentication flow. Valid choices are `code`, `id_token`, `token`, `token id_token`, `code id_token` `code token` and `code token id_token`, but a client can be configured with a more restricted set.
		///</param>
		/// <param name="scope">The space-separated identity claims to request from the end-user. Always include `openid` as a scope for compatibility with OIDC.
		///</param>
		/// <param name="redirect_uri">The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (`response_mode=query`) or as fragments (`response_mode=fragment`). Unless the client is in test-mode this must be one of the registered redirect URLs.
		///</param>
		/// <param name="state">An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks.
		///</param>
		/// <param name="response_mode">Whether to append parameters to the redirect URL in the query string (`query`) or as fragments (`fragment`). This option usually has a sensible default for each of the response types.
		///</param>
		/// <param name="nonce">An nonce provided by the client (and opaque to Authentiq Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks.
		///</param>
		/// <param name="display">The authentication display mode, which can be one of `page`, `popup` or `modal`. Defaults to `page`.
		///</param>
		/// <param name="prompt">Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: `none`, `login`, `consent`. If `consent` the end-user is asked to (re)confirm what claims they share. Use `none` to check for an active session.
		///</param>
		/// <param name="max_age">Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated.
		///</param>
		/// <param name="ui_locales">Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment.
		///</param>
		public async Task AuthorizeAsync(string client_id, string response_type, string scope, string redirect_uri, string state, string response_mode, string nonce, string display, string prompt, int max_age, string ui_locales, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorize?client_id=" + (client_id==null? "" : System.Uri.EscapeDataString(client_id))+"&response_type=" + (response_type==null? "" : System.Uri.EscapeDataString(response_type))+"&scope=" + (scope==null? "" : System.Uri.EscapeDataString(scope))+"&redirect_uri=" + (redirect_uri==null? "" : System.Uri.EscapeDataString(redirect_uri))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&response_mode=" + (response_mode==null? "" : System.Uri.EscapeDataString(response_mode))+"&nonce=" + (nonce==null? "" : System.Uri.EscapeDataString(nonce))+"&display=" + (display==null? "" : System.Uri.EscapeDataString(display))+"&prompt=" + (prompt==null? "" : System.Uri.EscapeDataString(prompt))+"&max_age="+max_age+"&ui_locales=" + (ui_locales==null? "" : System.Uri.EscapeDataString(ui_locales));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List clients
		/// Retrieve a list of clients.
		/// 
		/// Client client
		/// </summary>
		/// <returns>A list of Client Objects.</returns>
		public async Task<Client[]> ClientAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Client[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Register a client
		/// Register a new client with this Authentiq Connect provider.
		/// 
		/// This endpoint is compatible with [OIDC's Client Registration](http://openid.net/specs/openid-connect-registration-1_0.html) extension.
		/// 
		/// CreateClient client
		/// </summary>
		/// <param name="requestBody">Client Object</param>
		public async Task CreateClientAsync(Client requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a client
		/// Delete a previously registered client.
		/// 
		/// ClientClient_id client/{client_id}
		/// </summary>
		/// <param name="client_id">Client identifier</param>
		public async Task ClientClient_idAsync(string client_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client/"+ (client_id==null? "" : System.Uri.EscapeDataString(client_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// View a client
		/// Retrieve the configuration of a previously registered client.
		/// 
		/// GetClient client/{client_id}
		/// </summary>
		/// <param name="client_id">Client identifier</param>
		/// <returns>Client found</returns>
		public async Task<Client> GetClientAsync(string client_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client/"+ (client_id==null? "" : System.Uri.EscapeDataString(client_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Client>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a client
		/// Update the configuration of a previously registered client.
		/// 
		/// UpdateClient client/{client_id}
		/// </summary>
		/// <param name="client_id">Client identifier</param>
		/// <param name="requestBody">Client Object</param>
		/// <returns>Client updated</returns>
		public async Task<Client> UpdateClientAsync(string client_id, Client requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client/"+ (client_id==null? "" : System.Uri.EscapeDataString(client_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Client>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a user profile
		/// Use this endpoint to retrieve a user's profile in case you are unable to parse an ID Token or you've not already obtained enough details from the ID Token via the Token Endpoint.
		/// 
		/// UserInfo userinfo
		/// </summary>
		/// <returns>UserInfo response</returns>
		public async Task<UserInfo> UserInfoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "userinfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UserInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Include a session iframe
		/// An OpenID Connect Session Management iframe to facilitate e.g. single sign-on or remote logouts.
		/// 
		/// The iframe implements the OIDC postMessage-based [change notification protocol](http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification) via which a client can receive notifications about session state changes.
		/// 
		/// AuthorizeIframe {client_id}/iframe
		/// </summary>
		/// <param name="client_id">Client identifier</param>
		/// <returns>OK</returns>
		public async Task AuthorizeIframeAsync(string client_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (client_id==null? "" : System.Uri.EscapeDataString(client_id))+"/iframe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
