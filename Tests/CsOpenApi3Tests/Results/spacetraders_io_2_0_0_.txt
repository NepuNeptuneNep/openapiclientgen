//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List Factions
		/// List all discovered factions in the game.
		/// Get_factions factions
		/// </summary>
		/// <param name="page">What entry offset to request
		/// Minimum: 1
		// </param>
		/// <param name="limit">How many entries to return per page
		/// Minimum: 1
		/// Maximum: 20
		// </param>
		public async Task<string> Get_factionsAsync(int page, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "factions?page="+page+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Faction
		/// View the details of a faction.
		/// Get_faction factions/{factionSymbol}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Get_factionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "factions/{factionSymbol}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// My Agent Details
		/// Fetch your agent's details.
		/// Get_my_agent my/agent
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Get_my_agentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/agent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Contracts
		/// List all of your contracts.
		/// Get_contracts my/contracts
		/// </summary>
		/// <param name="page">What entry offset to request
		/// Minimum: 1
		// </param>
		/// <param name="limit">How many entries to return per page
		/// Minimum: 1
		/// Maximum: 20
		// </param>
		/// <returns>OK</returns>
		public async Task<string> Get_contractsAsync(int page, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/contracts?page="+page+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Contract
		/// Get the details of a contract by ID.
		/// Get_contract my/contracts/{contractId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Get_contractAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/contracts/{contractId}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accept Contract
		/// Accept a contract.
		/// Accept_contract my/contracts/{contractId}/accept
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Accept_contractReturn> Accept_contractAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/contracts/{contractId}/accept";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Accept_contractReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deliver Contract
		/// Deliver cargo on a given contract.
		/// Deliver_contract my/contracts/{contractId}/deliver
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Deliver_contractReturn> Deliver_contractAsync(Deliver_contractPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/contracts/{contractId}/deliver";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Deliver_contractReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fulfill Contract
		/// Fulfill a contract
		/// Fulfill_contract my/contracts/{contractId}/fulfill
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Fulfill_contractReturn> Fulfill_contractAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/contracts/{contractId}/fulfill";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Fulfill_contractReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Ships
		/// Retrieve all of your ships.
		/// Get_my_ships my/ships
		/// </summary>
		/// <param name="page">What entry offset to request
		/// Minimum: 1
		// </param>
		/// <param name="limit">How many entries to return per page
		/// Minimum: 1
		/// Maximum: 20
		// </param>
		/// <returns>OK</returns>
		public async Task<string> Get_my_shipsAsync(int page, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships?page="+page+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Purchase Ship
		/// Purchase a ship
		/// Purchase_ship my/ships
		/// </summary>
		public async Task Purchase_shipAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Ship
		/// Retrieve the details of your ship.
		/// Get_my_ship my/ships/{shipSymbol}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Get_my_shipAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Ship Cargo
		/// Retrieve the cargo of your ship.
		/// Get_my_ship_cargo my/ships/{shipSymbol}/cargo
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Get_my_ship_cargoAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/cargo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Chart
		/// Command a ship to chart the current waypoint.
		/// 
		/// Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.
		/// 
		/// Charting a location will record your agent as the one who created the chart.
		/// Create_chart my/ships/{shipSymbol}/chart
		/// </summary>
		public async Task Create_chartAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/chart";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Ship Cooldown
		/// Retrieve the details of your ship's reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.
		/// 
		/// Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.
		/// 
		/// Response returns a 204 status code (no-content) when the ship has no cooldown.
		/// Get_ship_cooldown my/ships/{shipSymbol}/cooldown
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Get_ship_cooldownAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/cooldown";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Dock Ship
		/// Attempt to dock your ship at it's current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.
		/// 
		/// The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
		/// Dock_ship my/ships/{shipSymbol}/dock
		/// </summary>
		/// <returns>The ship has successfully docked at it's current location.</returns>
		public async Task<Dock_shipReturn> Dock_shipAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/dock";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Dock_shipReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Extract Resources
		/// Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
		/// Extract_resources my/ships/{shipSymbol}/extract
		/// </summary>
		public async Task Extract_resourcesAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/extract";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Jettison Cargo
		/// Jettison cargo from your ship's cargo hold.
		/// Jettison my/ships/{shipSymbol}/jettison
		/// </summary>
		/// <returns>OK</returns>
		public async Task<JettisonReturn> JettisonAsync(JettisonPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/jettison";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JettisonReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Jump Ship
		/// Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
		/// Jump_ship my/ships/{shipSymbol}/jump
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Jump_shipReturn> Jump_shipAsync(Jump_shipPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/jump";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Jump_shipReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Ship Nav
		/// Get the current nav status of a ship.
		/// Get_ship_nav my/ships/{shipSymbol}/nav
		/// </summary>
		/// <returns>The current nav status of the ship.</returns>
		public async Task<string> Get_ship_navAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/nav";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patch Ship Nav
		/// Update the nav data of a ship, such as the flight mode.
		/// Patch_ship_nav my/ships/{shipSymbol}/nav
		/// </summary>
		/// <returns>The updated nav status of the ship.</returns>
		public async Task<string> Patch_ship_navAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/nav";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Navigate Ship
		/// Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.
		/// 
		/// The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
		/// 
		/// To travel between systems, see the ship's warp or jump actions.
		/// Navigate_ship my/ships/{shipSymbol}/navigate
		/// </summary>
		/// <returns>The successful transit information including the route details and changes to ship fuel, supplies, and crew wages paid. The route includes the expected time of arrival.</returns>
		public async Task<Navigate_shipReturn> Navigate_shipAsync(Navigate_shipPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/navigate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Navigate_shipReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Orbit Ship
		/// Attempt to move your ship into orbit at it's current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.
		/// 
		/// The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
		/// Orbit_ship my/ships/{shipSymbol}/orbit
		/// </summary>
		/// <returns>The ship has successfully moved into orbit at it's current location.</returns>
		public async Task<Orbit_shipReturn> Orbit_shipAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/orbit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Orbit_shipReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Purchase Cargo
		/// Purchase cargo.
		/// Purchase_cargo my/ships/{shipSymbol}/purchase
		/// </summary>
		public async Task Purchase_cargoAsync(Purchase_cargoPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/purchase";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Ship Refine
		/// Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
		/// Ship_refine my/ships/{shipSymbol}/refine
		/// </summary>
		/// <returns>The ship has successfully started refining.</returns>
		public async Task<Ship_refineReturn> Ship_refineAsync(Ship_refinePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/refine";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Ship_refineReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refuel Ship
		/// Refuel your ship from the local market.
		/// Refuel_ship my/ships/{shipSymbol}/refuel
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Refuel_shipReturn> Refuel_shipAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/refuel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Refuel_shipReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Scan Ships
		/// Activate your ship's sensor arrays to scan for ship information.
		/// Create_ship_ship_scan my/ships/{shipSymbol}/scan/ships
		/// </summary>
		public async Task Create_ship_ship_scanAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/scan/ships";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Scan Systems
		/// Activate your ship's sensor arrays to scan for system information.
		/// Create_ship_system_scan my/ships/{shipSymbol}/scan/systems
		/// </summary>
		public async Task Create_ship_system_scanAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/scan/systems";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Scan Waypoints
		/// Activate your ship's sensor arrays to scan for waypoint information.
		/// Create_ship_waypoint_scan my/ships/{shipSymbol}/scan/waypoints
		/// </summary>
		public async Task Create_ship_waypoint_scanAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/scan/waypoints";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sell Cargo
		/// Sell cargo.
		/// Sell_cargo my/ships/{shipSymbol}/sell
		/// </summary>
		public async Task Sell_cargoAsync(Sell_cargoPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/sell";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Survey
		/// If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.
		/// 
		/// Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
		/// Create_survey my/ships/{shipSymbol}/survey
		/// </summary>
		public async Task Create_surveyAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/survey";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Transfer Cargo
		/// Transfer cargo between ships.
		/// Transfer_cargo my/ships/{shipSymbol}/transfer
		/// </summary>
		/// <returns>Created</returns>
		public async Task<Transfer_cargoReturn> Transfer_cargoAsync(Transfer_cargoPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/transfer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Transfer_cargoReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Warp Ship
		/// Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.
		/// 
		/// The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
		/// Warp_ship my/ships/{shipSymbol}/warp
		/// </summary>
		/// <returns>The successful transit information including the route details and changes to ship fuel, supplies, and crew wages paid. The route includes the expected time of arrival.</returns>
		public async Task<Warp_shipReturn> Warp_shipAsync(Warp_shipPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "my/ships/{shipSymbol}/warp";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Warp_shipReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Register New Agent
		/// Creates a new agent and ties it to a temporary Account.
		/// 
		/// The agent symbol is a 3-14 character string that will represent your agent. This symbol will prefix the symbol of every ship you own. Agent symbols will be cast to all uppercase characters.
		/// 
		/// A new agent will be granted an authorization token, a contract with their starting faction, a command ship with a jump drive, and one hundred thousand credits.
		/// 
		/// > #### Keep your token safe and secure
		/// >
		/// > Save your token during the alpha phase. There is no way to regenerate this token without starting a new agent. In the future you will be able to generate and manage your tokens from the SpaceTraders website.
		/// 
		/// You can accept your contract using the `/my/contracts/{contractId}/accept` endpoint. You will want to navigate your command ship to a nearby asteroid field and execute the `/my/ships/{shipSymbol}/extract` endpoint to mine various types of ores and minerals.
		/// 
		/// Return to the contract destination and execute the `/my/ships/{shipSymbol}/deliver` endpoint to deposit goods into the contract.
		/// 
		/// When your contract is fulfilled, you can call `/my/contracts/{contractId}/fulfill` to retrieve payment.
		/// Register register
		/// </summary>
		public async Task RegisterAsync(RegisterPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "register";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Systems
		/// Return a list of all systems.
		/// Get_systems systems
		/// </summary>
		/// <param name="page">What entry offset to request
		/// Minimum: 1
		// </param>
		/// <param name="limit">How many entries to return per page
		/// Minimum: 1
		/// Maximum: 20
		// </param>
		/// <returns>OK</returns>
		public async Task<Get_systemsReturn> Get_systemsAsync(int page, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "systems?page="+page+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_systemsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get System
		/// Get the details of a system.
		/// Get_system systems/{systemSymbol}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Get_systemAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "systems/{systemSymbol}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Waypoints
		/// Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
		/// Get_system_waypoints systems/{systemSymbol}/waypoints
		/// </summary>
		/// <param name="page">What entry offset to request
		/// Minimum: 1
		// </param>
		/// <param name="limit">How many entries to return per page
		/// Minimum: 1
		/// Maximum: 20
		// </param>
		/// <returns>OK</returns>
		public async Task<string> Get_system_waypointsAsync(int page, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "systems/{systemSymbol}/waypoints?page="+page+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Waypoint
		/// View the details of a waypoint.
		/// Get_waypoint systems/{systemSymbol}/waypoints/{waypointSymbol}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> Get_waypointAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "systems/{systemSymbol}/waypoints/{waypointSymbol}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Jump Gate
		/// Get jump gate details for a waypoint.
		/// Get_jump_gate systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Get_jump_gateReturn> Get_jump_gateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_jump_gateReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Market
		/// Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
		/// Get_market systems/{systemSymbol}/waypoints/{waypointSymbol}/market
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Get_marketReturn> Get_marketAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "systems/{systemSymbol}/waypoints/{waypointSymbol}/market";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_marketReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Shipyard
		/// Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
		/// Get_shipyard systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Get_shipyardReturn> Get_shipyardAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_shipyardReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Accept_contractReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	public class Deliver_contractPostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shipSymbol")]
		public string ShipSymbol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tradeSymbol")]
		public string TradeSymbol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="units")]
		public int Units { get; set; }
	}
	
	public class Deliver_contractReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	public class Fulfill_contractReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	public class Dock_shipReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	public class JettisonPostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="units")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Units { get; set; }
	}
	
	public class JettisonReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	public class Jump_shipPostBody
	{
		
		/// <summary>
		/// The system symbol to jump to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="systemSymbol")]
		public string SystemSymbol { get; set; }
	}
	
	public class Jump_shipReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	public class Navigate_shipPostBody
	{
		
		/// <summary>
		/// The target destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waypointSymbol")]
		public string WaypointSymbol { get; set; }
	}
	
	public class Navigate_shipReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	public class Orbit_shipReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	public class Purchase_cargoPostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="units")]
		public int Units { get; set; }
	}
	
	public class Ship_refinePostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="produce")]
		public Ship_refinePostBodyProduce Produce { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Ship_refinePostBodyProduce
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IRON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPPER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SILVER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOLD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALUMINUM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATINUM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URANITE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERITIUM = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUEL = 8,
	}
	
	public class Ship_refineReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	public class Refuel_shipReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	public class Sell_cargoPostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="units")]
		public int Units { get; set; }
	}
	
	public class Transfer_cargoPostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shipSymbol")]
		public string ShipSymbol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tradeSymbol")]
		public string TradeSymbol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="units")]
		public int Units { get; set; }
	}
	
	public class Transfer_cargoReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	public class Warp_shipPostBody
	{
		
		/// <summary>
		/// The target destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waypointSymbol")]
		public string WaypointSymbol { get; set; }
	}
	
	public class Warp_shipReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
	}
	
	public class RegisterPostBody
	{
		
		/// <summary>
		/// The faction you choose determines your headquarters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="faction")]
		public RegisterPostBodyFaction Faction { get; set; }
		
		/// <summary>
		/// How other agents will see your ships and information.
		/// Required
		/// Min length: 3
		/// Max length: 14
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(14)]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RegisterPostBodyFaction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COSMIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GALACTIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUANTUM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMINION = 4,
	}
	
	public class Get_systemsReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_systemsReturnData[] Get_systemsReturnData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get_systemsReturnMeta Meta { get; set; }
	}
	
	public class Get_systemsReturnData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="factions")]
		public Get_systemsReturnDataFactions[] Get_systemsReturnDataFactions { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sectorSymbol")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string SectorSymbol { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Symbol { get; set; }
		
		/// <summary>
		/// The type of waypoint.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Get_systemsReturnDataType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waypoints")]
		public string[] Waypoints { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="x")]
		public int X { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="y")]
		public int Y { get; set; }
	}
	
	public class Get_systemsReturnDataFactions
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Get_systemsReturnDataType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEUTRON_STAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RED_STAR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORANGE_STAR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLUE_STAR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOUNG_STAR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHITE_DWARF = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLACK_HOLE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERGIANT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEBULA = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSTABLE = 9,
	}
	
	public class Get_systemsReturnMeta
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public int Limit { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="page")]
		public int Page { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
	}
	
	public class Get_jump_gateReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_jump_gateReturnData Data { get; set; }
	}
	
	public class Get_jump_gateReturnData
	{
		
		/// <summary>
		/// The systems within range of the gate that have a corresponding gate.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="connectedSystems")]
		public string[] ConnectedSystems { get; set; }
		
		/// <summary>
		/// The symbol of the faction that owns the gate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factionSymbol")]
		public string FactionSymbol { get; set; }
		
		/// <summary>
		/// The maximum jump range of the gate.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jumpRange")]
		public double JumpRange { get; set; }
	}
	
	public class Get_marketReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_marketReturnData Data { get; set; }
	}
	
	public class Get_marketReturnData
	{
		
		/// <summary>
		/// The list of goods that are bought and sold between agents at this market.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exchange")]
		public string[] Exchange { get; set; }
		
		/// <summary>
		/// The list of goods that are exported from this market.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="exports")]
		public Get_marketReturnDataExports[] Get_marketReturnDataExports { get; set; }
		
		/// <summary>
		/// The list of goods that are sought as imports in this market.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="imports")]
		public string[] Imports { get; set; }
		
		/// <summary>
		/// The symbol of the market. The symbol is the same as the waypoint where the market is located.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// The list of goods that are traded at this market. Visible only when a ship is present at the market.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradeGoods")]
		public Get_marketReturnDataTradeGoods[] Get_marketReturnDataTradeGoods { get; set; }
		
		/// <summary>
		/// The list of recent transactions at this market. Visible only when a ship is present at the market.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public Get_marketReturnDataTransactions[] Get_marketReturnDataTransactions { get; set; }
	}
	
	public class Get_marketReturnDataExports
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public Get_marketReturnDataExportsSymbol Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Get_marketReturnDataExportsSymbol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRECIOUS_STONES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUARTZ_SAND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SILICON_CRYSTALS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMMONIA_ICE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIQUID_HYDROGEN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIQUID_NITROGEN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ICE_WATER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXOTIC_MATTER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCED_CIRCUITRY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRAVITON_EMITTERS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IRON = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IRON_ORE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPPER = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COPPER_ORE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALUMINUM = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALUMINUM_ORE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SILVER = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SILVER_ORE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOLD = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOLD_ORE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATINUM = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATINUM_ORE = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIAMONDS = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URANITE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URANITE_ORE = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERITIUM = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERITIUM_ORE = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYDROCARBON = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANTIMATTER = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FERTILIZERS = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FABRICS = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOOD = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JEWELRY = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MACHINERY = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIREARMS = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSAULT_RIFLES = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MILITARY_EQUIPMENT = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLOSIVES = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAB_INSTRUMENTS = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AMMUNITION = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELECTRONICS = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIP_PLATING = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQUIPMENT = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUEL = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICINE = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRUGS = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOTHING = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MICROPROCESSORS = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLASTICS = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POLYNUCLEOTIDES = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIOCOMPOSITES = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NANOBOTS = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AI_MAINFRAMES = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUANTUM_DRIVES = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROBOTIC_DRONES = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CYBER_IMPLANTS = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENE_THERAPEUTICS = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEURAL_CHIPS = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOOD_REGULATORS = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRAL_AGENTS = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MICRO_FUSION_GENERATORS = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPERGRAINS = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LASER_RIFLES = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOLOGRAPHICS = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIP_SALVAGE = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELIC_TECH = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOVEL_LIFEFORMS = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTANICAL_SPECIMENS = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CULTURAL_ARTIFACTS = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REACTOR_SOLAR_I = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REACTOR_FUSION_I = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REACTOR_FISSION_I = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REACTOR_CHEMICAL_I = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REACTOR_ANTIMATTER_I = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE_IMPULSE_DRIVE_I = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE_ION_DRIVE_I = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE_ION_DRIVE_II = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE_HYPER_DRIVE_I = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_MINERAL_PROCESSOR_I = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_CARGO_HOLD_I = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_CREW_QUARTERS_I = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_ENVOY_QUARTERS_I = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_PASSENGER_CABIN_I = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_MICRO_REFINERY_I = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_ORE_REFINERY_I = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_FUEL_REFINERY_I = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_SCIENCE_LAB_I = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_JUMP_DRIVE_I = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_JUMP_DRIVE_II = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_JUMP_DRIVE_III = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_WARP_DRIVE_I = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_WARP_DRIVE_II = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_WARP_DRIVE_III = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_SHIELD_GENERATOR_I = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODULE_SHIELD_GENERATOR_II = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_GAS_SIPHON_I = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_GAS_SIPHON_II = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_GAS_SIPHON_III = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_SURVEYOR_I = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_SURVEYOR_II = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_SURVEYOR_III = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_SENSOR_ARRAY_I = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_SENSOR_ARRAY_II = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_SENSOR_ARRAY_III = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_MINING_LASER_I = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_MINING_LASER_II = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_MINING_LASER_III = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_LASER_CANNON_I = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_MISSILE_LAUNCHER_I = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOUNT_TURRET_I = 109,
	}
	
	public class Get_marketReturnDataTradeGoods
	{
		
		/// <summary>
		/// The price at which this good can be purchased from the market.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchasePrice")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int PurchasePrice { get; set; }
		
		/// <summary>
		/// The price at which this good can be sold to the market.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellPrice")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int SellPrice { get; set; }
		
		/// <summary>
		/// A rough estimate of the total supply of this good in the marketplace.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supply")]
		public Get_marketReturnDataTradeGoodsSupply Supply { get; set; }
		
		/// <summary>
		/// The symbol of the trade good.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// The typical volume flowing through the market for this type of good. The larger the trade volume, the more stable prices will be.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tradeVolume")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int TradeVolume { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Get_marketReturnDataTradeGoodsSupply
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCARCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIMITED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODERATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABUNDANT = 3,
	}
	
	public class Get_marketReturnDataTransactions
	{
		
		/// <summary>
		/// The price per unit of the transaction.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pricePerUnit")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int PricePerUnit { get; set; }
		
		/// <summary>
		/// The symbol of the ship that made the transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shipSymbol")]
		public string ShipSymbol { get; set; }
		
		/// <summary>
		/// The timestamp of the transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// The total price of the transaction.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPrice")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int TotalPrice { get; set; }
		
		/// <summary>
		/// The symbol of the trade good.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tradeSymbol")]
		public string TradeSymbol { get; set; }
		
		/// <summary>
		/// The type of transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Get_marketReturnDataTransactionsType Type { get; set; }
		
		/// <summary>
		/// The number of units of the transaction.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="units")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Units { get; set; }
		
		/// <summary>
		/// The symbol of the waypoint where the transaction took place.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waypointSymbol")]
		public string WaypointSymbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Get_marketReturnDataTransactionsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PURCHASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELL = 1,
	}
	
	public class Get_shipyardReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Get_shipyardReturnData Data { get; set; }
	}
	
	public class Get_shipyardReturnData
	{
		
		/// <summary>
		/// The list of ship types available for purchase at this shipyard.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shipTypes")]
		public Get_shipyardReturnDataShipTypes[] Get_shipyardReturnDataShipTypes { get; set; }
		
		/// <summary>
		/// The ships that are currently available for purchase at the shipyard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ships")]
		public string[] Ships { get; set; }
		
		/// <summary>
		/// The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Symbol { get; set; }
		
		/// <summary>
		/// The list of recent transactions at this shipyard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public Get_shipyardReturnDataTransactions[] Get_shipyardReturnDataTransactions { get; set; }
	}
	
	public class Get_shipyardReturnDataShipTypes
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<Get_shipyardReturnDataShipTypesType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Get_shipyardReturnDataShipTypesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIP_PROBE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIP_MINING_DRONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIP_INTERCEPTOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIP_LIGHT_HAULER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIP_COMMAND_FRIGATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIP_EXPLORER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIP_HEAVY_FREIGHTER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIP_LIGHT_SHUTTLE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIP_ORE_HOUND = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHIP_REFINING_FREIGHTER = 9,
	}
	
	public class Get_shipyardReturnDataTransactions
	{
		
		/// <summary>
		/// The symbol of the agent that made the transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="agentSymbol")]
		public string AgentSymbol { get; set; }
		
		/// <summary>
		/// The price of the transaction.
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Price { get; set; }
		
		/// <summary>
		/// The symbol of the ship that was purchased.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shipSymbol")]
		public string ShipSymbol { get; set; }
		
		/// <summary>
		/// The timestamp of the transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// The symbol of the waypoint where the transaction took place.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="waypointSymbol")]
		public string WaypointSymbol { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
