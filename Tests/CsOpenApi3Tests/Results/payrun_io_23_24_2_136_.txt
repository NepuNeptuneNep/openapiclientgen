//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AEAssessment
	{
		
		[System.Runtime.Serialization.DataMember(Name="AEAssessment")]
		public AEAssessmentAEAssessment1 AEAssessment1 { get; set; }
	}
	
	public class AEAssessmentAEAssessment1
	{
		
		/// <summary>
		/// The a e assessments' age
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Age { get; set; }
		
		/// <summary>
		/// The a e assessments' assessment code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AEAssessmentAEAssessment1AssessmentCode> AssessmentCode { get; set; }
		
		/// <summary>
		/// The a e assessments' assessment date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> AssessmentDate { get; set; }
		
		/// <summary>
		/// The a e assessments' assessment event
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AEAssessmentAEAssessment1AssessmentEvent> AssessmentEvent { get; set; }
		
		/// <summary>
		/// The a e assessments' assessment override
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AEAssessmentAEAssessment1AssessmentOverride> AssessmentOverride { get; set; }
		
		/// <summary>
		/// The a e assessments' assessment result
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AEAssessmentAEAssessment1AssessmentResult> AssessmentResult { get; set; }
		
		/// <summary>
		/// The a e assessments' is member of alternative pension scheme
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsMemberOfAlternativePensionScheme { get; set; }
		
		/// <summary>
		/// The a e assessments' opt out window end date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> OptOutWindowEndDate { get; set; }
		
		/// <summary>
		/// The a e assessments' qualifying earnings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> QualifyingEarnings { get; set; }
		
		/// <summary>
		/// The a e assessments' reenrolment date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> ReenrolmentDate { get; set; }
		
		/// <summary>
		/// The a e assessments' state pension age
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StatePensionAge { get; set; }
		
		/// <summary>
		/// The a e assessments' state pension date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> StatePensionDate { get; set; }
		
		/// <summary>
		/// The a e assessments' tax period
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxPeriod { get; set; }
		
		/// <summary>
		/// The a e assessments' tax year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxYear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AEAssessmentAEAssessment1AssessmentCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Excluded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EligibleJobHolder = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonEligibleJobHolder = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EntitledWorker = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AEAssessmentAEAssessment1AssessmentEvent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonEnrolmentEvent = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutomaticEnrolment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OptIn = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoluntaryJoiner = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContractualEnrolment = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AEAssessmentAEAssessment1AssessmentOverride
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OptOut = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OptIn = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoluntaryJoiner = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContractualPension = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CeasedMembership = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Leaver = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Excluded = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AEAssessmentAEAssessment1AssessmentResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inconclusive = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NoChange = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enrol = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exit = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationSecret
	{
		
		[System.Runtime.Serialization.DataMember(Name="ApplicationSecret")]
		public ApplicationSecretApplicationSecret1 ApplicationSecret1 { get; set; }
	}
	
	public class ApplicationSecretApplicationSecret1
	{
		
		/// <summary>
		/// The application secrets' created
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The application secrets' name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The application secrets' value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchItemBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="BatchItemBase")]
		public BatchItemBaseBatchItemBase1 BatchItemBase1 { get; set; }
	}
	
	public class BatchItemBaseBatchItemBase1
	{
		
		/// <summary>
		/// The batch item bases' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Href")]
		public string _Href { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchJobInstruction
	{
		
		[System.Runtime.Serialization.DataMember(Name="BatchJobInstruction")]
		public BatchJobInstructionBatchJobInstruction1 BatchJobInstruction1 { get; set; }
	}
	
	public class BatchJobInstructionBatchJobInstruction1
	{
		
		/// <summary>
		/// The batch job instructions' holding date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> HoldingDate { get; set; }
		
		/// <summary>
		/// The batch job instructions' instructions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BatchJobInstructionBatchJobInstruction1Instructions Instructions { get; set; }
		
		/// <summary>
		/// The batch job instructions' validate only
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ValidateOnly { get; set; }
	}
	
	public class BatchJobInstructionBatchJobInstruction1Instructions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BatchJobInstructionBatchJobInstruction1InstructionsDELETE[] BatchJobInstructionBatchJobInstruction1InstructionsDELETE { get; set; }
	}
	
	public class BatchJobInstructionBatchJobInstruction1InstructionsDELETE
	{
		
		/// <summary>
		/// The batch item bases' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Href")]
		public string _Href { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CisInstruction
	{
		
		[System.Runtime.Serialization.DataMember(Name="CisInstruction")]
		public CisInstructionCisInstruction1 CisInstruction1 { get; set; }
	}
	
	public class CisInstructionCisInstruction1
	{
		
		/// <summary>
		/// The cis instructions' cis line tag
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CisLineTag { get; set; }
		
		/// <summary>
		/// The cis instructions' cis line type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CisLineType { get; set; }
		
		/// <summary>
		/// The cis instructions' description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The cis instructions' pay frequency
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CisInstructionCisInstruction1PayFrequency> PayFrequency { get; set; }
		
		/// <summary>
		/// The cis instructions' period end
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PeriodEnd { get; set; }
		
		/// <summary>
		/// The cis instructions' period start
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PeriodStart { get; set; }
		
		/// <summary>
		/// The cis instructions' tax year end
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxYearEnd { get; set; }
		
		/// <summary>
		/// The cis instructions' tax year start
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxYearStart { get; set; }
		
		/// <summary>
		/// The cis instructions' u o m
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CisInstructionCisInstruction1UOM> UOM { get; set; }
		
		/// <summary>
		/// The cis instructions' units
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Units { get; set; }
		
		/// <summary>
		/// The cis instructions' v a t
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> VAT { get; set; }
		
		/// <summary>
		/// The cis instructions' value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CisInstructionCisInstruction1PayFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monthly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CisInstructionCisInstruction1UOM
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Minute = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hour = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Day = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Month = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Year = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unit = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CisJobInstructionBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="CisJobInstructionBase")]
		public CisJobInstructionBaseCisJobInstructionBase1 CisJobInstructionBase1 { get; set; }
	}
	
	public class CisJobInstructionBaseCisJobInstructionBase1
	{
		
		/// <summary>
		/// The cis job instruction bases' employer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CisJobInstructionBaseCisJobInstructionBase1Employer Employer { get; set; }
		
		/// <summary>
		/// The cis job instruction bases' holding date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> HoldingDate { get; set; }
		
		/// <summary>
		/// The cis job instruction bases' sub contractors
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CisJobInstructionBaseCisJobInstructionBase1SubContractors SubContractors { get; set; }
	}
	
	public class CisJobInstructionBaseCisJobInstructionBase1Employer
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	public class CisJobInstructionBaseCisJobInstructionBase1SubContractors
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CisJobInstructionBaseCisJobInstructionBase1SubContractorsSubContractor[] CisJobInstructionBaseCisJobInstructionBase1SubContractorsSubContractor { get; set; }
	}
	
	public class CisJobInstructionBaseCisJobInstructionBase1SubContractorsSubContractor
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CisLine
	{
		
		[System.Runtime.Serialization.DataMember(Name="CisLine")]
		public CisLineCisLine1 CisLine1 { get; set; }
	}
	
	public class CisLineCisLine1
	{
		
		/// <summary>
		/// The cis lines' cis deduction
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CisDeduction { get; set; }
		
		/// <summary>
		/// The cis lines' cis line type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CisLineType { get; set; }
		
		/// <summary>
		/// The cis lines' description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The cis lines' generated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Generated { get; set; }
		
		/// <summary>
		/// The cis lines' gross pay
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> GrossPay { get; set; }
		
		/// <summary>
		/// The cis lines' nominal code key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NominalCodeKey { get; set; }
		
		/// <summary>
		/// The cis lines' pay frequency
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CisInstructionCisInstruction1PayFrequency PayFrequency { get; set; }
		
		/// <summary>
		/// The cis lines' tax month
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxMonth { get; set; }
		
		/// <summary>
		/// The cis lines' tax period
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxPeriod { get; set; }
		
		/// <summary>
		/// The cis lines' tax treatment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CisLineCisLine1TaxTreatment> TaxTreatment { get; set; }
		
		/// <summary>
		/// The cis lines' tax year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxYear { get; set; }
		
		/// <summary>
		/// The cis lines' u o m
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CisInstructionCisInstruction1UOM UOM { get; set; }
		
		/// <summary>
		/// The cis lines' unit rate
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UnitRate { get; set; }
		
		/// <summary>
		/// The cis lines' units
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Units { get; set; }
		
		/// <summary>
		/// The cis lines' v a t
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> VAT { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CisLineCisLine1TaxTreatment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Taxable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NonTaxable = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Notional = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Materials = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CisLineType
	{
		
		[System.Runtime.Serialization.DataMember(Name="CisLineType")]
		public CisLineTypeCisLineType1 CisLineType1 { get; set; }
	}
	
	public class CisLineTypeCisLineType1
	{
		
		/// <summary>
		/// The cis line types' description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The cis line types' line type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LineType { get; set; }
		
		/// <summary>
		/// The cis line types' nominal code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CisLineTypeCisLineType1NominalCode NominalCode { get; set; }
		
		/// <summary>
		/// The cis line types' tax treatment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CisLineCisLine1TaxTreatment TaxTreatment { get; set; }
	}
	
	public class CisLineTypeCisLineType1NominalCode
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CisTransaction
	{
		
		[System.Runtime.Serialization.DataMember(Name="CisTransaction")]
		public CisTransactionCisTransaction1 CisTransaction1 { get; set; }
	}
	
	public class CisTransactionCisTransaction1
	{
		
		/// <summary>
		/// The cis transactions' cis message type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CisTransactionCisTransaction1CisMessageType> CisMessageType { get; set; }
		
		/// <summary>
		/// The cis transactions' employer core
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CisTransactionCisTransaction1EmployerCore EmployerCore { get; set; }
		
		/// <summary>
		/// The cis transactions' request data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestData { get; set; }
		
		/// <summary>
		/// The cis transactions' response data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResponseData { get; set; }
		
		/// <summary>
		/// The cis transactions' tax year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxYear { get; set; }
		
		/// <summary>
		/// The cis transactions' timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		/// <summary>
		/// The cis transactions' transaction status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CisTransactionCisTransaction1TransactionStatus> TransactionStatus { get; set; }
		
		/// <summary>
		/// The cis transactions' transmission date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransmissionDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CisTransactionCisTransaction1CisMessageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Verification = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Return = 1,
	}
	
	public class CisTransactionCisTransaction1EmployerCore
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CisTransactionCisTransaction1TransactionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		New = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestGenerated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompletedWithError = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompletedWithSuccess = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimeOut = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Commentary
	{
		
		[System.Runtime.Serialization.DataMember(Name="Commentary")]
		public CommentaryCommentary1 Commentary1 { get; set; }
	}
	
	public class CommentaryCommentary1
	{
		
		/// <summary>
		/// The commentarys' created
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The commentarys' detail
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Detail { get; set; }
		
		/// <summary>
		/// The commentarys' employee
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CommentaryCommentary1Employee Employee { get; set; }
		
		/// <summary>
		/// The commentarys' pay run
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CommentaryCommentary1PayRun PayRun { get; set; }
	}
	
	public class CommentaryCommentary1Employee
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	public class CommentaryCommentary1PayRun
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DpsJobInstruction
	{
		
		[System.Runtime.Serialization.DataMember(Name="DpsJobInstruction")]
		public DpsJobInstructionDpsJobInstruction1 DpsJobInstruction1 { get; set; }
	}
	
	public class DpsJobInstructionDpsJobInstruction1
	{
		
		/// <summary>
		/// The dps job instructions' apply
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Apply { get; set; }
		
		/// <summary>
		/// The dps job instructions' employer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DpsJobInstructionDpsJobInstruction1Employer Employer { get; set; }
		
		/// <summary>
		/// The dps job instructions' from date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> FromDate { get; set; }
		
		/// <summary>
		/// The dps job instructions' holding date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> HoldingDate { get; set; }
		
		/// <summary>
		/// The dps job instructions' message types
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DpsJobInstructionDpsJobInstruction1MessageTypes MessageTypes { get; set; }
		
		/// <summary>
		/// The dps job instructions' messages to process
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DpsJobInstructionDpsJobInstruction1MessagesToProcess MessagesToProcess { get; set; }
		
		/// <summary>
		/// The dps job instructions' retrieve
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Retrieve { get; set; }
	}
	
	public class DpsJobInstructionDpsJobInstruction1Employer
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	public class DpsJobInstructionDpsJobInstruction1MessageTypes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Type { get; set; }
	}
	
	public class DpsJobInstructionDpsJobInstruction1MessagesToProcess
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DpsJobInstructionDpsJobInstruction1MessagesToProcessMessage[] DpsJobInstructionDpsJobInstruction1MessagesToProcessMessage { get; set; }
	}
	
	public class DpsJobInstructionDpsJobInstruction1MessagesToProcessMessage
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DpsMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="DpsMessage")]
		public DpsMessageDpsMessage1 DpsMessage1 { get; set; }
	}
	
	public class DpsMessageDpsMessage1
	{
		
		/// <summary>
		/// The dps messages' form type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FormType { get; set; }
		
		/// <summary>
		/// The dps messages' issue date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> IssueDate { get; set; }
		
		/// <summary>
		/// The dps messages' last updated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// The dps messages' message
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// The dps messages' message status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<DpsMessageDpsMessage1MessageStatus> MessageStatus { get; set; }
		
		/// <summary>
		/// The dps messages' message type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MessageType { get; set; }
		
		/// <summary>
		/// The dps messages' processing result
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProcessingResult { get; set; }
		
		/// <summary>
		/// The dps messages' retrieve date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RetrieveDate { get; set; }
		
		/// <summary>
		/// The dps messages' sequence number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SequenceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DpsMessageDpsMessage1MessageStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Retrieved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Applied = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unresolved = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ignored = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Information = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Employee
	{
		
		[System.Runtime.Serialization.DataMember(Name="Employee")]
		public EmployeeEmployee1 Employee1 { get; set; }
	}
	
	public class EmployeeEmployee1
	{
		
		/// <summary>
		/// The employees' a e assessment override
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AEAssessmentAEAssessment1AssessmentOverride AEAssessmentOverride { get; set; }
		
		/// <summary>
		/// The employees' a e assessment override date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> AEAssessmentOverrideDate { get; set; }
		
		/// <summary>
		/// The employees' a e exclusion reason code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployeeEmployee1AEExclusionReasonCode> AEExclusionReasonCode { get; set; }
		
		/// <summary>
		/// The employees' a e postponement date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> AEPostponementDate { get; set; }
		
		/// <summary>
		/// The employees' address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeEmployee1Address Address { get; set; }
		
		/// <summary>
		/// The employees' bank account
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeEmployee1BankAccount BankAccount { get; set; }
		
		/// <summary>
		/// The employees' code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The employees' date of birth
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> DateOfBirth { get; set; }
		
		/// <summary>
		/// The employees' deactivated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deactivated { get; set; }
		
		/// <summary>
		/// The employees' directorship appointment date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> DirectorshipAppointmentDate { get; set; }
		
		/// <summary>
		/// The employees' e e a citizen
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EEACitizen { get; set; }
		
		/// <summary>
		/// The employees' e p m6
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EPM6 { get; set; }
		
		/// <summary>
		/// The employees' effective date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EffectiveDate { get; set; }
		
		/// <summary>
		/// The employees' employee partner
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeEmployee1EmployeePartner EmployeePartner { get; set; }
		
		/// <summary>
		/// The employees' the first name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The employees' gender
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployeeEmployee1Gender> Gender { get; set; }
		
		/// <summary>
		/// The employees' hours per week
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HoursPerWeek { get; set; }
		
		/// <summary>
		/// The employees' initials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Initials { get; set; }
		
		/// <summary>
		/// The employees' irregular employment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IrregularEmployment { get; set; }
		
		/// <summary>
		/// The employees' is agency worker
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAgencyWorker { get; set; }
		
		/// <summary>
		/// The employees' last name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		/// <summary>
		/// The employees' leaver reason
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployeeEmployee1LeaverReason> LeaverReason { get; set; }
		
		/// <summary>
		/// The employees' leaving date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> LeavingDate { get; set; }
		
		/// <summary>
		/// The employees' marital status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployeeEmployee1MaritalStatus> MaritalStatus { get; set; }
		
		/// <summary>
		/// The employees' meta data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MetaData { get; set; }
		
		/// <summary>
		/// The employees' middle name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// The employees' next revision date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> NextRevisionDate { get; set; }
		
		/// <summary>
		/// The employees' ni number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NiNumber { get; set; }
		
		/// <summary>
		/// The employees' nic liability
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployeeEmployee1NicLiability> NicLiability { get; set; }
		
		/// <summary>
		/// The employees' off payroll worker
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OffPayrollWorker { get; set; }
		
		/// <summary>
		/// The employees' on strike
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OnStrike { get; set; }
		
		/// <summary>
		/// The employees' p45 issued date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> P45IssuedDate { get; set; }
		
		/// <summary>
		/// The employees' passport number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PassportNumber { get; set; }
		
		/// <summary>
		/// The employees' pay schedule
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeEmployee1PaySchedule PaySchedule { get; set; }
		
		/// <summary>
		/// The employees' payment method
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployeeEmployee1PaymentMethod> PaymentMethod { get; set; }
		
		/// <summary>
		/// The employees' payment to a non individual
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PaymentToANonIndividual { get; set; }
		
		/// <summary>
		/// The employees' region
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployeeEmployee1Region> Region { get; set; }
		
		/// <summary>
		/// The employees' revision
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The employees' rule exclusions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployeeEmployee1RuleExclusions> RuleExclusions { get; set; }
		
		/// <summary>
		/// The employees' seconded
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployeeEmployee1Seconded> Seconded { get; set; }
		
		/// <summary>
		/// The employees' start date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		/// <summary>
		/// The employees' starter declaration
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployeeEmployee1StarterDeclaration> StarterDeclaration { get; set; }
		
		/// <summary>
		/// The employees' territory
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployeeEmployee1Territory> Territory { get; set; }
		
		/// <summary>
		/// The employees' title
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// The employees' veteran period start date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> VeteranPeriodStartDate { get; set; }
		
		/// <summary>
		/// The employees' working week
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployeeEmployee1WorkingWeek> WorkingWeek { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployeeEmployee1AEExclusionReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OtherNotKnown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAWorker = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotUKWorker = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TemporaryUKWorker = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OutsideAgeRange = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SingleEmployeeDirector = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CeasedMembershipWithin12Months = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CeasedMembershipBeyond12Months = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkerWULSWithin12Month = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkerWULSBeyond12Month = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkerInNoticePeriod = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkerTaxProtection = 11,
	}
	
	public class EmployeeEmployee1Address
	{
		
		/// <summary>
		/// The addresss' line 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		/// <summary>
		/// The addresss' line 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		/// <summary>
		/// The addresss' line 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		/// <summary>
		/// The addresss' line 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		/// <summary>
		/// The addresss' country
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// The addresss' postcode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Postcode { get; set; }
	}
	
	public class EmployeeEmployee1BankAccount
	{
		
		/// <summary>
		/// The bank accounts' account name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The bank accounts' account number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The bank accounts' branch name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BranchName { get; set; }
		
		/// <summary>
		/// The bank accounts' reference
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// The bank accounts' sort code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SortCode { get; set; }
	}
	
	public class EmployeeEmployee1EmployeePartner
	{
		
		/// <summary>
		/// The employee partners' first name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The employee partners' initials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Initials { get; set; }
		
		/// <summary>
		/// The employee partners' last name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		/// <summary>
		/// The employee partners' middle name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// The employee partners' ni number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NiNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployeeEmployee1Gender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Male = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Female = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployeeEmployee1LeaverReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Resigned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dismissed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Redundant = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Retired = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deceased = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LegalCustody = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployeeEmployee1MaritalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Single = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Married = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Divorced = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Widowed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployeeEmployee1NicLiability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HasOtherJob = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IsFemaleEntitledToReducedRate = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IsNotLiable = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IsContractedOut = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IsFullyLiable = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IsApprentice = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LeaverBeyond6Weeks = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PaymentAfterLeavingIrregular = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IsFreePortWorker = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IsNotLiableForEmployerNi = 9,
	}
	
	public class EmployeeEmployee1PaySchedule
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployeeEmployee1PaymentMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cash = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cheque = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FasterPayments = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployeeEmployee1Region
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		England = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scotland = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wales = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployeeEmployee1RuleExclusions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NiMissingPayInstructionRule = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TaxMissingPayInstructionRule = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TaxCodeUpliftRule = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NiSetExpectedLetterRule = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NiDateOfBirthChangeRetrospectiveCRule = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NiDefermentStatusChangeRule = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NiEndContractedOutTransferRule = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PaymentAfterLeavingTaxCodeRule = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LeaverEndInstructionsRule = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P45StudentLoanInstructionRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P45TaxInstructionRule = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P45YtdTaxRule = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YtdInstructionRule = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TaxCodeRegionChangeRule = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AutoEnrolmentStatusChangeRule = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EmployeeDeceasedRule = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BenefitInstructionAutoEndRule = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployeeEmployee1Seconded
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stay183DaysOrMore = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StayLessThan183Days = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InOutUk = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployeeEmployee1StarterDeclaration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreviouslyReported = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		B = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		C = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployeeEmployee1Territory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UnitedKingdom = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployeeEmployee1WorkingWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tuesday = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wednesday = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Thursday = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Friday = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllWeekDays = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Saturday = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sunday = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AllDays = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmployeeSecret
	{
		
		[System.Runtime.Serialization.DataMember(Name="EmployeeSecret")]
		public EmployeeSecretEmployeeSecret1 EmployeeSecret1 { get; set; }
	}
	
	public class EmployeeSecretEmployeeSecret1
	{
		
		/// <summary>
		/// The employee secrets' created
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The employee secrets' name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The employee secrets' value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmployeeSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="EmployeeSummary")]
		public EmployeeSummaryEmployeeSummary1 EmployeeSummary1 { get; set; }
	}
	
	public class EmployeeSummaryEmployeeSummary1
	{
		
		/// <summary>
		/// The employee summarys' code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The employee summarys' effective date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EffectiveDate { get; set; }
		
		/// <summary>
		/// The employee summarys' employee link
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeSummaryEmployeeSummary1EmployeeLink EmployeeLink { get; set; }
		
		/// <summary>
		/// The employee summarys' employer link
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeSummaryEmployeeSummary1EmployerLink EmployerLink { get; set; }
		
		/// <summary>
		/// The employee summarys' first name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The employee summarys' initials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Initials { get; set; }
		
		/// <summary>
		/// The employee summarys' last name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		/// <summary>
		/// The employee summarys' last pay day
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> LastPayDay { get; set; }
		
		/// <summary>
		/// The employee summarys' last pay day schedule
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastPayDaySchedule { get; set; }
		
		/// <summary>
		/// The employee summarys' last pay day tax year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LastPayDayTaxYear { get; set; }
		
		/// <summary>
		/// The employee summarys' leaving date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> LeavingDate { get; set; }
		
		/// <summary>
		/// The employee summarys' meta data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MetaData { get; set; }
		
		/// <summary>
		/// The employee summarys' next pay day
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> NextPayDay { get; set; }
		
		/// <summary>
		/// The employee summarys' next revision date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> NextRevisionDate { get; set; }
		
		/// <summary>
		/// The employee summarys' ni letter
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NiLetter { get; set; }
		
		/// <summary>
		/// The employee summarys' ni number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NiNumber { get; set; }
		
		/// <summary>
		/// The employee summarys' pay schedule link
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeSummaryEmployeeSummary1PayScheduleLink PayScheduleLink { get; set; }
		
		/// <summary>
		/// The employee summarys' pay schedule name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PayScheduleName { get; set; }
		
		/// <summary>
		/// The employee summarys' revision
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The employee summarys' start date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		/// <summary>
		/// The employee summarys' status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		/// <summary>
		/// The employee summarys' tax basis
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployeeSummaryEmployeeSummary1TaxBasis> TaxBasis { get; set; }
		
		/// <summary>
		/// The employee summarys' tax code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// The employee summarys' title
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// The employee summarys' unique key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UniqueKey { get; set; }
	}
	
	public class EmployeeSummaryEmployeeSummary1EmployeeLink
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	public class EmployeeSummaryEmployeeSummary1EmployerLink
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	public class EmployeeSummaryEmployeeSummary1PayScheduleLink
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployeeSummaryEmployeeSummary1TaxBasis
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cumulative = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Week1Month1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Employer
	{
		
		[System.Runtime.Serialization.DataMember(Name="Employer")]
		public EmployerEmployer1 Employer1 { get; set; }
	}
	
	public class EmployerEmployer1
	{
		
		/// <summary>
		/// The employers' address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployerEmployer1Address Address { get; set; }
		
		/// <summary>
		/// The employers' apprenticeship levy allowance
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ApprenticeshipLevyAllowance { get; set; }
		
		/// <summary>
		/// The employers' auto enrolment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployerEmployer1AutoEnrolment AutoEnrolment { get; set; }
		
		/// <summary>
		/// The employers' bacs service user number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BacsServiceUserNumber { get; set; }
		
		/// <summary>
		/// The employers' bank account
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployerEmployer1BankAccount BankAccount { get; set; }
		
		/// <summary>
		/// The employers' calculate apprenticeship levy
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> CalculateApprenticeshipLevy { get; set; }
		
		/// <summary>
		/// The employers' claim employment allowance
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ClaimEmploymentAllowance { get; set; }
		
		/// <summary>
		/// The employers' claim small employer relief
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ClaimSmallEmployerRelief { get; set; }
		
		/// <summary>
		/// The employers' effective date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EffectiveDate { get; set; }
		
		/// <summary>
		/// The employers' hmrc settings
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployerEmployer1HmrcSettings HmrcSettings { get; set; }
		
		/// <summary>
		/// The employers' meta data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MetaData { get; set; }
		
		/// <summary>
		/// The employers' name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The employers' next revision date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> NextRevisionDate { get; set; }
		
		/// <summary>
		/// The employers' region
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeEmployee1Region Region { get; set; }
		
		/// <summary>
		/// The employers' revision
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The employers' rule exclusions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeEmployee1RuleExclusions RuleExclusions { get; set; }
		
		/// <summary>
		/// The employers' territory
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeEmployee1Territory Territory { get; set; }
	}
	
	public class EmployerEmployer1Address
	{
		
		/// <summary>
		/// The addresss' line 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		/// <summary>
		/// The addresss' line 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		/// <summary>
		/// The addresss' line 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		/// <summary>
		/// The addresss' line 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		/// <summary>
		/// The addresss' country
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// The addresss' postcode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Postcode { get; set; }
	}
	
	public class EmployerEmployer1AutoEnrolment
	{
		
		/// <summary>
		/// The employer auto enrolments' pension
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployerEmployer1AutoEnrolmentPension Pension { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' postponement date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> PostponementDate { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' primary address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployerEmployer1AutoEnrolmentPrimaryAddress PrimaryAddress { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' primary email
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryEmail { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' primary first name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryFirstName { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' primary job title
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryJobTitle { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' primary last name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryLastName { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' primary telephone
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryTelephone { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' re enrolment day offset
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReEnrolmentDayOffset { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' re enrolment month offset
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReEnrolmentMonthOffset { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' recent opt out re enrolment excluded
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RecentOptOutReEnrolmentExcluded { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' secondary address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployerEmployer1AutoEnrolmentSecondaryAddress SecondaryAddress { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' secondary email
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryEmail { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' secondary first name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryFirstName { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' secondary job title
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryJobTitle { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' secondary last name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryLastName { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' secondary telephone
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryTelephone { get; set; }
		
		/// <summary>
		/// The employer auto enrolments' staging date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> StagingDate { get; set; }
	}
	
	public class EmployerEmployer1AutoEnrolmentPension
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	public class EmployerEmployer1AutoEnrolmentPrimaryAddress
	{
		
		/// <summary>
		/// The addresss' line 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		/// <summary>
		/// The addresss' line 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		/// <summary>
		/// The addresss' line 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		/// <summary>
		/// The addresss' line 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		/// <summary>
		/// The addresss' country
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// The addresss' postcode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Postcode { get; set; }
	}
	
	public class EmployerEmployer1AutoEnrolmentSecondaryAddress
	{
		
		/// <summary>
		/// The addresss' line 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		/// <summary>
		/// The addresss' line 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		/// <summary>
		/// The addresss' line 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		/// <summary>
		/// The addresss' line 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		/// <summary>
		/// The addresss' country
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// The addresss' postcode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Postcode { get; set; }
	}
	
	public class EmployerEmployer1BankAccount
	{
		
		/// <summary>
		/// The bank accounts' account name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The bank accounts' account number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The bank accounts' branch name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BranchName { get; set; }
		
		/// <summary>
		/// The bank accounts' reference
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// The bank accounts' sort code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SortCode { get; set; }
	}
	
	public class EmployerEmployer1HmrcSettings
	{
		
		/// <summary>
		/// The hmrc settingss' accounting office ref
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountingOfficeRef { get; set; }
		
		/// <summary>
		/// The hmrc settingss' c o t a x ref
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string COTAXRef { get; set; }
		
		/// <summary>
		/// The hmrc settingss' contact email
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContactEmail { get; set; }
		
		/// <summary>
		/// The hmrc settingss' contact fax
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContactFax { get; set; }
		
		/// <summary>
		/// The hmrc settingss' contact first name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContactFirstName { get; set; }
		
		/// <summary>
		/// The hmrc settingss' contact last name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContactLastName { get; set; }
		
		/// <summary>
		/// The hmrc settingss' contact telephone
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContactTelephone { get; set; }
		
		/// <summary>
		/// The hmrc settingss' employment allowance override
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EmploymentAllowanceOverride { get; set; }
		
		/// <summary>
		/// The hmrc settingss' password
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		/// <summary>
		/// The hmrc settingss' s a u t r
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SAUTR { get; set; }
		
		/// <summary>
		/// The hmrc settingss' sender
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployerEmployer1HmrcSettingsSender> Sender { get; set; }
		
		/// <summary>
		/// The hmrc settingss' sender id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SenderId { get; set; }
		
		/// <summary>
		/// The hmrc settingss' state aid sector
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<EmployerEmployer1HmrcSettingsStateAidSector> StateAidSector { get; set; }
		
		/// <summary>
		/// The hmrc settingss' tax office number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxOfficeNumber { get; set; }
		
		/// <summary>
		/// The hmrc settingss' tax office reference
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TaxOfficeReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployerEmployer1HmrcSettingsSender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Employer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Individual = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Company = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Agent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bureau = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Partnership = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Trust = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Government = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActingInCapacity = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmployerEmployer1HmrcSettingsStateAidSector
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Agriculture = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FisheriesAquaculture = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RoadTransport = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Industrial = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotApplicable = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmployerSecret
	{
		
		[System.Runtime.Serialization.DataMember(Name="EmployerSecret")]
		public EmployerSecretEmployerSecret1 EmployerSecret1 { get; set; }
	}
	
	public class EmployerSecretEmployerSecret1
	{
		
		/// <summary>
		/// The employer secrets' created
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The employer secrets' name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The employer secrets' value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmployerSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="EmployerSummary")]
		public EmployerSummaryEmployerSummary1 EmployerSummary1 { get; set; }
	}
	
	public class EmployerSummaryEmployerSummary1
	{
		
		/// <summary>
		/// The employer summarys' effective date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EffectiveDate { get; set; }
		
		/// <summary>
		/// The employer summarys' meta data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MetaData { get; set; }
		
		/// <summary>
		/// The employer summarys' name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The employer summarys' next revision date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> NextRevisionDate { get; set; }
		
		/// <summary>
		/// The employer summarys' revision
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The employer summarys' unique key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UniqueKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="ErrorModel")]
		public ErrorModelErrorModel1 ErrorModel1 { get; set; }
	}
	
	public class ErrorModelErrorModel1
	{
		
		/// <summary>
		/// The error models' description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The error models' error category
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ErrorModelErrorModel1ErrorCategory> ErrorCategory { get; set; }
		
		/// <summary>
		/// The error models' errors
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorModelErrorModel1Errors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ErrorModelErrorModel1ErrorCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		General = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFound = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotAuthorised = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ValidationFailure = 3,
	}
	
	public class ErrorModelErrorModel1Errors
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HealthCheck
	{
		
		[System.Runtime.Serialization.DataMember(Name="HealthCheck")]
		public HealthCheckHealthCheck1 HealthCheck1 { get; set; }
	}
	
	public class HealthCheckHealthCheck1
	{
		
		/// <summary>
		/// The health checks' info
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Info { get; set; }
		
		/// <summary>
		/// The health checks' version
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HolidayScheme
	{
		
		[System.Runtime.Serialization.DataMember(Name="HolidayScheme")]
		public HolidaySchemeHolidayScheme1 HolidayScheme1 { get; set; }
	}
	
	public class HolidaySchemeHolidayScheme1
	{
		
		/// <summary>
		/// The holiday schemes' accrual pay codes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public HolidaySchemeHolidayScheme1AccrualPayCodes AccrualPayCodes { get; set; }
		
		/// <summary>
		/// The holiday schemes' allow exceed annual entitlement
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowExceedAnnualEntitlement { get; set; }
		
		/// <summary>
		/// The holiday schemes' allow negative balance
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowNegativeBalance { get; set; }
		
		/// <summary>
		/// The holiday schemes' annual entitlement weeks
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AnnualEntitlementWeeks { get; set; }
		
		/// <summary>
		/// The holiday schemes' bank holiday inclusive
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BankHolidayInclusive { get; set; }
		
		/// <summary>
		/// The holiday schemes' code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The holiday schemes' effective date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EffectiveDate { get; set; }
		
		/// <summary>
		/// The holiday schemes' max carry over days
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MaxCarryOverDays { get; set; }
		
		/// <summary>
		/// The holiday schemes' next revision date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> NextRevisionDate { get; set; }
		
		/// <summary>
		/// The holiday schemes' offset payment
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OffsetPayment { get; set; }
		
		/// <summary>
		/// The holiday schemes' revision
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The holiday schemes' scheme ceased date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> SchemeCeasedDate { get; set; }
		
		/// <summary>
		/// The holiday schemes' scheme key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeKey { get; set; }
		
		/// <summary>
		/// The holiday schemes' scheme name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// The holiday schemes' year start day
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> YearStartDay { get; set; }
		
		/// <summary>
		/// The holiday schemes' year start month
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> YearStartMonth { get; set; }
	}
	
	public class HolidaySchemeHolidayScheme1AccrualPayCodes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PayCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="JobInfo")]
		public JobInfoJobInfo1 JobInfo1 { get; set; }
	}
	
	public class JobInfoJobInfo1
	{
		
		/// <summary>
		/// The job infos' created
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The job infos' employer key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EmployerKey { get; set; }
		
		/// <summary>
		/// The job infos' errors
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JobInfoJobInfo1Errors Errors { get; set; }
		
		/// <summary>
		/// The job infos' holding date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> HoldingDate { get; set; }
		
		/// <summary>
		/// The job infos' job id
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		/// <summary>
		/// The job infos' job status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<JobInfoJobInfo1JobStatus> JobStatus { get; set; }
		
		/// <summary>
		/// The job infos' job type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string JobType { get; set; }
		
		/// <summary>
		/// The job infos' last updated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		/// <summary>
		/// The job infos' progress
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Progress { get; set; }
	}
	
	public class JobInfoJobInfo1Errors
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobInfoJobInfo1JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		New = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OnHold = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JournalExpressionDataTable
	{
		
		[System.Runtime.Serialization.DataMember(Name="JournalExpressionDataTable")]
		public JournalExpressionDataTableJournalExpressionDataTable1 JournalExpressionDataTable1 { get; set; }
	}
	
	public class JournalExpressionDataTableJournalExpressionDataTable1
	{
		
		/// <summary>
		/// The journal expression data tables' table name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TableName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JournalInstruction
	{
		
		[System.Runtime.Serialization.DataMember(Name="JournalInstruction")]
		public JournalInstructionJournalInstruction1 JournalInstruction1 { get; set; }
	}
	
	public class JournalInstructionJournalInstruction1
	{
		
		/// <summary>
		/// The journal instructions' accounting type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<JournalInstructionJournalInstruction1AccountingType> AccountingType { get; set; }
		
		/// <summary>
		/// The journal instructions' description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The journal instructions' end date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// The journal instructions' expression
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		/// <summary>
		/// The journal instructions' journal line tag
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string JournalLineTag { get; set; }
		
		/// <summary>
		/// The journal instructions' ledger target
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LedgerTarget { get; set; }
		
		/// <summary>
		/// The journal instructions' nom code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NomCode { get; set; }
		
		/// <summary>
		/// The journal instructions' start date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		/// <summary>
		/// The journal instructions' sub nom code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SubNomCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JournalInstructionJournalInstruction1AccountingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Credit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Debit = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JournalLine
	{
		
		[System.Runtime.Serialization.DataMember(Name="JournalLine")]
		public JournalLineJournalLine1 JournalLine1 { get; set; }
	}
	
	public class JournalLineJournalLine1
	{
		
		/// <summary>
		/// The journal lines' credit
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Credit { get; set; }
		
		/// <summary>
		/// The journal lines' debit
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Debit { get; set; }
		
		/// <summary>
		/// The journal lines' description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The journal lines' employee
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JournalLineJournalLine1Employee Employee { get; set; }
		
		/// <summary>
		/// The journal lines' generated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Generated { get; set; }
		
		/// <summary>
		/// The journal lines' grouping
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Grouping { get; set; }
		
		/// <summary>
		/// The journal lines' ledger target
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LedgerTarget { get; set; }
		
		/// <summary>
		/// The journal lines' nom code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NomCode { get; set; }
		
		/// <summary>
		/// The journal lines' pay frequency
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<JournalLineJournalLine1PayFrequency> PayFrequency { get; set; }
		
		/// <summary>
		/// The journal lines' pay run
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JournalLineJournalLine1PayRun PayRun { get; set; }
		
		/// <summary>
		/// The journal lines' sub contractor
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JournalLineJournalLine1SubContractor SubContractor { get; set; }
		
		/// <summary>
		/// The journal lines' sub nom code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SubNomCode { get; set; }
		
		/// <summary>
		/// The journal lines' tax period
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxPeriod { get; set; }
		
		/// <summary>
		/// The journal lines' tax year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxYear { get; set; }
	}
	
	public class JournalLineJournalLine1Employee
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JournalLineJournalLine1PayFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Weekly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monthly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TwoWeekly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FourWeekly = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yearly = 4,
	}
	
	public class JournalLineJournalLine1PayRun
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	public class JournalLineJournalLine1SubContractor
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Link
	{
		
		[System.Runtime.Serialization.DataMember(Name="Link")]
		public LinkLink1 Link1 { get; set; }
	}
	
	public class LinkLink1
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinkCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="LinkCollection")]
		public LinkCollectionLinkCollection1 LinkCollection1 { get; set; }
	}
	
	public class LinkCollectionLinkCollection1
	{
		
		/// <summary>
		/// The link collections' links
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LinkCollectionLinkCollection1Links Links { get; set; }
	}
	
	public class LinkCollectionLinkCollection1Links
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LinkCollectionLinkCollection1LinksLink[] LinkCollectionLinkCollection1LinksLink { get; set; }
	}
	
	public class LinkCollectionLinkCollection1LinksLink
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NominalCode
	{
		
		[System.Runtime.Serialization.DataMember(Name="NominalCode")]
		public NominalCodeNominalCode1 NominalCode1 { get; set; }
	}
	
	public class NominalCodeNominalCode1
	{
		
		/// <summary>
		/// The nominal codes' description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The nominal codes' key
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PayCode
	{
		
		[System.Runtime.Serialization.DataMember(Name="PayCode")]
		public PayCodePayCode1 PayCode1 { get; set; }
	}
	
	public class PayCodePayCode1
	{
		
		/// <summary>
		/// The pay codes' benefit
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Benefit { get; set; }
		
		/// <summary>
		/// The pay codes' code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The pay codes' description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The pay codes' effective date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EffectiveDate { get; set; }
		
		/// <summary>
		/// The pay codes' meta data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MetaData { get; set; }
		
		/// <summary>
		/// The pay codes' next revision date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> NextRevisionDate { get; set; }
		
		/// <summary>
		/// The pay codes' niable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Niable { get; set; }
		
		/// <summary>
		/// The pay codes' nominal code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PayCodePayCode1NominalCode NominalCode { get; set; }
		
		/// <summary>
		/// The pay codes' non arrestable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NonArrestable { get; set; }
		
		/// <summary>
		/// The pay codes' notional
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Notional { get; set; }
		
		/// <summary>
		/// The pay codes' readonly
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Readonly { get; set; }
		
		/// <summary>
		/// The pay codes' region
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeEmployee1Region Region { get; set; }
		
		/// <summary>
		/// The pay codes' revision
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The pay codes' taxable
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Taxable { get; set; }
		
		/// <summary>
		/// The pay codes' territory
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeEmployee1Territory Territory { get; set; }
		
		/// <summary>
		/// The pay codes' type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PayCodePayCode1Type> Type { get; set; }
	}
	
	public class PayCodePayCode1NominalCode
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PayCodePayCode1Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Payment = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deduction = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PayInstruction
	{
		
		[System.Runtime.Serialization.DataMember(Name="PayInstruction")]
		public PayInstructionPayInstruction1 PayInstruction1 { get; set; }
	}
	
	public class PayInstructionPayInstruction1
	{
		
		/// <summary>
		/// The pay instructions' description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The pay instructions' end date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// The pay instructions' pay line tag
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PayLineTag { get; set; }
		
		/// <summary>
		/// The pay instructions' start date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PayLine
	{
		
		[System.Runtime.Serialization.DataMember(Name="PayLine")]
		public PayLinePayLine1 PayLine1 { get; set; }
	}
	
	public class PayLinePayLine1
	{
		
		/// <summary>
		/// The pay lines' calculator
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Calculator { get; set; }
		
		/// <summary>
		/// The pay lines' description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The pay lines' generated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Generated { get; set; }
		
		/// <summary>
		/// The pay lines' pay code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PayCode { get; set; }
		
		/// <summary>
		/// The pay lines' pay code type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PayCodePayCode1Type PayCodeType { get; set; }
		
		/// <summary>
		/// The pay lines' pay run sequence
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PayRunSequence { get; set; }
		
		/// <summary>
		/// The pay lines' payment date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> PaymentDate { get; set; }
		
		/// <summary>
		/// The pay lines' tax period
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxPeriod { get; set; }
		
		/// <summary>
		/// The pay lines' tax year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxYear { get; set; }
		
		/// <summary>
		/// The pay lines' value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PayRun
	{
		
		[System.Runtime.Serialization.DataMember(Name="PayRun")]
		public PayRunPayRun1 PayRun1 { get; set; }
	}
	
	public class PayRunPayRun1
	{
		
		/// <summary>
		/// The pay runs' executed
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Executed { get; set; }
		
		/// <summary>
		/// The pay runs' is supplementary
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsSupplementary { get; set; }
		
		/// <summary>
		/// The pay runs' pay frequency
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JournalLineJournalLine1PayFrequency PayFrequency { get; set; }
		
		/// <summary>
		/// The pay runs' pay schedule
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PayRunPayRun1PaySchedule PaySchedule { get; set; }
		
		/// <summary>
		/// The pay runs' payment date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> PaymentDate { get; set; }
		
		/// <summary>
		/// The pay runs' period end
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> PeriodEnd { get; set; }
		
		/// <summary>
		/// The pay runs' period start
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> PeriodStart { get; set; }
		
		/// <summary>
		/// The pay runs' proceeding pay run
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PayRunPayRun1ProceedingPayRun ProceedingPayRun { get; set; }
		
		/// <summary>
		/// The pay runs' sequence
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sequence { get; set; }
		
		/// <summary>
		/// The pay runs' tax period
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxPeriod { get; set; }
		
		/// <summary>
		/// The pay runs' tax year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxYear { get; set; }
	}
	
	public class PayRunPayRun1PaySchedule
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	public class PayRunPayRun1ProceedingPayRun
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PayRunJobInstruction
	{
		
		[System.Runtime.Serialization.DataMember(Name="PayRunJobInstruction")]
		public PayRunJobInstructionPayRunJobInstruction1 PayRunJobInstruction1 { get; set; }
	}
	
	public class PayRunJobInstructionPayRunJobInstruction1
	{
		
		/// <summary>
		/// The pay run job instructions' employees
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PayRunJobInstructionPayRunJobInstruction1Employees Employees { get; set; }
		
		/// <summary>
		/// The pay run job instructions' end date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// The pay run job instructions' holding date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> HoldingDate { get; set; }
		
		/// <summary>
		/// The pay run job instructions' is supplementary
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsSupplementary { get; set; }
		
		/// <summary>
		/// The pay run job instructions' pay schedule
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PayRunJobInstructionPayRunJobInstruction1PaySchedule PaySchedule { get; set; }
		
		/// <summary>
		/// The pay run job instructions' payment date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> PaymentDate { get; set; }
		
		/// <summary>
		/// The pay run job instructions' start date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
	}
	
	public class PayRunJobInstructionPayRunJobInstruction1Employees
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PayRunJobInstructionPayRunJobInstruction1EmployeesEmployee[] PayRunJobInstructionPayRunJobInstruction1EmployeesEmployee { get; set; }
	}
	
	public class PayRunJobInstructionPayRunJobInstruction1EmployeesEmployee
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	public class PayRunJobInstructionPayRunJobInstruction1PaySchedule
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaySchedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="PaySchedule")]
		public PaySchedulePaySchedule1 PaySchedule1 { get; set; }
	}
	
	public class PaySchedulePaySchedule1
	{
		
		/// <summary>
		/// The pay schedules' meta data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MetaData { get; set; }
		
		/// <summary>
		/// The pay schedules' name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The pay schedules' pay frequency
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public JournalLineJournalLine1PayFrequency PayFrequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pension
	{
		
		[System.Runtime.Serialization.DataMember(Name="Pension")]
		public PensionPension1 Pension1 { get; set; }
	}
	
	public class PensionPension1
	{
		
		/// <summary>
		/// The pensions' a e compatible
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AECompatible { get; set; }
		
		/// <summary>
		/// The pensions' certification
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PensionPension1Certification> Certification { get; set; }
		
		/// <summary>
		/// The pensions' code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		/// <summary>
		/// The pensions' contribution deduction day
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ContributionDeductionDay { get; set; }
		
		/// <summary>
		/// The pensions' effective date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EffectiveDate { get; set; }
		
		/// <summary>
		/// The pensions' employee contribution cash
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EmployeeContributionCash { get; set; }
		
		/// <summary>
		/// The pensions' employee contribution percent
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EmployeeContributionPercent { get; set; }
		
		/// <summary>
		/// The pensions' employer contribution cash
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EmployerContributionCash { get; set; }
		
		/// <summary>
		/// The pensions' employer contribution percent
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EmployerContributionPercent { get; set; }
		
		/// <summary>
		/// The pensions' employer ni saving
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EmployerNiSaving { get; set; }
		
		/// <summary>
		/// The pensions' employer ni saving percentage
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> EmployerNiSavingPercentage { get; set; }
		
		/// <summary>
		/// The pensions' group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Group { get; set; }
		
		/// <summary>
		/// The pensions' lower threshold
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> LowerThreshold { get; set; }
		
		/// <summary>
		/// The pensions' meta data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MetaData { get; set; }
		
		/// <summary>
		/// The pensions' next revision date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> NextRevisionDate { get; set; }
		
		/// <summary>
		/// The pensions' pensionable pay codes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PensionPension1PensionablePayCodes PensionablePayCodes { get; set; }
		
		/// <summary>
		/// The pensions' pro rata method
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PensionPension1ProRataMethod> ProRataMethod { get; set; }
		
		/// <summary>
		/// The pensions' provider employer ref
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderEmployerRef { get; set; }
		
		/// <summary>
		/// The pensions' provider name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		/// <summary>
		/// The pensions' qualifying pay codes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PensionPension1QualifyingPayCodes QualifyingPayCodes { get; set; }
		
		/// <summary>
		/// The pensions' ras rounding override
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PensionPension1RasRoundingOverride> RasRoundingOverride { get; set; }
		
		/// <summary>
		/// The pensions' revision
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The pensions' rounding option
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PensionPension1RasRoundingOverride RoundingOption { get; set; }
		
		/// <summary>
		/// The pensions' salary sacrifice
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SalarySacrifice { get; set; }
		
		/// <summary>
		/// The pensions' scheme name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// The pensions' sub group
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SubGroup { get; set; }
		
		/// <summary>
		/// The pensions' taxation method
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PensionPension1TaxationMethod> TaxationMethod { get; set; }
		
		/// <summary>
		/// The pensions' upper threshold
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> UpperThreshold { get; set; }
		
		/// <summary>
		/// The pensions' use a e thresholds
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseAEThresholds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PensionPension1Certification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Set1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Set2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Set3 = 3,
	}
	
	public class PensionPension1PensionablePayCodes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PayCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PensionPension1ProRataMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Annual260Days = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Annual365Days = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AnnualQualifyingDays = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DaysPerCalendarMonth = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DaysPerTaxPeriod = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkingDaysPerCalendarMonth = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WeekDaysPerCalendarMonth = 7,
	}
	
	public class PensionPension1QualifyingPayCodes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PayCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PensionPension1RasRoundingOverride
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PennyUp = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PennyDown = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bankers = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FiveUp = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FiveDown = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Floor = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ceiling = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PensionPension1TaxationMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotSet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NetBased = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReliefAtSource = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TaxReliefExcluded = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Permission
	{
		
		[System.Runtime.Serialization.DataMember(Name="Permission")]
		public PermissionPermission1 Permission1 { get; set; }
	}
	
	public class PermissionPermission1
	{
		
		/// <summary>
		/// The permissions' description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The permissions' expression
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Expression { get; set; }
		
		/// <summary>
		/// The permissions' name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// The permissions' policy
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PermissionPermission1Policy> Policy { get; set; }
		
		/// <summary>
		/// The permissions' verbs
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PermissionPermission1Verbs> Verbs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PermissionPermission1Policy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Allow = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deny = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PermissionPermission1Verbs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Read = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Write = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delete = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Query
	{
		
		[System.Runtime.Serialization.DataMember(Name="Query")]
		public QueryQuery1 Query1 { get; set; }
	}
	
	public class QueryQuery1
	{
		
		/// <summary>
		/// The querys' encoding
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Encoding { get; set; }
		
		/// <summary>
		/// The querys' exclude null or empty elements
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ExcludeNullOrEmptyElements { get; set; }
		
		/// <summary>
		/// The querys' groups
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueryQuery1Groups Groups { get; set; }
		
		/// <summary>
		/// The querys' root node name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RootNodeName { get; set; }
		
		/// <summary>
		/// The querys' suppress metric attributes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SuppressMetricAttributes { get; set; }
		
		/// <summary>
		/// The querys' variables
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueryQuery1Variables Variables { get; set; }
	}
	
	public class QueryQuery1Groups
	{
		
		[System.Runtime.Serialization.DataMember()]
		public QueryQuery1GroupsGroup[] QueryQuery1GroupsGroup { get; set; }
	}
	
	public class QueryQuery1GroupsGroup
	{
		
		/// <summary>
		/// The entity groups' group name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@GroupName")]
		public string _GroupName { get; set; }
		
		/// <summary>
		/// The entity groups' item name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@ItemName")]
		public string _ItemName { get; set; }
		
		/// <summary>
		/// The entity groups' loop expression
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@LoopExpression")]
		public string _LoopExpression { get; set; }
		
		/// <summary>
		/// The entity groups' predicate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Predicate")]
		public string _Predicate { get; set; }
		
		/// <summary>
		/// The entity groups' selector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Selector")]
		public string _Selector { get; set; }
		
		/// <summary>
		/// The entity groups' unique key variable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@UniqueKeyVariable")]
		public string _UniqueKeyVariable { get; set; }
		
		/// <summary>
		/// The entity groups' conditions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueryQuery1GroupsGroupCondition[] QueryQuery1GroupsGroupCondition { get; set; }
		
		/// <summary>
		/// The entity groups' filters
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueryQuery1GroupsGroupFilter[] QueryQuery1GroupsGroupFilter { get; set; }
		
		/// <summary>
		/// The entity groups' ordering
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueryQuery1GroupsGroupOrder[] QueryQuery1GroupsGroupOrder { get; set; }
		
		/// <summary>
		/// The entity groups' outputs
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public QueryQuery1GroupsGroupOutput[] QueryQuery1GroupsGroupOutput { get; set; }
	}
	
	public class QueryQuery1GroupsGroupCondition
	{
		
		/// <summary>
		/// The compare condition bases' value a
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@ValueA")]
		public string _ValueA { get; set; }
		
		/// <summary>
		/// The compare condition bases' value b
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@ValueB")]
		public string _ValueB { get; set; }
	}
	
	public class QueryQuery1GroupsGroupFilter
	{
		
		/// <summary>
		/// The filter bases' is or
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@IsOr")]
		public System.Nullable<System.Boolean> _IsOr { get; set; }
		
		/// <summary>
		/// The filter bases' property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Property")]
		public string _Property { get; set; }
		
		/// <summary>
		/// The filter bases' value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Value")]
		public string _Value { get; set; }
	}
	
	public class QueryQuery1GroupsGroupOrder
	{
		
		/// <summary>
		/// The order by bases' property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Property")]
		public string _Property { get; set; }
	}
	
	public class QueryQuery1GroupsGroupOutput
	{
		
		/// <summary>
		/// The output bases' max length
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@MaxLength")]
		public string _MaxLength { get; set; }
		
		/// <summary>
		/// The output bases' output
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Output")]
		public System.Nullable<QueryQuery1GroupsGroupOutput_Output> _Output { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QueryQuery1GroupsGroupOutput_Output
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Element = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Attribute = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VariableSum = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VariableAppend = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VariablePrepend = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElementDatePart = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InnerText = 7,
	}
	
	public class QueryQuery1Variables
	{
		
		[System.Runtime.Serialization.DataMember()]
		public QueryQuery1VariablesVariable[] QueryQuery1VariablesVariable { get; set; }
	}
	
	public class QueryQuery1VariablesVariable
	{
		
		/// <summary>
		/// The name value pairs' name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Name")]
		public string _Name { get; set; }
		
		/// <summary>
		/// The name value pairs' value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Value")]
		public string _Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="ReportDefinition")]
		public ReportDefinitionReportDefinition1 ReportDefinition1 { get; set; }
	}
	
	public class ReportDefinitionReportDefinition1
	{
		
		/// <summary>
		/// The report definitions' active
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// The report definitions' readonly
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Readonly { get; set; }
		
		/// <summary>
		/// The report definitions' report query
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportDefinitionReportDefinition1ReportQuery ReportQuery { get; set; }
		
		/// <summary>
		/// The report definitions' supported transforms
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SupportedTransforms { get; set; }
		
		/// <summary>
		/// The report definitions' title
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// The report definitions' version
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	public class ReportDefinitionReportDefinition1ReportQuery
	{
		
		/// <summary>
		/// The querys' encoding
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Encoding { get; set; }
		
		/// <summary>
		/// The querys' exclude null or empty elements
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ExcludeNullOrEmptyElements { get; set; }
		
		/// <summary>
		/// The querys' groups
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportDefinitionReportDefinition1ReportQueryGroups Groups { get; set; }
		
		/// <summary>
		/// The querys' root node name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RootNodeName { get; set; }
		
		/// <summary>
		/// The querys' suppress metric attributes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SuppressMetricAttributes { get; set; }
		
		/// <summary>
		/// The querys' variables
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportDefinitionReportDefinition1ReportQueryVariables Variables { get; set; }
	}
	
	public class ReportDefinitionReportDefinition1ReportQueryGroups
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReportDefinitionReportDefinition1ReportQueryGroupsGroup[] ReportDefinitionReportDefinition1ReportQueryGroupsGroup { get; set; }
	}
	
	public class ReportDefinitionReportDefinition1ReportQueryGroupsGroup
	{
		
		/// <summary>
		/// The entity groups' group name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@GroupName")]
		public string _GroupName { get; set; }
		
		/// <summary>
		/// The entity groups' item name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@ItemName")]
		public string _ItemName { get; set; }
		
		/// <summary>
		/// The entity groups' loop expression
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@LoopExpression")]
		public string _LoopExpression { get; set; }
		
		/// <summary>
		/// The entity groups' predicate
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Predicate")]
		public string _Predicate { get; set; }
		
		/// <summary>
		/// The entity groups' selector
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Selector")]
		public string _Selector { get; set; }
		
		/// <summary>
		/// The entity groups' unique key variable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@UniqueKeyVariable")]
		public string _UniqueKeyVariable { get; set; }
		
		/// <summary>
		/// The entity groups' conditions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportDefinitionReportDefinition1ReportQueryGroupsGroupCondition[] ReportDefinitionReportDefinition1ReportQueryGroupsGroupCondition { get; set; }
		
		/// <summary>
		/// The entity groups' filters
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportDefinitionReportDefinition1ReportQueryGroupsGroupFilter[] ReportDefinitionReportDefinition1ReportQueryGroupsGroupFilter { get; set; }
		
		/// <summary>
		/// The entity groups' ordering
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportDefinitionReportDefinition1ReportQueryGroupsGroupOrder[] ReportDefinitionReportDefinition1ReportQueryGroupsGroupOrder { get; set; }
		
		/// <summary>
		/// The entity groups' outputs
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ReportDefinitionReportDefinition1ReportQueryGroupsGroupOutput[] ReportDefinitionReportDefinition1ReportQueryGroupsGroupOutput { get; set; }
	}
	
	public class ReportDefinitionReportDefinition1ReportQueryGroupsGroupCondition
	{
		
		/// <summary>
		/// The compare condition bases' value a
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@ValueA")]
		public string _ValueA { get; set; }
		
		/// <summary>
		/// The compare condition bases' value b
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@ValueB")]
		public string _ValueB { get; set; }
	}
	
	public class ReportDefinitionReportDefinition1ReportQueryGroupsGroupFilter
	{
		
		/// <summary>
		/// The filter bases' is or
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@IsOr")]
		public System.Nullable<System.Boolean> _IsOr { get; set; }
		
		/// <summary>
		/// The filter bases' property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Property")]
		public string _Property { get; set; }
		
		/// <summary>
		/// The filter bases' value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Value")]
		public string _Value { get; set; }
	}
	
	public class ReportDefinitionReportDefinition1ReportQueryGroupsGroupOrder
	{
		
		/// <summary>
		/// The order by bases' property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Property")]
		public string _Property { get; set; }
	}
	
	public class ReportDefinitionReportDefinition1ReportQueryGroupsGroupOutput
	{
		
		/// <summary>
		/// The output bases' max length
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@MaxLength")]
		public string _MaxLength { get; set; }
		
		/// <summary>
		/// The output bases' output
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Output")]
		public QueryQuery1GroupsGroupOutput_Output _Output { get; set; }
	}
	
	public class ReportDefinitionReportDefinition1ReportQueryVariables
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReportDefinitionReportDefinition1ReportQueryVariablesVariable[] ReportDefinitionReportDefinition1ReportQueryVariablesVariable { get; set; }
	}
	
	public class ReportDefinitionReportDefinition1ReportQueryVariablesVariable
	{
		
		/// <summary>
		/// The name value pairs' name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Name")]
		public string _Name { get; set; }
		
		/// <summary>
		/// The name value pairs' value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@Value")]
		public string _Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportLine
	{
		
		[System.Runtime.Serialization.DataMember(Name="ReportLine")]
		public ReportLineReportLine1 ReportLine1 { get; set; }
	}
	
	public class ReportLineReportLine1
	{
		
		/// <summary>
		/// The report lines' description
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The report lines' generated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Generated { get; set; }
		
		/// <summary>
		/// The report lines' tax month
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxMonth { get; set; }
		
		/// <summary>
		/// The report lines' tax year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxYear { get; set; }
		
		/// <summary>
		/// The report lines' value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportingInstruction
	{
		
		[System.Runtime.Serialization.DataMember(Name="ReportingInstruction")]
		public ReportingInstructionReportingInstruction1 ReportingInstruction1 { get; set; }
	}
	
	public class ReportingInstructionReportingInstruction1
	{
		
		/// <summary>
		/// The reporting instructions' end date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EndDate { get; set; }
		
		/// <summary>
		/// The reporting instructions' start date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> StartDate { get; set; }
		
		/// <summary>
		/// The reporting instructions' tax month
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxMonth { get; set; }
		
		/// <summary>
		/// The reporting instructions' tax year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxYear { get; set; }
		
		/// <summary>
		/// The reporting instructions' value
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RtiJobInstruction
	{
		
		[System.Runtime.Serialization.DataMember(Name="RtiJobInstruction")]
		public RtiJobInstructionRtiJobInstruction1 RtiJobInstruction1 { get; set; }
	}
	
	public class RtiJobInstructionRtiJobInstruction1
	{
		
		/// <summary>
		/// The rti job instructions' earlier tax year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EarlierTaxYear { get; set; }
		
		/// <summary>
		/// The rti job instructions' employer
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RtiJobInstructionRtiJobInstruction1Employer Employer { get; set; }
		
		/// <summary>
		/// The rti job instructions' final submission for year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> FinalSubmissionForYear { get; set; }
		
		/// <summary>
		/// The rti job instructions' generate
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Generate { get; set; }
		
		/// <summary>
		/// The rti job instructions' holding date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> HoldingDate { get; set; }
		
		/// <summary>
		/// The rti job instructions' late reason
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<RtiJobInstructionRtiJobInstruction1LateReason> LateReason { get; set; }
		
		/// <summary>
		/// The rti job instructions' no payment for period from
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> NoPaymentForPeriodFrom { get; set; }
		
		/// <summary>
		/// The rti job instructions' no payment for period to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> NoPaymentForPeriodTo { get; set; }
		
		/// <summary>
		/// The rti job instructions' pay schedule
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RtiJobInstructionRtiJobInstruction1PaySchedule PaySchedule { get; set; }
		
		/// <summary>
		/// The rti job instructions' payment date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> PaymentDate { get; set; }
		
		/// <summary>
		/// The rti job instructions' period of inactivity from
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> PeriodOfInactivityFrom { get; set; }
		
		/// <summary>
		/// The rti job instructions' period of inactivity to
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> PeriodOfInactivityTo { get; set; }
		
		/// <summary>
		/// The rti job instructions' rti transaction
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RtiJobInstructionRtiJobInstruction1RtiTransaction RtiTransaction { get; set; }
		
		/// <summary>
		/// The rti job instructions' rti type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RtiType { get; set; }
		
		/// <summary>
		/// The rti job instructions' scheme ceased
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> SchemeCeased { get; set; }
		
		/// <summary>
		/// The rti job instructions' tax month
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxMonth { get; set; }
		
		/// <summary>
		/// The rti job instructions' tax year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxYear { get; set; }
		
		/// <summary>
		/// The rti job instructions' timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		/// <summary>
		/// The rti job instructions' transmit
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Transmit { get; set; }
	}
	
	public class RtiJobInstructionRtiJobInstruction1Employer
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RtiJobInstructionRtiJobInstruction1LateReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		B = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		C = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		D = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		F = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		G = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		H = 6,
	}
	
	public class RtiJobInstructionRtiJobInstruction1PaySchedule
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	public class RtiJobInstructionRtiJobInstruction1RtiTransaction
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RtiTransactionBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="RtiTransactionBase")]
		public RtiTransactionBaseRtiTransactionBase1 RtiTransactionBase1 { get; set; }
	}
	
	public class RtiTransactionBaseRtiTransactionBase1
	{
		
		/// <summary>
		/// The rti transaction bases' employer core
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RtiTransactionBaseRtiTransactionBase1EmployerCore EmployerCore { get; set; }
		
		/// <summary>
		/// The rti transaction bases' request data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestData { get; set; }
		
		/// <summary>
		/// The rti transaction bases' response data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ResponseData { get; set; }
		
		/// <summary>
		/// The rti transaction bases' rti type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RtiType { get; set; }
		
		/// <summary>
		/// The rti transaction bases' tax year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxYear { get; set; }
		
		/// <summary>
		/// The rti transaction bases' timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		/// <summary>
		/// The rti transaction bases' transaction status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CisTransactionCisTransaction1TransactionStatus TransactionStatus { get; set; }
		
		/// <summary>
		/// The rti transaction bases' transmission date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransmissionDate { get; set; }
	}
	
	public class RtiTransactionBaseRtiTransactionBase1EmployerCore
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubContractor
	{
		
		[System.Runtime.Serialization.DataMember(Name="SubContractor")]
		public SubContractorSubContractor1 SubContractor1 { get; set; }
	}
	
	public class SubContractorSubContractor1
	{
		
		/// <summary>
		/// The sub contractors' address
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SubContractorSubContractor1Address Address { get; set; }
		
		/// <summary>
		/// The sub contractors' bank account
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SubContractorSubContractor1BankAccount BankAccount { get; set; }
		
		/// <summary>
		/// The sub contractors' business type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<SubContractorSubContractor1BusinessType> BusinessType { get; set; }
		
		/// <summary>
		/// The sub contractors' company name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// The sub contractors' company registration number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CompanyRegistrationNumber { get; set; }
		
		/// <summary>
		/// The sub contractors' deactivated
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Deactivated { get; set; }
		
		/// <summary>
		/// The sub contractors' effective date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> EffectiveDate { get; set; }
		
		/// <summary>
		/// The sub contractors' first name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The sub contractors' initials
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Initials { get; set; }
		
		/// <summary>
		/// The sub contractors' last name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		/// <summary>
		/// The sub contractors' meta data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MetaData { get; set; }
		
		/// <summary>
		/// The sub contractors' middle name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// The sub contractors' next revision date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateOnly> NextRevisionDate { get; set; }
		
		/// <summary>
		/// The sub contractors' ni number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NiNumber { get; set; }
		
		/// <summary>
		/// The sub contractors' partnership name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PartnershipName { get; set; }
		
		/// <summary>
		/// The sub contractors' partnership unique tax reference
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PartnershipUniqueTaxReference { get; set; }
		
		/// <summary>
		/// The sub contractors' pay frequency
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CisInstructionCisInstruction1PayFrequency PayFrequency { get; set; }
		
		/// <summary>
		/// The sub contractors' payment method
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeEmployee1PaymentMethod PaymentMethod { get; set; }
		
		/// <summary>
		/// The sub contractors' region
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeEmployee1Region Region { get; set; }
		
		/// <summary>
		/// The sub contractors' revision
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The sub contractors' taxation status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<SubContractorSubContractor1TaxationStatus> TaxationStatus { get; set; }
		
		/// <summary>
		/// The sub contractors' telephone
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Telephone { get; set; }
		
		/// <summary>
		/// The sub contractors' territory
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public EmployeeEmployee1Territory Territory { get; set; }
		
		/// <summary>
		/// The sub contractors' title
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// The sub contractors' trading name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string TradingName { get; set; }
		
		/// <summary>
		/// The sub contractors' unique tax reference
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UniqueTaxReference { get; set; }
		
		/// <summary>
		/// The sub contractors' vat registered
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> VatRegistered { get; set; }
		
		/// <summary>
		/// The sub contractors' vat registration number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VatRegistrationNumber { get; set; }
		
		/// <summary>
		/// The sub contractors' verification date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> VerificationDate { get; set; }
		
		/// <summary>
		/// The sub contractors' verification number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string VerificationNumber { get; set; }
		
		/// <summary>
		/// The sub contractors' works number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WorksNumber { get; set; }
	}
	
	public class SubContractorSubContractor1Address
	{
		
		/// <summary>
		/// The addresss' line 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address1 { get; set; }
		
		/// <summary>
		/// The addresss' line 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address2 { get; set; }
		
		/// <summary>
		/// The addresss' line 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address3 { get; set; }
		
		/// <summary>
		/// The addresss' line 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Address4 { get; set; }
		
		/// <summary>
		/// The addresss' country
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// The addresss' postcode
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Postcode { get; set; }
	}
	
	public class SubContractorSubContractor1BankAccount
	{
		
		/// <summary>
		/// The bank accounts' account name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The bank accounts' account number
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The bank accounts' branch name
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BranchName { get; set; }
		
		/// <summary>
		/// The bank accounts' reference
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Reference { get; set; }
		
		/// <summary>
		/// The bank accounts' sort code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SortCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubContractorSubContractor1BusinessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SoleTrader = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Company = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Partnership = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Trust = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SubContractorSubContractor1TaxationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unmatched = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Net = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gross = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember(Name="Tag")]
		public TagTag1 Tag1 { get; set; }
	}
	
	public class TagTag1
	{
		
		/// <summary>
		/// The tags' created
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		/// <summary>
		/// The tags' tagged item
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TagTag1TaggedItem TaggedItem { get; set; }
		
		/// <summary>
		/// The tags' text
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	public class TagTag1TaggedItem
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyJobInstruction
	{
		
		[System.Runtime.Serialization.DataMember(Name="ThirdPartyJobInstruction")]
		public ThirdPartyJobInstructionThirdPartyJobInstruction1 ThirdPartyJobInstruction1 { get; set; }
	}
	
	public class ThirdPartyJobInstructionThirdPartyJobInstruction1
	{
		
		/// <summary>
		/// The third party job instructions' employer href
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string EmployerHref { get; set; }
		
		/// <summary>
		/// The third party job instructions' holding date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> HoldingDate { get; set; }
		
		/// <summary>
		/// The third party job instructions' instruction type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstructionType { get; set; }
		
		/// <summary>
		/// The third party job instructions' meta data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MetaData { get; set; }
		
		/// <summary>
		/// The third party job instructions' pay load
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string PayLoad { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyTransaction
	{
		
		[System.Runtime.Serialization.DataMember(Name="ThirdPartyTransaction")]
		public ThirdPartyTransactionThirdPartyTransaction1 ThirdPartyTransaction1 { get; set; }
	}
	
	public class ThirdPartyTransactionThirdPartyTransaction1
	{
		
		/// <summary>
		/// The third party transactions' employer core
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ThirdPartyTransactionThirdPartyTransaction1EmployerCore EmployerCore { get; set; }
		
		/// <summary>
		/// The third party transactions' job type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string JobType { get; set; }
		
		/// <summary>
		/// The third party transactions' request
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Request { get; set; }
		
		/// <summary>
		/// The third party transactions' response
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Response { get; set; }
		
		/// <summary>
		/// The third party transactions' transaction status
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ThirdPartyTransactionThirdPartyTransaction1TransactionStatus> TransactionStatus { get; set; }
		
		/// <summary>
		/// The third party transactions' transmission date
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> TransmissionDate { get; set; }
	}
	
	public class ThirdPartyTransactionThirdPartyTransaction1EmployerCore
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ThirdPartyTransactionThirdPartyTransaction1TransactionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unknown = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failure = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransformDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="TransformDefinition")]
		public TransformDefinitionTransformDefinition1 TransformDefinition1 { get; set; }
	}
	
	public class TransformDefinitionTransformDefinition1
	{
		
		/// <summary>
		/// The transform definitions' active
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// The transform definitions' content type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The transform definitions' definition
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Definition { get; set; }
		
		/// <summary>
		/// The transform definitions' definition type
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DefinitionType { get; set; }
		
		/// <summary>
		/// The transform definitions' readonly
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Readonly { get; set; }
		
		/// <summary>
		/// The transform definitions' supported reports
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SupportedReports { get; set; }
		
		/// <summary>
		/// The transform definitions' tax year
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TaxYear { get; set; }
		
		/// <summary>
		/// The transform definitions' title
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		/// <summary>
		/// The transform definitions' version
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="User")]
		public UserUser1 User1 { get; set; }
	}
	
	public class UserUser1
	{
		
		/// <summary>
		/// The users' meta data
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MetaData { get; set; }
		
		/// <summary>
		/// The users' permissions
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserUser1Permissions Permissions { get; set; }
		
		/// <summary>
		/// The users' roles
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UserUser1Roles Roles { get; set; }
		
		/// <summary>
		/// The users' user identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string UserIdentifier { get; set; }
	}
	
	public class UserUser1Permissions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserUser1PermissionsPermission[] UserUser1PermissionsPermission { get; set; }
	}
	
	public class UserUser1PermissionsPermission
	{
		
		/// <summary>
		/// The links' href
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@href")]
		public string _href { get; set; }
		
		/// <summary>
		/// The links' target type
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@rel")]
		public string _rel { get; set; }
		
		/// <summary>
		/// The links' title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@title")]
		public string _title { get; set; }
	}
	
	public class UserUser1Roles
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Role { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete an Employer
		/// Delete the specified employer
		/// DeleteEmployer Employer/{EmployerId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		public async Task DeleteEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the employer
		/// Get the specified employer object
		/// GetEmployer Employer/{EmployerId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The employer object.</returns>
		public async Task<Employer> GetEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Employer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches the employer
		/// Patches the specified employer with the supplied values
		/// PatchEmployer Employer/{EmployerId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="requestBody">The employer object.</param>
		/// <returns>The employer object.</returns>
		public async Task<Employer> PatchEmployerAsync(string EmployerId, Employer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Employer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Employer
		/// Updates the existing specified employer object
		/// PutEmployer Employer/{EmployerId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="requestBody">The employer object.</param>
		/// <returns>The employer object.</returns>
		public async Task<Employer> PutEmployerAsync(string EmployerId, Employer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Employer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an CIS line type
		/// Delete the specified CIS line type
		/// DeleteCisLineType Employer/{EmployerId}/CisLineType/{CisLineTypeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="CisLineTypeId">The CIS line type unique identifier. E.g. TYPEA</param>
		public async Task DeleteCisLineTypeAsync(string EmployerId, string CisLineTypeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisLineType/"+ (CisLineTypeId==null? "" : System.Uri.EscapeDataString(CisLineTypeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get CIS line type from employer
		/// Gets the specified CIS line type from employer.
		/// GetCisLineTypeFromEmployer Employer/{EmployerId}/CisLineType/{CisLineTypeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="CisLineTypeId">The CIS line type unique identifier. E.g. TYPEA</param>
		/// <returns>The cis line type object.</returns>
		public async Task<CisLineType> GetCisLineTypeFromEmployerAsync(string EmployerId, string CisLineTypeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisLineType/"+ (CisLineTypeId==null? "" : System.Uri.EscapeDataString(CisLineTypeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CisLineType>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the CIS line type
		/// Updates the existing specified CIS line type object
		/// PutCisLineTypeIntoEmployer Employer/{EmployerId}/CisLineType/{CisLineTypeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="CisLineTypeId">The CIS line type unique identifier. E.g. TYPEA</param>
		/// <param name="requestBody">The CIS line type object.</param>
		/// <returns>The cis line type object.</returns>
		public async Task<CisLineType> PutCisLineTypeIntoEmployerAsync(string EmployerId, string CisLineTypeId, CisLineType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisLineType/"+ (CisLineTypeId==null? "" : System.Uri.EscapeDataString(CisLineTypeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CisLineType>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete CIS line type tag
		/// Deletes a tag from the CIS line type
		/// DeleteCisLineTypeTag Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="CisLineTypeId">The CIS line type unique identifier. E.g. TYPEA</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeleteCisLineTypeTagAsync(string EmployerId, string CisLineTypeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisLineType/"+ (CisLineTypeId==null? "" : System.Uri.EscapeDataString(CisLineTypeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get CIS line type tag
		/// Gets the tag from the CIS line type
		/// GetTagFromCisLineType Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="CisLineTypeId">The CIS line type unique identifier. E.g. TYPEA</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromCisLineTypeAsync(string EmployerId, string CisLineTypeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisLineType/"+ (CisLineTypeId==null? "" : System.Uri.EscapeDataString(CisLineTypeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert CIS line type tag
		/// Inserts a new tag on the CIS line type
		/// PutCisLineTypeTag Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="CisLineTypeId">The CIS line type unique identifier. E.g. TYPEA</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutCisLineTypeTagAsync(string EmployerId, string CisLineTypeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisLineType/"+ (CisLineTypeId==null? "" : System.Uri.EscapeDataString(CisLineTypeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all tags from the CIS line type
		/// Gets all the tags from the CIS line type
		/// GetTagsFromCisLineType Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="CisLineTypeId">The CIS line type unique identifier. E.g. TYPEA</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromCisLineTypeAsync(string EmployerId, string CisLineTypeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisLineType/"+ (CisLineTypeId==null? "" : System.Uri.EscapeDataString(CisLineTypeId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get CIS line types from employer.
		/// Get links to all CIS line types for the specified employer.
		/// GetCisLineTypesFromEmployer Employer/{EmployerId}/CisLineTypes
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetCisLineTypesFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisLineTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new CIS line type
		/// Create a new CIS line type object
		/// PostCisLineTypeIntoEmployer Employer/{EmployerId}/CisLineTypes
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="requestBody">The CIS line type object.</param>
		public async Task PostCisLineTypeIntoEmployerAsync(string EmployerId, CisLineType requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisLineTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get CIS line types with tag
		/// Gets the CIS line type with the tag
		/// GetCisLineTypesWithTag Employer/{EmployerId}/CisLineTypes/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetCisLineTypesWithTagAsync(string EmployerId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisLineTypes/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all CIS line type tags
		/// Gets all the CIS line type tags
		/// GetAllCisLineTypeTags Employer/{EmployerId}/CisLineTypes/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllCisLineTypeTagsAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisLineTypes/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the CIS transaction
		/// Deletes the specified CIS transaction
		/// DeleteCisTransaction Employer/{EmployerId}/CisTransaction/{CisTransactionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="CisTransactionId">The CIS transaction unique identifier. E.g. CISTRAN001</param>
		/// <returns>No Content</returns>
		public async Task DeleteCisTransactionAsync(string EmployerId, string CisTransactionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisTransaction/"+ (CisTransactionId==null? "" : System.Uri.EscapeDataString(CisTransactionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the CIS transaction
		/// Returns the specified CIS transaction
		/// GetCisTransactionFromEmployer Employer/{EmployerId}/CisTransaction/{CisTransactionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="CisTransactionId">The CIS transaction unique identifier. E.g. CISTRAN001</param>
		/// <returns>The cis transaction object.</returns>
		public async Task<CisTransaction> GetCisTransactionFromEmployerAsync(string EmployerId, string CisTransactionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisTransaction/"+ (CisTransactionId==null? "" : System.Uri.EscapeDataString(CisTransactionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CisTransaction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all CIS transactions for the employer
		/// Get links for all CIS transactions for the specified employer
		/// GetCisTransactionsFromEmployer Employer/{EmployerId}/CisTransactions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetCisTransactionsFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/CisTransactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the DPS message
		/// Deletes the DPS message
		/// DeleteDpsMessage Employer/{EmployerId}/DpsMessage/{DpsMessageId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="DpsMessageId">The DPS message unique identifier. E.g. DPS001</param>
		public async Task DeleteDpsMessageAsync(string EmployerId, string DpsMessageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/DpsMessage/"+ (DpsMessageId==null? "" : System.Uri.EscapeDataString(DpsMessageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the DPS message
		/// Gets the DPS message
		/// GetDpsMessageFromEmployer Employer/{EmployerId}/DpsMessage/{DpsMessageId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="DpsMessageId">The DPS message unique identifier. E.g. DPS001</param>
		/// <returns>The dps message object.</returns>
		public async Task<DpsMessage> GetDpsMessageFromEmployerAsync(string EmployerId, string DpsMessageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/DpsMessage/"+ (DpsMessageId==null? "" : System.Uri.EscapeDataString(DpsMessageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DpsMessage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches the DPS message
		/// Patches the specified DPS message with the supplied values
		/// PatchDpsMessage Employer/{EmployerId}/DpsMessage/{DpsMessageId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="DpsMessageId">The DPS message unique identifier. E.g. DPS001</param>
		/// <returns>The dps message object.</returns>
		public async Task<DpsMessage> PatchDpsMessageAsync(string EmployerId, string DpsMessageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/DpsMessage/"+ (DpsMessageId==null? "" : System.Uri.EscapeDataString(DpsMessageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DpsMessage>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Puts the DPS message
		/// Puts the DPS message
		/// PutDpsMessage Employer/{EmployerId}/DpsMessage/{DpsMessageId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="DpsMessageId">The DPS message unique identifier. E.g. DPS001</param>
		public async Task PutDpsMessageAsync(string EmployerId, string DpsMessageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/DpsMessage/"+ (DpsMessageId==null? "" : System.Uri.EscapeDataString(DpsMessageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the DPS messages
		/// Gets the DPS message links
		/// GetDpsMessagesFromEmployer Employer/{EmployerId}/DpsMessages
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetDpsMessagesFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/DpsMessages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Posta the DPS message
		/// Insert new DPS message
		/// PostDpsMessage Employer/{EmployerId}/DpsMessages
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		public async Task PostDpsMessageAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/DpsMessages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an Employee
		/// Delete the specified employee
		/// DeleteEmployee Employer/{EmployerId}/Employee/{EmployeeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		public async Task DeleteEmployeeAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employee from employer
		/// Gets the specified employee from employer by employee code.
		/// GetEmployeeFromEmployer Employer/{EmployerId}/Employee/{EmployeeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The employee object.</returns>
		public async Task<Employee> GetEmployeeFromEmployerAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Employee>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches the employee
		/// Patches the specified employee with the supplied values
		/// PatchEmployee Employer/{EmployerId}/Employee/{EmployeeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="requestBody">The employee object.</param>
		/// <returns>The employee object.</returns>
		public async Task<Employee> PatchEmployeeAsync(string EmployerId, string EmployeeId, Employee requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Employee>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Employee
		/// Updates the existing specified employee object
		/// PutEmployeeIntoEmployer Employer/{EmployerId}/Employee/{EmployeeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="requestBody">The employee object.</param>
		/// <returns>The employee object.</returns>
		public async Task<Employee> PutEmployeeIntoEmployerAsync(string EmployerId, string EmployeeId, Employee requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Employee>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete auto enrolment assessment
		/// Deletes an existing auto enrolment assessment for the employee. Used to remove historical assessments
		/// DeleteAEAssessment Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessment/{AEAssessmentId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="AEAssessmentId">The auto enrolment assessment unique identifier. E.g. AE001</param>
		/// <returns>No Content</returns>
		public async Task DeleteAEAssessmentAsync(string EmployerId, string EmployeeId, string AEAssessmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/AEAssessment/"+ (AEAssessmentId==null? "" : System.Uri.EscapeDataString(AEAssessmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the auto enrolment assessment
		/// Gets the auto enrolment assessment from the specified employee
		/// GetAEAssessmentFromEmployee Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessment/{AEAssessmentId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="AEAssessmentId">The auto enrolment assessment unique identifier. E.g. AE001</param>
		/// <returns>The a e assessment object.</returns>
		public async Task<AEAssessment> GetAEAssessmentFromEmployeeAsync(string EmployerId, string EmployeeId, string AEAssessmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/AEAssessment/"+ (AEAssessmentId==null? "" : System.Uri.EscapeDataString(AEAssessmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AEAssessment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert new auto enrolment assessment
		/// Creates a new auto enrolment assessment for the employee. Used to insert historical assessments
		/// PutNewAEAssessment Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessment/{AEAssessmentId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="AEAssessmentId">The auto enrolment assessment unique identifier. E.g. AE001</param>
		/// <param name="requestBody">The auto enrolment assessment object.</param>
		/// <returns>The a e assessment object.</returns>
		public async Task<AEAssessment> PutNewAEAssessmentAsync(string EmployerId, string EmployeeId, string AEAssessmentId, AEAssessment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/AEAssessment/"+ (AEAssessmentId==null? "" : System.Uri.EscapeDataString(AEAssessmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AEAssessment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the auto enrolment assessments
		/// Gets all auto enrolment assessments from the specified employee
		/// GetAEAssessmentsFromEmployee Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessments
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAEAssessmentsFromEmployeeAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/AEAssessments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert new auto enrolment assessment
		/// Creates a new auto enrolment assessment for the employee. Used to insert historical assessments
		/// PostNewAEAssessment Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessments
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="requestBody">The auto enrolment assessment object.</param>
		/// <returns>The link object.</returns>
		public async Task<Link> PostNewAEAssessmentAsync(string EmployerId, string EmployeeId, AEAssessment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/AEAssessments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Link>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get links to all commentaries for the specified employee
		/// Get links to all commentaries for the specified employee.
		/// GetCommentariesFromEmployee Employer/{EmployerId}/Employee/{EmployeeId}/Commentaries
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetCommentariesFromEmployeeAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Commentaries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get commentary from employee
		/// Gets the specified commentary report from the employee
		/// GetCommentaryFromEmployee Employer/{EmployerId}/Employee/{EmployeeId}/Commentary/{CommentaryId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="CommentaryId">The commentary unique identifier. E.g. C001</param>
		/// <returns>The commentary object.</returns>
		public async Task<Commentary> GetCommentaryFromEmployeeAsync(string EmployerId, string EmployeeId, string CommentaryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Commentary/"+ (CommentaryId==null? "" : System.Uri.EscapeDataString(CommentaryId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Commentary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the journal Lines from the specified employee
		/// Get links to all journal lines for the specified employee
		/// GetJournalLinesFromEmployee Employer/{EmployerId}/Employee/{EmployeeId}/JournalLines
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetJournalLinesFromEmployeeAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/JournalLines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a pay instruction
		/// Delete the specified pay instruction
		/// DeletePayInstruction Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="PayInstructionId">The pay instruction unique identifier. E.g. SAL001</param>
		public async Task DeletePayInstructionAsync(string EmployerId, string EmployeeId, string PayInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayInstruction/"+ (PayInstructionId==null? "" : System.Uri.EscapeDataString(PayInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified pay instruction from the employee
		/// Returns the specified pay instruction from employee
		/// GetPayInstructionFromEmployee Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="PayInstructionId">The pay instruction unique identifier. E.g. SAL001</param>
		/// <returns>The pay instruction object.</returns>
		public async Task<PayInstruction> GetPayInstructionFromEmployeeAsync(string EmployerId, string EmployeeId, string PayInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayInstruction/"+ (PayInstructionId==null? "" : System.Uri.EscapeDataString(PayInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PayInstruction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sparse Update of a Pay Instruction
		/// Patches the specified pay instruction with the supplied values
		/// PatchPayInstruction Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="PayInstructionId">The pay instruction unique identifier. E.g. SAL001</param>
		/// <param name="requestBody">The pay instruction object.</param>
		/// <returns>The pay instruction object.</returns>
		public async Task<PayInstruction> PatchPayInstructionAsync(string EmployerId, string EmployeeId, string PayInstructionId, PayInstruction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayInstruction/"+ (PayInstructionId==null? "" : System.Uri.EscapeDataString(PayInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PayInstruction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Pay Instruction
		/// Updates the existing specified pay instruction object
		/// PutPayInstruction Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="PayInstructionId">The pay instruction unique identifier. E.g. SAL001</param>
		/// <param name="requestBody">The pay instruction object.</param>
		/// <returns>The pay instruction object.</returns>
		public async Task<PayInstruction> PutPayInstructionAsync(string EmployerId, string EmployeeId, string PayInstructionId, PayInstruction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayInstruction/"+ (PayInstructionId==null? "" : System.Uri.EscapeDataString(PayInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PayInstruction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete pay instruction tag
		/// Deletes a tag from the pay instruction
		/// DeletePayInstructionTag Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="PayInstructionId">The pay instruction unique identifier. E.g. SAL001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeletePayInstructionTagAsync(string EmployerId, string EmployeeId, string PayInstructionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayInstruction/"+ (PayInstructionId==null? "" : System.Uri.EscapeDataString(PayInstructionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pay instruction tag
		/// Gets the tag from the pay instruction
		/// GetTagFromPayInstruction Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="PayInstructionId">The pay instruction unique identifier. E.g. SAL001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromPayInstructionAsync(string EmployerId, string EmployeeId, string PayInstructionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayInstruction/"+ (PayInstructionId==null? "" : System.Uri.EscapeDataString(PayInstructionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert pay instruction tag
		/// Inserts a new tag on the pay instruction
		/// PutPayInstructionTag Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="PayInstructionId">The pay instruction unique identifier. E.g. SAL001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutPayInstructionTagAsync(string EmployerId, string EmployeeId, string PayInstructionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayInstruction/"+ (PayInstructionId==null? "" : System.Uri.EscapeDataString(PayInstructionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all tags from the pay instruction
		/// Gets all the tags from the pay instruction
		/// GetTagsFromPayInstruction Employer/{EmployerId}/Employee/{EmployeeId}/PayInstruction/{PayInstructionId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="PayInstructionId">The pay instruction unique identifier. E.g. SAL001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromPayInstructionAsync(string EmployerId, string EmployeeId, string PayInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayInstruction/"+ (PayInstructionId==null? "" : System.Uri.EscapeDataString(PayInstructionId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the pay instructions from the specified employee
		/// Get links to all pay instructions for the specified employee
		/// GetPayInstructionsFromEmployee Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayInstructionsFromEmployeeAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayInstructions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Pay Instruction
		/// Creates a new pay instruction object
		/// PostPayInstruction Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="requestBody">The pay instruction object.</param>
		public async Task PostPayInstructionAsync(string EmployerId, string EmployeeId, PayInstruction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayInstructions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pay instructions with tag
		/// Gets the pay instructions with the tag
		/// GetPayInstructionsWithTag Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayInstructionsWithTagAsync(string EmployerId, string EmployeeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayInstructions/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all pay instruction tags
		/// Gets all the pay instruction tags
		/// GetAllPayInstructionTags Employer/{EmployerId}/Employee/{EmployeeId}/PayInstructions/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllPayInstructionTagsAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayInstructions/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified pay line from the employee
		/// Returns the specified pay line from employee
		/// GetPayLineFromEmployee Employer/{EmployerId}/Employee/{EmployeeId}/PayLine/{PayLineId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="PayLineId">The pay line unique identifier. E.g. PL001</param>
		/// <returns>The pay line object.</returns>
		public async Task<PayLine> GetPayLineFromEmployeeAsync(string EmployerId, string EmployeeId, string PayLineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayLine/"+ (PayLineId==null? "" : System.Uri.EscapeDataString(PayLineId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PayLine>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete pay line tag
		/// Deletes a tag from the pay line
		/// DeletePayLineTag Employer/{EmployerId}/Employee/{EmployeeId}/PayLine/{PayLineId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="PayLineId">The pay line unique identifier. E.g. PL001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeletePayLineTagAsync(string EmployerId, string EmployeeId, string PayLineId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayLine/"+ (PayLineId==null? "" : System.Uri.EscapeDataString(PayLineId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pay line tag
		/// Gets the tag from the pay line
		/// GetTagFromPayLine Employer/{EmployerId}/Employee/{EmployeeId}/PayLine/{PayLineId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="PayLineId">The pay line unique identifier. E.g. PL001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromPayLineAsync(string EmployerId, string EmployeeId, string PayLineId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayLine/"+ (PayLineId==null? "" : System.Uri.EscapeDataString(PayLineId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert pay line tag
		/// Inserts a new tag on the pay line
		/// PutPayLineTag Employer/{EmployerId}/Employee/{EmployeeId}/PayLine/{PayLineId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="PayLineId">The pay line unique identifier. E.g. PL001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutPayLineTagAsync(string EmployerId, string EmployeeId, string PayLineId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayLine/"+ (PayLineId==null? "" : System.Uri.EscapeDataString(PayLineId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all tags from the pay line
		/// Gets all the tags from the pay line
		/// GetTagsFromPayLine Employer/{EmployerId}/Employee/{EmployeeId}/PayLine/{PayLineId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="PayLineId">The pay line unique identifier. E.g. PL001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromPayLineAsync(string EmployerId, string EmployeeId, string PayLineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayLine/"+ (PayLineId==null? "" : System.Uri.EscapeDataString(PayLineId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the pay lines from the specified employee
		/// Get links to all pay lines for the specified employee
		/// GetPayLinesFromEmployee Employer/{EmployerId}/Employee/{EmployeeId}/PayLines
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayLinesFromEmployeeAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayLines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pay lines with tag
		/// Gets the pay line with the tag
		/// GetPayLinesWithTag Employer/{EmployerId}/Employee/{EmployeeId}/PayLines/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayLinesWithTagAsync(string EmployerId, string EmployeeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayLines/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all pay line tags
		/// Gets all the pay line tags
		/// GetAllPayLineTags Employer/{EmployerId}/Employee/{EmployeeId}/PayLines/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllPayLineTagsAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayLines/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the pay runs from the employee
		/// Get links to all pay runs for the specified employee.
		/// GetPayRunsFromEmployee Employer/{EmployerId}/Employee/{EmployeeId}/PayRuns
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayRunsFromEmployeeAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/PayRuns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an Employee revision matching the specified revision number.
		/// Deletes the specified employee revision for the matching revision number
		/// DeleteEmployeeRevisionByNumber Employer/{EmployerId}/Employee/{EmployeeId}/Revision/{RevisionNumber}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		public async Task DeleteEmployeeRevisionByNumberAsync(string EmployerId, string EmployeeId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the employee by revision number
		/// Get the employee revision matching the specified revision number
		/// GetEmployeeRevisionByNumber Employer/{EmployerId}/Employee/{EmployeeId}/Revision/{RevisionNumber}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		/// <returns>The employee object.</returns>
		public async Task<Employee> GetEmployeeRevisionByNumberAsync(string EmployerId, string EmployeeId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Employee>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the employee summary by revision number
		/// Get the employee revision summary matching the specified revision number
		/// GetEmployeeRevisionSummaryByNumber Employer/{EmployerId}/Employee/{EmployeeId}/Revision/{RevisionNumber}/Summary
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		/// <returns>The employee summary object.</returns>
		public async Task<EmployeeSummary> GetEmployeeRevisionSummaryByNumberAsync(string EmployerId, string EmployeeId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber))+"/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EmployeeSummary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all employee revisions
		/// Gets links to all employee revisions
		/// GetEmployeeRevisions Employer/{EmployerId}/Employee/{EmployeeId}/Revisions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployeeRevisionsAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Revisions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all employee revision summaries
		/// Gets links to all employee revision summaries
		/// GetEmployeeRevisionSummaries Employer/{EmployerId}/Employee/{EmployeeId}/Revisions/Summary
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployeeRevisionSummariesAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Revisions/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes employee secret
		/// Deletes an employee secret from the given resource location
		/// DeleteEmployeeSecret Employer/{EmployerId}/Employee/{EmployeeId}/Secret/{SecretId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="SecretId">The secret unique identifier. E.g ERSEC001</param>
		public async Task DeleteEmployeeSecretAsync(string EmployerId, string EmployeeId, string SecretId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Secret/"+ (SecretId==null? "" : System.Uri.EscapeDataString(SecretId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employee secret
		/// Get the public visible employee secret object
		/// GetEmployeeSecret Employer/{EmployerId}/Employee/{EmployeeId}/Secret/{SecretId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="SecretId">The secret unique identifier. E.g ERSEC001</param>
		/// <returns>The employee secret object.</returns>
		public async Task<EmployeeSecret> GetEmployeeSecretAsync(string EmployerId, string EmployeeId, string SecretId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Secret/"+ (SecretId==null? "" : System.Uri.EscapeDataString(SecretId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EmployeeSecret>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new employee secret
		/// Create / update an employee secret at the given resource location
		/// PutEmployeeSecret Employer/{EmployerId}/Employee/{EmployeeId}/Secret/{SecretId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="SecretId">The secret unique identifier. E.g ERSEC001</param>
		public async Task PutEmployeeSecretAsync(string EmployerId, string EmployeeId, string SecretId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Secret/"+ (SecretId==null? "" : System.Uri.EscapeDataString(SecretId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all employee secret links
		/// Get all the employee secret links
		/// GetEmployeeSecrets Employer/{EmployerId}/Employee/{EmployeeId}/Secrets
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployeeSecretsAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Secrets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new employee secret
		/// Create new employee secret using auto generated resource location key
		/// PostEmployeeSecret Employer/{EmployerId}/Employee/{EmployeeId}/Secrets
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		public async Task PostEmployeeSecretAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Secrets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employee summary from employer
		/// Gets the specified employee summary data from employer by employee code.
		/// GetEmployeeSummaryFromEmployer Employer/{EmployerId}/Employee/{EmployeeId}/Summary
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The employee summary object.</returns>
		public async Task<EmployeeSummary> GetEmployeeSummaryFromEmployerAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EmployeeSummary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete employee tag
		/// Deletes a tag from the employee
		/// DeleteEmployeeTag Employer/{EmployerId}/Employee/{EmployeeId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeleteEmployeeTagAsync(string EmployerId, string EmployeeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employee tag
		/// Gets the tag from the employee
		/// GetTagFromEmployee Employer/{EmployerId}/Employee/{EmployeeId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromEmployeeAsync(string EmployerId, string EmployeeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert employee tag
		/// Inserts a new tag on the employee
		/// PutEmployeeTag Employer/{EmployerId}/Employee/{EmployeeId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutEmployeeTagAsync(string EmployerId, string EmployeeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employee revision tag
		/// Gets the tag from the employee revision
		/// GetTagFromEmployeeRevision Employer/{EmployerId}/Employee/{EmployeeId}/Tag/{TagId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromEmployeeRevisionAsync(string EmployerId, string EmployeeId, string TagId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all employee tags
		/// Gets all the tags from the employee
		/// GetTagsFromEmployee Employer/{EmployerId}/Employee/{EmployeeId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromEmployeeAsync(string EmployerId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all employee revision tags
		/// Gets all the tags from the employee revision
		/// GetTagsFromEmployeeRevision Employer/{EmployerId}/Employee/{EmployeeId}/Tags/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromEmployeeRevisionAsync(string EmployerId, string EmployeeId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Tags/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an Employee revision matching the specified revision date.
		/// Deletes the specified employee revision for the matching revision date
		/// DeleteEmployeeRevision Employer/{EmployerId}/Employee/{EmployeeId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		public async Task DeleteEmployeeRevisionAsync(string EmployerId, string EmployeeId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employee by effective date.
		/// Returns the employee's state at the specified effective date.
		/// GetEmployeeByEffectiveDate Employer/{EmployerId}/Employee/{EmployeeId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The employee object.</returns>
		public async Task<Employee> GetEmployeeByEffectiveDateAsync(string EmployerId, string EmployeeId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Employee>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employee summary by effective date.
		/// Gets the employee summary for the specified effective date.
		/// GetEmployeeSummaryByEffectiveDate Employer/{EmployerId}/Employee/{EmployeeId}/{EffectiveDate}/Summary
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The employee summary object.</returns>
		public async Task<EmployeeSummary> GetEmployeeSummaryByEffectiveDateAsync(string EmployerId, string EmployeeId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/"+EffectiveDate+"/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EmployeeSummary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employees from employer.
		/// Get links to all employees for the specified employer.
		/// GetEmployeesFromEmployer Employer/{EmployerId}/Employees
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployeesFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Employee
		/// Create a new employee object
		/// PostEmployeeIntoEmployer Employer/{EmployerId}/Employees
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="requestBody">The employee object.</param>
		public async Task PostEmployeeIntoEmployerAsync(string EmployerId, Employee requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employee summaries from employer.
		/// Get links to all employee summaries for the specified employer.
		/// GetEmployeeSummariesFromEmployer Employer/{EmployerId}/Employees/Summary
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployeeSummariesFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employees/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employees with tag
		/// Gets the employees with the tag
		/// GetEmployeesWithTag Employer/{EmployerId}/Employees/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployeesWithTagAsync(string EmployerId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employees/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all employee tags
		/// Gets all the employee tags
		/// GetAllEmployeeTags Employer/{EmployerId}/Employees/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllEmployeeTagsAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employees/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employees from employer at a given effective date.
		/// Get links to all employees for the employer on specified effective date.
		/// GetEmployeesByEffectiveDate Employer/{EmployerId}/Employees/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployeesByEffectiveDateAsync(string EmployerId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employees/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employee summaries from employer at a given effective date.
		/// Get links to all employee summaries for the employer on specified effective date.
		/// GetEmployeeSummariesByEffectiveDate Employer/{EmployerId}/Employees/{EffectiveDate}/Summary
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployeeSummariesByEffectiveDateAsync(string EmployerId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Employees/"+EffectiveDate+"/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an holiday scheme
		/// Delete the specified holiday scheme
		/// DeleteHolidayScheme Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		public async Task DeleteHolidaySchemeAsync(string EmployerId, string HolidaySchemeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get holiday scheme from employer
		/// Gets the specified holiday scheme from employer.
		/// GetHolidaySchemeFromEmployer Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <returns>The holiday scheme object.</returns>
		public async Task<HolidayScheme> GetHolidaySchemeFromEmployerAsync(string EmployerId, string HolidaySchemeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HolidayScheme>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches the holiday scheme
		/// Patches the specified holiday scheme with the supplied values
		/// PatchHolidayScheme Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <param name="requestBody">The holiday scheme object.</param>
		/// <returns>The holiday scheme object.</returns>
		public async Task<HolidayScheme> PatchHolidaySchemeAsync(string EmployerId, string HolidaySchemeId, HolidayScheme requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HolidayScheme>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the holiday scheme
		/// Updates the existing specified holiday scheme object
		/// PutHolidaySchemeIntoEmployer Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <param name="requestBody">The holiday scheme object.</param>
		/// <returns>The holiday scheme object.</returns>
		public async Task<HolidayScheme> PutHolidaySchemeIntoEmployerAsync(string EmployerId, string HolidaySchemeId, HolidayScheme requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HolidayScheme>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an HolidayScheme revision matching the specified revision number.
		/// Deletes the specified holiday scheme revision for the matching revision number
		/// DeleteHolidaySchemeRevisionByNumber Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revision/{RevisionNumber}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		public async Task DeleteHolidaySchemeRevisionByNumberAsync(string EmployerId, string HolidaySchemeId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the holiday scheme revision by revision number
		/// Get the holiday scheme revision matching the specified revision number
		/// GetHolidaySchemeRevisionByNumber Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revision/{RevisionNumber}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		/// <returns>The holiday scheme object.</returns>
		public async Task<HolidayScheme> GetHolidaySchemeRevisionByNumberAsync(string EmployerId, string HolidaySchemeId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HolidayScheme>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all holiday scheme revisions
		/// Gets links to all the holiday scheme revisions
		/// GetHolidaySchemeRevisions Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revisions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetHolidaySchemeRevisionsAsync(string EmployerId, string HolidaySchemeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId))+"/Revisions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete holiday scheme tag
		/// Deletes a tag from the holiday scheme
		/// DeleteHolidaySchemeTag Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeleteHolidaySchemeTagAsync(string EmployerId, string HolidaySchemeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get holiday scheme tag
		/// Gets the tag from the holiday scheme
		/// GetTagFromHolidayScheme Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromHolidaySchemeAsync(string EmployerId, string HolidaySchemeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert holiday scheme tag
		/// Inserts a new tag on the holiday scheme
		/// PutHolidaySchemeTag Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutHolidaySchemeTagAsync(string EmployerId, string HolidaySchemeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get holiday scheme revision tag
		/// Gets the tag from the holiday scheme revision
		/// GetTagFromHolidaySchemeRevision Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromHolidaySchemeRevisionAsync(string EmployerId, string HolidaySchemeId, string TagId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all tags from the holiday scheme
		/// Gets all the tags from the holiday scheme
		/// GetTagsFromHolidayScheme Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromHolidaySchemeAsync(string EmployerId, string HolidaySchemeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all holiday scheme revision tags
		/// Gets all the tags from the holiday scheme revision
		/// GetTagsFromHolidaySchemeRevision Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromHolidaySchemeRevisionAsync(string EmployerId, string HolidaySchemeId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId))+"/Tags/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an holiday scheme revision matching the specified revision date.
		/// Deletes the specified holiday scheme revision for the matching revision date
		/// DeleteHolidaySchemeRevision Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		public async Task DeleteHolidaySchemeRevisionAsync(string EmployerId, string HolidaySchemeId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get holiday scheme by effective date.
		/// Returns the holiday scheme's state at the specified effective date.
		/// GetHolidaySchemeByEffectiveDate Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="HolidaySchemeId">The holiday schemes' unique identifier. E.g HOLSCH001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The holiday scheme object.</returns>
		public async Task<HolidayScheme> GetHolidaySchemeByEffectiveDateAsync(string EmployerId, string HolidaySchemeId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidayScheme/"+ (HolidaySchemeId==null? "" : System.Uri.EscapeDataString(HolidaySchemeId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HolidayScheme>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get holiday schemes from employer.
		/// Get links to all holiday schemes for the specified employer.
		/// GetHolidaySchemesFromEmployer Employer/{EmployerId}/HolidaySchemes
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetHolidaySchemesFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidaySchemes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new holiday scheme
		/// Create a new holiday scheme object
		/// PostHolidaySchemeIntoEmployer Employer/{EmployerId}/HolidaySchemes
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="requestBody">The holiday scheme object.</param>
		public async Task PostHolidaySchemeIntoEmployerAsync(string EmployerId, HolidayScheme requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidaySchemes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get holiday schemes with tag
		/// Gets the holiday scheme with the tag
		/// GetHolidaySchemesWithTag Employer/{EmployerId}/HolidaySchemes/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetHolidaySchemesWithTagAsync(string EmployerId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidaySchemes/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all holiday scheme tags
		/// Gets all the holiday scheme tags
		/// GetAllHolidaySchemeTags Employer/{EmployerId}/HolidaySchemes/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllHolidaySchemeTagsAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidaySchemes/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get holiday schemes from employer at a given effective date.
		/// Get links to all holiday schemes for the employer on specified effective date.
		/// GetHolidaySchemesByEffectiveDate Employer/{EmployerId}/HolidaySchemes/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetHolidaySchemesByEffectiveDateAsync(string EmployerId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/HolidaySchemes/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Journal instruction
		/// Delete the specified Journal instruction
		/// DeleteJournalInstruction Employer/{EmployerId}/JournalInstruction/{JournalInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="JournalInstructionId">The journal instruction unique identifier. E.g JI001</param>
		public async Task DeleteJournalInstructionAsync(string EmployerId, string JournalInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/JournalInstruction/"+ (JournalInstructionId==null? "" : System.Uri.EscapeDataString(JournalInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified journal instruction from the employer
		/// Returns the specified journal instruction from employer
		/// GetJournalInstructionFromEmployer Employer/{EmployerId}/JournalInstruction/{JournalInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="JournalInstructionId">The journal instruction unique identifier. E.g JI001</param>
		/// <returns>The journal instruction object.</returns>
		public async Task<JournalInstruction> GetJournalInstructionFromEmployerAsync(string EmployerId, string JournalInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/JournalInstruction/"+ (JournalInstructionId==null? "" : System.Uri.EscapeDataString(JournalInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JournalInstruction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Journal Instruction
		/// Updates the existing specified Journal instruction object
		/// PutJournalInstruction Employer/{EmployerId}/JournalInstruction/{JournalInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="JournalInstructionId">The journal instruction unique identifier. E.g JI001</param>
		/// <returns>The journal instruction object.</returns>
		public async Task<JournalInstruction> PutJournalInstructionAsync(string EmployerId, string JournalInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/JournalInstruction/"+ (JournalInstructionId==null? "" : System.Uri.EscapeDataString(JournalInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JournalInstruction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Journal instructions from the specified employer
		/// Get links to all journal instructions for the specified employer
		/// GetJournalInstructionsFromEmployer Employer/{EmployerId}/JournalInstructions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetJournalInstructionsFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/JournalInstructions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Journal Instruction
		/// Creates a new Journal instruction object
		/// PostJournalInstruction Employer/{EmployerId}/JournalInstructions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		public async Task PostJournalInstructionAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/JournalInstructions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified journal Line from the employer
		/// Returns the specified journal Line from employer
		/// GetJournalLineFromEmployer Employer/{EmployerId}/JournalLine/{JournalLineId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="JournalLineId">The journal line unique identifier. E.g JL001</param>
		/// <returns>The journal line object.</returns>
		public async Task<JournalLine> GetJournalLineFromEmployerAsync(string EmployerId, string JournalLineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/JournalLine/"+ (JournalLineId==null? "" : System.Uri.EscapeDataString(JournalLineId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JournalLine>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete journal line tag
		/// Deletes a tag from the journal line
		/// DeleteJournalLineTag Employer/{EmployerId}/JournalLine/{JournalLineId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="JournalLineId">The journal line unique identifier. E.g JL001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeleteJournalLineTagAsync(string EmployerId, string JournalLineId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/JournalLine/"+ (JournalLineId==null? "" : System.Uri.EscapeDataString(JournalLineId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get journal line tag
		/// Gets a tag from the journal line
		/// GetTagFromJournalLine Employer/{EmployerId}/JournalLine/{JournalLineId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="JournalLineId">The journal line unique identifier. E.g JL001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromJournalLineAsync(string EmployerId, string JournalLineId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/JournalLine/"+ (JournalLineId==null? "" : System.Uri.EscapeDataString(JournalLineId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert journal line tag
		/// Inserts a tag on the journal line
		/// PutJournalLineTag Employer/{EmployerId}/JournalLine/{JournalLineId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="JournalLineId">The journal line unique identifier. E.g JL001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutJournalLineTagAsync(string EmployerId, string JournalLineId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/JournalLine/"+ (JournalLineId==null? "" : System.Uri.EscapeDataString(JournalLineId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get tags from journal line
		/// Gets all tags from the journal line
		/// GetTagsFromJournalLine Employer/{EmployerId}/JournalLine/{JournalLineId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="JournalLineId">The journal line unique identifier. E.g JL001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromJournalLineAsync(string EmployerId, string JournalLineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/JournalLine/"+ (JournalLineId==null? "" : System.Uri.EscapeDataString(JournalLineId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Journal Lines from the specified employer
		/// Get links to all journal Lines for the specified employer
		/// GetJournalLinesFromEmployer Employer/{EmployerId}/JournalLines
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetJournalLinesFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/JournalLines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get links to tagged journal lines
		/// Gets the journal lines with the specified tag
		/// GetAllJournalLinesWithTag Employer/{EmployerId}/JournalLines/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllJournalLinesWithTagAsync(string EmployerId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/JournalLines/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all journal line tags
		/// Gets all the journal line tags
		/// GetAllJournalLineTags Employer/{EmployerId}/JournalLines/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllJournalLineTagsAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/JournalLines/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the nominal codes
		/// Deletes the nominal code
		/// DeleteNominalCode Employer/{EmployerId}/NominalCode/{NominalCodeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="NominalCodeId">The nominal code unique identifier. E.g. NOM001</param>
		public async Task DeleteNominalCodeAsync(string EmployerId, string NominalCodeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/NominalCode/"+ (NominalCodeId==null? "" : System.Uri.EscapeDataString(NominalCodeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the nominal code
		/// Gets the nominal code
		/// GetNominalCodeFromEmployer Employer/{EmployerId}/NominalCode/{NominalCodeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="NominalCodeId">The nominal code unique identifier. E.g. NOM001</param>
		/// <returns>The nominal code object.</returns>
		public async Task<NominalCode> GetNominalCodeFromEmployerAsync(string EmployerId, string NominalCodeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/NominalCode/"+ (NominalCodeId==null? "" : System.Uri.EscapeDataString(NominalCodeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NominalCode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert nominal code
		/// Inserts a new nominal code at the specified resource location
		/// PutNominalCode Employer/{EmployerId}/NominalCode/{NominalCodeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="NominalCodeId">The nominal code unique identifier. E.g. NOM001</param>
		/// <param name="requestBody">The nominal code object.</param>
		public async Task PutNominalCodeAsync(string EmployerId, string NominalCodeId, NominalCode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/NominalCode/"+ (NominalCodeId==null? "" : System.Uri.EscapeDataString(NominalCodeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the pay codes by nominal code
		/// Get the pay codes that share the specified nominal code
		/// GetPayCodesFromNominalCode Employer/{EmployerId}/NominalCode/{NominalCodeId}/PayCodes
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="NominalCodeId">The nominal code unique identifier. E.g. NOM001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayCodesFromNominalCodeAsync(string EmployerId, string NominalCodeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/NominalCode/"+ (NominalCodeId==null? "" : System.Uri.EscapeDataString(NominalCodeId))+"/PayCodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the nominal codes
		/// Gets the nominal code links
		/// GetNominalCodesFromEmployer Employer/{EmployerId}/NominalCodes
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetNominalCodesFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/NominalCodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert nominal code
		/// Inserts a new nominal code
		/// PostNominalCode Employer/{EmployerId}/NominalCodes
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="requestBody">The nominal code object.</param>
		public async Task PostNominalCodeAsync(string EmployerId, NominalCode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/NominalCodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a pay code
		/// Delete the specified pay code
		/// DeletePayCode Employer/{EmployerId}/PayCode/{PayCodeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayCodeId">The pay code unique identifier. E.g. BASIC</param>
		public async Task DeletePayCodeAsync(string EmployerId, string PayCodeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCode/"+ (PayCodeId==null? "" : System.Uri.EscapeDataString(PayCodeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified pay code from the employer
		/// Returns the specified pay code from the employer
		/// GetPayCodeFromEmployer Employer/{EmployerId}/PayCode/{PayCodeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayCodeId">The pay code unique identifier. E.g. BASIC</param>
		/// <returns>The pay code object.</returns>
		public async Task<PayCode> GetPayCodeFromEmployerAsync(string EmployerId, string PayCodeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCode/"+ (PayCodeId==null? "" : System.Uri.EscapeDataString(PayCodeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PayCode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches the pay code
		/// Patches the specified pay code object with the supplied values
		/// PatchPayCode Employer/{EmployerId}/PayCode/{PayCodeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayCodeId">The pay code unique identifier. E.g. BASIC</param>
		/// <param name="requestBody">The pay code object.</param>
		/// <returns>The pay code object.</returns>
		public async Task<PayCode> PatchPayCodeAsync(string EmployerId, string PayCodeId, PayCode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCode/"+ (PayCodeId==null? "" : System.Uri.EscapeDataString(PayCodeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PayCode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a pay code
		/// Updates the existing specified pay code object
		/// PutPayCode Employer/{EmployerId}/PayCode/{PayCodeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayCodeId">The pay code unique identifier. E.g. BASIC</param>
		/// <param name="requestBody">The pay code object.</param>
		/// <returns>The pay code object.</returns>
		public async Task<PayCode> PutPayCodeAsync(string EmployerId, string PayCodeId, PayCode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCode/"+ (PayCodeId==null? "" : System.Uri.EscapeDataString(PayCodeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PayCode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an PayCode revision matching the specified revision number.
		/// Deletes the specified pay code revision for the matching revision number
		/// DeletePayCodeRevisionByNumber Employer/{EmployerId}/PayCode/{PayCodeId}/Revision/{RevisionNumber}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayCodeId">The pay code unique identifier. E.g. BASIC</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		public async Task DeletePayCodeRevisionByNumberAsync(string EmployerId, string PayCodeId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCode/"+ (PayCodeId==null? "" : System.Uri.EscapeDataString(PayCodeId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the pay code by revision number
		/// Get the pay code revision matching the specified revision number
		/// GetPayCodeRevisionByNumber Employer/{EmployerId}/PayCode/{PayCodeId}/Revision/{RevisionNumber}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayCodeId">The pay code unique identifier. E.g. BASIC</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		/// <returns>The pay code object.</returns>
		public async Task<PayCode> GetPayCodeRevisionByNumberAsync(string EmployerId, string PayCodeId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCode/"+ (PayCodeId==null? "" : System.Uri.EscapeDataString(PayCodeId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PayCode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all revisions of the Pay Code
		/// Returns links to all revisions of the pay code
		/// GetPayCodeRevisions Employer/{EmployerId}/PayCode/{PayCodeId}/Revisions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayCodeId">The pay code unique identifier. E.g. BASIC</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayCodeRevisionsAsync(string EmployerId, string PayCodeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCode/"+ (PayCodeId==null? "" : System.Uri.EscapeDataString(PayCodeId))+"/Revisions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete pay code tag
		/// Deletes a tag from the pay code
		/// DeletePayCodeTag Employer/{EmployerId}/PayCode/{PayCodeId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayCodeId">The pay code unique identifier. E.g. BASIC</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeletePayCodeTagAsync(string EmployerId, string PayCodeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCode/"+ (PayCodeId==null? "" : System.Uri.EscapeDataString(PayCodeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pay code tag
		/// Gets the tag from the pay code
		/// GetTagFromPayCode Employer/{EmployerId}/PayCode/{PayCodeId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayCodeId">The pay code unique identifier. E.g. BASIC</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromPayCodeAsync(string EmployerId, string PayCodeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCode/"+ (PayCodeId==null? "" : System.Uri.EscapeDataString(PayCodeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert pay code tag
		/// Inserts a new tag on the pay code
		/// PutPayCodeTag Employer/{EmployerId}/PayCode/{PayCodeId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayCodeId">The pay code unique identifier. E.g. BASIC</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutPayCodeTagAsync(string EmployerId, string PayCodeId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCode/"+ (PayCodeId==null? "" : System.Uri.EscapeDataString(PayCodeId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all pay code tags
		/// Gets all the tags from the pay code
		/// GetTagsFromPayCode Employer/{EmployerId}/PayCode/{PayCodeId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayCodeId">The pay code unique identifier. E.g. BASIC</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromPayCodeAsync(string EmployerId, string PayCodeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCode/"+ (PayCodeId==null? "" : System.Uri.EscapeDataString(PayCodeId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a pay code revision
		/// Delete the pay code revision for the specified date
		/// DeletePayCodeRevision Employer/{EmployerId}/PayCode/{PayCodeId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayCodeId">The pay code unique identifier. E.g. BASIC</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		public async Task DeletePayCodeRevisionAsync(string EmployerId, string PayCodeId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCode/"+ (PayCodeId==null? "" : System.Uri.EscapeDataString(PayCodeId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets pay code for specified date
		/// Gets the pay code revision for the specified effective date
		/// GetPayCodeByEffectiveDate Employer/{EmployerId}/PayCode/{PayCodeId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayCodeId">The pay code unique identifier. E.g. BASIC</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The pay code object.</returns>
		public async Task<PayCode> GetPayCodeByEffectiveDateAsync(string EmployerId, string PayCodeId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCode/"+ (PayCodeId==null? "" : System.Uri.EscapeDataString(PayCodeId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PayCode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the pay codes from the employer
		/// Get links to all the pay codes for the specified employer
		/// GetPayCodesFromEmployer Employer/{EmployerId}/PayCodes
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayCodesFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new pay code
		/// Create a new pay code object
		/// PostPayCode Employer/{EmployerId}/PayCodes
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="requestBody">The pay code object.</param>
		public async Task PostPayCodeAsync(string EmployerId, PayCode requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pay codes with tag
		/// Gets the pay codes with the tag
		/// GetPayCodesWithTag Employer/{EmployerId}/PayCodes/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayCodesWithTagAsync(string EmployerId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCodes/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all pay code tags
		/// Gets all the pay code tags
		/// GetAllPayCodeTags Employer/{EmployerId}/PayCodes/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllPayCodeTagsAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCodes/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all pay codes for specified date
		/// Gets the effective pay code revision for the specified date
		/// GetPayCodesByEffectiveDate Employer/{EmployerId}/PayCodes/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayCodesByEffectiveDateAsync(string EmployerId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PayCodes/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a pay schedule
		/// Delete the specified pay schedule
		/// DeletePaySchedule Employer/{EmployerId}/PaySchedule/{PayScheduleId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		public async Task DeletePayScheduleAsync(string EmployerId, string PayScheduleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified pay schedule from the employer
		/// Returns the specified pay schedule object from employer
		/// GetPayScheduleFromEmployer Employer/{EmployerId}/PaySchedule/{PayScheduleId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <returns>The pay schedule object.</returns>
		public async Task<PaySchedule> GetPayScheduleFromEmployerAsync(string EmployerId, string PayScheduleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PaySchedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a pay schedule
		/// Updates the existing specified pay schedule object
		/// PutPaySchedule Employer/{EmployerId}/PaySchedule/{PayScheduleId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="requestBody">The pay schedule object.</param>
		/// <returns>The pay schedule object.</returns>
		public async Task<PaySchedule> PutPayScheduleAsync(string EmployerId, string PayScheduleId, PaySchedule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PaySchedule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all employees revisions from a pay schedule.
		/// Gets links to all employee revisions that have ever existed in the specified pay schedule.
		/// GetEmployeesFromPaySchedule Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Employees
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployeesFromPayScheduleAsync(string EmployerId, string PayScheduleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/Employees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employees from a pay schedule on effective date.
		/// Gets links to all employee revisions in the specified pay schedule for the given effective date.
		/// GetEmployeesFromPayScheduleOnEffectiveDate Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Employees/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployeesFromPayScheduleOnEffectiveDateAsync(string EmployerId, string PayScheduleId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/Employees/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a pay run
		/// Delete the specified pay run
		/// DeletePayRun Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		public async Task DeletePayRunAsync(string EmployerId, string PayScheduleId, string PayRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the pay run from the pay schedule
		/// Returns the pay run from the pay schedule
		/// GetPayRunFromPaySchedule Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		/// <returns>The pay run object.</returns>
		public async Task<PayRun> GetPayRunFromPayScheduleAsync(string EmployerId, string PayScheduleId, string PayRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PayRun>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the auto enrolment assessments
		/// Gets all auto enrolment assessments from the specified pay run
		/// GetAEAssessmentsFromPayRun Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/AEAssessments
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAEAssessmentsFromPayRunAsync(string EmployerId, string PayScheduleId, string PayRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId))+"/AEAssessments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get links to all commentaries for the specified pay run
		/// Get links to all commentaries for the specified pay run.
		/// GetCommentariesFromPayRun Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Commentaries
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetCommentariesFromPayRunAsync(string EmployerId, string PayScheduleId, string PayRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId))+"/Commentaries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a pay run employee
		/// Delete pay run results for a single employee
		/// DeletePayRunEmployee Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Employee/{EmployeeId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		public async Task DeletePayRunEmployeeAsync(string EmployerId, string PayScheduleId, string PayRunId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get commentary from payrun by specified employee.
		/// Get commentary from payrun by specified employee.
		/// GetCommentaryFromPayRunByEmployee Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Employee/{EmployeeId}/Commentary
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		/// <param name="EmployeeId">The employees' unique identifier. E.g EE001</param>
		/// <returns>The commentary object.</returns>
		public async Task<Commentary> GetCommentaryFromPayRunByEmployeeAsync(string EmployerId, string PayScheduleId, string PayRunId, string EmployeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId))+"/Employee/"+ (EmployeeId==null? "" : System.Uri.EscapeDataString(EmployeeId))+"/Commentary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Commentary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employees from the pay run
		/// Gets links to all employees included in the specified pay run.
		/// GetEmployeesFromPayRun Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Employees
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployeesFromPayRunAsync(string EmployerId, string PayScheduleId, string PayRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId))+"/Employees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the journal Lines from the specified pay run
		/// Get links to all journal lines for the specified pay run
		/// GetJournalLinesFromPayRun Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/JournalLines
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetJournalLinesFromPayRunAsync(string EmployerId, string PayScheduleId, string PayRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId))+"/JournalLines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the pay lines from the specified pay run
		/// Get links to all pay lines for the specified pay run
		/// GetPayLinesFromPayRun Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/PayLines
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayLinesFromPayRunAsync(string EmployerId, string PayScheduleId, string PayRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId))+"/PayLines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the report lines from the specified pay run
		/// Returns all report lines associated with the specified pay run
		/// GetReportLinesFromPayRun Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/ReportLines
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetReportLinesFromPayRunAsync(string EmployerId, string PayScheduleId, string PayRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId))+"/ReportLines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete pay run tag
		/// Deletes a tag from the pay run
		/// DeletePayRunTag Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeletePayRunTagAsync(string EmployerId, string PayScheduleId, string PayRunId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pay run tag
		/// Gets the tag from the pay run
		/// GetTagFromPayRun Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromPayRunAsync(string EmployerId, string PayScheduleId, string PayRunId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert pay run tag
		/// Inserts a new tag on the pay run
		/// PutPayRunTag Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutPayRunTagAsync(string EmployerId, string PayScheduleId, string PayRunId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all pay run tags
		/// Gets all the tags from the pay run
		/// GetTagsFromPayRun Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="PayRunId">The pay runs' unique identifier. E.g. PR001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromPayRunAsync(string EmployerId, string PayScheduleId, string PayRunId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRun/"+ (PayRunId==null? "" : System.Uri.EscapeDataString(PayRunId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the pay runs from the pay schedule
		/// Get links to all pay runs for the specified pay schedule
		/// GetPayRunsFromPaySchedule Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRuns
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayRunsFromPayScheduleAsync(string EmployerId, string PayScheduleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRuns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pay runs with tag
		/// Gets the pay runs with the tag
		/// GetPayRunsWithTag Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRuns/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayRunsWithTagAsync(string EmployerId, string PayScheduleId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRuns/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all pay run tags
		/// Gets all the pay run tags
		/// GetAllPayRunTags Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRuns/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllPayRunTagsAsync(string EmployerId, string PayScheduleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/PayRuns/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete pay schedule tag
		/// Deletes a tag from the pay schedule
		/// DeletePayScheduleTag Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeletePayScheduleTagAsync(string EmployerId, string PayScheduleId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pay schedule tag
		/// Gets the tag from the pay schedule
		/// GetTagFromPaySchedule Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromPayScheduleAsync(string EmployerId, string PayScheduleId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert pay schedule tag
		/// Inserts a new tag on the pay schedule
		/// PutPayScheduleTag Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutPayScheduleTagAsync(string EmployerId, string PayScheduleId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all pay schedule tags
		/// Gets all the tags from the pay schedule
		/// GetTagsFromPaySchedule Employer/{EmployerId}/PaySchedule/{PayScheduleId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PayScheduleId">The pay schedules' unique identifier. E.g SCH001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromPayScheduleAsync(string EmployerId, string PayScheduleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedule/"+ (PayScheduleId==null? "" : System.Uri.EscapeDataString(PayScheduleId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the pay schedule from the specified employer
		/// Get links to all pay schedules for the specified employer
		/// GetPaySchedulesFromEmployer Employer/{EmployerId}/PaySchedules
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPaySchedulesFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new pay schedule
		/// Create a new pay schedule object
		/// PostPaySchedule Employer/{EmployerId}/PaySchedules
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="requestBody">The pay schedule object.</param>
		public async Task PostPayScheduleAsync(string EmployerId, PaySchedule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pay schedule with tag
		/// Gets the pay schedules with the tag
		/// GetPaySchedulesWithTag Employer/{EmployerId}/PaySchedules/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPaySchedulesWithTagAsync(string EmployerId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedules/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all pay schedule tags
		/// Gets all the pay schedule tags
		/// GetAllPayScheduleTags Employer/{EmployerId}/PaySchedules/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllPayScheduleTagsAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/PaySchedules/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Pension
		/// Delete the specified ppension
		/// DeletePension Employer/{EmployerId}/Pension/{PensionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PensionId">The pensions' unique identifier. E.g PEN001</param>
		public async Task DeletePensionAsync(string EmployerId, string PensionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Pension/"+ (PensionId==null? "" : System.Uri.EscapeDataString(PensionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pension from employer
		/// Gets the specified pension from employer by pension code.
		/// GetPensionFromEmployer Employer/{EmployerId}/Pension/{PensionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PensionId">The pensions' unique identifier. E.g PEN001</param>
		/// <returns>The pension object.</returns>
		public async Task<Pension> GetPensionFromEmployerAsync(string EmployerId, string PensionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Pension/"+ (PensionId==null? "" : System.Uri.EscapeDataString(PensionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Pension>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches the pension
		/// Patches the specified pension with the supplied values
		/// PatchPension Employer/{EmployerId}/Pension/{PensionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PensionId">The pensions' unique identifier. E.g PEN001</param>
		/// <param name="requestBody">The pension object.</param>
		/// <returns>The pension object.</returns>
		public async Task<Pension> PatchPensionAsync(string EmployerId, string PensionId, Pension requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Pension/"+ (PensionId==null? "" : System.Uri.EscapeDataString(PensionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Pension>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Pension
		/// Updates existing or inserts the specified pension object
		/// PutPensionIntoEmployer Employer/{EmployerId}/Pension/{PensionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PensionId">The pensions' unique identifier. E.g PEN001</param>
		/// <param name="requestBody">The pension object.</param>
		/// <returns>The pension object.</returns>
		public async Task<Pension> PutPensionIntoEmployerAsync(string EmployerId, string PensionId, Pension requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Pension/"+ (PensionId==null? "" : System.Uri.EscapeDataString(PensionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Pension>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an Pension revision matching the specified revision number.
		/// Deletes the specified pension revision for the matching revision number
		/// DeletePensionRevisionByNumber Employer/{EmployerId}/Pension/{PensionId}/Revision/{RevisionNumber}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PensionId">The pensions' unique identifier. E.g PEN001</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		public async Task DeletePensionRevisionByNumberAsync(string EmployerId, string PensionId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Pension/"+ (PensionId==null? "" : System.Uri.EscapeDataString(PensionId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the pension by revision number
		/// Get the pension revision matching the specified revision number
		/// GetPensionRevisionByNumber Employer/{EmployerId}/Pension/{PensionId}/Revision/{RevisionNumber}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PensionId">The pensions' unique identifier. E.g PEN001</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		/// <returns>The pension object.</returns>
		public async Task<Pension> GetPensionRevisionByNumberAsync(string EmployerId, string PensionId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Pension/"+ (PensionId==null? "" : System.Uri.EscapeDataString(PensionId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Pension>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all pension revisions
		/// Returns links to all revisions of the pension
		/// GetPensionRevisions Employer/{EmployerId}/Pension/{PensionId}/Revisions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PensionId">The pensions' unique identifier. E.g PEN001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPensionRevisionsAsync(string EmployerId, string PensionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Pension/"+ (PensionId==null? "" : System.Uri.EscapeDataString(PensionId))+"/Revisions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an Pension revision matching the specified revision date.
		/// Deletes the specified pension revision for the matching revision date
		/// DeletePensionRevision Employer/{EmployerId}/Pension/{PensionId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PensionId">The pensions' unique identifier. E.g PEN001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		public async Task DeletePensionRevisionAsync(string EmployerId, string PensionId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Pension/"+ (PensionId==null? "" : System.Uri.EscapeDataString(PensionId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pension by effective date.
		/// Returns the penion's state at the specified effective date.
		/// GetPensionByEffectiveDate Employer/{EmployerId}/Pension/{PensionId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="PensionId">The pensions' unique identifier. E.g PEN001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The pension object.</returns>
		public async Task<Pension> GetPensionByEffectiveDateAsync(string EmployerId, string PensionId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Pension/"+ (PensionId==null? "" : System.Uri.EscapeDataString(PensionId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Pension>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pensions from employer.
		/// Get links to all pensions for the specified employer.
		/// GetPensionsFromEmployer Employer/{EmployerId}/Pensions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPensionsFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Pensions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Pension
		/// Create a new pension object
		/// PostPensionIntoEmployer Employer/{EmployerId}/Pensions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="requestBody">The pension object.</param>
		public async Task PostPensionIntoEmployerAsync(string EmployerId, Pension requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Pensions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get pensions from employer at a given effective date.
		/// Get links to all pensions for the employer on specified effective date.
		/// GetPensionsByEffectiveDate Employer/{EmployerId}/Pensions/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPensionsByEffectiveDateAsync(string EmployerId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Pensions/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified report line from the employer
		/// Returns the specified pay line from employee
		/// GetReportLineFromEmployer Employer/{EmployerId}/ReportLine/{ReportLineId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="ReportLineId">The report line unique identifier. E.g. RTL001</param>
		/// <returns>The report line object.</returns>
		public async Task<ReportLine> GetReportLineFromEmployerAsync(string EmployerId, string ReportLineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ReportLine/"+ (ReportLineId==null? "" : System.Uri.EscapeDataString(ReportLineId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReportLine>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the report lines from the specified employer
		/// Get links to all report lines for the specified employee
		/// GetReportLinesFromEmployer Employer/{EmployerId}/ReportLines
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetReportLinesFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ReportLines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a reporting instruction
		/// Delete the specified reporting instruction
		/// DeleteReportingInstruction Employer/{EmployerId}/ReportingInstruction/{ReportingInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="ReportingInstructionId">The reporting instruction unique identifier. E.g. SERRPT001</param>
		public async Task DeleteReportingInstructionAsync(string EmployerId, string ReportingInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ReportingInstruction/"+ (ReportingInstructionId==null? "" : System.Uri.EscapeDataString(ReportingInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified reporting instruction from the employer
		/// Returns the specified pay instruction from employee
		/// GetReportingInstructionFromEmployer Employer/{EmployerId}/ReportingInstruction/{ReportingInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="ReportingInstructionId">The reporting instruction unique identifier. E.g. SERRPT001</param>
		/// <returns>The reporting instruction object.</returns>
		public async Task<ReportingInstruction> GetReportingInstructionFromEmployerAsync(string EmployerId, string ReportingInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ReportingInstruction/"+ (ReportingInstructionId==null? "" : System.Uri.EscapeDataString(ReportingInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReportingInstruction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a reporting Instruction
		/// Updates the existing specified reporting instruction object
		/// PutReportingInstruction Employer/{EmployerId}/ReportingInstruction/{ReportingInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="ReportingInstructionId">The reporting instruction unique identifier. E.g. SERRPT001</param>
		/// <param name="requestBody">The reporting instruction object.</param>
		/// <returns>The reporting instruction object.</returns>
		public async Task<ReportingInstruction> PutReportingInstructionAsync(string EmployerId, string ReportingInstructionId, ReportingInstruction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ReportingInstruction/"+ (ReportingInstructionId==null? "" : System.Uri.EscapeDataString(ReportingInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReportingInstruction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the reporting instructions from the specified employer
		/// Get links to all pay instructions for the specified employee
		/// GetReportingInstructionsFromEmployer Employer/{EmployerId}/ReportingInstructions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetReportingInstructionsFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ReportingInstructions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Reporting Instruction
		/// Creates a new reporting instruction object
		/// PostReportingInstruction Employer/{EmployerId}/ReportingInstructions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="requestBody">The reporting instruction object.</param>
		public async Task PostReportingInstructionAsync(string EmployerId, ReportingInstruction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ReportingInstructions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an Employer revision matching the specified revision number.
		/// Deletes the specified employer revision for the matching revision number
		/// DeleteEmployerRevisionByNumber Employer/{EmployerId}/Revision/{RevisionNumber}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		public async Task DeleteEmployerRevisionByNumberAsync(string EmployerId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the employer by revision number
		/// Get the employer revision matching the specified revision number
		/// GetEmployerRevisionByNumber Employer/{EmployerId}/Revision/{RevisionNumber}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		/// <returns>The employer object.</returns>
		public async Task<Employer> GetEmployerRevisionByNumberAsync(string EmployerId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Employer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the employer summary by revision number
		/// Get the employer revision summary matching the specified revision number
		/// GetEmployerRevisionSummaryByNumber Employer/{EmployerId}/Revision/{RevisionNumber}/Summary
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		/// <returns>The employer summary object.</returns>
		public async Task<EmployerSummary> GetEmployerRevisionSummaryByNumberAsync(string EmployerId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber))+"/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EmployerSummary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the employer revisions
		/// Gets links to all the employer revisions
		/// GetEmployerRevisions Employer/{EmployerId}/Revisions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployerRevisionsAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Revisions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all employer revision summaries
		/// Gets links to all employer revision summaries
		/// GetEmployerRevisionSummaries Employer/{EmployerId}/Revisions/Summary
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployerRevisionSummariesAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Revisions/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the RTI transaction
		/// Deletes the specified RTI transaction
		/// DeleteRtiTransaction Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="RtiTransactionId">The RTI transaction unique identifier. E.g. FPS001</param>
		/// <returns>No Content</returns>
		public async Task DeleteRtiTransactionAsync(string EmployerId, string RtiTransactionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/RtiTransaction/"+ (RtiTransactionId==null? "" : System.Uri.EscapeDataString(RtiTransactionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the RTI transaction
		/// Returns the specified RTI transaction
		/// GetRtiTransactionFromEmployer Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="RtiTransactionId">The RTI transaction unique identifier. E.g. FPS001</param>
		/// <returns>The rti transaction base object.</returns>
		public async Task<RtiTransactionBase> GetRtiTransactionFromEmployerAsync(string EmployerId, string RtiTransactionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/RtiTransaction/"+ (RtiTransactionId==null? "" : System.Uri.EscapeDataString(RtiTransactionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RtiTransactionBase>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the RTI transaction summary
		/// Returns the specified RTI transaction summary data excluding some poroperties
		/// GetRtiTransactionSummaryFromEmployer Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}/Summary
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="RtiTransactionId">The RTI transaction unique identifier. E.g. FPS001</param>
		/// <returns>The rti transaction base object.</returns>
		public async Task<RtiTransactionBase> GetRtiTransactionSummaryFromEmployerAsync(string EmployerId, string RtiTransactionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/RtiTransaction/"+ (RtiTransactionId==null? "" : System.Uri.EscapeDataString(RtiTransactionId))+"/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RtiTransactionBase>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete RTI transaction tag
		/// Deletes a tag from the RTI transaction
		/// DeleteRtiTransactionTag Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="RtiTransactionId">The RTI transaction unique identifier. E.g. FPS001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeleteRtiTransactionTagAsync(string EmployerId, string RtiTransactionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/RtiTransaction/"+ (RtiTransactionId==null? "" : System.Uri.EscapeDataString(RtiTransactionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get RTI transaction tag
		/// Gets the tag from the RTI transaction
		/// GetTagFromRtiTransaction Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="RtiTransactionId">The RTI transaction unique identifier. E.g. FPS001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromRtiTransactionAsync(string EmployerId, string RtiTransactionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/RtiTransaction/"+ (RtiTransactionId==null? "" : System.Uri.EscapeDataString(RtiTransactionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert RTI transaction tag
		/// Inserts a new tag on the RTI transaction
		/// PutRtiTransactionTag Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="RtiTransactionId">The RTI transaction unique identifier. E.g. FPS001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutRtiTransactionTagAsync(string EmployerId, string RtiTransactionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/RtiTransaction/"+ (RtiTransactionId==null? "" : System.Uri.EscapeDataString(RtiTransactionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all tags from RTI transaction
		/// Gets all the tags from the RTI transaction
		/// GetTagsFromRtiTransaction Employer/{EmployerId}/RtiTransaction/{RtiTransactionId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="RtiTransactionId">The RTI transaction unique identifier. E.g. FPS001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromRtiTransactionAsync(string EmployerId, string RtiTransactionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/RtiTransaction/"+ (RtiTransactionId==null? "" : System.Uri.EscapeDataString(RtiTransactionId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all RTI transactions for the employer
		/// Get links for all RTI transactions for the specified employer
		/// GetRtiTransactionsFromEmployer Employer/{EmployerId}/RtiTransactions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetRtiTransactionsFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/RtiTransactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all RTI transaction summaries for the employer
		/// Get links for all RTI transaction summaries for the specified employer
		/// GetRtiTransactionSummariesFromEmployer Employer/{EmployerId}/RtiTransactions/Summary
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetRtiTransactionSummariesFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/RtiTransactions/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get RTI transactions with tag
		/// Gets the RTI transactions with the tag
		/// GetRtiTransactionsWithTag Employer/{EmployerId}/RtiTransactions/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetRtiTransactionsWithTagAsync(string EmployerId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/RtiTransactions/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all RTI transaction tags
		/// Gets all the RTI transaction tags
		/// GetAllRtiTransactionTags Employer/{EmployerId}/RtiTransactions/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllRtiTransactionTagsAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/RtiTransactions/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes employer secret
		/// Deletes an employer secret from the given resource location
		/// DeleteEmployerSecret Employer/{EmployerId}/Secret/{SecretId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SecretId">The secret unique identifier. E.g ERSEC001</param>
		public async Task DeleteEmployerSecretAsync(string EmployerId, string SecretId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Secret/"+ (SecretId==null? "" : System.Uri.EscapeDataString(SecretId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employer secret
		/// Get the public visible employer secret object
		/// GetEmployerSecret Employer/{EmployerId}/Secret/{SecretId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SecretId">The secret unique identifier. E.g ERSEC001</param>
		/// <returns>The employer secret object.</returns>
		public async Task<EmployerSecret> GetEmployerSecretAsync(string EmployerId, string SecretId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Secret/"+ (SecretId==null? "" : System.Uri.EscapeDataString(SecretId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EmployerSecret>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new employer secret
		/// Create / update an employer secret at the given resource location
		/// PutEmployerSecret Employer/{EmployerId}/Secret/{SecretId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SecretId">The secret unique identifier. E.g ERSEC001</param>
		public async Task PutEmployerSecretAsync(string EmployerId, string SecretId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Secret/"+ (SecretId==null? "" : System.Uri.EscapeDataString(SecretId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all employer secret links
		/// Get all the employer secret links
		/// GetEmployerSecrets Employer/{EmployerId}/Secrets
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployerSecretsAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Secrets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new employer secret
		/// Create new employer secret using auto generated resource location key
		/// PostEmployerSecret Employer/{EmployerId}/Secrets
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		public async Task PostEmployerSecretAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Secrets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an sub contractor
		/// Delete the specified sub contractor
		/// DeleteSubContractor Employer/{EmployerId}/SubContractor/{SubContractorId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		public async Task DeleteSubContractorAsync(string EmployerId, string SubContractorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sub contractor from employer
		/// Gets the specified sub contractor from employer.
		/// GetSubContractorFromEmployer Employer/{EmployerId}/SubContractor/{SubContractorId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <returns>The sub contractor object.</returns>
		public async Task<SubContractor> GetSubContractorFromEmployerAsync(string EmployerId, string SubContractorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubContractor>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches the sub contractor
		/// Patches the specified sub contractor with the supplied values
		/// PatchSubContractor Employer/{EmployerId}/SubContractor/{SubContractorId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="requestBody">The sub contractor object.</param>
		/// <returns>The sub contractor object.</returns>
		public async Task<SubContractor> PatchSubContractorAsync(string EmployerId, string SubContractorId, SubContractor requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubContractor>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the sub contractor
		/// Updates the existing specified sub contractor object
		/// PutSubContractorIntoEmployer Employer/{EmployerId}/SubContractor/{SubContractorId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="requestBody">The sub contractor object.</param>
		/// <returns>The sub contractor object.</returns>
		public async Task<SubContractor> PutSubContractorIntoEmployerAsync(string EmployerId, string SubContractorId, SubContractor requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubContractor>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a CIS instruction
		/// Delete the specified CIS instruction
		/// DeleteCisInstruction Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisInstructionId">The CIS instruction unique identifier. E.g. CIS001</param>
		public async Task DeleteCisInstructionAsync(string EmployerId, string SubContractorId, string CisInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisInstruction/"+ (CisInstructionId==null? "" : System.Uri.EscapeDataString(CisInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get CIS instruction from sub contractor
		/// Gets the specified CIS instruction from sub contractor.
		/// GetCisInstructionFromSubContractor Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisInstructionId">The CIS instruction unique identifier. E.g. CIS001</param>
		/// <returns>The cis instruction object.</returns>
		public async Task<CisInstruction> GetCisInstructionFromSubContractorAsync(string EmployerId, string SubContractorId, string CisInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisInstruction/"+ (CisInstructionId==null? "" : System.Uri.EscapeDataString(CisInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CisInstruction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patches the CIS instruction
		/// Update an existing CIS instruction object
		/// PatchCisInstruction Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisInstructionId">The CIS instruction unique identifier. E.g. CIS001</param>
		/// <returns>The cis instruction object.</returns>
		public async Task<CisInstruction> PatchCisInstructionAsync(string EmployerId, string SubContractorId, string CisInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisInstruction/"+ (CisInstructionId==null? "" : System.Uri.EscapeDataString(CisInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CisInstruction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the CIS instruction
		/// Insert or update existing CIS instruction object
		/// PutCisInstructionIntoSubContractor Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisInstructionId">The CIS instruction unique identifier. E.g. CIS001</param>
		/// <param name="requestBody">The CIS instruction object.</param>
		/// <returns>The cis instruction object.</returns>
		public async Task<CisInstruction> PutCisInstructionIntoSubContractorAsync(string EmployerId, string SubContractorId, string CisInstructionId, CisInstruction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisInstruction/"+ (CisInstructionId==null? "" : System.Uri.EscapeDataString(CisInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CisInstruction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete CIS instruction tag
		/// Deletes a tag from the CIS instruction
		/// DeleteCisInstructionTag Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisInstructionId">The CIS instruction unique identifier. E.g. CIS001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeleteCisInstructionTagAsync(string EmployerId, string SubContractorId, string CisInstructionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisInstruction/"+ (CisInstructionId==null? "" : System.Uri.EscapeDataString(CisInstructionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get CIS instruction tag
		/// Gets the tag from the CIS instruction
		/// GetTagFromCisInstruction Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisInstructionId">The CIS instruction unique identifier. E.g. CIS001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromCisInstructionAsync(string EmployerId, string SubContractorId, string CisInstructionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisInstruction/"+ (CisInstructionId==null? "" : System.Uri.EscapeDataString(CisInstructionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert CIS instruction tag
		/// Inserts a new tag on the CIS instruction
		/// PutCisInstructionTag Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisInstructionId">The CIS instruction unique identifier. E.g. CIS001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutCisInstructionTagAsync(string EmployerId, string SubContractorId, string CisInstructionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisInstruction/"+ (CisInstructionId==null? "" : System.Uri.EscapeDataString(CisInstructionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all tags from the CIS instruction
		/// Gets all the tags from the CIS instruction
		/// GetTagsFromCisInstruction Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisInstructionId">The CIS instruction unique identifier. E.g. CIS001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromCisInstructionAsync(string EmployerId, string SubContractorId, string CisInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisInstruction/"+ (CisInstructionId==null? "" : System.Uri.EscapeDataString(CisInstructionId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get CIS instructions from sub contractor.
		/// Get links to all CIS instructions for the specified sub contractor.
		/// GetCisInstructionsFromSubContractor Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetCisInstructionsFromSubContractorAsync(string EmployerId, string SubContractorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisInstructions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new CIS instruction
		/// Create a new CIS instruction object
		/// PostCisInstructionIntoSubContractor Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="requestBody">The CIS instruction object.</param>
		public async Task PostCisInstructionIntoSubContractorAsync(string EmployerId, string SubContractorId, CisInstruction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisInstructions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get CIS instructions with tag
		/// Gets the CIS instruction with the tag
		/// GetCisInstructionsWithTag Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetCisInstructionsWithTagAsync(string EmployerId, string SubContractorId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisInstructions/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all CIS instruction tags
		/// Gets all the CIS instruction tags
		/// GetAllCisInstructionTags Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllCisInstructionTagsAsync(string EmployerId, string SubContractorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisInstructions/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a CIS line
		/// Delete the specified CIS line
		/// DeleteCisLine Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisLineId">The CIS line unique identifier. E.g. CISLN001</param>
		public async Task DeleteCisLineAsync(string EmployerId, string SubContractorId, string CisLineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisLine/"+ (CisLineId==null? "" : System.Uri.EscapeDataString(CisLineId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get CIS line from sub contractor
		/// Gets the specified CIS line from sub contractor.
		/// GetCisLineFromSubContractor Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisLineId">The CIS line unique identifier. E.g. CISLN001</param>
		/// <returns>The cis line object.</returns>
		public async Task<CisLine> GetCisLineFromSubContractorAsync(string EmployerId, string SubContractorId, string CisLineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisLine/"+ (CisLineId==null? "" : System.Uri.EscapeDataString(CisLineId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CisLine>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete CIS line tag
		/// Deletes a tag from the CIS line
		/// DeleteCisLineTag Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisLineId">The CIS line unique identifier. E.g. CISLN001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeleteCisLineTagAsync(string EmployerId, string SubContractorId, string CisLineId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisLine/"+ (CisLineId==null? "" : System.Uri.EscapeDataString(CisLineId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get CIS line tag
		/// Gets the tag from the CIS line
		/// GetTagFromCisLine Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisLineId">The CIS line unique identifier. E.g. CISLN001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromCisLineAsync(string EmployerId, string SubContractorId, string CisLineId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisLine/"+ (CisLineId==null? "" : System.Uri.EscapeDataString(CisLineId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert CIS line tag
		/// Inserts a new tag on the CIS line
		/// PutCisLineTag Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisLineId">The CIS line unique identifier. E.g. CISLN001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutCisLineTagAsync(string EmployerId, string SubContractorId, string CisLineId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisLine/"+ (CisLineId==null? "" : System.Uri.EscapeDataString(CisLineId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all tags from the CIS line
		/// Gets all the tags from the CIS line
		/// GetTagsFromCisLine Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="CisLineId">The CIS line unique identifier. E.g. CISLN001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromCisLineAsync(string EmployerId, string SubContractorId, string CisLineId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisLine/"+ (CisLineId==null? "" : System.Uri.EscapeDataString(CisLineId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get CIS lines from sub contractor.
		/// Get links to all CIS lines for the specified sub contractor.
		/// GetCisLinesFromSubContractor Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetCisLinesFromSubContractorAsync(string EmployerId, string SubContractorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisLines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get CIS lines with tag
		/// Gets the CIS line with the tag
		/// GetCisLinesWithTag Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetCisLinesWithTagAsync(string EmployerId, string SubContractorId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisLines/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all CIS line tags
		/// Gets all the CIS line tags
		/// GetAllCisLineTags Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllCisLineTagsAsync(string EmployerId, string SubContractorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/CisLines/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the journal Lines from the specified sub contractor
		/// Get links to all journal lines for the specified sub contractor
		/// GetJournalLinesFromSubContractor Employer/{EmployerId}/SubContractor/{SubContractorId}/JournalLines
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetJournalLinesFromSubContractorAsync(string EmployerId, string SubContractorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/JournalLines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an SubContractor revision matching the specified revision number.
		/// Deletes the specified sub contractor revision for the matching revision number
		/// DeleteSubContractorRevisionByNumber Employer/{EmployerId}/SubContractor/{SubContractorId}/Revision/{RevisionNumber}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		public async Task DeleteSubContractorRevisionByNumberAsync(string EmployerId, string SubContractorId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the sub contractor by revision number
		/// Get the sub contractor revision matching the specified revision number
		/// GetSubContractorRevisionByNumber Employer/{EmployerId}/SubContractor/{SubContractorId}/Revision/{RevisionNumber}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="RevisionNumber">The revision number. E.g. 1</param>
		/// <returns>The sub contractor object.</returns>
		public async Task<SubContractor> GetSubContractorRevisionByNumberAsync(string EmployerId, string SubContractorId, string RevisionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/Revision/"+ (RevisionNumber==null? "" : System.Uri.EscapeDataString(RevisionNumber));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubContractor>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all sub contractor revisions
		/// Gets links to all the sub contractor revisions
		/// GetSubContractorRevisions Employer/{EmployerId}/SubContractor/{SubContractorId}/Revisions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetSubContractorRevisionsAsync(string EmployerId, string SubContractorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/Revisions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete sub contractor tag
		/// Deletes a tag from the sub contractor
		/// DeleteSubContractorTag Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeleteSubContractorTagAsync(string EmployerId, string SubContractorId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sub contractor tag
		/// Gets the tag from the sub contractor
		/// GetTagFromSubContractor Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromSubContractorAsync(string EmployerId, string SubContractorId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert sub contractor tag
		/// Inserts a new tag on the sub contractor
		/// PutSubContractorTag Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutSubContractorTagAsync(string EmployerId, string SubContractorId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sub contractor revision tag
		/// Gets the tag from the sub contractor revision
		/// GetTagFromSubContractorRevision Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromSubContractorRevisionAsync(string EmployerId, string SubContractorId, string TagId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all tags from the sub contractor
		/// Gets all the tags from the sub contractor
		/// GetTagsFromSubContractor Employer/{EmployerId}/SubContractor/{SubContractorId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromSubContractorAsync(string EmployerId, string SubContractorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all sub contractor revision tags
		/// Gets all the tags from the sub contractor revision
		/// GetTagsFromSubContractorRevision Employer/{EmployerId}/SubContractor/{SubContractorId}/Tags/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromSubContractorRevisionAsync(string EmployerId, string SubContractorId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/Tags/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an sub contractor revision matching the specified revision date.
		/// Deletes the specified sub contractor revision for the matching revision date
		/// DeleteSubContractorRevision Employer/{EmployerId}/SubContractor/{SubContractorId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		public async Task DeleteSubContractorRevisionAsync(string EmployerId, string SubContractorId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sub contractor by effective date.
		/// Returns the sub contractor's state at the specified effective date.
		/// GetSubContractorByEffectiveDate Employer/{EmployerId}/SubContractor/{SubContractorId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="SubContractorId">The sub contractors' unique identifier. E.g SUB001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The sub contractor object.</returns>
		public async Task<SubContractor> GetSubContractorByEffectiveDateAsync(string EmployerId, string SubContractorId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractor/"+ (SubContractorId==null? "" : System.Uri.EscapeDataString(SubContractorId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubContractor>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sub contractors from employer.
		/// Get links to all sub contractors for the specified employer.
		/// GetSubContractorsFromEmployer Employer/{EmployerId}/SubContractors
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetSubContractorsFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new sub contractor
		/// Create a new sub contractor object
		/// PostSubContractorIntoEmployer Employer/{EmployerId}/SubContractors
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="requestBody">The sub contractor object.</param>
		public async Task PostSubContractorIntoEmployerAsync(string EmployerId, SubContractor requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sub contractors with tag
		/// Gets the sub contractor with the tag
		/// GetSubContractorsWithTag Employer/{EmployerId}/SubContractors/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetSubContractorsWithTagAsync(string EmployerId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractors/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all sub contractor tags
		/// Gets all the sub contractor tags
		/// GetAllSubContractorTags Employer/{EmployerId}/SubContractors/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllSubContractorTagsAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractors/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get sub contractors from employer at a given effective date.
		/// Get links to all sub contractors for the employer on specified effective date.
		/// GetSubContractorsByEffectiveDate Employer/{EmployerId}/SubContractors/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetSubContractorsByEffectiveDateAsync(string EmployerId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/SubContractors/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employer summary
		/// Gets the specified employer summary data.
		/// GetEmployerSummary Employer/{EmployerId}/Summary
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The employer summary object.</returns>
		public async Task<EmployerSummary> GetEmployerSummaryAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EmployerSummary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete employer tag
		/// Deletes a tag from the employer
		/// DeleteEmployerTag Employer/{EmployerId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeleteEmployerTagAsync(string EmployerId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employer tag
		/// Gets the tag from the employer
		/// GetTagFromEmployer Employer/{EmployerId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromEmployerAsync(string EmployerId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert employer tag
		/// Inserts a new tag on the employer
		/// PutEmployerTag Employer/{EmployerId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutEmployerTagAsync(string EmployerId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employer revision tag
		/// Gets the tag from the employer revision
		/// GetTagFromEmployerRevision Employer/{EmployerId}/Tag/{TagId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromEmployerRevisionAsync(string EmployerId, string TagId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all employer tags
		/// Gets all the tags from the employer
		/// GetTagsFromEmployer Employer/{EmployerId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromEmployerAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all employer revision tags
		/// Gets all the tags from the employer revision
		/// GetTagsFromEmployerRevision Employer/{EmployerId}/Tags/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromEmployerRevisionAsync(string EmployerId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/Tags/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete third party transaction
		/// Deletes a third party transaction record from the given resource location
		/// DeleteThirdPartyTransaction Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="ThirdPartyTransactionId">The third party transaction unique identifier. E.g TP001</param>
		public async Task DeleteThirdPartyTransactionAsync(string EmployerId, string ThirdPartyTransactionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ThirdPartyTransaction/"+ (ThirdPartyTransactionId==null? "" : System.Uri.EscapeDataString(ThirdPartyTransactionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a third party transaction
		/// Get a third party transaction
		/// GetThirdPartyTransaction Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="ThirdPartyTransactionId">The third party transaction unique identifier. E.g TP001</param>
		/// <returns>The third party transaction object.</returns>
		public async Task<ThirdPartyTransaction> GetThirdPartyTransactionAsync(string EmployerId, string ThirdPartyTransactionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ThirdPartyTransaction/"+ (ThirdPartyTransactionId==null? "" : System.Uri.EscapeDataString(ThirdPartyTransactionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThirdPartyTransaction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete third party transaction tag
		/// Deletes a tag from the third party transaction
		/// DeleteThirdPartyTransactionTag Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="ThirdPartyTransactionId">The third party transaction unique identifier. E.g TP001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeleteThirdPartyTransactionTagAsync(string EmployerId, string ThirdPartyTransactionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ThirdPartyTransaction/"+ (ThirdPartyTransactionId==null? "" : System.Uri.EscapeDataString(ThirdPartyTransactionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get third party transaction tag
		/// Gets a tag from the third party transaction
		/// GetTagFromThirdPartyTransaction Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="ThirdPartyTransactionId">The third party transaction unique identifier. E.g TP001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromThirdPartyTransactionAsync(string EmployerId, string ThirdPartyTransactionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ThirdPartyTransaction/"+ (ThirdPartyTransactionId==null? "" : System.Uri.EscapeDataString(ThirdPartyTransactionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// insert third party transaction tag
		/// Inserts a tag on the third party transaction
		/// PutThirdPartyTransactionTag Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="ThirdPartyTransactionId">The third party transaction unique identifier. E.g TP001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutThirdPartyTransactionTagAsync(string EmployerId, string ThirdPartyTransactionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ThirdPartyTransaction/"+ (ThirdPartyTransactionId==null? "" : System.Uri.EscapeDataString(ThirdPartyTransactionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get tags from third party transaction
		/// Gets all tags from the third party transaction
		/// GetTagsFromThirdPartyTransaction Employer/{EmployerId}/ThirdPartyTransaction/{ThirdPartyTransactionId}/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="ThirdPartyTransactionId">The third party transaction unique identifier. E.g TP001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromThirdPartyTransactionAsync(string EmployerId, string ThirdPartyTransactionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ThirdPartyTransaction/"+ (ThirdPartyTransactionId==null? "" : System.Uri.EscapeDataString(ThirdPartyTransactionId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all third party transaction links
		/// Get all third party transaction links
		/// GetThirdPartyTransactions Employer/{EmployerId}/ThirdPartyTransactions
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetThirdPartyTransactionsAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ThirdPartyTransactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get links to tagged third party transactions
		/// Gets the third party transactions with the specified tag
		/// GetAllThirdPartyTransactionsWithTag Employer/{EmployerId}/ThirdPartyTransactions/Tag/{TagId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllThirdPartyTransactionsWithTagAsync(string EmployerId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ThirdPartyTransactions/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all third party transaction tags
		/// Gets all the third party transaction tags
		/// GetAllThirdPartyTransactionTags Employer/{EmployerId}/ThirdPartyTransactions/Tags
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllThirdPartyTransactionTagsAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/ThirdPartyTransactions/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an Employer revision matching the specified revision date.
		/// Deletes the specified employer revision for the matching revision date
		/// DeleteEmployerRevision Employer/{EmployerId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		public async Task DeleteEmployerRevisionAsync(string EmployerId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the employer at the specified effective
		/// Returns the employer's state at the specified effective date.
		/// GetEmployerByEffectiveDate Employer/{EmployerId}/{EffectiveDate}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The employer object.</returns>
		public async Task<Employer> GetEmployerByEffectiveDateAsync(string EmployerId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Employer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employer summary by effective date.
		/// Gets the employer summary for the specified effective date.
		/// GetEmployerSummaryByEffectiveDate Employer/{EmployerId}/{EffectiveDate}/Summary
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The employer summary object.</returns>
		public async Task<EmployerSummary> GetEmployerSummaryByEffectiveDateAsync(string EmployerId, System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId))+"/"+EffectiveDate+"/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EmployerSummary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all employers
		/// Gets links to all employers contained under the authorised application scope
		/// GetEmployers Employers
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Employer
		/// Create a new employer object
		/// PostEmployer Employers
		/// </summary>
		/// <param name="requestBody">The employer object.</param>
		public async Task PostEmployerAsync(Employer requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employer summaries.
		/// Get links to all employer summaries.
		/// GetEmployerSummaries Employers/Summary
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployerSummariesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employers/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employers with tag
		/// Gets the employers with the tag
		/// GetEmployersWithTag Employers/Tag/{TagId}
		/// </summary>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployersWithTagAsync(string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employers/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all employer tags
		/// Gets all the employer tags
		/// GetAllEmployerTags Employers/Tags
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllEmployerTagsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employers/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all employers at the specified effective date
		/// Gets links to all employers contained under the authorised application scope for the specified effective date.
		/// GetEmployersByEffectiveDate Employers/{EffectiveDate}
		/// </summary>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployersByEffectiveDateAsync(System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employers/"+EffectiveDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get employer summaries at a given effective date.
		/// Get links to all employer summaries on specified effective date.
		/// GetEmployerSummariesByEffectiveDate Employers/{EffectiveDate}/Summary
		/// </summary>
		/// <param name="EffectiveDate">The effective date to be applied. E.g 2016-04-06</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetEmployerSummariesByEffectiveDateAsync(System.DateOnly EffectiveDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Employers/"+EffectiveDate+"/Summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get health check status
		/// Returns the health status of the application
		/// GetHealthCheck Healthcheck
		/// </summary>
		/// <returns>The health check object.</returns>
		public async Task<HealthCheck> GetHealthCheckAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Healthcheck";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HealthCheck>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Batch jobs
		/// Gets all the Batch jobs
		/// GetBatchJobs Jobs/Batch
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetBatchJobsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new Batch job
		/// Adds a new Batch job to the queue and returns the job info
		/// PostNewBatchJob Jobs/Batch
		/// </summary>
		/// <param name="requestBody">The the batch job instruction object.</param>
		public async Task PostNewBatchJobAsync(BatchJobInstruction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the Batch job
		/// Deletes the the Batch job
		/// DeleteBatchJob Jobs/Batch/{JobId}
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>No Content</returns>
		public async Task DeleteBatchJobAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Batch/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Batch job information
		/// Return the the Batch job information
		/// GetBatchJobInfo Jobs/Batch/{JobId}/Info
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The job info object.</returns>
		public async Task<JobInfo> GetBatchJobInfoAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Batch/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Info";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Batch job progress
		/// Return the the Batch job progress
		/// GetBatchJobProgress Jobs/Batch/{JobId}/Progress
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The current progress of the job expressed as a percentage</returns>
		public async Task GetBatchJobProgressAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Batch/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Progress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Batch job status
		/// Return the the Batch job status
		/// GetBatchJobStatus Jobs/Batch/{JobId}/Status
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The current status of the job</returns>
		public async Task GetBatchJobStatusAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Batch/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all CIS jobs
		/// Gets all the CIS jobs
		/// GetCisJobs Jobs/Cis
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetCisJobsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Cis";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new CIS job
		/// Adds a new CIS job to the queue and returns the job info
		/// PostNewCisJob Jobs/Cis
		/// </summary>
		/// <param name="requestBody">The the CIS job instruction object.</param>
		public async Task PostNewCisJobAsync(CisJobInstructionBase requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Cis";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the CIS job
		/// Deletes the the CIS job
		/// DeleteCisJob Jobs/Cis/{JobId}
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>No Content</returns>
		public async Task DeleteCisJobAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Cis/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the CIS job information
		/// Return the the CIS job information
		/// GetCisJobInfo Jobs/Cis/{JobId}/Info
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The job info object.</returns>
		public async Task<JobInfo> GetCisJobInfoAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Cis/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Info";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the CIS job progress
		/// Return the the CIS job progress
		/// GetCisJobProgress Jobs/Cis/{JobId}/Progress
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The current progress of the job expressed as a percentage</returns>
		public async Task GetCisJobProgressAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Cis/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Progress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the CIS job status
		/// Return the the CIS job status
		/// GetCisJobStatus Jobs/Cis/{JobId}/Status
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The current status of the job</returns>
		public async Task GetCisJobStatusAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Cis/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all DPS jobs
		/// Gets all the DPS jobs
		/// GetDpsJobs Jobs/Dps
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetDpsJobsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Dps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new DPS job
		/// Creates the new DPS job to the queue and returns the job info
		/// PostNewDpsJob Jobs/Dps
		/// </summary>
		/// <param name="requestBody">The the DPS job instruction object.</param>
		public async Task PostNewDpsJobAsync(DpsJobInstruction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Dps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the DPS job
		/// Deletes the the DPS job
		/// DeleteDpsJob Jobs/Dps/{JobId}
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>No Content</returns>
		public async Task DeleteDpsJobAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Dps/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the DPS job information
		/// Return the the DPS job information
		/// GetDpsJobInfo Jobs/Dps/{JobId}/Info
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The job info object.</returns>
		public async Task<JobInfo> GetDpsJobInfoAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Dps/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Info";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the DPS job progress
		/// Return the the DPS job progress
		/// GetDpsJobProgress Jobs/Dps/{JobId}/Progress
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The current progress of the job expressed as a percentage</returns>
		public async Task GetDpsJobProgressAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Dps/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Progress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the DPS job status
		/// Return the the DPS job status
		/// GetDpsJobStatus Jobs/Dps/{JobId}/Status
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The current status of the job</returns>
		public async Task GetDpsJobStatusAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Dps/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all jobs relating to the employer.
		/// Returns all job information objects for the specified employer.
		/// GetEmployerJobs Jobs/Employer/{EmployerId}
		/// </summary>
		/// <param name="EmployerId">The employers' unique identifier. E.g ER001</param>
		/// <returns>The serialised array of JobInfo objects</returns>
		public async Task<string> GetEmployerJobsAsync(string EmployerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Employer/"+ (EmployerId==null? "" : System.Uri.EscapeDataString(EmployerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all PayRun jobs
		/// Gets all the pay run jobs
		/// GetPayRunJobs Jobs/PayRuns
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPayRunJobsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/PayRuns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new PayRun job
		/// Creates the new pay run job to the queue and returns the job info
		/// PostNewPayRunJob Jobs/PayRuns
		/// </summary>
		/// <param name="requestBody">The pay run job instruction object.</param>
		public async Task PostNewPayRunJobAsync(PayRunJobInstruction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/PayRuns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the pay run job
		/// Deletes the the payrun job
		/// DeletePayRunJob Jobs/PayRuns/{JobId}
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>No Content</returns>
		public async Task DeletePayRunJobAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/PayRuns/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the pay run job information
		/// Return the the payrun job information
		/// GetPayRunJobInfo Jobs/PayRuns/{JobId}/Info
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The job info object.</returns>
		public async Task<JobInfo> GetPayRunJobInfoAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/PayRuns/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Info";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the pay run job progress
		/// Return the the payrun job progress
		/// GetPayRunJobProgress Jobs/PayRuns/{JobId}/Progress
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The current progress of the job expressed as a percentage</returns>
		public async Task GetPayRunJobProgressAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/PayRuns/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Progress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the pay run job status
		/// Return the the payrun job status
		/// GetPayRunJobStatus Jobs/PayRuns/{JobId}/Status
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The current status of the job</returns>
		public async Task GetPayRunJobStatusAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/PayRuns/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all RTI jobs
		/// Gets all the RTI jobs
		/// GetRtiJobs Jobs/Rti
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetRtiJobsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Rti";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new RTI job
		/// Creates the new RTI job to the queue and returns the job info
		/// PostNewRtiJob Jobs/Rti
		/// </summary>
		/// <param name="requestBody">The the RTI job instruction object.</param>
		public async Task PostNewRtiJobAsync(RtiJobInstruction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Rti";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the RTI job
		/// Deletes the the RTI job
		/// DeleteRtiJob Jobs/Rti/{JobId}
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>No Content</returns>
		public async Task DeleteRtiJobAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Rti/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the RTI job information
		/// Return the the RTI job information
		/// GetRtiJobInfo Jobs/Rti/{JobId}/Info
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The job info object.</returns>
		public async Task<JobInfo> GetRtiJobInfoAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Rti/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Info";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the RTI job progress
		/// Return the the RTI job progress
		/// GetRtiJobProgress Jobs/Rti/{JobId}/Progress
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The current progress of the job expressed as a percentage</returns>
		public async Task GetRtiJobProgressAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Rti/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Progress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the RTI job status
		/// Return the the RTI job status
		/// GetRtiJobStatus Jobs/Rti/{JobId}/Status
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The current status of the job</returns>
		public async Task GetRtiJobStatusAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/Rti/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Third Party jobs
		/// Gets all the Third Party jobs
		/// GetThirdPartyJobs Jobs/ThirdParty
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetThirdPartyJobsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/ThirdParty";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new Third Party job
		/// Adds a new Third Party job to the queue and returns the job info
		/// PostNewThirdPartyJob Jobs/ThirdParty
		/// </summary>
		/// <param name="requestBody">The the third party job instruction object.</param>
		public async Task PostNewThirdPartyJobAsync(ThirdPartyJobInstruction requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/ThirdParty";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete the Third Party job
		/// Deletes the the Third Party job
		/// DeleteThirdPartyJob Jobs/ThirdParty/{JobId}
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		public async Task DeleteThirdPartyJobAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/ThirdParty/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Third Party job information
		/// Return the the Third Party job information
		/// GetThirdPartyJobInfo Jobs/ThirdParty/{JobId}/Info
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The job info object.</returns>
		public async Task<JobInfo> GetThirdPartyJobInfoAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/ThirdParty/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Info";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JobInfo>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Third Party job progress
		/// Return the the Third Party job progress
		/// GetThirdPartyJobProgress Jobs/ThirdParty/{JobId}/Progress
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The current progress of the job expressed as a percentage</returns>
		public async Task GetThirdPartyJobProgressAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/ThirdParty/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Progress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Third Party job status
		/// Return the the Third Party job status
		/// GetThirdPartyJobStatus Jobs/ThirdParty/{JobId}/Status
		/// </summary>
		/// <param name="JobId">The job unique identifier.</param>
		/// <returns>The current status of the job</returns>
		public async Task GetThirdPartyJobStatusAsync(string JobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Jobs/ThirdParty/"+ (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"/Status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Journal instruction template
		/// Delete the specified Journal instruction template object
		/// DeleteJournalInstructionTemplate JournalInstruction/{JournalInstructionId}
		/// </summary>
		/// <param name="JournalInstructionId">The journal instruction unique identifier. E.g JI001</param>
		public async Task DeleteJournalInstructionTemplateAsync(string JournalInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "JournalInstruction/"+ (JournalInstructionId==null? "" : System.Uri.EscapeDataString(JournalInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Journal instructions template for the application
		/// Retrurns the specified journal instruction from the application
		/// GetJournalInstructionTemplate JournalInstruction/{JournalInstructionId}
		/// </summary>
		/// <param name="JournalInstructionId">The journal instruction unique identifier. E.g JI001</param>
		/// <returns>The journal instruction object.</returns>
		public async Task<JournalInstruction> GetJournalInstructionTemplateAsync(string JournalInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "JournalInstruction/"+ (JournalInstructionId==null? "" : System.Uri.EscapeDataString(JournalInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JournalInstruction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Journal Instruction template
		/// Updates the existing specified Journal instruction template object
		/// PutJournalInstructionTemplate JournalInstruction/{JournalInstructionId}
		/// </summary>
		/// <param name="JournalInstructionId">The journal instruction unique identifier. E.g JI001</param>
		/// <returns>The journal instruction object.</returns>
		public async Task<JournalInstruction> PutJournalInstructionTemplateAsync(string JournalInstructionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "JournalInstruction/"+ (JournalInstructionId==null? "" : System.Uri.EscapeDataString(JournalInstructionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JournalInstruction>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the Journal instructions templates for the application
		/// Get links to all journal instruction templates for the application
		/// GetJournalInstructionTemplates JournalInstructions
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetJournalInstructionTemplatesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "JournalInstructions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Journal Instruction template
		/// Creates a new Journal instruction teamplte object
		/// PostJournalInstructionTemplate JournalInstructions
		/// </summary>
		public async Task PostJournalInstructionTemplateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "JournalInstructions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the permission object
		/// Deletes the permission object from the application
		/// DeletePermission Permission/{PermissionId}
		/// </summary>
		/// <param name="PermissionId">The permission unique identifier. E.g PERM001</param>
		/// <returns>No Content</returns>
		public async Task DeletePermissionAsync(string PermissionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Permission/"+ (PermissionId==null? "" : System.Uri.EscapeDataString(PermissionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the permission object
		/// Gets the permission object for application
		/// GetPermission Permission/{PermissionId}
		/// </summary>
		/// <param name="PermissionId">The permission unique identifier. E.g PERM001</param>
		/// <returns>The permission object.</returns>
		public async Task<Permission> GetPermissionAsync(string PermissionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Permission/"+ (PermissionId==null? "" : System.Uri.EscapeDataString(PermissionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Permission>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patch permission object
		/// Patch the permission object at the specified resource location
		/// PatchPermission Permission/{PermissionId}
		/// </summary>
		/// <param name="PermissionId">The permission unique identifier. E.g PERM001</param>
		/// <returns>The permission object.</returns>
		public async Task<Permission> PatchPermissionAsync(string PermissionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Permission/"+ (PermissionId==null? "" : System.Uri.EscapeDataString(PermissionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Permission>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Puts permisson object
		/// Puts the permission object into the specified resource location
		/// PutPermission Permission/{PermissionId}
		/// </summary>
		/// <param name="PermissionId">The permission unique identifier. E.g PERM001</param>
		/// <returns>The permission object.</returns>
		public async Task<Permission> PutPermissionAsync(string PermissionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Permission/"+ (PermissionId==null? "" : System.Uri.EscapeDataString(PermissionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Permission>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Permission tag
		/// Deletes a tag from the Permission
		/// DeletePermissionTag Permission/{PermissionId}/Tag/{TagId}
		/// </summary>
		/// <param name="PermissionId">The permission unique identifier. E.g PERM001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeletePermissionTagAsync(string PermissionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Permission/"+ (PermissionId==null? "" : System.Uri.EscapeDataString(PermissionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Permission tag
		/// Gets a tag from the Permission
		/// GetTagFromPermission Permission/{PermissionId}/Tag/{TagId}
		/// </summary>
		/// <param name="PermissionId">The permission unique identifier. E.g PERM001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromPermissionAsync(string PermissionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Permission/"+ (PermissionId==null? "" : System.Uri.EscapeDataString(PermissionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert Permission tag
		/// Inserts a tag on the Permission
		/// PutPermissionTag Permission/{PermissionId}/Tag/{TagId}
		/// </summary>
		/// <param name="PermissionId">The permission unique identifier. E.g PERM001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutPermissionTagAsync(string PermissionId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Permission/"+ (PermissionId==null? "" : System.Uri.EscapeDataString(PermissionId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get tags from Permission
		/// Gets all tags from the Permission
		/// GetTagsFromPermission Permission/{PermissionId}/Tags
		/// </summary>
		/// <param name="PermissionId">The permission unique identifier. E.g PERM001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromPermissionAsync(string PermissionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Permission/"+ (PermissionId==null? "" : System.Uri.EscapeDataString(PermissionId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the users with the specified permission
		/// Gets the users with the specified permission
		/// GetUsersFromPermission Permission/{PermissionId}/Users
		/// </summary>
		/// <param name="PermissionId">The permission unique identifier. E.g PERM001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetUsersFromPermissionAsync(string PermissionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Permission/"+ (PermissionId==null? "" : System.Uri.EscapeDataString(PermissionId))+"/Users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all permission objects
		/// Gets all permission objects for application
		/// GetPermissions Permissions
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetPermissionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post permisson object
		/// Post the new permission object into the application
		/// PostPermission Permissions
		/// </summary>
		/// <returns>The link object.</returns>
		public async Task<Link> PostPermissionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Link>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get links to tagged Permissions
		/// Gets the Permissions with the specified tag
		/// GetAllPermissionsWithTag Permissions/Tag/{TagId}
		/// </summary>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllPermissionsWithTagAsync(string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Permissions/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Permission tags
		/// Get all tags from all Permissions
		/// GetAllPermissionTags Permissions/Tags
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllPermissionTagsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Permissions/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the query result
		/// Get the results for the specified query
		/// GetQueryResponse Query
		/// </summary>
		/// <param name="requestBody">The query object to be executed against the application data.</param>
		/// <returns>The result of the query execution</returns>
		public async Task<string> GetQueryResponseAsync(Query requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Query";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the journal expression data schema
		/// Gets the data schema for all available journal expression values. Includes table names, column names and data types.
		/// GetJournalExpressionSchema ReferenceData/JournalExpressionDataTable
		/// </summary>
		/// <returns>The journal expression data table object.</returns>
		public async Task<JournalExpressionDataTable> GetJournalExpressionSchemaAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ReferenceData/JournalExpressionDataTable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JournalExpressionDataTable>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the active pay instructions report
		/// Returns the result of the executed active pay instructions report for the given query parameters
		/// GetActivePayInstructionsReportOutput Report/ACTPAYINS/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="EmployeeKey">The employee unique key. E.g. EE001</param>
		/// <param name="ActiveOn">The active date to consider. E.g 2017-04-05</param>
		/// <param name="FromDate">The lower filter date. E.g 2016-04-06</param>
		/// <param name="ToDate">The upper filter date. E.g 2017-04-05</param>
		/// <param name="Type">the data type to filter on. E.g. TaxPayInstruction</param>
		/// <returns>The result of the active pay instructions report execution</returns>
		public async Task<string> GetActivePayInstructionsReportOutputAsync(string EmployerKey, string EmployeeKey, System.DateOnly ActiveOn, System.DateOnly FromDate, System.DateOnly ToDate, string Type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/ACTPAYINS/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&EmployeeKey=" + (EmployeeKey==null? "" : System.Uri.EscapeDataString(EmployeeKey))+"&ActiveOn="+ActiveOn+"&FromDate="+FromDate+"&ToDate="+ToDate+"&Type=" + (Type==null? "" : System.Uri.EscapeDataString(Type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the AOE liability report
		/// Returns the result of the executed AOE liability report for the given query parameters
		/// GetAoeLiabilityReportOuput Report/AOELIABILITY/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="PayScheduleKey">The pay schedule unique key. E.g. SCH001</param>
		/// <param name="TaxYear">The tax year. E.g. 2017 = 2017/18 year.</param>
		/// <param name="TaxPeriod">The tax period number.</param>
		/// <param name="TransformDefinitionKey">The transform definition unique key. E.g. P45-Pdf</param>
		/// <returns>The result of the AOE liability report execution</returns>
		public async Task<string> GetAoeLiabilityReportOuputAsync(string EmployerKey, string PayScheduleKey, string TaxYear, string TaxPeriod, string TransformDefinitionKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/AOELIABILITY/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&PayScheduleKey=" + (PayScheduleKey==null? "" : System.Uri.EscapeDataString(PayScheduleKey))+"&TaxYear=" + (TaxYear==null? "" : System.Uri.EscapeDataString(TaxYear))+"&TaxPeriod=" + (TaxPeriod==null? "" : System.Uri.EscapeDataString(TaxPeriod))+"&TransformDefinitionKey=" + (TransformDefinitionKey==null? "" : System.Uri.EscapeDataString(TransformDefinitionKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the DPS message report
		/// Returns the result of the executed DPS message report for the given query parameters
		/// GetDpsMessageReportOutput Report/DPSMSG/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="FromDate">The lower filter date. E.g 2016-04-06</param>
		/// <param name="ToDate">The upper filter date. E.g 2017-04-05</param>
		/// <param name="MessageTypes">The DPS message types as a CSV list. E.g. P6,P9,SL1,SL2</param>
		/// <param name="MessageStatuses">The DPS message status as a CSV list. E.g. Retrieved,Processed,Blocked,Ignored</param>
		/// <param name="StartIndex">The element index to begin the report. Used to control paging within large data sets. E.g. 1</param>
		/// <param name="MaxIndex">The highest element index to return from the report. Used to control paging within large data sets. E.g. 100</param>
		/// <returns>The result of the DPS message report execution</returns>
		public async Task<string> GetDpsMessageReportOutputAsync(string EmployerKey, System.DateOnly FromDate, System.DateOnly ToDate, string MessageTypes, string MessageStatuses, string StartIndex, string MaxIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/DPSMSG/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&FromDate="+FromDate+"&ToDate="+ToDate+"&MessageTypes=" + (MessageTypes==null? "" : System.Uri.EscapeDataString(MessageTypes))+"&MessageStatuses=" + (MessageStatuses==null? "" : System.Uri.EscapeDataString(MessageStatuses))+"&StartIndex=" + (StartIndex==null? "" : System.Uri.EscapeDataString(StartIndex))+"&MaxIndex=" + (MaxIndex==null? "" : System.Uri.EscapeDataString(MaxIndex));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the employer summary report
		/// Returns the result of the employer summary report for the given query parameters
		/// GetEmployerSummaryReportOuput Report/EMPSUM/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="ContextDate">The date context for the report. E.g. 2018-04-30</param>
		/// <returns>The result of the employer summary report execution</returns>
		public async Task<string> GetEmployerSummaryReportOuputAsync(string EmployerKey, System.DateOnly ContextDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/EMPSUM/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&ContextDate="+ContextDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the gross to net report
		/// Returns the result of the executed gross to net report for the given query parameters
		/// GetGrossToNetReportOutput Report/GRO2NET/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="PayScheduleKey">The pay schedule unique key. E.g. SCH001</param>
		/// <param name="TaxYear">The tax year. E.g. 2017 = 2017/18 year.</param>
		/// <param name="TaxPeriod">The tax period number.</param>
		/// <param name="StartIndex">The element index to begin the report. Used to control paging within large data sets. E.g. 1</param>
		/// <param name="MaxIndex">The highest element index to return from the report. Used to control paging within large data sets. E.g. 100</param>
		/// <returns>The result of the gross to net report execution</returns>
		public async Task<string> GetGrossToNetReportOutputAsync(string EmployerKey, string PayScheduleKey, string TaxYear, string TaxPeriod, string StartIndex, string MaxIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/GRO2NET/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&PayScheduleKey=" + (PayScheduleKey==null? "" : System.Uri.EscapeDataString(PayScheduleKey))+"&TaxYear=" + (TaxYear==null? "" : System.Uri.EscapeDataString(TaxYear))+"&TaxPeriod=" + (TaxPeriod==null? "" : System.Uri.EscapeDataString(TaxPeriod))+"&StartIndex=" + (StartIndex==null? "" : System.Uri.EscapeDataString(StartIndex))+"&MaxIndex=" + (MaxIndex==null? "" : System.Uri.EscapeDataString(MaxIndex));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the holiday balance report
		/// Returns the result of the executed holiday balance report for the given query parameters
		/// GetHolidayBalanceReportOutput Report/HOLBAL/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="HolidayYearEnd">The holiday year end for the report. E.g. 2018-12-31</param>
		/// <param name="EmployeeCodes">A comma separated list of the employee codes. E.g. EMP001,EMP002</param>
		/// <param name="StartIndex">The element index to begin the report. Used to control paging within large data sets. E.g. 1</param>
		/// <param name="MaxIndex">The highest element index to return from the report. Used to control paging within large data sets. E.g. 100</param>
		/// <returns>The result of the holiday balance report execution</returns>
		public async Task<string> GetHolidayBalanceReportOutputAsync(string EmployerKey, System.DateOnly HolidayYearEnd, string EmployeeCodes, string StartIndex, string MaxIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/HOLBAL/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&HolidayYearEnd="+HolidayYearEnd+"&EmployeeCodes=" + (EmployeeCodes==null? "" : System.Uri.EscapeDataString(EmployeeCodes))+"&StartIndex=" + (StartIndex==null? "" : System.Uri.EscapeDataString(StartIndex))+"&MaxIndex=" + (MaxIndex==null? "" : System.Uri.EscapeDataString(MaxIndex));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the journal report
		/// Returns the result of the journal report for the given query parameters
		/// GetJournalReportOuput Report/JOURNAL/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="PayFrequency">The pay frequency option. E.g. Monthly</param>
		/// <param name="TaxYear">The tax year. E.g. 2017 = 2017/18 year.</param>
		/// <param name="TaxPeriod">The tax period number.</param>
		/// <param name="LedgerTarget">Specific to JOURNAL report, a filter used to select the journal lines for the specified ledger target. E.g. [Default]</param>
		/// <returns>The result of the journal report execution</returns>
		public async Task<string> GetJournalReportOuputAsync(string EmployerKey, string PayFrequency, string TaxYear, string TaxPeriod, string LedgerTarget, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/JOURNAL/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&PayFrequency=" + (PayFrequency==null? "" : System.Uri.EscapeDataString(PayFrequency))+"&TaxYear=" + (TaxYear==null? "" : System.Uri.EscapeDataString(TaxYear))+"&TaxPeriod=" + (TaxPeriod==null? "" : System.Uri.EscapeDataString(TaxPeriod))+"&LedgerTarget=" + (LedgerTarget==null? "" : System.Uri.EscapeDataString(LedgerTarget));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the last pay date report
		/// Returns the result of the executed last pay date report for the given query parameters
		/// GetLastPayDateReportOuput Report/LASTPAYDATE/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="EmployeeKey">The employee unique key. E.g. EE001</param>
		/// <returns>The result of the last pay date report execution</returns>
		public async Task<string> GetLastPayDateReportOuputAsync(string EmployerKey, string EmployeeKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/LASTPAYDATE/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&EmployeeKey=" + (EmployeeKey==null? "" : System.Uri.EscapeDataString(EmployeeKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the net pay report
		/// Returns the result of the executed net pay report for the given query parameters
		/// GetNetPayReportOutput Report/NETPAY/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="PayScheduleKey">The pay schedule unique key. E.g. SCH001</param>
		/// <param name="TaxYear">The tax year. E.g. 2017 = 2017/18 year.</param>
		/// <param name="TaxPeriod">The tax period number.</param>
		/// <param name="StartIndex">The element index to begin the report. Used to control paging within large data sets. E.g. 1</param>
		/// <param name="MaxIndex">The highest element index to return from the report. Used to control paging within large data sets. E.g. 100</param>
		/// <returns>The result of the net pay report execution</returns>
		public async Task<string> GetNetPayReportOutputAsync(string EmployerKey, string PayScheduleKey, string TaxYear, string TaxPeriod, string StartIndex, string MaxIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/NETPAY/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&PayScheduleKey=" + (PayScheduleKey==null? "" : System.Uri.EscapeDataString(PayScheduleKey))+"&TaxYear=" + (TaxYear==null? "" : System.Uri.EscapeDataString(TaxYear))+"&TaxPeriod=" + (TaxPeriod==null? "" : System.Uri.EscapeDataString(TaxPeriod))+"&StartIndex=" + (StartIndex==null? "" : System.Uri.EscapeDataString(StartIndex))+"&MaxIndex=" + (MaxIndex==null? "" : System.Uri.EscapeDataString(MaxIndex));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the next pay period report
		/// Returns the result of the executed next pay period report for the given query parameters
		/// GetNextPayPeriodDatesReportOutput Report/NEXTPERIOD/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="PayScheduleKey">The pay schedule unique key. E.g. SCH001</param>
		/// <returns>The result of the next pay period report execution</returns>
		public async Task<string> GetNextPayPeriodDatesReportOutputAsync(string EmployerKey, string PayScheduleKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/NEXTPERIOD/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&PayScheduleKey=" + (PayScheduleKey==null? "" : System.Uri.EscapeDataString(PayScheduleKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the P11 summary report
		/// Returns the result of the executed P11 summary report for the given query parameters
		/// GetP11SummaryReportOutput Report/P11SUM/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="PayScheduleKey">The pay schedule unique key. E.g. SCH001</param>
		/// <param name="TaxYear">The tax year. E.g. 2017 = 2017/18 year.</param>
		/// <param name="StartIndex">The element index to begin the report. Used to control paging within large data sets. E.g. 1</param>
		/// <param name="MaxIndex">The highest element index to return from the report. Used to control paging within large data sets. E.g. 100</param>
		/// <returns>The result of the P11 report execution</returns>
		public async Task<string> GetP11SummaryReportOutputAsync(string EmployerKey, string PayScheduleKey, string TaxYear, string StartIndex, string MaxIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/P11SUM/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&PayScheduleKey=" + (PayScheduleKey==null? "" : System.Uri.EscapeDataString(PayScheduleKey))+"&TaxYear=" + (TaxYear==null? "" : System.Uri.EscapeDataString(TaxYear))+"&StartIndex=" + (StartIndex==null? "" : System.Uri.EscapeDataString(StartIndex))+"&MaxIndex=" + (MaxIndex==null? "" : System.Uri.EscapeDataString(MaxIndex));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the P32 report
		/// Returns the result of the executed P32 report for the given query parameters
		/// GetP32NetReportOutput Report/P32/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="TaxYear">The tax year. E.g. 2017 = 2017/18 year.</param>
		/// <returns>The result of the P32 report execution</returns>
		public async Task<string> GetP32NetReportOutputAsync(string EmployerKey, string TaxYear, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/P32/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&TaxYear=" + (TaxYear==null? "" : System.Uri.EscapeDataString(TaxYear));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the P32 summary report
		/// Returns the result of the executed P32 summary report for the given query parameters
		/// GetP32SummaryNetReportOutput Report/P32SUM/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="TaxYear">The tax year. E.g. 2017 = 2017/18 year.</param>
		/// <returns>The result of the P32 summary report execution</returns>
		public async Task<string> GetP32SummaryNetReportOutputAsync(string EmployerKey, string TaxYear, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/P32SUM/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&TaxYear=" + (TaxYear==null? "" : System.Uri.EscapeDataString(TaxYear));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the P45 report
		/// Returns the result of the executed P45 report for the given query parameters
		/// GetP45ReportOutput Report/P45/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="EmployeeKey">The employee unique key. E.g. EE001</param>
		/// <param name="TransformDefinitionKey">The transform definition unique key. E.g. P45-Pdf</param>
		/// <returns>The result of the P45 report execution</returns>
		public async Task<string> GetP45ReportOutputAsync(string EmployerKey, string EmployeeKey, string TransformDefinitionKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/P45/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&EmployeeKey=" + (EmployeeKey==null? "" : System.Uri.EscapeDataString(EmployeeKey))+"&TransformDefinitionKey=" + (TransformDefinitionKey==null? "" : System.Uri.EscapeDataString(TransformDefinitionKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the P60 report
		/// Returns the result of the executed P60 report for the given query parameters
		/// GetP60ReportOutput Report/P60/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="TaxYear">The tax year. E.g. 2017 = 2017/18 year.</param>
		/// <param name="EmployeeCodes">A comma separated list of the employee codes. E.g. EMP001,EMP002</param>
		/// <param name="TransformDefinitionKey">The transform definition unique key. E.g. P45-Pdf</param>
		/// <param name="StartIndex">The element index to begin the report. Used to control paging within large data sets. E.g. 1</param>
		/// <param name="MaxIndex">The highest element index to return from the report. Used to control paging within large data sets. E.g. 100</param>
		/// <returns>The result of the P60 report execution</returns>
		public async Task<string> GetP60ReportOutputAsync(string EmployerKey, string TaxYear, string EmployeeCodes, string TransformDefinitionKey, string StartIndex, string MaxIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/P60/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&TaxYear=" + (TaxYear==null? "" : System.Uri.EscapeDataString(TaxYear))+"&EmployeeCodes=" + (EmployeeCodes==null? "" : System.Uri.EscapeDataString(EmployeeCodes))+"&TransformDefinitionKey=" + (TransformDefinitionKey==null? "" : System.Uri.EscapeDataString(TransformDefinitionKey))+"&StartIndex=" + (StartIndex==null? "" : System.Uri.EscapeDataString(StartIndex))+"&MaxIndex=" + (MaxIndex==null? "" : System.Uri.EscapeDataString(MaxIndex));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the PAPDIS report
		/// Returns the result of the executed PAPDIS report. PAPDIS is a free and open data interface standard designed to allow payroll and middleware software developers to create a file that can be used by pension providers to exchange data. http://www.papdis.org/
		/// GetPapdisReportOuput Report/PAPDIS/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="PayScheduleKey">The pay schedule unique key. E.g. SCH001</param>
		/// <param name="TaxYear">The tax year. E.g. 2017 = 2017/18 year.</param>
		/// <param name="PaymentDate">The payment date context for the report. E.g. 2018-04-30</param>
		/// <param name="PensionKey">The pension scheme unique key. E.g. PENSCH001</param>
		/// <param name="MessageFunctionCode">Specific to PAPDIS report, specifies the business function that the sender is requesting. If left BLANK it will be assumed to be 0 (Enrol / Receive Contributions).</param>
		/// <param name="TransformDefinitionKey">The transform definition unique key. E.g. P45-Pdf</param>
		/// <returns>The result of the PAPDIS report execution</returns>
		public async Task<string> GetPapdisReportOuputAsync(string EmployerKey, string PayScheduleKey, string TaxYear, System.DateOnly PaymentDate, string PensionKey, string MessageFunctionCode, string TransformDefinitionKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/PAPDIS/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&PayScheduleKey=" + (PayScheduleKey==null? "" : System.Uri.EscapeDataString(PayScheduleKey))+"&TaxYear=" + (TaxYear==null? "" : System.Uri.EscapeDataString(TaxYear))+"&PaymentDate="+PaymentDate+"&PensionKey=" + (PensionKey==null? "" : System.Uri.EscapeDataString(PensionKey))+"&MessageFunctionCode=" + (MessageFunctionCode==null? "" : System.Uri.EscapeDataString(MessageFunctionCode))+"&TransformDefinitionKey=" + (TransformDefinitionKey==null? "" : System.Uri.EscapeDataString(TransformDefinitionKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the PASS report
		/// Returns the result of the executed PASS report. PASS stands for Payroll and Systemsync. PASS 1.1 is an extension of the PAPDIS V1.1 schema. https://pensionsynckb.systemsyncsolutions.com/display/PKB/PASS+1.1
		/// GetPassReportOuput Report/PASS/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="PayScheduleKey">The pay schedule unique key. E.g. SCH001</param>
		/// <param name="TaxYear">The tax year. E.g. 2017 = 2017/18 year.</param>
		/// <param name="PaymentDate">The payment date context for the report. E.g. 2018-04-30</param>
		/// <param name="PensionKey">The pension scheme unique key. E.g. PENSCH001</param>
		/// <param name="MessageFunctionCode">Specific to PAPDIS report, specifies the business function that the sender is requesting. If left BLANK it will be assumed to be 0 (Enrol / Receive Contributions).</param>
		/// <param name="IntermediaryId">Specific to PensionSync PASS report, a unique identifier for the Intermediary who is acting on behalf of the employer.</param>
		/// <param name="DocumentId">Specific to PensionSync PASS report, a document identifier unique for this document within the Intermediary.</param>
		/// <returns>The result of the PASS report execution</returns>
		public async Task<string> GetPassReportOuputAsync(string EmployerKey, string PayScheduleKey, string TaxYear, System.DateOnly PaymentDate, string PensionKey, string MessageFunctionCode, string IntermediaryId, string DocumentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/PASS/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&PayScheduleKey=" + (PayScheduleKey==null? "" : System.Uri.EscapeDataString(PayScheduleKey))+"&TaxYear=" + (TaxYear==null? "" : System.Uri.EscapeDataString(TaxYear))+"&PaymentDate="+PaymentDate+"&PensionKey=" + (PensionKey==null? "" : System.Uri.EscapeDataString(PensionKey))+"&MessageFunctionCode=" + (MessageFunctionCode==null? "" : System.Uri.EscapeDataString(MessageFunctionCode))+"&IntermediaryId=" + (IntermediaryId==null? "" : System.Uri.EscapeDataString(IntermediaryId))+"&DocumentId=" + (DocumentId==null? "" : System.Uri.EscapeDataString(DocumentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the Pay Dashboard payslips report
		/// Returns the result of the executed Pay Dashboard payslip report for the given query parameters. See https://api.paydashboard.com for details. For compatability should be returned as JSON with TransformDefinitionKey=Json-Clean.
		/// GetPayDashboardPayslipReportOuput Report/PAYDASHBOARD/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="PayScheduleKey">The pay schedule unique key. E.g. SCH001</param>
		/// <param name="TaxYear">The tax year. E.g. 2017 = 2017/18 year.</param>
		/// <param name="EmployeeCodes">A comma separated list of the employee codes. E.g. EMP001,EMP002</param>
		/// <param name="TransformDefinitionKey">The transform definition unique key. E.g. P45-Pdf</param>
		/// <param name="StartIndex">The element index to begin the report. Used to control paging within large data sets. E.g. 1</param>
		/// <param name="MaxIndex">The highest element index to return from the report. Used to control paging within large data sets. E.g. 100</param>
		/// <param name="PaymentDate">The payment date context for the report. E.g. 2018-04-30</param>
		/// <param name="PublicationDate">Specific to the Pay Dashboard report, allows the specification of a future payslip publication date. E.g. 2018-12-31</param>
		/// <returns>The result of the Pay Dashboard payslip report execution</returns>
		public async Task<string> GetPayDashboardPayslipReportOuputAsync(string EmployerKey, string PayScheduleKey, string TaxYear, string EmployeeCodes, string TransformDefinitionKey, string StartIndex, string MaxIndex, System.DateOnly PaymentDate, System.DateOnly PublicationDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/PAYDASHBOARD/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&PayScheduleKey=" + (PayScheduleKey==null? "" : System.Uri.EscapeDataString(PayScheduleKey))+"&TaxYear=" + (TaxYear==null? "" : System.Uri.EscapeDataString(TaxYear))+"&EmployeeCodes=" + (EmployeeCodes==null? "" : System.Uri.EscapeDataString(EmployeeCodes))+"&TransformDefinitionKey=" + (TransformDefinitionKey==null? "" : System.Uri.EscapeDataString(TransformDefinitionKey))+"&StartIndex=" + (StartIndex==null? "" : System.Uri.EscapeDataString(StartIndex))+"&MaxIndex=" + (MaxIndex==null? "" : System.Uri.EscapeDataString(MaxIndex))+"&PaymentDate="+PaymentDate+"&PublicationDate="+PublicationDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the verbose payslip report
		/// Returns the result of the executed verbose payslip report for the given query parameters
		/// GetPayslip3ReportOutput Report/PAYSLIP3/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="PayScheduleKey">The pay schedule unique key. E.g. SCH001</param>
		/// <param name="TaxYear">The tax year. E.g. 2017 = 2017/18 year.</param>
		/// <param name="EmployeeCodes">A comma separated list of the employee codes. E.g. EMP001,EMP002</param>
		/// <param name="TransformDefinitionKey">The transform definition unique key. E.g. P45-Pdf</param>
		/// <param name="StartIndex">The element index to begin the report. Used to control paging within large data sets. E.g. 1</param>
		/// <param name="MaxIndex">The highest element index to return from the report. Used to control paging within large data sets. E.g. 100</param>
		/// <param name="PaymentDate">The payment date context for the report. E.g. 2018-04-30</param>
		/// <returns>The result of the verbose payslip report execution</returns>
		public async Task<string> GetPayslip3ReportOutputAsync(string EmployerKey, string PayScheduleKey, string TaxYear, string EmployeeCodes, string TransformDefinitionKey, string StartIndex, string MaxIndex, System.DateOnly PaymentDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/PAYSLIP3/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&PayScheduleKey=" + (PayScheduleKey==null? "" : System.Uri.EscapeDataString(PayScheduleKey))+"&TaxYear=" + (TaxYear==null? "" : System.Uri.EscapeDataString(TaxYear))+"&EmployeeCodes=" + (EmployeeCodes==null? "" : System.Uri.EscapeDataString(EmployeeCodes))+"&TransformDefinitionKey=" + (TransformDefinitionKey==null? "" : System.Uri.EscapeDataString(TransformDefinitionKey))+"&StartIndex=" + (StartIndex==null? "" : System.Uri.EscapeDataString(StartIndex))+"&MaxIndex=" + (MaxIndex==null? "" : System.Uri.EscapeDataString(MaxIndex))+"&PaymentDate="+PaymentDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the pension liability report
		/// Returns the result of the executed pension liability report for the given query parameters
		/// GetPensionLiabilityReportOutput Report/PENLIABILITY/run
		/// </summary>
		/// <param name="EmployerKey">The employer unique key. E.g. ER001</param>
		/// <param name="TaxYear">The tax year. E.g. 2017 = 2017/18 year.</param>
		/// <param name="PensionKey">The pension scheme unique key. E.g. PENSCH001</param>
		/// <returns>The result of the pension liability report execution</returns>
		public async Task<string> GetPensionLiabilityReportOutputAsync(string EmployerKey, string TaxYear, string PensionKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/PENLIABILITY/run?EmployerKey=" + (EmployerKey==null? "" : System.Uri.EscapeDataString(EmployerKey))+"&TaxYear=" + (TaxYear==null? "" : System.Uri.EscapeDataString(TaxYear))+"&PensionKey=" + (PensionKey==null? "" : System.Uri.EscapeDataString(PensionKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a report definition
		/// Delete the specified report definition
		/// DeleteReportDefinition Report/{ReportDefinitionId}
		/// </summary>
		/// <param name="ReportDefinitionId">The report definition unique identifier.</param>
		public async Task DeleteReportDefinitionAsync(string ReportDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/"+ (ReportDefinitionId==null? "" : System.Uri.EscapeDataString(ReportDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the report definition
		/// Returns the specified report definition from the authroised application
		/// GetReportDefinitionFromApplication Report/{ReportDefinitionId}
		/// </summary>
		/// <param name="ReportDefinitionId">The report definition unique identifier.</param>
		/// <returns>The report definition object.</returns>
		public async Task<ReportDefinition> GetReportDefinitionFromApplicationAsync(string ReportDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/"+ (ReportDefinitionId==null? "" : System.Uri.EscapeDataString(ReportDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReportDefinition>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a report definition
		/// Updates the existing specified report definition object
		/// PutReportDefinition Report/{ReportDefinitionId}
		/// </summary>
		/// <param name="ReportDefinitionId">The report definition unique identifier.</param>
		/// <param name="requestBody">The report definition object.</param>
		/// <returns>The report definition object.</returns>
		public async Task<ReportDefinition> PutReportDefinitionAsync(string ReportDefinitionId, ReportDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/"+ (ReportDefinitionId==null? "" : System.Uri.EscapeDataString(ReportDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReportDefinition>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs the specified report definition
		/// Returns the result of the executed report definition
		/// GetReportOutput Report/{ReportDefinitionId}/run
		/// </summary>
		/// <param name="ReportDefinitionId">The report definition unique identifier.</param>
		/// <returns>The result of the report execution</returns>
		public async Task<string> GetReportOutputAsync(string ReportDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Report/"+ (ReportDefinitionId==null? "" : System.Uri.EscapeDataString(ReportDefinitionId))+"/run";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all reports
		/// Get links to all saved report definitions under authorised application
		/// GetReportDefinitionsFromApplication Reports
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetReportDefinitionsFromApplicationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new report definition
		/// Creates a new report defintion object
		/// PostReportDefinition Reports
		/// </summary>
		/// <param name="requestBody">The report definition object.</param>
		public async Task PostReportDefinitionAsync(ReportDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Reports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of all available schemas
		/// Returns a collection of links to all the available data object schemas
		/// GetSchemas Schemas
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetSchemasAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Schemas";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get XSD schema
		/// Returns the XSD schema for the specified data type
		/// GetSchema Schemas/{DtoDataType}
		/// </summary>
		/// <param name="DtoDataType">The data transfer object type name. E.g PensionPayInstruction</param>
		/// <returns>The data type XSD schema</returns>
		public async Task<string> GetSchemaAsync(string DtoDataType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Schemas/"+ (DtoDataType==null? "" : System.Uri.EscapeDataString(DtoDataType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes Application secret
		/// Deletes an Application secret from the given resource location
		/// DeleteApplicationSecret Secret/{SecretId}
		/// </summary>
		/// <param name="SecretId">The secret unique identifier. E.g ERSEC001</param>
		public async Task DeleteApplicationSecretAsync(string SecretId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Secret/"+ (SecretId==null? "" : System.Uri.EscapeDataString(SecretId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Application secret
		/// Get the public visible Application secret object
		/// GetApplicationSecret Secret/{SecretId}
		/// </summary>
		/// <param name="SecretId">The secret unique identifier. E.g ERSEC001</param>
		/// <returns>The application secret object.</returns>
		public async Task<ApplicationSecret> GetApplicationSecretAsync(string SecretId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Secret/"+ (SecretId==null? "" : System.Uri.EscapeDataString(SecretId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ApplicationSecret>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Application secret
		/// Create / update an Application secret at the given resource location
		/// PutApplicationSecret Secret/{SecretId}
		/// </summary>
		/// <param name="SecretId">The secret unique identifier. E.g ERSEC001</param>
		public async Task PutApplicationSecretAsync(string SecretId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Secret/"+ (SecretId==null? "" : System.Uri.EscapeDataString(SecretId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Application secret links
		/// Get all the Application secret links
		/// GetApplicationSecrets Secrets
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetApplicationSecretsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Secrets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new Application secret
		/// Create new Application secret using auto generated resource location key
		/// PostApplicationSecret Secrets
		/// </summary>
		public async Task PostApplicationSecretAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Secrets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the object template
		/// Returns a template instance of the specified data type
		/// GetTemplateModel Template/{DtoDataType}
		/// </summary>
		/// <param name="DtoDataType">The data transfer object type name. E.g PensionPayInstruction</param>
		/// <returns>The data type template</returns>
		public async Task<string> GetTemplateModelAsync(string DtoDataType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Template/"+ (DtoDataType==null? "" : System.Uri.EscapeDataString(DtoDataType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of all available data object tempaltes
		/// Returns a collection of links to all the available data object templates
		/// GetTemplates Templates
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTemplatesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a transform definition
		/// Delete the specified transform definition
		/// DeleteTransformDefinition Transform/{TransformDefinitionId}
		/// </summary>
		/// <param name="TransformDefinitionId">The transform definition unique identifier.</param>
		public async Task DeleteTransformDefinitionAsync(string TransformDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Transform/"+ (TransformDefinitionId==null? "" : System.Uri.EscapeDataString(TransformDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the transform definition
		/// Returns the specified transform definition from the authroised application
		/// GetTransformDefinitionFromApplication Transform/{TransformDefinitionId}
		/// </summary>
		/// <param name="TransformDefinitionId">The transform definition unique identifier.</param>
		/// <returns>The transform definition object.</returns>
		public async Task<TransformDefinition> GetTransformDefinitionFromApplicationAsync(string TransformDefinitionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Transform/"+ (TransformDefinitionId==null? "" : System.Uri.EscapeDataString(TransformDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TransformDefinition>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a transform definition
		/// Updates the existing specified transform definition object
		/// PutTransformDefinition Transform/{TransformDefinitionId}
		/// </summary>
		/// <param name="TransformDefinitionId">The transform definition unique identifier.</param>
		/// <param name="requestBody">The transform definition object to be executed against the report data.</param>
		/// <returns>The transform definition object.</returns>
		public async Task<TransformDefinition> PutTransformDefinitionAsync(string TransformDefinitionId, TransformDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Transform/"+ (TransformDefinitionId==null? "" : System.Uri.EscapeDataString(TransformDefinitionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TransformDefinition>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all transform definitions
		/// Get links to all saved transform definitions under authorised application
		/// GetTransformDefinitionsFromApplication Transforms
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTransformDefinitionsFromApplicationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Transforms";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new transform definition
		/// Creates a new transform defintion object
		/// PostTransformDefinition Transforms
		/// </summary>
		/// <param name="requestBody">The transform definition object to be executed against the report data.</param>
		public async Task PostTransformDefinitionAsync(TransformDefinition requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Transforms";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the user object
		/// Deletes the user object from the application
		/// DeleteUser User/{UserId}
		/// </summary>
		/// <param name="UserId">The user unique identifier. E.g USER001</param>
		/// <returns>No Content</returns>
		public async Task DeleteUserAsync(string UserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/"+ (UserId==null? "" : System.Uri.EscapeDataString(UserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the user object
		/// Gets the user object for application
		/// GetUser User/{UserId}
		/// </summary>
		/// <param name="UserId">The user unique identifier. E.g USER001</param>
		/// <returns>The user object.</returns>
		public async Task<User> GetUserAsync(string UserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/"+ (UserId==null? "" : System.Uri.EscapeDataString(UserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Patch user object
		/// Patch the user object at the specified resource location
		/// PatchUser User/{UserId}
		/// </summary>
		/// <param name="UserId">The user unique identifier. E.g USER001</param>
		/// <returns>The user object.</returns>
		public async Task<User> PatchUserAsync(string UserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/"+ (UserId==null? "" : System.Uri.EscapeDataString(UserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Puts user object
		/// Puts the user object into the specified resource location
		/// PutUser User/{UserId}
		/// </summary>
		/// <param name="UserId">The user unique identifier. E.g USER001</param>
		/// <returns>The user object.</returns>
		public async Task<User> PutUserAsync(string UserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/"+ (UserId==null? "" : System.Uri.EscapeDataString(UserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the user permissions
		/// Gets the user permission instances
		/// GetUserPermissions User/{UserId}/Permissions
		/// </summary>
		/// <param name="UserId">The user unique identifier. E.g USER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetUserPermissionsAsync(string UserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/"+ (UserId==null? "" : System.Uri.EscapeDataString(UserId))+"/Permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete user tag
		/// Deletes a tag from the user
		/// DeleteUserTag User/{UserId}/Tag/{TagId}
		/// </summary>
		/// <param name="UserId">The user unique identifier. E.g USER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>No Content</returns>
		public async Task DeleteUserTagAsync(string UserId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/"+ (UserId==null? "" : System.Uri.EscapeDataString(UserId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user tag
		/// Gets a tag from the user
		/// GetTagFromUser User/{UserId}/Tag/{TagId}
		/// </summary>
		/// <param name="UserId">The user unique identifier. E.g USER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> GetTagFromUserAsync(string UserId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/"+ (UserId==null? "" : System.Uri.EscapeDataString(UserId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert user tag
		/// Inserts a tag on the user
		/// PutUserTag User/{UserId}/Tag/{TagId}
		/// </summary>
		/// <param name="UserId">The user unique identifier. E.g USER001</param>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The tag object.</returns>
		public async Task<Tag> PutUserTagAsync(string UserId, string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/"+ (UserId==null? "" : System.Uri.EscapeDataString(UserId))+"/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get tags from user
		/// Gets all tags from the user
		/// GetTagsFromUser User/{UserId}/Tags
		/// </summary>
		/// <param name="UserId">The user unique identifier. E.g USER001</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetTagsFromUserAsync(string UserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/"+ (UserId==null? "" : System.Uri.EscapeDataString(UserId))+"/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all user objects
		/// Gets all user objects for application
		/// GetUsers Users
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetUsersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post user object
		/// Post the new user object into the application
		/// PostUser Users
		/// </summary>
		/// <returns>The link object.</returns>
		public async Task<Link> PostUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Link>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get links to tagged users
		/// Gets the users with the specified tag
		/// GetAllUsersWithTag Users/Tag/{TagId}
		/// </summary>
		/// <param name="TagId">The tag unique identifier. E.g. MyTag</param>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllUsersWithTagAsync(string TagId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Users/Tag/"+ (TagId==null? "" : System.Uri.EscapeDataString(TagId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all user tags
		/// Get all tags from all users
		/// GetAllUserTags Users/Tags
		/// </summary>
		/// <returns>The link collection object.</returns>
		public async Task<LinkCollection> GetAllUserTagsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Users/Tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LinkCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
