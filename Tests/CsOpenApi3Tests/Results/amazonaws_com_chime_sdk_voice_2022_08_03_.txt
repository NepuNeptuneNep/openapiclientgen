//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociatePhoneNumbersWithVoiceConnectorResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberError[] PhoneNumberErrors { get; set; }
	}
	
	/// <summary>
	/// If a phone number action fails for one or more of the phone numbers in a request, a list of the failed phone numbers is returned, along with error codes and error messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneNumberError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ErrorCode ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BadRequest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Conflict = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Forbidden = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotFound = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreconditionFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourceLimitExceeded = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceFailure = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessDenied = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServiceUnavailable = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Throttled = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Throttling = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unauthorized = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unprocessable = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnectorGroupAssociationsExist = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PhoneNumberAssociationsExist = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gone = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnauthorizedClientException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForbiddenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottledClientException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociatePhoneNumbersWithVoiceConnectorGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberError[] PhoneNumberErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeletePhoneNumberResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberError[] PhoneNumberErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchUpdatePhoneNumberResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberError[] PhoneNumberErrors { get; set; }
	}
	
	/// <summary>
	/// The phone number ID, product type, or calling name fields to update, used with the <a>BatchUpdatePhoneNumber</a> and <a>UpdatePhoneNumber</a> actions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePhoneNumberRequestItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberProductType ProductType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CallingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PhoneNumberProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnector = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SipMediaApplicationDialIn = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePhoneNumberOrderResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberOrder PhoneNumberOrder { get; set; }
	}
	
	/// <summary>
	/// The details of an Amazon Chime SDK phone number order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneNumberOrder
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberOrderId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberProductType ProductType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberOrderStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberOrderType OrderType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderedPhoneNumber[] OrderedPhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PhoneNumberOrderStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Successful = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Partial = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PendingDocuments = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Submitted = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FOC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChangeRequested = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Exception = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelRequested = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PhoneNumberOrderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		New = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Porting = 1,
	}
	
	/// <summary>
	/// A phone number for which an order has been placed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderedPhoneNumber
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string E164PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderedPhoneNumberStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrderedPhoneNumberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Processing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Acquired = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProxySessionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProxySession ProxySession { get; set; }
	}
	
	/// <summary>
	/// The proxy session for an Amazon Chime SDK Voice Connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProxySession
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceConnectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProxySessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProxySessionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpiryMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Capability[] Capabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Participant[] Participants { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NumberSelectionBehavior NumberSelectionBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GeoMatchLevel GeoMatchLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GeoMatchParams GeoMatchParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProxySessionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Closed = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Capability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Voice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 1,
	}
	
	/// <summary>
	/// The phone number and proxy phone number for a participant in an Amazon Chime SDK Voice Connector proxy session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Participant
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProxyPhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NumberSelectionBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PreferSticky = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AvoidSticky = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GeoMatchLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Country = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AreaCode = 1,
	}
	
	/// <summary>
	/// The country and area code for a proxy phone number in a proxy phone session.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeoMatchParams
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AreaCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSipMediaApplicationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplication SipMediaApplication { get; set; }
	}
	
	/// <summary>
	/// The details of the SIP media application, including name and endpoints. An AWS account can have multiple SIP media applications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SipMediaApplication
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SipMediaApplicationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplicationEndpoint[] Endpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SipMediaApplicationArn { get; set; }
	}
	
	/// <summary>
	/// The endpoint assigned to a SIP media application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SipMediaApplicationEndpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LambdaArn { get; set; }
	}
	
	/// <summary>
	/// Describes a tag applied to a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSipMediaApplicationCallResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplicationCall SipMediaApplicationCall { get; set; }
	}
	
	/// <summary>
	/// A <code>Call</code> instance for a SIP media application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SipMediaApplicationCall
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSipRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipRule SipRule { get; set; }
	}
	
	/// <summary>
	/// The details of a SIP rule, including name, triggers, and target applications. An AWS account can have multiple SIP rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SipRule
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SipRuleId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SipRuleTriggerType TriggerType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TriggerValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SipRuleTargetApplication[] TargetApplications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SipRuleTriggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ToPhoneNumber = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestUriHostname = 1,
	}
	
	/// <summary>
	/// A target SIP media application and other details, such as priority and AWS Region, to be specified in the SIP rule. Only one SIP rule per AWS Region can be provided.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SipRuleTargetApplication
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SipMediaApplicationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVoiceConnectorResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnector VoiceConnector { get; set; }
	}
	
	/// <summary>
	/// The Amazon Chime SDK Voice Connector configuration, including outbound host name and encryption settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoiceConnector
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceConnectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorAwsRegion AwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutboundHostName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceConnectorArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VoiceConnectorAwsRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-east-1")]
		usMinuseastMinus1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-west-2")]
		usMinuswestMinus2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca-central-1")]
		caMinuscentralMinus1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-central-1")]
		euMinuscentralMinus1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-west-1")]
		euMinuswestMinus1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-west-2")]
		euMinuswestMinus2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-northeast-2")]
		apMinusnortheastMinus2 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-northeast-1")]
		apMinusnortheastMinus1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-southeast-1")]
		apMinussoutheastMinus1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-southeast-2")]
		apMinussoutheastMinus2 = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVoiceConnectorGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorGroup VoiceConnectorGroup { get; set; }
	}
	
	/// <summary>
	/// The Amazon Chime SDK Voice Connector group configuration, including associated Voice Connectors. You can include Voice Connectors from different AWS Regions in a group. This creates a fault tolerant mechanism for fallback in case of availability events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoiceConnectorGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceConnectorGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorItem[] VoiceConnectorItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceConnectorGroupArn { get; set; }
	}
	
	/// <summary>
	/// For Amazon Chime SDK Voice Connector groups, the Amazon Chime SDK Voice Connectors to which you route inbound calls. Includes priority configuration settings. Limit: 3 VoiceConnectorItems per Voice Connector group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoiceConnectorItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VoiceConnectorId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVoiceProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceProfile VoiceProfile { get; set; }
	}
	
	/// <summary>
	/// The combination of a voice print and caller ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoiceProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceProfileDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpirationTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoneException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVoiceProfileDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceProfileDomain VoiceProfileDomain { get; set; }
	}
	
	/// <summary>
	/// A collection of voice profiles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoiceProfileDomain
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceProfileDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceProfileDomainArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServerSideEncryptionConfiguration ServerSideEncryptionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
	}
	
	/// <summary>
	/// <p>A structure that contains the configuration settings for server-side encryption.</p> <note> <p>We only support symmetric keys. Do not use asymmetric or HMAC keys, or KMS aliases.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerSideEncryptionConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociatePhoneNumbersFromVoiceConnectorResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberError[] PhoneNumberErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociatePhoneNumbersFromVoiceConnectorGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberError[] PhoneNumberErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetGlobalSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorSettings VoiceConnector { get; set; }
	}
	
	/// <summary>
	/// The Amazon Chime SDK Voice Connector settings. Includes any Amazon S3 buckets designated for storing call detail records.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoiceConnectorSettings
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CdrBucket { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPhoneNumberResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumber PhoneNumber { get; set; }
	}
	
	/// <summary>
	/// A phone number used to call an Amazon Chime SDK Voice Connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneNumber
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PhoneNumberId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string E164PhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberProductType ProductType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberCapabilities Capabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberAssociation[] Associations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CallingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CallingNameStatus CallingNameStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DeletionTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OrderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PhoneNumberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Local = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TollFree = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PhoneNumberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PortinCancelRequested = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PortinInProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AcquireInProgress = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AcquireFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unassigned = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Assigned = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseInProgress = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteInProgress = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReleaseFailed = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteFailed = 10,
	}
	
	/// <summary>
	/// The phone number capabilities for Amazon Chime SDK phone numbers, such as enabled inbound and outbound calling, and text messaging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneNumberCapabilities
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InboundCall { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OutboundCall { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InboundSMS { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OutboundSMS { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InboundMMS { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OutboundMMS { get; set; }
	}
	
	/// <summary>
	/// The phone number associations, such as an Amazon Chime SDK account ID, user ID, Voice Connector ID, or Voice Connector group ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneNumberAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberAssociationName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset AssociatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PhoneNumberAssociationName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnectorId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VoiceConnectorGroupId = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SipRuleId = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CallingNameStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unassigned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateInProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateSucceeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateFailed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPhoneNumberOrderResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberOrder PhoneNumberOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPhoneNumberSettingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CallingName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CallingNameUpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetProxySessionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProxySession ProxySession { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSipMediaApplicationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplication SipMediaApplication { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSipMediaApplicationAlexaSkillConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplicationAlexaSkillConfiguration SipMediaApplicationAlexaSkillConfiguration { get; set; }
	}
	
	/// <summary>
	/// The Alexa Skill configuration of a SIP media application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SipMediaApplicationAlexaSkillConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AlexaSkillStatus AlexaSkillStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AlexaSkillIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AlexaSkillStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSipMediaApplicationLoggingConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplicationLoggingConfiguration SipMediaApplicationLoggingConfiguration { get; set; }
	}
	
	/// <summary>
	/// The logging configuration of a SIP media application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SipMediaApplicationLoggingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSipMediaApplicationMessageLogs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSipRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipRule SipRule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSpeakerSearchTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SpeakerSearchTask SpeakerSearchTask { get; set; }
	}
	
	/// <summary>
	/// A representation of an asynchronous request to perform speaker search analysis on a Voice Connector call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpeakerSearchTask
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SpeakerSearchTaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpeakerSearchTaskStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CallDetails CallDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SpeakerSearchDetails SpeakerSearchDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	/// <summary>
	/// The details of an Amazon Chime SDK Voice Connector call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceConnectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransactionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsCaller { get; set; }
	}
	
	/// <summary>
	/// The details of a speaker search task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpeakerSearchDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SpeakerSearchResult[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceprintGenerationStatus { get; set; }
	}
	
	/// <summary>
	/// The result of a speaker search analysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SpeakerSearchResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float ConfidenceScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceProfileId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnector VoiceConnector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorEmergencyCallingConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EmergencyCallingConfiguration EmergencyCallingConfiguration { get; set; }
	}
	
	/// <summary>
	/// The emergency calling configuration details associated with an Amazon Chime SDK Voice Connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EmergencyCallingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DNISEmergencyCallingConfiguration[] DNIS { get; set; }
	}
	
	/// <summary>
	/// The Dialed Number Identification Service (DNIS) emergency calling configuration details associated with an Amazon Chime SDK Voice Connector's emergency calling configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DNISEmergencyCallingConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EmergencyPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TestPhoneNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallingCountry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorGroup VoiceConnectorGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorLoggingConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoggingConfiguration LoggingConfiguration { get; set; }
	}
	
	/// <summary>
	/// The logging configuration associated with an Amazon Chime SDK Voice Connector. Specifies whether SIP message logs can be sent to Amazon CloudWatch Logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoggingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSIPLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableMediaMetricLogs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorOriginationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Origination Origination { get; set; }
	}
	
	/// <summary>
	/// <p>Origination settings enable your SIP hosts to receive inbound calls using your Amazon Chime SDK Voice Connector.</p> <note> <p>The parameters listed below are not required, but you must use at least one.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Origination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OriginationRoute[] Routes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	/// <summary>
	/// <p>Origination routes define call distribution properties for your SIP hosts to receive inbound calls using an Amazon Chime SDK Voice Connector. Limit: Ten origination routes for each Voice Connector.</p> <note> <p>The parameters listed below are not required, but you must use at least one.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OriginationRoute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Host { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OriginationRouteProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OriginationRouteProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorProxyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Proxy Proxy { get; set; }
	}
	
	/// <summary>
	/// The proxy configuration for an Amazon Chime SDK Voice Connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Proxy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultSessionExpiryMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FallBackPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PhoneNumberCountries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorStreamingConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StreamingConfiguration StreamingConfiguration { get; set; }
	}
	
	/// <summary>
	/// The streaming configuration associated with an Amazon Chime SDK Voice Connector. Specifies whether media streaming is enabled for sending to Amazon Kinesis, and shows the retention period for the Amazon Kinesis data, in hours.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StreamingConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DataRetentionInHours { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamingNotificationTarget[] StreamingNotificationTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsConfiguration MediaInsightsConfiguration { get; set; }
	}
	
	/// <summary>
	/// The target recipient for a streaming configuration notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StreamingNotificationTarget
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationTarget NotificationTarget { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NotificationTarget
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EventBridge = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SNS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQS = 2,
	}
	
	/// <summary>
	/// The configuration for a call analytics task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MediaInsightsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConfigurationArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorTerminationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Termination Termination { get; set; }
	}
	
	/// <summary>
	/// Termination settings enable SIP hosts to make outbound calls using an Amazon Chime SDK Voice Connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Termination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CpsLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CallingRegions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CidrAllowedList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorTerminationHealthResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TerminationHealth TerminationHealth { get; set; }
	}
	
	/// <summary>
	/// The termination health details, including the source IP address and timestamp of the last successful <code>SIP OPTIONS</code> message from your SIP infrastructure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminationHealth
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceProfile VoiceProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceProfileDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceProfileDomain VoiceProfileDomain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceToneAnalysisTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceToneAnalysisTask VoiceToneAnalysisTask { get; set; }
	}
	
	/// <summary>
	/// A representation of an asynchronous request to perform voice tone analysis on a Voice Connector call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoiceToneAnalysisTask
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceToneAnalysisTaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceToneAnalysisTaskStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CallDetails CallDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAvailableVoiceConnectorRegionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorAwsRegion[] VoiceConnectorRegions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPhoneNumberOrdersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberOrder[] PhoneNumberOrders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPhoneNumbersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumber[] PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProxySessionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProxySession[] ProxySessions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSipMediaApplicationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplication[] SipMediaApplications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSipRulesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipRule[] SipRules { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSupportedPhoneNumberCountriesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberCountry[] PhoneNumberCountries { get; set; }
	}
	
	/// <summary>
	/// The phone number's country.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneNumberCountry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberType[] SupportedPhoneNumberTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVoiceConnectorGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorGroup[] VoiceConnectorGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVoiceConnectorTerminationCredentialsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Usernames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVoiceConnectorsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnector[] VoiceConnectors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVoiceProfileDomainsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceProfileDomainSummary[] VoiceProfileDomains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A high-level overview of a voice profile domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoiceProfileDomainSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceProfileDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceProfileDomainArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVoiceProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceProfileSummary[] VoiceProfiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A high-level summary of a voice profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoiceProfileSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceProfileId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VoiceProfileDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ExpirationTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutSipMediaApplicationAlexaSkillConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplicationAlexaSkillConfiguration SipMediaApplicationAlexaSkillConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutSipMediaApplicationLoggingConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplicationLoggingConfiguration SipMediaApplicationLoggingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVoiceConnectorEmergencyCallingConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EmergencyCallingConfiguration EmergencyCallingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVoiceConnectorLoggingConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LoggingConfiguration LoggingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVoiceConnectorOriginationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Origination Origination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVoiceConnectorProxyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Proxy Proxy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVoiceConnectorStreamingConfigurationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StreamingConfiguration StreamingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVoiceConnectorTerminationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Termination Termination { get; set; }
	}
	
	/// <summary>
	/// The SIP credentials used to authenticate requests to an Amazon Chime SDK Voice Connector.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Credential
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestorePhoneNumberResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumber PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchAvailablePhoneNumbersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] E164PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartSpeakerSearchTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SpeakerSearchTask SpeakerSearchTask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnprocessableEntityException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartVoiceToneAnalysisTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceToneAnalysisTask VoiceToneAnalysisTask { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePhoneNumberResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumber PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProxySessionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProxySession ProxySession { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSipMediaApplicationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplication SipMediaApplication { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSipMediaApplicationCallResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplicationCall SipMediaApplicationCall { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSipRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipRule SipRule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVoiceConnectorResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnector VoiceConnector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVoiceConnectorGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorGroup VoiceConnectorGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVoiceProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceProfile VoiceProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVoiceProfileDomainResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceProfileDomain VoiceProfileDomain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidateE911AddressResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ValidationResult { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressExternalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CandidateAddress[] CandidateAddressList { get; set; }
	}
	
	/// <summary>
	/// A validated address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Address
	{
		
		[System.Runtime.Serialization.DataMember(Name="streetName")]
		public string StreetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streetSuffix")]
		public string StreetSuffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postDirectional")]
		public string PostDirectional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preDirectional")]
		public string PreDirectional { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streetNumber")]
		public string StreetNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCodePlus4")]
		public string PostalCodePlus4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
	}
	
	/// <summary>
	/// A suggested address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CandidateAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="streetInfo")]
		public string StreetInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="streetNumber")]
		public string StreetNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCodePlus4")]
		public string PostalCodePlus4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociatePhoneNumbersWithVoiceConnectorGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] E164PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceAssociate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociatePhoneNumbersWithVoiceConnectorRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] E164PhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceAssociate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDeletePhoneNumberRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] PhoneNumberIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchUpdatePhoneNumberRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdatePhoneNumberRequestItem[] UpdatePhoneNumberRequestItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CallLegType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Caller = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Callee = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePhoneNumberOrderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberProductType ProductType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] E164PhoneNumbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProxySessionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ParticipantPhoneNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpiryMinutes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Capability[] Capabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NumberSelectionBehavior NumberSelectionBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GeoMatchLevel GeoMatchLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GeoMatchParams GeoMatchParams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SipHeadersMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SMACreateCallArgumentsMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSipMediaApplicationCallRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FromPhoneNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ToPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SipHeadersMap SipHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SMACreateCallArgumentsMap ArgumentsMap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSipMediaApplicationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplicationEndpoint[] Endpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSipRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SipRuleTriggerType TriggerType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TriggerValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SipRuleTargetApplication[] TargetApplications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVoiceConnectorGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorItem[] VoiceConnectorItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVoiceConnectorRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorAwsRegion AwsRegion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool RequireEncryption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVoiceProfileDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServerSideEncryptionConfiguration ServerSideEncryptionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVoiceProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SpeakerSearchTaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePhoneNumberRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProxySessionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSipMediaApplicationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSipRuleRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVoiceConnectorEmergencyCallingConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVoiceConnectorGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVoiceConnectorOriginationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVoiceConnectorProxyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVoiceConnectorRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVoiceConnectorStreamingConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVoiceConnectorTerminationCredentialsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Usernames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVoiceConnectorTerminationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVoiceProfileDomainRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVoiceProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociatePhoneNumbersFromVoiceConnectorGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] E164PhoneNumbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociatePhoneNumbersFromVoiceConnectorRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] E164PhoneNumbers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPhoneNumberOrderRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPhoneNumberRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetProxySessionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSipMediaApplicationAlexaSkillConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSipMediaApplicationLoggingConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSipMediaApplicationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSipRuleRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSpeakerSearchTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorEmergencyCallingConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorGroupRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorLoggingConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorOriginationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorProxyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorStreamingConfigurationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorTerminationHealthRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceConnectorTerminationRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceProfileDomainRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVoiceToneAnalysisTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPhoneNumberOrdersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPhoneNumbersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProxySessionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSipMediaApplicationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSipRulesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSupportedPhoneNumberCountriesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVoiceConnectorGroupsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVoiceConnectorTerminationCredentialsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVoiceConnectorsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVoiceProfileDomainsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVoiceProfilesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutSipMediaApplicationAlexaSkillConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplicationAlexaSkillConfiguration SipMediaApplicationAlexaSkillConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutSipMediaApplicationLoggingConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplicationLoggingConfiguration SipMediaApplicationLoggingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVoiceConnectorEmergencyCallingConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EmergencyCallingConfiguration EmergencyCallingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVoiceConnectorLoggingConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoggingConfiguration LoggingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVoiceConnectorOriginationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Origination Origination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVoiceConnectorProxyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DefaultSessionExpiryMinutes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] PhoneNumberPoolCountries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FallBackPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVoiceConnectorStreamingConfigurationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StreamingConfiguration StreamingConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVoiceConnectorTerminationCredentialsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Credential[] Credentials { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutVoiceConnectorTerminationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Termination Termination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestorePhoneNumberRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SMAUpdateCallArgumentsMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchAvailablePhoneNumbersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartSpeakerSearchTaskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VoiceProfileDomainId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CallLegType CallLeg { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartVoiceToneAnalysisTaskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopSpeakerSearchTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopVoiceToneAnalysisTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateGlobalSettingsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorSettings VoiceConnector { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePhoneNumberRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberProductType ProductType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CallingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePhoneNumberSettingsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProxySessionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Capability[] Capabilities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ExpiryMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSipMediaApplicationCallRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SMAUpdateCallArgumentsMap Arguments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSipMediaApplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SipMediaApplicationEndpoint[] Endpoints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSipRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SipRuleTargetApplication[] TargetApplications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVoiceConnectorGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorItem[] VoiceConnectorItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVoiceConnectorRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool RequireEncryption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVoiceProfileDomainRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVoiceProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SpeakerSearchTaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidateE911AddressRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AwsAccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StreetNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StreetInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Associates phone numbers with the specified Amazon Chime SDK Voice Connector.
		/// AssociatePhoneNumbersWithVoiceConnector voice-connectors/{voiceConnectorId}#operation=associate-phone-numbers
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<AssociatePhoneNumbersWithVoiceConnectorResponse> AssociatePhoneNumbersWithVoiceConnectorAsync(string voiceConnectorId, AssociatePhoneNumbersWithVoiceConnectorOperation operation, AssociatePhoneNumbersWithVoiceConnectorPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"#operation=associate-phone-numbers&operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatePhoneNumbersWithVoiceConnectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates phone numbers with the specified Amazon Chime SDK Voice Connector group.
		/// AssociatePhoneNumbersWithVoiceConnectorGroup voice-connector-groups/{voiceConnectorGroupId}#operation=associate-phone-numbers
		/// </summary>
		/// <param name="voiceConnectorGroupId">The Amazon Chime SDK Voice Connector group ID.</param>
		/// <returns>Success</returns>
		public async Task<AssociatePhoneNumbersWithVoiceConnectorGroupResponse> AssociatePhoneNumbersWithVoiceConnectorGroupAsync(string voiceConnectorGroupId, AssociatePhoneNumbersWithVoiceConnectorGroupOperation operation, AssociatePhoneNumbersWithVoiceConnectorGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connector-groups/"+ (voiceConnectorGroupId==null? "" : System.Uri.EscapeDataString(voiceConnectorGroupId))+"#operation=associate-phone-numbers&operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatePhoneNumbersWithVoiceConnectorGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Moves phone numbers into the <b>Deletion queue</b>. Phone numbers must be disassociated from any users or Amazon Chime SDK Voice Connectors before they can be deleted. </p> <p> Phone numbers remain in the <b>Deletion queue</b> for 7 days before they are deleted permanently. </p>
		/// BatchDeletePhoneNumber phone-numbers#operation=batch-delete
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDeletePhoneNumberResponse> BatchDeletePhoneNumberAsync(BatchDeletePhoneNumberOperation operation, BatchDeletePhoneNumberPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phone-numbers#operation=batch-delete?operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDeletePhoneNumberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates one or more phone numbers.
		/// BatchUpdatePhoneNumber phone-numbers#operation=batch-update
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchUpdatePhoneNumberResponse> BatchUpdatePhoneNumberAsync(BatchUpdatePhoneNumberOperation operation, BatchUpdatePhoneNumberPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phone-numbers#operation=batch-update?operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchUpdatePhoneNumberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an order for phone numbers to be provisioned. For numbers outside the U.S., you must use the Amazon Chime SDK SIP media application dial-in product type.
		/// CreatePhoneNumberOrder phone-number-orders
		/// </summary>
		public async Task CreatePhoneNumberOrderAsync(CreatePhoneNumberOrderPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phone-number-orders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the phone numbers for an administrator's Amazon Chime SDK account.
		/// ListPhoneNumberOrders phone-number-orders
		/// </summary>
		/// <param name="next_token">The token used to retrieve the next page of results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPhoneNumberOrdersResponse> ListPhoneNumberOrdersAsync(string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phone-number-orders?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPhoneNumberOrdersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a proxy session for the specified Amazon Chime SDK Voice Connector for the specified participant phone numbers.
		/// CreateProxySession voice-connectors/{voiceConnectorId}/proxy-sessions
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		public async Task CreateProxySessionAsync(string voiceConnectorId, CreateProxySessionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/proxy-sessions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the proxy sessions for the specified Amazon Chime SDK Voice Connector.
		/// ListProxySessions voice-connectors/{voiceConnectorId}/proxy-sessions
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <param name="status">The proxy session status.</param>
		/// <param name="next_token">The token used to retrieve the next page of results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProxySessionsResponse> ListProxySessionsAsync(string voiceConnectorId, ProxySessionStatus status, string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/proxy-sessions&status=" + status+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProxySessionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a SIP media application. For more information about SIP media applications, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/ag/manage-sip-applications.html">Managing SIP media applications and rules</a> in the <i>Amazon Chime SDK Administrator Guide</i>.
		/// CreateSipMediaApplication sip-media-applications
		/// </summary>
		public async Task CreateSipMediaApplicationAsync(CreateSipMediaApplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-media-applications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the SIP media applications under the administrator's AWS account.
		/// ListSipMediaApplications sip-media-applications
		/// </summary>
		/// <param name="max_results">The maximum number of results to return in a single call. Defaults to 100.</param>
		/// <param name="next_token">The token used to return the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSipMediaApplicationsResponse> ListSipMediaApplicationsAsync(int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-media-applications?max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSipMediaApplicationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an outbound call to a phone number from the phone number specified in the request, and it invokes the endpoint of the specified <code>sipMediaApplicationId</code>.
		/// CreateSipMediaApplicationCall sip-media-applications/{sipMediaApplicationId}/calls
		/// </summary>
		/// <param name="sipMediaApplicationId">The ID of the SIP media application.</param>
		public async Task CreateSipMediaApplicationCallAsync(string sipMediaApplicationId, CreateSipMediaApplicationCallPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-media-applications/"+ (sipMediaApplicationId==null? "" : System.Uri.EscapeDataString(sipMediaApplicationId))+"/calls";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a SIP rule, which can be used to run a SIP media application as a target for a specific trigger type. For more information about SIP rules, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/ag/manage-sip-applications.html">Managing SIP media applications and rules</a> in the <i>Amazon Chime SDK Administrator Guide</i>.
		/// CreateSipRule sip-rules
		/// </summary>
		public async Task CreateSipRuleAsync(CreateSipRulePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-rules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the SIP rules under the administrator's AWS account.
		/// ListSipRules sip-rules
		/// </summary>
		/// <param name="sip_media_application">The SIP media application ID.</param>
		/// <param name="max_results">The maximum number of results to return in a single call. Defaults to 100.</param>
		/// <param name="next_token">The token used to return the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSipRulesResponse> ListSipRulesAsync(string sip_media_application, int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-rules?sip-media-application=" + (sip_media_application==null? "" : System.Uri.EscapeDataString(sip_media_application))+"&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSipRulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an Amazon Chime SDK Voice Connector. For more information about Voice Connectors, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/ag/voice-connector-groups.html">Managing Amazon Chime SDK Voice Connector groups</a> in the <i>Amazon Chime SDK Administrator Guide</i>.
		/// CreateVoiceConnector voice-connectors
		/// </summary>
		public async Task CreateVoiceConnectorAsync(CreateVoiceConnectorPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the Amazon Chime SDK Voice Connectors in the administrators AWS account.
		/// ListVoiceConnectors voice-connectors
		/// </summary>
		/// <param name="next_token">The token used to return the next page of results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListVoiceConnectorsResponse> ListVoiceConnectorsAsync(string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVoiceConnectorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Amazon Chime SDK Voice Connector group under the administrator's AWS account. You can associate Amazon Chime SDK Voice Connectors with the Voice Connector group by including <code>VoiceConnectorItems</code> in the request. </p> <p>You can include Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.</p>
		/// CreateVoiceConnectorGroup voice-connector-groups
		/// </summary>
		public async Task CreateVoiceConnectorGroupAsync(CreateVoiceConnectorGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connector-groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the Amazon Chime SDK Voice Connector groups in the administrator's AWS account.
		/// ListVoiceConnectorGroups voice-connector-groups
		/// </summary>
		/// <param name="next_token">The token used to return the next page of results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call. </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListVoiceConnectorGroupsResponse> ListVoiceConnectorGroupsAsync(string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connector-groups?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVoiceConnectorGroupsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a voice profile, which consists of an enrolled user and their latest voice print.</p> <important> <p>Before creating any voice profiles, you must provide all notices and obtain all consents from the speaker as required under applicable privacy and biometrics laws, and as required under the <a href="https://aws.amazon.com/service-terms/">AWS service terms</a> for the Amazon Chime SDK.</p> </important> <p>For more information about voice profiles and voice analytics, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/pstn-voice-analytics.html">Using Amazon Chime SDK Voice Analytics</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p>
		/// CreateVoiceProfile voice-profiles
		/// </summary>
		public async Task CreateVoiceProfileAsync(CreateVoiceProfilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-profiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a voice profile domain, a collection of voice profiles, their voice prints, and encrypted enrollment audio.</p> <important> <p>Before creating any voice profiles, you must provide all notices and obtain all consents from the speaker as required under applicable privacy and biometrics laws, and as required under the <a href="https://aws.amazon.com/service-terms/">AWS service terms</a> for the Amazon Chime SDK.</p> </important> <p>For more information about voice profile domains, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/pstn-voice-analytics.html">Using Amazon Chime SDK Voice Analytics</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p>
		/// CreateVoiceProfileDomain voice-profile-domains
		/// </summary>
		public async Task CreateVoiceProfileDomainAsync(CreateVoiceProfileDomainPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-profile-domains";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the specified voice profile domains in the administrator's AWS account.
		/// ListVoiceProfileDomains voice-profile-domains
		/// </summary>
		/// <param name="next_token">The token used to return the next page of results.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListVoiceProfileDomainsResponse> ListVoiceProfileDomainsAsync(string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-profile-domains?next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVoiceProfileDomainsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Moves the specified phone number into the <b>Deletion queue</b>. A phone number must be disassociated from any users or Amazon Chime SDK Voice Connectors before it can be deleted.</p> <p>Deleted phone numbers remain in the <b>Deletion queue</b> queue for 7 days before they are deleted permanently.</p>
		/// DeletePhoneNumber phone-numbers/{phoneNumberId}
		/// </summary>
		/// <param name="phoneNumberId">The phone number ID.</param>
		public async Task DeletePhoneNumberAsync(string phoneNumberId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phone-numbers/"+ (phoneNumberId==null? "" : System.Uri.EscapeDataString(phoneNumberId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.
		/// GetPhoneNumber phone-numbers/{phoneNumberId}
		/// </summary>
		/// <param name="phoneNumberId">The phone number ID.</param>
		/// <returns>Success</returns>
		public async Task<GetPhoneNumberResponse> GetPhoneNumberAsync(string phoneNumberId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phone-numbers/"+ (phoneNumberId==null? "" : System.Uri.EscapeDataString(phoneNumberId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPhoneNumberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action.</p> <p>For numbers outside the U.S., you must use the Amazon Chime SDK SIP Media Application Dial-In product type.</p> <p>Updates to outbound calling names can take 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.</p>
		/// UpdatePhoneNumber phone-numbers/{phoneNumberId}
		/// </summary>
		/// <param name="phoneNumberId">The phone number ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdatePhoneNumberResponse> UpdatePhoneNumberAsync(string phoneNumberId, UpdatePhoneNumberPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phone-numbers/"+ (phoneNumberId==null? "" : System.Uri.EscapeDataString(phoneNumberId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePhoneNumberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified proxy session from the specified Amazon Chime SDK Voice Connector.
		/// DeleteProxySession voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <param name="proxySessionId">The proxy session ID.</param>
		public async Task DeleteProxySessionAsync(string voiceConnectorId, string proxySessionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/proxy-sessions/"+ (proxySessionId==null? "" : System.Uri.EscapeDataString(proxySessionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the specified proxy session details for the specified Amazon Chime SDK Voice Connector.
		/// GetProxySession voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <param name="proxySessionId">The proxy session ID.</param>
		/// <returns>Success</returns>
		public async Task<GetProxySessionResponse> GetProxySessionAsync(string voiceConnectorId, string proxySessionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/proxy-sessions/"+ (proxySessionId==null? "" : System.Uri.EscapeDataString(proxySessionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProxySessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified proxy session details, such as voice or SMS capabilities.
		/// UpdateProxySession voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <param name="proxySessionId">The proxy session ID.</param>
		public async Task UpdateProxySessionAsync(string voiceConnectorId, string proxySessionId, UpdateProxySessionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/proxy-sessions/"+ (proxySessionId==null? "" : System.Uri.EscapeDataString(proxySessionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a SIP media application.
		/// DeleteSipMediaApplication sip-media-applications/{sipMediaApplicationId}
		/// </summary>
		/// <param name="sipMediaApplicationId">The SIP media application ID.</param>
		public async Task DeleteSipMediaApplicationAsync(string sipMediaApplicationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-media-applications/"+ (sipMediaApplicationId==null? "" : System.Uri.EscapeDataString(sipMediaApplicationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the information for a SIP media application, including name, AWS Region, and endpoints.
		/// GetSipMediaApplication sip-media-applications/{sipMediaApplicationId}
		/// </summary>
		/// <param name="sipMediaApplicationId">The SIP media application ID .</param>
		/// <returns>Success</returns>
		public async Task<GetSipMediaApplicationResponse> GetSipMediaApplicationAsync(string sipMediaApplicationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-media-applications/"+ (sipMediaApplicationId==null? "" : System.Uri.EscapeDataString(sipMediaApplicationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSipMediaApplicationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the details of the specified SIP media application.
		/// UpdateSipMediaApplication sip-media-applications/{sipMediaApplicationId}
		/// </summary>
		/// <param name="sipMediaApplicationId">The SIP media application ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateSipMediaApplicationResponse> UpdateSipMediaApplicationAsync(string sipMediaApplicationId, UpdateSipMediaApplicationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-media-applications/"+ (sipMediaApplicationId==null? "" : System.Uri.EscapeDataString(sipMediaApplicationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSipMediaApplicationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a SIP rule.
		/// DeleteSipRule sip-rules/{sipRuleId}
		/// </summary>
		/// <param name="sipRuleId">The SIP rule ID.</param>
		public async Task DeleteSipRuleAsync(string sipRuleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-rules/"+ (sipRuleId==null? "" : System.Uri.EscapeDataString(sipRuleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details of a SIP rule, such as the rule ID, name, triggers, and target endpoints.
		/// GetSipRule sip-rules/{sipRuleId}
		/// </summary>
		/// <param name="sipRuleId">The SIP rule ID.</param>
		/// <returns>Success</returns>
		public async Task<GetSipRuleResponse> GetSipRuleAsync(string sipRuleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-rules/"+ (sipRuleId==null? "" : System.Uri.EscapeDataString(sipRuleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSipRuleResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the details of the specified SIP rule.
		/// UpdateSipRule sip-rules/{sipRuleId}
		/// </summary>
		/// <param name="sipRuleId">The SIP rule ID.</param>
		public async Task UpdateSipRuleAsync(string sipRuleId, UpdateSipRulePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-rules/"+ (sipRuleId==null? "" : System.Uri.EscapeDataString(sipRuleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Amazon Chime SDK Voice Connector. Any phone numbers associated with the Amazon Chime SDK Voice Connector must be disassociated from it before it can be deleted.
		/// DeleteVoiceConnector voice-connectors/{voiceConnectorId}
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		public async Task DeleteVoiceConnectorAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details for the specified Amazon Chime SDK Voice Connector, such as timestamps,name, outbound host, and encryption requirements.
		/// GetVoiceConnector voice-connectors/{voiceConnectorId}
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorResponse> GetVoiceConnectorAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVoiceConnectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the details for the specified Amazon Chime SDK Voice Connector.
		/// UpdateVoiceConnector voice-connectors/{voiceConnectorId}
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateVoiceConnectorResponse> UpdateVoiceConnectorAsync(string voiceConnectorId, UpdateVoiceConnectorPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateVoiceConnectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the emergency calling details from the specified Amazon Chime SDK Voice Connector.
		/// DeleteVoiceConnectorEmergencyCallingConfiguration voice-connectors/{voiceConnectorId}/emergency-calling-configuration
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		public async Task DeleteVoiceConnectorEmergencyCallingConfigurationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/emergency-calling-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the emergency calling configuration details for the specified Voice Connector.
		/// GetVoiceConnectorEmergencyCallingConfiguration voice-connectors/{voiceConnectorId}/emergency-calling-configuration
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorEmergencyCallingConfigurationResponse> GetVoiceConnectorEmergencyCallingConfigurationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/emergency-calling-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVoiceConnectorEmergencyCallingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Voice Connector's emergency calling configuration.
		/// PutVoiceConnectorEmergencyCallingConfiguration voice-connectors/{voiceConnectorId}/emergency-calling-configuration
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<PutVoiceConnectorEmergencyCallingConfigurationResponse> PutVoiceConnectorEmergencyCallingConfigurationAsync(string voiceConnectorId, PutVoiceConnectorEmergencyCallingConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/emergency-calling-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutVoiceConnectorEmergencyCallingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an Amazon Chime SDK Voice Connector group. Any <code>VoiceConnectorItems</code> and phone numbers associated with the group must be removed before it can be deleted.
		/// DeleteVoiceConnectorGroup voice-connector-groups/{voiceConnectorGroupId}
		/// </summary>
		/// <param name="voiceConnectorGroupId">The Voice Connector Group ID.</param>
		public async Task DeleteVoiceConnectorGroupAsync(string voiceConnectorGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connector-groups/"+ (voiceConnectorGroupId==null? "" : System.Uri.EscapeDataString(voiceConnectorGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves details for the specified Amazon Chime SDK Voice Connector group, such as timestamps,name, and associated <code>VoiceConnectorItems</code>.
		/// GetVoiceConnectorGroup voice-connector-groups/{voiceConnectorGroupId}
		/// </summary>
		/// <param name="voiceConnectorGroupId">The Voice Connector group ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorGroupResponse> GetVoiceConnectorGroupAsync(string voiceConnectorGroupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connector-groups/"+ (voiceConnectorGroupId==null? "" : System.Uri.EscapeDataString(voiceConnectorGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVoiceConnectorGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings for the specified Amazon Chime SDK Voice Connector group.
		/// UpdateVoiceConnectorGroup voice-connector-groups/{voiceConnectorGroupId}
		/// </summary>
		/// <param name="voiceConnectorGroupId">The Voice Connector ID.</param>
		public async Task UpdateVoiceConnectorGroupAsync(string voiceConnectorGroupId, UpdateVoiceConnectorGroupPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connector-groups/"+ (voiceConnectorGroupId==null? "" : System.Uri.EscapeDataString(voiceConnectorGroupId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the origination settings for the specified Amazon Chime SDK Voice Connector. </p> <note> <p>If emergency calling is configured for the Voice Connector, it must be deleted prior to deleting the origination settings.</p> </note>
		/// DeleteVoiceConnectorOrigination voice-connectors/{voiceConnectorId}/origination
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		public async Task DeleteVoiceConnectorOriginationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/origination";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the origination settings for the specified Voice Connector.
		/// GetVoiceConnectorOrigination voice-connectors/{voiceConnectorId}/origination
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorOriginationResponse> GetVoiceConnectorOriginationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/origination";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVoiceConnectorOriginationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Voice Connector's origination settings.
		/// PutVoiceConnectorOrigination voice-connectors/{voiceConnectorId}/origination
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<PutVoiceConnectorOriginationResponse> PutVoiceConnectorOriginationAsync(string voiceConnectorId, PutVoiceConnectorOriginationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/origination";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutVoiceConnectorOriginationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the proxy configuration from the specified Amazon Chime SDK Voice Connector.
		/// DeleteVoiceConnectorProxy voice-connectors/{voiceConnectorId}/programmable-numbers/proxy
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		public async Task DeleteVoiceConnectorProxyAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/programmable-numbers/proxy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the proxy configuration details for the specified Amazon Chime SDK Voice Connector.
		/// GetVoiceConnectorProxy voice-connectors/{voiceConnectorId}/programmable-numbers/proxy
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorProxyResponse> GetVoiceConnectorProxyAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/programmable-numbers/proxy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVoiceConnectorProxyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Puts the specified proxy configuration to the specified Amazon Chime SDK Voice Connector.
		/// PutVoiceConnectorProxy voice-connectors/{voiceConnectorId}/programmable-numbers/proxy
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<PutVoiceConnectorProxyResponse> PutVoiceConnectorProxyAsync(string voiceConnectorId, PutVoiceConnectorProxyPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/programmable-numbers/proxy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutVoiceConnectorProxyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a Voice Connector's streaming configuration.
		/// DeleteVoiceConnectorStreamingConfiguration voice-connectors/{voiceConnectorId}/streaming-configuration
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		public async Task DeleteVoiceConnectorStreamingConfigurationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/streaming-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the streaming configuration details for the specified Amazon Chime SDK Voice Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows the retention period, in hours, for the Amazon Kinesis data.
		/// GetVoiceConnectorStreamingConfiguration voice-connectors/{voiceConnectorId}/streaming-configuration
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorStreamingConfigurationResponse> GetVoiceConnectorStreamingConfigurationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/streaming-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVoiceConnectorStreamingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Voice Connector's streaming configuration settings.
		/// PutVoiceConnectorStreamingConfiguration voice-connectors/{voiceConnectorId}/streaming-configuration
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<PutVoiceConnectorStreamingConfigurationResponse> PutVoiceConnectorStreamingConfigurationAsync(string voiceConnectorId, PutVoiceConnectorStreamingConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/streaming-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutVoiceConnectorStreamingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the termination settings for the specified Amazon Chime SDK Voice Connector.</p> <note> <p>If emergency calling is configured for the Voice Connector, it must be deleted prior to deleting the termination settings.</p> </note>
		/// DeleteVoiceConnectorTermination voice-connectors/{voiceConnectorId}/termination
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		public async Task DeleteVoiceConnectorTerminationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/termination";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the termination setting details for the specified Voice Connector.
		/// GetVoiceConnectorTermination voice-connectors/{voiceConnectorId}/termination
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorTerminationResponse> GetVoiceConnectorTerminationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/termination";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVoiceConnectorTerminationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Voice Connector's termination settings.
		/// PutVoiceConnectorTermination voice-connectors/{voiceConnectorId}/termination
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<PutVoiceConnectorTerminationResponse> PutVoiceConnectorTerminationAsync(string voiceConnectorId, PutVoiceConnectorTerminationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/termination";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutVoiceConnectorTerminationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified SIP credentials used by your equipment to authenticate during call termination.
		/// DeleteVoiceConnectorTerminationCredentials voice-connectors/{voiceConnectorId}/termination/credentials#operation=delete
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		public async Task DeleteVoiceConnectorTerminationCredentialsAsync(string voiceConnectorId, DeleteVoiceConnectorTerminationCredentialsOperation operation, DeleteVoiceConnectorTerminationCredentialsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/termination/credentials#operation=delete&operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a voice profile, including its voice print and enrollment data. WARNING: This action is not reversible.
		/// DeleteVoiceProfile voice-profiles/{VoiceProfileId}
		/// </summary>
		/// <param name="VoiceProfileId">The voice profile ID.</param>
		public async Task DeleteVoiceProfileAsync(string VoiceProfileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-profiles/"+ (VoiceProfileId==null? "" : System.Uri.EscapeDataString(VoiceProfileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details of the specified voice profile.
		/// GetVoiceProfile voice-profiles/{VoiceProfileId}
		/// </summary>
		/// <param name="VoiceProfileId">The voice profile ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceProfileResponse> GetVoiceProfileAsync(string VoiceProfileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-profiles/"+ (VoiceProfileId==null? "" : System.Uri.EscapeDataString(VoiceProfileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVoiceProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified voice profile’s voice print and refreshes its expiration timestamp.</p> <important> <p>As a condition of using this feature, you acknowledge that the collection, use, storage, and retention of your caller’s biometric identifiers and biometric information (“biometric data”) in the form of a digital voiceprint requires the caller’s informed consent via a written release. Such consent is required under various state laws, including biometrics laws in Illinois, Texas, Washington and other state privacy laws.</p> <p>You must provide a written release to each caller through a process that clearly reflects each caller’s informed consent before using Amazon Chime SDK Voice Insights service, as required under the terms of your agreement with AWS governing your use of the service.</p> </important>
		/// UpdateVoiceProfile voice-profiles/{VoiceProfileId}
		/// </summary>
		/// <param name="VoiceProfileId">The profile ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateVoiceProfileResponse> UpdateVoiceProfileAsync(string VoiceProfileId, UpdateVoiceProfilePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-profiles/"+ (VoiceProfileId==null? "" : System.Uri.EscapeDataString(VoiceProfileId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateVoiceProfileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes all voice profiles in the domain. WARNING: This action is not reversible.
		/// DeleteVoiceProfileDomain voice-profile-domains/{VoiceProfileDomainId}
		/// </summary>
		/// <param name="VoiceProfileDomainId">The voice profile domain ID.</param>
		public async Task DeleteVoiceProfileDomainAsync(string VoiceProfileDomainId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-profile-domains/"+ (VoiceProfileDomainId==null? "" : System.Uri.EscapeDataString(VoiceProfileDomainId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details of the specified voice profile domain.
		/// GetVoiceProfileDomain voice-profile-domains/{VoiceProfileDomainId}
		/// </summary>
		/// <param name="VoiceProfileDomainId">The voice profile domain ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceProfileDomainResponse> GetVoiceProfileDomainAsync(string VoiceProfileDomainId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-profile-domains/"+ (VoiceProfileDomainId==null? "" : System.Uri.EscapeDataString(VoiceProfileDomainId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVoiceProfileDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings for the specified voice profile domain.
		/// UpdateVoiceProfileDomain voice-profile-domains/{VoiceProfileDomainId}
		/// </summary>
		/// <param name="VoiceProfileDomainId">The domain ID.</param>
		/// <returns>Success</returns>
		public async Task<UpdateVoiceProfileDomainResponse> UpdateVoiceProfileDomainAsync(string VoiceProfileDomainId, UpdateVoiceProfileDomainPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-profile-domains/"+ (VoiceProfileDomainId==null? "" : System.Uri.EscapeDataString(VoiceProfileDomainId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateVoiceProfileDomainResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates the specified phone numbers from the specified Amazon Chime SDK Voice Connector.
		/// DisassociatePhoneNumbersFromVoiceConnector voice-connectors/{voiceConnectorId}#operation=disassociate-phone-numbers
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<DisassociatePhoneNumbersFromVoiceConnectorResponse> DisassociatePhoneNumbersFromVoiceConnectorAsync(string voiceConnectorId, DisassociatePhoneNumbersFromVoiceConnectorOperation operation, DisassociatePhoneNumbersFromVoiceConnectorPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"#operation=disassociate-phone-numbers&operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociatePhoneNumbersFromVoiceConnectorResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates the specified phone numbers from the specified Amazon Chime SDK Voice Connector group.
		/// DisassociatePhoneNumbersFromVoiceConnectorGroup voice-connector-groups/{voiceConnectorGroupId}#operation=disassociate-phone-numbers
		/// </summary>
		/// <param name="voiceConnectorGroupId">The Voice Connector group ID.</param>
		/// <returns>Success</returns>
		public async Task<DisassociatePhoneNumbersFromVoiceConnectorGroupResponse> DisassociatePhoneNumbersFromVoiceConnectorGroupAsync(string voiceConnectorGroupId, DisassociatePhoneNumbersFromVoiceConnectorGroupOperation operation, DisassociatePhoneNumbersFromVoiceConnectorGroupPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connector-groups/"+ (voiceConnectorGroupId==null? "" : System.Uri.EscapeDataString(voiceConnectorGroupId))+"#operation=disassociate-phone-numbers&operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociatePhoneNumbersFromVoiceConnectorGroupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the global settings for the Amazon Chime SDK Voice Connectors in an AWS account.
		/// GetGlobalSettings settings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetGlobalSettingsResponse> GetGlobalSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetGlobalSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates global settings for the Amazon Chime SDK Voice Connectors in an AWS account.
		/// UpdateGlobalSettings settings
		/// </summary>
		public async Task UpdateGlobalSettingsAsync(UpdateGlobalSettingsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves details for the specified phone number order, such as the order creation timestamp, phone numbers in E.164 format, product type, and order status.
		/// GetPhoneNumberOrder phone-number-orders/{phoneNumberOrderId}
		/// </summary>
		/// <param name="phoneNumberOrderId">The ID of the phone number order .</param>
		/// <returns>Success</returns>
		public async Task<GetPhoneNumberOrderResponse> GetPhoneNumberOrderAsync(string phoneNumberOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phone-number-orders/"+ (phoneNumberOrderId==null? "" : System.Uri.EscapeDataString(phoneNumberOrderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPhoneNumberOrderResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the phone number settings for the administrator's AWS account, such as the default outbound calling name.
		/// GetPhoneNumberSettings settings/phone-number
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPhoneNumberSettingsResponse> GetPhoneNumberSettingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/phone-number";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPhoneNumberSettingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the phone number settings for the administrator's AWS account, such as the default outbound calling name. You can update the default outbound calling name once every seven days. Outbound calling names can take up to 72 hours to update.
		/// UpdatePhoneNumberSettings settings/phone-number
		/// </summary>
		public async Task UpdatePhoneNumberSettingsAsync(UpdatePhoneNumberSettingsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "settings/phone-number";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the Alexa Skill configuration for the SIP media application.
		/// GetSipMediaApplicationAlexaSkillConfiguration sip-media-applications/{sipMediaApplicationId}/alexa-skill-configuration
		/// </summary>
		/// <param name="sipMediaApplicationId">The SIP media application ID.</param>
		/// <returns>Success</returns>
		public async Task<GetSipMediaApplicationAlexaSkillConfigurationResponse> GetSipMediaApplicationAlexaSkillConfigurationAsync(string sipMediaApplicationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-media-applications/"+ (sipMediaApplicationId==null? "" : System.Uri.EscapeDataString(sipMediaApplicationId))+"/alexa-skill-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSipMediaApplicationAlexaSkillConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the Alexa Skill configuration for the SIP media application.
		/// PutSipMediaApplicationAlexaSkillConfiguration sip-media-applications/{sipMediaApplicationId}/alexa-skill-configuration
		/// </summary>
		/// <param name="sipMediaApplicationId">The SIP media application ID.</param>
		/// <returns>Success</returns>
		public async Task<PutSipMediaApplicationAlexaSkillConfigurationResponse> PutSipMediaApplicationAlexaSkillConfigurationAsync(string sipMediaApplicationId, PutSipMediaApplicationAlexaSkillConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-media-applications/"+ (sipMediaApplicationId==null? "" : System.Uri.EscapeDataString(sipMediaApplicationId))+"/alexa-skill-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutSipMediaApplicationAlexaSkillConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the logging configuration for the specified SIP media application.
		/// GetSipMediaApplicationLoggingConfiguration sip-media-applications/{sipMediaApplicationId}/logging-configuration
		/// </summary>
		/// <param name="sipMediaApplicationId">The SIP media application ID.</param>
		/// <returns>Success</returns>
		public async Task<GetSipMediaApplicationLoggingConfigurationResponse> GetSipMediaApplicationLoggingConfigurationAsync(string sipMediaApplicationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-media-applications/"+ (sipMediaApplicationId==null? "" : System.Uri.EscapeDataString(sipMediaApplicationId))+"/logging-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSipMediaApplicationLoggingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the logging configuration for the specified SIP media application.
		/// PutSipMediaApplicationLoggingConfiguration sip-media-applications/{sipMediaApplicationId}/logging-configuration
		/// </summary>
		/// <param name="sipMediaApplicationId">The SIP media application ID.</param>
		/// <returns>Success</returns>
		public async Task<PutSipMediaApplicationLoggingConfigurationResponse> PutSipMediaApplicationLoggingConfigurationAsync(string sipMediaApplicationId, PutSipMediaApplicationLoggingConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-media-applications/"+ (sipMediaApplicationId==null? "" : System.Uri.EscapeDataString(sipMediaApplicationId))+"/logging-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutSipMediaApplicationLoggingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details of the specified speaker search task.
		/// GetSpeakerSearchTask voice-connectors/{VoiceConnectorId}/speaker-search-tasks/{SpeakerSearchTaskId}
		/// </summary>
		/// <param name="VoiceConnectorId">The Voice Connector ID.</param>
		/// <param name="SpeakerSearchTaskId">The ID of the speaker search task.</param>
		/// <returns>Success</returns>
		public async Task<GetSpeakerSearchTaskResponse> GetSpeakerSearchTaskAsync(string VoiceConnectorId, string SpeakerSearchTaskId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (VoiceConnectorId==null? "" : System.Uri.EscapeDataString(VoiceConnectorId))+"/speaker-search-tasks/"+ (SpeakerSearchTaskId==null? "" : System.Uri.EscapeDataString(SpeakerSearchTaskId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSpeakerSearchTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the logging configuration settings for the specified Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.
		/// GetVoiceConnectorLoggingConfiguration voice-connectors/{voiceConnectorId}/logging-configuration
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorLoggingConfigurationResponse> GetVoiceConnectorLoggingConfigurationAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/logging-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVoiceConnectorLoggingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Voice Connector's logging configuration.
		/// PutVoiceConnectorLoggingConfiguration voice-connectors/{voiceConnectorId}/logging-configuration
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<PutVoiceConnectorLoggingConfigurationResponse> PutVoiceConnectorLoggingConfigurationAsync(string voiceConnectorId, PutVoiceConnectorLoggingConfigurationPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/logging-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutVoiceConnectorLoggingConfigurationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the last time a <code>SIP OPTIONS</code> ping was received from your SIP infrastructure for the specified Amazon Chime SDK Voice Connector.
		/// GetVoiceConnectorTerminationHealth voice-connectors/{voiceConnectorId}/termination/health
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceConnectorTerminationHealthResponse> GetVoiceConnectorTerminationHealthAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/termination/health";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVoiceConnectorTerminationHealthResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details of a voice tone analysis task.
		/// GetVoiceToneAnalysisTask voice-connectors/{VoiceConnectorId}/voice-tone-analysis-tasks/{VoiceToneAnalysisTaskId}#isCaller
		/// </summary>
		/// <param name="VoiceConnectorId">The Voice Connector ID.</param>
		/// <param name="VoiceToneAnalysisTaskId">The ID of the voice tone anlysis task.</param>
		/// <param name="isCaller">Specifies whether the voice being analyzed is the caller (originator) or the callee (responder).</param>
		/// <returns>Success</returns>
		public async Task<GetVoiceToneAnalysisTaskResponse> GetVoiceToneAnalysisTaskAsync(string VoiceConnectorId, string VoiceToneAnalysisTaskId, bool isCaller, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (VoiceConnectorId==null? "" : System.Uri.EscapeDataString(VoiceConnectorId))+"/voice-tone-analysis-tasks/"+ (VoiceToneAnalysisTaskId==null? "" : System.Uri.EscapeDataString(VoiceToneAnalysisTaskId))+"#isCaller&isCaller="+isCaller;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVoiceToneAnalysisTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the available AWS Regions in which you can create an Amazon Chime SDK Voice Connector.
		/// ListAvailableVoiceConnectorRegions voice-connector-regions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListAvailableVoiceConnectorRegionsResponse> ListAvailableVoiceConnectorRegionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connector-regions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAvailableVoiceConnectorRegionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the phone numbers for the specified Amazon Chime SDK account, Amazon Chime SDK user, Amazon Chime SDK Voice Connector, or Amazon Chime SDK Voice Connector group.
		/// ListPhoneNumbers phone-numbers
		/// </summary>
		/// <param name="status">The status of your organization's phone numbers.</param>
		/// <param name="product_type">The phone number product types.</param>
		/// <param name="filter_name">The filter to limit the number of results.</param>
		/// <param name="filter_value">The filter value.</param>
		/// <param name="max_results">The maximum number of results to return in a single call.</param>
		/// <param name="next_token">The token used to return the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPhoneNumbersResponse> ListPhoneNumbersAsync(string status, PhoneNumberProductType product_type, PhoneNumberAssociationName filter_name, string filter_value, int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phone-numbers?status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&product-type=" + product_type+"&filter-name=" + filter_name+"&filter-value=" + (filter_value==null? "" : System.Uri.EscapeDataString(filter_value))+"&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPhoneNumbersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the countries that you can order phone numbers from.
		/// ListSupportedPhoneNumberCountries phone-number-countries#product-type
		/// </summary>
		/// <param name="product_type">The phone number product type.</param>
		/// <returns>Success</returns>
		public async Task<ListSupportedPhoneNumberCountriesResponse> ListSupportedPhoneNumberCountriesAsync(PhoneNumberProductType product_type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phone-number-countries#product-type?product-type=" + product_type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSupportedPhoneNumberCountriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the tags in a given resource.
		/// ListTagsForResource tags#arn
		/// </summary>
		/// <param name="arn">The resource ARN.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string arn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#arn?arn=" + (arn==null? "" : System.Uri.EscapeDataString(arn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the SIP credentials for the specified Amazon Chime SDK Voice Connector.
		/// ListVoiceConnectorTerminationCredentials voice-connectors/{voiceConnectorId}/termination/credentials
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		/// <returns>Success</returns>
		public async Task<ListVoiceConnectorTerminationCredentialsResponse> ListVoiceConnectorTerminationCredentialsAsync(string voiceConnectorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/termination/credentials";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVoiceConnectorTerminationCredentialsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the voice profiles in a voice profile domain.
		/// ListVoiceProfiles voice-profiles#voice-profile-domain-id
		/// </summary>
		/// <param name="voice_profile_domain_id">The ID of the voice profile domain.</param>
		/// <param name="next_token">The token used to retrieve the next page of results.</param>
		/// <param name="max_results">The maximum number of results in the request.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListVoiceProfilesResponse> ListVoiceProfilesAsync(string voice_profile_domain_id, string next_token, int max_results, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-profiles#voice-profile-domain-id?voice-profile-domain-id=" + (voice_profile_domain_id==null? "" : System.Uri.EscapeDataString(voice_profile_domain_id))+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&max-results="+max_results+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVoiceProfilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Voice Connector's termination credentials.
		/// PutVoiceConnectorTerminationCredentials voice-connectors/{voiceConnectorId}/termination/credentials#operation=put
		/// </summary>
		/// <param name="voiceConnectorId">The Voice Connector ID.</param>
		public async Task PutVoiceConnectorTerminationCredentialsAsync(string voiceConnectorId, PutVoiceConnectorTerminationCredentialsOperation operation, PutVoiceConnectorTerminationCredentialsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (voiceConnectorId==null? "" : System.Uri.EscapeDataString(voiceConnectorId))+"/termination/credentials#operation=put&operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Restores a deleted phone number.
		/// RestorePhoneNumber phone-numbers/{phoneNumberId}#operation=restore
		/// </summary>
		/// <param name="phoneNumberId">The ID of the phone number being restored.</param>
		/// <returns>Success</returns>
		public async Task<RestorePhoneNumberResponse> RestorePhoneNumberAsync(string phoneNumberId, RestorePhoneNumberOperation operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "phone-numbers/"+ (phoneNumberId==null? "" : System.Uri.EscapeDataString(phoneNumberId))+"#operation=restore&operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestorePhoneNumberResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches the provisioned phone numbers in an organization.
		/// SearchAvailablePhoneNumbers search#type=phone-numbers
		/// </summary>
		/// <param name="area_code">Confines a search to just the phone numbers associated with the specified area code.</param>
		/// <param name="city">Confines a search to just the phone numbers associated with the specified city.</param>
		/// <param name="country">Confines a search to just the phone numbers associated with the specified country.</param>
		/// <param name="state">Confines a search to just the phone numbers associated with the specified state.</param>
		/// <param name="toll_free_prefix">Confines a search to just the phone numbers associated with the specified toll-free prefix.</param>
		/// <param name="phone_number_type">Confines a search to just the phone numbers associated with the specified phone number type, either <b>local</b> or <b>toll-free</b>.</param>
		/// <param name="max_results">The maximum number of results to return.</param>
		/// <param name="next_token">The token used to return the next page of results.</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchAvailablePhoneNumbersResponse> SearchAvailablePhoneNumbersAsync(string area_code, string city, string country, string state, string toll_free_prefix, PhoneNumberType phone_number_type, int max_results, string next_token, string MaxResults, string NextToken, SearchAvailablePhoneNumbersType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search#type=phone-numbers?area-code=" + (area_code==null? "" : System.Uri.EscapeDataString(area_code))+"&city=" + (city==null? "" : System.Uri.EscapeDataString(city))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&toll-free-prefix=" + (toll_free_prefix==null? "" : System.Uri.EscapeDataString(toll_free_prefix))+"&phone-number-type=" + phone_number_type+"&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchAvailablePhoneNumbersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a speaker search task.</p> <important> <p>Before starting any speaker search tasks, you must provide all notices and obtain all consents from the speaker as required under applicable privacy and biometrics laws, and as required under the <a href="https://aws.amazon.com/service-terms/">AWS service terms</a> for the Amazon Chime SDK.</p> </important>
		/// StartSpeakerSearchTask voice-connectors/{VoiceConnectorId}/speaker-search-tasks
		/// </summary>
		/// <param name="VoiceConnectorId">The Voice Connector ID.</param>
		public async Task StartSpeakerSearchTaskAsync(string VoiceConnectorId, StartSpeakerSearchTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (VoiceConnectorId==null? "" : System.Uri.EscapeDataString(VoiceConnectorId))+"/speaker-search-tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a voice tone analysis task. For more information about voice tone analysis, see <a href="https://docs.aws.amazon.com/chime-sdk/latest/dg/pstn-voice-analytics.html">Using Amazon Chime SDK voice analytics</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> <important> <p>Before starting any voice tone analysis tasks, you must provide all notices and obtain all consents from the speaker as required under applicable privacy and biometrics laws, and as required under the <a href="https://aws.amazon.com/service-terms/">AWS service terms</a> for the Amazon Chime SDK.</p> </important>
		/// StartVoiceToneAnalysisTask voice-connectors/{VoiceConnectorId}/voice-tone-analysis-tasks
		/// </summary>
		/// <param name="VoiceConnectorId">The Voice Connector ID.</param>
		public async Task StartVoiceToneAnalysisTaskAsync(string VoiceConnectorId, StartVoiceToneAnalysisTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (VoiceConnectorId==null? "" : System.Uri.EscapeDataString(VoiceConnectorId))+"/voice-tone-analysis-tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a speaker search task.
		/// StopSpeakerSearchTask voice-connectors/{VoiceConnectorId}/speaker-search-tasks/{SpeakerSearchTaskId}#operation=stop
		/// </summary>
		/// <param name="VoiceConnectorId">The Voice Connector ID.</param>
		/// <param name="SpeakerSearchTaskId">The speaker search task ID.</param>
		public async Task StopSpeakerSearchTaskAsync(string VoiceConnectorId, string SpeakerSearchTaskId, StopSpeakerSearchTaskOperation operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (VoiceConnectorId==null? "" : System.Uri.EscapeDataString(VoiceConnectorId))+"/speaker-search-tasks/"+ (SpeakerSearchTaskId==null? "" : System.Uri.EscapeDataString(SpeakerSearchTaskId))+"#operation=stop&operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops a voice tone analysis task.
		/// StopVoiceToneAnalysisTask voice-connectors/{VoiceConnectorId}/voice-tone-analysis-tasks/{VoiceToneAnalysisTaskId}#operation=stop
		/// </summary>
		/// <param name="VoiceConnectorId">The Voice Connector ID.</param>
		/// <param name="VoiceToneAnalysisTaskId">The ID of the voice tone analysis task.</param>
		public async Task StopVoiceToneAnalysisTaskAsync(string VoiceConnectorId, string VoiceToneAnalysisTaskId, StopSpeakerSearchTaskOperation operation, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "voice-connectors/"+ (VoiceConnectorId==null? "" : System.Uri.EscapeDataString(VoiceConnectorId))+"/voice-tone-analysis-tasks/"+ (VoiceToneAnalysisTaskId==null? "" : System.Uri.EscapeDataString(VoiceToneAnalysisTaskId))+"#operation=stop&operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a tag to the specified resource.
		/// TagResource tags#operation=tag-resource
		/// </summary>
		public async Task TagResourceAsync(TagResourceOperation operation, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#operation=tag-resource?operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes tags from a resource.
		/// UntagResource tags#operation=untag-resource
		/// </summary>
		public async Task UntagResourceAsync(UntagResourceOperation operation, UntagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#operation=untag-resource?operation=" + operation;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Invokes the AWS Lambda function associated with the SIP media application and transaction ID in an update request. The Lambda function can then return a new set of actions.
		/// UpdateSipMediaApplicationCall sip-media-applications/{sipMediaApplicationId}/calls/{transactionId}
		/// </summary>
		/// <param name="sipMediaApplicationId">The ID of the SIP media application handling the call.</param>
		/// <param name="transactionId">The ID of the call transaction.</param>
		public async Task UpdateSipMediaApplicationCallAsync(string sipMediaApplicationId, string transactionId, UpdateSipMediaApplicationCallPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sip-media-applications/"+ (sipMediaApplicationId==null? "" : System.Uri.EscapeDataString(sipMediaApplicationId))+"/calls/"+ (transactionId==null? "" : System.Uri.EscapeDataString(transactionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Validates an address to be used for 911 calls made with Amazon Chime SDK Voice Connectors. You can use validated addresses in a Presence Information Data Format Location Object file that you include in SIP requests. That helps ensure that addresses are routed to the appropriate Public Safety Answering Point.
		/// ValidateE911Address emergency-calling/address
		/// </summary>
		public async Task ValidateE911AddressAsync(ValidateE911AddressPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "emergency-calling/address";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum AssociatePhoneNumbersWithVoiceConnectorOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="associate-phone-numbers")]
		associateMinusphoneMinusnumbers = 0,
	}
	
	public class AssociatePhoneNumbersWithVoiceConnectorPostBody
	{
		
		/// <summary>
		/// List of phone numbers, in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] E164PhoneNumbers { get; set; }
		
		/// <summary>
		/// If true, associates the provided phone numbers with the provided Amazon Chime SDK Voice Connector and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceAssociate { get; set; }
	}
	
	public enum AssociatePhoneNumbersWithVoiceConnectorGroupOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="associate-phone-numbers")]
		associateMinusphoneMinusnumbers = 0,
	}
	
	public class AssociatePhoneNumbersWithVoiceConnectorGroupPostBody
	{
		
		/// <summary>
		/// List of phone numbers, in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] E164PhoneNumbers { get; set; }
		
		/// <summary>
		/// If true, associates the provided phone numbers with the provided Amazon Chime SDK Voice Connector Group and removes any previously existing associations. If false, does not associate any phone numbers that have previously existing associations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ForceAssociate { get; set; }
	}
	
	public enum BatchDeletePhoneNumberOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="batch-delete")]
		batchMinusdelete = 0,
	}
	
	public class BatchDeletePhoneNumberPostBody
	{
		
		/// <summary>
		/// List of phone number IDs.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] PhoneNumberIds { get; set; }
	}
	
	public enum BatchUpdatePhoneNumberOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="batch-update")]
		batchMinusupdate = 0,
	}
	
	public class BatchUpdatePhoneNumberPostBody
	{
		
		/// <summary>
		/// Lists the phone numbers in the update request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdatePhoneNumberRequestItem[] UpdatePhoneNumberRequestItems { get; set; }
	}
	
	public class CreatePhoneNumberOrderPostBody
	{
		
		/// <summary>
		/// The phone number product type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberProductType ProductType { get; set; }
		
		/// <summary>
		/// List of phone numbers, in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] E164PhoneNumbers { get; set; }
	}
	
	public class CreateProxySessionPostBody
	{
		
		/// <summary>
		/// The participant phone numbers.
		/// Required
		/// Minimum items: 2
		/// Maximum items: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string[] ParticipantPhoneNumbers { get; set; }
		
		/// <summary>
		/// The name of the proxy session.
		/// Pattern: ^$|^[a-zA-Z0-9 ]{0,30}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^$|^[a-zA-Z0-9 ]{0,30}$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of minutes allowed for the proxy session.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ExpiryMinutes { get; set; }
		
		/// <summary>
		/// The proxy session's capabilities.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Capability[] Capabilities { get; set; }
		
		/// <summary>
		/// The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public NumberSelectionBehavior NumberSelectionBehavior { get; set; }
		
		/// <summary>
		/// The preference for matching the country or area code of the proxy phone number with that of the first participant.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public GeoMatchLevel GeoMatchLevel { get; set; }
		
		/// <summary>
		/// The country and area code for a proxy phone number in a proxy phone session.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateProxySessionPostBodyGeoMatchParams GeoMatchParams { get; set; }
	}
	
	public class CreateProxySessionPostBodyGeoMatchParams
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AreaCode { get; set; }
	}
	
	public class CreateSipMediaApplicationPostBody
	{
		
		/// <summary>
		/// The AWS Region assigned to the SIP media application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
		
		/// <summary>
		/// The SIP media application's name.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9 _.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9 _.-]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of endpoints (Lambda ARNs) specified for the SIP media application.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public SipMediaApplicationEndpoint[] Endpoints { get; set; }
		
		/// <summary>
		/// The tags assigned to the SIP media application.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateSipMediaApplicationCallPostBody
	{
		
		/// <summary>
		/// The phone number that a user calls from. This is a phone number in your Amazon Chime SDK phone number inventory.
		/// Required
		/// Pattern: ^\+?[1-9]\d{1,14}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+?[1-9]\d{1,14}$")]
		public string FromPhoneNumber { get; set; }
		
		/// <summary>
		/// The phone number that the service should call.
		/// Required
		/// Pattern: ^\+?[1-9]\d{1,14}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+?[1-9]\d{1,14}$")]
		public string ToPhoneNumber { get; set; }
		
		/// <summary>
		/// The SIP headers added to an outbound call leg.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> SipHeaders { get; set; }
		
		/// <summary>
		/// Context passed to a CreateSipMediaApplication API call. For example, you could pass key-value pairs such as: <code>"FirstName": "John", "LastName": "Doe"</code> 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> ArgumentsMap { get; set; }
	}
	
	public class CreateSipRulePostBody
	{
		
		/// <summary>
		/// The name of the SIP rule.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9 _.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9 _.-]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of trigger assigned to the SIP rule in <code>TriggerValue</code>, currently <code>RequestUriHostname</code> or <code>ToPhoneNumber</code>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SipRuleTriggerType TriggerType { get; set; }
		
		/// <summary>
		/// If <code>TriggerType</code> is <code>RequestUriHostname</code>, the value can be the outbound host name of a Voice Connector. If <code>TriggerType</code> is <code>ToPhoneNumber</code>, the value can be a customer-owned phone number in the E164 format. The <code>SipMediaApplication</code> specified in the <code>SipRule</code> is triggered if the request URI in an incoming SIP request matches the <code>RequestUriHostname</code>, or if the <code>To</code> header in the incoming SIP request matches the <code>ToPhoneNumber</code> value.
		/// Required
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string TriggerValue { get; set; }
		
		/// <summary>
		/// Disables or enables a SIP rule. You must disable SIP rules before you can delete them.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// List of SIP media applications, with priority and AWS Region. Only one SIP application per AWS Region can be used.
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public SipRuleTargetApplication[] TargetApplications { get; set; }
	}
	
	public class CreateVoiceConnectorPostBody
	{
		
		/// <summary>
		/// The name of the Voice Connector.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9 _.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9 _.-]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The AWS Region in which the Amazon Chime SDK Voice Connector is created. Default value: <code>us-east-1</code> .
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CreateVoiceConnectorPostBodyAwsRegion> AwsRegion { get; set; }
		
		/// <summary>
		/// Enables or disables encryption for the Voice Connector.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool RequireEncryption { get; set; }
		
		/// <summary>
		/// The tags assigned to the Voice Connector.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CreateVoiceConnectorPostBodyAwsRegion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-east-1")]
		usMinuseastMinus1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="us-west-2")]
		usMinuswestMinus2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ca-central-1")]
		caMinuscentralMinus1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-central-1")]
		euMinuscentralMinus1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-west-1")]
		euMinuswestMinus1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="eu-west-2")]
		euMinuswestMinus2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-northeast-2")]
		apMinusnortheastMinus2 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-northeast-1")]
		apMinusnortheastMinus1 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-southeast-1")]
		apMinussoutheastMinus1 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ap-southeast-2")]
		apMinussoutheastMinus2 = 9,
	}
	
	public class CreateVoiceConnectorGroupPostBody
	{
		
		/// <summary>
		/// The name of the Voice Connector group.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9 _.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9 _.-]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// Lists the Voice Connectors that inbound calls are routed to.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorItem[] VoiceConnectorItems { get; set; }
	}
	
	public class CreateVoiceProfilePostBody
	{
		
		/// <summary>
		/// The ID of the speaker search task.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string SpeakerSearchTaskId { get; set; }
	}
	
	public class CreateVoiceProfileDomainPostBody
	{
		
		/// <summary>
		/// The name of the voice profile domain.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9 _.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9 _.-]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// A description of the voice profile domain.
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>A structure that contains the configuration settings for server-side encryption.</p> <note> <p>We only support symmetric keys. Do not use asymmetric or HMAC keys, or KMS aliases.</p> </note>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateVoiceProfileDomainPostBodyServerSideEncryptionConfiguration ServerSideEncryptionConfiguration { get; set; }
		
		/// <summary>
		/// The unique identifier for the client request. Use a different token for different domain creation requests.
		/// Pattern: ^[-_a-zA-Z0-9]*$\{2,64\}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-_a-zA-Z0-9]*$\{2,64\}$")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The tags assigned to the domain.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateVoiceProfileDomainPostBodyServerSideEncryptionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyArn { get; set; }
	}
	
	public class UpdatePhoneNumberPostBody
	{
		
		/// <summary>
		/// The product type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PhoneNumberProductType ProductType { get; set; }
		
		/// <summary>
		/// The outbound calling name associated with the phone number.
		/// Pattern: ^$|^[a-zA-Z0-9 ]{2,15}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^$|^[a-zA-Z0-9 ]{2,15}$")]
		public string CallingName { get; set; }
	}
	
	public class UpdateProxySessionPostBody
	{
		
		/// <summary>
		/// The proxy session capabilities.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Capability[] Capabilities { get; set; }
		
		/// <summary>
		/// The number of minutes allowed for the proxy session.
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> ExpiryMinutes { get; set; }
	}
	
	public class UpdateSipMediaApplicationPutBody
	{
		
		/// <summary>
		/// The new name for the specified SIP media application.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9 _.-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9 _.-]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The new set of endpoints for the specified SIP media application.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public SipMediaApplicationEndpoint[] Endpoints { get; set; }
	}
	
	public class UpdateSipRulePutBody
	{
		
		/// <summary>
		/// The new name for the specified SIP rule.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9 _.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9 _.-]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The new value that indicates whether the rule is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// The new list of target applications.
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public SipRuleTargetApplication[] TargetApplications { get; set; }
	}
	
	public class UpdateVoiceConnectorPutBody
	{
		
		/// <summary>
		/// The name of the Voice Connector.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9 _.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9 _.-]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// When enabled, requires encryption for the Voice Connector.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool RequireEncryption { get; set; }
	}
	
	public class PutVoiceConnectorEmergencyCallingConfigurationPutBody
	{
		
		/// <summary>
		/// The emergency calling configuration details associated with an Amazon Chime SDK Voice Connector.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutVoiceConnectorEmergencyCallingConfigurationPutBodyEmergencyCallingConfiguration EmergencyCallingConfiguration { get; set; }
	}
	
	public class PutVoiceConnectorEmergencyCallingConfigurationPutBodyEmergencyCallingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DNISEmergencyCallingConfiguration[] DNIS { get; set; }
	}
	
	public class UpdateVoiceConnectorGroupPutBody
	{
		
		/// <summary>
		/// The name of the Voice Connector group.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9 _.-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9 _.-]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The <code>VoiceConnectorItems</code> to associate with the Voice Connector group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VoiceConnectorItem[] VoiceConnectorItems { get; set; }
	}
	
	public class PutVoiceConnectorOriginationPutBody
	{
		
		/// <summary>
		/// <p>Origination settings enable your SIP hosts to receive inbound calls using your Amazon Chime SDK Voice Connector.</p> <note> <p>The parameters listed below are not required, but you must use at least one.</p> </note>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutVoiceConnectorOriginationPutBodyOrigination Origination { get; set; }
	}
	
	public class PutVoiceConnectorOriginationPutBodyOrigination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OriginationRoute[] Routes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	public class PutVoiceConnectorProxyPutBody
	{
		
		/// <summary>
		/// The default number of minutes allowed for proxy session.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DefaultSessionExpiryMinutes { get; set; }
		
		/// <summary>
		/// The countries for proxy phone numbers to be selected from.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] PhoneNumberPoolCountries { get; set; }
		
		/// <summary>
		/// The phone number to route calls to after a proxy session expires.
		/// Pattern: ^\+?[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+?[1-9]\d{1,14}$")]
		public string FallBackPhoneNumber { get; set; }
		
		/// <summary>
		/// When true, stops proxy sessions from being created on the specified Amazon Chime SDK Voice Connector.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	public class PutVoiceConnectorStreamingConfigurationPutBody
	{
		
		/// <summary>
		/// The streaming configuration associated with an Amazon Chime SDK Voice Connector. Specifies whether media streaming is enabled for sending to Amazon Kinesis, and shows the retention period for the Amazon Kinesis data, in hours.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutVoiceConnectorStreamingConfigurationPutBodyStreamingConfiguration StreamingConfiguration { get; set; }
	}
	
	public class PutVoiceConnectorStreamingConfigurationPutBodyStreamingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DataRetentionInHours { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamingNotificationTarget[] StreamingNotificationTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MediaInsightsConfiguration MediaInsightsConfiguration { get; set; }
	}
	
	public class PutVoiceConnectorTerminationPutBody
	{
		
		/// <summary>
		/// Termination settings enable SIP hosts to make outbound calls using an Amazon Chime SDK Voice Connector.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutVoiceConnectorTerminationPutBodyTermination Termination { get; set; }
	}
	
	public class PutVoiceConnectorTerminationPutBodyTermination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CpsLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CallingRegions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CidrAllowedList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Disabled { get; set; }
	}
	
	public enum DeleteVoiceConnectorTerminationCredentialsOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delete = 0,
	}
	
	public class DeleteVoiceConnectorTerminationCredentialsPostBody
	{
		
		/// <summary>
		/// The RFC2617 compliant username associated with the SIP credentials, in US-ASCII format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Usernames { get; set; }
	}
	
	public class UpdateVoiceProfilePutBody
	{
		
		/// <summary>
		/// The ID of the speaker search task.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string SpeakerSearchTaskId { get; set; }
	}
	
	public class UpdateVoiceProfileDomainPutBody
	{
		
		/// <summary>
		/// The name of the voice profile domain.
		/// Max length: 256
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9 _.-]+
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9 _.-]+")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the voice profile domain.
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
	}
	
	public enum DisassociatePhoneNumbersFromVoiceConnectorOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disassociate-phone-numbers")]
		disassociateMinusphoneMinusnumbers = 0,
	}
	
	public class DisassociatePhoneNumbersFromVoiceConnectorPostBody
	{
		
		/// <summary>
		/// List of phone numbers, in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] E164PhoneNumbers { get; set; }
	}
	
	public enum DisassociatePhoneNumbersFromVoiceConnectorGroupOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="disassociate-phone-numbers")]
		disassociateMinusphoneMinusnumbers = 0,
	}
	
	public class DisassociatePhoneNumbersFromVoiceConnectorGroupPostBody
	{
		
		/// <summary>
		/// The list of phone numbers, in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] E164PhoneNumbers { get; set; }
	}
	
	public class UpdateGlobalSettingsPutBody
	{
		
		/// <summary>
		/// The Amazon Chime SDK Voice Connector settings. Includes any Amazon S3 buckets designated for storing call detail records.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateGlobalSettingsPutBodyVoiceConnector VoiceConnector { get; set; }
	}
	
	public class UpdateGlobalSettingsPutBodyVoiceConnector
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CdrBucket { get; set; }
	}
	
	public class UpdatePhoneNumberSettingsPutBody
	{
		
		/// <summary>
		/// The default outbound calling name for the account.
		/// Required
		/// Pattern: ^$|^[a-zA-Z0-9 ]{2,15}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^$|^[a-zA-Z0-9 ]{2,15}$")]
		public string CallingName { get; set; }
	}
	
	public class PutSipMediaApplicationAlexaSkillConfigurationPutBody
	{
		
		/// <summary>
		/// The Alexa Skill configuration of a SIP media application.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PutSipMediaApplicationAlexaSkillConfigurationPutBodySipMediaApplicationAlexaSkillConfiguration SipMediaApplicationAlexaSkillConfiguration { get; set; }
	}
	
	public class PutSipMediaApplicationAlexaSkillConfigurationPutBodySipMediaApplicationAlexaSkillConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AlexaSkillStatus AlexaSkillStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AlexaSkillIds { get; set; }
	}
	
	public class PutSipMediaApplicationLoggingConfigurationPutBody
	{
		
		/// <summary>
		/// The logging configuration of a SIP media application.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PutSipMediaApplicationLoggingConfigurationPutBodySipMediaApplicationLoggingConfiguration SipMediaApplicationLoggingConfiguration { get; set; }
	}
	
	public class PutSipMediaApplicationLoggingConfigurationPutBodySipMediaApplicationLoggingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSipMediaApplicationMessageLogs { get; set; }
	}
	
	public class PutVoiceConnectorLoggingConfigurationPutBody
	{
		
		/// <summary>
		/// The logging configuration associated with an Amazon Chime SDK Voice Connector. Specifies whether SIP message logs can be sent to Amazon CloudWatch Logs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PutVoiceConnectorLoggingConfigurationPutBodyLoggingConfiguration LoggingConfiguration { get; set; }
	}
	
	public class PutVoiceConnectorLoggingConfigurationPutBodyLoggingConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableSIPLogs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> EnableMediaMetricLogs { get; set; }
	}
	
	public enum PutVoiceConnectorTerminationCredentialsOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		put = 0,
	}
	
	public class PutVoiceConnectorTerminationCredentialsPostBody
	{
		
		/// <summary>
		/// The termination credentials being updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Credential[] Credentials { get; set; }
	}
	
	public enum RestorePhoneNumberOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		restore = 0,
	}
	
	public enum SearchAvailablePhoneNumbersType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="phone-numbers")]
		phoneMinusnumbers = 0,
	}
	
	public class StartSpeakerSearchTaskPostBody
	{
		
		/// <summary>
		/// The transaction ID of the call being analyzed.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// The ID of the voice profile domain that will store the voice profile.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string VoiceProfileDomainId { get; set; }
		
		/// <summary>
		/// The unique identifier for the client request. Use a different token for different speaker search tasks.
		/// Pattern: ^[-_a-zA-Z0-9]*$\{2,64\}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-_a-zA-Z0-9]*$\{2,64\}$")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Specifies which call leg to stream for speaker search.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CallLegType CallLeg { get; set; }
	}
	
	public class StartVoiceToneAnalysisTaskPostBody
	{
		
		/// <summary>
		/// The transaction ID.
		/// Required
		/// Max length: 256
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// The language code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartVoiceToneAnalysisTaskPostBodyLanguageCode LanguageCode { get; set; }
		
		/// <summary>
		/// The unique identifier for the client request. Use a different token for different voice tone analysis tasks.
		/// Pattern: ^[-_a-zA-Z0-9]*$\{2,64\}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[-_a-zA-Z0-9]*$\{2,64\}$")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StartVoiceToneAnalysisTaskPostBodyLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="en-US")]
		enMinusUS = 0,
	}
	
	public enum StopSpeakerSearchTaskOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stop = 0,
	}
	
	public enum TagResourceOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tag-resource")]
		tagMinusresource = 0,
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The ARN of the resource being tagged. 
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn[\/\:\-\_\.a-zA-Z0-9]+$")]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// A list of the tags being added to the resource.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	public enum UntagResourceOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="untag-resource")]
		untagMinusresource = 0,
	}
	
	public class UntagResourcePostBody
	{
		
		/// <summary>
		/// The ARN of the resource having its tags removed.
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: ^arn[\/\:\-\_\.a-zA-Z0-9]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn[\/\:\-\_\.a-zA-Z0-9]+$")]
		public string ResourceARN { get; set; }
		
		/// <summary>
		/// The keys of the tags being removed from the resource.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] TagKeys { get; set; }
	}
	
	public class UpdateSipMediaApplicationCallPostBody
	{
		
		/// <summary>
		/// Arguments made available to the Lambda function as part of the <code>CALL_UPDATE_REQUESTED</code> event. Can contain 0-20 key-value pairs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Arguments { get; set; }
	}
	
	public class ValidateE911AddressPostBody
	{
		
		/// <summary>
		/// The AWS account ID.
		/// Required
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string AwsAccountId { get; set; }
		
		/// <summary>
		/// The address street number, such as <code>200</code> or <code>2121</code>.
		/// Required
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string StreetNumber { get; set; }
		
		/// <summary>
		/// The address street information, such as <code>8th Avenue</code>.
		/// Required
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string StreetInfo { get; set; }
		
		/// <summary>
		/// The address city, such as <code>Portland</code>.
		/// Required
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string City { get; set; }
		
		/// <summary>
		/// The address state, such as <code>ME</code>.
		/// Required
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string State { get; set; }
		
		/// <summary>
		/// The country in the address being validated.
		/// Required
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string Country { get; set; }
		
		/// <summary>
		/// The dress postal code, such <code>04352</code>.
		/// Required
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string PostalCode { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
