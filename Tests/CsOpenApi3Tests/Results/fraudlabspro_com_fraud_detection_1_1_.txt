//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Feedback the status of an order transaction.
		/// V1OrderFeedbackPostByIdAndKeyAndFormatAndActionAndNotes v1/order/feedback
		/// </summary>
		/// <returns>Feedback order response</returns>
		public async Task V1OrderFeedbackPostByIdAndKeyAndFormatAndActionAndNotesAsync(string id, string key, V1OrderFeedbackPostByIdAndKeyAndFormatAndActionAndNotesFormat format, V1OrderFeedbackPostByIdAndKeyAndFormatAndActionAndNotesAction action, string notes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/order/feedback?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&format=" + format+"&action=" + action+"&notes=" + (notes==null? "" : System.Uri.EscapeDataString(notes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Screen order for payment fraud.
		/// V1OrderScreenPostByIpAndKeyAndFormatAndLast_nameAndFirst_nameAndBill_addrAndBill_cityAndBill_stateAndBill_countryAndBill_zip_codeAndShip_addrAndShip_cityAndShip_stateAndShip_countryAndShip_zip_codeAndEmail_domainAndUser_phoneAndEmailAndEmail_hashAndUsername_hashAndPassword_hashAndBin_noAndCard_hashAndAvs_resultAndCvv_resultAndUser_order_idAndUser_order_memoAndAmountAndQuantityAndCurrencyAndDepartmentAndPayment_modeAndFlp_checksum v1/order/screen
		/// </summary>
		/// <returns>Screen order response</returns>
		public async Task V1OrderScreenPostByIpAndKeyAndFormatAndLast_nameAndFirst_nameAndBill_addrAndBill_cityAndBill_stateAndBill_countryAndBill_zip_codeAndShip_addrAndShip_cityAndShip_stateAndShip_countryAndShip_zip_codeAndEmail_domainAndUser_phoneAndEmailAndEmail_hashAndUsername_hashAndPassword_hashAndBin_noAndCard_hashAndAvs_resultAndCvv_resultAndUser_order_idAndUser_order_memoAndAmountAndQuantityAndCurrencyAndDepartmentAndPayment_modeAndFlp_checksumAsync(
					string ip, 
					string key, 
					V1OrderFeedbackPostByIdAndKeyAndFormatAndActionAndNotesFormat format, 
					string last_name, 
					string first_name, 
					string bill_addr, 
					string bill_city, 
					string bill_state, 
					string bill_country, 
					string bill_zip_code, 
					string ship_addr, 
					string ship_city, 
					string ship_state, 
					string ship_country, 
					string ship_zip_code, 
					string email_domain, 
					string user_phone, 
					string email, 
					string email_hash, 
					string username_hash, 
					string password_hash, 
					string bin_no, 
					string card_hash, 
					string avs_result, 
					string cvv_result, 
					string user_order_id, 
					string user_order_memo, 
					double amount, 
					int quantity, 
					string currency, 
					string department, 
					string payment_mode, 
					string flp_checksum, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/order/screen?ip=" + (ip==null? "" : System.Uri.EscapeDataString(ip))+"&key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&format=" + format+"&last_name=" + (last_name==null? "" : System.Uri.EscapeDataString(last_name))+"&first_name=" + (first_name==null? "" : System.Uri.EscapeDataString(first_name))+"&bill_addr=" + (bill_addr==null? "" : System.Uri.EscapeDataString(bill_addr))+"&bill_city=" + (bill_city==null? "" : System.Uri.EscapeDataString(bill_city))+"&bill_state=" + (bill_state==null? "" : System.Uri.EscapeDataString(bill_state))+"&bill_country=" + (bill_country==null? "" : System.Uri.EscapeDataString(bill_country))+"&bill_zip_code=" + (bill_zip_code==null? "" : System.Uri.EscapeDataString(bill_zip_code))+"&ship_addr=" + (ship_addr==null? "" : System.Uri.EscapeDataString(ship_addr))+"&ship_city=" + (ship_city==null? "" : System.Uri.EscapeDataString(ship_city))+"&ship_state=" + (ship_state==null? "" : System.Uri.EscapeDataString(ship_state))+"&ship_country=" + (ship_country==null? "" : System.Uri.EscapeDataString(ship_country))+"&ship_zip_code=" + (ship_zip_code==null? "" : System.Uri.EscapeDataString(ship_zip_code))+"&email_domain=" + (email_domain==null? "" : System.Uri.EscapeDataString(email_domain))+"&user_phone=" + (user_phone==null? "" : System.Uri.EscapeDataString(user_phone))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&email_hash=" + (email_hash==null? "" : System.Uri.EscapeDataString(email_hash))+"&username_hash=" + (username_hash==null? "" : System.Uri.EscapeDataString(username_hash))+"&password_hash=" + (password_hash==null? "" : System.Uri.EscapeDataString(password_hash))+"&bin_no=" + (bin_no==null? "" : System.Uri.EscapeDataString(bin_no))+"&card_hash=" + (card_hash==null? "" : System.Uri.EscapeDataString(card_hash))+"&avs_result=" + (avs_result==null? "" : System.Uri.EscapeDataString(avs_result))+"&cvv_result=" + (cvv_result==null? "" : System.Uri.EscapeDataString(cvv_result))+"&user_order_id=" + (user_order_id==null? "" : System.Uri.EscapeDataString(user_order_id))+"&user_order_memo=" + (user_order_memo==null? "" : System.Uri.EscapeDataString(user_order_memo))+"&amount="+amount+"&quantity="+quantity+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&department=" + (department==null? "" : System.Uri.EscapeDataString(department))+"&payment_mode=" + (payment_mode==null? "" : System.Uri.EscapeDataString(payment_mode))+"&flp_checksum=" + (flp_checksum==null? "" : System.Uri.EscapeDataString(flp_checksum));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum V1OrderFeedbackPostByIdAndKeyAndFormatAndActionAndNotesFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xml = 1,
	}
	
	public enum V1OrderFeedbackPostByIdAndKeyAndFormatAndActionAndNotesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT_BLACKLIST = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
