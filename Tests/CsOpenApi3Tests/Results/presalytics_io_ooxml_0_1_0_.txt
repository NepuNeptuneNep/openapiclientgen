//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartAxes
	{
		
		[System.Runtime.Serialization.DataMember(Name="axisDataTypeId")]
		public System.Nullable<System.Int32> AxisDataTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chartsId")]
		public string ChartsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartAxesDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="axisDataTypeId")]
		public System.Nullable<System.Int32> AxisDataTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chart")]
		public ChartChartsDetails Chart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chartsId")]
		public string ChartsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="titleTextContainer")]
		public SharedTextContainerDetails TitleTextContainer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartChartsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="axes")]
		public ChartAxesDetails[] Axes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chartData")]
		public ChartChartDataDetails ChartData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		/// <summary>
		/// The graphics class provides a bridge between the Slides and 
		///lower level models including Charts, Tables, Pictures, and SmartArts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentGraphic")]
		public SlideGraphicsDetails ParentGraphic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentGraphicId")]
		public string ParentGraphicId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="titleTextContainer")]
		public SharedTextContainerDetails TitleTextContainer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartChartDataDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="chart")]
		public ChartChartsDetails Chart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chartId")]
		public string ChartId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columnCollection")]
		public ChartColumnCollectionsDetails ColumnCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPoints")]
		public ChartDataPointsDetails[] DataPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowCollection")]
		public ChartRowCollectionsDetails RowCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartColumnCollectionsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="chartData")]
		public ChartChartDataDetails ChartData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chartDataId")]
		public string ChartDataId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public ChartColumnsDetails[] Columns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartColumnsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="axis")]
		public ChartAxesDetails Axis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="axisId")]
		public string AxisId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columnCollection")]
		public ChartColumnCollectionsDetails ColumnCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columnCollectionId")]
		public string ColumnCollectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartDataPointsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="chartData")]
		public ChartChartDataDetails ChartData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chartDataId")]
		public string ChartDataId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="column")]
		public ChartColumnsDetails Column { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columnId")]
		public string ColumnId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="row")]
		public ChartRowsDetails Row { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowId")]
		public string RowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartRowsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowNameCollection")]
		public ChartRowCollectionsDetails RowNameCollection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowNameCollectionId")]
		public string RowNameCollectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartRowCollectionsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="axis")]
		public ChartAxesDetails Axis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="axisId")]
		public string AxisId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chartData")]
		public ChartChartDataDetails ChartData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chartDataId")]
		public string ChartDataId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameFormatType")]
		public System.Nullable<System.Int32> NameFormatType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public ChartRowsDetails[] Rows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	/// <summary>
	/// The graphics class provides a bridge between the Slides and 
	///lower level models including Charts, Tables, Pictures, and SmartArts
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideGraphicsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="chart")]
		public ChartChartsDetails Chart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="graphicTypeId")]
		public System.Nullable<System.Int32> GraphicTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElement")]
		public SlideGroupElementsDetails GroupElement { get; set; }
		
		/// <summary>
		/// Foreign key to the GroupElements object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupElementsId")]
		public string GroupElementsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public SharedPicturesDetails Picture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smartArt")]
		public SlideSmartArtsDetails SmartArt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="table")]
		public TableTablesDetails Table { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xOffset")]
		public System.Nullable<System.Int32> XOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yOffset")]
		public System.Nullable<System.Int32> YOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideGroupElementsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="childGroupElements")]
		public SlideGroupElementsDetails[] ChildGroupElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connector")]
		public SlideConnectorDetails Connector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		/// <summary>
		/// The graphics class provides a bridge between the Slides and 
		///lower level models including Charts, Tables, Pictures, and SmartArts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="graphic")]
		public SlideGraphicsDetails Graphic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public SlideGroupsDetails Group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElementTypeId")]
		public System.Nullable<System.Int32> GroupElementTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElementTypePk")]
		public string GroupElementTypePk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentGroupElement")]
		public SlideGroupElementsDetails ParentGroupElement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentGroupElementId")]
		public string ParentGroupElementId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public SlideShapesDetails Shape { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shapeTree")]
		public SlideShapeTreesDetails ShapeTree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shapeTreeId")]
		public string ShapeTreeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeInfo")]
		public SlideGroupElementTypesDetails TypeInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ultimateParentShapeTreeId")]
		public string UltimateParentShapeTreeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideConnectorDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effect")]
		public SharedEffectsDetails Effect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endConnectionIdx")]
		public System.Nullable<System.Int32> EndConnectionIdx { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endConnectionShape")]
		public SlideShapesDetails EndConnectionShape { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endConnectionShapeId")]
		public string EndConnectionShapeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMap")]
		public SharedFillMapDetails FillMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flipHorizontal")]
		public System.Nullable<System.Boolean> FlipHorizontal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flipVertical")]
		public System.Nullable<System.Boolean> FlipVertical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeFormPathXml")]
		public string FreeFormPathXml { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElement")]
		public SlideGroupElementsDetails GroupElement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElementsId")]
		public string GroupElementsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeEffect")]
		public System.Nullable<System.Boolean> IsThemeEffect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeFill")]
		public System.Nullable<System.Boolean> IsThemeFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeLine")]
		public System.Nullable<System.Boolean> IsThemeLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line")]
		public SharedLinesDetails Line { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presetTypeId")]
		public string PresetTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotation")]
		public System.Nullable<System.Int32> Rotation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startConnectionIdx")]
		public System.Nullable<System.Int32> StartConnectionIdx { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startConnectionShape")]
		public SlideShapesDetails StartConnectionShape { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startConnectionShapeId")]
		public string StartConnectionShapeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedEffectsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorId")]
		public string ConnectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectAttributes")]
		public SharedEffectAttributesDetails[] EffectAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectMap")]
		public ThemeEffectMapDetails EffectMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectMapId")]
		public string EffectMapId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentConnector")]
		public SlideConnectorDetails ParentConnector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentShape")]
		public SlideShapesDetails ParentShape { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shapeId")]
		public string ShapeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedEffectAttributesDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributesJson")]
		public string AttributesJson { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effect")]
		public SharedEffectsDetails Effect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectId")]
		public string EffectId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectTypeId")]
		public System.Nullable<System.Int32> EffectTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMap")]
		public SharedFillMapDetails FillMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedFillMapDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="connector")]
		public SlideConnectorDetails Connector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorId")]
		public string ConnectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectAttribute")]
		public SharedEffectAttributesDetails EffectAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectAttributeId")]
		public string EffectAttributeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillTypeId")]
		public System.Nullable<System.Int32> FillTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gradientFill")]
		public SharedGradientFillsDetails GradientFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageFill")]
		public SharedImageFillsDetails ImageFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public SlideShapesDetails Shape { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shapeId")]
		public string ShapeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="solidFill")]
		public SharedSolidFillsDetails SolidFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableCell")]
		public TableCellsDetails TableCell { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableCellId")]
		public string TableCellId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeBackgroundFill")]
		public ThemeBackgroundFillsDetails ThemeBackgroundFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeBackgroundFillId")]
		public string ThemeBackgroundFillId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeFill")]
		public ThemeFillsDetails ThemeFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeFillId")]
		public string ThemeFillId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedGradientFillsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="angle")]
		public System.Nullable<System.Int32> Angle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMap")]
		public SharedFillMapDetails FillMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMapId")]
		public string FillMapId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gradientStops")]
		public SharedGradientStopsDetails[] GradientStops { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPath")]
		public System.Nullable<System.Boolean> IsPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pathType")]
		public string PathType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotateWithShape")]
		public System.Nullable<System.Boolean> RotateWithShape { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedGradientStopsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gradientFill")]
		public SharedGradientFillsDetails GradientFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gradientFillsId")]
		public string GradientFillsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="solidFill")]
		public SharedSolidFillsDetails SolidFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedSolidFillsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorTransformations")]
		public SharedColorTransformationsDetails ColorTransformations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="colorTypeId")]
		public System.Nullable<System.Int32> ColorTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMapId")]
		public string FillMapId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hexValue")]
		public string HexValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isUserColor")]
		public System.Nullable<System.Boolean> IsUserColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentFillMap")]
		public SharedFillMapDetails ParentFillMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentGradientStop")]
		public SharedGradientStopsDetails ParentGradientStop { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentGradientStopId")]
		public string ParentGradientStopId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentLine")]
		public SharedLinesDetails ParentLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentLineId")]
		public string ParentLineId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentText")]
		public SharedTextDetails ParentText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentTextId")]
		public string ParentTextId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedColorTransformationsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorTransformationAttributes")]
		public SharedColorTransformationAttributesDetails[] ColorTransformationAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSolidFill")]
		public SharedSolidFillsDetails ParentSolidFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="solidFillsId")]
		public string SolidFillsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedColorTransformationAttributesDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorTransformation")]
		public SharedColorTransformationsDetails ColorTransformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="colorTransformationsId")]
		public string ColorTransformationsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedLinesDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="bLtoTRBorder")]
		public TableBordersDetails BLtoTRBorder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bLtoTRBorderId")]
		public string BLtoTRBorderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bottomBorder")]
		public TableBordersDetails BottomBorder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bottomBorderId")]
		public string BottomBorderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorId")]
		public string ConnectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dashTypeId")]
		public System.Nullable<System.Int32> DashTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headEndHeightId")]
		public System.Nullable<System.Int32> HeadEndHeightId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headEndTypeId")]
		public System.Nullable<System.Int32> HeadEndTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headEndWidthId")]
		public System.Nullable<System.Int32> HeadEndWidthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leftBorder")]
		public TableBordersDetails LeftBorder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leftBorderId")]
		public string LeftBorderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineColorSolidFill")]
		public SharedSolidFillsDetails LineColorSolidFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineMap")]
		public ThemeLineMapDetails LineMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineMapId")]
		public string LineMapId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentConnector")]
		public SlideConnectorDetails ParentConnector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentShape")]
		public SlideShapesDetails ParentShape { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rightBorder")]
		public TableBordersDetails RightBorder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rightBorderId")]
		public string RightBorderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shapeId")]
		public string ShapeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tLtoBRBorder")]
		public TableBordersDetails TLtoBRBorder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tLtoBRBorderId")]
		public string TLtoBRBorderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tailEndHeightId")]
		public System.Nullable<System.Int32> TailEndHeightId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tailEndTypeId")]
		public System.Nullable<System.Int32> TailEndTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tailEndWidthId")]
		public System.Nullable<System.Int32> TailEndWidthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topBorder")]
		public TableBordersDetails TopBorder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topBorderId")]
		public string TopBorderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableBordersDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="bLtoTR")]
		public SharedLinesDetails BLtoTR { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bottom")]
		public SharedLinesDetails Bottom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cell")]
		public TableCellsDetails Cell { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cellId")]
		public string CellId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="left")]
		public SharedLinesDetails Left { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="right")]
		public SharedLinesDetails Right { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tLtoBR")]
		public SharedLinesDetails TLtoBR { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="top")]
		public SharedLinesDetails Top { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableCellsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="border")]
		public TableBordersDetails Border { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="column")]
		public TableColumnsDetails Column { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columnId")]
		public string ColumnId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columnSpan")]
		public System.Nullable<System.Int32> ColumnSpan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMap")]
		public SharedFillMapDetails FillMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isMergedHorozontal")]
		public System.Nullable<System.Boolean> IsMergedHorozontal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isMergedVertical")]
		public System.Nullable<System.Boolean> IsMergedVertical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="row")]
		public TableRowsDetails Row { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowId")]
		public string RowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowSpan")]
		public System.Nullable<System.Int32> RowSpan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textContainer")]
		public SharedTextContainerDetails TextContainer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableColumnsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="cells")]
		public TableCellsDetails[] Cells { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="table")]
		public TableTablesDetails Table { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int64> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableTablesDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cells")]
		public TableCellsDetails[] Cells { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public TableColumnsDetails[] Columns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasStylePart")]
		public System.Nullable<System.Boolean> HasStylePart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		/// <summary>
		/// The graphics class provides a bridge between the Slides and 
		///lower level models including Charts, Tables, Pictures, and SmartArts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentGraphic")]
		public SlideGraphicsDetails ParentGraphic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentGraphicId")]
		public string ParentGraphicId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public TableRowsDetails[] Rows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stylePartOuterXml")]
		public string StylePartOuterXml { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableRowsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="cells")]
		public TableCellsDetails[] Cells { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int64> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="table")]
		public TableTablesDetails Table { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedTextContainerDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="axis")]
		public ChartAxesDetails Axis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="axisId")]
		public string AxisId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chart")]
		public ChartChartsDetails Chart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chartId")]
		public string ChartId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outerXml")]
		public string OuterXml { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paragraphs")]
		public SharedParagraphDetails[] Paragraphs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentShape")]
		public SlideShapesDetails ParentShape { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shapeId")]
		public string ShapeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableCell")]
		public TableCellsDetails TableCell { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableCellId")]
		public string TableCellId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedParagraphDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public SharedTextDetails[] Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textContainer")]
		public SharedTextContainerDetails TextContainer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textContainerId")]
		public string TextContainerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedTextDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorSolidFill")]
		public SharedSolidFillsDetails ColorSolidFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="colorSolidFillsId")]
		public string ColorSolidFillsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="font")]
		public string Font { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fontSize")]
		public System.Nullable<System.Int32> FontSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBold")]
		public System.Nullable<System.Boolean> IsBold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isItalic")]
		public System.Nullable<System.Boolean> IsItalic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeFont")]
		public System.Nullable<System.Boolean> IsThemeFont { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isUnderline")]
		public System.Nullable<System.Boolean> IsUnderline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paragraph")]
		public SharedParagraphDetails Paragraph { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paragraphId")]
		public string ParagraphId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawText")]
		public string RawText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sequence")]
		public System.Nullable<System.Int32> Sequence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideShapesDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effect")]
		public SharedEffectsDetails Effect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMap")]
		public SharedFillMapDetails FillMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flipHorizontal")]
		public System.Nullable<System.Boolean> FlipHorizontal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flipVertical")]
		public System.Nullable<System.Boolean> FlipVertical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeFormPathXml")]
		public string FreeFormPathXml { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElement")]
		public SlideGroupElementsDetails GroupElement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElementsId")]
		public string GroupElementsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeEffect")]
		public System.Nullable<System.Boolean> IsThemeEffect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeFill")]
		public System.Nullable<System.Boolean> IsThemeFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeLine")]
		public System.Nullable<System.Boolean> IsThemeLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line")]
		public SharedLinesDetails Line { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presetTypeId")]
		public string PresetTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotation")]
		public System.Nullable<System.Int32> Rotation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textContainer")]
		public SharedTextContainerDetails TextContainer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xOffset")]
		public System.Nullable<System.Int32> XOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yOffset")]
		public System.Nullable<System.Int32> YOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeLineMapDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intensityId")]
		public System.Nullable<System.Int32> IntensityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line")]
		public SharedLinesDetails Line { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public ThemeThemesDetails Theme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeThemesDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="backgroundFills")]
		public ThemeBackgroundFillsDetails[] BackgroundFills { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public ThemeColorsDetails Colors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customColors")]
		public ThemeCustomColorsDetails[] CustomColors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectMaps")]
		public ThemeEffectMapDetails[] EffectMaps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fills")]
		public ThemeFillsDetails[] Fills { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fonts")]
		public ThemeFontsDetails Fonts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineMaps")]
		public ThemeLineMapDetails[] LineMaps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slide")]
		public SlideSlidesDetails Slide { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideId")]
		public string SlideId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeBackgroundFillsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMap")]
		public SharedFillMapDetails FillMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intensityId")]
		public System.Nullable<System.Int32> IntensityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public ThemeThemesDetails Theme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeColorsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="accent1")]
		public string Accent1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent2")]
		public string Accent2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent3")]
		public string Accent3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent4")]
		public string Accent4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent5")]
		public string Accent5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent6")]
		public string Accent6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dark1")]
		public string Dark1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dark2")]
		public string Dark2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="followedHyperlink")]
		public string FollowedHyperlink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hyperlink")]
		public string Hyperlink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="light1")]
		public string Light1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="light2")]
		public string Light2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public ThemeThemesDetails Theme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeCustomColorsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hexValue")]
		public string HexValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public ThemeThemesDetails Theme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeEffectMapDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effect")]
		public SharedEffectsDetails Effect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intensityId")]
		public System.Nullable<System.Int32> IntensityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public ThemeThemesDetails Theme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeFillsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMap")]
		public SharedFillMapDetails FillMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intensityId")]
		public System.Nullable<System.Int32> IntensityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public ThemeThemesDetails Theme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeFontsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="bodyFont")]
		public string BodyFont { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headingFont")]
		public string HeadingFont { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public ThemeThemesDetails Theme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideSlidesDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public DocumentDetails Document { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentId")]
		public string DocumentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shapeTree")]
		public SlideShapeTreesDetails ShapeTree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideDocumentUrl")]
		public string SlideDocumentUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideMaster")]
		public SlideSlideMastersDetails SlideMaster { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public ThemeThemesDetails Theme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blobLocation")]
		public string BlobLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentTypeId")]
		public System.Nullable<System.Int32> DocumentTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerGuid")]
		public string OwnerGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slides")]
		public SlideSlidesDetails[] Slides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storyId")]
		public string StoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableStylesXmlBlobUrl")]
		public string TableStylesXmlBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideShapeTreesDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElement")]
		public SlideGroupElementsDetails GroupElement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElementId")]
		public string GroupElementId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElements")]
		public SlideGroupElementsDetails[] GroupElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slide")]
		public SlideSlidesDetails Slide { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideId")]
		public string SlideId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideSlideMastersDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorMap")]
		public SlideColorMapsDetails ColorMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSlide")]
		public SlideSlidesDetails ParentSlide { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideId")]
		public string SlideId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideColorMapsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="accent1")]
		public System.Nullable<System.Int32> Accent1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent2")]
		public System.Nullable<System.Int32> Accent2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent3")]
		public System.Nullable<System.Int32> Accent3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent4")]
		public System.Nullable<System.Int32> Accent4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent5")]
		public System.Nullable<System.Int32> Accent5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent6")]
		public System.Nullable<System.Int32> Accent6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="background1")]
		public System.Nullable<System.Int32> Background1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="background2")]
		public System.Nullable<System.Int32> Background2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="followedHyperlink")]
		public System.Nullable<System.Int32> FollowedHyperlink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hyperlink")]
		public System.Nullable<System.Int32> Hyperlink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideMaster")]
		public SlideSlideMastersDetails SlideMaster { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideMasterId")]
		public string SlideMasterId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text1")]
		public System.Nullable<System.Int32> Text1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text2")]
		public System.Nullable<System.Int32> Text2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedImageFillsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="compressionState")]
		public string CompressionState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dpi")]
		public System.Nullable<System.Int32> Dpi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectsJson")]
		public string EffectsJson { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMap")]
		public SharedFillMapDetails FillMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMapId")]
		public string FillMapId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public SharedPicturesDetails Picture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotateWithShape")]
		public System.Nullable<System.Boolean> RotateWithShape { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceRectangle")]
		public string SourceRectangle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stretch")]
		public System.Nullable<System.Boolean> Stretch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tile")]
		public string Tile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedPicturesDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileExtension")]
		public string FileExtension { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="graphicsId")]
		public string GraphicsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageFileBlobUrl")]
		public string ImageFileBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageFill")]
		public SharedImageFillsDetails ImageFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageFillsId")]
		public string ImageFillsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		/// <summary>
		/// The graphics class provides a bridge between the Slides and 
		///lower level models including Charts, Tables, Pictures, and SmartArts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentGraphic")]
		public SlideGraphicsDetails ParentGraphic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideGroupsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElement")]
		public SlideGroupElementsDetails GroupElement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElementId")]
		public string GroupElementId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideGroupElementTypesDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideSmartArtsDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="graphicsId")]
		public string GraphicsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		/// <summary>
		/// The graphics class provides a bridge between the Slides and 
		///lower level models including Charts, Tables, Pictures, and SmartArts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentGraphic")]
		public SlideGraphicsDetails ParentGraphic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCreated")]
		public string UserCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userModified")]
		public string UserModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartAxisDataTypes
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlName")]
		public string OoxmlName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartChartData
	{
		
		[System.Runtime.Serialization.DataMember(Name="chartId")]
		public string ChartId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartChartDataDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="categoryNames")]
		public string[] CategoryNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chartId")]
		public string ChartId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataPoints")]
		public string[] DataPoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seriesNames")]
		public string[] SeriesNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartCharts
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentGraphicId")]
		public string ParentGraphicId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartColumnCollections
	{
		
		[System.Runtime.Serialization.DataMember(Name="chartDataId")]
		public string ChartDataId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartColumns
	{
		
		[System.Runtime.Serialization.DataMember(Name="axisId")]
		public string AxisId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columnCollectionId")]
		public string ColumnCollectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartDataPoints
	{
		
		[System.Runtime.Serialization.DataMember(Name="chartDataId")]
		public string ChartDataId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columnId")]
		public string ColumnId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowId")]
		public string RowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartPlotType
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plotQualifedAssy")]
		public string PlotQualifedAssy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plotTypeName")]
		public string PlotTypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowColTypeId")]
		public System.Nullable<System.Int32> RowColTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartRowCol
	{
		
		[System.Runtime.Serialization.DataMember(Name="colName")]
		public string ColName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="colQualifiedAssy")]
		public string ColQualifiedAssy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowName")]
		public string RowName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowQualifedAssy")]
		public string RowQualifedAssy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartRowCollections
	{
		
		[System.Runtime.Serialization.DataMember(Name="axisId")]
		public string AxisId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chartDataId")]
		public string ChartDataId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameFormatType")]
		public System.Nullable<System.Int32> NameFormatType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartRowNameFormatTypes
	{
		
		[System.Runtime.Serialization.DataMember(Name="formatCode")]
		public string FormatCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="powerToolsId")]
		public System.Nullable<System.Int32> PowerToolsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartRows
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowNameCollectionId")]
		public string RowNameCollectionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChildObjects
	{
		
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityName")]
		public string EntityName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public string ObjectType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentEntityId")]
		public string ParentEntityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentObjectType")]
		public string ParentObjectType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Document
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blobLocation")]
		public string BlobLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentTypeId")]
		public System.Nullable<System.Int32> DocumentTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerGuid")]
		public string OwnerGuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storyId")]
		public string StoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableStylesXmlBlobUrl")]
		public string TableStylesXmlBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentCloneDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storyId")]
		public string StoryId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentType
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileExtension")]
		public string FileExtension { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlPackageType")]
		public string OoxmlPackageType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OoxmlDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openOfficeXml")]
		public string OpenOfficeXml { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProblemDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedColorTransformationAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorTransformationsId")]
		public string ColorTransformationsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedColorTransformations
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="solidFillsId")]
		public string SolidFillsId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedColorTypes
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorSchemeIndexValueEnum")]
		public System.Nullable<System.Int32> ColorSchemeIndexValueEnum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedDashTypes
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serializedAs")]
		public string SerializedAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedEffectAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributesJson")]
		public string AttributesJson { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectId")]
		public string EffectId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectTypeId")]
		public System.Nullable<System.Int32> EffectTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedEffectTypes
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedEffects
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorId")]
		public string ConnectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectMapId")]
		public string EffectMapId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shapeId")]
		public string ShapeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedFillMap
	{
		
		[System.Runtime.Serialization.DataMember(Name="connectorId")]
		public string ConnectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectAttributeId")]
		public string EffectAttributeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillTypeId")]
		public System.Nullable<System.Int32> FillTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shapeId")]
		public string ShapeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableCellId")]
		public string TableCellId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeBackgroundFillId")]
		public string ThemeBackgroundFillId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeFillId")]
		public string ThemeFillId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedFillTypes
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedGradientFills
	{
		
		[System.Runtime.Serialization.DataMember(Name="angle")]
		public System.Nullable<System.Int32> Angle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMapId")]
		public string FillMapId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPath")]
		public System.Nullable<System.Boolean> IsPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pathType")]
		public string PathType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotateWithShape")]
		public System.Nullable<System.Boolean> RotateWithShape { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedGradientStops
	{
		
		[System.Runtime.Serialization.DataMember(Name="gradientFillsId")]
		public string GradientFillsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedImageFills
	{
		
		[System.Runtime.Serialization.DataMember(Name="compressionState")]
		public string CompressionState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dpi")]
		public System.Nullable<System.Int32> Dpi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectsJson")]
		public string EffectsJson { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMapId")]
		public string FillMapId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotateWithShape")]
		public System.Nullable<System.Boolean> RotateWithShape { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceRectangle")]
		public string SourceRectangle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stretch")]
		public System.Nullable<System.Boolean> Stretch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tile")]
		public string Tile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedLineEndSizes
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serializedAs")]
		public string SerializedAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedLineEndTypes
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serializedAs")]
		public string SerializedAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedLines
	{
		
		[System.Runtime.Serialization.DataMember(Name="bLtoTRBorderId")]
		public string BLtoTRBorderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bottomBorderId")]
		public string BottomBorderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connectorId")]
		public string ConnectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dashTypeId")]
		public System.Nullable<System.Int32> DashTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headEndHeightId")]
		public System.Nullable<System.Int32> HeadEndHeightId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headEndTypeId")]
		public System.Nullable<System.Int32> HeadEndTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headEndWidthId")]
		public System.Nullable<System.Int32> HeadEndWidthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leftBorderId")]
		public string LeftBorderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineMapId")]
		public string LineMapId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rightBorderId")]
		public string RightBorderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shapeId")]
		public string ShapeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tLtoBRBorderId")]
		public string TLtoBRBorderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tailEndHeightId")]
		public System.Nullable<System.Int32> TailEndHeightId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tailEndTypeId")]
		public System.Nullable<System.Int32> TailEndTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tailEndWidthId")]
		public System.Nullable<System.Int32> TailEndWidthId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topBorderId")]
		public string TopBorderId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedParagraph
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textContainerId")]
		public string TextContainerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedPictures
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileExtension")]
		public string FileExtension { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="graphicsId")]
		public string GraphicsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageFileBlobUrl")]
		public string ImageFileBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageFillsId")]
		public string ImageFillsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedSolidFills
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorTypeId")]
		public System.Nullable<System.Int32> ColorTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fillMapId")]
		public string FillMapId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hexValue")]
		public string HexValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isUserColor")]
		public System.Nullable<System.Boolean> IsUserColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentGradientStopId")]
		public string ParentGradientStopId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentLineId")]
		public string ParentLineId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentTextId")]
		public string ParentTextId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedText
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorSolidFillsId")]
		public string ColorSolidFillsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="font")]
		public string Font { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fontSize")]
		public System.Nullable<System.Int32> FontSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isBold")]
		public System.Nullable<System.Boolean> IsBold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isItalic")]
		public System.Nullable<System.Boolean> IsItalic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeFont")]
		public System.Nullable<System.Boolean> IsThemeFont { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isUnderline")]
		public System.Nullable<System.Boolean> IsUnderline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paragraphId")]
		public string ParagraphId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawText")]
		public string RawText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sequence")]
		public System.Nullable<System.Int32> Sequence { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SharedTextContainer
	{
		
		[System.Runtime.Serialization.DataMember(Name="axisId")]
		public string AxisId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chartId")]
		public string ChartId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outerXml")]
		public string OuterXml { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shapeId")]
		public string ShapeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableCellId")]
		public string TableCellId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideColorMaps
	{
		
		[System.Runtime.Serialization.DataMember(Name="accent1")]
		public System.Nullable<System.Int32> Accent1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent2")]
		public System.Nullable<System.Int32> Accent2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent3")]
		public System.Nullable<System.Int32> Accent3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent4")]
		public System.Nullable<System.Int32> Accent4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent5")]
		public System.Nullable<System.Int32> Accent5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent6")]
		public System.Nullable<System.Int32> Accent6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="background1")]
		public System.Nullable<System.Int32> Background1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="background2")]
		public System.Nullable<System.Int32> Background2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="followedHyperlink")]
		public System.Nullable<System.Int32> FollowedHyperlink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hyperlink")]
		public System.Nullable<System.Int32> Hyperlink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideMasterId")]
		public string SlideMasterId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text1")]
		public System.Nullable<System.Int32> Text1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text2")]
		public System.Nullable<System.Int32> Text2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideConnector
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endConnectionIdx")]
		public System.Nullable<System.Int32> EndConnectionIdx { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endConnectionShapeId")]
		public string EndConnectionShapeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flipHorizontal")]
		public System.Nullable<System.Boolean> FlipHorizontal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flipVertical")]
		public System.Nullable<System.Boolean> FlipVertical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeFormPathXml")]
		public string FreeFormPathXml { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElementsId")]
		public string GroupElementsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeEffect")]
		public System.Nullable<System.Boolean> IsThemeEffect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeFill")]
		public System.Nullable<System.Boolean> IsThemeFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeLine")]
		public System.Nullable<System.Boolean> IsThemeLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presetTypeId")]
		public string PresetTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotation")]
		public System.Nullable<System.Int32> Rotation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startConnectionIdx")]
		public System.Nullable<System.Int32> StartConnectionIdx { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startConnectionShapeId")]
		public string StartConnectionShapeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideGraphicTypes
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideGraphics
	{
		
		[System.Runtime.Serialization.DataMember(Name="graphicTypeId")]
		public System.Nullable<System.Int32> GraphicTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElementsId")]
		public string GroupElementsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xOffset")]
		public System.Nullable<System.Int32> XOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yOffset")]
		public System.Nullable<System.Int32> YOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideGroupElementTypes
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideGroupElements
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupElementTypeId")]
		public System.Nullable<System.Int32> GroupElementTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElementTypePk")]
		public string GroupElementTypePk { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentGroupElementId")]
		public string ParentGroupElementId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shapeTreeId")]
		public string ShapeTreeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ultimateParentShapeTreeId")]
		public string UltimateParentShapeTreeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideGroups
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElementId")]
		public string GroupElementId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideShapeTrees
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElementId")]
		public string GroupElementId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideId")]
		public string SlideId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideShapes
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flipHorizontal")]
		public System.Nullable<System.Boolean> FlipHorizontal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flipVertical")]
		public System.Nullable<System.Boolean> FlipVertical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="freeFormPathXml")]
		public string FreeFormPathXml { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupElementsId")]
		public string GroupElementsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeEffect")]
		public System.Nullable<System.Boolean> IsThemeEffect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeFill")]
		public System.Nullable<System.Boolean> IsThemeFill { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isThemeLine")]
		public System.Nullable<System.Boolean> IsThemeLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presetTypeId")]
		public string PresetTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotation")]
		public System.Nullable<System.Int32> Rotation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xOffset")]
		public System.Nullable<System.Int32> XOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yOffset")]
		public System.Nullable<System.Int32> YOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideSlideMasters
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideId")]
		public string SlideId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideSlides
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentId")]
		public string DocumentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ooxmlId")]
		public System.Nullable<System.Int32> OoxmlId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideDocumentUrl")]
		public string SlideDocumentUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlideSmartArts
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="graphicsId")]
		public string GraphicsId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableBorders
	{
		
		[System.Runtime.Serialization.DataMember(Name="cellId")]
		public string CellId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableCells
	{
		
		[System.Runtime.Serialization.DataMember(Name="columnId")]
		public string ColumnId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columnSpan")]
		public System.Nullable<System.Int32> ColumnSpan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isMergedHorozontal")]
		public System.Nullable<System.Boolean> IsMergedHorozontal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isMergedVertical")]
		public System.Nullable<System.Boolean> IsMergedVertical { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowId")]
		public string RowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rowSpan")]
		public System.Nullable<System.Int32> RowSpan { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableColumns
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int64> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableRows
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int64> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableTableDataDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="tableData")]
		public string[] TableData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableTables
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasStylePart")]
		public System.Nullable<System.Boolean> HasStylePart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentGraphicId")]
		public string ParentGraphicId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stylePartOuterXml")]
		public string StylePartOuterXml { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svgBlobUrl")]
		public string SvgBlobUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeBackgroundFills
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intensityId")]
		public System.Nullable<System.Int32> IntensityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeColors
	{
		
		[System.Runtime.Serialization.DataMember(Name="accent1")]
		public string Accent1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent2")]
		public string Accent2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent3")]
		public string Accent3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent4")]
		public string Accent4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent5")]
		public string Accent5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accent6")]
		public string Accent6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dark1")]
		public string Dark1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dark2")]
		public string Dark2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="followedHyperlink")]
		public string FollowedHyperlink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hyperlink")]
		public string Hyperlink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="light1")]
		public string Light1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="light2")]
		public string Light2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeCustomColors
	{
		
		[System.Runtime.Serialization.DataMember(Name="hexValue")]
		public string HexValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeEffectMap
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intensityId")]
		public System.Nullable<System.Int32> IntensityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeFills
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intensityId")]
		public System.Nullable<System.Int32> IntensityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeFonts
	{
		
		[System.Runtime.Serialization.DataMember(Name="bodyFont")]
		public string BodyFont { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headingFont")]
		public string HeadingFont { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeIntensity
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeId")]
		public System.Nullable<System.Int32> TypeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeLineMap
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intensityId")]
		public System.Nullable<System.Int32> IntensityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeThemes
	{
		
		[System.Runtime.Serialization.DataMember(Name="baseElementBlobUrl")]
		public string BaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="changedBaseElementBlobUrl")]
		public string ChangedBaseElementBlobUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageUri")]
		public string PackageUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideId")]
		public string SlideId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Axes: Get by Id
		/// Get by Id: Use this method to retrieve a Axes object by its primary key (id)
		/// Chart_axes_get_id Charts/Axes/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartAxes> Chart_axes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/Axes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartAxes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// AxisDataTypes: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the AxisDataTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Chart object space.
		/// Chart_axisdatatypes_get Charts/AxisDataTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartAxisDataTypes[]> Chart_axisdatatypes_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/AxisDataTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartAxisDataTypes[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// AxisDataTypes: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Chart_axisdatatypes_typeid_get_type_id Charts/AxisDataTypes/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartAxisDataTypes> Chart_axisdatatypes_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/AxisDataTypes/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartAxisDataTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// AxisDataTypes: Get by Id
		/// Get by Id: Use this method to retrieve a AxisDataTypes object by its primary key (id)
		/// Chart_axisdatatypes_get_id Charts/AxisDataTypes/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartAxisDataTypes> Chart_axisdatatypes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/AxisDataTypes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartAxisDataTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ChartData: Get by Id
		/// Get by Id: Use this method to retrieve a ChartData object by its primary key (id)
		/// Chart_chartdata_get_id Charts/ChartData/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartChartData> Chart_chartdata_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/ChartData/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartChartData>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charts: Get Chart Data
		/// Gets a ChartDataDTO object, usually used for downstream analytics and chart updates
		/// Charts_charts_chartupdate_get_id Charts/ChartUpdate/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartChartDataDTO> Charts_charts_chartupdate_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/ChartUpdate/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartChartDataDTO>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charts: Update Chart Data
		/// Simplifies chart update by allowing users to supply data via ChartDataDTO
		/// Charts_charts_chartupdate_put_id Charts/ChartUpdate/{id}
		/// </summary>
		/// <param name="id">The Chart Id</param>
		/// <param name="requestBody">The ChartDataDto Object</param>
		/// <returns>Success</returns>
		public async Task Charts_charts_chartupdate_put_idAsync(string id, ChartChartDataDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/ChartUpdate/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charts: Get Dependent Objects Tree
		/// This endpoint is helpful for helping users and bots identify dependent objects to this Chart and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
		/// Charts_charts_childobjects_get_id Charts/ChildObjects/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChildObjects[]> Charts_charts_childobjects_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/ChildObjects/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChildObjects[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ColumnCollections: Get by Id
		/// Get by Id: Use this method to retrieve a ColumnCollections object by its primary key (id)
		/// Chart_columncollections_get_id Charts/ColumnCollections/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartColumnCollections> Chart_columncollections_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/ColumnCollections/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartColumnCollections>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Columns: Get by Id
		/// Get by Id: Use this method to retrieve a Columns object by its primary key (id)
		/// Chart_columns_get_id Charts/Columns/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartColumns> Chart_columns_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/Columns/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartColumns>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DataPoints: Get by Id
		/// Get by Id: Use this method to retrieve a DataPoints object by its primary key (id)
		/// Chart_datapoints_get_id Charts/DataPoints/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartDataPoints> Chart_datapoints_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/DataPoints/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartDataPoints>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charts: Get Details
		/// Returns object metadata and information about relative dependent objects
		/// Charts_charts_details_get_id Charts/Details/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartChartsDetails> Charts_charts_details_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/Details/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartChartsDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charts: Get Underlying Xml
		/// Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Chart object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Chart objects.
		/// Charts_charts_openofficexml_get_id_updated Charts/OpenOfficeXml/{id}
		/// </summary>
		/// <param name="updated">Indicates whether API should return the orginal uploaded xml (false) or the actively updated version (true, default)</param>
		/// <returns>Success</returns>
		public async Task<OoxmlDTO> Charts_charts_openofficexml_get_id_updatedAsync(string id, bool updated, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updated="+updated;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OoxmlDTO>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charts: Modify Underlying Xml
		/// Directly eidt the underlying xml of a Chart object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Chart objects.
		/// Charts_charts_openofficexml_put_id Charts/OpenOfficeXml/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task Charts_charts_openofficexml_put_idAsync(string id, OoxmlDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PlotType: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the PlotType type. Use the Id from oneof the returned elements on to make changes to elements in the Chart object space.
		/// Chart_plottype_get Charts/PlotType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartPlotType[]> Chart_plottype_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/PlotType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartPlotType[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PlotType: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Chart_plottype_typeid_get_type_id Charts/PlotType/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartPlotType> Chart_plottype_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/PlotType/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartPlotType>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PlotType: Get by Id
		/// Get by Id: Use this method to retrieve a PlotType object by its primary key (id)
		/// Chart_plottype_get_id Charts/PlotType/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartPlotType> Chart_plottype_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/PlotType/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartPlotType>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RowCol: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the RowCol type. Use the Id from oneof the returned elements on to make changes to elements in the Chart object space.
		/// Chart_rowcol_get Charts/RowCol
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartRowCol[]> Chart_rowcol_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/RowCol";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartRowCol[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RowCol: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Chart_rowcol_typeid_get_type_id Charts/RowCol/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartRowCol> Chart_rowcol_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/RowCol/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartRowCol>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RowCol: Get by Id
		/// Get by Id: Use this method to retrieve a RowCol object by its primary key (id)
		/// Chart_rowcol_get_id Charts/RowCol/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartRowCol> Chart_rowcol_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/RowCol/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartRowCol>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RowCollections: Get by Id
		/// Get by Id: Use this method to retrieve a RowCollections object by its primary key (id)
		/// Chart_rowcollections_get_id Charts/RowCollections/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartRowCollections> Chart_rowcollections_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/RowCollections/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartRowCollections>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RowNameFormatTypes: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the RowNameFormatTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Chart object space.
		/// Chart_rownameformattypes_get Charts/RowNameFormatTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartRowNameFormatTypes[]> Chart_rownameformattypes_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/RowNameFormatTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartRowNameFormatTypes[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RowNameFormatTypes: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Chart_rownameformattypes_typeid_get_type_id Charts/RowNameFormatTypes/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartRowNameFormatTypes> Chart_rownameformattypes_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/RowNameFormatTypes/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartRowNameFormatTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// RowNameFormatTypes: Get by Id
		/// Get by Id: Use this method to retrieve a RowNameFormatTypes object by its primary key (id)
		/// Chart_rownameformattypes_get_id Charts/RowNameFormatTypes/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartRowNameFormatTypes> Chart_rownameformattypes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/RowNameFormatTypes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartRowNameFormatTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rows: Get by Id
		/// Get by Id: Use this method to retrieve a Rows object by its primary key (id)
		/// Chart_rows_get_id Charts/Rows/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChartRows> Chart_rows_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/Rows/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartRows>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charts: Get Svg file
		/// This endpoint is helpful for rending this Chart as an svg or image object that can then be rendered in a story, dashboard or website.
		/// Charts_charts_svg_get_id_use_cache Charts/Svg/{id}
		/// </summary>
		/// <param name="use_cache">Indicates whether API should retrieve content from a cache if aviable (true, default), or force an update (false)</param>
		/// <returns>Returns an svg formatted-image of this object.</returns>
		public async Task Charts_charts_svg_get_id_use_cacheAsync(string id, bool use_cache, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/Svg/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&use_cache="+use_cache;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Charts: Get by Id
		/// Get by Id: Use this method to retrieve a Charts object by its primary key (id)
		/// Charts_charts_get_id Charts/{id}
		/// </summary>
		/// <param name="id">An Id of the respository DTO elemennt</param>
		/// <returns>Success</returns>
		public async Task<ChartCharts> Charts_charts_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Charts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChartCharts>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Dependent Objects Tree
		/// This endpoint is helpful for helping users and bots identify dependent objects to this Slide and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
		/// Slides_connectionshapes_childobjects_get_id ConnectionShapes/ChildObjects/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChildObjects[]> Slides_connectionshapes_childobjects_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConnectionShapes/ChildObjects/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChildObjects[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Details
		/// Returns object metadata and information about relative dependent objects
		/// Slides_connectionshapes_details_get_id ConnectionShapes/Details/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideConnectorDetails> Slides_connectionshapes_details_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConnectionShapes/Details/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideConnectorDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Underlying Xml
		/// Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Slide object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Slide objects.
		/// Slides_connectionshapes_openofficexml_get_id_updated ConnectionShapes/OpenOfficeXml/{id}
		/// </summary>
		/// <param name="updated">Indicates whether API should return the orginal uploaded xml (false) or the actively updated version (true, default)</param>
		/// <returns>Success</returns>
		public async Task<OoxmlDTO> Slides_connectionshapes_openofficexml_get_id_updatedAsync(string id, bool updated, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConnectionShapes/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updated="+updated;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OoxmlDTO>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Modify Underlying Xml
		/// Directly eidt the underlying xml of a Slide object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Slide objects.
		/// Slides_connectionshapes_openofficexml_put_id ConnectionShapes/OpenOfficeXml/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task Slides_connectionshapes_openofficexml_put_idAsync(string id, OoxmlDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConnectionShapes/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Svg file
		/// This endpoint is helpful for rending this Slide as an svg or image object that can then be rendered in a story, dashboard or website.
		/// Slides_connectionshapes_svg_get_id_use_cache ConnectionShapes/Svg/{id}
		/// </summary>
		/// <param name="use_cache">Indicates whether API should retrieve content from a cache if aviable (true, default), or force an update (false)</param>
		/// <returns>Returns an svg formatted-image of this object.</returns>
		public async Task Slides_connectionshapes_svg_get_id_use_cacheAsync(string id, bool use_cache, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConnectionShapes/Svg/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&use_cache="+use_cache;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ConnectionShapes: Get by Id
		/// Get by Id: Use this method to retrieve a ConnectionShapes object by its primary key (id)
		/// Slides_connectionshapes_get_id ConnectionShapes/{id}
		/// </summary>
		/// <param name="id">An Id of the respository DTO elemennt</param>
		/// <returns>Success</returns>
		public async Task<SlideConnector> Slides_connectionshapes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ConnectionShapes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideConnector>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DocumentsController: Get Dependent Objects Tree
		/// This endpoint is helpful for helping users and bots identify dependent objects to this DocumentsController and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
		/// Documents_childobjects_get_id Documents/ChildObjects/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChildObjects[]> Documents_childobjects_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Documents/ChildObjects/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChildObjects[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Documents: Clone an existing Ooxml Document to new Parent Story
		/// Clone A Document that has already been uploaded to a new Story
		/// Documents_clone_post_id Documents/Clone/{id}
		/// </summary>
		/// <param name="id">the Source document Id</param>
		/// <param name="requestBody">A DocumentCloneDto object with containing information required for cloning the document</param>
		/// <returns>Success</returns>
		public async Task<Document> Documents_clone_post_idAsync(string id, DocumentCloneDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Documents/Clone/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Document>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DocumentType: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the DocumentType type. Use the Id from oneof the returned elements on to make changes to elements in the Documents object space.
		/// Documents_documenttype_get Documents/DocumentType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DocumentType[]> Documents_documenttype_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Documents/DocumentType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DocumentType[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DocumentType: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Documents_documenttype_typeid_get_type_id Documents/DocumentType/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DocumentType> Documents_documenttype_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Documents/DocumentType/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DocumentType>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DocumentType: Get by Id
		/// Get by Id: Use this method to retrieve a DocumentType object by its primary key (id)
		/// Documents_documenttype_get_id Documents/DocumentType/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DocumentType> Documents_documenttype_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Documents/DocumentType/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DocumentType>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Documents: Download
		/// Download the into a bytestream for client-side processing.
		/// Documents_download_get_id_orginal Documents/Download/{id}
		/// </summary>
		/// <returns>Returns an updated version of the OpenOffice Xml file</returns>
		public async Task Documents_download_get_id_orginalAsync(string id, bool orginal, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Documents/Download/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&orginal="+orginal;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Documents: Delete by Id
		/// Permantly delete a document from the Ooxml Automation API. Note that is does not make changes to the related Presalytics APIs.
		/// Please use the delete endpoint in the story API to ensure that stories are not left with orphaned references to the Ooxml Automation API.
		/// Documents_delete_id Documents/{id}
		/// </summary>
		public async Task Documents_delete_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Documents/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Documents: Get by Id
		/// Get by Id: Use this method to retrieve a Documents object by its primary key (id)
		/// Documents_get_id Documents/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Document> Documents_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Documents/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Document>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Dependent Objects Tree
		/// This endpoint is helpful for helping users and bots identify dependent objects to this Slide and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
		/// Slides_groups_childobjects_get_id Groups/ChildObjects/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChildObjects[]> Slides_groups_childobjects_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Groups/ChildObjects/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChildObjects[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Details
		/// Returns object metadata and information about relative dependent objects
		/// Slides_groups_details_get_id Groups/Details/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideGroupsDetails> Slides_groups_details_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Groups/Details/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideGroupsDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Underlying Xml
		/// Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Slide object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Slide objects.
		/// Slides_groups_openofficexml_get_id_updated Groups/OpenOfficeXml/{id}
		/// </summary>
		/// <param name="updated">Indicates whether API should return the orginal uploaded xml (false) or the actively updated version (true, default)</param>
		/// <returns>Success</returns>
		public async Task<OoxmlDTO> Slides_groups_openofficexml_get_id_updatedAsync(string id, bool updated, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Groups/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updated="+updated;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OoxmlDTO>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Modify Underlying Xml
		/// Directly eidt the underlying xml of a Slide object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Slide objects.
		/// Slides_groups_openofficexml_put_id Groups/OpenOfficeXml/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task Slides_groups_openofficexml_put_idAsync(string id, OoxmlDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Groups/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Svg file
		/// This endpoint is helpful for rending this Slide as an svg or image object that can then be rendered in a story, dashboard or website.
		/// Slides_groups_svg_get_id_use_cache Groups/Svg/{id}
		/// </summary>
		/// <param name="use_cache">Indicates whether API should retrieve content from a cache if aviable (true, default), or force an update (false)</param>
		/// <returns>Returns an svg formatted-image of this object.</returns>
		public async Task Slides_groups_svg_get_id_use_cacheAsync(string id, bool use_cache, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Groups/Svg/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&use_cache="+use_cache;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Groups: Get by Id
		/// Get by Id: Use this method to retrieve a Groups object by its primary key (id)
		/// Slides_groups_get_id Groups/{id}
		/// </summary>
		/// <param name="id">An Id of the respository DTO elemennt</param>
		/// <returns>Success</returns>
		public async Task<SlideGroups> Slides_groups_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Groups/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideGroups>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shared: Get Dependent Objects Tree
		/// This endpoint is helpful for helping users and bots identify dependent objects to this Shared and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
		/// Shared_images_childobjects_get_id Images/ChildObjects/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChildObjects[]> Shared_images_childobjects_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Images/ChildObjects/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChildObjects[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shared: Get Details
		/// Returns object metadata and information about relative dependent objects
		/// Shared_images_details_get_id Images/Details/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedPicturesDetails> Shared_images_details_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Images/Details/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedPicturesDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Image: Download Image
		/// Download Images extracted from Ooxml Documents
		/// Shared_images_getimage_put_id Images/GetImage/{Id}
		/// </summary>
		/// <param name="Id">The Image Id</param>
		/// <returns>Success</returns>
		public async Task Shared_images_getimage_put_idAsync(string Id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Images/GetImage/"+ (Id==null? "" : System.Uri.EscapeDataString(Id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shared: Get Underlying Xml
		/// Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Shared object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Shared objects.
		/// Shared_images_openofficexml_get_id_updated Images/OpenOfficeXml/{id}
		/// </summary>
		/// <param name="updated">Indicates whether API should return the orginal uploaded xml (false) or the actively updated version (true, default)</param>
		/// <returns>Success</returns>
		public async Task<OoxmlDTO> Shared_images_openofficexml_get_id_updatedAsync(string id, bool updated, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Images/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updated="+updated;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OoxmlDTO>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shared: Modify Underlying Xml
		/// Directly eidt the underlying xml of a Shared object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Shared objects.
		/// Shared_images_openofficexml_put_id Images/OpenOfficeXml/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task Shared_images_openofficexml_put_idAsync(string id, OoxmlDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Images/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shared: Get Svg file
		/// This endpoint is helpful for rending this Shared as an svg or image object that can then be rendered in a story, dashboard or website.
		/// Shared_images_svg_get_id_use_cache Images/Svg/{id}
		/// </summary>
		/// <param name="use_cache">Indicates whether API should retrieve content from a cache if aviable (true, default), or force an update (false)</param>
		/// <returns>Returns an svg formatted-image of this object.</returns>
		public async Task Shared_images_svg_get_id_use_cacheAsync(string id, bool use_cache, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Images/Svg/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&use_cache="+use_cache;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Images: Get by Id
		/// Get by Id: Use this method to retrieve a Images object by its primary key (id)
		/// Shared_images_get_id Images/{id}
		/// </summary>
		/// <param name="id">An Id of the respository DTO elemennt</param>
		/// <returns>Success</returns>
		public async Task<SharedPictures> Shared_images_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Images/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedPictures>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Dependent Objects Tree
		/// This endpoint is helpful for helping users and bots identify dependent objects to this Slide and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
		/// Slides_shapetrees_childobjects_get_id ShapeTrees/ChildObjects/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChildObjects[]> Slides_shapetrees_childobjects_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ShapeTrees/ChildObjects/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChildObjects[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Details
		/// Returns object metadata and information about relative dependent objects
		/// Slides_shapetrees_details_get_id ShapeTrees/Details/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideShapeTreesDetails> Slides_shapetrees_details_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ShapeTrees/Details/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideShapeTreesDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Underlying Xml
		/// Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Slide object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Slide objects.
		/// Slides_shapetrees_openofficexml_get_id_updated ShapeTrees/OpenOfficeXml/{id}
		/// </summary>
		/// <param name="updated">Indicates whether API should return the orginal uploaded xml (false) or the actively updated version (true, default)</param>
		/// <returns>Success</returns>
		public async Task<OoxmlDTO> Slides_shapetrees_openofficexml_get_id_updatedAsync(string id, bool updated, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ShapeTrees/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updated="+updated;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OoxmlDTO>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Modify Underlying Xml
		/// Directly eidt the underlying xml of a Slide object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Slide objects.
		/// Slides_shapetrees_openofficexml_put_id ShapeTrees/OpenOfficeXml/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task Slides_shapetrees_openofficexml_put_idAsync(string id, OoxmlDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ShapeTrees/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Svg file
		/// This endpoint is helpful for rending this Slide as an svg or image object that can then be rendered in a story, dashboard or website.
		/// Slides_shapetrees_svg_get_id_use_cache ShapeTrees/Svg/{id}
		/// </summary>
		/// <param name="use_cache">Indicates whether API should retrieve content from a cache if aviable (true, default), or force an update (false)</param>
		/// <returns>Returns an svg formatted-image of this object.</returns>
		public async Task Slides_shapetrees_svg_get_id_use_cacheAsync(string id, bool use_cache, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ShapeTrees/Svg/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&use_cache="+use_cache;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ShapeTrees: Get by Id
		/// Get by Id: Use this method to retrieve a ShapeTrees object by its primary key (id)
		/// Slides_shapetrees_get_id ShapeTrees/{id}
		/// </summary>
		/// <param name="id">An Id of the respository DTO elemennt</param>
		/// <returns>Success</returns>
		public async Task<SlideShapeTrees> Slides_shapetrees_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ShapeTrees/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideShapeTrees>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Dependent Objects Tree
		/// This endpoint is helpful for helping users and bots identify dependent objects to this Slide and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
		/// Slides_shapes_childobjects_get_id Shapes/ChildObjects/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChildObjects[]> Slides_shapes_childobjects_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shapes/ChildObjects/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChildObjects[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Details
		/// Returns object metadata and information about relative dependent objects
		/// Slides_shapes_details_get_id Shapes/Details/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideShapesDetails> Slides_shapes_details_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shapes/Details/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideShapesDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Underlying Xml
		/// Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Slide object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Slide objects.
		/// Slides_shapes_openofficexml_get_id_updated Shapes/OpenOfficeXml/{id}
		/// </summary>
		/// <param name="updated">Indicates whether API should return the orginal uploaded xml (false) or the actively updated version (true, default)</param>
		/// <returns>Success</returns>
		public async Task<OoxmlDTO> Slides_shapes_openofficexml_get_id_updatedAsync(string id, bool updated, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shapes/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updated="+updated;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OoxmlDTO>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Modify Underlying Xml
		/// Directly eidt the underlying xml of a Slide object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Slide objects.
		/// Slides_shapes_openofficexml_put_id Shapes/OpenOfficeXml/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task Slides_shapes_openofficexml_put_idAsync(string id, OoxmlDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shapes/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Svg file
		/// This endpoint is helpful for rending this Slide as an svg or image object that can then be rendered in a story, dashboard or website.
		/// Slides_shapes_svg_get_id_use_cache Shapes/Svg/{id}
		/// </summary>
		/// <param name="use_cache">Indicates whether API should retrieve content from a cache if aviable (true, default), or force an update (false)</param>
		/// <returns>Returns an svg formatted-image of this object.</returns>
		public async Task Slides_shapes_svg_get_id_use_cacheAsync(string id, bool use_cache, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shapes/Svg/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&use_cache="+use_cache;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Shapes: Get by Id
		/// Get by Id: Use this method to retrieve a Shapes object by its primary key (id)
		/// Slides_shapes_get_id Shapes/{id}
		/// </summary>
		/// <param name="id">An Id of the respository DTO elemennt</param>
		/// <returns>Success</returns>
		public async Task<SlideShapes> Slides_shapes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shapes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideShapes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ColorTransformationAttributes: Get by Id
		/// Get by Id: Use this method to retrieve a ColorTransformationAttributes object by its primary key (id)
		/// Shared_colortransformationattributes_get_id Shared/ColorTransformationAttributes/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedColorTransformationAttributes> Shared_colortransformationattributes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/ColorTransformationAttributes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedColorTransformationAttributes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ColorTransformations: Get by Id
		/// Get by Id: Use this method to retrieve a ColorTransformations object by its primary key (id)
		/// Shared_colortransformations_get_id Shared/ColorTransformations/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedColorTransformations> Shared_colortransformations_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/ColorTransformations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedColorTransformations>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ColorTypes: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the ColorTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Shared object space.
		/// Shared_colortypes_get Shared/ColorTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedColorTypes[]> Shared_colortypes_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/ColorTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedColorTypes[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ColorTypes: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Shared_colortypes_typeid_get_type_id Shared/ColorTypes/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedColorTypes> Shared_colortypes_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/ColorTypes/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedColorTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ColorTypes: Get by Id
		/// Get by Id: Use this method to retrieve a ColorTypes object by its primary key (id)
		/// Shared_colortypes_get_id Shared/ColorTypes/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedColorTypes> Shared_colortypes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/ColorTypes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedColorTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DashTypes: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the DashTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Shared object space.
		/// Shared_dashtypes_get Shared/DashTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedDashTypes[]> Shared_dashtypes_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/DashTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedDashTypes[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DashTypes: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Shared_dashtypes_typeid_get_type_id Shared/DashTypes/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedDashTypes> Shared_dashtypes_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/DashTypes/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedDashTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DashTypes: Get by Id
		/// Get by Id: Use this method to retrieve a DashTypes object by its primary key (id)
		/// Shared_dashtypes_get_id Shared/DashTypes/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedDashTypes> Shared_dashtypes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/DashTypes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedDashTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// EffectAttributes: Get by Id
		/// Get by Id: Use this method to retrieve a EffectAttributes object by its primary key (id)
		/// Shared_effectattributes_get_id Shared/EffectAttributes/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedEffectAttributes> Shared_effectattributes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/EffectAttributes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedEffectAttributes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// EffectTypes: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the EffectTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Shared object space.
		/// Shared_effecttypes_get Shared/EffectTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedEffectTypes[]> Shared_effecttypes_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/EffectTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedEffectTypes[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// EffectTypes: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Shared_effecttypes_typeid_get_type_id Shared/EffectTypes/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedEffectTypes> Shared_effecttypes_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/EffectTypes/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedEffectTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// EffectTypes: Get by Id
		/// Get by Id: Use this method to retrieve a EffectTypes object by its primary key (id)
		/// Shared_effecttypes_get_id Shared/EffectTypes/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedEffectTypes> Shared_effecttypes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/EffectTypes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedEffectTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Effects: Get by Id
		/// Get by Id: Use this method to retrieve a Effects object by its primary key (id)
		/// Shared_effects_get_id Shared/Effects/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedEffects> Shared_effects_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/Effects/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedEffects>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FillMap: Get by Id
		/// Get by Id: Use this method to retrieve a FillMap object by its primary key (id)
		/// Shared_fillmap_get_id Shared/FillMap/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedFillMap> Shared_fillmap_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/FillMap/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedFillMap>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FillTypes: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the FillTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Shared object space.
		/// Shared_filltypes_get Shared/FillTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedFillTypes[]> Shared_filltypes_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/FillTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedFillTypes[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FillTypes: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Shared_filltypes_typeid_get_type_id Shared/FillTypes/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedFillTypes> Shared_filltypes_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/FillTypes/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedFillTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FillTypes: Get by Id
		/// Get by Id: Use this method to retrieve a FillTypes object by its primary key (id)
		/// Shared_filltypes_get_id Shared/FillTypes/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedFillTypes> Shared_filltypes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/FillTypes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedFillTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GradientFills: Get by Id
		/// Get by Id: Use this method to retrieve a GradientFills object by its primary key (id)
		/// Shared_gradientfills_get_id Shared/GradientFills/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedGradientFills> Shared_gradientfills_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/GradientFills/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedGradientFills>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GradientStops: Get by Id
		/// Get by Id: Use this method to retrieve a GradientStops object by its primary key (id)
		/// Shared_gradientstops_get_id Shared/GradientStops/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedGradientStops> Shared_gradientstops_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/GradientStops/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedGradientStops>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ImageFills: Get by Id
		/// Get by Id: Use this method to retrieve a ImageFills object by its primary key (id)
		/// Shared_imagefills_get_id Shared/ImageFills/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedImageFills> Shared_imagefills_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/ImageFills/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedImageFills>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// LineEndSizes: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the LineEndSizes type. Use the Id from oneof the returned elements on to make changes to elements in the Shared object space.
		/// Shared_lineendsizes_get Shared/LineEndSizes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedLineEndSizes[]> Shared_lineendsizes_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/LineEndSizes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedLineEndSizes[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// LineEndSizes: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Shared_lineendsizes_typeid_get_type_id Shared/LineEndSizes/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedLineEndSizes> Shared_lineendsizes_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/LineEndSizes/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedLineEndSizes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// LineEndSizes: Get by Id
		/// Get by Id: Use this method to retrieve a LineEndSizes object by its primary key (id)
		/// Shared_lineendsizes_get_id Shared/LineEndSizes/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedLineEndSizes> Shared_lineendsizes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/LineEndSizes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedLineEndSizes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// LineEndTypes: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the LineEndTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Shared object space.
		/// Shared_lineendtypes_get Shared/LineEndTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedLineEndTypes[]> Shared_lineendtypes_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/LineEndTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedLineEndTypes[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// LineEndTypes: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Shared_lineendtypes_typeid_get_type_id Shared/LineEndTypes/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedLineEndTypes> Shared_lineendtypes_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/LineEndTypes/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedLineEndTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// LineEndTypes: Get by Id
		/// Get by Id: Use this method to retrieve a LineEndTypes object by its primary key (id)
		/// Shared_lineendtypes_get_id Shared/LineEndTypes/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedLineEndTypes> Shared_lineendtypes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/LineEndTypes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedLineEndTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lines: Get by Id
		/// Get by Id: Use this method to retrieve a Lines object by its primary key (id)
		/// Shared_lines_get_id Shared/Lines/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedLines> Shared_lines_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/Lines/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedLines>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Paragraph: Get by Id
		/// Get by Id: Use this method to retrieve a Paragraph object by its primary key (id)
		/// Shared_paragraph_get_id Shared/Paragraph/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedParagraph> Shared_paragraph_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/Paragraph/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedParagraph>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SolidFills: Get by Id
		/// Get by Id: Use this method to retrieve a SolidFills object by its primary key (id)
		/// Shared_solidfills_get_id Shared/SolidFills/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedSolidFills> Shared_solidfills_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/SolidFills/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedSolidFills>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Text: Get by Id
		/// Get by Id: Use this method to retrieve a Text object by its primary key (id)
		/// Shared_text_get_id Shared/Text/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedText> Shared_text_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/Text/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedText>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// TextContainer: Get by Id
		/// Get by Id: Use this method to retrieve a TextContainer object by its primary key (id)
		/// Shared_textcontainer_get_id Shared/TextContainer/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SharedTextContainer> Shared_textcontainer_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Shared/TextContainer/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SharedTextContainer>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Dependent Objects Tree
		/// This endpoint is helpful for helping users and bots identify dependent objects to this Slide and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
		/// Slides_slides_childobjects_get_id Slides/ChildObjects/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChildObjects[]> Slides_slides_childobjects_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/ChildObjects/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChildObjects[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ColorMaps: Get by Id
		/// Get by Id: Use this method to retrieve a ColorMaps object by its primary key (id)
		/// Slides_colormaps_get_id Slides/ColorMaps/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideColorMaps> Slides_colormaps_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/ColorMaps/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideColorMaps>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Details
		/// Returns object metadata and information about relative dependent objects
		/// Slides_slides_details_get_id Slides/Details/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideSlidesDetails> Slides_slides_details_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/Details/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideSlidesDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GraphicTypes: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the GraphicTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Slides object space.
		/// Slides_graphictypes_get Slides/GraphicTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideGraphicTypes[]> Slides_graphictypes_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/GraphicTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideGraphicTypes[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GraphicTypes: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Slides_graphictypes_typeid_get_type_id Slides/GraphicTypes/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideGraphicTypes> Slides_graphictypes_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/GraphicTypes/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideGraphicTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GraphicTypes: Get by Id
		/// Get by Id: Use this method to retrieve a GraphicTypes object by its primary key (id)
		/// Slides_graphictypes_get_id Slides/GraphicTypes/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideGraphicTypes> Slides_graphictypes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/GraphicTypes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideGraphicTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Graphics: Get by Id
		/// Get by Id: Use this method to retrieve a Graphics object by its primary key (id)
		/// Slides_graphics_get_id Slides/Graphics/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideGraphics> Slides_graphics_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/Graphics/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideGraphics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GroupElementTypes: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the GroupElementTypes type. Use the Id from oneof the returned elements on to make changes to elements in the Slides object space.
		/// Slides_groupelementtypes_get Slides/GroupElementTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideGroupElementTypes[]> Slides_groupelementtypes_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/GroupElementTypes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideGroupElementTypes[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GroupElementTypes: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Slides_groupelementtypes_typeid_get_type_id Slides/GroupElementTypes/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideGroupElementTypes> Slides_groupelementtypes_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/GroupElementTypes/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideGroupElementTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GroupElementTypes: Get by Id
		/// Get by Id: Use this method to retrieve a GroupElementTypes object by its primary key (id)
		/// Slides_groupelementtypes_get_id Slides/GroupElementTypes/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideGroupElementTypes> Slides_groupelementtypes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/GroupElementTypes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideGroupElementTypes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GroupElements: Get by Id
		/// Get by Id: Use this method to retrieve a GroupElements object by its primary key (id)
		/// Slides_groupelements_get_id Slides/GroupElements/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideGroupElements> Slides_groupelements_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/GroupElements/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideGroupElements>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Underlying Xml
		/// Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Slide object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Slide objects.
		/// Slides_slides_openofficexml_get_id_updated Slides/OpenOfficeXml/{id}
		/// </summary>
		/// <param name="updated">Indicates whether API should return the orginal uploaded xml (false) or the actively updated version (true, default)</param>
		/// <returns>Success</returns>
		public async Task<OoxmlDTO> Slides_slides_openofficexml_get_id_updatedAsync(string id, bool updated, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updated="+updated;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OoxmlDTO>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Modify Underlying Xml
		/// Directly eidt the underlying xml of a Slide object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Slide objects.
		/// Slides_slides_openofficexml_put_id Slides/OpenOfficeXml/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task Slides_slides_openofficexml_put_idAsync(string id, OoxmlDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SlideMasters: Get by Id
		/// Get by Id: Use this method to retrieve a SlideMasters object by its primary key (id)
		/// Slides_slidemasters_get_id Slides/SlideMasters/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideSlideMasters> Slides_slidemasters_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/SlideMasters/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideSlideMasters>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Svg file
		/// This endpoint is helpful for rending this Slide as an svg or image object that can then be rendered in a story, dashboard or website.
		/// Slides_slides_svg_get_id_use_cache Slides/Svg/{id}
		/// </summary>
		/// <param name="use_cache">Indicates whether API should retrieve content from a cache if aviable (true, default), or force an update (false)</param>
		/// <returns>Returns an svg formatted-image of this object.</returns>
		public async Task Slides_slides_svg_get_id_use_cacheAsync(string id, bool use_cache, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/Svg/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&use_cache="+use_cache;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get by Id
		/// Get by Id: Use this method to retrieve a Slides object by its primary key (id)
		/// Slides_slides_get_id Slides/{id}
		/// </summary>
		/// <param name="id">An Id of the respository DTO elemennt</param>
		/// <returns>Success</returns>
		public async Task<SlideSlides> Slides_slides_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Slides/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideSlides>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Dependent Objects Tree
		/// This endpoint is helpful for helping users and bots identify dependent objects to this Slide and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
		/// Slides_smartarts_childobjects_get_id SmartArts/ChildObjects/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChildObjects[]> Slides_smartarts_childobjects_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "SmartArts/ChildObjects/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChildObjects[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Details
		/// Returns object metadata and information about relative dependent objects
		/// Slides_smartarts_details_get_id SmartArts/Details/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SlideSmartArtsDetails> Slides_smartarts_details_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "SmartArts/Details/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideSmartArtsDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Underlying Xml
		/// Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Slide object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Slide objects.
		/// Slides_smartarts_openofficexml_get_id_updated SmartArts/OpenOfficeXml/{id}
		/// </summary>
		/// <param name="updated">Indicates whether API should return the orginal uploaded xml (false) or the actively updated version (true, default)</param>
		/// <returns>Success</returns>
		public async Task<OoxmlDTO> Slides_smartarts_openofficexml_get_id_updatedAsync(string id, bool updated, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "SmartArts/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updated="+updated;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OoxmlDTO>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Modify Underlying Xml
		/// Directly eidt the underlying xml of a Slide object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Slide objects.
		/// Slides_smartarts_openofficexml_put_id SmartArts/OpenOfficeXml/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task Slides_smartarts_openofficexml_put_idAsync(string id, OoxmlDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "SmartArts/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Slides: Get Svg file
		/// This endpoint is helpful for rending this Slide as an svg or image object that can then be rendered in a story, dashboard or website.
		/// Slides_smartarts_svg_get_id_use_cache SmartArts/Svg/{id}
		/// </summary>
		/// <param name="use_cache">Indicates whether API should retrieve content from a cache if aviable (true, default), or force an update (false)</param>
		/// <returns>Returns an svg formatted-image of this object.</returns>
		public async Task Slides_smartarts_svg_get_id_use_cacheAsync(string id, bool use_cache, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "SmartArts/Svg/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&use_cache="+use_cache;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SmartArts: Get by Id
		/// Get by Id: Use this method to retrieve a SmartArts object by its primary key (id)
		/// Slides_smartarts_get_id SmartArts/{id}
		/// </summary>
		/// <param name="id">An Id of the respository DTO elemennt</param>
		/// <returns>Success</returns>
		public async Task<SlideSmartArts> Slides_smartarts_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "SmartArts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SlideSmartArts>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Borders: Get by Id
		/// Get by Id: Use this method to retrieve a Borders object by its primary key (id)
		/// Tables_borders_get_id Tables/Borders/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TableBorders> Tables_borders_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tables/Borders/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TableBorders>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cells: Get by Id
		/// Get by Id: Use this method to retrieve a Cells object by its primary key (id)
		/// Tables_cells_get_id Tables/Cells/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TableCells> Tables_cells_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tables/Cells/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TableCells>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tables: Get Dependent Objects Tree
		/// This endpoint is helpful for helping users and bots identify dependent objects to this Table and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
		/// Tables_tables_childobjects_get_id Tables/ChildObjects/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChildObjects[]> Tables_tables_childobjects_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tables/ChildObjects/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChildObjects[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Columns: Get by Id
		/// Get by Id: Use this method to retrieve a Columns object by its primary key (id)
		/// Tables_columns_get_id Tables/Columns/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TableColumns> Tables_columns_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tables/Columns/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TableColumns>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tables: Get Details
		/// Returns object metadata and information about relative dependent objects
		/// Tables_tables_details_get_id Tables/Details/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TableTablesDetails> Tables_tables_details_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tables/Details/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TableTablesDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tables: Get Underlying Xml
		/// Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Table object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Table objects.
		/// Tables_tables_openofficexml_get_id_updated Tables/OpenOfficeXml/{id}
		/// </summary>
		/// <param name="updated">Indicates whether API should return the orginal uploaded xml (false) or the actively updated version (true, default)</param>
		/// <returns>Success</returns>
		public async Task<OoxmlDTO> Tables_tables_openofficexml_get_id_updatedAsync(string id, bool updated, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tables/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updated="+updated;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OoxmlDTO>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tables: Modify Underlying Xml
		/// Directly eidt the underlying xml of a Table object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Table objects.
		/// Tables_tables_openofficexml_put_id Tables/OpenOfficeXml/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task Tables_tables_openofficexml_put_idAsync(string id, OoxmlDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tables/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rows: Get by Id
		/// Get by Id: Use this method to retrieve a Rows object by its primary key (id)
		/// Tables_rows_get_id Tables/Rows/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TableRows> Tables_rows_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tables/Rows/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TableRows>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tables: Get Svg file
		/// This endpoint is helpful for rending this Table as an svg or image object that can then be rendered in a story, dashboard or website.
		/// Tables_tables_svg_get_id_use_cache Tables/Svg/{id}
		/// </summary>
		/// <param name="use_cache">Indicates whether API should retrieve content from a cache if aviable (true, default), or force an update (false)</param>
		/// <returns>Returns an svg formatted-image of this object.</returns>
		public async Task Tables_tables_svg_get_id_use_cacheAsync(string id, bool use_cache, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tables/Svg/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&use_cache="+use_cache;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Table: Get Table Data
		/// Gets a TabletDataDTO object, usually used for downstream updates to table content
		/// Tables_tables_tableupdate_get_id Tables/TableUpdate/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TableTableDataDTO> Tables_tables_tableupdate_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tables/TableUpdate/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TableTableDataDTO>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tables: Update Table Data
		/// Simplifies table update by allowing users to supply strings to table cells  via TableDataDTO
		/// Tables_tables_tableupdate_put_id Tables/TableUpdate/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task Tables_tables_tableupdate_put_idAsync(string id, TableTableDataDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tables/TableUpdate/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tables: Get by Id
		/// Get by Id: Use this method to retrieve a Tables object by its primary key (id)
		/// Tables_tables_get_id Tables/{id}
		/// </summary>
		/// <param name="id">An Id of the respository DTO elemennt</param>
		/// <returns>Success</returns>
		public async Task<TableTables> Tables_tables_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tables/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TableTables>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// BackgroundFills: Get by Id
		/// Get by Id: Use this method to retrieve a BackgroundFills object by its primary key (id)
		/// Themes_backgroundfills_get_id Themes/BackgroundFills/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ThemeBackgroundFills> Themes_backgroundfills_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/BackgroundFills/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThemeBackgroundFills>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Theme: Get Dependent Objects Tree
		/// This endpoint is helpful for helping users and bots identify dependent objects to this Theme and retreive their corresponding metadata in order to make modifications to those objects in downstream operations.
		/// Theme_themes_childobjects_get_id Themes/ChildObjects/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ChildObjects[]> Theme_themes_childobjects_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/ChildObjects/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChildObjects[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Colors: Get by Id
		/// Get by Id: Use this method to retrieve a Colors object by its primary key (id)
		/// Themes_colors_get_id Themes/Colors/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ThemeColors> Themes_colors_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/Colors/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThemeColors>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CustomColors: Get by Id
		/// Get by Id: Use this method to retrieve a CustomColors object by its primary key (id)
		/// Themes_customcolors_get_id Themes/CustomColors/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ThemeCustomColors> Themes_customcolors_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/CustomColors/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThemeCustomColors>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Theme: Get Details
		/// Returns object metadata and information about relative dependent objects
		/// Theme_themes_details_get_id Themes/Details/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ThemeThemesDetails> Theme_themes_details_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/Details/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThemeThemesDetails>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// EffectMap: Get by Id
		/// Get by Id: Use this method to retrieve a EffectMap object by its primary key (id)
		/// Themes_effectmap_get_id Themes/EffectMap/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ThemeEffectMap> Themes_effectmap_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/EffectMap/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThemeEffectMap>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fills: Get by Id
		/// Get by Id: Use this method to retrieve a Fills object by its primary key (id)
		/// Themes_fills_get_id Themes/Fills/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ThemeFills> Themes_fills_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/Fills/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThemeFills>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fonts: Get by Id
		/// Get by Id: Use this method to retrieve a Fonts object by its primary key (id)
		/// Themes_fonts_get_id Themes/Fonts/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ThemeFonts> Themes_fonts_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/Fonts/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThemeFonts>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Intensity: List All Possible Types
		/// List Types: Use this method to retreive a list of possible options for the Intensity type. Use the Id from oneof the returned elements on to make changes to elements in the Themes object space.
		/// Themes_intensity_get Themes/Intensity
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ThemeIntensity[]> Themes_intensity_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/Intensity";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThemeIntensity[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Intensity: Get By Type Id
		/// This endpoint returns Type metadata from an integer type_id that can found on objects throughout the api.
		/// Themes_intensity_typeid_get_type_id Themes/Intensity/TypeId/{type_id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ThemeIntensity> Themes_intensity_typeid_get_type_idAsync(int type_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/Intensity/TypeId/"+type_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThemeIntensity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Intensity: Get by Id
		/// Get by Id: Use this method to retrieve a Intensity object by its primary key (id)
		/// Themes_intensity_get_id Themes/Intensity/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ThemeIntensity> Themes_intensity_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/Intensity/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThemeIntensity>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// LineMap: Get by Id
		/// Get by Id: Use this method to retrieve a LineMap object by its primary key (id)
		/// Themes_linemap_get_id Themes/LineMap/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ThemeLineMap> Themes_linemap_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/LineMap/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThemeLineMap>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Theme: Get Underlying Xml
		/// Return the subset of the xml content from within the latest edited version of the OpenXmlDocument from this Theme object.  The returned xml data conforms to the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm).  Use this endpoint a starting point for building client-side extensions that modify Presalytics widgets containing Theme objects.
		/// Theme_themes_openofficexml_get_id_updated Themes/OpenOfficeXml/{id}
		/// </summary>
		/// <param name="updated">Indicates whether API should return the orginal uploaded xml (false) or the actively updated version (true, default)</param>
		/// <returns>Success</returns>
		public async Task<OoxmlDTO> Theme_themes_openofficexml_get_id_updatedAsync(string id, bool updated, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&updated="+updated;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<OoxmlDTO>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Theme: Modify Underlying Xml
		/// Directly eidt the underlying xml of a Theme object within an OpenOpenXml (e.g. Excel, Powerpoint) document. This endpoint will validatate the submitted xml against the [Ecma-376 standard](http://www.ecma-international.org/publications/standards/Ecma-376.htm) prior to saving modification.  Invalid xml will rejected by this endpoint and a (hopefully) helpful error message will be returned.  Use this endpoint for client-side automation of modifications ot Theme objects.
		/// Theme_themes_openofficexml_put_id Themes/OpenOfficeXml/{id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task Theme_themes_openofficexml_put_idAsync(string id, OoxmlDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/OpenOfficeXml/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Theme: Get Svg file
		/// This endpoint is helpful for rending this Theme as an svg or image object that can then be rendered in a story, dashboard or website.
		/// Theme_themes_svg_get_id_use_cache Themes/Svg/{id}
		/// </summary>
		/// <param name="use_cache">Indicates whether API should retrieve content from a cache if aviable (true, default), or force an update (false)</param>
		/// <returns>Returns an svg formatted-image of this object.</returns>
		public async Task Theme_themes_svg_get_id_use_cacheAsync(string id, bool use_cache, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/Svg/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&use_cache="+use_cache;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Themes: Get by Id
		/// Get by Id: Use this method to retrieve a Themes object by its primary key (id)
		/// Theme_themes_get_id Themes/{id}
		/// </summary>
		/// <param name="id">An Id of the respository DTO elemennt</param>
		/// <returns>Success</returns>
		public async Task<ThemeThemes> Theme_themes_get_idAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Themes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ThemeThemes>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
