//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get all feature categories
		/// Gets a list of all feature categories used by the BC Geographical Names Information System (BCGNIS).  Note: there are three levels of classification in the BCGNIS feature taxonomy: classes, categories and types.  A type is a subset of a category, and a category is a subset of a class.
		/// FeatureCategoriesGetByOutputFormat featureCategories
		/// </summary>
		/// <param name="outputFormat">The format of the output.</param>
		/// <returns>A list of feature categories</returns>
		public async Task FeatureCategoriesGetByOutputFormatAsync(FeatureCategoriesGetByOutputFormatOutputFormat outputFormat, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "featureCategories?outputFormat=" + outputFormat;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all feature classes
		/// Gets a list of all feature classes used by the BC Geographical Names Information System (BCGNIS).  Note: there are three levels of classification in the BCGNIS feature taxonomy: classes, categories and types.  A type is a subset of a category, and a category is a subset of a class.
		/// FeatureClassesGetByOutputFormat featureClasses
		/// </summary>
		/// <param name="outputFormat">The format of the output.</param>
		/// <returns>A list of feature classes</returns>
		public async Task FeatureClassesGetByOutputFormatAsync(FeatureCategoriesGetByOutputFormatOutputFormat outputFormat, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "featureClasses?outputFormat=" + outputFormat;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all feature types
		/// Gets a list of all feature types used by the BC Geographical Names Information System (BCGNIS).  Note: there are three levels of classification in the BCGNIS feature taxonomy: classes, categories and types.  A type is a subset of a category, and a category is a subset of a class.
		/// FeatureTypesGetByOutputFormat featureTypes
		/// </summary>
		/// <param name="outputFormat">The format of the output.</param>
		/// <returns>A list of feature types</returns>
		public async Task FeatureTypesGetByOutputFormatAsync(FeatureCategoriesGetByOutputFormatOutputFormat outputFormat, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "featureTypes?outputFormat=" + outputFormat;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a feature by its featureId
		/// Get information about the geographical feature with the specified featureId.
		/// Features_featureIdGet features/{featureId}
		/// </summary>
		/// <param name="featureId">The unique identifier for a feature</param>
		/// <returns>Information about the feature with the specified featureId (XML format only)</returns>
		public async Task Features_featureIdGetAsync(int featureId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "features/"+featureId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all name authorities
		/// Gets a list of all name authorities responsible for naming decisions of the geographical names in the BC Geographical Names Information System (BCGNIS)
		/// NameAuthoritiesGetByOutputFormat nameAuthorities
		/// </summary>
		/// <param name="outputFormat">The format of the output.</param>
		/// <returns>A list of name authorities</returns>
		public async Task NameAuthoritiesGetByOutputFormatAsync(FeatureCategoriesGetByOutputFormatOutputFormat outputFormat, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nameAuthorities?outputFormat=" + outputFormat;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for names with metadata changes in a given period
		/// Search for information about geographical names which have changed most recently within a specified time window.  Changes may include status cupdates and metadata corrections.
		/// NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndex names/changes
		/// </summary>
		/// <param name="outputFormat">The format of the output.</param>
		/// <param name="fromDate">Defines the earliest date (YYYY-MM-DD format) of the change time window for the search</param>
		/// <param name="toDate">Defines the latest date (YYYY-MM-DD format) of the change time window for the search</param>
		/// <param name="featureClass">A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.</param>
		/// <param name="featureCategory">A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.</param>
		/// <param name="featureType">A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included</param>
		/// <param name="sortBy">The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.</param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries.</param>
		/// <param name="embed">A flag to indicate whether to embed the corresponding 'feature' into each matching name</param>
		/// <param name="outputStyle">A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)</param>
		/// <param name="itemsPerPage">The number of search results to return (1-200)</param>
		/// <param name="startIndex">The index of the first record to be returned (>= 1)</param>
		/// <returns>A list of names matching the search criteria</returns>
		public async Task NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexAsync(NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputFormat outputFormat, int fromDate, int toDate, string featureClass, string featureCategory, string featureType, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexSortBy sortBy, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS outputSRS, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed embed, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputStyle outputStyle, int itemsPerPage, int startIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/changes?outputFormat=" + outputFormat+"&fromDate="+fromDate+"&toDate="+toDate+"&featureClass=" + (featureClass==null? "" : System.Uri.EscapeDataString(featureClass))+"&featureCategory=" + (featureCategory==null? "" : System.Uri.EscapeDataString(featureCategory))+"&featureType=" + (featureType==null? "" : System.Uri.EscapeDataString(featureType))+"&sortBy=" + sortBy+"&outputSRS="+outputSRS+"&embed="+embed+"&outputStyle=" + outputStyle+"&itemsPerPage="+itemsPerPage+"&startIndex="+startIndex;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for names affected by recent naming decision
		/// Search for information about geographical names affected by naming 'decisions' made by the BC Geographical Names Office (naming authority) within the last X days.
		/// NamesDecisionsRecentGetByOutputFormatAndDaysAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndex names/decisions/recent
		/// </summary>
		/// <param name="outputFormat">The format of the output.</param>
		/// <param name="days">The number of days used to define the time window of naming decisions to search.  The number is interpreted as searching for 'names affected by decisions within the last X days'.</param>
		/// <param name="featureClass">A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.</param>
		/// <param name="featureCategory">A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.</param>
		/// <param name="featureType">A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included</param>
		/// <param name="sortBy">The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.</param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries.</param>
		/// <param name="embed">A flag to indicate whether to embed the corresponding 'feature' into each matching name</param>
		/// <param name="outputStyle">A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)</param>
		/// <param name="itemsPerPage">The number of search results to return (1-200)</param>
		/// <param name="startIndex">The index of the first record to be returned (>= 1)</param>
		/// <returns>A list of names matching the search criteria</returns>
		public async Task NamesDecisionsRecentGetByOutputFormatAndDaysAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexAsync(NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputFormat outputFormat, int days, string featureClass, string featureCategory, string featureType, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexSortBy sortBy, NamesDecisionsRecentGetByOutputFormatAndDaysAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS outputSRS, NamesDecisionsRecentGetByOutputFormatAndDaysAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed embed, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputStyle outputStyle, int itemsPerPage, int startIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/decisions/recent?outputFormat=" + outputFormat+"&days="+days+"&featureClass=" + (featureClass==null? "" : System.Uri.EscapeDataString(featureClass))+"&featureCategory=" + (featureCategory==null? "" : System.Uri.EscapeDataString(featureCategory))+"&featureType=" + (featureType==null? "" : System.Uri.EscapeDataString(featureType))+"&sortBy=" + sortBy+"&outputSRS="+outputSRS+"&embed="+embed+"&outputStyle=" + outputStyle+"&itemsPerPage="+itemsPerPage+"&startIndex="+startIndex;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for names affected by naming decisions in a given year
		/// Search for information about geographical names affected by naming 'decisions' made by the BC Geographical Names Office (naming authority) in a given year.
		/// NamesDecisionsYearGetByOutputFormatAndYearAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndex names/decisions/year
		/// </summary>
		/// <param name="outputFormat">The format of the output.</param>
		/// <param name="year">The year in which to search for names affected by naming decisions'.</param>
		/// <param name="featureClass">A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.</param>
		/// <param name="featureCategory">A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.</param>
		/// <param name="featureType">A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included</param>
		/// <param name="sortBy">The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.</param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries.</param>
		/// <param name="embed">A flag to indicate whether to embed the corresponding 'feature' into each matching name</param>
		/// <param name="outputStyle">A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)</param>
		/// <param name="itemsPerPage">The number of search results to return (1-200)</param>
		/// <param name="startIndex">The index of the first record to be returned (>= 1)</param>
		/// <returns>A list of names matching the search criteria</returns>
		public async Task NamesDecisionsYearGetByOutputFormatAndYearAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexAsync(NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputFormat outputFormat, int year, string featureClass, string featureCategory, string featureType, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexSortBy sortBy, NamesDecisionsYearGetByOutputFormatAndYearAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS outputSRS, NamesDecisionsYearGetByOutputFormatAndYearAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed embed, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputStyle outputStyle, int itemsPerPage, int startIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/decisions/year?outputFormat=" + outputFormat+"&year="+year+"&featureClass=" + (featureClass==null? "" : System.Uri.EscapeDataString(featureClass))+"&featureCategory=" + (featureCategory==null? "" : System.Uri.EscapeDataString(featureCategory))+"&featureType=" + (featureType==null? "" : System.Uri.EscapeDataString(featureType))+"&sortBy=" + sortBy+"&outputSRS="+outputSRS+"&embed="+embed+"&outputStyle=" + outputStyle+"&itemsPerPage="+itemsPerPage+"&startIndex="+startIndex;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search in a geographic area
		/// Search for information about geographical names that correspond to features within a geographic bounding box.  Various options and filter parameters are available to refine the search.
		/// NamesInsideGetByOutputFormatAndBboxAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndex names/inside
		/// </summary>
		/// <param name="outputFormat">The format of the output.</param>
		/// <param name="bbox">A geographic bounding box defining the search area.  Must be specified as a string of the form 'minLongitude,minLatitude,maxLongitude,maxLatitude' (WGS84). e.g. -119,49,-118,50</param>
		/// <param name="featureClass">A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.</param>
		/// <param name="featureCategory">A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.</param>
		/// <param name="featureType">A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included</param>
		/// <param name="sortBy">The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.</param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries.</param>
		/// <param name="embed">A flag to indicate whether to embed the corresponding 'feature' into each matching name</param>
		/// <param name="outputStyle">A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)</param>
		/// <param name="itemsPerPage">The number of search results to return (1-200)</param>
		/// <param name="startIndex">The index of the first record to be returned (>= 1)</param>
		/// <returns>A list of names matching the search criteria</returns>
		public async Task NamesInsideGetByOutputFormatAndBboxAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexAsync(NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputFormat outputFormat, string bbox, string featureClass, string featureCategory, string featureType, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexSortBy sortBy, NamesInsideGetByOutputFormatAndBboxAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS outputSRS, NamesInsideGetByOutputFormatAndBboxAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed embed, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputStyle outputStyle, int itemsPerPage, int startIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/inside?outputFormat=" + outputFormat+"&bbox=" + (bbox==null? "" : System.Uri.EscapeDataString(bbox))+"&featureClass=" + (featureClass==null? "" : System.Uri.EscapeDataString(featureClass))+"&featureCategory=" + (featureCategory==null? "" : System.Uri.EscapeDataString(featureCategory))+"&featureType=" + (featureType==null? "" : System.Uri.EscapeDataString(featureType))+"&sortBy=" + sortBy+"&outputSRS="+outputSRS+"&embed="+embed+"&outputStyle=" + outputStyle+"&itemsPerPage="+itemsPerPage+"&startIndex="+startIndex;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search near to a geographic point
		/// Search for information about geographical names that correspond to features within a geographic area defined by a centre point and a radius.  Various options and filter parameters are available to refine the search.
		/// NamesNearGetByOutputFormatAndFeaturePointAndDistanceAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndex names/near
		/// </summary>
		/// <param name="outputFormat">The format of the output.</param>
		/// <param name="featurePoint">A geographic coordinate specifying the centre point of the search area.  Must be specified as a string of the form 'longitude,latitude' (WGS84).  e.g. -120,51</param>
		/// <param name="distance">A radius (in kilometres) around the centre point.</param>
		/// <param name="featureClass">A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.</param>
		/// <param name="featureCategory">A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.</param>
		/// <param name="featureType">A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included</param>
		/// <param name="sortBy">The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.</param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries.</param>
		/// <param name="embed">A flag to indicate whether to embed the corresponding 'feature' into each matching name</param>
		/// <param name="outputStyle">A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)</param>
		/// <param name="itemsPerPage">The number of search results to return (1-200)</param>
		/// <param name="startIndex">The index of the first record to be returned (>= 1)</param>
		/// <returns>A list of names matching the search criteria</returns>
		public async Task NamesNearGetByOutputFormatAndFeaturePointAndDistanceAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexAsync(NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputFormat outputFormat, string featurePoint, string distance, string featureClass, string featureCategory, string featureType, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexSortBy sortBy, NamesNearGetByOutputFormatAndFeaturePointAndDistanceAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS outputSRS, NamesNearGetByOutputFormatAndFeaturePointAndDistanceAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed embed, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputStyle outputStyle, int itemsPerPage, int startIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/near?outputFormat=" + outputFormat+"&featurePoint=" + (featurePoint==null? "" : System.Uri.EscapeDataString(featurePoint))+"&distance=" + (distance==null? "" : System.Uri.EscapeDataString(distance))+"&featureClass=" + (featureClass==null? "" : System.Uri.EscapeDataString(featureClass))+"&featureCategory=" + (featureCategory==null? "" : System.Uri.EscapeDataString(featureCategory))+"&featureType=" + (featureType==null? "" : System.Uri.EscapeDataString(featureType))+"&sortBy=" + sortBy+"&outputSRS="+outputSRS+"&embed="+embed+"&outputStyle=" + outputStyle+"&itemsPerPage="+itemsPerPage+"&startIndex="+startIndex;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search by name, limit to unofficial names only
		/// Search for information about unofficial geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
		/// NamesNotOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndex names/notOfficial/search
		/// </summary>
		/// <param name="outputFormat">The format of the output.</param>
		/// <param name="name">A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example 'vancouv*'</param>
		/// <param name="exactSpelling">If the 'name' parameter is specified, 'exactSpelling' specifies whether to include only names that exactly match the search text (exactSpelling=1), or whether to also include names with similar spellings (exactSpelling=0)</param>
		/// <param name="featureClass">A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.</param>
		/// <param name="featureCategory">A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.</param>
		/// <param name="featureType">A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included</param>
		/// <param name="sortBy">The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.</param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries.</param>
		/// <param name="embed">A flag to indicate whether to embed the corresponding 'feature' into each matching name</param>
		/// <param name="outputStyle">A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)</param>
		/// <param name="itemsPerPage">The number of search results to return (1-200)</param>
		/// <param name="startIndex">The index of the first record to be returned (>= 1)</param>
		/// <returns>A list of names matching the search criteria</returns>
		public async Task NamesNotOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexAsync(NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputFormat outputFormat, string name, NamesNotOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexExactSpelling exactSpelling, string featureClass, string featureCategory, string featureType, NamesNotOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexSortBy sortBy, NamesNotOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS outputSRS, NamesNotOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed embed, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputStyle outputStyle, int itemsPerPage, int startIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/notOfficial/search?outputFormat=" + outputFormat+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&exactSpelling="+exactSpelling+"&featureClass=" + (featureClass==null? "" : System.Uri.EscapeDataString(featureClass))+"&featureCategory=" + (featureCategory==null? "" : System.Uri.EscapeDataString(featureCategory))+"&featureType=" + (featureType==null? "" : System.Uri.EscapeDataString(featureType))+"&sortBy=" + sortBy+"&outputSRS="+outputSRS+"&embed="+embed+"&outputStyle=" + outputStyle+"&itemsPerPage="+itemsPerPage+"&startIndex="+startIndex;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search by name, limit to official names only
		/// Search for information about official geographical names by the text of the name itself.  Various options and filter parameters are available to refine the search.
		/// NamesOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndex names/official/search
		/// </summary>
		/// <param name="outputFormat">The format of the output.</param>
		/// <param name="name">A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example 'vancouv*'</param>
		/// <param name="exactSpelling">If the 'name' parameter is specified, 'exactSpelling' specifies whether to include only names that exactly match the search text (exactSpelling=1), or whether to also include names with similar spellings (exactSpelling=0)</param>
		/// <param name="featureClass">A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.</param>
		/// <param name="featureCategory">A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.</param>
		/// <param name="featureType">A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included</param>
		/// <param name="sortBy">The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.</param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries.</param>
		/// <param name="embed">A flag to indicate whether to embed the corresponding 'feature' into each matching name</param>
		/// <param name="outputStyle">A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)</param>
		/// <param name="itemsPerPage">The number of search results to return (1-200)</param>
		/// <param name="startIndex">The index of the first record to be returned (>= 1)</param>
		/// <returns>A list of names matching the search criteria</returns>
		public async Task NamesOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexAsync(NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputFormat outputFormat, string name, NamesOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexExactSpelling exactSpelling, string featureClass, string featureCategory, string featureType, NamesNotOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexSortBy sortBy, NamesOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS outputSRS, NamesOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed embed, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputStyle outputStyle, int itemsPerPage, int startIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/official/search?outputFormat=" + outputFormat+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&exactSpelling="+exactSpelling+"&featureClass=" + (featureClass==null? "" : System.Uri.EscapeDataString(featureClass))+"&featureCategory=" + (featureCategory==null? "" : System.Uri.EscapeDataString(featureCategory))+"&featureType=" + (featureType==null? "" : System.Uri.EscapeDataString(featureType))+"&sortBy=" + sortBy+"&outputSRS="+outputSRS+"&embed="+embed+"&outputStyle=" + outputStyle+"&itemsPerPage="+itemsPerPage+"&startIndex="+startIndex;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search by name
		/// Search for information about geographical names by the text of the name itself.  The response will include both official and unofficial names.  Various options and filter parameters are available to refine the search.
		/// NamesSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndex names/search
		/// </summary>
		/// <param name="outputFormat">The format of the output.</param>
		/// <param name="name">A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example 'vancouv*'</param>
		/// <param name="exactSpelling">If the 'name' parameter is specified, 'exactSpelling' specifies whether to include only names that exactly match the search text (exactSpelling=1), or whether to also include names with similar spellings (exactSpelling=0)</param>
		/// <param name="featureClass">A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.</param>
		/// <param name="featureCategory">A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.</param>
		/// <param name="featureType">A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included</param>
		/// <param name="sortBy">The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.</param>
		/// <param name="outputSRS">The EPSG code of the spatial reference system (SRS) to use for output geometries.</param>
		/// <param name="embed">A flag to indicate whether to embed the corresponding 'feature' into each matching name</param>
		/// <param name="outputStyle">A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)</param>
		/// <param name="itemsPerPage">The number of search results to return (1-200)</param>
		/// <param name="startIndex">The index of the first record to be returned (>= 1)</param>
		/// <returns>A list of names matching the search criteria</returns>
		public async Task NamesSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexAsync(NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputFormat outputFormat, string name, NamesSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexExactSpelling exactSpelling, string featureClass, string featureCategory, string featureType, NamesNotOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexSortBy sortBy, NamesSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS outputSRS, NamesSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed embed, NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputStyle outputStyle, int itemsPerPage, int startIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/search?outputFormat=" + outputFormat+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&exactSpelling="+exactSpelling+"&featureClass=" + (featureClass==null? "" : System.Uri.EscapeDataString(featureClass))+"&featureCategory=" + (featureCategory==null? "" : System.Uri.EscapeDataString(featureCategory))+"&featureType=" + (featureType==null? "" : System.Uri.EscapeDataString(featureType))+"&sortBy=" + sortBy+"&outputSRS="+outputSRS+"&embed="+embed+"&outputStyle=" + outputStyle+"&itemsPerPage="+itemsPerPage+"&startIndex="+startIndex;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a name by its nameId
		/// Get information about the geographical name with the specified nameId.
		/// Names_nameId__outputFormatGet names/{nameId}.{outputFormat}
		/// </summary>
		/// <param name="nameId">The unique identifier for a name</param>
		/// <param name="outputFormat">The format of the output.</param>
		/// <returns>Information about the name with the specified nameId</returns>
		public async Task Names_nameId__outputFormatGetAsync(int nameId, Names_nameId__outputFormatGetOutputFormat outputFormat, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "names/"+nameId+"."+outputFormat;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum FeatureCategoriesGetByOutputFormatOutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xml = 1,
	}
	
	public enum NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xml = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kml = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		csv = 3,
	}
	
	public enum NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		featureType = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		decisionDate = 2,
	}
	
	public enum NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3857 = 3857,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum NamesChangesGetByOutputFormatAndFromDateAndToDateAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		summary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		detail = 1,
	}
	
	public enum NamesDecisionsRecentGetByOutputFormatAndDaysAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3857 = 3857,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum NamesDecisionsRecentGetByOutputFormatAndDaysAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum NamesDecisionsYearGetByOutputFormatAndYearAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3857 = 3857,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum NamesDecisionsYearGetByOutputFormatAndYearAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum NamesInsideGetByOutputFormatAndBboxAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3857 = 3857,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum NamesInsideGetByOutputFormatAndBboxAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum NamesNearGetByOutputFormatAndFeaturePointAndDistanceAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3857 = 3857,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum NamesNearGetByOutputFormatAndFeaturePointAndDistanceAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum NamesNotOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexExactSpelling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum NamesNotOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		relevance = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		featureType = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		decisionDate = 3,
	}
	
	public enum NamesNotOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3857 = 3857,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum NamesNotOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum NamesOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexExactSpelling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum NamesOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3857 = 3857,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum NamesOfficialSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum NamesSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexExactSpelling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum NamesSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexOutputSRS
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4326 = 4326,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4269 = 4269,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3005 = 3005,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3857 = 3857,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26907 = 26907,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26908 = 26908,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26909 = 26909,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26910 = 26910,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26911 = 26911,
	}
	
	public enum NamesSearchGetByOutputFormatAndNameAndExactSpellingAndFeatureClassAndFeatureCategoryAndFeatureTypeAndSortByAndOutputSRSAndEmbedAndOutputStyleAndItemsPerPageAndStartIndexEmbed
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum Names_nameId__outputFormatGetOutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xml = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kml = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		csv = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		html = 4,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
