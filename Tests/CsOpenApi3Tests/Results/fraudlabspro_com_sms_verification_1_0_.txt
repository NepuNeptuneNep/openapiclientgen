//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Verify that an OTP sent by the Send SMS Verification API is valid.
		/// V1VerificationResultGetByTran_idAndKeyAndFormatAndOtp v1/verification/result
		/// </summary>
		/// <param name="tran_id">The unique ID that was returned by the Send Verification SMS API that triggered the OTP sms.</param>
		/// <param name="key">FraudLabs Pro API key.</param>
		/// <param name="format">Returns the API response in json (default) or xml format.</param>
		/// <param name="otp">The OTP that was sent to the recipientâ€™s phone.</param>
		/// <returns>Get verification response</returns>
		public async Task V1VerificationResultGetByTran_idAndKeyAndFormatAndOtpAsync(string tran_id, string key, V1VerificationResultGetByTran_idAndKeyAndFormatAndOtpFormat format, string otp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/verification/result?tran_id=" + (tran_id==null? "" : System.Uri.EscapeDataString(tran_id))+"&key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&format=" + format+"&otp=" + (otp==null? "" : System.Uri.EscapeDataString(otp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send an SMS with verification code and a custom message for authentication purpose.
		/// V1VerificationSendPostByCountry_codeAndFormatAndTelAndKeyAndMesg v1/verification/send
		/// </summary>
		/// <param name="country_code">ISO 3166 country code for the recipient mobile phone number. If parameter is supplied, then some basic telephone number validation is done.</param>
		/// <param name="format">Returns the API response in json (default) or xml format.</param>
		/// <param name="tel">The recipient mobile phone number in E164 format which is a plus followed by just numbers with no spaces or parentheses.</param>
		/// <param name="key">FraudLabs Pro API key.</param>
		/// <param name="mesg">The message template for the SMS. Add <otp> as placeholder for the actual OTP to be generated. Max length is 140 characters.</param>
		/// <returns>send verification response</returns>
		public async Task V1VerificationSendPostByCountry_codeAndFormatAndTelAndKeyAndMesgAsync(string country_code, V1VerificationResultGetByTran_idAndKeyAndFormatAndOtpFormat format, string tel, string key, string mesg, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/verification/send?country_code=" + (country_code==null? "" : System.Uri.EscapeDataString(country_code))+"&format=" + format+"&tel=" + (tel==null? "" : System.Uri.EscapeDataString(tel))+"&key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&mesg=" + (mesg==null? "" : System.Uri.EscapeDataString(mesg));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum V1VerificationResultGetByTran_idAndKeyAndFormatAndOtpFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="json")]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="xml")]
		xml = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
