//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateExperimentTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="experimentTemplate")]
		public ExperimentTemplate ExperimentTemplate { get; set; }
	}
	
	/// <summary>
	/// Describes an experiment template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplate
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public ExperimentTemplateTargetMap Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public ExperimentTemplateActionMap Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopConditions")]
		public ExperimentTemplateStopCondition[] StopConditions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logConfiguration")]
		public ExperimentTemplateLogConfiguration LogConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateTargetMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateActionMap
	{
	}
	
	/// <summary>
	/// Describes a stop condition for an experiment template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateStopCondition
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMap
	{
	}
	
	/// <summary>
	/// Describes the configuration for experiment logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateLogConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogsConfiguration")]
		public ExperimentTemplateCloudWatchLogsLogConfiguration CloudWatchLogsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Configuration")]
		public ExperimentTemplateS3LogConfiguration S3Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logSchemaVersion")]
		public System.Nullable<System.Int32> LogSchemaVersion { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration for experiment logging to Amazon CloudWatch Logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateCloudWatchLogsLogConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="logGroupArn")]
		public string LogGroupArn { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration for experiment logging to Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateS3LogConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	/// <summary>
	/// Specifies a stop condition for an experiment template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateExperimentTemplateStopConditionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies a target for an experiment. You must specify at least one Amazon Resource Name (ARN) or at least one resource tag. You cannot specify both ARNs and tags.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/targets.html">Targets</a> in the <i>Fault Injection Simulator User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateExperimentTemplateTargetInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceArns")]
		public string[] ResourceArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTags")]
		public TagMap ResourceTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ExperimentTemplateTargetInputFilter[] Filters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectionMode")]
		public string SelectionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ExperimentTemplateTargetParameterMap Parameters { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies a filter used for the target resource input in an experiment template.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters">Resource filters</a> in the <i>Fault Injection Simulator User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateTargetInputFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateTargetParameterMap
	{
	}
	
	/// <summary>
	/// <p>Specifies an action for an experiment template.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/actions.html">Actions</a> in the <i>Fault Injection Simulator User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateExperimentTemplateActionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public string ActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ExperimentTemplateActionParameterMap Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public ExperimentTemplateActionTargetMap Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startAfter")]
		public string[] StartAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateActionParameterMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateActionTargetMap
	{
	}
	
	/// <summary>
	/// Specifies the configuration for experiment logging to Amazon CloudWatch Logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateCloudWatchLogsLogConfigurationInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logGroupArn")]
		public string LogGroupArn { get; set; }
	}
	
	/// <summary>
	/// Specifies the configuration for experiment logging to Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateS3LogConfigurationInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteExperimentTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="experimentTemplate")]
		public ExperimentTemplate ExperimentTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetActionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public Action Action { get; set; }
	}
	
	/// <summary>
	/// Describes an action. For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html">FIS actions</a> in the <i>Fault Injection Simulator User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Action
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ActionParameterMap Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public ActionTargetMap Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionParameterMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionTargetMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetExperimentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="experiment")]
		public Experiment Experiment { get; set; }
	}
	
	/// <summary>
	/// Describes an experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Experiment
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="experimentTemplateId")]
		public string ExperimentTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ExperimentState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public ExperimentTargetMap Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public ExperimentActionMap Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopConditions")]
		public ExperimentStopCondition[] StopConditions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logConfiguration")]
		public ExperimentLogConfiguration LogConfiguration { get; set; }
	}
	
	/// <summary>
	/// Describes the state of an experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentState
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExperimentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExperimentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="initiating")]
		initiating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="running")]
		running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stopping")]
		stopping = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stopped")]
		stopped = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTargetMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentActionMap
	{
	}
	
	/// <summary>
	/// Describes the stop condition for an experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentStopCondition
	{
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration for experiment logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentLogConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogsConfiguration")]
		public ExperimentCloudWatchLogsLogConfiguration CloudWatchLogsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Configuration")]
		public ExperimentS3LogConfiguration S3Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logSchemaVersion")]
		public System.Nullable<System.Int32> LogSchemaVersion { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration for experiment logging to Amazon CloudWatch Logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentCloudWatchLogsLogConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="logGroupArn")]
		public string LogGroupArn { get; set; }
	}
	
	/// <summary>
	/// Describes the configuration for experiment logging to Amazon S3.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentS3LogConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetExperimentTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="experimentTemplate")]
		public ExperimentTemplate ExperimentTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTargetResourceTypeResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="targetResourceType")]
		public TargetResourceType TargetResourceType { get; set; }
	}
	
	/// <summary>
	/// Describes a resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetResourceType
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public TargetResourceTypeParameterMap Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetResourceTypeParameterMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListActionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public ActionSummary[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of an action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public ActionTargetMap Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListExperimentTemplatesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="experimentTemplates")]
		public ExperimentTemplateSummary[] ExperimentTemplates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of an experiment template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListExperimentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="experiments")]
		public ExperimentSummary[] Experiments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Provides a summary of an experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="experimentTemplateId")]
		public string ExperimentTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ExperimentState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTargetResourceTypesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="targetResourceTypes")]
		public TargetResourceTypeSummary[] TargetResourceTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a resource type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetResourceTypeSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartExperimentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="experiment")]
		public Experiment Experiment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopExperimentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="experiment")]
		public Experiment Experiment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateExperimentTemplateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="experimentTemplate")]
		public ExperimentTemplate ExperimentTemplate { get; set; }
	}
	
	/// <summary>
	/// Specifies a stop condition for an experiment. You can define a stop condition as a CloudWatch alarm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateExperimentTemplateStopConditionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Specifies a target for an experiment. You must specify at least one Amazon Resource Name (ARN) or at least one resource tag. You cannot specify both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateExperimentTemplateTargetInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceArns")]
		public string[] ResourceArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTags")]
		public TagMap ResourceTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ExperimentTemplateTargetInputFilter[] Filters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectionMode")]
		public string SelectionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ExperimentTemplateTargetParameterMap Parameters { get; set; }
	}
	
	/// <summary>
	/// Specifies an action for an experiment template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateExperimentTemplateActionInputItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public string ActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ExperimentTemplateActionParameterMap Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public ExperimentTemplateActionTargetMap Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startAfter")]
		public string[] StartAfter { get; set; }
	}
	
	/// <summary>
	/// Describes a parameter for an action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
	}
	
	/// <summary>
	/// Describes a target for an action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateExperimentTemplateActionInputMap
	{
	}
	
	/// <summary>
	/// Specifies the configuration for experiment logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateExperimentTemplateLogConfigurationInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogsConfiguration")]
		public ExperimentTemplateCloudWatchLogsLogConfigurationInput CloudWatchLogsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Configuration")]
		public ExperimentTemplateS3LogConfigurationInput S3Configuration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logSchemaVersion")]
		public int LogSchemaVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateExperimentTemplateTargetInputMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateExperimentTemplateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stopConditions")]
		public CreateExperimentTemplateStopConditionInput[] StopConditions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public CreateExperimentTemplateTargetInputMap Targets { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public CreateExperimentTemplateActionInputMap Actions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logConfiguration")]
		public CreateExperimentTemplateLogConfigurationInput LogConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteExperimentTemplateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentActionParameterMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentActionTargetMap
	{
	}
	
	/// <summary>
	/// Describes the state of an action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentActionState
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ExperimentActionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExperimentActionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="initiating")]
		initiating = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="running")]
		running = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="completed")]
		completed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cancelled")]
		cancelled = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stopping")]
		stopping = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stopped")]
		stopped = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 7,
	}
	
	/// <summary>
	/// Describes the action for an experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public string ActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ExperimentActionParameterMap Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public ExperimentActionTargetMap Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startAfter")]
		public string[] StartAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ExperimentActionState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	/// <summary>
	/// Describes a filter used for the target resources in an experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTargetFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTargetParameterMap
	{
	}
	
	/// <summary>
	/// Describes a target for an experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceArns")]
		public string[] ResourceArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTags")]
		public TagMap ResourceTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ExperimentTargetFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selectionMode")]
		public string SelectionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ExperimentTargetParameterMap Parameters { get; set; }
	}
	
	/// <summary>
	/// Describes an action for an experiment template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public string ActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ExperimentTemplateActionParameterMap Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public ExperimentTemplateActionTargetMap Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startAfter")]
		public string[] StartAfter { get; set; }
	}
	
	/// <summary>
	/// Describes a filter used for the target resources in an experiment template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateTargetFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Describes a target for an experiment template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExperimentTemplateTarget
	{
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceArns")]
		public string[] ResourceArns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTags")]
		public TagMap ResourceTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ExperimentTemplateTargetFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selectionMode")]
		public string SelectionMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ExperimentTemplateTargetParameterMap Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetActionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetExperimentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetExperimentTemplateRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTargetResourceTypeRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListActionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListExperimentTemplatesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListExperimentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTargetResourceTypesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartExperimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="experimentTemplateId")]
		public string ExperimentTemplateId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopExperimentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Describes the parameters for a resource type. Use parameters to determine which tasks are identified during target resolution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TargetResourceTypeParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateExperimentTemplateActionInputMap
	{
	}
	
	/// <summary>
	/// Specifies the configuration for experiment logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateExperimentTemplateLogConfigurationInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogsConfiguration")]
		public ExperimentTemplateCloudWatchLogsLogConfigurationInput CloudWatchLogsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Configuration")]
		public ExperimentTemplateS3LogConfigurationInput S3Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logSchemaVersion")]
		public System.Nullable<System.Int32> LogSchemaVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateExperimentTemplateTargetInputMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateExperimentTemplateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopConditions")]
		public UpdateExperimentTemplateStopConditionInput[] StopConditions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public UpdateExperimentTemplateTargetInputMap Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public UpdateExperimentTemplateActionInputMap Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logConfiguration")]
		public UpdateExperimentTemplateLogConfigurationInput LogConfiguration { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Creates an experiment template. </p> <p>An experiment template includes the following components:</p> <ul> <li> <p> <b>Targets</b>: A target can be a specific resource in your Amazon Web Services environment, or one or more resources that match criteria that you specify, for example, resources that have specific tags.</p> </li> <li> <p> <b>Actions</b>: The actions to carry out on the target. You can specify multiple actions, the duration of each action, and when to start each action during an experiment.</p> </li> <li> <p> <b>Stop conditions</b>: If a stop condition is triggered while an experiment is running, the experiment is automatically stopped. You can define a stop condition as a CloudWatch alarm.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/experiment-templates.html">Experiment templates</a> in the <i>Fault Injection Simulator User Guide</i>.</p>
		/// CreateExperimentTemplate experimentTemplates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateExperimentTemplateResponse> CreateExperimentTemplateAsync(CreateExperimentTemplatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "experimentTemplates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateExperimentTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists your experiment templates.
		/// ListExperimentTemplates experimentTemplates
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="nextToken">The token for the next page of results.</param>
		/// <returns>Success</returns>
		public async Task<ListExperimentTemplatesResponse> ListExperimentTemplatesAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "experimentTemplates?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListExperimentTemplatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified experiment template.
		/// DeleteExperimentTemplate experimentTemplates/{id}
		/// </summary>
		/// <param name="id">The ID of the experiment template.</param>
		/// <returns>Success</returns>
		public async Task<DeleteExperimentTemplateResponse> DeleteExperimentTemplateAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "experimentTemplates/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteExperimentTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified experiment template.
		/// GetExperimentTemplate experimentTemplates/{id}
		/// </summary>
		/// <param name="id">The ID of the experiment template.</param>
		/// <returns>Success</returns>
		public async Task<GetExperimentTemplateResponse> GetExperimentTemplateAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "experimentTemplates/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetExperimentTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified experiment template.
		/// UpdateExperimentTemplate experimentTemplates/{id}
		/// </summary>
		/// <param name="id">The ID of the experiment template.</param>
		/// <returns>Success</returns>
		public async Task<UpdateExperimentTemplateResponse> UpdateExperimentTemplateAsync(string id, UpdateExperimentTemplatePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "experimentTemplates/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateExperimentTemplateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified FIS action.
		/// GetAction actions/{id}
		/// </summary>
		/// <param name="id">The ID of the action.</param>
		/// <returns>Success</returns>
		public async Task<GetActionResponse> GetActionAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "actions/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetActionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified experiment.
		/// GetExperiment experiments/{id}
		/// </summary>
		/// <param name="id">The ID of the experiment.</param>
		/// <returns>Success</returns>
		public async Task<GetExperimentResponse> GetExperimentAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "experiments/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetExperimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops the specified experiment.
		/// StopExperiment experiments/{id}
		/// </summary>
		/// <param name="id">The ID of the experiment.</param>
		/// <returns>Success</returns>
		public async Task<StopExperimentResponse> StopExperimentAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "experiments/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopExperimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified resource type.
		/// GetTargetResourceType targetResourceTypes/{resourceType}
		/// </summary>
		/// <param name="resourceType">The resource type.</param>
		/// <returns>Success</returns>
		public async Task<GetTargetResourceTypeResponse> GetTargetResourceTypeAsync(string resourceType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targetResourceTypes/"+ (resourceType==null? "" : System.Uri.EscapeDataString(resourceType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTargetResourceTypeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the available FIS actions.
		/// ListActions actions
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="nextToken">The token for the next page of results.</param>
		/// <returns>Success</returns>
		public async Task<ListActionsResponse> ListActionsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "actions?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListActionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists your experiments.
		/// ListExperiments experiments
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="nextToken">The token for the next page of results.</param>
		/// <returns>Success</returns>
		public async Task<ListExperimentsResponse> ListExperimentsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "experiments?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListExperimentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts running an experiment from the specified experiment template.
		/// StartExperiment experiments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartExperimentResponse> StartExperimentAsync(StartExperimentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "experiments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartExperimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the tags for the specified resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies the specified tags to the specified resource.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the specified resource.
		/// UntagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.</param>
		/// <param name="tagKeys">The tag keys to remove.</param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the target resource types.
		/// ListTargetResourceTypes targetResourceTypes
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</param>
		/// <param name="nextToken">The token for the next page of results.</param>
		/// <returns>Success</returns>
		public async Task<ListTargetResourceTypesResponse> ListTargetResourceTypesAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "targetResourceTypes?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTargetResourceTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CreateExperimentTemplatePostBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\S]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// A description for the experiment template.
		/// Required
		/// Max length: 512
		/// Pattern: [\s\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// The stop conditions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stopConditions")]
		public CreateExperimentTemplateStopConditionInput[] StopConditions { get; set; }
		
		/// <summary>
		/// The targets for the experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public System.Collections.Generic.Dictionary<string, CreateExperimentTemplateTargetInput> Targets { get; set; }
		
		/// <summary>
		/// The actions for the experiment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public System.Collections.Generic.Dictionary<string, CreateExperimentTemplateActionInput> Actions { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.
		/// Required
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: [\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\S]+")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// The tags to apply to the experiment template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Specifies the configuration for experiment logging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logConfiguration")]
		public CreateExperimentTemplatePostBodyLogConfiguration LogConfiguration { get; set; }
	}
	
	public class CreateExperimentTemplatePostBodyLogConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogsConfiguration")]
		public ExperimentTemplateCloudWatchLogsLogConfigurationInput CloudWatchLogsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Configuration")]
		public ExperimentTemplateS3LogConfigurationInput S3Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logSchemaVersion")]
		public System.Nullable<System.Int32> LogSchemaVersion { get; set; }
	}
	
	public class UpdateExperimentTemplatePatchBody
	{
		
		/// <summary>
		/// A description for the template.
		/// Max length: 512
		/// Pattern: [\s\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]+")]
		public string Description { get; set; }
		
		/// <summary>
		/// The stop conditions for the experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopConditions")]
		public UpdateExperimentTemplateStopConditionInput[] StopConditions { get; set; }
		
		/// <summary>
		/// The targets for the experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public System.Collections.Generic.Dictionary<string, UpdateExperimentTemplateTargetInput> Targets { get; set; }
		
		/// <summary>
		/// The actions for the experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public System.Collections.Generic.Dictionary<string, UpdateExperimentTemplateActionInputItem> Actions { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.
		/// Max length: 2048
		/// Min length: 20
		/// Pattern: [\S]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\S]+")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Specifies the configuration for experiment logging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logConfiguration")]
		public UpdateExperimentTemplatePatchBodyLogConfiguration LogConfiguration { get; set; }
	}
	
	public class UpdateExperimentTemplatePatchBodyLogConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="cloudWatchLogsConfiguration")]
		public ExperimentTemplateCloudWatchLogsLogConfigurationInput CloudWatchLogsConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Configuration")]
		public ExperimentTemplateS3LogConfigurationInput S3Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logSchemaVersion")]
		public System.Nullable<System.Int32> LogSchemaVersion { get; set; }
	}
	
	public class StartExperimentPostBody
	{
		
		/// <summary>
		/// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// Pattern: [\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\S]+")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The ID of the experiment template.
		/// Required
		/// Max length: 64
		/// Pattern: [\S]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="experimentTemplateId")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\S]+")]
		public string ExperimentTemplateId { get; set; }
		
		/// <summary>
		/// The tags to apply to the experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags for the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
