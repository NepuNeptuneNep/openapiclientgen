//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIKey
	{
		
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="counter")]
		public System.Nullable<System.Int64> Counter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inactive")]
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_used_at")]
		public System.Nullable<System.Int64> Last_used_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_used_ip")]
		public string Last_used_ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_used_ua")]
		public string Last_used_ua { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization_id")]
		public string Organization_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage_limit")]
		public System.Nullable<System.Int64> Usage_limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage_today")]
		public System.Nullable<System.Int64> Usage_today { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class APIKeyOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization_id")]
		public string Organization_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AWSCredentialFields
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access_key")]
		public string Access_key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string Regions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secret_access_key")]
		public string Secret_access_key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="use_cross_account_org")]
		public string Use_cross_account_org { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Agent
	{
		
		[System.Runtime.Serialization.DataMember(Name="arch")]
		public string Arch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connected")]
		public System.Nullable<System.Boolean> Connected { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deactivated_at")]
		public System.Nullable<System.Int64> Deactivated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_ip")]
		public string External_ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="host_id")]
		public string Host_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hub_id")]
		public string Hub_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inactive")]
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internal_ip")]
		public string Internal_ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_checkin")]
		public System.Nullable<System.Int64> Last_checkin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization_id")]
		public string Organization_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os")]
		public string Os { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="site_id")]
		public string Site_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="system_info")]
		public string System_info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Int64> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AgentSiteID
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="site_id")]
		public string Site_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Asset
	{
		
		[System.Runtime.Serialization.DataMember(Name="addresses")]
		public string[] Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addresses_extra")]
		public string[] Addresses_extra { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="agent_name")]
		public string Agent_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alive")]
		public string Alive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public System.Collections.Generic.Dictionary<string, string> Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detected_by")]
		public string Detected_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public string[] Domains { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_seen")]
		public System.Nullable<System.Int64> First_seen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hw")]
		public string Hw { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_agent_id")]
		public string Last_agent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_seen")]
		public System.Nullable<System.Int64> Last_seen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_task_id")]
		public string Last_task_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowest_rtt")]
		public System.Nullable<System.Int64> Lowest_rtt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowest_ttl")]
		public System.Nullable<System.Int64> Lowest_ttl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mac_vendors")]
		public string[] Mac_vendors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="macs")]
		public string[] Macs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public string[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newest_mac")]
		public string Newest_mac { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newest_mac_age")]
		public System.Nullable<System.Int64> Newest_mac_age { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newest_mac_vendor")]
		public string Newest_mac_vendor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_name")]
		public string Org_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization_id")]
		public string Organization_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os")]
		public string Os { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os_version")]
		public string Os_version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rtts")]
		public string Rtts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count")]
		public System.Nullable<System.Int64> Service_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_arp")]
		public System.Nullable<System.Int64> Service_count_arp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_icmp")]
		public System.Nullable<System.Int64> Service_count_icmp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_tcp")]
		public System.Nullable<System.Int64> Service_count_tcp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_udp")]
		public System.Nullable<System.Int64> Service_count_udp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_ports_products")]
		public string[] Service_ports_products { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_ports_protocols")]
		public string[] Service_ports_protocols { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_ports_tcp")]
		public string[] Service_ports_tcp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_ports_udp")]
		public string[] Service_ports_udp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="services")]
		public System.Collections.Generic.Dictionary<string, object> Services { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="site_id")]
		public string Site_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="site_name")]
		public string Site_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Int64> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetComments
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetServiceNow
	{
		
		[System.Runtime.Serialization.DataMember(Name="addresses_extra")]
		public string Addresses_extra { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addresses_scope")]
		public string Addresses_scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alive")]
		public string Alive { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="asset_id")]
		public string Asset_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detected_by")]
		public string Detected_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public string Domains { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_discovered")]
		public string First_discovered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hw_product")]
		public string Hw_product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hw_vendor")]
		public string Hw_vendor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hw_version")]
		public string Hw_version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip_address")]
		public string Ip_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_discovered")]
		public string Last_discovered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_updated")]
		public string Last_updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowest_rtt")]
		public System.Nullable<System.Int64> Lowest_rtt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowest_ttl")]
		public System.Nullable<System.Int64> Lowest_ttl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mac_address")]
		public string Mac_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mac_manufacturer")]
		public string Mac_manufacturer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mac_vendors")]
		public string Mac_vendors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="macs")]
		public string Macs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newest_mac_age")]
		public string Newest_mac_age { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public string Organization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os_product")]
		public string Os_product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os_vendor")]
		public string Os_vendor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os_version")]
		public string Os_version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count")]
		public System.Nullable<System.Int64> Service_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_arp")]
		public System.Nullable<System.Int64> Service_count_arp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_icmp")]
		public System.Nullable<System.Int64> Service_count_icmp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_tcp")]
		public System.Nullable<System.Int64> Service_count_tcp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_udp")]
		public System.Nullable<System.Int64> Service_count_udp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="site")]
		public string Site { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sys_class_name")]
		public string Sys_class_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetTags
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetTagsWithSearch
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="search")]
		public string Search { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetsWithCheckpoint
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public Asset[] Assets { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="since")]
		public long Since { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AzureClientSecretCredentialFields
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_secret")]
		public string Client_secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="multi_subscription")]
		public string Multi_subscription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription_id")]
		public string Subscription_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tenant_id")]
		public string Tenant_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AzureUsernamePasswordCredentialFields
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tenant_id")]
		public string Tenant_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CensysCredentialFields
	{
		
		[System.Runtime.Serialization.DataMember(Name="api_url")]
		public string Api_url { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_secret")]
		public string Client_secret { get; set; }
	}
	
	/// <summary>
	/// A component ID and version
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentVersion
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Credential
	{
		
		[System.Runtime.Serialization.DataMember(Name="acl")]
		public string Acl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cidrs")]
		public string[] Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by_email")]
		public string Created_by_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by_id")]
		public string Created_by_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="global")]
		public System.Nullable<System.Boolean> Global { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_used_at")]
		public System.Nullable<System.Int64> Last_used_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_used_by_id")]
		public string Last_used_by_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The service the credentials are for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CredentialType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CredentialType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="miradore_api_key_v1")]
		miradore_api_key_v1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aws_access_secret")]
		aws_access_secret = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="crowdstrike_api_key")]
		crowdstrike_api_key = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="azure_client_secret")]
		azure_client_secret = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="azure_username_password")]
		azure_username_password = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="censys_search_api_key")]
		censys_search_api_key = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="snmpv2_community")]
		snmpv2_community = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="snmpv3_credential")]
		snmpv3_credential = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vmware_username_password")]
		vmware_username_password = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CredentialFields
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CredentialOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="acl")]
		public string Acl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cidrs")]
		public string Cidrs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="global")]
		public System.Nullable<System.Boolean> Global { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public CredentialFields Secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CredentialOptionsType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CredentialOptionsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="miradore_api_key_v1")]
		miradore_api_key_v1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aws_access_secret")]
		aws_access_secret = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CrowdstrikeCredentialFields
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_url")]
		public string Api_url { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_secret")]
		public string Client_secret { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization_id")]
		public string Organization_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processed_at")]
		public System.Nullable<System.Int64> Processed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processor_id")]
		public string Processor_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="site_id")]
		public string Site_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_name")]
		public string Source_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_type")]
		public string Source_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_id")]
		public string Target_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_name")]
		public string Target_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_type")]
		public string Target_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by_email")]
		public string Created_by_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public System.Nullable<System.Int64> Expires_at { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_default_role")]
		public string Org_default_role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_roles")]
		public string Org_roles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role_summary")]
		public string Role_summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Int64> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_count")]
		public System.Nullable<System.Int64> User_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupMapping
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by_email")]
		public string Created_by_email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="group_id")]
		public string Group_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group_name")]
		public string Group_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sso_attribute")]
		public string Sso_attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sso_value")]
		public string Sso_value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Int64> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupPost
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public System.Nullable<System.Int64> Expires_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_default_role")]
		public string Org_default_role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_roles")]
		public string Org_roles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupPut
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public System.Nullable<System.Int64> Expires_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_default_role")]
		public string Org_default_role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_roles")]
		public string Org_roles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class License
	{
		
		[System.Runtime.Serialization.DataMember(Name="activated_at")]
		public System.Nullable<System.Int64> Activated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address_city")]
		public string Address_city { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address_country")]
		public string Address_country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address_postal")]
		public string Address_postal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address_region")]
		public string Address_region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address_street")]
		public string Address_street { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_expiration")]
		public System.Nullable<System.Int64> License_expiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_live_asset_count")]
		public System.Nullable<System.Int64> License_live_asset_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_max_assets")]
		public System.Nullable<System.Int64> License_max_assets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_project_asset_count")]
		public System.Nullable<System.Int64> License_project_asset_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license_type")]
		public string License_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partner")]
		public string Partner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public string Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sso_default_role")]
		public string Sso_default_role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sso_domain")]
		public string Sso_domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sso_login_issuer_url")]
		public string Sso_login_issuer_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sso_login_login_url")]
		public string Sso_login_login_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sso_login_logout_url")]
		public string Sso_login_logout_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sso_login_message")]
		public string Sso_login_message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sso_mode")]
		public string Sso_mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sso_type")]
		public string Sso_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription_cancel_at")]
		public System.Nullable<System.Int64> Subscription_cancel_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription_canceled_at")]
		public System.Nullable<System.Int64> Subscription_canceled_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription_period_end")]
		public System.Nullable<System.Int64> Subscription_period_end { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription_period_start")]
		public System.Nullable<System.Int64> Subscription_period_start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Int64> Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="via_reseller")]
		public System.Nullable<System.Boolean> Via_reseller { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MiradoreCredentialFields
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_key")]
		public string Api_key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrgOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiration_assets_offline")]
		public string Expiration_assets_offline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiration_assets_stale")]
		public string Expiration_assets_stale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiration_scans")]
		public string Expiration_scans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="export_token")]
		public string Export_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public string Parent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Organization
	{
		
		[System.Runtime.Serialization.DataMember(Name="asset_count")]
		public System.Nullable<System.Int64> Asset_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deactivated_at")]
		public System.Nullable<System.Int64> Deactivated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_token")]
		public string Download_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="download_token_created_at")]
		public System.Nullable<System.Int64> Download_token_created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiration_assets_offline")]
		public System.Nullable<System.Int64> Expiration_assets_offline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiration_assets_stale")]
		public System.Nullable<System.Int64> Expiration_assets_stale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expiration_scans")]
		public System.Nullable<System.Int64> Expiration_scans { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="export_token")]
		public string Export_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="export_token_counter")]
		public System.Nullable<System.Int64> Export_token_counter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="export_token_created_at")]
		public System.Nullable<System.Int64> Export_token_created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="export_token_last_used_at")]
		public System.Nullable<System.Int64> Export_token_last_used_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="export_token_last_used_by")]
		public string Export_token_last_used_by { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inactive")]
		public System.Nullable<System.Boolean> Inactive { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public string Parent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permanent")]
		public System.Nullable<System.Boolean> Permanent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="project")]
		public System.Nullable<System.Boolean> Project { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count")]
		public System.Nullable<System.Int64> Service_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_arp")]
		public System.Nullable<System.Int64> Service_count_arp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_icmp")]
		public System.Nullable<System.Int64> Service_count_icmp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_tcp")]
		public System.Nullable<System.Int64> Service_count_tcp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_udp")]
		public System.Nullable<System.Int64> Service_count_udp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Int64> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SNMPv2CommunitiesCredentialFields
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="community")]
		public string Community { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SNMPv3CredentialFields
	{
		
		[System.Runtime.Serialization.DataMember(Name="auth-passphrase")]
		public string Auth_passphrase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auth-protocol")]
		public string Auth_protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="context")]
		public string Context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy-passphrase")]
		public string Privacy_passphrase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy-protocol")]
		public string Privacy_protocol { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScanOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="agent")]
		public string Agent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="excludes")]
		public string Excludes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="host-ping")]
		public string Host_ping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="max-attempts")]
		public string Max_attempts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="max-group-size")]
		public string Max_group_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="max-host-rate")]
		public string Max_host_rate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="max-sockets")]
		public string Max_sockets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="max-ttl")]
		public string Max_ttl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameservers")]
		public string Nameservers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="passes")]
		public string Passes { get; set; }
		
		/// <summary>
		/// Optional probe list, otherwise all probes are used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="probes")]
		public string Probes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public string Rate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scan-description")]
		public string Scan_description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scan-frequency")]
		public System.Nullable<ScanOptionsScan_frequency> Scan_frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scan-grace-period")]
		public string Scan_grace_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scan-name")]
		public string Scan_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scan-start")]
		public string Scan_start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scan-tags")]
		public string Scan_tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="screenshots")]
		public string Screenshots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnet-ping")]
		public string Subnet_ping { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnet-ping-net-size")]
		public string Subnet_ping_net_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnet-ping-sample-rate")]
		public string Subnet_ping_sample_rate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public string Targets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tcp-excludes")]
		public string Tcp_excludes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tcp-ports")]
		public string Tcp_ports { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScanOptionsScan_frequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="once")]
		once = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hourly")]
		hourly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="daily")]
		daily = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="weekly")]
		weekly = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="monthly")]
		monthly = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="continuous")]
		continuous = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScanTemplate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acl")]
		public string Acl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="agent_id")]
		public string Agent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by_user_id")]
		public string Created_by_user_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cruncher_id")]
		public string Cruncher_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="global")]
		public bool Global { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grace_period")]
		public string Grace_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hosted_zone_id")]
		public string Hosted_zone_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linked_task_count")]
		public System.Nullable<System.Int32> Linked_task_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization_id")]
		public string Organization_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, string> Params { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public string Parent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recur")]
		public System.Nullable<System.Boolean> Recur { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recur_frequency")]
		public string Recur_frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recur_last")]
		public System.Nullable<System.Int64> Recur_last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recur_last_task_id")]
		public string Recur_last_task_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recur_next")]
		public System.Nullable<System.Int64> Recur_next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="site_id")]
		public string Site_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size_data")]
		public System.Nullable<System.Int64> Size_data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size_results")]
		public System.Nullable<System.Int64> Size_results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size_site")]
		public System.Nullable<System.Int64> Size_site { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_id")]
		public string Source_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.Int64> Start_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public string Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="template_id")]
		public string Template_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Int64> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScanTemplateOptions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acl")]
		public string Acl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="global")]
		public bool Global { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, string> Params { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Search
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="search")]
		public string Search1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Service
	{
		
		[System.Runtime.Serialization.DataMember(Name="addresses")]
		public string[] Addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addresses_extra")]
		public string[] Addresses_extra { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="agent_name")]
		public string Agent_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alive")]
		public string Alive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public System.Collections.Generic.Dictionary<string, string> Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detected_by")]
		public string Detected_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public string[] Domains { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_seen")]
		public System.Nullable<System.Int64> First_seen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hw")]
		public string Hw { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_agent_id")]
		public string Last_agent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_seen")]
		public System.Nullable<System.Int64> Last_seen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_task_id")]
		public string Last_task_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowest_rtt")]
		public System.Nullable<System.Int64> Lowest_rtt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowest_ttl")]
		public System.Nullable<System.Int64> Lowest_ttl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mac_vendors")]
		public string[] Mac_vendors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="macs")]
		public string[] Macs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="names")]
		public string[] Names { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newest_mac")]
		public string Newest_mac { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newest_mac_age")]
		public System.Nullable<System.Int64> Newest_mac_age { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newest_mac_vendor")]
		public string Newest_mac_vendor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_name")]
		public string Org_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization_id")]
		public string Organization_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os")]
		public string Os { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="os_version")]
		public string Os_version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rtts")]
		public string Rtts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_address")]
		public string Service_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_asset_id")]
		public string Service_asset_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count")]
		public System.Nullable<System.Int64> Service_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_arp")]
		public System.Nullable<System.Int64> Service_count_arp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_icmp")]
		public System.Nullable<System.Int64> Service_count_icmp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_tcp")]
		public System.Nullable<System.Int64> Service_count_tcp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_count_udp")]
		public System.Nullable<System.Int64> Service_count_udp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_created_at")]
		public System.Nullable<System.Int64> Service_created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_data")]
		public System.Collections.Generic.Dictionary<string, string> Service_data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="service_id")]
		public string Service_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_link")]
		public string Service_link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_port")]
		public string Service_port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_ports_products")]
		public string[] Service_ports_products { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_ports_protocols")]
		public string[] Service_ports_protocols { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_ports_tcp")]
		public string[] Service_ports_tcp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_ports_udp")]
		public string[] Service_ports_udp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_protocol")]
		public string Service_protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_screenshot_link")]
		public string Service_screenshot_link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_summary")]
		public string Service_summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_transport")]
		public string Service_transport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_updated_at")]
		public System.Nullable<System.Int64> Service_updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_vhost")]
		public string Service_vhost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="services")]
		public System.Collections.Generic.Dictionary<string, object> Services { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="site_id")]
		public string Site_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="site_name")]
		public string Site_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Int64> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Site
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="excludes")]
		public string Excludes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permanent")]
		public System.Nullable<System.Boolean> Permanent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subnets")]
		public string Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Int64> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SiteOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="excludes")]
		public string Excludes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatusMessage
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Task_
	{
		
		[System.Runtime.Serialization.DataMember(Name="agent_id")]
		public string Agent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by_user_id")]
		public string Created_by_user_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cruncher_id")]
		public string Cruncher_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization_id")]
		public string Organization_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, string> Params { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public string Parent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recur")]
		public System.Nullable<System.Boolean> Recur { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recur_frequency")]
		public string Recur_frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recur_last")]
		public System.Nullable<System.Int64> Recur_last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recur_last_task_id")]
		public string Recur_last_task_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recur_next")]
		public System.Nullable<System.Int64> Recur_next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="site_id")]
		public string Site_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.Int64> Start_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public string Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="template_id")]
		public string Template_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Int64> Updated_at { get; set; }
	}
	
	/// <summary>
	/// A URL to a resource
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class URL
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="client_admin")]
		public System.Nullable<System.Boolean> Client_admin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invite_token_expiration")]
		public System.Nullable<System.Int64> Invite_token_expiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_login_at")]
		public System.Nullable<System.Int64> Last_login_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_login_ip")]
		public string Last_login_ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_login_ua")]
		public string Last_login_ua { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="login_failures")]
		public System.Nullable<System.Int64> Login_failures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_default_role")]
		public string Org_default_role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_roles")]
		public string Org_roles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reset_token_expiration")]
		public System.Nullable<System.Int64> Reset_token_expiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sso_only")]
		public System.Nullable<System.Boolean> Sso_only { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Int64> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserInviteOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="client_admin")]
		public System.Nullable<System.Boolean> Client_admin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_default_role")]
		public string Org_default_role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_roles")]
		public string Org_roles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="client_admin")]
		public System.Nullable<System.Boolean> Client_admin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first_name")]
		public string First_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_name")]
		public string Last_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_default_role")]
		public string Org_default_role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_roles")]
		public string Org_roles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VMwareCredentialFields
	{
		
		[System.Runtime.Serialization.DataMember(Name="insecure")]
		public string Insecure { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbprints")]
		public string Thumbprints { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Wireless
	{
		
		[System.Runtime.Serialization.DataMember(Name="agent_name")]
		public string Agent_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public string Authentication { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bssid")]
		public string Bssid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public string Channels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.Int64> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, string> Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public string Encryption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="essid")]
		public string Essid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interface")]
		public string Interface { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_agent_id")]
		public string Last_agent_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_seen")]
		public System.Nullable<System.Int64> Last_seen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_task_id")]
		public string Last_task_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org_name")]
		public string Org_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization_id")]
		public string Organization_id { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signal")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Signal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="site_id")]
		public string Site_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="site_name")]
		public string Site_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public string Vendor { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get all agents across all organizations
		/// GetAccountAgents account/agents
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>array of tasks</returns>
		public async Task<Agent[]> GetAccountAgentsAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/agents?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Agent[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all account credentials
		/// GetAccountCredentials account/credentials
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>array of credentials</returns>
		public async Task<Credential[]> GetAccountCredentialsAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/credentials?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Credential[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new credential
		/// CreateAccountCredential account/credentials
		/// </summary>
		/// <param name="requestBody">credential parameters</param>
		/// <returns>credential details</returns>
		public async Task<Credential> CreateAccountCredentialAsync(CredentialOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/credentials";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Credential>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove this credential
		/// RemoveAccountCredential account/credentials/{credential_id}
		/// </summary>
		/// <param name="credential_id">UUID of the credential to delete</param>
		public async Task RemoveAccountCredentialAsync(string credential_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/credentials/"+ (credential_id==null? "" : System.Uri.EscapeDataString(credential_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get credential details
		/// GetAccountCredential account/credentials/{credential_id}
		/// </summary>
		/// <param name="credential_id">UUID of the credential to retrieve</param>
		/// <returns>credential details</returns>
		public async Task<Credential> GetAccountCredentialAsync(string credential_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/credentials/"+ (credential_id==null? "" : System.Uri.EscapeDataString(credential_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Credential>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// System event log as JSON
		/// ExportEventsJSON account/events.json
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <param name="fields">an optional list of fields to export, comma-separated</param>
		/// <returns>filtered event results</returns>
		public async Task<Event[]> ExportEventsJSONAsync(string search, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/events.json?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// System event log as JSON line-delimited
		/// ExportEventsJSONL account/events.jsonl
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <param name="fields">an optional list of fields to export, comma-separated</param>
		/// <returns>filtered event results</returns>
		public async Task<Event[]> ExportEventsJSONLAsync(string search, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/events.jsonl?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all groups
		/// GetAccountGroups account/groups
		/// </summary>
		/// <returns>Automatically created</returns>
		public async Task GetAccountGroupsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new group
		/// CreateAccountGroup account/groups
		/// </summary>
		/// <returns>Automatically created</returns>
		public async Task CreateAccountGroupAsync(GroupPost requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update an existing group
		/// UpdateAccountGroup account/groups
		/// </summary>
		/// <returns>Automatically created</returns>
		public async Task UpdateAccountGroupAsync(GroupPut requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove this group
		/// RemoveAccountGroup account/groups/{group_id}
		/// </summary>
		public async Task RemoveAccountGroupAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/groups/{group_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get group details
		/// GetAccountGroup account/groups/{group_id}
		/// </summary>
		/// <returns>Automatically created</returns>
		public async Task GetAccountGroupAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/groups/{group_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all active API keys
		/// GetAccountKeys account/keys
		/// </summary>
		/// <returns>array of keys</returns>
		public async Task<APIKey[]> GetAccountKeysAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIKey[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new key
		/// CreateAccountKey account/keys
		/// </summary>
		/// <param name="requestBody">key parameters</param>
		/// <returns>key details</returns>
		public async Task<APIKey> CreateAccountKeyAsync(APIKeyOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove this key
		/// RemoveAccountKey account/keys/{key_id}
		/// </summary>
		/// <param name="key_id">UUID of the key to retrieve</param>
		public async Task RemoveAccountKeyAsync(string key_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/keys/"+ (key_id==null? "" : System.Uri.EscapeDataString(key_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get key details
		/// GetAccountKey account/keys/{key_id}
		/// </summary>
		/// <param name="key_id">UUID of the key to retrieve</param>
		/// <returns>Automatically created</returns>
		public async Task GetAccountKeyAsync(string key_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/keys/"+ (key_id==null? "" : System.Uri.EscapeDataString(key_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rotates the key secret
		/// RotateAccountKey account/keys/{key_id}/rotate
		/// </summary>
		/// <param name="key_id">UUID of the key to retrieve</param>
		/// <returns>key details</returns>
		public async Task<APIKey> RotateAccountKeyAsync(string key_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/keys/"+ (key_id==null? "" : System.Uri.EscapeDataString(key_id))+"/rotate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get license details
		/// GetAccountLicense account/license
		/// </summary>
		/// <returns>Automatically created</returns>
		public async Task GetAccountLicenseAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/license";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all organization details
		/// GetAccountOrganizations account/orgs
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>array of organizations</returns>
		public async Task<Organization[]> GetAccountOrganizationsAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/orgs?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organization[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new organization
		/// CreateAccountOrganization account/orgs
		/// </summary>
		/// <param name="requestBody">organization definition</param>
		/// <returns>organization details</returns>
		public async Task<Organization> CreateAccountOrganizationAsync(OrgOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/orgs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove this organization
		/// RemoveAccountOrganization account/orgs/{org_id}
		/// </summary>
		/// <param name="org_id">UUID of the organization to retrieve</param>
		public async Task RemoveAccountOrganizationAsync(string org_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/orgs/"+ (org_id==null? "" : System.Uri.EscapeDataString(org_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get organization details
		/// GetAccountOrganization account/orgs/{org_id}
		/// </summary>
		/// <param name="org_id">UUID of the organization to retrieve</param>
		/// <returns>Automatically created</returns>
		public async Task GetAccountOrganizationAsync(string org_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/orgs/"+ (org_id==null? "" : System.Uri.EscapeDataString(org_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update organization details
		/// UpdateAccountOrganization account/orgs/{org_id}
		/// </summary>
		/// <param name="org_id">UUID of the organization to retrieve</param>
		/// <param name="requestBody">organization options</param>
		/// <returns>organization details</returns>
		public async Task<Organization> UpdateAccountOrganizationAsync(string org_id, OrgOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/orgs/"+ (org_id==null? "" : System.Uri.EscapeDataString(org_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the export token from the specified organization
		/// DeleteAccountOrganizationExportToken account/orgs/{org_id}/exportToken
		/// </summary>
		/// <param name="org_id">UUID of the organization to retrieve</param>
		public async Task DeleteAccountOrganizationExportTokenAsync(string org_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/orgs/"+ (org_id==null? "" : System.Uri.EscapeDataString(org_id))+"/exportToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rotates the organization export token and returns the updated organization
		/// RotateAccountOrganizationExportToken account/orgs/{org_id}/exportToken/rotate
		/// </summary>
		/// <param name="org_id">UUID of the organization to retrieve</param>
		/// <returns>organization details</returns>
		public async Task<Organization> RotateAccountOrganizationExportTokenAsync(string org_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/orgs/"+ (org_id==null? "" : System.Uri.EscapeDataString(org_id))+"/exportToken/rotate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all sites details across all organizations
		/// GetAccountSites account/sites
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>array of sites</returns>
		public async Task<Site[]> GetAccountSitesAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/sites?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Site[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all SSO group mappings
		/// GetAccountGroupMappings account/sso/groups
		/// </summary>
		/// <returns>Automatically created</returns>
		public async Task GetAccountGroupMappingsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/sso/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new SSO group mapping
		/// CreateAccountGroupMapping account/sso/groups
		/// </summary>
		/// <returns>Automatically created</returns>
		public async Task CreateAccountGroupMappingAsync(GroupMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/sso/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update an existing SSO group mapping
		/// UpdateAccountGroupMapping account/sso/groups
		/// </summary>
		/// <returns>Automatically created</returns>
		public async Task UpdateAccountGroupMappingAsync(GroupMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/sso/groups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove this SSO group mapping
		/// RemoveAccountGroupMapping account/sso/groups/{group_mapping_id}
		/// </summary>
		public async Task RemoveAccountGroupMappingAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/sso/groups/{group_mapping_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get SSO group mapping details
		/// GetAccountGroupMapping account/sso/groups/{group_mapping_id}
		/// </summary>
		/// <returns>Automatically created</returns>
		public async Task GetAccountGroupMappingAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/sso/groups/{group_mapping_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all task details across all organizations (up to 1000)
		/// GetAccountTasks account/tasks
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>array of tasks</returns>
		public async Task<Task_[]> GetAccountTasksAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/tasks?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Task_[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all scan templates across all organizations (up to 1000)
		/// GetAccountScanTemplates account/tasks/templates
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>array of scan templates</returns>
		public async Task<ScanTemplate[]> GetAccountScanTemplatesAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/tasks/templates?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScanTemplate[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new scan template
		/// CreateAccountScanTemplate account/tasks/templates
		/// </summary>
		/// <returns>scan template</returns>
		public async Task<ScanTemplate> CreateAccountScanTemplateAsync(ScanTemplateOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/tasks/templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScanTemplate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update scan template
		/// UpdateAccountScanTemplate account/tasks/templates
		/// </summary>
		/// <returns>scan template</returns>
		public async Task<ScanTemplate> UpdateAccountScanTemplateAsync(ScanTemplate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/tasks/templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScanTemplate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove scan template
		/// RemoveAccountScanTemplate account/tasks/templates/{scan_template_id}
		/// </summary>
		/// <param name="scan_template_id">UUID of the scan template to remove</param>
		/// <returns>scan template</returns>
		public async Task<ScanTemplate> RemoveAccountScanTemplateAsync(string scan_template_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/tasks/templates/"+ (scan_template_id==null? "" : System.Uri.EscapeDataString(scan_template_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScanTemplate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get scan template details
		/// GetAccountScanTemplate account/tasks/templates/{scan_template_id}
		/// </summary>
		/// <param name="scan_template_id">UUID of the scan template to retrieve</param>
		/// <returns>scan template</returns>
		public async Task<ScanTemplate> GetAccountScanTemplateAsync(string scan_template_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/tasks/templates/"+ (scan_template_id==null? "" : System.Uri.EscapeDataString(scan_template_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScanTemplate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all users
		/// GetAccountUsers account/users
		/// </summary>
		/// <returns>array of users</returns>
		public async Task<User[]> GetAccountUsersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new user account
		/// CreateAccountUser account/users
		/// </summary>
		/// <param name="requestBody">user parameters</param>
		/// <returns>key details</returns>
		public async Task<User> CreateAccountUserAsync(UserOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a new user account and send an email invite
		/// CreateAccountUserInvite account/users/invite
		/// </summary>
		/// <param name="requestBody">user invite parameters</param>
		/// <returns>key details</returns>
		public async Task<User> CreateAccountUserInviteAsync(UserInviteOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/users/invite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove this user
		/// RemoveAccountUser account/users/{user_id}
		/// </summary>
		/// <param name="user_id">UUID of the user to delete</param>
		public async Task RemoveAccountUserAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user details
		/// GetAccountUser account/users/{user_id}
		/// </summary>
		/// <param name="user_id">UUID of the user to retrieve</param>
		/// <returns>Automatically created</returns>
		public async Task GetAccountUserAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a user's details
		/// UpdateAccountUser account/users/{user_id}
		/// </summary>
		/// <param name="user_id">UUID of the user to retrieve</param>
		/// <param name="requestBody">user parameters</param>
		/// <returns>Automatically created</returns>
		public async Task UpdateAccountUserAsync(string user_id, UserOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resets the user's lockout status
		/// ResetAccountUserLockout account/users/{user_id}/resetLockout
		/// </summary>
		/// <param name="user_id">UUID of the user to retrieve</param>
		/// <returns>Automatically created</returns>
		public async Task ResetAccountUserLockoutAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/resetLockout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets the user's MFA tokens
		/// ResetAccountUserMFA account/users/{user_id}/resetMFA
		/// </summary>
		/// <param name="user_id">UUID of the user to retrieve</param>
		/// <returns>Automatically created</returns>
		public async Task ResetAccountUserMFAAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/resetMFA";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sends the user a password reset email
		/// ResetAccountUserPassword account/users/{user_id}/resetPassword
		/// </summary>
		/// <param name="user_id">UUID of the user to retrieve</param>
		/// <returns>Automatically created</returns>
		public async Task ResetAccountUserPasswordAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "account/users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/resetPassword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cisco serial number and model name export for Cisco Smart Net Total Care Service.
		/// ExportAssetsCiscoCSV export/org/assets.cisco.csv
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>filtered asset results</returns>
		public async Task ExportAssetsCiscoCSVAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/assets.cisco.csv?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Asset inventory as CSV
		/// ExportAssetsCSV export/org/assets.csv
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>filtered asset results</returns>
		public async Task ExportAssetsCSVAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/assets.csv?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports the asset inventory
		/// ExportAssetsJSON export/org/assets.json
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <param name="fields">an optional list of fields to export, comma-separated</param>
		/// <returns>filtered asset results</returns>
		public async Task<Asset[]> ExportAssetsJSONAsync(string search, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/assets.json?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asset[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Asset inventory as JSON line-delimited
		/// ExportAssetsJSONL export/org/assets.jsonl
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <param name="fields">an optional list of fields to export, comma-separated</param>
		/// <returns>filtered asset results</returns>
		public async Task<string> ExportAssetsJSONLAsync(string search, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/assets.jsonl?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Asset inventory as Nmap-style XML
		/// ExportAssetsNmapXML export/org/assets.nmap.xml
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>filtered asset results</returns>
		public async Task ExportAssetsNmapXMLAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/assets.nmap.xml?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Export an asset inventory as CSV for ServiceNow integration
		/// SnowExportAssetsCSV export/org/assets.servicenow.csv
		/// </summary>
		/// <returns>asset export</returns>
		public async Task SnowExportAssetsCSVAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/assets.servicenow.csv";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports the asset inventory as JSON
		/// SnowExportAssetsJSON export/org/assets.servicenow.json
		/// </summary>
		/// <returns>filtered asset results</returns>
		public async Task<AssetServiceNow[]> SnowExportAssetsJSONAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/assets.servicenow.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssetServiceNow[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports the asset inventory in a sync-friendly manner using created_at as a checkpoint. Requires the Splunk entitlement.
		/// SplunkAssetSyncCreatedJSON export/org/assets/sync/created/assets.json
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <param name="fields">an optional list of fields to export, comma-separated</param>
		/// <param name="since">an optional unix timestamp to use as a checkpoint</param>
		/// <returns>filtered asset results with a checkpoint wrapper</returns>
		public async Task<AssetsWithCheckpoint> SplunkAssetSyncCreatedJSONAsync(string search, string fields, long since, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/assets/sync/created/assets.json?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&since="+since;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssetsWithCheckpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exports the asset inventory in a sync-friendly manner using updated_at as a checkpoint. Requires the Splunk entitlement.
		/// SplunkAssetSyncUpdatedJSON export/org/assets/sync/updated/assets.json
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <param name="fields">an optional list of fields to export, comma-separated</param>
		/// <param name="since">an optional unix timestamp to use as a checkpoint</param>
		/// <returns>filtered asset results with a checkpoint wrapper</returns>
		public async Task<AssetsWithCheckpoint> SplunkAssetSyncUpdatedJSONAsync(string search, string fields, long since, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/assets/sync/updated/assets.json?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&since="+since;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssetsWithCheckpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Service inventory as CSV
		/// ExportServicesCSV export/org/services.csv
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>filtered service results</returns>
		public async Task ExportServicesCSVAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/services.csv?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Service inventory as JSON
		/// ExportServicesJSON export/org/services.json
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <param name="fields">an optional list of fields to export, comma-separated</param>
		/// <returns>filtered service results</returns>
		public async Task<Service[]> ExportServicesJSONAsync(string search, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/services.json?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Service[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Service inventory as JSON line-delimited
		/// ExportServicesJSONL export/org/services.jsonl
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <param name="fields">an optional list of fields to export, comma-separated</param>
		/// <returns>filtered service results</returns>
		public async Task<string> ExportServicesJSONLAsync(string search, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/services.jsonl?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Export a service inventory as CSV for ServiceNow integration
		/// SnowExportServicesCSV export/org/services.servicenow.csv
		/// </summary>
		/// <returns>services export</returns>
		public async Task SnowExportServicesCSVAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/services.servicenow.csv";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Site list as CSV
		/// ExportSitesCSV export/org/sites.csv
		/// </summary>
		/// <returns>all sites</returns>
		public async Task ExportSitesCSVAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/sites.csv";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Export all sites
		/// ExportSitesJSON export/org/sites.json
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <param name="fields">an optional list of fields to export, comma-separated</param>
		/// <returns>all sites</returns>
		public async Task<Site[]> ExportSitesJSONAsync(string search, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/sites.json?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Site[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Site list as JSON line-delimited
		/// ExportSitesJSONL export/org/sites.jsonl
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <param name="fields">an optional list of fields to export, comma-separated</param>
		/// <returns>all sites</returns>
		public async Task<string> ExportSitesJSONLAsync(string search, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/sites.jsonl?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Wireless inventory as CSV
		/// ExportWirelessCSV export/org/wireless.csv
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>filtered wireless results</returns>
		public async Task ExportWirelessCSVAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/wireless.csv?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Wireless inventory as JSON
		/// ExportWirelessJSON export/org/wireless.json
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <param name="fields">an optional list of fields to export, comma-separated</param>
		/// <returns>filtered wireless results</returns>
		public async Task<Wireless[]> ExportWirelessJSONAsync(string search, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/wireless.json?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wireless[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Wireless inventory as JSON line-delimited
		/// ExportWirelessJSONL export/org/wireless.jsonl
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <param name="fields">an optional list of fields to export, comma-separated</param>
		/// <returns>filtered wireless results</returns>
		public async Task<string> ExportWirelessJSONLAsync(string search, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "export/org/wireless.jsonl?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get organization details
		/// GetOrganization org
		/// </summary>
		/// <returns>organization details</returns>
		public async Task<Organization> GetOrganizationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update organization details
		/// UpdateOrganization org
		/// </summary>
		/// <param name="requestBody">organization options</param>
		/// <returns>organization details</returns>
		public async Task<Organization> UpdateOrganizationAsync(OrgOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all agents
		/// GetAgents org/agents
		/// </summary>
		/// <returns>array of agents</returns>
		public async Task<Agent[]> GetAgentsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/agents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Agent[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove and uninstall an agent
		/// RemoveAgent org/agents/{agent_id}
		/// </summary>
		/// <param name="agent_id">UUID of the agent to remove</param>
		public async Task RemoveAgentAsync(string agent_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/agents/"+ (agent_id==null? "" : System.Uri.EscapeDataString(agent_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details for a single agent
		/// GetAgent org/agents/{agent_id}
		/// </summary>
		/// <param name="agent_id">UUID of the agent</param>
		/// <returns>agent details</returns>
		public async Task<Agent> GetAgentAsync(string agent_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/agents/"+ (agent_id==null? "" : System.Uri.EscapeDataString(agent_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Agent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the site associated with agent
		/// UpdateAgentSite org/agents/{agent_id}
		/// </summary>
		/// <param name="agent_id">UUID of the agent to update</param>
		/// <param name="requestBody">site_id to associate with the agent</param>
		/// <returns>agent details</returns>
		public async Task<Agent> UpdateAgentSiteAsync(string agent_id, AgentSiteID requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/agents/"+ (agent_id==null? "" : System.Uri.EscapeDataString(agent_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Agent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Force an agent to update and restart
		/// UpgradeAgent org/agents/{agent_id}/update
		/// </summary>
		/// <param name="agent_id">UUID of the agent to update</param>
		public async Task UpgradeAgentAsync(string agent_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/agents/"+ (agent_id==null? "" : System.Uri.EscapeDataString(agent_id))+"/update";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all assets
		/// GetAssets org/assets
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>array of assets</returns>
		public async Task<Asset[]> GetAssetsAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/assets?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asset[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear all tags across multiple assets based on a search query
		/// ClearBulkAssetTags org/assets/bulk/clearTags
		/// </summary>
		/// <param name="requestBody">search query to filter</param>
		/// <returns>status message</returns>
		public async Task ClearBulkAssetTagsAsync(Search requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/assets/bulk/clearTags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update tags across multiple assets based on a search query
		/// UpdateBulkAssetTags org/assets/bulk/tags
		/// </summary>
		/// <param name="requestBody">search query to filter and tags to apply</param>
		/// <returns>status message</returns>
		public async Task UpdateBulkAssetTagsAsync(AssetTagsWithSearch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/assets/bulk/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Top asset hardware products as CSV
		/// ExportAssetTopHWCSV org/assets/top.hw.csv
		/// </summary>
		/// <returns>top asset hardware platforms and counts as csv</returns>
		public async Task ExportAssetTopHWCSVAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/assets/top.hw.csv";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Top asset operating systems as CSV
		/// ExportAssetTopOSCSV org/assets/top.os.csv
		/// </summary>
		/// <returns>top operating systems and counts as csv</returns>
		public async Task ExportAssetTopOSCSVAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/assets/top.os.csv";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Top asset tags as CSV
		/// ExportAssetTopTagsCSV org/assets/top.tags.csv
		/// </summary>
		/// <returns>top asset tags and counts as csv</returns>
		public async Task ExportAssetTopTagsCSVAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/assets/top.tags.csv";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Top asset types as CSV
		/// ExportAssetTopTypesCSV org/assets/top.types.csv
		/// </summary>
		/// <returns>top asset types and counts as csv</returns>
		public async Task ExportAssetTopTypesCSVAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/assets/top.types.csv";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove an asset
		/// RemoveAsset org/assets/{asset_id}
		/// </summary>
		/// <param name="asset_id">UUID of the asset to remove</param>
		public async Task RemoveAssetAsync(string asset_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/assets/"+ (asset_id==null? "" : System.Uri.EscapeDataString(asset_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get asset details
		/// GetAsset org/assets/{asset_id}
		/// </summary>
		/// <param name="asset_id">UUID of the asset to retrieve</param>
		/// <returns>asset details</returns>
		public async Task<Asset> GetAssetAsync(string asset_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/assets/"+ (asset_id==null? "" : System.Uri.EscapeDataString(asset_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update asset comments
		/// UpdateAssetComments org/assets/{asset_id}/comments
		/// </summary>
		/// <param name="asset_id">UUID of the asset to update</param>
		/// <param name="requestBody">comments to apply to the asset</param>
		/// <returns>asset details</returns>
		public async Task<Asset> UpdateAssetCommentsAsync(string asset_id, AssetComments requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/assets/"+ (asset_id==null? "" : System.Uri.EscapeDataString(asset_id))+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update asset tags
		/// UpdateAssetTags org/assets/{asset_id}/tags
		/// </summary>
		/// <param name="asset_id">UUID of the asset to update</param>
		/// <param name="requestBody">tags to apply to the asset</param>
		/// <returns>asset details</returns>
		public async Task<Asset> UpdateAssetTagsAsync(string asset_id, AssetTags requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/assets/"+ (asset_id==null? "" : System.Uri.EscapeDataString(asset_id))+"/tags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Asset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove the current API key
		/// RemoveKey org/key
		/// </summary>
		public async Task RemoveKeyAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/key";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get API key details
		/// GetKey org/key
		/// </summary>
		/// <returns>api key details</returns>
		public async Task<APIKey> GetKeyAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/key";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rotate the API key secret and return the updated key
		/// RotateKey org/key/rotate
		/// </summary>
		/// <returns>api key details</returns>
		public async Task<APIKey> RotateKeyAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/key/rotate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<APIKey>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all services
		/// GetServices org/services
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>array of services</returns>
		public async Task<Service[]> GetServicesAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/services?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Service[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subnet utilization statistics as as CSV
		/// ExportSubnetUtilizationStatsCSV org/services/subnet.stats.csv
		/// </summary>
		/// <param name="mask">an optional subnet mask size (ex:24)</param>
		/// <returns>subnet utilization stats as csv</returns>
		public async Task ExportSubnetUtilizationStatsCSVAsync(string mask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/services/subnet.stats.csv?mask=" + (mask==null? "" : System.Uri.EscapeDataString(mask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Top service products as CSV
		/// ExportServicesTopProductsCSV org/services/top.products.csv
		/// </summary>
		/// <returns>top service products and counts as csv</returns>
		public async Task ExportServicesTopProductsCSVAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/services/top.products.csv";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Top service protocols as CSV
		/// ExportServicesTopProtocolsCSV org/services/top.protocols.csv
		/// </summary>
		/// <returns>top service protocols and counts as csv</returns>
		public async Task ExportServicesTopProtocolsCSVAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/services/top.protocols.csv";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Top TCP services as CSV
		/// ExportServicesTopTCPCSV org/services/top.tcp.csv
		/// </summary>
		/// <returns>top TCP services and counts as csv</returns>
		public async Task ExportServicesTopTCPCSVAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/services/top.tcp.csv";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Top UDP services as CSV
		/// ExportServicesTopUDPCSV org/services/top.udp.csv
		/// </summary>
		/// <returns>top UDP services and counts as csv</returns>
		public async Task ExportServicesTopUDPCSVAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/services/top.udp.csv";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a service
		/// RemoveService org/services/{service_id}
		/// </summary>
		/// <param name="service_id">UUID of the service to remove</param>
		public async Task RemoveServiceAsync(string service_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/services/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get service details
		/// GetService org/services/{service_id}
		/// </summary>
		/// <param name="service_id">UUID of the service to retrieve</param>
		/// <returns>service details</returns>
		public async Task<Service> GetServiceAsync(string service_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/services/"+ (service_id==null? "" : System.Uri.EscapeDataString(service_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Service>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all sites
		/// GetSites org/sites
		/// </summary>
		/// <returns>array of sites</returns>
		public async Task<Site[]> GetSitesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/sites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Site[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new site
		/// CreateSite org/sites
		/// </summary>
		/// <param name="requestBody">site definition</param>
		/// <returns>site details</returns>
		public async Task<Site> CreateSiteAsync(SiteOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/sites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Site>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a site and associated assets
		/// RemoveSite org/sites/{site_id}
		/// </summary>
		/// <param name="site_id">UUID or name of the site to remove</param>
		public async Task RemoveSiteAsync(string site_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/sites/"+ (site_id==null? "" : System.Uri.EscapeDataString(site_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get site details
		/// GetSite org/sites/{site_id}
		/// </summary>
		/// <param name="site_id">UUID or name of the site</param>
		/// <returns>site details</returns>
		public async Task<Site> GetSiteAsync(string site_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/sites/"+ (site_id==null? "" : System.Uri.EscapeDataString(site_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Site>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a site definition
		/// UpdateSite org/sites/{site_id}
		/// </summary>
		/// <param name="site_id">UUID or name of the site to update</param>
		/// <param name="requestBody">site object</param>
		/// <returns>site details</returns>
		public async Task<Site> UpdateSiteAsync(string site_id, SiteOptions requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/sites/"+ (site_id==null? "" : System.Uri.EscapeDataString(site_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Site>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get all tasks (last 1000)
		/// GetTasks org/tasks
		/// </summary>
		/// <param name="status">an optional status string for filtering results</param>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>array of tasks</returns>
		public async Task<Task_[]> GetTasksAsync(string status, string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/tasks?status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Task_[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get task details
		/// GetTask org/tasks/{task_id}
		/// </summary>
		/// <param name="task_id">UUID of the task to retrieve</param>
		/// <returns>task details</returns>
		public async Task<Task_> GetTaskAsync(string task_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/tasks/"+ (task_id==null? "" : System.Uri.EscapeDataString(task_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Task_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update task parameters
		/// UpdateTask org/tasks/{task_id}
		/// </summary>
		/// <param name="task_id">UUID of the task to update</param>
		/// <param name="requestBody">task object</param>
		/// <returns>task details</returns>
		public async Task<Task_> UpdateTaskAsync(string task_id, Task_ requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/tasks/"+ (task_id==null? "" : System.Uri.EscapeDataString(task_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Task_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a temporary task change report data url
		/// GetTaskChangeReport org/tasks/{task_id}/changes
		/// </summary>
		/// <param name="task_id">UUID of the task</param>
		/// <returns>Automatically created</returns>
		public async Task GetTaskChangeReportAsync(string task_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/tasks/"+ (task_id==null? "" : System.Uri.EscapeDataString(task_id))+"/changes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a temporary task scan data url
		/// GetTaskScanData org/tasks/{task_id}/data
		/// </summary>
		/// <param name="task_id">UUID of the task</param>
		/// <returns>Automatically created</returns>
		public async Task GetTaskScanDataAsync(string task_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/tasks/"+ (task_id==null? "" : System.Uri.EscapeDataString(task_id))+"/data";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Signal that a completed task should be hidden
		/// HideTask org/tasks/{task_id}/hide
		/// </summary>
		/// <param name="task_id">UUID of the task to hide</param>
		/// <returns>Automatically created</returns>
		public async Task HideTaskAsync(string task_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/tasks/"+ (task_id==null? "" : System.Uri.EscapeDataString(task_id))+"/hide";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a temporary task log data url
		/// GetTaskLog org/tasks/{task_id}/log
		/// </summary>
		/// <param name="task_id">UUID of the task</param>
		/// <returns>Automatically created</returns>
		public async Task GetTaskLogAsync(string task_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/tasks/"+ (task_id==null? "" : System.Uri.EscapeDataString(task_id))+"/log";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Signal that a task should be stopped or canceledThis will also remove recurring and scheduled tasks
		/// StopTask org/tasks/{task_id}/stop
		/// </summary>
		/// <param name="task_id">UUID of the task to stop</param>
		/// <returns>Automatically created</returns>
		public async Task StopTaskAsync(string task_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/tasks/"+ (task_id==null? "" : System.Uri.EscapeDataString(task_id))+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all wireless LANs
		/// GetWirelessLANs org/wireless
		/// </summary>
		/// <param name="search">an optional search string for filtering results</param>
		/// <returns>array of wireless LANs</returns>
		public async Task<Wireless[]> GetWirelessLANsAsync(string search, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/wireless?search=" + (search==null? "" : System.Uri.EscapeDataString(search));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wireless[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a wireless LAN
		/// RemoveWirelessLAN org/wireless/{wireless_id}
		/// </summary>
		/// <param name="wireless_id">UUID of the wireless LAN to remove</param>
		public async Task RemoveWirelessLANAsync(string wireless_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/wireless/"+ (wireless_id==null? "" : System.Uri.EscapeDataString(wireless_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get wireless LAN details
		/// GetWirelessLAN org/wireless/{wireless_id}
		/// </summary>
		/// <param name="wireless_id">UUID of the wireless LAN to retrieve</param>
		/// <returns>wireless details</returns>
		public async Task<Wireless> GetWirelessLANAsync(string wireless_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "org/wireless/"+ (wireless_id==null? "" : System.Uri.EscapeDataString(wireless_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Wireless>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns latest agent version
		/// GetLatestAgentVersion releases/agent/version
		/// </summary>
		/// <returns>component version</returns>
		public async Task<ComponentVersion> GetLatestAgentVersionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "releases/agent/version";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ComponentVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns latest platform version
		/// GetLatestPlatformVersion releases/platform/version
		/// </summary>
		/// <returns>component version</returns>
		public async Task<ComponentVersion> GetLatestPlatformVersionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "releases/platform/version";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ComponentVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns latest scanner version
		/// GetLatestScannerVersion releases/scanner/version
		/// </summary>
		/// <returns>component version</returns>
		public async Task<ComponentVersion> GetLatestScannerVersionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "releases/scanner/version";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ComponentVersion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
