//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLensShareOutput
	{
		
		/// <summary>
		/// The ID associated with the share.
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string ShareId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLensVersionOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensVersion { get; set; }
	}
	
	/// <summary>
	/// Output of a create milestone call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMilestoneOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MilestoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProfileOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileVersion { get; set; }
	}
	
	/// <summary>
	/// An update to a profile question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileQuestionUpdate
	{
		
		/// <summary>
		/// The ID of the question.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SelectedChoiceIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProfileShareOutput
	{
		
		/// <summary>
		/// The ID associated with the share.
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string ShareId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
	}
	
	/// <summary>
	/// Output of a create workload call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkloadOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// The ARN for the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WorkloadArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TrustedAdvisorIntegrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DefinitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WORKLOAD_METADATA")]
		WORKLOAD_METADATA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_REGISTRY")]
		APP_REGISTRY = 1,
	}
	
	/// <summary>
	/// Input for Create Workload Share
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkloadShareOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// The ID associated with the share.
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string ShareId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportLensOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LensJSON { get; set; }
	}
	
	/// <summary>
	/// Output of a get answer call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAnswerOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MilestoneNumber { get; set; }
		
		/// <summary>
		/// <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		/// <summary>
		/// An answer of the question.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Answer Answer { get; set; }
	}
	
	/// <summary>
	/// An answer of the question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Answer
	{
		
		/// <summary>
		/// The ID of the question.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PillarId { get; set; }
		
		/// <summary>
		/// The title of the question.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string QuestionTitle { get; set; }
		
		/// <summary>
		/// The description of the question.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string QuestionDescription { get; set; }
		
		/// <summary>
		/// <p>The improvement plan URL for a question in an Amazon Web Services official lenses.</p> <p>This value is only available if the question has been answered.</p> <p>This value does not apply to custom lenses.</p>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ImprovementPlanUrl { get; set; }
		
		/// <summary>
		/// <p>The helpful resource URL.</p> <p>For Amazon Web Services official lenses, this is the helpful resource URL for a question or choice.</p> <p>For custom lenses, this is the helpful resource URL for a question and is only provided if <code>HelpfulResourceDisplayText</code> was specified for the question.</p>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string HelpfulResourceUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HelpfulResourceDisplayText { get; set; }
		
		/// <summary>
		/// List of choices available for a question.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Choice[] Choices { get; set; }
		
		/// <summary>
		/// <p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] SelectedChoices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceAnswer[] ChoiceAnswers { get; set; }
		
		/// <summary>
		/// Defines whether this question is applicable to a lens review.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsApplicable { get; set; }
		
		/// <summary>
		/// The risk for a given workload, lens review, pillar, or question.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AnswerRisk> Risk { get; set; }
		
		/// <summary>
		/// The notes associated with the workload.
		/// Max length: 2084
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2084)]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceReason Reason { get; set; }
	}
	
	/// <summary>
	/// A choice available to answer question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Choice
	{
		
		/// <summary>
		/// The ID of a choice.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ChoiceId { get; set; }
		
		/// <summary>
		/// The title of a choice.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string Title { get; set; }
		
		/// <summary>
		/// The description of a choice.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceContent HelpfulResource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceContent ImprovementPlan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AdditionalResources[] AdditionalResources { get; set; }
	}
	
	/// <summary>
	/// The choice content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChoiceContent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// <p>The choice level additional resources for a custom lens.</p> <p>This field does not apply to Amazon Web Services official lenses.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AdditionalResources
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AdditionalResourceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceContent[] Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AdditionalResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HELPFUL_RESOURCE")]
		HELPFUL_RESOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPROVEMENT_PLAN")]
		IMPROVEMENT_PLAN = 1,
	}
	
	/// <summary>
	/// A choice that has been answered on a question in your workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChoiceAnswer
	{
		
		/// <summary>
		/// The ID of a choice.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ChoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceReason Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChoiceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SELECTED")]
		SELECTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_APPLICABLE")]
		NOT_APPLICABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSELECTED")]
		UNSELECTED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChoiceReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUT_OF_SCOPE")]
		OUT_OF_SCOPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUSINESS_PRIORITIES")]
		BUSINESS_PRIORITIES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARCHITECTURE_CONSTRAINTS")]
		ARCHITECTURE_CONSTRAINTS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AnswerRisk
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNANSWERED")]
		UNANSWERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM")]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_APPLICABLE")]
		NOT_APPLICABLE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConsolidatedReportOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConsolidatedReportMetric[] Metrics { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// <p>The Base64-encoded string representation of a lens review report.</p> <p>This data can be used to create a PDF file.</p> <p>Only returned by <a>GetConsolidatedReport</a> when <code>PDF</code> format is requested.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Base64String { get; set; }
	}
	
	/// <summary>
	/// A metric that contributes to the consolidated report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConsolidatedReportMetric
	{
		
		[System.Runtime.Serialization.DataMember()]
		public MetricType MetricType { get; set; }
		
		/// <summary>
		/// A map from risk names to the count of how many questions have that rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskCounts RiskCounts { get; set; }
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string WorkloadName { get; set; }
		
		/// <summary>
		/// The ARN for the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WorkloadArn { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LensMetric[] Lenses { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LensesAppliedCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MetricType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WORKLOAD")]
		WORKLOAD = 0,
	}
	
	/// <summary>
	/// A map from risk names to the count of how many questions have that rating.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RiskCounts
	{
	}
	
	/// <summary>
	/// A metric for a particular lens in a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LensMetric
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PillarMetric[] Pillars { get; set; }
		
		/// <summary>
		/// A map from risk names to the count of how many questions have that rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskCounts RiskCounts { get; set; }
	}
	
	/// <summary>
	/// A metric for a particular pillar in a lens.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PillarMetric
	{
		
		/// <summary>
		/// <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PillarId { get; set; }
		
		/// <summary>
		/// A map from risk names to the count of how many questions have that rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskCounts RiskCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QuestionMetric[] Questions { get; set; }
	}
	
	/// <summary>
	/// A metric for a particular question in the pillar. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuestionMetric
	{
		
		/// <summary>
		/// The ID of the question.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// The risk for a given workload, lens review, pillar, or question.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnswerRisk Risk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BestPractice[] BestPractices { get; set; }
	}
	
	/// <summary>
	/// A best practice, or question choice, that has been identified as a risk in this question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BestPractice
	{
		
		/// <summary>
		/// The ID of a choice.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ChoiceId { get; set; }
		
		/// <summary>
		/// The title of a choice.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ChoiceTitle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLensOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Lens Lens { get; set; }
	}
	
	/// <summary>
	/// A lens return object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Lens
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensVersion { get; set; }
		
		/// <summary>
		/// The full name of the lens.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the lens.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShareInvitationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMap
	{
	}
	
	/// <summary>
	/// Output of a get lens review call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLensReviewOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MilestoneNumber { get; set; }
		
		/// <summary>
		/// A lens review of a question.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LensReview LensReview { get; set; }
	}
	
	/// <summary>
	/// A lens review of a question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LensReview
	{
		
		/// <summary>
		/// <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensVersion { get; set; }
		
		/// <summary>
		/// The full name of the lens.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LensStatus LensStatus { get; set; }
		
		/// <summary>
		/// List of pillar review summaries of lens review in a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PillarReviewSummary[] PillarReviewSummaries { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// The notes associated with the workload.
		/// Max length: 2084
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2084)]
		public string Notes { get; set; }
		
		/// <summary>
		/// A map from risk names to the count of how many questions have that rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskCounts RiskCounts { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkloadProfile[] Profiles { get; set; }
		
		/// <summary>
		/// A map from risk names to the count of how many questions have that rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskCounts PrioritizedRiskCounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LensStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CURRENT")]
		CURRENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_CURRENT")]
		NOT_CURRENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPRECATED")]
		DEPRECATED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSHARED")]
		UNSHARED = 4,
	}
	
	/// <summary>
	/// A pillar review summary of a lens review.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PillarReviewSummary
	{
		
		/// <summary>
		/// <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PillarId { get; set; }
		
		/// <summary>
		/// The name of the pillar.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string PillarName { get; set; }
		
		/// <summary>
		/// The notes associated with the workload.
		/// Max length: 2084
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2084)]
		public string Notes { get; set; }
		
		/// <summary>
		/// A map from risk names to the count of how many questions have that rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskCounts RiskCounts { get; set; }
		
		/// <summary>
		/// A map from risk names to the count of how many questions have that rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskCounts PrioritizedRiskCounts { get; set; }
	}
	
	/// <summary>
	/// The profile associated with a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkloadProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileVersion { get; set; }
	}
	
	/// <summary>
	/// Output of a get lens review report call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLensReviewReportOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MilestoneNumber { get; set; }
		
		/// <summary>
		/// A report of a lens review.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LensReviewReport LensReviewReport { get; set; }
	}
	
	/// <summary>
	/// A report of a lens review.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LensReviewReport
	{
		
		/// <summary>
		/// <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		/// <summary>
		/// <p>The Base64-encoded string representation of a lens review report.</p> <p>This data can be used to create a PDF file.</p> <p>Only returned by <a>GetConsolidatedReport</a> when <code>PDF</code> format is requested.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Base64String { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLensVersionDifferenceOutput
	{
		
		/// <summary>
		/// <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BaseLensVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetLensVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestLensVersion { get; set; }
		
		/// <summary>
		/// The differences between the base and latest versions of the lens.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VersionDifferences VersionDifferences { get; set; }
	}
	
	/// <summary>
	/// The differences between the base and latest versions of the lens.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VersionDifferences
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PillarDifference[] PillarDifferences { get; set; }
	}
	
	/// <summary>
	/// A pillar difference return object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PillarDifference
	{
		
		/// <summary>
		/// <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PillarId { get; set; }
		
		/// <summary>
		/// The name of the pillar.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string PillarName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DifferenceStatus DifferenceStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QuestionDifference[] QuestionDifferences { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DifferenceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATED")]
		UPDATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEW")]
		NEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 2,
	}
	
	/// <summary>
	/// A question difference return object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuestionDifference
	{
		
		/// <summary>
		/// The ID of the question.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// The title of the question.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string QuestionTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DifferenceStatus DifferenceStatus { get; set; }
	}
	
	/// <summary>
	/// Output of a get milestone call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMilestoneOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// A milestone return object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Milestone Milestone { get; set; }
	}
	
	/// <summary>
	/// A milestone return object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Milestone
	{
		
		/// <summary>
		/// <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MilestoneNumber { get; set; }
		
		/// <summary>
		/// <p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string MilestoneName { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RecordedAt { get; set; }
		
		/// <summary>
		/// A workload return object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Workload Workload { get; set; }
	}
	
	/// <summary>
	/// A workload return object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Workload
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// The ARN for the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WorkloadArn { get; set; }
		
		/// <summary>
		/// <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string WorkloadName { get; set; }
		
		/// <summary>
		/// The description for the workload.
		/// Max length: 250
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Description { get; set; }
		
		/// <summary>
		/// The environment for the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<WorkloadEnvironment> Environment { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// The list of Amazon Web Services account IDs associated with the workload.
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] AccountIds { get; set; }
		
		/// <summary>
		/// The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] AwsRegions { get; set; }
		
		/// <summary>
		///  The list of non-Amazon Web Services Regions associated with the workload.
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] NonAwsRegions { get; set; }
		
		/// <summary>
		/// The URL of the architectural design for the workload.
		/// Max length: 2048
		/// Pattern: ^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$")]
		public string ArchitecturalDesign { get; set; }
		
		/// <summary>
		/// The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.
		/// Max length: 255
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ReviewOwner { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ReviewRestrictionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsReviewOwnerUpdateAcknowledged { get; set; }
		
		/// <summary>
		/// <p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string IndustryType { get; set; }
		
		/// <summary>
		/// The industry for the workload.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Industry { get; set; }
		
		/// <summary>
		/// The notes associated with the workload.
		/// Max length: 2084
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2084)]
		public string Notes { get; set; }
		
		/// <summary>
		/// The improvement status for a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<WorkloadImprovementStatus> ImprovementStatus { get; set; }
		
		/// <summary>
		/// A map from risk names to the count of how many questions have that rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskCounts RiskCounts { get; set; }
		
		/// <summary>
		/// The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] PillarPriorities { get; set; }
		
		/// <summary>
		/// The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Lenses { get; set; }
		
		/// <summary>
		/// An Amazon Web Services account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12}")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShareInvitationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkloadDiscoveryConfig DiscoveryConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Applications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkloadProfile[] Profiles { get; set; }
		
		/// <summary>
		/// A map from risk names to the count of how many questions have that rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskCounts PrioritizedRiskCounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WorkloadEnvironment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRODUCTION")]
		PRODUCTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREPRODUCTION")]
		PREPRODUCTION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WorkloadImprovementStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_APPLICABLE")]
		NOT_APPLICABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_STARTED")]
		NOT_STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETE")]
		COMPLETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RISK_ACKNOWLEDGED")]
		RISK_ACKNOWLEDGED = 4,
	}
	
	/// <summary>
	/// Discovery configuration associated to the workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkloadDiscoveryConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrustedAdvisorIntegrationStatus TrustedAdvisorIntegrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DefinitionType[] WorkloadResourceDefinition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetProfileOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Profile Profile { get; set; }
	}
	
	/// <summary>
	/// A profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Profile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileQuestion[] ProfileQuestions { get; set; }
		
		/// <summary>
		/// An Amazon Web Services account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12}")]
		public string Owner { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShareInvitationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// A profile question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileQuestion
	{
		
		/// <summary>
		/// The ID of the question.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// The title of the question.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string QuestionTitle { get; set; }
		
		/// <summary>
		/// The description of the question.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string QuestionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileChoice[] QuestionChoices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SelectedChoiceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinSelectedChoices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSelectedChoices { get; set; }
	}
	
	/// <summary>
	/// The profile choice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileChoice
	{
		
		/// <summary>
		/// The ID of a choice.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ChoiceId { get; set; }
		
		/// <summary>
		/// The title of a choice.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ChoiceTitle { get; set; }
		
		/// <summary>
		/// The description of a choice.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string ChoiceDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetProfileTemplateOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileTemplate ProfileTemplate { get; set; }
	}
	
	/// <summary>
	/// The profile template.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileTemplate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TemplateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileTemplateQuestion[] TemplateQuestions { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// A profile template question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileTemplateQuestion
	{
		
		/// <summary>
		/// The ID of the question.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// The title of the question.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string QuestionTitle { get; set; }
		
		/// <summary>
		/// The description of the question.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string QuestionDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileTemplateChoice[] QuestionChoices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinSelectedChoices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSelectedChoices { get; set; }
	}
	
	/// <summary>
	/// A profile template choice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileTemplateChoice
	{
		
		/// <summary>
		/// The ID of a choice.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ChoiceId { get; set; }
		
		/// <summary>
		/// The title of a choice.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string ChoiceTitle { get; set; }
		
		/// <summary>
		/// The description of a choice.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string ChoiceDescription { get; set; }
	}
	
	/// <summary>
	/// Output of a get workload call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWorkloadOutput
	{
		
		/// <summary>
		/// A workload return object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Workload Workload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportLensOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ImportLensStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImportLensStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETE")]
		COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 2,
	}
	
	/// <summary>
	/// Output of a list answers call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAnswersOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MilestoneNumber { get; set; }
		
		/// <summary>
		/// <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		/// <summary>
		/// List of answer summaries of lens review in a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnswerSummary[] AnswerSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An answer summary of a lens review in a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnswerSummary
	{
		
		/// <summary>
		/// The ID of the question.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PillarId { get; set; }
		
		/// <summary>
		/// The title of the question.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string QuestionTitle { get; set; }
		
		/// <summary>
		/// List of choices available for a question.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Choice[] Choices { get; set; }
		
		/// <summary>
		/// <p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] SelectedChoices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceAnswerSummary[] ChoiceAnswerSummaries { get; set; }
		
		/// <summary>
		/// Defines whether this question is applicable to a lens review.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsApplicable { get; set; }
		
		/// <summary>
		/// The risk for a given workload, lens review, pillar, or question.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnswerRisk Risk { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceReason Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public QuestionType QuestionType { get; set; }
	}
	
	/// <summary>
	/// A choice summary that has been answered on a question in your workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChoiceAnswerSummary
	{
		
		/// <summary>
		/// The ID of a choice.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ChoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceReason Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum QuestionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIORITIZED")]
		PRIORITIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NON_PRIORITIZED")]
		NON_PRIORITIZED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCheckDetailsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CheckDetail[] CheckDetails { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Account details for a Well-Architected best practice in relation to Trusted Advisor checks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CheckProvider Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		/// <summary>
		/// <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PillarId { get; set; }
		
		/// <summary>
		/// The ID of the question.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// The ID of a choice.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ChoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CheckStatus Status { get; set; }
		
		/// <summary>
		/// An Amazon Web Services account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12}")]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FlaggedResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CheckFailureReason Reason { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckProvider
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRUSTED_ADVISOR")]
		TRUSTED_ADVISOR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OKAY")]
		OKAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WARNING")]
		WARNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_AVAILABLE")]
		NOT_AVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FETCH_FAILED")]
		FETCH_FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CheckFailureReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASSUME_ROLE_ERROR")]
		ASSUME_ROLE_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCESS_DENIED")]
		ACCESS_DENIED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_ERROR")]
		UNKNOWN_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREMIUM_SUPPORT_REQUIRED")]
		PREMIUM_SUPPORT_REQUIRED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCheckSummariesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CheckSummary[] CheckSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Trusted Advisor check summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CheckProvider Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		/// <summary>
		/// <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PillarId { get; set; }
		
		/// <summary>
		/// The ID of the question.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// The ID of a choice.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ChoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CheckStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountSummary AccountSummary { get; set; }
	}
	
	/// <summary>
	/// Account summary for a Well-Architected best practice in relation to Trusted Advisor checks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountSummary
	{
	}
	
	/// <summary>
	/// Output of a list lens review improvements call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLensReviewImprovementsOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MilestoneNumber { get; set; }
		
		/// <summary>
		/// <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		/// <summary>
		/// List of improvement summaries of lens review in a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ImprovementSummary[] ImprovementSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// An improvement summary of a lens review in a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImprovementSummary
	{
		
		/// <summary>
		/// The ID of the question.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PillarId { get; set; }
		
		/// <summary>
		/// The title of the question.
		/// Max length: 512
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string QuestionTitle { get; set; }
		
		/// <summary>
		/// The risk for a given workload, lens review, pillar, or question.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AnswerRisk Risk { get; set; }
		
		/// <summary>
		/// <p>The improvement plan URL for a question in an Amazon Web Services official lenses.</p> <p>This value is only available if the question has been answered.</p> <p>This value does not apply to custom lenses.</p>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ImprovementPlanUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceImprovementPlan[] ImprovementPlans { get; set; }
	}
	
	/// <summary>
	/// The choice level improvement plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChoiceImprovementPlan
	{
		
		/// <summary>
		/// The ID of a choice.
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ChoiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayText { get; set; }
		
		/// <summary>
		/// <p>The improvement plan URL for a question in an Amazon Web Services official lenses.</p> <p>This value is only available if the question has been answered.</p> <p>This value does not apply to custom lenses.</p>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ImprovementPlanUrl { get; set; }
	}
	
	/// <summary>
	/// Output of a list lens reviews call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLensReviewsOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MilestoneNumber { get; set; }
		
		/// <summary>
		/// List of lens summaries of lens reviews of a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LensReviewSummary[] LensReviewSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A lens review summary of a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LensReviewSummary
	{
		
		/// <summary>
		/// <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensVersion { get; set; }
		
		/// <summary>
		/// The full name of the lens.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LensStatus LensStatus { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// A map from risk names to the count of how many questions have that rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskCounts RiskCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkloadProfile[] Profiles { get; set; }
		
		/// <summary>
		/// A map from risk names to the count of how many questions have that rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskCounts PrioritizedRiskCounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLensSharesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LensShareSummary[] LensShareSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A lens share summary return object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LensShareSummary
	{
		
		/// <summary>
		/// The ID associated with the share.
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string ShareId { get; set; }
		
		/// <summary>
		/// The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.
		/// Max length: 2048
		/// Min length: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string SharedWith { get; set; }
		
		/// <summary>
		/// The status of the share request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<LensShareSummaryStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LensShareSummaryStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCEPTED")]
		ACCEPTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REJECTED")]
		REJECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVOKED")]
		REVOKED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASSOCIATING")]
		ASSOCIATING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASSOCIATED")]
		ASSOCIATED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 7,
	}
	
	/// <summary>
	/// Output of a list lenses call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLensesOutput
	{
		
		/// <summary>
		/// List of lens summaries of available lenses.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LensSummary[] LensSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A lens summary of a lens.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LensSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		/// <summary>
		/// <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensAlias { get; set; }
		
		/// <summary>
		/// The full name of the lens.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LensType LensType { get; set; }
		
		/// <summary>
		/// The description of the lens.
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensVersion { get; set; }
		
		/// <summary>
		/// An Amazon Web Services account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12}")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LensStatus LensStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LensType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_OFFICIAL")]
		AWS_OFFICIAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM_SHARED")]
		CUSTOM_SHARED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM_SELF")]
		CUSTOM_SELF = 2,
	}
	
	/// <summary>
	/// Output of a list milestones call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMilestonesOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// A list of milestone summaries.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MilestoneSummary[] MilestoneSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A milestone summary return object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MilestoneSummary
	{
		
		/// <summary>
		/// <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>
		/// Minimum: 1
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 100)]
		public System.Nullable<System.Int32> MilestoneNumber { get; set; }
		
		/// <summary>
		/// <p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string MilestoneName { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RecordedAt { get; set; }
		
		/// <summary>
		/// A workload summary return object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkloadSummary WorkloadSummary { get; set; }
	}
	
	/// <summary>
	/// A workload summary return object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkloadSummary
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// The ARN for the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string WorkloadArn { get; set; }
		
		/// <summary>
		/// <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string WorkloadName { get; set; }
		
		/// <summary>
		/// An Amazon Web Services account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12}")]
		public string Owner { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Lenses { get; set; }
		
		/// <summary>
		/// A map from risk names to the count of how many questions have that rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskCounts RiskCounts { get; set; }
		
		/// <summary>
		/// The improvement status for a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkloadImprovementStatus ImprovementStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkloadProfile[] Profiles { get; set; }
		
		/// <summary>
		/// A map from risk names to the count of how many questions have that rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RiskCounts PrioritizedRiskCounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListNotificationsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationSummary[] NotificationSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A notification summary return object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NotificationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LensUpgradeSummary LensUpgradeSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LENS_VERSION_UPGRADED")]
		LENS_VERSION_UPGRADED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LENS_VERSION_DEPRECATED")]
		LENS_VERSION_DEPRECATED = 1,
	}
	
	/// <summary>
	/// Lens upgrade summary return object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LensUpgradeSummary
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string WorkloadName { get; set; }
		
		/// <summary>
		/// <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentLensVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestLensVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProfileNotificationsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileNotificationSummary[] NotificationSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The profile notification summary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileNotificationSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CurrentProfileVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestProfileVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileNotificationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string WorkloadName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProfileNotificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROFILE_ANSWERS_UPDATED")]
		PROFILE_ANSWERS_UPDATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROFILE_DELETED")]
		PROFILE_DELETED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProfileSharesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileShareSummary[] ProfileShareSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary of a profile share.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileShareSummary
	{
		
		/// <summary>
		/// The ID associated with the share.
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string ShareId { get; set; }
		
		/// <summary>
		/// The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.
		/// Max length: 2048
		/// Min length: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string SharedWith { get; set; }
		
		/// <summary>
		/// The status of the share request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LensShareSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProfilesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileSummary[] ProfileSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary of a profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProfileSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileDescription { get; set; }
		
		/// <summary>
		/// An Amazon Web Services account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12}")]
		public string Owner { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// The date and time recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	/// <summary>
	/// Input for List Share Invitations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListShareInvitationsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ShareInvitationSummary[] ShareInvitationSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A share invitation summary return object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShareInvitationSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ShareInvitationId { get; set; }
		
		/// <summary>
		/// An Amazon Web Services account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12}")]
		public string SharedBy { get; set; }
		
		/// <summary>
		/// The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.
		/// Max length: 2048
		/// Min length: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string SharedWith { get; set; }
		
		/// <summary>
		/// Permission granted on a share request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ShareInvitationSummaryPermissionType> PermissionType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShareResourceType ShareResourceType { get; set; }
		
		/// <summary>
		/// <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string WorkloadName { get; set; }
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// The full name of the lens.
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShareInvitationSummaryPermissionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READONLY")]
		READONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTRIBUTOR")]
		CONTRIBUTOR = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShareResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WORKLOAD")]
		WORKLOAD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LENS")]
		LENS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROFILE")]
		PROFILE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Input for List Workload Share
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkloadSharesOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// A list of workload share summaries.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkloadShareSummary[] WorkloadShareSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A workload share summary return object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkloadShareSummary
	{
		
		/// <summary>
		/// The ID associated with the share.
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string ShareId { get; set; }
		
		/// <summary>
		/// The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.
		/// Max length: 2048
		/// Min length: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string SharedWith { get; set; }
		
		/// <summary>
		/// Permission granted on a share request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ShareInvitationSummaryPermissionType PermissionType { get; set; }
		
		/// <summary>
		/// The status of the share request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LensShareSummaryStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	/// <summary>
	/// Output of a list workloads call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkloadsOutput
	{
		
		/// <summary>
		/// A list of workload summaries.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkloadSummary[] WorkloadSummaries { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceOutput
	{
	}
	
	/// <summary>
	/// Output of a update answer call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAnswerOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		/// <summary>
		/// An answer of the question.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Answer Answer { get; set; }
	}
	
	/// <summary>
	/// A list of choices to be updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChoiceUpdate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ChoiceStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceReason Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
	}
	
	/// <summary>
	/// Output of a update lens review call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLensReviewOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// A lens review of a question.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LensReview LensReview { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProfileOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Profile Profile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateShareInvitationOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ShareInvitation ShareInvitation { get; set; }
	}
	
	/// <summary>
	/// The share invitation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShareInvitation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ShareInvitationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShareResourceType ShareResourceType { get; set; }
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensAlias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileArn { get; set; }
	}
	
	/// <summary>
	/// Output of an update workload call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkloadOutput
	{
		
		/// <summary>
		/// A workload return object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Workload Workload { get; set; }
	}
	
	/// <summary>
	/// Input for Update Workload Share
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkloadShareOutput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// A workload share return object.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkloadShare WorkloadShare { get; set; }
	}
	
	/// <summary>
	/// A workload share return object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WorkloadShare
	{
		
		/// <summary>
		/// The ID associated with the share.
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string ShareId { get; set; }
		
		/// <summary>
		/// An Amazon Web Services account ID.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: [0-9]{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{12}")]
		public string SharedBy { get; set; }
		
		/// <summary>
		/// The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.
		/// Max length: 2048
		/// Min length: 12
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string SharedWith { get; set; }
		
		/// <summary>
		/// Permission granted on a share request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ShareInvitationSummaryPermissionType PermissionType { get; set; }
		
		/// <summary>
		/// The status of the share request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public LensShareSummaryStatus Status { get; set; }
		
		/// <summary>
		/// <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string WorkloadName { get; set; }
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
	}
	
	/// <summary>
	/// The risk for a given workload, lens review, pillar, or question.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Risk
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNANSWERED")]
		UNANSWERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM")]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_APPLICABLE")]
		NOT_APPLICABLE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AnswerReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUT_OF_SCOPE")]
		OUT_OF_SCOPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUSINESS_PRIORITIES")]
		BUSINESS_PRIORITIES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARCHITECTURE_CONSTRAINTS")]
		ARCHITECTURE_CONSTRAINTS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 4,
	}
	
	/// <summary>
	/// Input to associate lens reviews.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateLensesInput
	{
		
		/// <summary>
		/// <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p> <p>Identify a lens using its <a>LensSummary$LensAlias</a>.</p>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] LensAliases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateProfilesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ProfileArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChoiceUpdates
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLensShareInput
	{
		
		/// <summary>
		/// The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.
		/// Required
		/// Max length: 2048
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string SharedWith { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLensVersionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LensVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsMajorVersion { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
	
	/// <summary>
	/// Input for milestone creation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMilestoneInput
	{
		
		/// <summary>
		/// <p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>
		/// Required
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string MilestoneName { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProfileInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProfileDescription { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProfileQuestionUpdate[] ProfileQuestions { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProfileShareInput
	{
		
		/// <summary>
		/// The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.
		/// Required
		/// Max length: 2048
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string SharedWith { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
	
	/// <summary>
	/// Input for workload creation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkloadInput
	{
		
		/// <summary>
		/// <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
		/// Required
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string WorkloadName { get; set; }
		
		/// <summary>
		/// The description for the workload.
		/// Required
		/// Max length: 250
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Description { get; set; }
		
		/// <summary>
		/// The environment for the workload.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkloadEnvironment Environment { get; set; }
		
		/// <summary>
		/// The list of Amazon Web Services account IDs associated with the workload.
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] AccountIds { get; set; }
		
		/// <summary>
		/// The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] AwsRegions { get; set; }
		
		/// <summary>
		///  The list of non-Amazon Web Services Regions associated with the workload.
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] NonAwsRegions { get; set; }
		
		/// <summary>
		/// The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] PillarPriorities { get; set; }
		
		/// <summary>
		/// The URL of the architectural design for the workload.
		/// Max length: 2048
		/// Pattern: ^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$")]
		public string ArchitecturalDesign { get; set; }
		
		/// <summary>
		/// The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.
		/// Max length: 255
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ReviewOwner { get; set; }
		
		/// <summary>
		/// <p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string IndustryType { get; set; }
		
		/// <summary>
		/// The industry for the workload.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Industry { get; set; }
		
		/// <summary>
		/// The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Lenses { get; set; }
		
		/// <summary>
		/// The notes associated with the workload.
		/// Max length: 2084
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2084)]
		public string Notes { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkloadDiscoveryConfig DiscoveryConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Applications { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ProfileArns { get; set; }
	}
	
	/// <summary>
	/// Permission granted on a share request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PermissionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READONLY")]
		READONLY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTRIBUTOR")]
		CONTRIBUTOR = 1,
	}
	
	/// <summary>
	/// Input for Create Workload Share
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWorkloadShareInput
	{
		
		/// <summary>
		/// The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.
		/// Required
		/// Max length: 2048
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string SharedWith { get; set; }
		
		/// <summary>
		/// Permission granted on a share request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ShareInvitationSummaryPermissionType PermissionType { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LensStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DRAFT")]
		DRAFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUBLISHED")]
		PUBLISHED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLensInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLensShareInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProfileInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProfileShareInput
	{
	}
	
	/// <summary>
	/// Input for workload deletion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkloadInput
	{
	}
	
	/// <summary>
	/// Input for Delete Workload Share
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWorkloadShareInput
	{
	}
	
	/// <summary>
	/// Input to disassociate lens reviews.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateLensesInput
	{
		
		/// <summary>
		/// <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p> <p>Identify a lens using its <a>LensSummary$LensAlias</a>.</p>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] LensAliases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateProfilesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ProfileArns { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DiscoveryIntegrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportLensInput
	{
	}
	
	/// <summary>
	/// Input to get answer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAnswerInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReportFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PDF")]
		PDF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JSON")]
		JSON = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConsolidatedReportInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLensInput
	{
	}
	
	/// <summary>
	/// Input to get lens review.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLensReviewInput
	{
	}
	
	/// <summary>
	/// Input to get lens review report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLensReviewReportInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLensVersionDifferenceInput
	{
	}
	
	/// <summary>
	/// Input to get a milestone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMilestoneInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetProfileInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetProfileTemplateInput
	{
	}
	
	/// <summary>
	/// Input to get a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWorkloadInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportLensInput
	{
		
		/// <summary>
		/// <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensAlias { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JSONString { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// The status of the share request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShareStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCEPTED")]
		ACCEPTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REJECTED")]
		REJECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVOKED")]
		REVOKED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASSOCIATING")]
		ASSOCIATING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASSOCIATED")]
		ASSOCIATED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum QuestionPriority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIORITIZED")]
		PRIORITIZED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NONE")]
		NONE = 1,
	}
	
	/// <summary>
	/// Input to list answers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAnswersInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCheckDetailsInput
	{
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		/// <summary>
		/// <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PillarId { get; set; }
		
		/// <summary>
		/// The ID of the question.
		/// Required
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// The ID of a choice.
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ChoiceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCheckSummariesInput
	{
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		/// <summary>
		/// <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PillarId { get; set; }
		
		/// <summary>
		/// The ID of the question.
		/// Required
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// The ID of a choice.
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ChoiceId { get; set; }
	}
	
	/// <summary>
	/// Input to list lens review improvements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLensReviewImprovementsInput
	{
	}
	
	/// <summary>
	/// Input to list lens reviews.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLensReviewsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLensSharesInput
	{
	}
	
	/// <summary>
	/// Input to list lenses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLensesInput
	{
	}
	
	/// <summary>
	/// Input to list all milestones for a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMilestonesInput
	{
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListNotificationsInput
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProfileNotificationsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProfileSharesInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProfileOwnerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SELF")]
		SELF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHARED")]
		SHARED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProfilesInput
	{
	}
	
	/// <summary>
	/// Input for List Share Invitations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListShareInvitationsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceInput
	{
	}
	
	/// <summary>
	/// Input for List Workload Share
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkloadSharesInput
	{
	}
	
	/// <summary>
	/// Input to list all workloads.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWorkloadsInput
	{
		
		/// <summary>
		/// An optional string added to the beginning of each workload name returned in the results.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string WorkloadNamePrefix { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrganizationSharingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 1,
	}
	
	/// <summary>
	/// List of pillar notes of a lens review in a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PillarNotes
	{
	}
	
	/// <summary>
	/// Share invitation action taken by contributor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShareInvitationAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCEPT")]
		ACCEPT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REJECT")]
		REJECT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceInput
	{
	}
	
	/// <summary>
	/// Input to update answer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAnswerInput
	{
		
		/// <summary>
		/// <p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] SelectedChoices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceUpdates ChoiceUpdates { get; set; }
		
		/// <summary>
		/// The notes associated with the workload.
		/// Max length: 2084
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2084)]
		public string Notes { get; set; }
		
		/// <summary>
		/// Defines whether this question is applicable to a lens review.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsApplicable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChoiceReason Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateGlobalSettingsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrustedAdvisorIntegrationStatus OrganizationSharingStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrustedAdvisorIntegrationStatus DiscoveryIntegrationStatus { get; set; }
	}
	
	/// <summary>
	/// Input for update lens review.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLensReviewInput
	{
		
		/// <summary>
		/// The notes associated with the workload.
		/// Max length: 2084
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2084)]
		public string LensNotes { get; set; }
		
		/// <summary>
		/// List of pillar notes of a lens review in a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PillarNotes PillarNotes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProfileInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProfileDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProfileQuestionUpdate[] ProfileQuestions { get; set; }
	}
	
	/// <summary>
	/// Input for Update Share Invitation
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateShareInvitationInput
	{
		
		/// <summary>
		/// Share invitation action taken by contributor.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ShareInvitationAction ShareInvitationAction { get; set; }
	}
	
	/// <summary>
	/// Input to update a workload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkloadInput
	{
		
		/// <summary>
		/// <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string WorkloadName { get; set; }
		
		/// <summary>
		/// The description for the workload.
		/// Max length: 250
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Description { get; set; }
		
		/// <summary>
		/// The environment for the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkloadEnvironment Environment { get; set; }
		
		/// <summary>
		/// The list of Amazon Web Services account IDs associated with the workload.
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] AccountIds { get; set; }
		
		/// <summary>
		/// The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] AwsRegions { get; set; }
		
		/// <summary>
		///  The list of non-Amazon Web Services Regions associated with the workload.
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] NonAwsRegions { get; set; }
		
		/// <summary>
		/// The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] PillarPriorities { get; set; }
		
		/// <summary>
		/// The URL of the architectural design for the workload.
		/// Max length: 2048
		/// Pattern: ^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$")]
		public string ArchitecturalDesign { get; set; }
		
		/// <summary>
		/// The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.
		/// Max length: 255
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ReviewOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsReviewOwnerUpdateAcknowledged { get; set; }
		
		/// <summary>
		/// <p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string IndustryType { get; set; }
		
		/// <summary>
		/// The industry for the workload.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Industry { get; set; }
		
		/// <summary>
		/// The notes associated with the workload.
		/// Max length: 2084
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2084)]
		public string Notes { get; set; }
		
		/// <summary>
		/// The improvement status for a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkloadImprovementStatus ImprovementStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WorkloadDiscoveryConfig DiscoveryConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Applications { get; set; }
	}
	
	/// <summary>
	/// Input for Update Workload Share
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWorkloadShareInput
	{
		
		/// <summary>
		/// Permission granted on a share request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ShareInvitationSummaryPermissionType PermissionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpgradeLensReviewInput
	{
		
		/// <summary>
		/// <p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>
		/// Required
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string MilestoneName { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpgradeProfileVersionInput
	{
		
		/// <summary>
		/// <p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string MilestoneName { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Associate a lens to a workload.</p> <p>Up to 10 lenses can be associated with a workload in a single API operation. A maximum of 20 lenses can be associated with a workload.</p> <note> <p> <b>Disclaimer</b> </p> <p>By accessing and/or applying custom lenses created by another Amazon Web Services user or account, you acknowledge that custom lenses created by other users and shared with you are Third Party Content as defined in the Amazon Web Services Customer Agreement. </p> </note>
		/// AssociateLenses workloads/{WorkloadId}/associateLenses
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <returns>Success</returns>
		public async Task AssociateLensesAsync(string WorkloadId, AssociateLensesPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/associateLenses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associate a profile with a workload.
		/// AssociateProfiles workloads/{WorkloadId}/associateProfiles
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <returns>Success</returns>
		public async Task AssociateProfilesAsync(string WorkloadId, AssociateProfilesPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/associateProfiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Create a lens share.</p> <p>The owner of a lens can share it with other Amazon Web Services accounts, users, an organization, and organizational units (OUs) in the same Amazon Web Services Region. Lenses provided by Amazon Web Services (Amazon Web Services Official Content) cannot be shared.</p> <p> Shared access to a lens is not removed until the lens invitation is deleted.</p> <p>If you share a lens with an organization or OU, all accounts in the organization or OU are granted access to the lens.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-sharing.html">Sharing a custom lens</a> in the <i>Well-Architected Tool User Guide</i>.</p> <note> <p> <b>Disclaimer</b> </p> <p>By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.</p> </note>
		/// CreateLensShare lenses/{LensAlias}/shares
		/// </summary>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateLensShareOutput> CreateLensShareAsync(string LensAlias, CreateLensSharePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lenses/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"/shares";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateLensShareOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the lens shares associated with the lens.
		/// ListLensShares lenses/{LensAlias}/shares
		/// </summary>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="SharedWithPrefix">The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the lens is shared.
		/// Max length: 100
		// </param>
		/// <param name="MaxResults">The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<ListLensSharesOutput> ListLensSharesAsync(string LensAlias, string SharedWithPrefix, string NextToken, int MaxResults, LensShareSummaryStatus Status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lenses/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"/shares&SharedWithPrefix=" + (SharedWithPrefix==null? "" : System.Uri.EscapeDataString(SharedWithPrefix))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Status=" + Status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLensSharesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Create a new lens version.</p> <p>A lens can have up to 100 versions.</p> <p>Use this operation to publish a new lens version after you have imported a lens. The <code>LensAlias</code> is used to identify the lens to be published. The owner of a lens can share the lens with other Amazon Web Services accounts and users in the same Amazon Web Services Region. Only the owner of a lens can delete it. </p>
		/// CreateLensVersion lenses/{LensAlias}/versions
		/// </summary>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateLensVersionOutput> CreateLensVersionAsync(string LensAlias, CreateLensVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lenses/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateLensVersionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a milestone for an existing workload.
		/// CreateMilestone workloads/{WorkloadId}/milestones
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateMilestoneOutput> CreateMilestoneAsync(string WorkloadId, CreateMilestonePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/milestones";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateMilestoneOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a profile.
		/// CreateProfile profiles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProfileOutput> CreateProfileAsync(CreateProfilePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateProfileOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a profile share.
		/// CreateProfileShare profiles/{ProfileArn}/shares
		/// </summary>
		/// <param name="ProfileArn">The profile ARN.
		/// Max length: 2084
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateProfileShareOutput> CreateProfileShareAsync(string ProfileArn, CreateProfileSharePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profiles/"+ (ProfileArn==null? "" : System.Uri.EscapeDataString(ProfileArn))+"/shares";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateProfileShareOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List profile shares.
		/// ListProfileShares profiles/{ProfileArn}/shares
		/// </summary>
		/// <param name="ProfileArn">The profile ARN.
		/// Max length: 2084
		// </param>
		/// <param name="SharedWithPrefix">The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the profile is shared.
		/// Max length: 100
		// </param>
		/// <param name="MaxResults">The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<ListProfileSharesOutput> ListProfileSharesAsync(string ProfileArn, string SharedWithPrefix, string NextToken, int MaxResults, LensShareSummaryStatus Status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profiles/"+ (ProfileArn==null? "" : System.Uri.EscapeDataString(ProfileArn))+"/shares&SharedWithPrefix=" + (SharedWithPrefix==null? "" : System.Uri.EscapeDataString(SharedWithPrefix))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Status=" + Status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProfileSharesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Create a new workload.</p> <p>The owner of a workload can share the workload with other Amazon Web Services accounts, users, an organization, and organizational units (OUs) in the same Amazon Web Services Region. Only the owner of a workload can delete it.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/define-workload.html">Defining a Workload</a> in the <i>Well-Architected Tool User Guide</i>.</p> <important> <p>Either <code>AwsRegions</code>, <code>NonAwsRegions</code>, or both must be specified when creating a workload.</p> <p>You also must specify <code>ReviewOwner</code>, even though the parameter is listed as not being required in the following section. </p> </important>
		/// CreateWorkload workloads
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateWorkloadOutput> CreateWorkloadAsync(CreateWorkloadPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateWorkloadOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Create a workload share.</p> <p>The owner of a workload can share it with other Amazon Web Services accounts and users in the same Amazon Web Services Region. Shared access to a workload is not removed until the workload invitation is deleted.</p> <p>If you share a workload with an organization or OU, all accounts in the organization or OU are granted access to the workload.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/workloads-sharing.html">Sharing a workload</a> in the <i>Well-Architected Tool User Guide</i>.</p>
		/// CreateWorkloadShare workloads/{WorkloadId}/shares
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateWorkloadShareOutput> CreateWorkloadShareAsync(string WorkloadId, CreateWorkloadSharePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/shares";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateWorkloadShareOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the workload shares associated with the workload.
		/// ListWorkloadShares workloads/{WorkloadId}/shares
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="SharedWithPrefix">The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.
		/// Max length: 100
		// </param>
		/// <param name="MaxResults">The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<ListWorkloadSharesOutput> ListWorkloadSharesAsync(string WorkloadId, string SharedWithPrefix, string NextToken, int MaxResults, LensShareSummaryStatus Status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/shares&SharedWithPrefix=" + (SharedWithPrefix==null? "" : System.Uri.EscapeDataString(SharedWithPrefix))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&Status=" + Status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWorkloadSharesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Delete an existing lens.</p> <p>Only the owner of a lens can delete it. After the lens is deleted, Amazon Web Services accounts and users that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads. </p> <note> <p> <b>Disclaimer</b> </p> <p>By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.</p> </note>
		/// DeleteLens lenses/{LensAlias}#ClientRequestToken&LensStatus
		/// </summary>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="ClientRequestToken">Max length: 2048
		/// Min length: 1
		// </param>
		/// <param name="LensStatus">The status of the lens to be deleted.</param>
		/// <returns>Success</returns>
		public async Task DeleteLensAsync(string LensAlias, string ClientRequestToken, LensStatusType LensStatus, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lenses/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"#ClientRequestToken&LensStatus&ClientRequestToken=" + (ClientRequestToken==null? "" : System.Uri.EscapeDataString(ClientRequestToken))+"&LensStatus=" + LensStatus;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Delete a lens share.</p> <p>After the lens share is deleted, Amazon Web Services accounts, users, organizations, and organizational units (OUs) that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads.</p> <note> <p> <b>Disclaimer</b> </p> <p>By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.</p> </note>
		/// DeleteLensShare lenses/{LensAlias}/shares/{ShareId}#ClientRequestToken
		/// </summary>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="ClientRequestToken">Max length: 2048
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task DeleteLensShareAsync(string ShareId, string LensAlias, string ClientRequestToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lenses/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"/shares/"+ (ShareId==null? "" : System.Uri.EscapeDataString(ShareId))+"#ClientRequestToken&ClientRequestToken=" + (ClientRequestToken==null? "" : System.Uri.EscapeDataString(ClientRequestToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Delete a profile.</p> <note> <p> <b>Disclaimer</b> </p> <p>By sharing your profile with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your profile available to those other accounts. Those other accounts may continue to access and use your shared profile even if you delete the profile from your own Amazon Web Services account or terminate your Amazon Web Services account.</p> </note>
		/// DeleteProfile profiles/{ProfileArn}#ClientRequestToken
		/// </summary>
		/// <param name="ProfileArn">The profile ARN.
		/// Max length: 2084
		// </param>
		/// <param name="ClientRequestToken">Max length: 2048
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task DeleteProfileAsync(string ProfileArn, string ClientRequestToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profiles/"+ (ProfileArn==null? "" : System.Uri.EscapeDataString(ProfileArn))+"#ClientRequestToken&ClientRequestToken=" + (ClientRequestToken==null? "" : System.Uri.EscapeDataString(ClientRequestToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a profile share.
		/// DeleteProfileShare profiles/{ProfileArn}/shares/{ShareId}#ClientRequestToken
		/// </summary>
		/// <param name="ProfileArn">The profile ARN.
		/// Max length: 2084
		// </param>
		/// <param name="ClientRequestToken">Max length: 2048
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task DeleteProfileShareAsync(string ShareId, string ProfileArn, string ClientRequestToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profiles/"+ (ProfileArn==null? "" : System.Uri.EscapeDataString(ProfileArn))+"/shares/"+ (ShareId==null? "" : System.Uri.EscapeDataString(ShareId))+"#ClientRequestToken&ClientRequestToken=" + (ClientRequestToken==null? "" : System.Uri.EscapeDataString(ClientRequestToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an existing workload.
		/// DeleteWorkload workloads/{WorkloadId}#ClientRequestToken
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="ClientRequestToken">Max length: 2048
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task DeleteWorkloadAsync(string WorkloadId, string ClientRequestToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"#ClientRequestToken&ClientRequestToken=" + (ClientRequestToken==null? "" : System.Uri.EscapeDataString(ClientRequestToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a workload share.
		/// DeleteWorkloadShare workloads/{WorkloadId}/shares/{ShareId}#ClientRequestToken
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="ClientRequestToken">Max length: 2048
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task DeleteWorkloadShareAsync(string ShareId, string WorkloadId, string ClientRequestToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/shares/"+ (ShareId==null? "" : System.Uri.EscapeDataString(ShareId))+"#ClientRequestToken&ClientRequestToken=" + (ClientRequestToken==null? "" : System.Uri.EscapeDataString(ClientRequestToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociate a lens from a workload.</p> <p>Up to 10 lenses can be disassociated from a workload in a single API operation.</p> <note> <p>The Amazon Web Services Well-Architected Framework lens (<code>wellarchitected</code>) cannot be removed from a workload.</p> </note>
		/// DisassociateLenses workloads/{WorkloadId}/disassociateLenses
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <returns>Success</returns>
		public async Task DisassociateLensesAsync(string WorkloadId, DisassociateLensesPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/disassociateLenses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociate a profile from a workload.
		/// DisassociateProfiles workloads/{WorkloadId}/disassociateProfiles
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <returns>Success</returns>
		public async Task DisassociateProfilesAsync(string WorkloadId, DisassociateProfilesPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/disassociateProfiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Export an existing lens.</p> <p>Only the owner of a lens can export it. Lenses provided by Amazon Web Services (Amazon Web Services Official Content) cannot be exported.</p> <p>Lenses are defined in JSON. For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html">JSON format specification</a> in the <i>Well-Architected Tool User Guide</i>.</p> <note> <p> <b>Disclaimer</b> </p> <p>Do not include or gather personal identifiable information (PII) of end users or other identifiable individuals in or via your custom lenses. If your custom lens or those shared with you and used in your account do include or collect PII you are responsible for: ensuring that the included PII is processed in accordance with applicable law, providing adequate privacy notices, and obtaining necessary consents for processing such data.</p> </note>
		/// ExportLens lenses/{LensAlias}/export
		/// </summary>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="LensVersion">The lens version to be exported.
		/// Max length: 32
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<ExportLensOutput> ExportLensAsync(string LensAlias, string LensVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lenses/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"/export&LensVersion=" + (LensVersion==null? "" : System.Uri.EscapeDataString(LensVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportLensOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the answer to a specific question in a workload review.
		/// GetAnswer workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="QuestionId">Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="MilestoneNumber">Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetAnswerOutput> GetAnswerAsync(string WorkloadId, string LensAlias, string QuestionId, int MilestoneNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/lensReviews/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"/answers/"+ (QuestionId==null? "" : System.Uri.EscapeDataString(QuestionId))+"&MilestoneNumber="+MilestoneNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAnswerOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the answer to a specific question in a workload review.
		/// UpdateAnswer workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="QuestionId">Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateAnswerOutput> UpdateAnswerAsync(string WorkloadId, string LensAlias, string QuestionId, UpdateAnswerPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/lensReviews/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"/answers/"+ (QuestionId==null? "" : System.Uri.EscapeDataString(QuestionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAnswerOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Get a consolidated report of your workloads.</p> <p>You can optionally choose to include workloads that have been shared with you.</p>
		/// GetConsolidatedReport consolidatedReport#Format
		/// </summary>
		/// <param name="Format"><p>The format of the consolidated report.</p> <p>For <code>PDF</code>, <code>Base64String</code> is returned. For <code>JSON</code>, <code>Metrics</code> is returned.</p></param>
		/// <param name="IncludeSharedResources">Set to <code>true</code> to have shared resources included in the report.</param>
		/// <param name="MaxResults">The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 15
		// </param>
		/// <returns>Success</returns>
		public async Task<GetConsolidatedReportOutput> GetConsolidatedReportAsync(ReportFormat Format, bool IncludeSharedResources, string NextToken, int MaxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consolidatedReport#Format?Format=" + Format+"&IncludeSharedResources="+IncludeSharedResources+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConsolidatedReportOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an existing lens.
		/// GetLens lenses/{LensAlias}
		/// </summary>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="LensVersion">The lens version to be retrieved.
		/// Max length: 32
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetLensOutput> GetLensAsync(string LensAlias, string LensVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lenses/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"&LensVersion=" + (LensVersion==null? "" : System.Uri.EscapeDataString(LensVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLensOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get lens review.
		/// GetLensReview workloads/{WorkloadId}/lensReviews/{LensAlias}
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="MilestoneNumber">Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetLensReviewOutput> GetLensReviewAsync(string WorkloadId, string LensAlias, int MilestoneNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/lensReviews/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"&MilestoneNumber="+MilestoneNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLensReviewOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update lens review for a particular workload.
		/// UpdateLensReview workloads/{WorkloadId}/lensReviews/{LensAlias}
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateLensReviewOutput> UpdateLensReviewAsync(string WorkloadId, string LensAlias, UpdateLensReviewPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/lensReviews/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateLensReviewOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get lens review report.
		/// GetLensReviewReport workloads/{WorkloadId}/lensReviews/{LensAlias}/report
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="MilestoneNumber">Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetLensReviewReportOutput> GetLensReviewReportAsync(string WorkloadId, string LensAlias, int MilestoneNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/lensReviews/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"/report&MilestoneNumber="+MilestoneNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLensReviewReportOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get lens version differences.
		/// GetLensVersionDifference lenses/{LensAlias}/versionDifference
		/// </summary>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="BaseLensVersion">The base version of the lens.
		/// Max length: 32
		/// Min length: 1
		// </param>
		/// <param name="TargetLensVersion">The lens version to target a difference for.
		/// Max length: 32
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetLensVersionDifferenceOutput> GetLensVersionDifferenceAsync(string LensAlias, string BaseLensVersion, string TargetLensVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lenses/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"/versionDifference&BaseLensVersion=" + (BaseLensVersion==null? "" : System.Uri.EscapeDataString(BaseLensVersion))+"&TargetLensVersion=" + (TargetLensVersion==null? "" : System.Uri.EscapeDataString(TargetLensVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLensVersionDifferenceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a milestone for an existing workload.
		/// GetMilestone workloads/{WorkloadId}/milestones/{MilestoneNumber}
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="MilestoneNumber">Minimum: 1
		/// Maximum: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<GetMilestoneOutput> GetMilestoneAsync(string WorkloadId, int MilestoneNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/milestones/"+MilestoneNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetMilestoneOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get profile information.
		/// GetProfile profiles/{ProfileArn}
		/// </summary>
		/// <param name="ProfileArn">The profile ARN.
		/// Max length: 2084
		// </param>
		/// <param name="ProfileVersion">The profile version.
		/// Max length: 32
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetProfileOutput> GetProfileAsync(string ProfileArn, string ProfileVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profiles/"+ (ProfileArn==null? "" : System.Uri.EscapeDataString(ProfileArn))+"&ProfileVersion=" + (ProfileVersion==null? "" : System.Uri.EscapeDataString(ProfileVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProfileOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a profile.
		/// UpdateProfile profiles/{ProfileArn}
		/// </summary>
		/// <param name="ProfileArn">The profile ARN.
		/// Max length: 2084
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateProfileOutput> UpdateProfileAsync(string ProfileArn, UpdateProfilePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profiles/"+ (ProfileArn==null? "" : System.Uri.EscapeDataString(ProfileArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateProfileOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get profile template.
		/// GetProfileTemplate profileTemplate
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetProfileTemplateOutput> GetProfileTemplateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profileTemplate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProfileTemplateOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an existing workload.
		/// GetWorkload workloads/{WorkloadId}
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <returns>Success</returns>
		public async Task<GetWorkloadOutput> GetWorkloadAsync(string WorkloadId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWorkloadOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing workload.
		/// UpdateWorkload workloads/{WorkloadId}
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateWorkloadOutput> UpdateWorkloadAsync(string WorkloadId, UpdateWorkloadPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateWorkloadOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Import a new custom lens or update an existing custom lens.</p> <p>To update an existing custom lens, specify its ARN as the <code>LensAlias</code>. If no ARN is specified, a new custom lens is created.</p> <p>The new or updated lens will have a status of <code>DRAFT</code>. The lens cannot be applied to workloads or shared with other Amazon Web Services accounts until it's published with <a>CreateLensVersion</a>.</p> <p>Lenses are defined in JSON. For more information, see <a href="https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html">JSON format specification</a> in the <i>Well-Architected Tool User Guide</i>.</p> <p>A custom lens cannot exceed 500 KB in size.</p> <note> <p> <b>Disclaimer</b> </p> <p>Do not include or gather personal identifiable information (PII) of end users or other identifiable individuals in or via your custom lenses. If your custom lens or those shared with you and used in your account do include or collect PII you are responsible for: ensuring that the included PII is processed in accordance with applicable law, providing adequate privacy notices, and obtaining necessary consents for processing such data.</p> </note>
		/// ImportLens importLens
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportLensOutput> ImportLensAsync(ImportLensPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "importLens";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportLensOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List of answers for a particular workload and lens.
		/// ListAnswers workloads/{WorkloadId}/lensReviews/{LensAlias}/answers
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="PillarId">Max length: 64
		/// Min length: 1
		// </param>
		/// <param name="MilestoneNumber">Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="MaxResults">The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="QuestionPriority">The priority of the question.</param>
		/// <returns>Success</returns>
		public async Task<ListAnswersOutput> ListAnswersAsync(string WorkloadId, string LensAlias, string PillarId, int MilestoneNumber, string NextToken, int MaxResults, QuestionPriority QuestionPriority, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/lensReviews/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"/answers&PillarId=" + (PillarId==null? "" : System.Uri.EscapeDataString(PillarId))+"&MilestoneNumber="+MilestoneNumber+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&QuestionPriority=" + QuestionPriority;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAnswersOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of Trusted Advisor check details by account related to the workload.
		/// ListCheckDetails workloads/{WorkloadId}/checks
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCheckDetailsOutput> ListCheckDetailsAsync(string WorkloadId, string MaxResults, string NextToken, ListCheckDetailsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/checks&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCheckDetailsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List of Trusted Advisor checks summarized for all accounts related to the workload.
		/// ListCheckSummaries workloads/{WorkloadId}/checkSummaries
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCheckSummariesOutput> ListCheckSummariesAsync(string WorkloadId, string MaxResults, string NextToken, ListCheckSummariesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/checkSummaries&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCheckSummariesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List lens review improvements.
		/// ListLensReviewImprovements workloads/{WorkloadId}/lensReviews/{LensAlias}/improvements
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <param name="PillarId">Max length: 64
		/// Min length: 1
		// </param>
		/// <param name="MilestoneNumber">Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="MaxResults">The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="QuestionPriority">The priority of the question.</param>
		/// <returns>Success</returns>
		public async Task<ListLensReviewImprovementsOutput> ListLensReviewImprovementsAsync(string WorkloadId, string LensAlias, string PillarId, int MilestoneNumber, string NextToken, int MaxResults, QuestionPriority QuestionPriority, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/lensReviews/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"/improvements&PillarId=" + (PillarId==null? "" : System.Uri.EscapeDataString(PillarId))+"&MilestoneNumber="+MilestoneNumber+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&QuestionPriority=" + QuestionPriority;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLensReviewImprovementsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List lens reviews for a particular workload.
		/// ListLensReviews workloads/{WorkloadId}/lensReviews
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="MilestoneNumber">Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="MaxResults">Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<ListLensReviewsOutput> ListLensReviewsAsync(string WorkloadId, int MilestoneNumber, string NextToken, int MaxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/lensReviews&MilestoneNumber="+MilestoneNumber+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLensReviewsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the available lenses.
		/// ListLenses lenses
		/// </summary>
		/// <param name="MaxResults">Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="LensType">The type of lenses to be returned.</param>
		/// <param name="LensStatus">The status of lenses to be returned.</param>
		/// <param name="LensName">Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<ListLensesOutput> ListLensesAsync(string NextToken, int MaxResults, LensType LensType, LensStatusType LensStatus, string LensName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "lenses?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&LensType=" + LensType+"&LensStatus=" + LensStatus+"&LensName=" + (LensName==null? "" : System.Uri.EscapeDataString(LensName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLensesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all milestones for an existing workload.
		/// ListMilestones workloads/{WorkloadId}/milestonesSummaries
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListMilestonesOutput> ListMilestonesAsync(string WorkloadId, string MaxResults, string NextToken, ListMilestonesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/milestonesSummaries&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMilestonesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List lens notifications.
		/// ListNotifications notifications
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListNotificationsOutput> ListNotificationsAsync(string MaxResults, string NextToken, ListNotificationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notifications?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListNotificationsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List profile notifications.
		/// ListProfileNotifications profileNotifications/
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="MaxResults">Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<ListProfileNotificationsOutput> ListProfileNotificationsAsync(string WorkloadId, string NextToken, int MaxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profileNotifications/?WorkloadId=" + (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProfileNotificationsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List profiles.
		/// ListProfiles profileSummaries
		/// </summary>
		/// <param name="ProfileNamePrefix">Prefix for profile name.
		/// Max length: 100
		// </param>
		/// <param name="ProfileOwnerType">Profile owner type.</param>
		/// <param name="MaxResults">Minimum: 1
		/// Maximum: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<ListProfilesOutput> ListProfilesAsync(string ProfileNamePrefix, ProfileOwnerType ProfileOwnerType, string NextToken, int MaxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "profileSummaries?ProfileNamePrefix=" + (ProfileNamePrefix==null? "" : System.Uri.EscapeDataString(ProfileNamePrefix))+"&ProfileOwnerType=" + ProfileOwnerType+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProfilesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the workload invitations.
		/// ListShareInvitations shareInvitations
		/// </summary>
		/// <param name="WorkloadNamePrefix">Max length: 100</param>
		/// <param name="LensNamePrefix">An optional string added to the beginning of each lens name returned in the results.
		/// Max length: 100
		// </param>
		/// <param name="ShareResourceType">The type of share invitations to be returned.</param>
		/// <param name="MaxResults">The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 50
		// </param>
		/// <param name="ProfileNamePrefix">Profile name prefix.
		/// Max length: 100
		// </param>
		/// <returns>Success</returns>
		public async Task<ListShareInvitationsOutput> ListShareInvitationsAsync(string WorkloadNamePrefix, string LensNamePrefix, ShareResourceType ShareResourceType, string NextToken, int MaxResults, string ProfileNamePrefix, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shareInvitations?WorkloadNamePrefix=" + (WorkloadNamePrefix==null? "" : System.Uri.EscapeDataString(WorkloadNamePrefix))+"&LensNamePrefix=" + (LensNamePrefix==null? "" : System.Uri.EscapeDataString(LensNamePrefix))+"&ShareResourceType=" + ShareResourceType+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&ProfileNamePrefix=" + (ProfileNamePrefix==null? "" : System.Uri.EscapeDataString(ProfileNamePrefix));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListShareInvitationsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>List the tags for a resource.</p> <note> <p>The WorkloadArn parameter can be a workload ARN, a custom lens ARN, or a profile ARN.</p> </note>
		/// ListTagsForResource tags/{WorkloadArn}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceOutput> ListTagsForResourceAsync(string WorkloadArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (WorkloadArn==null? "" : System.Uri.EscapeDataString(WorkloadArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more tags to the specified resource.</p> <note> <p>The WorkloadArn parameter can be a workload ARN, a custom lens ARN, or a profile ARN.</p> </note>
		/// TagResource tags/{WorkloadArn}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceOutput> TagResourceAsync(string WorkloadArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (WorkloadArn==null? "" : System.Uri.EscapeDataString(WorkloadArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Paginated list of workloads.
		/// ListWorkloads workloadsSummaries
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListWorkloadsOutput> ListWorkloadsAsync(string MaxResults, string NextToken, ListWorkloadsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloadsSummaries?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWorkloadsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes specified tags from a resource.</p> <note> <p>The WorkloadArn parameter can be a workload ARN, a custom lens ARN, or a profile ARN.</p> </note> <p>To specify multiple tags, use separate <b>tagKeys</b> parameters, for example:</p> <p> <code>DELETE /tags/WorkloadArn?tagKeys=key1&amp;tagKeys=key2</code> </p>
		/// UntagResource tags/{WorkloadArn}#tagKeys
		/// </summary>
		/// <param name="tagKeys">A list of tag keys. Existing tags of the resource whose keys are members of this list are removed from the resource.
		/// Minimum items: 1
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceOutput> UntagResourceAsync(string WorkloadArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (WorkloadArn==null? "" : System.Uri.EscapeDataString(WorkloadArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates whether the Amazon Web Services account is opted into organization sharing and discovery integration features.
		/// UpdateGlobalSettings global-settings
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateGlobalSettingsAsync(UpdateGlobalSettingsPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Update a workload or custom lens share invitation.</p> <note> <p>This API operation can be called independently of any resource. Previous documentation implied that a workload ARN must be specified.</p> </note>
		/// UpdateShareInvitation shareInvitations/{ShareInvitationId}
		/// </summary>
		/// <param name="ShareInvitationId">The ID assigned to the share invitation.</param>
		/// <returns>Success</returns>
		public async Task<UpdateShareInvitationOutput> UpdateShareInvitationAsync(string ShareInvitationId, UpdateShareInvitationPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shareInvitations/"+ (ShareInvitationId==null? "" : System.Uri.EscapeDataString(ShareInvitationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateShareInvitationOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a workload share.
		/// UpdateWorkloadShare workloads/{WorkloadId}/shares/{ShareId}
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateWorkloadShareOutput> UpdateWorkloadShareAsync(string ShareId, string WorkloadId, UpdateWorkloadSharePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/shares/"+ (ShareId==null? "" : System.Uri.EscapeDataString(ShareId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateWorkloadShareOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Upgrade lens review for a particular workload.
		/// UpgradeLensReview workloads/{WorkloadId}/lensReviews/{LensAlias}/upgrade
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="LensAlias">Max length: 128
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task UpgradeLensReviewAsync(string WorkloadId, string LensAlias, UpgradeLensReviewPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/lensReviews/"+ (LensAlias==null? "" : System.Uri.EscapeDataString(LensAlias))+"/upgrade";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Upgrade a profile.
		/// UpgradeProfileVersion workloads/{WorkloadId}/profiles/{ProfileArn}/upgrade
		/// </summary>
		/// <param name="WorkloadId">Max length: 32
		/// Min length: 32
		// </param>
		/// <param name="ProfileArn">The profile ARN.
		/// Max length: 2084
		// </param>
		/// <returns>Success</returns>
		public async Task UpgradeProfileVersionAsync(string WorkloadId, string ProfileArn, UpgradeProfileVersionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workloads/"+ (WorkloadId==null? "" : System.Uri.EscapeDataString(WorkloadId))+"/profiles/"+ (ProfileArn==null? "" : System.Uri.EscapeDataString(ProfileArn))+"/upgrade";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class AssociateLensesPatchBody
	{
		
		/// <summary>
		/// <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p> <p>Identify a lens using its <a>LensSummary$LensAlias</a>.</p>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] LensAliases { get; set; }
	}
	
	public class AssociateProfilesPatchBody
	{
		
		/// <summary>
		/// The list of profile ARNs to associate with the workload.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] ProfileArns { get; set; }
	}
	
	public class CreateLensSharePostBody
	{
		
		/// <summary>
		/// The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.
		/// Required
		/// Max length: 2048
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string SharedWith { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
	
	public class CreateLensVersionPostBody
	{
		
		/// <summary>
		/// The version of the lens being created.
		/// Required
		/// Max length: 32
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string LensVersion { get; set; }
		
		/// <summary>
		/// Set to true if this new major lens version.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsMajorVersion { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
	
	public class CreateMilestonePostBody
	{
		
		/// <summary>
		/// <p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>
		/// Required
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string MilestoneName { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
	
	public class CreateProfilePostBody
	{
		
		/// <summary>
		/// Name of the profile.
		/// Required
		/// Max length: 100
		/// Min length: 3
		/// Pattern: ^[A-Za-z0-9-_.,:/()@!&?#+'’\s]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9-_.,:/()@!&?#+'’\s]+$")]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// The profile description.
		/// Required
		/// Max length: 100
		/// Min length: 3
		/// Pattern: ^[A-Za-z0-9-_.,:/()@!&?#+'’\s]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9-_.,:/()@!&?#+'’\s]+$")]
		public string ProfileDescription { get; set; }
		
		/// <summary>
		/// The profile questions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProfileQuestionUpdate[] ProfileQuestions { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The tags assigned to the profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class CreateProfileSharePostBody
	{
		
		/// <summary>
		/// The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.
		/// Required
		/// Max length: 2048
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string SharedWith { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
	
	public class CreateWorkloadPostBody
	{
		
		/// <summary>
		/// <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
		/// Required
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string WorkloadName { get; set; }
		
		/// <summary>
		/// The description for the workload.
		/// Required
		/// Max length: 250
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Description { get; set; }
		
		/// <summary>
		/// The environment for the workload.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public WorkloadEnvironment Environment { get; set; }
		
		/// <summary>
		/// The list of Amazon Web Services account IDs associated with the workload.
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] AccountIds { get; set; }
		
		/// <summary>
		/// The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] AwsRegions { get; set; }
		
		/// <summary>
		///  The list of non-Amazon Web Services Regions associated with the workload.
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] NonAwsRegions { get; set; }
		
		/// <summary>
		/// The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] PillarPriorities { get; set; }
		
		/// <summary>
		/// The URL of the architectural design for the workload.
		/// Max length: 2048
		/// Pattern: ^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$")]
		public string ArchitecturalDesign { get; set; }
		
		/// <summary>
		/// The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.
		/// Max length: 255
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ReviewOwner { get; set; }
		
		/// <summary>
		/// <p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string IndustryType { get; set; }
		
		/// <summary>
		/// The industry for the workload.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Industry { get; set; }
		
		/// <summary>
		/// The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Lenses { get; set; }
		
		/// <summary>
		/// The notes associated with the workload.
		/// Max length: 2084
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2084)]
		public string Notes { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The tags to be associated with the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		/// Discovery configuration associated to the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateWorkloadPostBodyDiscoveryConfig DiscoveryConfig { get; set; }
		
		/// <summary>
		/// List of AppRegistry application ARNs associated to the workload.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string[] Applications { get; set; }
		
		/// <summary>
		/// The list of profile ARNs associated with the workload.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string[] ProfileArns { get; set; }
	}
	
	public class CreateWorkloadPostBodyDiscoveryConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrustedAdvisorIntegrationStatus TrustedAdvisorIntegrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DefinitionType[] WorkloadResourceDefinition { get; set; }
	}
	
	public class CreateWorkloadSharePostBody
	{
		
		/// <summary>
		/// The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.
		/// Required
		/// Max length: 2048
		/// Min length: 12
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string SharedWith { get; set; }
		
		/// <summary>
		/// Permission granted on a share request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ShareInvitationSummaryPermissionType PermissionType { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
	
	public class DisassociateLensesPatchBody
	{
		
		/// <summary>
		/// <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p> <p>Identify a lens using its <a>LensSummary$LensAlias</a>.</p>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] LensAliases { get; set; }
	}
	
	public class DisassociateProfilesPatchBody
	{
		
		/// <summary>
		/// The list of profile ARNs to disassociate from the workload.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] ProfileArns { get; set; }
	}
	
	public class UpdateAnswerPatchBody
	{
		
		/// <summary>
		/// <p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] SelectedChoices { get; set; }
		
		/// <summary>
		/// A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, ChoiceUpdate> ChoiceUpdates { get; set; }
		
		/// <summary>
		/// The notes associated with the workload.
		/// Max length: 2084
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2084)]
		public string Notes { get; set; }
		
		/// <summary>
		/// Defines whether this question is applicable to a lens review.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsApplicable { get; set; }
		
		/// <summary>
		/// The reason why a question is not applicable to your workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ChoiceReason Reason { get; set; }
	}
	
	public class UpdateLensReviewPatchBody
	{
		
		/// <summary>
		/// The notes associated with the workload.
		/// Max length: 2084
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2084)]
		public string LensNotes { get; set; }
		
		/// <summary>
		/// List of pillar notes of a lens review in a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> PillarNotes { get; set; }
	}
	
	public class UpdateProfilePatchBody
	{
		
		/// <summary>
		/// The profile description.
		/// Max length: 100
		/// Min length: 3
		/// Pattern: ^[A-Za-z0-9-_.,:/()@!&?#+'’\s]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9-_.,:/()@!&?#+'’\s]+$")]
		public string ProfileDescription { get; set; }
		
		/// <summary>
		/// Profile questions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProfileQuestionUpdate[] ProfileQuestions { get; set; }
	}
	
	public class UpdateWorkloadPatchBody
	{
		
		/// <summary>
		/// <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string WorkloadName { get; set; }
		
		/// <summary>
		/// The description for the workload.
		/// Max length: 250
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Description { get; set; }
		
		/// <summary>
		/// The environment for the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkloadEnvironment Environment { get; set; }
		
		/// <summary>
		/// The list of Amazon Web Services account IDs associated with the workload.
		/// Maximum items: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string[] AccountIds { get; set; }
		
		/// <summary>
		/// The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string[] AwsRegions { get; set; }
		
		/// <summary>
		///  The list of non-Amazon Web Services Regions associated with the workload.
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public string[] NonAwsRegions { get; set; }
		
		/// <summary>
		/// The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] PillarPriorities { get; set; }
		
		/// <summary>
		/// The URL of the architectural design for the workload.
		/// Max length: 2048
		/// Pattern: ^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(|(https?|ftp):\/\/[^\s/$.?#].[^\s]*)$")]
		public string ArchitecturalDesign { get; set; }
		
		/// <summary>
		/// The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.
		/// Max length: 255
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ReviewOwner { get; set; }
		
		/// <summary>
		/// <p>Flag indicating whether the workload owner has acknowledged that the <i>Review owner</i> field is required.</p> <p>If a <b>Review owner</b> is not added to the workload within 60 days of acknowledgement, access to the workload is restricted until an owner is added.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsReviewOwnerUpdateAcknowledged { get; set; }
		
		/// <summary>
		/// <p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string IndustryType { get; set; }
		
		/// <summary>
		/// The industry for the workload.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Industry { get; set; }
		
		/// <summary>
		/// The notes associated with the workload.
		/// Max length: 2084
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(2084)]
		public string Notes { get; set; }
		
		/// <summary>
		/// The improvement status for a workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public WorkloadImprovementStatus ImprovementStatus { get; set; }
		
		/// <summary>
		/// Discovery configuration associated to the workload.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateWorkloadPatchBodyDiscoveryConfig DiscoveryConfig { get; set; }
		
		/// <summary>
		/// List of AppRegistry application ARNs to associate to the workload.
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string[] Applications { get; set; }
	}
	
	public class UpdateWorkloadPatchBodyDiscoveryConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TrustedAdvisorIntegrationStatus TrustedAdvisorIntegrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DefinitionType[] WorkloadResourceDefinition { get; set; }
	}
	
	public class ImportLensPutBody
	{
		
		/// <summary>
		/// <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LensAlias { get; set; }
		
		/// <summary>
		/// The JSON representation of a lens.
		/// Required
		/// Max length: 500000
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(500000)]
		public string JSONString { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Required
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Tags to associate to a lens.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class ListCheckDetailsPostBody
	{
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Well-Architected Lens ARN.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		/// <summary>
		/// <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PillarId { get; set; }
		
		/// <summary>
		/// The ID of the question.
		/// Required
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// The ID of a choice.
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ChoiceId { get; set; }
	}
	
	public class ListCheckSummariesPostBody
	{
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		/// Well-Architected Lens ARN.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LensArn { get; set; }
		
		/// <summary>
		/// <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string PillarId { get; set; }
		
		/// <summary>
		/// The ID of the question.
		/// Required
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string QuestionId { get; set; }
		
		/// <summary>
		/// The ID of a choice.
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string ChoiceId { get; set; }
	}
	
	public class ListMilestonesPostBody
	{
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class ListNotificationsPostBody
	{
		
		/// <summary>
		/// The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
		/// Max length: 32
		/// Min length: 32
		/// Pattern: [0-9a-f]{32}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(32)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-f]{32}")]
		public string WorkloadId { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags for the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class ListWorkloadsPostBody
	{
		
		/// <summary>
		/// An optional string added to the beginning of each workload name returned in the results.
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string WorkloadNamePrefix { get; set; }
		
		/// <summary>
		/// The token to use to retrieve the next set of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		/// <summary>
		/// The maximum number of results to return for this request.
		/// Minimum: 1
		/// Maximum: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, 50)]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	public class UpdateGlobalSettingsPatchBody
	{
		
		/// <summary>
		/// The status of organization sharing settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrustedAdvisorIntegrationStatus OrganizationSharingStatus { get; set; }
		
		/// <summary>
		/// The status of discovery support settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public TrustedAdvisorIntegrationStatus DiscoveryIntegrationStatus { get; set; }
	}
	
	public class UpdateShareInvitationPatchBody
	{
		
		/// <summary>
		/// Share invitation action taken by contributor.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ShareInvitationAction ShareInvitationAction { get; set; }
	}
	
	public class UpdateWorkloadSharePatchBody
	{
		
		/// <summary>
		/// Permission granted on a share request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ShareInvitationSummaryPermissionType PermissionType { get; set; }
	}
	
	public class UpgradeLensReviewPutBody
	{
		
		/// <summary>
		/// <p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>
		/// Required
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string MilestoneName { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
	
	public class UpgradeProfileVersionPutBody
	{
		
		/// <summary>
		/// <p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>
		/// Max length: 100
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string MilestoneName { get; set; }
		
		/// <summary>
		/// <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>
		/// Max length: 2048
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string ClientRequestToken { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
