//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Additional key names that will be used to identify the target of the policy value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1AdditionalTargetKeyName
	{
		
		/// <summary>
		/// Key name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Key description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyDescription")]
		public string KeyDescription { get; set; }
	}
	
	/// <summary>
	/// Request message for specifying that multiple policy values will be deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest
	{
		
		/// <summary>
		/// List of policies that will be deleted as defined by the `requests`. All requests in the list must follow these restrictions: 1. All schemas in the list must have the same root namespace. 2. All `policyTargetKey.targetResource` values must point to a group resource. 3. All `policyTargetKey` values must have the same `app_id` key name in the `additionalTargetKeys`. 4. No two modification requests can reference the same `policySchema` + ` policyTargetKey` pair. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public GoogleChromePolicyVersionsV1DeleteGroupPolicyRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request parameters for deleting the policy value of a specific group target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1DeleteGroupPolicyRequest
	{
		
		/// <summary>
		/// The fully qualified name of the policy schema that is being inherited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policySchema")]
		public string PolicySchema { get; set; }
		
		/// <summary>
		/// The key used to identify the target on which the policy will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyTargetKey")]
		public GoogleChromePolicyVersionsV1PolicyTargetKey PolicyTargetKey { get; set; }
	}
	
	/// <summary>
	/// The key used to identify the target on which the policy will be applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1PolicyTargetKey
	{
		
		/// <summary>
		/// Map containing the additional target key name and value pairs used to further identify the target of the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalTargetKeys")]
		public System.Collections.Generic.Dictionary<string, string> AdditionalTargetKeys { get; set; }
		
		/// <summary>
		/// The target resource on which this policy is applied. The following resources are supported: * Organizational Unit ("orgunits/{orgunit_id}") * Group ("groups/{group_id}")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResource")]
		public string TargetResource { get; set; }
	}
	
	/// <summary>
	/// Request message for specifying that multiple policy values inherit their value from their parents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest
	{
		
		/// <summary>
		/// List of policies that have to inherit their values as defined by the `requests`. All requests in the list must follow these restrictions: 1. All schemas in the list must have the same root namespace. 2. All `policyTargetKey.targetResource` values must point to an org unit resource. 3. All `policyTargetKey` values must have the same key names in the ` additionalTargetKeys`. This also means if one of the targets has an empty `additionalTargetKeys` map, all of the targets must have an empty `additionalTargetKeys` map. 4. No two modification requests can reference the same `policySchema` + ` policyTargetKey` pair. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public GoogleChromePolicyVersionsV1InheritOrgUnitPolicyRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request parameters for inheriting policy value of a specific org unit target from the policy value of its parent org unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1InheritOrgUnitPolicyRequest
	{
		
		/// <summary>
		/// The fully qualified name of the policy schema that is being inherited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policySchema")]
		public string PolicySchema { get; set; }
		
		/// <summary>
		/// The key used to identify the target on which the policy will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyTargetKey")]
		public GoogleChromePolicyVersionsV1PolicyTargetKey PolicyTargetKey { get; set; }
	}
	
	/// <summary>
	/// Request message for modifying multiple policy values for a specific group-based target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest
	{
		
		/// <summary>
		/// List of policies to modify as defined by the `requests`. All requests in the list must follow these restrictions: 1. All schemas in the list must have the same root namespace. 2. All `policyTargetKey.targetResource` values must point to a group resource. 3. All `policyTargetKey` values must have the same `app_id` key name in the `additionalTargetKeys`. 4. No two modification requests can reference the same `policySchema` + ` policyTargetKey` pair. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public GoogleChromePolicyVersionsV1ModifyGroupPolicyRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request parameters for modifying a policy value for a specific group target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1ModifyGroupPolicyRequest
	{
		
		/// <summary>
		/// The key used to identify the target on which the policy will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyTargetKey")]
		public GoogleChromePolicyVersionsV1PolicyTargetKey PolicyTargetKey { get; set; }
		
		/// <summary>
		/// A particular value for a policy managed by the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyValue")]
		public GoogleChromePolicyVersionsV1PolicyValue PolicyValue { get; set; }
		
		/// <summary>
		/// Required. Policy fields to update. Only fields in this mask will be updated; other fields in `policy_value` will be ignored (even if they have values). If a field is in this list it must have a value in 'policy_value'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// A particular value for a policy managed by the service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1PolicyValue
	{
		
		/// <summary>
		/// The fully qualified name of the policy schema associated with this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policySchema")]
		public string PolicySchema { get; set; }
		
		/// <summary>
		/// The value of the policy that is compatible with the schema that it is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Collections.Generic.Dictionary<string, object> Value { get; set; }
	}
	
	/// <summary>
	/// Request message for modifying multiple policy values for a specific target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest
	{
		
		/// <summary>
		/// List of policies to modify as defined by the `requests`. All requests in the list must follow these restrictions: 1. All schemas in the list must have the same root namespace. 2. All `policyTargetKey.targetResource` values must point to an org unit resource. 3. All `policyTargetKey` values must have the same key names in the ` additionalTargetKeys`. This also means if one of the targets has an empty `additionalTargetKeys` map, all of the targets must have an empty `additionalTargetKeys` map. 4. No two modification requests can reference the same `policySchema` + ` policyTargetKey` pair. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request parameters for modifying a policy value for a specific org unit target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1ModifyOrgUnitPolicyRequest
	{
		
		/// <summary>
		/// The key used to identify the target on which the policy will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyTargetKey")]
		public GoogleChromePolicyVersionsV1PolicyTargetKey PolicyTargetKey { get; set; }
		
		/// <summary>
		/// A particular value for a policy managed by the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyValue")]
		public GoogleChromePolicyVersionsV1PolicyValue PolicyValue { get; set; }
		
		/// <summary>
		/// Required. Policy fields to update. Only fields in this mask will be updated; other fields in `policy_value` will be ignored (even if they have values). If a field is in this list it must have a value in 'policy_value'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Error information for removing of a specific certificate on a specific target. A reference to a certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1CertificateReference
	{
		
		/// <summary>
		/// Output only. The name of the referencing network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Output only. The obfuscated id of the org unit the referencing network is in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
	}
	
	/// <summary>
	/// Request object for creating a certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1DefineCertificateRequest
	{
		
		/// <summary>
		/// Optional. The optional name of the certificate. If not specified, the certificate issuer will be used as the name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ceritificateName")]
		public string CeritificateName { get; set; }
		
		/// <summary>
		/// Required. The raw contents of the .PEM, .CRT, or .CER file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificate")]
		public string Certificate { get; set; }
		
		/// <summary>
		/// Optional. Certificate settings within the chrome.networks.certificates namespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public GoogleChromePolicyVersionsV1NetworkSetting[] Settings { get; set; }
		
		/// <summary>
		/// Required. The target resource on which this certificate is applied. The following resources are supported: * Organizational Unit ("orgunits/{orgunit_id}")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResource")]
		public string TargetResource { get; set; }
	}
	
	/// <summary>
	/// A network setting contains network configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1NetworkSetting
	{
		
		/// <summary>
		/// The fully qualified name of the network setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policySchema")]
		public string PolicySchema { get; set; }
		
		/// <summary>
		/// The value of the network setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Collections.Generic.Dictionary<string, object> Value { get; set; }
	}
	
	/// <summary>
	/// Response object for creating a certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1DefineCertificateResponse
	{
		
		/// <summary>
		/// The guid of the certificate created by the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkId")]
		public string NetworkId { get; set; }
		
		/// <summary>
		/// the affiliated settings of the certificate (NOT IMPLEMENTED)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public GoogleChromePolicyVersionsV1NetworkSetting[] Settings { get; set; }
		
		/// <summary>
		/// the resource at which the certificate is defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResource")]
		public string TargetResource { get; set; }
	}
	
	/// <summary>
	/// Request object for creating a new network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1DefineNetworkRequest
	{
		
		/// <summary>
		/// Required. Name of the new created network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Detailed network settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public GoogleChromePolicyVersionsV1NetworkSetting[] Settings { get; set; }
		
		/// <summary>
		/// Required. The target resource on which this new network will be defined. The following resources are supported: * Organizational Unit ("orgunits/{orgunit_id}")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResource")]
		public string TargetResource { get; set; }
	}
	
	/// <summary>
	/// Response object for creating a network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1DefineNetworkResponse
	{
		
		/// <summary>
		/// Network ID of the new created network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkId")]
		public string NetworkId { get; set; }
		
		/// <summary>
		/// Detailed network settings of the new created network
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public GoogleChromePolicyVersionsV1NetworkSetting[] Settings { get; set; }
		
		/// <summary>
		/// The target resource on which this new network will be defined. The following resources are supported: * Organizational Unit ("orgunits/{orgunit_id}")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResource")]
		public string TargetResource { get; set; }
	}
	
	/// <summary>
	/// Information about any range constraints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1FieldConstraints
	{
		
		/// <summary>
		/// A constraint on upper and/or lower bounds, with at least one being set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numericRangeConstraint")]
		public GoogleChromePolicyVersionsV1NumericRangeConstraint NumericRangeConstraint { get; set; }
		
		/// <summary>
		/// Constraints on the uploaded file of a file policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadedFileConstraints")]
		public GoogleChromePolicyVersionsV1UploadedFileConstraints UploadedFileConstraints { get; set; }
	}
	
	/// <summary>
	/// A constraint on upper and/or lower bounds, with at least one being set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1NumericRangeConstraint
	{
		
		/// <summary>
		/// Maximum value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public string Maximum { get; set; }
		
		/// <summary>
		/// Minimum value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public string Minimum { get; set; }
	}
	
	/// <summary>
	/// Constraints on the uploaded file of a file policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1UploadedFileConstraints
	{
		
		/// <summary>
		/// The size limit of uploaded files for a setting, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeLimitBytes")]
		public string SizeLimitBytes { get; set; }
		
		/// <summary>
		/// File types that can be uploaded for a setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedContentTypes")]
		public string[] SupportedContentTypes { get; set; }
	}
	
	/// <summary>
	/// Request message for listing the group priority ordering of an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest
	{
		
		/// <summary>
		/// The namespace of the policy type for the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyNamespace")]
		public string PolicyNamespace { get; set; }
		
		/// <summary>
		/// The schema name of the policy for the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policySchema")]
		public string PolicySchema { get; set; }
		
		/// <summary>
		/// The key used to identify the target on which the policy will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyTargetKey")]
		public GoogleChromePolicyVersionsV1PolicyTargetKey PolicyTargetKey { get; set; }
	}
	
	/// <summary>
	/// Response message for listing the group priority ordering of an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse
	{
		
		/// <summary>
		/// Output only. The group IDs, in priority ordering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupIds")]
		public string[] GroupIds { get; set; }
		
		/// <summary>
		/// Output only. The namespace of the policy type of the group IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyNamespace")]
		public string PolicyNamespace { get; set; }
		
		/// <summary>
		/// Output only. The schema name of the policy for the group IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policySchema")]
		public string PolicySchema { get; set; }
		
		/// <summary>
		/// The key used to identify the target on which the policy will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyTargetKey")]
		public GoogleChromePolicyVersionsV1PolicyTargetKey PolicyTargetKey { get; set; }
	}
	
	/// <summary>
	/// Response message for listing policy schemas that match a filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1ListPolicySchemasResponse
	{
		
		/// <summary>
		/// The page token used to get the next page of policy schemas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of policy schemas that match the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policySchemas")]
		public GoogleChromePolicyVersionsV1PolicySchema[] PolicySchemas { get; set; }
	}
	
	/// <summary>
	/// Resource representing a policy schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1PolicySchema
	{
		
		/// <summary>
		/// Output only. Specific access restrictions related to this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessRestrictions")]
		public string[] AccessRestrictions { get; set; }
		
		/// <summary>
		/// Output only. Additional key names that will be used to identify the target of the policy value. When specifying a `policyTargetKey`, each of the additional keys specified here will have to be included in the `additionalTargetKeys` map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalTargetKeyNames")]
		public GoogleChromePolicyVersionsV1AdditionalTargetKeyName[] AdditionalTargetKeyNames { get; set; }
		
		/// <summary>
		/// Title of the category in which a setting belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryTitle")]
		public string CategoryTitle { get; set; }
		
		/// <summary>
		/// Describes a complete .proto file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public Proto2FileDescriptorProto Definition { get; set; }
		
		/// <summary>
		/// Output only. Detailed description of each field that is part of the schema. Fields are suggested to be displayed by the ordering in this list, not by field number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldDescriptions")]
		public GoogleChromePolicyVersionsV1PolicySchemaFieldDescription[] FieldDescriptions { get; set; }
		
		/// <summary>
		/// Format: name=customers/{customer}/policySchemas/{schema_namespace}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Special notice messages related to setting certain values in certain fields in the schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notices")]
		public GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription[] Notices { get; set; }
		
		/// <summary>
		/// Lifecycle information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyApiLifecycle")]
		public GoogleChromePolicyVersionsV1PolicyApiLifecycle PolicyApiLifecycle { get; set; }
		
		/// <summary>
		/// Output only. Description about the policy schema for user consumption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyDescription")]
		public string PolicyDescription { get; set; }
		
		/// <summary>
		/// Output only. The fully qualified name of the policy schema. This value is used to fill the field `policy_schema` in PolicyValue when calling BatchInheritOrgUnitPolicies BatchModifyOrgUnitPolicies BatchModifyGroupPolicies or BatchDeleteGroupPolicies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		/// <summary>
		/// Output only. URI to related support article for this schema.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportUri")]
		public string SupportUri { get; set; }
		
		/// <summary>
		/// Output only. List indicates that the policy will only apply to devices/users on these platforms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedPlatforms")]
		public string[] SupportedPlatforms { get; set; }
		
		/// <summary>
		/// Output only. Information about applicable target resources for the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validTargetResources")]
		public string[] ValidTargetResources { get; set; }
	}
	
	/// <summary>
	/// Describes a complete .proto file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Proto2FileDescriptorProto
	{
		
		/// <summary>
		/// BEGIN GOOGLE-INTERNAL TODO(b/297898292) Deprecate and remove this field in favor of enums. END GOOGLE-INTERNAL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editionDeprecated")]
		public string EditionDeprecated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enumType")]
		public Proto2EnumDescriptorProto[] EnumType { get; set; }
		
		/// <summary>
		/// All top-level definitions in this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageType")]
		public Proto2DescriptorProto[] MessageType { get; set; }
		
		/// <summary>
		/// file name, relative to root of source tree
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// e.g. "foo", "foo.bar", etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		/// <summary>
		/// The syntax of the proto file. The supported values are "proto2", "proto3", and "editions". If `edition` is present, this value must be "editions".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syntax")]
		public string Syntax { get; set; }
	}
	
	/// <summary>
	/// Describes an enum type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Proto2EnumDescriptorProto
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Proto2EnumValueDescriptorProto[] Value { get; set; }
	}
	
	/// <summary>
	/// Describes a value within an enum.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Proto2EnumValueDescriptorProto
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
	}
	
	/// <summary>
	/// Describes a message type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Proto2DescriptorProto
	{
		
		[System.Runtime.Serialization.DataMember(Name="enumType")]
		public Proto2EnumDescriptorProto[] EnumType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public Proto2FieldDescriptorProto[] Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nestedType")]
		public Proto2DescriptorProto[] NestedType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oneofDecl")]
		public Proto2OneofDescriptorProto[] OneofDecl { get; set; }
	}
	
	/// <summary>
	/// Describes a field within a message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Proto2FieldDescriptorProto
	{
		
		/// <summary>
		/// For numeric types, contains the original text representation of the value. For booleans, "true" or "false". For strings, contains the default text contents (not escaped in any way). For bytes, contains the C escaped value. All bytes >= 128 are escaped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// JSON name of this field. The value is set by protocol compiler. If the user has set a "json_name" option on this field, that option's value will be used. Otherwise, it's deduced from the field's name by converting it to camelCase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonName")]
		public string JsonName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public System.Nullable<Proto2FieldDescriptorProtoLabel> Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		/// <summary>
		/// If set, gives the index of a oneof in the containing type's oneof_decl list. This field is a member of that oneof.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oneofIndex")]
		public System.Nullable<System.Int32> OneofIndex { get; set; }
		
		/// <summary>
		/// If true, this is a proto3 "optional". When a proto3 field is optional, it tracks presence regardless of field type. When proto3_optional is true, this field must belong to a oneof to signal to old proto3 clients that presence is tracked for this field. This oneof is known as a "synthetic" oneof, and this field must be its sole member (each proto3 optional field gets its own synthetic oneof). Synthetic oneofs exist in the descriptor only, and do not generate any API. Synthetic oneofs must be ordered after all "real" oneofs. For message fields, proto3_optional doesn't create any semantic change, since non-repeated message fields always track presence. However it still indicates the semantic detail of whether the user wrote "optional" or not. This can be useful for round-tripping the .proto file. For consistency we give message fields a synthetic oneof also, even though it is not required to track presence. This is especially important because the parser can't tell if a field is a message or an enum, so it must always create a synthetic oneof. Proto2 optional fields do not set this flag, because they already indicate optional with `LABEL_OPTIONAL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proto3Optional")]
		public System.Nullable<System.Boolean> Proto3Optional { get; set; }
		
		/// <summary>
		/// If type_name is set, this need not be set. If both this and type_name are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<Proto2FieldDescriptorProtoType> Type { get; set; }
		
		/// <summary>
		/// For message and enum types, this is the name of the type. If the name starts with a '.', it is fully-qualified. Otherwise, C++-like scoping rules are used to find the type (i.e. first the nested types within this message are searched, then within the parent, on up to the root namespace).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typeName")]
		public string TypeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Proto2FieldDescriptorProtoLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LABEL_OPTIONAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LABEL_REPEATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LABEL_REQUIRED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Proto2FieldDescriptorProtoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_DOUBLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_FLOAT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_INT64 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UINT64 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_INT32 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_FIXED64 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_FIXED32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_BOOL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_STRING = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_GROUP = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_MESSAGE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_BYTES = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UINT32 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_ENUM = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_SFIXED32 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_SFIXED64 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_SINT32 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_SINT64 = 17,
	}
	
	/// <summary>
	/// Describes a oneof.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Proto2OneofDescriptorProto
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Provides detailed information for a particular field that is part of a PolicySchema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1PolicySchemaFieldDescription
	{
		
		/// <summary>
		/// Output only. Client default if the policy is unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public object DefaultValue { get; set; }
		
		/// <summary>
		/// Deprecated. Use name and field_description instead. The description for the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. The name of the field for associated with this description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// Information about any range constraints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldConstraints")]
		public GoogleChromePolicyVersionsV1FieldConstraints FieldConstraints { get; set; }
		
		/// <summary>
		/// Output only. Provides a list of fields and values. At least one of the fields must have the corresponding value in order for this field to be allowed to be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldDependencies")]
		public GoogleChromePolicyVersionsV1PolicySchemaFieldDependencies[] FieldDependencies { get; set; }
		
		/// <summary>
		/// Output only. The description of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldDescription")]
		public string FieldDescription { get; set; }
		
		/// <summary>
		/// Output only. Any input constraints associated on the values for the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputConstraint")]
		public string InputConstraint { get; set; }
		
		/// <summary>
		/// Output only. If the field has a set of known values, this field will provide a description for these values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="knownValueDescriptions")]
		public GoogleChromePolicyVersionsV1PolicySchemaFieldKnownValueDescription[] KnownValueDescriptions { get; set; }
		
		/// <summary>
		/// Output only. The name of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Provides the description of the fields nested in this field, if the field is a message type that defines multiple fields. Fields are suggested to be displayed by the ordering in this list, not by field number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nestedFieldDescriptions")]
		public GoogleChromePolicyVersionsV1PolicySchemaFieldDescription[] NestedFieldDescriptions { get; set; }
		
		/// <summary>
		/// Output only. Provides a list of fields that are required to be set if this field has a certain value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredItems")]
		public GoogleChromePolicyVersionsV1PolicySchemaRequiredItems[] RequiredItems { get; set; }
	}
	
	/// <summary>
	/// The field and the value it must have for another field to be allowed to be set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1PolicySchemaFieldDependencies
	{
		
		/// <summary>
		/// The source field which this field depends on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceField")]
		public string SourceField { get; set; }
		
		/// <summary>
		/// The value which the source field must have for this field to be allowed to be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceFieldValue")]
		public string SourceFieldValue { get; set; }
	}
	
	/// <summary>
	/// Provides detailed information about a known value that is allowed for a particular field in a PolicySchema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1PolicySchemaFieldKnownValueDescription
	{
		
		/// <summary>
		/// Output only. Additional description for this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. Field conditions required for this value to be valid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldDependencies")]
		public GoogleChromePolicyVersionsV1PolicySchemaFieldDependencies[] FieldDependencies { get; set; }
		
		/// <summary>
		/// Output only. The string represenstation of the value that can be set for the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The fields that will become required based on the value of this field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1PolicySchemaRequiredItems
	{
		
		/// <summary>
		/// The value(s) of the field that provoke required field enforcement. An empty field_conditions implies that any value assigned to this field will provoke required field enforcement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldConditions")]
		public string[] FieldConditions { get; set; }
		
		/// <summary>
		/// The fields that are required as a consequence of the field conditions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredFields")]
		public string[] RequiredFields { get; set; }
	}
	
	/// <summary>
	/// Provides special notice messages related to a particular value in a field that is part of a PolicySchema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1PolicySchemaNoticeDescription
	{
		
		/// <summary>
		/// Output only. Whether the user needs to acknowledge the notice message before the value can be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acknowledgementRequired")]
		public System.Nullable<System.Boolean> AcknowledgementRequired { get; set; }
		
		/// <summary>
		/// Output only. The field name associated with the notice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// Output only. The notice message associate with the value of the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noticeMessage")]
		public string NoticeMessage { get; set; }
		
		/// <summary>
		/// Output only. The value of the field that has a notice. When setting the field to this value, the user may be required to acknowledge the notice message in order for the value to be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noticeValue")]
		public string NoticeValue { get; set; }
	}
	
	/// <summary>
	/// Lifecycle information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1PolicyApiLifecycle
	{
		
		/// <summary>
		/// In the event that this policy was deprecated in favor of another policy, the fully qualified namespace(s) of the new policies as they will show in PolicyAPI. Could only be set if policy_api_lifecycle_stage is API_DEPRECATED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecatedInFavorOf")]
		public string[] DeprecatedInFavorOf { get; set; }
		
		/// <summary>
		/// Description about current life cycle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endSupport")]
		public GoogleTypeDate EndSupport { get; set; }
		
		/// <summary>
		/// Indicates current life cycle stage of the policy API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyApiLifecycleStage")]
		public System.Nullable<GoogleChromePolicyVersionsV1PolicyApiLifecyclePolicyApiLifecycleStage> PolicyApiLifecycleStage { get; set; }
		
		/// <summary>
		/// Corresponding to deprecated_in_favor_of, the fully qualified namespace(s) of the old policies that will be deprecated because of introduction of this policy. This field should not be manually set but will be set and exposed through PolicyAPI automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledToDeprecatePolicies")]
		public string[] ScheduledToDeprecatePolicies { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleTypeDate
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleChromePolicyVersionsV1PolicyApiLifecyclePolicyApiLifecycleStage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_PREVIEW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_DEVELOPMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_CURRENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API_DEPRECATED = 4,
	}
	
	/// <summary>
	/// Error information for a modification request of a specific policy on a specific target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1PolicyModificationError
	{
		
		/// <summary>
		/// Output only. The non-field errors related to the modification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public string[] Errors { get; set; }
		
		/// <summary>
		/// Output only. The error messages related to the modification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldErrors")]
		public GoogleChromePolicyVersionsV1PolicyModificationFieldError[] FieldErrors { get; set; }
		
		/// <summary>
		/// Output only. The specific policy schema modification that had an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policySchema")]
		public string PolicySchema { get; set; }
		
		/// <summary>
		/// The key used to identify the target on which the policy will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyTargetKey")]
		public GoogleChromePolicyVersionsV1PolicyTargetKey PolicyTargetKey { get; set; }
	}
	
	/// <summary>
	/// Error information for a modification request of a specific field on a specific policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1PolicyModificationFieldError
	{
		
		/// <summary>
		/// Output only. The error message related to the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// Output only. The name of the field with the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
	}
	
	/// <summary>
	/// Details of the errors encountered during a policy modification request. This message will be returned as part of the details of a google.rpc.Status returned to the user when there is an error in their request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1PolicyModificationErrorDetails
	{
		
		/// <summary>
		/// Output only. List of specific policy modifications errors that may have occurred during a modifying request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modificationErrors")]
		public GoogleChromePolicyVersionsV1PolicyModificationError[] ModificationErrors { get; set; }
	}
	
	/// <summary>
	/// Details of the errors encountered during a remove certificate request. This message will be returned as part of the details of a google.rpc.Status returned to the user when there is an error in their request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1RemoveCertificateErrorDetails
	{
		
		/// <summary>
		/// Output only. If the certificate was not removed, a list of references to the certificate that prevented it from being removed. Only unreferenced certificates can be removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateReferences")]
		public GoogleChromePolicyVersionsV1CertificateReference[] CertificateReferences { get; set; }
	}
	
	/// <summary>
	/// Request object for removing a certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1RemoveCertificateRequest
	{
		
		/// <summary>
		/// Required. The GUID of the certificate to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkId")]
		public string NetworkId { get; set; }
		
		/// <summary>
		/// Required. The target resource on which this certificate will be removed. The following resources are supported: * Organizational Unit ("orgunits/{orgunit_id}")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResource")]
		public string TargetResource { get; set; }
	}
	
	/// <summary>
	/// Response object for removing a certificate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1RemoveCertificateResponse
	{
	}
	
	/// <summary>
	/// Request object for removing a network
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1RemoveNetworkRequest
	{
		
		/// <summary>
		/// Required. The GUID of the network to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkId")]
		public string NetworkId { get; set; }
		
		/// <summary>
		/// Required. The target resource on which this network will be removed. The following resources are supported: * Organizational Unit ("orgunits/{orgunit_id}")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResource")]
		public string TargetResource { get; set; }
	}
	
	/// <summary>
	/// Response object for removing a network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1RemoveNetworkResponse
	{
	}
	
	/// <summary>
	/// Request message for getting the resolved policy value for a specific target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1ResolveRequest
	{
		
		/// <summary>
		/// The maximum number of policies to return, defaults to 100 and has a maximum of 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// The page token used to retrieve a specific page of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// Required. The schema filter to apply to the resolve request. Specify a schema name to view a particular schema, for example: chrome.users.ShowLogoutButton Wildcards are supported, but only in the leaf portion of the schema name. Wildcards cannot be used in namespace directly. Please read https://developers.google.com/chrome/policy/guides/policy-schemas for details on schema namespaces. For example: Valid: "chrome.users.*", "chrome.users.apps.*", "chrome.printers.*" Invalid: "*", "*.users", "chrome.*", "chrome.*.apps.*"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policySchemaFilter")]
		public string PolicySchemaFilter { get; set; }
		
		/// <summary>
		/// The key used to identify the target on which the policy will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyTargetKey")]
		public GoogleChromePolicyVersionsV1PolicyTargetKey PolicyTargetKey { get; set; }
	}
	
	/// <summary>
	/// Response message for getting the resolved policy value for a specific target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1ResolveResponse
	{
		
		/// <summary>
		/// The page token used to get the next set of resolved policies found by the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of resolved policies found by the resolve request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedPolicies")]
		public GoogleChromePolicyVersionsV1ResolvedPolicy[] ResolvedPolicies { get; set; }
	}
	
	/// <summary>
	/// The resolved value of a policy for a given target.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1ResolvedPolicy
	{
		
		/// <summary>
		/// The key used to identify the target on which the policy will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addedSourceKey")]
		public GoogleChromePolicyVersionsV1PolicyTargetKey AddedSourceKey { get; set; }
		
		/// <summary>
		/// The key used to identify the target on which the policy will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceKey")]
		public GoogleChromePolicyVersionsV1PolicyTargetKey SourceKey { get; set; }
		
		/// <summary>
		/// The key used to identify the target on which the policy will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetKey")]
		public GoogleChromePolicyVersionsV1PolicyTargetKey TargetKey { get; set; }
		
		/// <summary>
		/// A particular value for a policy managed by the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GoogleChromePolicyVersionsV1PolicyValue Value { get; set; }
	}
	
	/// <summary>
	/// Request message for updating the group priority ordering of an app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest
	{
		
		/// <summary>
		/// Required. The group IDs, in desired priority ordering.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupIds")]
		public string[] GroupIds { get; set; }
		
		/// <summary>
		/// The namespace of the policy type for the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyNamespace")]
		public string PolicyNamespace { get; set; }
		
		/// <summary>
		/// The schema name of the policy for the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policySchema")]
		public string PolicySchema { get; set; }
		
		/// <summary>
		/// The key used to identify the target on which the policy will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyTargetKey")]
		public GoogleChromePolicyVersionsV1PolicyTargetKey PolicyTargetKey { get; set; }
	}
	
	/// <summary>
	/// Request message for uploading a file for a policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1UploadPolicyFileRequest
	{
		
		/// <summary>
		/// Required. The fully qualified policy schema and field name this file is uploaded for. This information will be used to validate the content type of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyField")]
		public string PolicyField { get; set; }
	}
	
	/// <summary>
	/// Response message for downloading an uploaded file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleChromePolicyVersionsV1UploadPolicyFileResponse
	{
		
		/// <summary>
		/// The uri for end user to download the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadUri")]
		public string DownloadUri { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleProtobufEmpty
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete multiple policy values that are applied to a specific group. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
		/// Chromepolicy_customers_policies_groups_batchDelete v1/{customer}/policies/groups:batchDelete
		/// </summary>
		/// <param name="customer">ID of the Google Workspace account or literal "my_customer" for the customer associated to the request.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Chromepolicy_customers_policies_groups_batchDeleteAsync(string customer, GoogleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/policies/groups:batchDelete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleProtobufEmpty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify multiple policy values that are applied to a specific group. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
		/// Chromepolicy_customers_policies_groups_batchModify v1/{customer}/policies/groups:batchModify
		/// </summary>
		/// <param name="customer">ID of the Google Workspace account or literal "my_customer" for the customer associated to the request.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Chromepolicy_customers_policies_groups_batchModifyAsync(string customer, GoogleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/policies/groups:batchModify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleProtobufEmpty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a group priority ordering for an app. The target app must be supplied in `additionalTargetKeyNames` in the PolicyTargetKey. On failure the request will return the error details as part of the google.rpc.Status.
		/// Chromepolicy_customers_policies_groups_listGroupPriorityOrdering v1/{customer}/policies/groups:listGroupPriorityOrdering
		/// </summary>
		/// <param name="customer">Required. ID of the Google Workspace account or literal "my_customer" for the customer associated to the request.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse> Chromepolicy_customers_policies_groups_listGroupPriorityOrderingAsync(string customer, GoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/policies/groups:listGroupPriorityOrdering";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a group priority ordering for an app. The target app must be supplied in `additionalTargetKeyNames` in the PolicyTargetKey. On failure the request will return the error details as part of the google.rpc.Status.
		/// Chromepolicy_customers_policies_groups_updateGroupPriorityOrdering v1/{customer}/policies/groups:updateGroupPriorityOrdering
		/// </summary>
		/// <param name="customer">Required. ID of the Google Workspace account or literal "my_customer" for the customer associated to the request.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Chromepolicy_customers_policies_groups_updateGroupPriorityOrderingAsync(string customer, GoogleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/policies/groups:updateGroupPriorityOrdering";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleProtobufEmpty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a certificate at a specified OU for a customer.
		/// Chromepolicy_customers_policies_networks_defineCertificate v1/{customer}/policies/networks:defineCertificate
		/// </summary>
		/// <param name="customer">Required. The customer for which the certificate will apply.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromePolicyVersionsV1DefineCertificateResponse> Chromepolicy_customers_policies_networks_defineCertificateAsync(string customer, GoogleChromePolicyVersionsV1DefineCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/policies/networks:defineCertificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromePolicyVersionsV1DefineCertificateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Define a new network.
		/// Chromepolicy_customers_policies_networks_defineNetwork v1/{customer}/policies/networks:defineNetwork
		/// </summary>
		/// <param name="customer">Required. The customer who will own this new network.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromePolicyVersionsV1DefineNetworkResponse> Chromepolicy_customers_policies_networks_defineNetworkAsync(string customer, GoogleChromePolicyVersionsV1DefineNetworkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/policies/networks:defineNetwork";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromePolicyVersionsV1DefineNetworkResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove an existing certificate by guid.
		/// Chromepolicy_customers_policies_networks_removeCertificate v1/{customer}/policies/networks:removeCertificate
		/// </summary>
		/// <param name="customer">Required. The customer whose certificate will be removed.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromePolicyVersionsV1RemoveCertificateResponse> Chromepolicy_customers_policies_networks_removeCertificateAsync(string customer, GoogleChromePolicyVersionsV1RemoveCertificateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/policies/networks:removeCertificate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromePolicyVersionsV1RemoveCertificateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove an existing network by guid.
		/// Chromepolicy_customers_policies_networks_removeNetwork v1/{customer}/policies/networks:removeNetwork
		/// </summary>
		/// <param name="customer">Required. The customer whose network will be removed.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromePolicyVersionsV1RemoveNetworkResponse> Chromepolicy_customers_policies_networks_removeNetworkAsync(string customer, GoogleChromePolicyVersionsV1RemoveNetworkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/policies/networks:removeNetwork";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromePolicyVersionsV1RemoveNetworkResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify multiple policy values that are applied to a specific org unit so that they now inherit the value from a parent (if applicable). All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
		/// Chromepolicy_customers_policies_orgunits_batchInherit v1/{customer}/policies/orgunits:batchInherit
		/// </summary>
		/// <param name="customer">ID of the G Suite account or literal "my_customer" for the customer associated to the request.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Chromepolicy_customers_policies_orgunits_batchInheritAsync(string customer, GoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/policies/orgunits:batchInherit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleProtobufEmpty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify multiple policy values that are applied to a specific org unit. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.
		/// Chromepolicy_customers_policies_orgunits_batchModify v1/{customer}/policies/orgunits:batchModify
		/// </summary>
		/// <param name="customer">ID of the G Suite account or literal "my_customer" for the customer associated to the request.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Chromepolicy_customers_policies_orgunits_batchModifyAsync(string customer, GoogleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/policies/orgunits:batchModify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleProtobufEmpty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the resolved policy values for a list of policies that match a search query.
		/// Chromepolicy_customers_policies_resolve v1/{customer}/policies:resolve
		/// </summary>
		/// <param name="customer">ID of the G Suite account or literal "my_customer" for the customer associated to the request.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromePolicyVersionsV1ResolveResponse> Chromepolicy_customers_policies_resolveAsync(string customer, GoogleChromePolicyVersionsV1ResolveRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (customer==null? "" : System.Uri.EscapeDataString(customer))+"/policies:resolve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromePolicyVersionsV1ResolveResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific policy schema for a customer by its resource name.
		/// Chromepolicy_customers_policySchemas_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The policy schema resource name to query.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromePolicyVersionsV1PolicySchema> Chromepolicy_customers_policySchemas_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromePolicyVersionsV1PolicySchema>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of policy schemas that match a specified filter value for a given customer.
		/// Chromepolicy_customers_policySchemas_list v1/{parent}/policySchemas
		/// </summary>
		/// <param name="parent">Required. The customer for which the listing request will apply.</param>
		/// <param name="filter">The schema filter used to find a particular schema based on fields like its resource name, description and `additionalTargetKeyNames`.</param>
		/// <param name="pageSize">The maximum number of policy schemas to return, defaults to 100 and has a maximum of 1000.</param>
		/// <param name="pageToken">The page token used to retrieve a specific page of the listing request.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleChromePolicyVersionsV1ListPolicySchemasResponse> Chromepolicy_customers_policySchemas_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/policySchemas&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleChromePolicyVersionsV1ListPolicySchemasResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
