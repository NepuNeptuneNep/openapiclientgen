//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="access_mask")]
		public string Access_mask { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="agent_range")]
		public string Agent_range { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AgentState
	{
		
		[System.Runtime.Serialization.DataMember(Name="agentNum")]
		public System.Nullable<System.Int32> AgentNum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<System.Int32> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigCOAP
	{
		
		[System.Runtime.Serialization.DataMember(Name="keystore")]
		public string Keystore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_port")]
		public System.Nullable<System.Int32> Primary_port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public string Rule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secure_port")]
		public System.Nullable<System.Int32> Secure_port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigDHCP
	{
		
		[System.Runtime.Serialization.DataMember(Name="add_options")]
		public string Add_options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classid")]
		public string Classid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hwaddr")]
		public string Hwaddr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigIPMI
	{
		
		[System.Runtime.Serialization.DataMember(Name="primary_port")]
		public System.Nullable<System.Int32> Primary_port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secure_port")]
		public System.Nullable<System.Int32> Secure_port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigMQTT
	{
		
		[System.Runtime.Serialization.DataMember(Name="broker")]
		public string Broker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientid")]
		public string Clientid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_tls")]
		public string Is_tls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tls_conf_filename")]
		public string Tls_conf_filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigNETFLOW
	{
		
		[System.Runtime.Serialization.DataMember(Name="bundleflowsets")]
		public System.Nullable<System.Int32> Bundleflowsets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collector")]
		public string Collector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collectorport")]
		public System.Nullable<System.Int32> Collectorport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigPROXY
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TCP_NODELAY { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client_to_server")]
		public string Client_to_server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disconnect_delay")]
		public System.Nullable<System.Int32> Disconnect_delay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="max_connects")]
		public System.Nullable<System.Int32> Max_connects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="portno")]
		public System.Nullable<System.Int32> Portno { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pre_connect")]
		public string Pre_connect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="server_to_client")]
		public string Server_to_client { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transport")]
		public string Transport { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigSFLOW
	{
		
		[System.Runtime.Serialization.DataMember(Name="collector")]
		public string Collector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collectorport")]
		public System.Nullable<System.Int32> Collectorport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encoding_type")]
		public string Encoding_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flows_per_min")]
		public System.Nullable<System.Int32> Flows_per_min { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="include_samples")]
		public string Include_samples { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="records_per_sample")]
		public string Records_per_sample { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="samples_per_datagram")]
		public string Samples_per_datagram { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigSNMPTCP
	{
		
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public System.Nullable<System.Int32> Connections { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigSNMPv3
	{
		
		[System.Runtime.Serialization.DataMember(Name="context_engine_id")]
		public string Context_engine_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="engine_id")]
		public string Engine_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usm_db")]
		public string Usm_db { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vacm_db")]
		public string Vacm_db { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigSSH
	{
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigSYSLOG
	{
		
		[System.Runtime.Serialization.DataMember(Name="client")]
		public string Client { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localport")]
		public System.Nullable<System.Int32> Localport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="separator")]
		public string Separator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sequence")]
		public System.Nullable<System.Int32> Sequence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverport")]
		public System.Nullable<System.Int32> Serverport { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigTELNET
	{
		
		[System.Runtime.Serialization.DataMember(Name="keymap")]
		public string Keymap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paging_prompt")]
		public string Paging_prompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prompt")]
		public string Prompt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public string Rule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userdb")]
		public string Userdb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigTFTP
	{
		
		[System.Runtime.Serialization.DataMember(Name="cache")]
		public System.Nullable<System.Int32> Cache { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="client")]
		public string Client { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dstfile")]
		public string Dstfile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retries")]
		public System.Nullable<System.Int32> Retries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="srcfile")]
		public string Srcfile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public System.Nullable<System.Int32> Timeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trace")]
		public string Trace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigTOD
	{
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retries")]
		public System.Nullable<System.Int32> Retries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public System.Nullable<System.Int32> Timeout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigWEB
	{
		
		[System.Runtime.Serialization.DataMember(Name="is_persistent_connections")]
		public System.Nullable<System.Int32> Is_persistent_connections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public string Rule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wsdl")]
		public string Wsdl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IPAlias
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IP { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interface")]
		public string Interface { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mask")]
		public string Mask { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IPSource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IP { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SyslogMsg
	{
		
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="separator")]
		public string Separator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sequence")]
		public string Sequence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TelnetUser
	{
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasPassword")]
		public System.Nullable<System.Int32> HasPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimerScript
	{
		
		[System.Runtime.Serialization.DataMember(Name="arg")]
		public string Arg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrapDest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string IP { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Triplet
	{
		
		[System.Runtime.Serialization.DataMember(Name="device")]
		public string Device { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mib")]
		public string Mib { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scenario")]
		public System.Nullable<System.Int32> Scenario { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Adds/Overwrites the user entry in the access control database.
		/// Adds/Overwrites the user entry in the access control database.
		/// Access_add mimic/access/add/{user}/{agents}/{mask}
		/// </summary>
		/// <param name="user">Username of the simulator hosting system</param>
		/// <param name="agents">Agent range in minimal range representation</param>
		/// <param name="mask">Currently not used</param>
		/// <returns>successful operation</returns>
		public async Task<string> Access_addAsync(string user, string agents, string mask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/access/add/"+ (user==null? "" : System.Uri.EscapeDataString(user))+"/"+ (agents==null? "" : System.Uri.EscapeDataString(agents))+"/"+ (mask==null? "" : System.Uri.EscapeDataString(mask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clears a users entry from access control database.
		/// Using '*' for user clears all the users.
		/// Access_del mimic/access/del/{user}
		/// </summary>
		/// <param name="user">username of the simulator hosting system</param>
		/// <returns>successful operation</returns>
		public async Task<string> Access_delAsync(string user, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/access/del/"+ (user==null? "" : System.Uri.EscapeDataString(user));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the current access control database in use.
		/// If nothing is specified then this returns "".
		/// Access_get_acldb mimic/access/get/acldb
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> Access_get_acldbAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/access/get/acldb";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the current admin directory.
		/// If nothing is specified in admin/settings.cfg then returns "". If no admin directory is specified then the shared area will be used where needed (e.g. for persistent info, access control data files etc. )
		/// Access_get_admindir mimic/access/get/admindir
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> Access_get_admindirAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/access/get/admindir";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the current administrator.
		/// If nothing is specified in admin/settings.cfg then returns "".
		/// Access_get_adminuser mimic/access/get/adminuser
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> Access_get_adminuserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/access/get/adminuser";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the state of access control checking.
		/// 0 indicates that it is disabled, 1 indicates it is enabled.
		/// Access_get_enabled mimic/access/get/enabled
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> Access_get_enabledAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/access/get/enabled";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an array of entries.
		/// Each entry consists of user, agents (in minimal range representation) and access mask (not used currently).
		/// Access_list mimic/access/list
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AccessEntry[]> Access_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/access/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessEntry[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Loads the specified file for access control data.
		/// If filename is not specified then the currently set 'acldb' parameter is used.
		/// Access_load mimic/access/load/{filename}
		/// </summary>
		/// <param name="filename">Filename to load</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Access_loadAsync(string filename, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/access/load/"+ (filename==null? "" : System.Uri.EscapeDataString(filename));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Saves current access control data in specified file.
		/// If filename is not specified then the currently set 'acldb' parameter is used.
		/// Access_save mimic/access/save/{filename}
		/// </summary>
		/// <param name="filename">Filename to save</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Access_saveAsync(string filename, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/access/save/"+ (filename==null? "" : System.Uri.EscapeDataString(filename));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows setting the name of the current access control database.
		/// This will be used for subsequent load and save operations.
		/// Access_set_acldb mimic/access/set/acldb/{databaseName}
		/// </summary>
		/// <param name="databaseName">Database name to use</param>
		/// <returns>successful operation</returns>
		public async Task<string> Access_set_acldbAsync(string databaseName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/access/set/acldb/"+ (databaseName==null? "" : System.Uri.EscapeDataString(databaseName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows the user to enable/disable the access control check.
		/// 0 indicates disabled, 1 indicates enabled.
		/// Access_set_enabled mimic/access/set/enabled/{enabledOrNot}
		/// </summary>
		/// <param name="enabledOrNot">indicator</param>
		/// <returns>successful operation</returns>
		public async Task<string> Access_set_enabledAsync(string enabledOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/access/set/enabled/"+ (enabledOrNot==null? "" : System.Uri.EscapeDataString(enabledOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an agent.
		/// Add an agent.
		/// New mimic/agent/{agentNum}/add/{IP}
		/// </summary>
		/// <param name="agentNum">Agent to return the primary IP</param>
		/// <param name="IP">Primary IP</param>
		/// <param name="requestBody">Created agent object</param>
		/// <returns>successful operation</returns>
		public async Task<string> NewAsync(int agentNum, string IP, Triplet[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/add/"+ (IP==null? "" : System.Uri.EscapeDataString(IP));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a source address that the agent will accept messages from.
		/// An empty ipaddress or 0.0.0.0 both imply any address. Similarly an empty port or 0 both imply any port. For agents with source-address-indexing enabled, messages which do not match any source address will be discarded with an ERROR message, similar to community string mismatches.
		/// From_add mimic/agent/{agentNum}/from/add/{IP}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to add the IP source</param>
		/// <param name="IP">IP of the port, 0.0.0.0 for any</param>
		/// <param name="port">port of the source, 0 for any</param>
		/// <returns>successful operation</returns>
		public async Task<string> From_addAsync(int agentNum, string IP, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/from/add/"+ (IP==null? "" : System.Uri.EscapeDataString(IP))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// delete a source address that the agent will accept messages from.
		/// An empty ipaddress or 0.0.0.0 both imply any address. Similarly an empty port or 0 both imply any port. For agents with source-address-indexing enabled, messages which do not match any source address will be discarded with an ERROR message, similar to community string mismatches.
		/// From_del mimic/agent/{agentNum}/from/delete/{IP}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to delete the IP source</param>
		/// <param name="IP">IP of the source</param>
		/// <param name="port">port of the source</param>
		/// <returns>successful operation</returns>
		public async Task<string> From_delAsync(int agentNum, string IP, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/from/delete/"+ (IP==null? "" : System.Uri.EscapeDataString(IP))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the source addresses that the agent will accept messages from.
		/// This in effect implements source-address-indexing, where 2 agents with the same address can be configured, each accepting messages from different management stations.
		/// From_list mimic/agent/{agentNum}/from/list
		/// </summary>
		/// <param name="agentNum">Agent to show the IP sources</param>
		/// <returns>successful operation</returns>
		public async Task<IPSource[]> From_listAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/from/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IPSource[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// has the agent value space changed?
		/// has the agent value space changed?
		/// Get_changed mimic/agent/{agentNum}/get/changed
		/// </summary>
		/// <param name="agentNum">Agent to return the indicator</param>
		/// <returns>successful operation</returns>
		public async Task<int> Get_changedAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/changed";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// has the lab configuration changed?
		/// has the lab configuration changed?
		/// Get_config_changed mimic/agent/{agentNum}/get/config_changed
		/// </summary>
		/// <param name="agentNum">Agent to return the indicator</param>
		/// <returns>successful operation</returns>
		public async Task<int> Get_config_changedAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/config_changed";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// one-way transit delay in msec.
		/// The minimum granularity is 10 msec.
		/// Get_delay mimic/agent/{agentNum}/get/delay
		/// </summary>
		/// <param name="agentNum">Agent to return the delay time</param>
		/// <returns>successful operation</returns>
		public async Task<int> Get_delayAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/delay";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// drop rate (every N-th PDU). 0 means no drops.
		/// drop rate (every N-th PDU). 0 means no drops.
		/// Get_drops mimic/agent/{agentNum}/get/drops
		/// </summary>
		/// <param name="agentNum">Agent to return the drop rate</param>
		/// <returns>successful operation</returns>
		public async Task<int> Get_dropsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/drops";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// host address of the agent.
		/// Currently, only IPv4 addresses are allowed as the main address of the agent, but both IPv4 and IPv6 addresses are allowed as IP aliases for the agent.
		/// Get_host mimic/agent/{agentNum}/get/host
		/// </summary>
		/// <param name="agentNum">Agent to return the primary IP</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_hostAsync(string agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+ (agentNum==null? "" : System.Uri.EscapeDataString(agentNum))+"/get/host";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// timeout in seconds for retransmitting INFORM PDUs.
		/// The agent will retransmit INFORM PDUs at this interval until it has received a reply from the manager.
		/// Get_inform_timeout mimic/agent/{agentNum}/get/inform_timeout
		/// </summary>
		/// <param name="agentNum">Agent to return the timeout setting</param>
		/// <returns>successful operation</returns>
		public async Task<int> Get_inform_timeoutAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/inform_timeout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// network interface card for the agent.
		/// network interface card for the agent.
		/// Get_interface mimic/agent/{agentNum}/get/interface
		/// </summary>
		/// <param name="agentNum">Agent to return the primary interface</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_interfaceAsync(string agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+ (agentNum==null? "" : System.Uri.EscapeDataString(agentNum))+"/get/interface";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// subnet mask of the agent.
		/// subnet mask of the agent.
		/// Get_mask mimic/agent/{agentNum}/get/mask
		/// </summary>
		/// <param name="agentNum">Agent to return the primary interface</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_maskAsync(string agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+ (agentNum==null? "" : System.Uri.EscapeDataString(agentNum))+"/get/mask";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// set of MIBs, simulations and scenarios
		/// set of MIBs, simulations and scenarios
		/// Get_mibs mimic/agent/{agentNum}/get/mibs
		/// </summary>
		/// <param name="agentNum">Agent to return the MIB triplets</param>
		/// <returns>successful operation</returns>
		public async Task<Triplet[]> Get_mibsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/mibs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Triplet[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// number of starts for the agent.
		/// This count is incremented each time an agent starts. It affects the SNMPv3 EngineBoots parameter.
		/// Get_number_starts mimic/agent/{agentNum}/get/num_starts
		/// </summary>
		/// <param name="agentNum">Agent to return the count</param>
		/// <returns>successful operation</returns>
		public async Task<int> Get_number_startsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/num_starts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// MIB directory of the agent.
		/// MIB directory of the agent.
		/// Get_oiddir mimic/agent/{agentNum}/get/oiddir
		/// </summary>
		/// <param name="agentNum">Agent to return the directory path</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_oiddirAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/oiddir";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// owner of the agent.
		/// owner of the agent.
		/// Get_owner mimic/agent/{agentNum}/get/owner
		/// </summary>
		/// <param name="agentNum">Agent to return the owner</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_ownerAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/owner";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// maximum PDU size.
		/// The limit for this configurable is 65536.
		/// Get_pdusize mimic/agent/{agentNum}/get/pdusize
		/// </summary>
		/// <param name="agentNum">Agent to return the PDU size</param>
		/// <returns>successful operation</returns>
		public async Task<int> Get_pdusizeAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/pdusize";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// port number
		/// port number
		/// Get_port mimic/agent/{agentNum}/get/port
		/// </summary>
		/// <param name="agentNum">Agent to return the primary SNMP port</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_portAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/port";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// private directory of the agent.
		/// private directory of the agent.
		/// Get_privdir mimic/agent/{agentNum}/get/privdir
		/// </summary>
		/// <param name="agentNum">Agent to return the directory path</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_privdirAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/privdir";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// protocols supported by agent
		/// protocols supported by agent as an array of strings
		/// Get_protocols mimic/agent/{agentNum}/get/protocol
		/// </summary>
		/// <param name="agentNum">Agent to return the protocols arrary</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Get_protocolsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/protocol";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// read community string
		/// read community string
		/// Get_read_community mimic/agent/{agentNum}/get/read
		/// </summary>
		/// <param name="agentNum">Agent to return the SNMP read community string</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_read_communityAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/read";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// first scenario name
		/// first scenario name
		/// Get_scen mimic/agent/{agentNum}/get/scen
		/// </summary>
		/// <param name="agentNum">Agent to return the first scenario number</param>
		/// <returns>successful operation</returns>
		public async Task<int> Get_scenAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/scen";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// first simulation name
		/// first simulation name
		/// Get_sim mimic/agent/{agentNum}/get/sim
		/// </summary>
		/// <param name="agentNum">Agent to return the first simulation name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_simAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/sim";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// relative start time
		/// relative start time
		/// Get_starttime mimic/agent/{agentNum}/get/start
		/// </summary>
		/// <param name="agentNum">Agent to return the relative start time</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_starttimeAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// current running state of the agent
		/// 0-Unknown 1-Running 2-Stopped 3-Halted 4-Paused 5-Deleted 6-Stopping
		/// Get_agent_state mimic/agent/{agentNum}/get/state
		/// </summary>
		/// <param name="agentNum">Agent to return the state</param>
		/// <returns>successful operation</returns>
		public async Task<int> Get_agent_stateAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/state";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// has the agent state changed?
		/// has the agent state changed?
		/// Get_state_changed mimic/agent/{agentNum}/get/state_changed
		/// </summary>
		/// <param name="agentNum">Agent to return the indicator</param>
		/// <returns>successful operation</returns>
		public async Task<int> Get_state_changedAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/state_changed";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// current statistics of the agent instance
		/// The statistics are returned as 64-bit decimal numbers for the following statistics, total, discarded, error, GET, GETNEXT, SET, GETBULK, trap, GET variables, GETNEXT variables, SET variables, GETBULK variables, INFORM sent, INFORM re-sent, INFORM timed out, INFORM acked, INFORM REPORT
		/// Get_statistics mimic/agent/{agentNum}/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to return the statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SNMP PDU tracing
		/// SNMP PDU tracing
		/// Get_trace mimic/agent/{agentNum}/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to return the indicator</param>
		/// <returns>successful operation</returns>
		public async Task<int> Get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SNMP SET validation policy.
		/// Is a bitmask in which with the following bits (from LSB) check for type, length, range, access
		/// Get_validate mimic/agent/{agentNum}/get/validate
		/// </summary>
		/// <param name="agentNum">Agent to return the bitmask integer</param>
		/// <returns>successful operation</returns>
		public async Task<int> Get_validateAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/validate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// write community string
		/// write community string
		/// Get_write_community mimic/agent/{agentNum}/get/write
		/// </summary>
		/// <param name="agentNum">Agent to return the SNMP write community string</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_write_communityAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/get/write";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Halt the current agent.
		/// Halt the current agent.
		/// Halt mimic/agent/{agentNum}/halt
		/// </summary>
		/// <param name="agentNum">Agent to return the primary IP</param>
		/// <returns>successful operation</returns>
		public async Task<string> HaltAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/halt";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new ipalias for the agent.
		/// port defaults to 161 if not specified. mask defaults to the class-based network mask for the address. interface defaults to the default network interface.  If port is set to 0, the system will automatically select a port number. This is useful for client-mode protocols, such as TFTP or TOD. Upon start of an IP alias with a 0 (auto-assigned) port number, its port will change to contain the value of the selected system port.
		/// Add_ipalias mimic/agent/{agentNum}/ipalias/add/{IP}/{port}/{mask}/{interface}
		/// </summary>
		/// <param name="agentNum">Agent to add the IP alias</param>
		/// <param name="IP">IP address , IPv4 or IPv6</param>
		/// <param name="port">SNMP port , 0 or empty for default</param>
		/// <param name="mask">Netmask, empty for default</param>
		/// <param name="_interface">Interface. Empty for default</param>
		/// <returns>successful operation</returns>
		public async Task<string> Add_ipaliasAsync(int agentNum, string IP, int port, string mask, string _interface, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/ipalias/add/"+ (IP==null? "" : System.Uri.EscapeDataString(IP))+"/"+port+"/"+ (mask==null? "" : System.Uri.EscapeDataString(mask))+"/"+ (_interface==null? "" : System.Uri.EscapeDataString(_interface));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing ipalias from the agent.
		/// port defaults to 161 if not specified.
		/// Del_ipalias mimic/agent/{agentNum}/ipalias/delete/{IP}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to delete the IP alias</param>
		/// <param name="IP">IP address , IPv4 or IPv6</param>
		/// <param name="port">SNMP port , 0 or empty for default</param>
		/// <returns>successful operation</returns>
		public async Task<string> Del_ipaliasAsync(int agentNum, string IP, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/ipalias/delete/"+ (IP==null? "" : System.Uri.EscapeDataString(IP))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the additional ipaliases configured for the agent.
		/// The agent host address (set with mimic agent set host) is not in this list, since it is already accessible separately with mimic agent get host.
		/// List_ipaliases mimic/agent/{agentNum}/ipalias/list
		/// </summary>
		/// <param name="agentNum">Agent to show the IP alias list</param>
		/// <returns>successful operation</returns>
		public async Task<IPAlias[]> List_ipaliasesAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/ipalias/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IPAlias[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts an existing ipalias for the agent.
		/// port defaults to 161 if not specified.
		/// Start_ipalias mimic/agent/{agentNum}/ipalias/start/{IP}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to start the IP alias</param>
		/// <param name="IP">IP address , IPv4 or IPv6</param>
		/// <param name="port">SNMP port , 0 or empty for default</param>
		/// <returns>successful operation</returns>
		public async Task<string> Start_ipaliasAsync(int agentNum, string IP, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/ipalias/start/"+ (IP==null? "" : System.Uri.EscapeDataString(IP))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the status (0=down, 1=up) of an existing ipalias for the agent.
		/// port defaults to 161 if not specified.
		/// Status_ipalias mimic/agent/{agentNum}/ipalias/status/{IP}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to show status of the IP alias</param>
		/// <param name="IP">IP address , IPv4 or IPv6</param>
		/// <param name="port">SNMP port , 0 or empty for default</param>
		/// <returns>successful operation</returns>
		public async Task<string> Status_ipaliasAsync(int agentNum, string IP, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/ipalias/status/"+ (IP==null? "" : System.Uri.EscapeDataString(IP))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops an existing ipalias for the agent.
		/// port defaults to 161 if not specified.
		/// Stop_ipalias mimic/agent/{agentNum}/ipalias/stop/{IP}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to stop the IP alias</param>
		/// <param name="IP">IP address , IPv4 or IPv6</param>
		/// <param name="port">SNMP port , 0 or empty for default</param>
		/// <returns>successful operation</returns>
		public async Task<string> Stop_ipaliasAsync(int agentNum, string IP, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/ipalias/stop/"+ (IP==null? "" : System.Uri.EscapeDataString(IP))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Pause the current agent.
		/// Pause the current agent.
		/// Pause_now mimic/agent/{agentNum}/pause
		/// </summary>
		/// <param name="agentNum">Agent to return the primary IP</param>
		/// <returns>successful operation</returns>
		public async Task<string> Pause_nowAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/pause";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's COAP argument structure
		/// Agent's COAP configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_coap_get_args mimic/agent/{agentNum}/protocol/msg/coap/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the COAP argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_coap_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/coap/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's COAP configuration
		/// Agent's COAP configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_coap_get_config mimic/agent/{agentNum}/protocol/msg/coap/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the COAP configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigCOAP> Protocol_coap_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/coap/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigCOAP>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's COAP statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_coap_get_statistics mimic/agent/{agentNum}/protocol/msg/coap/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show COAP statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_coap_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/coap/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's COAP traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_coap_get_trace mimic/agent/{agentNum}/protocol/msg/coap/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether COAP tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigCOAP> Protocol_coap_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/coap/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigCOAP>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's COAP configuration
		/// Agent's COAP configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_coap_set_config mimic/agent/{agentNum}/protocol/msg/coap/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the COAP configuration</param>
		/// <param name="argument">Parameter to set the COAP configuration</param>
		/// <param name="value">Value to set the COAP configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_coap_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/coap/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's COAP traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_coap_set_trace mimic/agent/{agentNum}/protocol/msg/coap/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the COAP tracing</param>
		/// <param name="enableOrNot">Value to set the COAP tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_coap_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/coap/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's DHCP argument structure
		/// Agent's DHCP configuration particulars
		/// Protocol_dhcp_get_args mimic/agent/{agentNum}/protocol/msg/dhcp/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the DHCP argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_dhcp_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/dhcp/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's DHCP configuration
		/// Agent's DHCP configuration hwaddr,classid,add_options,script
		/// Protocol_dhcp_get_config mimic/agent/{agentNum}/protocol/msg/dhcp/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the DHCP configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigDHCP> Protocol_dhcp_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/dhcp/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigDHCP>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's DHCP statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_dhcp_get_statistics mimic/agent/{agentNum}/protocol/msg/dhcp/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show DHCP statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_dhcp_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/dhcp/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's DHCP traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_dhcp_get_trace mimic/agent/{agentNum}/protocol/msg/dhcp/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether DHCP tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigDHCP> Protocol_dhcp_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/dhcp/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigDHCP>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the parameters configured by the server in its DHCP-OFFER message
		/// DHCP-OFFER message parameters
		/// Protocol_dhcp_params mimic/agent/{agentNum}/protocol/msg/dhcp/params
		/// </summary>
		/// <param name="agentNum">Agent to show DHCP DHCP-OFFER message</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_dhcp_paramsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/dhcp/params";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's DHCP configuration
		/// Agent's DHCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_dhcp_set_config mimic/agent/{agentNum}/protocol/msg/dhcp/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the DHCP configuration</param>
		/// <param name="argument">Parameter to set the DHCP configuration</param>
		/// <param name="value">Value to set the DHCP configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_dhcp_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/dhcp/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's DHCP traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_dhcp_set_trace mimic/agent/{agentNum}/protocol/msg/dhcp/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the DHCP tracing</param>
		/// <param name="enableOrNot">Value to set the DHCP tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_dhcp_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/dhcp/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's IPMI argument structure
		/// Agent's IPMI configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_ipmi_get_args mimic/agent/{agentNum}/protocol/msg/ipmi/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the IPMI argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_ipmi_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ipmi/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's IPMI configuration
		/// Agent's IPMI configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_ipmi_get_config mimic/agent/{agentNum}/protocol/msg/ipmi/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the IPMI configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigIPMI> Protocol_ipmi_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ipmi/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigIPMI>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's IPMI statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_ipmi_get_statistics mimic/agent/{agentNum}/protocol/msg/ipmi/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show IPMI statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_ipmi_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ipmi/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's IPMI traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_ipmi_get_trace mimic/agent/{agentNum}/protocol/msg/ipmi/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether IPMI tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigIPMI> Protocol_ipmi_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ipmi/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigIPMI>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the outgoing message's attributes
		/// Attribute can be working_authtype ,session_id, outbound_seq, inbound_seq , field_N
		/// Protocol_ipmi_get_attr mimic/agent/{agentNum}/protocol/msg/ipmi/get/{attr}
		/// </summary>
		/// <param name="agentNum">Agent to set the IPMI tracing</param>
		/// <param name="attr">Attribute</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_ipmi_get_attrAsync(int agentNum, string attr, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ipmi/get/"+ (attr==null? "" : System.Uri.EscapeDataString(attr));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's IPMI configuration
		/// Agent's IPMI configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_ipmi_set_config mimic/agent/{agentNum}/protocol/msg/ipmi/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the IPMI configuration</param>
		/// <param name="argument">Parameter to set the IPMI configuration</param>
		/// <param name="value">Value to set the IPMI configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_ipmi_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ipmi/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's IPMI traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_ipmi_set_trace mimic/agent/{agentNum}/protocol/msg/ipmi/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the IPMI tracing</param>
		/// <param name="enableOrNot">Value to set the IPMI tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_ipmi_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ipmi/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the outgoing message's attributes
		/// Attribute can be working_authtype ,session_id, outbound_seq, inbound_seq , field_N
		/// Protocol_ipmi_set_attr mimic/agent/{agentNum}/protocol/msg/ipmi/set/{attr}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the IPMI tracing</param>
		/// <param name="attr">Attribute</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_ipmi_set_attrAsync(int agentNum, string attr, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ipmi/set/"+ (attr==null? "" : System.Uri.EscapeDataString(attr))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's MQTT TCP connection state
		/// 0 - stopped, 2 - disconnected, 3 - connecting, 4 - connected, 5 - waiting for CONNACK, 6 - waiting for SUBACK, 7 - CONNACK received, in steady state
		/// Protocol_mqtt_client_get_protstate mimic/agent/{agentNum}/protocol/msg/mqtt/client/get/protstate
		/// </summary>
		/// <param name="agentNum">Agent to show MQTT state</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_get_protstateAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/get/protstate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's MQTT state
		/// 0 means stopped, 1 means running
		/// Protocol_mqtt_client_get_state mimic/agent/{agentNum}/protocol/msg/mqtt/client/get/state
		/// </summary>
		/// <param name="agentNum">Agent to show MQTT state</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_get_stateAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/get/state";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's current messages' cardinality
		/// 0 or more
		/// Protocol_mqtt_client_message_card mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/card
		/// </summary>
		/// <param name="agentNum">Agent to show MQTT message state</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_message_cardAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/message/card";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's message attributes
		/// Attribute can be topic, interval, count, sent , pre, post, properties(list of PUBLISH properties), properties.i (i-th PUBLISH property), properties.PROP-NAME (PUBLISH property with name PROP-NAME)
		/// Protocol_mqtt_client_message_get mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/get/{msgNum}/{attr}
		/// </summary>
		/// <param name="agentNum">Agent to show MQTT state</param>
		/// <param name="msgNum">Message Number</param>
		/// <param name="attr">Attribute</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_mqtt_client_message_getAsync(int agentNum, int msgNum, string attr, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/message/get/"+msgNum+"/"+ (attr==null? "" : System.Uri.EscapeDataString(attr));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's message attributes
		/// Attribute can not be sent or properties . Use set/{msgNum}/count/{value} together with get/{msgNum}/count to throttle the outgoing MQTT message to the broker.
		/// Protocol_mqtt_client_message_set mimic/agent/{agentNum}/protocol/msg/mqtt/client/message/set/{msgNum}/{attr}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to show MQTT state</param>
		/// <param name="msgNum">Message Number</param>
		/// <param name="attr">Attribute</param>
		/// <param name="value">Value</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_mqtt_client_message_setAsync(int agentNum, int msgNum, string attr, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/message/set/"+msgNum+"/"+ (attr==null? "" : System.Uri.EscapeDataString(attr))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restart receiving messages from a subcription of the agent
		/// Restarts a subscription
		/// Protocol_mqtt_client_resubscribe mimic/agent/{agentNum}/protocol/msg/mqtt/client/resubscribe/{subNum}
		/// </summary>
		/// <param name="agentNum">Agent to change MQTT state</param>
		/// <param name="subNum">Subscription Number</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_mqtt_client_resubscribeAsync(int agentNum, int subNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/resubscribe/"+subNum;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Abort agent's MQTT TCP session without sending DISCONNECT command
		/// Abort a connection
		/// Protocol_mqtt_client_runtime_abort mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/abort
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT behavior</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_mqtt_client_runtime_abortAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/runtime/abort";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start agent's MQTT TCP session
		/// Start a connection
		/// Protocol_mqtt_client_runtime_connect mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/connect
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT behavior</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_mqtt_client_runtime_connectAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/runtime/connect";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disconnect agent's MQTT TCP session by sending DISCONNECT command
		/// Graceful disconnect
		/// Protocol_mqtt_client_runtime_disconnect mimic/agent/{agentNum}/protocol/msg/mqtt/client/runtime/disconnect
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT behavior</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_mqtt_client_runtime_disconnectAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/runtime/disconnect";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT TCP connection target broker
		/// Broker IP address
		/// Protocol_mqtt_client_set_broker mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/broker/{brokerAddr}
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT config</param>
		/// <param name="brokerAddr">Broker address</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_set_brokerAsync(int agentNum, string brokerAddr, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/set/broker/"+ (brokerAddr==null? "" : System.Uri.EscapeDataString(brokerAddr));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT session
		/// 1 for clean session , 0 not
		/// Protocol_mqtt_client_set_cleansession mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/cleansession/{cleanOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT config</param>
		/// <param name="cleanOrNot">Clean session</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_set_cleansessionAsync(int agentNum, int cleanOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/set/cleansession/"+cleanOrNot;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT client ID
		/// MQTT client ID
		/// Protocol_mqtt_client_set_clientid mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/clientid/{clientID}
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT config</param>
		/// <param name="clientID">Client ID</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_set_clientidAsync(int agentNum, string clientID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/set/clientid/"+ (clientID==null? "" : System.Uri.EscapeDataString(clientID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT TCP keepalive
		/// Keep alive the TCP connection
		/// Protocol_mqtt_client_set_keepalive mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/keepalive/{aliveTime}
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT config</param>
		/// <param name="aliveTime">period to send keepalive messages</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_set_keepaliveAsync(int agentNum, int aliveTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/set/keepalive/"+aliveTime;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT disconnection action
		/// Action to take when MQTT session is disconnected
		/// Protocol_mqtt_client_set_on_disconnect mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/on_disconnect/{action}
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT config</param>
		/// <param name="action">Action to take</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_set_on_disconnectAsync(int agentNum, string action, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/set/on_disconnect/"+ (action==null? "" : System.Uri.EscapeDataString(action));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT client password
		/// Client password
		/// Protocol_mqtt_client_set_password mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/password/{password}
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT config</param>
		/// <param name="password">Password</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_set_passwordAsync(int agentNum, string password, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/set/password/"+ (password==null? "" : System.Uri.EscapeDataString(password));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT TCP connection target port
		/// target TCP port
		/// Protocol_mqtt_client_set_port mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/port/{port}
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT config</param>
		/// <param name="port">TCP port</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_set_portAsync(int agentNum, string port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/set/port/"+ (port==null? "" : System.Uri.EscapeDataString(port));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT client username
		/// Client username
		/// Protocol_mqtt_client_set_username mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/username/{username}
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT config</param>
		/// <param name="username">User name</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_set_usernameAsync(int agentNum, string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/set/username/"+ (username==null? "" : System.Uri.EscapeDataString(username));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT client's will
		/// Will message
		/// Protocol_mqtt_client_set_willmsg mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willmsg/{msg}
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT config</param>
		/// <param name="msg">Will message</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_set_willmsgAsync(int agentNum, string msg, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/set/willmsg/"+ (msg==null? "" : System.Uri.EscapeDataString(msg));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT will message's QOS field
		/// QOS field
		/// Protocol_mqtt_client_set_willqos mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willqos/{qos}
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT config</param>
		/// <param name="qos">Quality of service field</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_set_willqosAsync(int agentNum, string qos, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/set/willqos/"+ (qos==null? "" : System.Uri.EscapeDataString(qos));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT retained will
		/// Retaining will
		/// Protocol_mqtt_client_set_willretain mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willretain/{retain}
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT config</param>
		/// <param name="retain">Retaining will</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_set_willretainAsync(int agentNum, string retain, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/set/willretain/"+ (retain==null? "" : System.Uri.EscapeDataString(retain));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT client will's topic
		/// Will topic for the will message
		/// Protocol_mqtt_client_set_willtopic mimic/agent/{agentNum}/protocol/msg/mqtt/client/set/willtopic/{topic}
		/// </summary>
		/// <param name="agentNum">Agent to set MQTT config</param>
		/// <param name="topic">topic</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_set_willtopicAsync(int agentNum, string topic, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/set/willtopic/"+ (topic==null? "" : System.Uri.EscapeDataString(topic));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's current subscriptions' cardinality
		/// 0 or more
		/// Protocol_mqtt_client_subscribe_card mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/card
		/// </summary>
		/// <param name="agentNum">Agent to show MQTT subscription state</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_client_subscribe_cardAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/subscribe/card";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's subscription attributes
		/// Attribute can be topic, properties(list of SUBSCRIBE properties), properties.i (i-th SUBSCRIBE property), properties.PROP-NAME (SUBSCRIBE property with name PROP-NAME)
		/// Protocol_mqtt_client_subscribe_get mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/get/{subNum}/{attr}
		/// </summary>
		/// <param name="agentNum">Agent to show MQTT state</param>
		/// <param name="subNum">Subscribe Number</param>
		/// <param name="attr">Attribute</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_mqtt_client_subscribe_getAsync(int agentNum, int subNum, string attr, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/subscribe/get/"+subNum+"/"+ (attr==null? "" : System.Uri.EscapeDataString(attr));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's subscribe attributes
		/// Attribute can not be properties .
		/// Protocol_mqtt_client_subscribe_set mimic/agent/{agentNum}/protocol/msg/mqtt/client/subscribe/set/{subNum}/{attr}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to show MQTT state</param>
		/// <param name="subNum">Subscribe Number</param>
		/// <param name="attr">Attribute</param>
		/// <param name="value">Value</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_mqtt_client_subscribe_setAsync(int agentNum, int subNum, string attr, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/subscribe/set/"+subNum+"/"+ (attr==null? "" : System.Uri.EscapeDataString(attr))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops receiving messages from a subcription of the agent
		/// Stops a subscription
		/// Protocol_mqtt_client_unsubscribe mimic/agent/{agentNum}/protocol/msg/mqtt/client/unsubscribe/{subNum}
		/// </summary>
		/// <param name="agentNum">Agent to change MQTT state</param>
		/// <param name="subNum">Subscription Number</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_mqtt_client_unsubscribeAsync(int agentNum, int subNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/client/unsubscribe/"+subNum;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's MQTT argument structure
		/// Agent's MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_mqtt_get_args mimic/agent/{agentNum}/protocol/msg/mqtt/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the MQTT argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_mqtt_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's MQTT configuration
		/// Agent's MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_mqtt_get_config mimic/agent/{agentNum}/protocol/msg/mqtt/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the MQTT configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigMQTT> Protocol_mqtt_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigMQTT>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's MQTT statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_mqtt_get_statistics mimic/agent/{agentNum}/protocol/msg/mqtt/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show MQTT statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_mqtt_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's MQTT traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_mqtt_get_trace mimic/agent/{agentNum}/protocol/msg/mqtt/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether MQTT tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigMQTT> Protocol_mqtt_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigMQTT>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT configuration
		/// Agent's MQTT configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_mqtt_set_config mimic/agent/{agentNum}/protocol/msg/mqtt/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the MQTT configuration</param>
		/// <param name="argument">Parameter to set the MQTT configuration</param>
		/// <param name="value">Value to set the MQTT configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_mqtt_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's MQTT traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_mqtt_set_trace mimic/agent/{agentNum}/protocol/msg/mqtt/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the MQTT tracing</param>
		/// <param name="enableOrNot">Value to set the MQTT tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_mqtt_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/mqtt/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change NETFLOW data export interval
		/// Interval in msec .
		/// Protocol_netflow_change_dfs mimic/agent/{agentNum}/protocol/msg/netflow/flow/change/dfs_interval/{interval}
		/// </summary>
		/// <param name="agentNum">Agent to set the NETFLOW</param>
		/// <param name="interval">NETFLOW export interval</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_netflow_change_dfsAsync(int agentNum, int interval, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/flow/change/dfs_interval/"+interval;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change NETFLOW template export interval
		/// Interval in msec .
		/// Protocol_netflow_change_tfs mimic/agent/{agentNum}/protocol/msg/netflow/flow/change/tfs_interval/{interval}
		/// </summary>
		/// <param name="agentNum">Agent to set the NETFLOW</param>
		/// <param name="interval">NETFLOW export interval</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_netflow_change_tfsAsync(int agentNum, int interval, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/flow/change/tfs_interval/"+interval;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change NETFLOW export attributes
		/// Change attributes
		/// Protocol_netflow_change_attr mimic/agent/{agentNum}/protocol/msg/netflow/flow/change/{flowset_uid}/{field_num}/{attr}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the NETFLOW</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_netflow_change_attrAsync(int agentNum, int flowset_uid, int field_num, string attr, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/flow/change/{flowset_uid}/{field_num}/"+ (attr==null? "" : System.Uri.EscapeDataString(attr))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show list of NETFLOW exports
		/// Show list of NETFLOW exports
		/// Protocol_netflow_list mimic/agent/{agentNum}/protocol/msg/netflow/flow/list
		/// </summary>
		/// <param name="agentNum">Agent to show NETFLOW statistics</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_netflow_listAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/flow/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's NETFLOW argument structure
		/// Agent's NETFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_netflow_get_args mimic/agent/{agentNum}/protocol/msg/netflow/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the NETFLOW argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_netflow_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's NETFLOW configuration
		/// Agent's NETFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_netflow_get_config mimic/agent/{agentNum}/protocol/msg/netflow/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the NETFLOW configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigNETFLOW> Protocol_netflow_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigNETFLOW>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's NETFLOW statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_netflow_get_statistics mimic/agent/{agentNum}/protocol/msg/netflow/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show NETFLOW statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_netflow_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's NETFLOW traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_netflow_get_trace mimic/agent/{agentNum}/protocol/msg/netflow/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether NETFLOW tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigNETFLOW> Protocol_netflow_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigNETFLOW>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Halt NETFLOW traffic
		/// Halt NETFLOW traffic
		/// Protocol_netflow_halt mimic/agent/{agentNum}/protocol/msg/netflow/halt
		/// </summary>
		/// <param name="agentNum">Agent to set the NETFLOW</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_netflow_haltAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/halt";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reload NETFLOW configuration before resuming traffic
		/// Reload NETFLOW configuration before resuming traffic
		/// Protocol_netflow_reload mimic/agent/{agentNum}/protocol/msg/netflow/reload
		/// </summary>
		/// <param name="agentNum">Agent to set the NETFLOW</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_netflow_reloadAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/reload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resuming traffic
		/// Resuming traffic
		/// Protocol_netflow_resume mimic/agent/{agentNum}/protocol/msg/netflow/resume
		/// </summary>
		/// <param name="agentNum">Agent to set the NETFLOW</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_netflow_resumeAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/resume";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Swap NETFLOW collector
		/// Allow changing collector without stopping agent
		/// Protocol_netflow_set_collector mimic/agent/{agentNum}/protocol/msg/netflow/set/collector/{collectorIP}
		/// </summary>
		/// <param name="agentNum">Agent to set the NETFLOW</param>
		/// <param name="collectorIP">file name to load config</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_netflow_set_collectorAsync(int agentNum, string collectorIP, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/set/collector/"+ (collectorIP==null? "" : System.Uri.EscapeDataString(collectorIP));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's NETFLOW configuration
		/// Agent's NETFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_netflow_set_config mimic/agent/{agentNum}/protocol/msg/netflow/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the NETFLOW configuration</param>
		/// <param name="argument">Parameter to set the NETFLOW configuration</param>
		/// <param name="value">Value to set the NETFLOW configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_netflow_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Swap NETFLOW configuration file
		/// Allow reloading the configuration file for an agent without stopping agent
		/// Protocol_netflow_set_fileName mimic/agent/{agentNum}/protocol/msg/netflow/set/filename/{fileName}
		/// </summary>
		/// <param name="agentNum">Agent to set the NETFLOW</param>
		/// <param name="fileName">file name to load config</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_netflow_set_fileNameAsync(int agentNum, string fileName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/set/filename/"+ (fileName==null? "" : System.Uri.EscapeDataString(fileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's NETFLOW traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_netflow_set_trace mimic/agent/{agentNum}/protocol/msg/netflow/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the NETFLOW tracing</param>
		/// <param name="enableOrNot">Value to set the NETFLOW tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_netflow_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/netflow/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's PROXY argument structure
		/// Agent's PROXY configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_proxy_get_args mimic/agent/{agentNum}/protocol/msg/proxy/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the PROXY argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_proxy_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/proxy/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's PROXY configuration
		/// Agent's PROXY configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_proxy_get_config mimic/agent/{agentNum}/protocol/msg/proxy/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the PROXY configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigPROXY> Protocol_proxy_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/proxy/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigPROXY>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's PROXY statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_proxy_get_statistics mimic/agent/{agentNum}/protocol/msg/proxy/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show PROXY statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_proxy_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/proxy/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's PROXY traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_proxy_get_trace mimic/agent/{agentNum}/protocol/msg/proxy/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether PROXY tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigPROXY> Protocol_proxy_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/proxy/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigPROXY>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add individual proxy target on the agent and the simulator host
		/// Additional proxy target
		/// Protocol_proxy_port_add mimic/agent/{agentNum}/protocol/msg/proxy/port/add/{port}/{target}/{targetPort}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate PROXY target</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_proxy_port_addAsync(int agentNum, int port, string target, int targetPort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/proxy/port/add/"+port+"/"+ (target==null? "" : System.Uri.EscapeDataString(target))+"/"+targetPort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check individual target
		/// Check individual target
		/// Protocol_proxy_port_isstarted mimic/agent/{agentNum}/protocol/msg/proxy/port/isStarted/{port}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate PROXY target</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_proxy_port_isstartedAsync(int agentNum, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/proxy/port/isStarted/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all proxy targets
		/// Protocol_proxy_port_list mimic/agent/{agentNum}/protocol/msg/proxy/port/list
		/// </summary>
		/// <param name="agentNum">Agent to manipulate PROXY target</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_proxy_port_listAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/proxy/port/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove individual proxy target on the agent and the simulator host
		/// Remove proxy target
		/// Protocol_proxy_port_remove mimic/agent/{agentNum}/protocol/msg/proxy/port/remove/{port}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate PROXY target</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_proxy_port_removeAsync(int agentNum, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/proxy/port/remove/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start additional target
		/// Start additional target
		/// Protocol_proxy_port_start mimic/agent/{agentNum}/protocol/msg/proxy/port/start/{port}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate PROXY target</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_proxy_port_startAsync(int agentNum, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/proxy/port/start/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop additional target
		/// Stop additional target
		/// Protocol_proxy_port_stop mimic/agent/{agentNum}/protocol/msg/proxy/port/stop/{port}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate PROXY target</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_proxy_port_stopAsync(int agentNum, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/proxy/port/stop/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's PROXY configuration
		/// Agent's PROXY configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_proxy_set_config mimic/agent/{agentNum}/protocol/msg/proxy/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the PROXY configuration</param>
		/// <param name="argument">Parameter to set the PROXY configuration</param>
		/// <param name="value">Value to set the PROXY configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_proxy_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/proxy/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's PROXY traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_proxy_set_trace mimic/agent/{agentNum}/protocol/msg/proxy/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the PROXY tracing</param>
		/// <param name="enableOrNot">Value to set the PROXY tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_proxy_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/proxy/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SFLOW argument structure
		/// Agent's SFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_sflow_get_args mimic/agent/{agentNum}/protocol/msg/sflow/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the SFLOW argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_sflow_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/sflow/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SFLOW configuration
		/// Agent's SFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_sflow_get_config mimic/agent/{agentNum}/protocol/msg/sflow/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the SFLOW configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigSFLOW> Protocol_sflow_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/sflow/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigSFLOW>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SFLOW statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_sflow_get_statistics mimic/agent/{agentNum}/protocol/msg/sflow/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show SFLOW statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_sflow_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/sflow/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SFLOW traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_sflow_get_trace mimic/agent/{agentNum}/protocol/msg/sflow/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether SFLOW tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigSFLOW> Protocol_sflow_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/sflow/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigSFLOW>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Halt SFLOW traffic
		/// Halt SFLOW traffic
		/// Protocol_sflow_halt mimic/agent/{agentNum}/protocol/msg/sflow/halt
		/// </summary>
		/// <param name="agentNum">Agent to set the SFLOW</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_sflow_haltAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/sflow/halt";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reload SFLOW configuration before resuming traffic
		/// Reload SFLOW configuration before resuming traffic
		/// Protocol_sflow_reload mimic/agent/{agentNum}/protocol/msg/sflow/reload
		/// </summary>
		/// <param name="agentNum">Agent to set the SFLOW</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_sflow_reloadAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/sflow/reload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resuming traffic
		/// Resuming traffic
		/// Protocol_sflow_resume mimic/agent/{agentNum}/protocol/msg/sflow/resume
		/// </summary>
		/// <param name="agentNum">Agent to set the SFLOW</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_sflow_resumeAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/sflow/resume";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's SFLOW configuration
		/// Agent's SFLOW configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_sflow_set_config mimic/agent/{agentNum}/protocol/msg/sflow/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the SFLOW configuration</param>
		/// <param name="argument">Parameter to set the SFLOW configuration</param>
		/// <param name="value">Value to set the SFLOW configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_sflow_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/sflow/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's SFLOW traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_sflow_set_trace mimic/agent/{agentNum}/protocol/msg/sflow/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the SFLOW tracing</param>
		/// <param name="enableOrNot">Value to set the SFLOW tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_sflow_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/sflow/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SNMPTCP argument structure
		/// Agent's SNMPTCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_snmptcp_get_args mimic/agent/{agentNum}/protocol/msg/snmptcp/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPTCP argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmptcp_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmptcp/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SNMPTCP configuration
		/// Agent's SNMPTCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_snmptcp_get_config mimic/agent/{agentNum}/protocol/msg/snmptcp/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPTCP configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigSNMPTCP> Protocol_snmptcp_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmptcp/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigSNMPTCP>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SNMPTCP statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_snmptcp_get_statistics mimic/agent/{agentNum}/protocol/msg/snmptcp/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show SNMPTCP statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_snmptcp_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmptcp/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SNMPTCP traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_snmptcp_get_trace mimic/agent/{agentNum}/protocol/msg/snmptcp/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether SNMPTCP tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigSNMPTCP> Protocol_snmptcp_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmptcp/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigSNMPTCP>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable individual IP aliases on the agent and the simulator host
		/// By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent
		/// Protocol_snmptcp_ipalias_disable mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/disable/{ipaddress}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate SNMPTCP IP alias</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmptcp_ipalias_disableAsync(int agentNum, string ipaddress, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmptcp/ipalias/disable/"+ (ipaddress==null? "" : System.Uri.EscapeDataString(ipaddress))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable individual IP aliases on the agent and the simulator host
		/// By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent
		/// Protocol_snmptcp_ipalias_enable mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/enable/{ipaddress}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate SNMPTCP IP alias</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmptcp_ipalias_enableAsync(int agentNum, string ipaddress, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmptcp/ipalias/enable/"+ (ipaddress==null? "" : System.Uri.EscapeDataString(ipaddress))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check individual IP aliases on the agent and the simulator host
		/// By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent
		/// Protocol_snmptcp_ipalias_isenabled mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/isenabled/{ipaddress}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate SNMPTCP IP alias</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmptcp_ipalias_isenabledAsync(int agentNum, string ipaddress, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmptcp/ipalias/isenabled/"+ (ipaddress==null? "" : System.Uri.EscapeDataString(ipaddress))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all IP aliases on the agent and the simulator host
		/// By default, the MIMIC SNMPTCP server listens on all the IP addresses (aliases) that are configured for an agent
		/// Protocol_snmptcp_ipalias_list mimic/agent/{agentNum}/protocol/msg/snmptcp/ipalias/list
		/// </summary>
		/// <param name="agentNum">Agent to manipulate SNMPTCP IP alias</param>
		/// <returns>successful operation</returns>
		public async Task<IPAlias[]> Protocol_snmptcp_ipalias_listAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmptcp/ipalias/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IPAlias[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's SNMPTCP configuration
		/// Agent's SNMPTCP configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_snmptcp_set_config mimic/agent/{agentNum}/protocol/msg/snmptcp/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the SNMPTCP configuration</param>
		/// <param name="argument">Parameter to set the SNMPTCP configuration</param>
		/// <param name="value">Value to set the SNMPTCP configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmptcp_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmptcp/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's SNMPTCP traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_snmptcp_set_trace mimic/agent/{agentNum}/protocol/msg/snmptcp/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the SNMPTCP tracing</param>
		/// <param name="enableOrNot">Value to set the SNMPTCP tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmptcp_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmptcp/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new access entry with the specified parameters.
		/// Adds a new access entry with the specified parameters.
		/// Protocol_snmpv3_access_add mimic/agent/{agentNum}/protocol/msg/snmpv3/access/add/{groupName}/{prefix}/{securityModel}/{securityLevel}/{contextMatch}/{readView}/{writeView}/{notifyView}
		/// </summary>
		/// <param name="agentNum">Agent to add the SNMPv3 access</param>
		/// <param name="groupName">SNMPv3 access name</param>
		/// <param name="prefix">SNMPv3 prefix</param>
		/// <param name="securityModel">SNMPv3 access security model</param>
		/// <param name="securityLevel">SNMPv3 access security level</param>
		/// <param name="contextMatch">SNMPv3 access context match</param>
		/// <param name="readView">SNMPv3 access read view</param>
		/// <param name="writeView">SNMPv3 access write view</param>
		/// <param name="notifyView">SNMPv3 access notify view</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_access_addAsync(int agentNum, string groupName, string prefix, string securityModel, string securityLevel, string contextMatch, string readView, string writeView, string notifyView, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/access/add/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"/"+ (prefix==null? "" : System.Uri.EscapeDataString(prefix))+"/"+ (securityModel==null? "" : System.Uri.EscapeDataString(securityModel))+"/"+ (securityLevel==null? "" : System.Uri.EscapeDataString(securityLevel))+"/"+ (contextMatch==null? "" : System.Uri.EscapeDataString(contextMatch))+"/"+ (readView==null? "" : System.Uri.EscapeDataString(readView))+"/"+ (writeView==null? "" : System.Uri.EscapeDataString(writeView))+"/"+ (notifyView==null? "" : System.Uri.EscapeDataString(notifyView));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clears all access entries.
		/// Clears all access entries.
		/// Protocol_snmpv3_access_clear mimic/agent/{agentNum}/protocol/msg/snmpv3/access/clear
		/// </summary>
		/// <param name="agentNum">Agent to add the SNMPv3 access</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_access_clearAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/access/clear";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified access entry.
		/// Deletes the specified access entry.
		/// Protocol_snmpv3_access_del mimic/agent/{agentNum}/protocol/msg/snmpv3/access/del/{accessName}
		/// </summary>
		/// <param name="agentNum">Agent to add the SNMPv3 access</param>
		/// <param name="accessName">SNMPv3 access name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_access_delAsync(int agentNum, string accessName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/access/del/"+ (accessName==null? "" : System.Uri.EscapeDataString(accessName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the current acccess entries as an array of strings.
		/// Returns the current acccess entries as an array of strings.
		/// Protocol_snmpv3_access_list mimic/agent/{agentNum}/protocol/msg/snmpv3/access/list
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_snmpv3_access_listAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/access/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the SNMPv3 configuration.
		/// Returns the SNMPv3 configuration.
		/// Protocol_snmpv3_get_config mimic/agent/{agentNum}/protocol/msg/snmpv3/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigSNMPv3> Protocol_snmpv3_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigSNMPv3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the contextEngineID for the agent instance.
		/// Retrieves the contextEngineID for the agent instance.
		/// Protocol_snmpv3_get_context_engineid mimic/agent/{agentNum}/protocol/msg/snmpv3/get/context_engineid
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 engine</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_get_context_engineidAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/get/context_engineid";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the number of times the agent has been restarted.
		/// Retrieves the number of times the agent has been restarted.
		/// Protocol_snmpv3_get_engineboots mimic/agent/{agentNum}/protocol/msg/snmpv3/get/engineboots
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 engine</param>
		/// <returns>successful operation</returns>
		public async Task<int> Protocol_snmpv3_get_enginebootsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/get/engineboots";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// For started agents, retrieves the current engineID in use by the snmpv3 module.
		/// For stopped agents, this operation is meaningless. If not explicitly set by the user then the autogenerated engineID is returned. The format of the engineID is in the familiar hex format, eg. \x01 23 45 67 89...
		/// Protocol_snmpv3_get_engineid mimic/agent/{agentNum}/protocol/msg/snmpv3/get/engineid
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_get_engineidAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/get/engineid";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the time in seconds for which the agent has been running.
		/// Retrieves the time in seconds for which the agent has been running.
		/// Protocol_snmpv3_get_enginetime mimic/agent/{agentNum}/protocol/msg/snmpv3/get/enginetime
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 engine</param>
		/// <returns>successful operation</returns>
		public async Task<int> Protocol_snmpv3_get_enginetimeAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/get/enginetime";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new group entry with the specified parameters.
		/// Adds a new group entry with the specified parameters.
		/// Protocol_snmpv3_group_add mimic/agent/{agentNum}/protocol/msg/snmpv3/group/add/{groupName}/{securityModel}/{securityName}
		/// </summary>
		/// <param name="agentNum">Agent to add the SNMPv3 group</param>
		/// <param name="groupName">SNMPv3 group name</param>
		/// <param name="securityModel">SNMPv3 group security model</param>
		/// <param name="securityName">SNMPv3 group security name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_group_addAsync(int agentNum, string groupName, string securityModel, string securityName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/group/add/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"/"+ (securityModel==null? "" : System.Uri.EscapeDataString(securityModel))+"/"+ (securityName==null? "" : System.Uri.EscapeDataString(securityName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clears all group entries.
		/// Clears all group entries.
		/// Protocol_snmpv3_group_clear mimic/agent/{agentNum}/protocol/msg/snmpv3/group/clear
		/// </summary>
		/// <param name="agentNum">Agent to add the SNMPv3 group</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_group_clearAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/group/clear";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified group entry.
		/// Deletes the specified group entry.
		/// Protocol_snmpv3_group_del mimic/agent/{agentNum}/protocol/msg/snmpv3/group/del/{groupName}
		/// </summary>
		/// <param name="agentNum">Agent to add the SNMPv3 group</param>
		/// <param name="groupName">SNMPv3 group name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_group_delAsync(int agentNum, string groupName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/group/del/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the current group entries as an array of strings.
		/// Returns the current group entries as an array of strings.
		/// Protocol_snmpv3_group_list mimic/agent/{agentNum}/protocol/msg/snmpv3/group/list
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_snmpv3_group_listAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/group/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes the SNMPv3 configuration.
		/// Changes the SNMPv3 configuration.
		/// Protocol_snmpv3_set_config mimic/agent/{agentNum}/protocol/msg/snmpv3/set/config/{parameter}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 configuration</param>
		/// <param name="parameter">SNMPv3 configuration parameter</param>
		/// <param name="value">SNMPv3 parameter value</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_set_configAsync(int agentNum, string parameter, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/set/config/"+ (parameter==null? "" : System.Uri.EscapeDataString(parameter))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new user entry with the specified parameters.
		/// Adds a new user entry with the specified parameters.
		/// Protocol_snmpv3_user_add mimic/agent/{agentNum}/protocol/msg/snmpv3/user/add/{userName}/{securityName}/{authProtocol}/{authKey}/{privProtocol}/{privKey}
		/// </summary>
		/// <param name="agentNum">Agent to add the SNMPv3 user</param>
		/// <param name="userName">SNMPv3 user name</param>
		/// <param name="securityName">SNMPv3 user security name</param>
		/// <param name="authProtocol">SNMPv3 user authentication protocol</param>
		/// <param name="authKey">SNMPv3 user authentication key</param>
		/// <param name="privProtocol">SNMPv3 user privacy encryption protocol</param>
		/// <param name="privKey">SNMPv3 user privacy encryption key</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_user_addAsync(int agentNum, string userName, string securityName, string authProtocol, string authKey, string privProtocol, string privKey, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/user/add/"+ (userName==null? "" : System.Uri.EscapeDataString(userName))+"/"+ (securityName==null? "" : System.Uri.EscapeDataString(securityName))+"/"+ (authProtocol==null? "" : System.Uri.EscapeDataString(authProtocol))+"/"+ (authKey==null? "" : System.Uri.EscapeDataString(authKey))+"/"+ (privProtocol==null? "" : System.Uri.EscapeDataString(privProtocol))+"/"+ (privKey==null? "" : System.Uri.EscapeDataString(privKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clears all user entries.
		/// Clears all user entries.
		/// Protocol_snmpv3_user_clear mimic/agent/{agentNum}/protocol/msg/snmpv3/user/clear
		/// </summary>
		/// <param name="agentNum">Agent to add the SNMPv3 user</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_user_clearAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/user/clear";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified user entry.
		/// Deletes the specified user entry.
		/// Protocol_snmpv3_user_del mimic/agent/{agentNum}/protocol/msg/snmpv3/user/del/{userName}
		/// </summary>
		/// <param name="agentNum">Agent to add the SNMPv3 user</param>
		/// <param name="userName">SNMPv3 user name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_user_delAsync(int agentNum, string userName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/user/del/"+ (userName==null? "" : System.Uri.EscapeDataString(userName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the current user entries as a Tcl list.
		/// Returns the current user entries as a Tcl list.
		/// Protocol_snmpv3_user_list mimic/agent/{agentNum}/protocol/msg/snmpv3/user/list
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_snmpv3_user_listAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/user/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Saves current user settings in the currently loaded USM config file.
		/// Saves current user settings in the currently loaded USM config file.
		/// Protocol_snmpv3_usm_save mimic/agent/{agentNum}/protocol/msg/snmpv3/usm/save
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_snmpv3_usm_saveAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/usm/save";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Saves current user settings in the specified USM config file.
		/// Saves current user settings in the specified USM config file.
		/// Protocol_snmpv3_usm_saveas mimic/agent/{agentNum}/protocol/msg/snmpv3/usm/saveas/{filename}
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 configuration</param>
		/// <param name="filename">Filename to save</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_snmpv3_usm_saveasAsync(int agentNum, string filename, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/usm/saveas/"+ (filename==null? "" : System.Uri.EscapeDataString(filename));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Saves current group, access, view settings in the currently loaded VACM config file.
		/// Saves current group, access, view settings in the currently loaded VACM config file.
		/// Protocol_snmpv3_vacm_save mimic/agent/{agentNum}/protocol/msg/snmpv3/vacm/save
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_snmpv3_vacm_saveAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/vacm/save";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Saves current group, access, view settings in the specified VACM config file.
		/// Saves current group, access, view settings in the specified VACM config file.
		/// Protocol_snmpv3_vacm_saveas mimic/agent/{agentNum}/protocol/msg/snmpv3/vacm/saveas/{filename}
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 configuration</param>
		/// <param name="filename">Filename to save</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_snmpv3_vacm_saveasAsync(int agentNum, string filename, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/vacm/saveas/"+ (filename==null? "" : System.Uri.EscapeDataString(filename));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a new view entry with the specified parameters.
		/// Adds a new view entry with the specified parameters.
		/// Protocol_snmpv3_view_add mimic/agent/{agentNum}/protocol/msg/snmpv3/view/add/{viewName}/{viewType}/{subtree}/{mask}
		/// </summary>
		/// <param name="agentNum">Agent to add the SNMPv3 view</param>
		/// <param name="viewName">SNMPv3 view name</param>
		/// <param name="viewType">SNMPv3 view type</param>
		/// <param name="subtree">SNMPv3 view subtree</param>
		/// <param name="mask">SNMPv3 view mask</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_view_addAsync(int agentNum, string viewName, string viewType, string subtree, string mask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/view/add/"+ (viewName==null? "" : System.Uri.EscapeDataString(viewName))+"/"+ (viewType==null? "" : System.Uri.EscapeDataString(viewType))+"/"+ (subtree==null? "" : System.Uri.EscapeDataString(subtree))+"/"+ (mask==null? "" : System.Uri.EscapeDataString(mask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clears all view entries.
		/// Clears all view entries.
		/// Protocol_snmpv3_view_clear mimic/agent/{agentNum}/protocol/msg/snmpv3/view/clear
		/// </summary>
		/// <param name="agentNum">Agent to add the SNMPv3 view</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_view_clearAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/view/clear";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified view entry.
		/// Deletes the specified view entry.
		/// Protocol_snmpv3_view_del mimic/agent/{agentNum}/protocol/msg/snmpv3/view/del/{viewName}
		/// </summary>
		/// <param name="agentNum">Agent to add the SNMPv3 view</param>
		/// <param name="viewName">SNMPv3 view name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_snmpv3_view_delAsync(int agentNum, string viewName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/view/del/"+ (viewName==null? "" : System.Uri.EscapeDataString(viewName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the current view entries as an array of strings.
		/// Returns the current view entries as an array of strings.
		/// Protocol_snmpv3_view_list mimic/agent/{agentNum}/protocol/msg/snmpv3/view/list
		/// </summary>
		/// <param name="agentNum">Agent to show the SNMPv3 configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_snmpv3_view_listAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/snmpv3/view/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SSH argument structure
		/// Agent's SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_ssh_get_args mimic/agent/{agentNum}/protocol/msg/ssh/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the SSH argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_ssh_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ssh/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SSH configuration
		/// Agent's SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_ssh_get_config mimic/agent/{agentNum}/protocol/msg/ssh/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the SSH configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigSSH> Protocol_ssh_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ssh/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigSSH>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SSH statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_ssh_get_statistics mimic/agent/{agentNum}/protocol/msg/ssh/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show SSH statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_ssh_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ssh/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SSH traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_ssh_get_trace mimic/agent/{agentNum}/protocol/msg/ssh/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether SSH tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigSSH> Protocol_ssh_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ssh/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigSSH>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable individual IP aliases on the agent and the simulator host
		/// By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
		/// Protocol_ssh_ipalias_disable mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/disable/{ipaddress}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate SSH IP alias</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_ssh_ipalias_disableAsync(int agentNum, string ipaddress, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ssh/ipalias/disable/"+ (ipaddress==null? "" : System.Uri.EscapeDataString(ipaddress))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable individual IP aliases on the agent and the simulator host
		/// By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
		/// Protocol_ssh_ipalias_enable mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/enable/{ipaddress}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate SSH IP alias</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_ssh_ipalias_enableAsync(int agentNum, string ipaddress, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ssh/ipalias/enable/"+ (ipaddress==null? "" : System.Uri.EscapeDataString(ipaddress))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check individual IP aliases on the agent and the simulator host
		/// By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
		/// Protocol_ssh_ipalias_isenabled mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/isenabled/{ipaddress}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate SSH IP alias</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_ssh_ipalias_isenabledAsync(int agentNum, string ipaddress, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ssh/ipalias/isenabled/"+ (ipaddress==null? "" : System.Uri.EscapeDataString(ipaddress))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all IP aliases on the agent and the simulator host
		/// By default, the MIMIC SSH server listens on all the IP addresses (aliases) that are configured for an agent
		/// Protocol_ssh_ipalias_list mimic/agent/{agentNum}/protocol/msg/ssh/ipalias/list
		/// </summary>
		/// <param name="agentNum">Agent to manipulate SSH IP alias</param>
		/// <returns>successful operation</returns>
		public async Task<IPAlias[]> Protocol_ssh_ipalias_listAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ssh/ipalias/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IPAlias[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's SSH configuration
		/// Agent's SSH configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_ssh_set_config mimic/agent/{agentNum}/protocol/msg/ssh/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the SSH configuration</param>
		/// <param name="argument">Parameter to set the SSH configuration</param>
		/// <param name="value">Value to set the SSH configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_ssh_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ssh/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's SSH traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_ssh_set_trace mimic/agent/{agentNum}/protocol/msg/ssh/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the SSH tracing</param>
		/// <param name="enableOrNot">Value to set the SSH tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_ssh_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/ssh/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SYSLOG argument structure
		/// Agent's SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_syslog_get_args mimic/agent/{agentNum}/protocol/msg/syslog/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the SYSLOG argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_syslog_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/syslog/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SYSLOG configuration
		/// Agent's SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_syslog_get_config mimic/agent/{agentNum}/protocol/msg/syslog/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the SYSLOG configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigSYSLOG> Protocol_syslog_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/syslog/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigSYSLOG>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SYSLOG statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_syslog_get_statistics mimic/agent/{agentNum}/protocol/msg/syslog/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show SYSLOG statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_syslog_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/syslog/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's SYSLOG traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_syslog_get_trace mimic/agent/{agentNum}/protocol/msg/syslog/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether SYSLOG tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigSYSLOG> Protocol_syslog_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/syslog/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigSYSLOG>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the outgoing message's attributes
		/// Attribute can be server , sequence , separator , hostname , timestamp
		/// Protocol_syslog_get_attr mimic/agent/{agentNum}/protocol/msg/syslog/get/{attr}
		/// </summary>
		/// <param name="agentNum">Agent to set the SYSLOG tracing</param>
		/// <param name="attr">Attribute</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_syslog_get_attrAsync(int agentNum, string attr, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/syslog/get/"+ (attr==null? "" : System.Uri.EscapeDataString(attr));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's SYSLOG traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_syslog_send mimic/agent/{agentNum}/protocol/msg/syslog/send/{pri}
		/// </summary>
		/// <param name="agentNum">Agent to set the SYSLOG tracing</param>
		/// <param name="pri">Message Priority</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_syslog_sendAsync(int agentNum, int pri, SyslogMsg requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/syslog/send/"+pri;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set the agent's SYSLOG configuration
		/// Agent's SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_syslog_set_config mimic/agent/{agentNum}/protocol/msg/syslog/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the SYSLOG configuration</param>
		/// <param name="argument">Parameter to set the SYSLOG configuration</param>
		/// <param name="value">Value to set the SYSLOG configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_syslog_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/syslog/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's SYSLOG traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_syslog_set_trace mimic/agent/{agentNum}/protocol/msg/syslog/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the SYSLOG tracing</param>
		/// <param name="enableOrNot">Value to set the SYSLOG tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_syslog_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/syslog/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the outgoing message's attributes
		/// Attribute can be server , sequence , separator , hostname , timestamp
		/// Protocol_syslog_set_attr mimic/agent/{agentNum}/protocol/msg/syslog/set/{attr}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the SYSLOG tracing</param>
		/// <param name="attr">Attribute</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_syslog_set_attrAsync(int agentNum, string attr, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/syslog/set/"+ (attr==null? "" : System.Uri.EscapeDataString(attr))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes the connection's current logon.
		/// Logon change allows (hidden) commands for a different access mode to run.
		/// Protocol_telnet_connection_logon mimic/agent/{agentNum}/protocol/msg/telnet/connection/logon/{connectionID}/{user}/{password}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate TELNET connection</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_telnet_connection_logonAsync(int agentNum, int connectionID, string user, string password, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/connection/logon/"+connectionID+"/"+ (user==null? "" : System.Uri.EscapeDataString(user))+"/"+ (password==null? "" : System.Uri.EscapeDataString(password));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Executes the command asynchronously .
		/// Equivalent of the command typed in by the user.
		/// Protocol_telnet_connection_request mimic/agent/{agentNum}/protocol/msg/telnet/connection/request/{connectionID}/{command}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate TELNET connection</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_telnet_connection_requestAsync(int agentNum, int connectionID, string command, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/connection/request/"+connectionID+"/"+ (command==null? "" : System.Uri.EscapeDataString(command));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Triggers the asynchronous signal event with the specified signal name
		/// Signal name is either connect or idle
		/// Protocol_telnet_connection_signal mimic/agent/{agentNum}/protocol/msg/telnet/connection/signal/{connectionID}/{signalName}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate TELNET connection</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_telnet_connection_signalAsync(int agentNum, int connectionID, string signalName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/connection/signal/"+connectionID+"/"+ (signalName==null? "" : System.Uri.EscapeDataString(signalName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TELNET argument structure
		/// Agent's TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_telnet_get_args mimic/agent/{agentNum}/protocol/msg/telnet/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the TELNET argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_telnet_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TELNET configuration
		/// Agent's TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_telnet_get_config mimic/agent/{agentNum}/protocol/msg/telnet/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the TELNET configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigTELNET> Protocol_telnet_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigTELNET>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TELNET statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_telnet_get_statistics mimic/agent/{agentNum}/protocol/msg/telnet/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show TELNET statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_telnet_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TELNET traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_telnet_get_trace mimic/agent/{agentNum}/protocol/msg/telnet/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether TELNET tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigTELNET> Protocol_telnet_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigTELNET>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable individual IP aliases on the agent and the simulator host
		/// By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
		/// Protocol_telnet_ipalias_disable mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/disable/{ipaddress}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate TELNET IP alias</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_telnet_ipalias_disableAsync(int agentNum, string ipaddress, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/ipalias/disable/"+ (ipaddress==null? "" : System.Uri.EscapeDataString(ipaddress))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable individual IP aliases on the agent and the simulator host
		/// By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
		/// Protocol_telnet_ipalias_enable mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/enable/{ipaddress}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate TELNET IP alias</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_telnet_ipalias_enableAsync(int agentNum, string ipaddress, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/ipalias/enable/"+ (ipaddress==null? "" : System.Uri.EscapeDataString(ipaddress))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check individual IP aliases on the agent and the simulator host
		/// By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
		/// Protocol_telnet_ipalias_isenabled mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/isenabled/{ipaddress}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to manipulate TELNET IP alias</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_telnet_ipalias_isenabledAsync(int agentNum, string ipaddress, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/ipalias/isenabled/"+ (ipaddress==null? "" : System.Uri.EscapeDataString(ipaddress))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all IP aliases on the agent and the simulator host
		/// By default, the MIMIC TELNET server listens on all the IP addresses (aliases) that are configured for an agent
		/// Protocol_telnet_ipalias_list mimic/agent/{agentNum}/protocol/msg/telnet/ipalias/list
		/// </summary>
		/// <param name="agentNum">Agent to manipulate TELNET IP alias</param>
		/// <returns>successful operation</returns>
		public async Task<IPAlias[]> Protocol_telnet_ipalias_listAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/ipalias/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IPAlias[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TELNET connections
		/// IDs of all connected connections
		/// Protocol_telnet_server_get_connections mimic/agent/{agentNum}/protocol/msg/telnet/server/get/connections
		/// </summary>
		/// <param name="agentNum">Agent to show TELNET configuration</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_telnet_server_get_connectionsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/server/get/connections";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TELNET keymap file name
		/// Keymap file name
		/// Protocol_telnet_server_get_keymap mimic/agent/{agentNum}/protocol/msg/telnet/server/get/keymap
		/// </summary>
		/// <param name="agentNum">Agent to show TELNET statistics</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_telnet_server_get_keymapAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/server/get/keymap";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TELNET rules db file name
		/// Rules db file name
		/// Protocol_telnet_server_get_rulesdb mimic/agent/{agentNum}/protocol/msg/telnet/server/get/rulesdb
		/// </summary>
		/// <param name="agentNum">Agent to show TELNET statistics</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_telnet_server_get_rulesdbAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/server/get/rulesdb";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TELNET server state
		/// Return 1 means accepting connections, 0 not
		/// Protocol_telnet_server_get_state mimic/agent/{agentNum}/protocol/msg/telnet/server/get/state
		/// </summary>
		/// <param name="agentNum">Agent to show TELNET statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_telnet_server_get_stateAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/server/get/state";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TELNET user db file name
		/// User db file name
		/// Protocol_telnet_server_get_userdb mimic/agent/{agentNum}/protocol/msg/telnet/server/get/userdb
		/// </summary>
		/// <param name="agentNum">Agent to show TELNET statistics</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_telnet_server_get_userdbAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/server/get/userdb";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TELNET users
		/// List of users
		/// Protocol_telnet_server_get_users mimic/agent/{agentNum}/protocol/msg/telnet/server/get/users
		/// </summary>
		/// <param name="agentNum">Agent to show TELNET configuration</param>
		/// <returns>successful operation</returns>
		public async Task<TelnetUser[]> Protocol_telnet_server_get_usersAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/server/get/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TelnetUser[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's TELNET configuration
		/// Agent's TELNET configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_telnet_set_config mimic/agent/{agentNum}/protocol/msg/telnet/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the TELNET configuration</param>
		/// <param name="argument">Parameter to set the TELNET configuration</param>
		/// <param name="value">Value to set the TELNET configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_telnet_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's TELNET traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_telnet_set_trace mimic/agent/{agentNum}/protocol/msg/telnet/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the TELNET tracing</param>
		/// <param name="enableOrNot">Value to set the TELNET tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_telnet_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/telnet/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TFTP argument structure
		/// Agent's TFTP configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_tftp_get_args mimic/agent/{agentNum}/protocol/msg/tftp/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the TFTP argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_tftp_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tftp/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TFTP configuration
		/// Agent's TFTP configuration
		/// Protocol_tftp_get_config mimic/agent/{agentNum}/protocol/msg/tftp/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the TFTP configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigTFTP> Protocol_tftp_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tftp/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigTFTP>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TFTP statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_tftp_get_statistics mimic/agent/{agentNum}/protocol/msg/tftp/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show TFTP statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_tftp_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tftp/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TFTP traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_tftp_get_trace mimic/agent/{agentNum}/protocol/msg/tftp/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether TFTP tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigTFTP> Protocol_tftp_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tftp/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigTFTP>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a read session to download srcfile from server
		/// Session ID is returned
		/// Protocol_tftp_session_read mimic/agent/{agentNum}/protocol/msg/tftp/session/read/server/{srcfile}
		/// </summary>
		/// <param name="agentNum">Agent to show TFTP statistics</param>
		/// <param name="srcfile">File name to retrieve from server</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_tftp_session_readAsync(int agentNum, string srcfile, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tftp/session/read/server/"+ (srcfile==null? "" : System.Uri.EscapeDataString(srcfile));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a read session to upload srcfile to server
		/// Session ID is returned
		/// Protocol_tftp_session_write mimic/agent/{agentNum}/protocol/msg/tftp/session/write/server/{srcfile}
		/// </summary>
		/// <param name="agentNum">Agent to show TFTP statistics</param>
		/// <param name="srcfile">File name to upload to server</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_tftp_session_writeAsync(int agentNum, string srcfile, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tftp/session/write/server/"+ (srcfile==null? "" : System.Uri.EscapeDataString(srcfile));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's TFTP configuration
		/// Agent's TFTP configuration
		/// Protocol_tftp_set_config mimic/agent/{agentNum}/protocol/msg/tftp/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the TFTP configuration</param>
		/// <param name="argument">Parameter to set the TFTP configuration</param>
		/// <param name="value">Value to set the TFTP configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_tftp_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tftp/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's TFTP traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_tftp_set_trace mimic/agent/{agentNum}/protocol/msg/tftp/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the TFTP tracing</param>
		/// <param name="enableOrNot">Value to set the TFTP tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_tftp_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tftp/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show a parameter of a TFTP sesssion
		/// Parameter is server , port , or dstfile
		/// Protocol_tftp_session_get_parameter mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/get/{parameter}
		/// </summary>
		/// <param name="agentNum">Agent to show TFTP parameter</param>
		/// <param name="sessionID">SessionID</param>
		/// <param name="parameter">Parameter to show</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_tftp_session_get_parameterAsync(int agentNum, string sessionID, string parameter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tftp/"+ (sessionID==null? "" : System.Uri.EscapeDataString(sessionID))+"/get/"+ (parameter==null? "" : System.Uri.EscapeDataString(parameter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set a parameter of a TFTP sesssion
		/// Parameter is server , port , or dstfile
		/// Protocol_tftp_session_set_parameter mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/set/{parameter}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set TFTP parameter</param>
		/// <param name="sessionID">SessionID</param>
		/// <param name="parameter">Parameter to set</param>
		/// <param name="value">Value to set</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_tftp_session_set_parameterAsync(int agentNum, string sessionID, string parameter, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tftp/"+ (sessionID==null? "" : System.Uri.EscapeDataString(sessionID))+"/set/"+ (parameter==null? "" : System.Uri.EscapeDataString(parameter))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start a TFTP sesssion
		/// Start uploading or downloading the file
		/// Protocol_tftp_session_start mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/start
		/// </summary>
		/// <param name="agentNum">Agent to start TFTP transaction</param>
		/// <param name="sessionID">SessionID</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_tftp_session_startAsync(int agentNum, string sessionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tftp/"+ (sessionID==null? "" : System.Uri.EscapeDataString(sessionID))+"/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check a TFTP sesssion's status
		/// Status includes running state, bytes transfered, and time elapsed
		/// Protocol_tftp_session_status mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/status
		/// </summary>
		/// <param name="agentNum">Agent to show TFTP transaction</param>
		/// <param name="sessionID">SessionID</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_tftp_session_statusAsync(int agentNum, string sessionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tftp/"+ (sessionID==null? "" : System.Uri.EscapeDataString(sessionID))+"/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop a TFTP sesssion
		/// Stop uploading or downloading the file
		/// Protocol_tftp_session_stop mimic/agent/{agentNum}/protocol/msg/tftp/{sessionID}/stop
		/// </summary>
		/// <param name="agentNum">Agent to stop TFTP transaction</param>
		/// <param name="sessionID">SessionID</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_tftp_session_stopAsync(int agentNum, string sessionID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tftp/"+ (sessionID==null? "" : System.Uri.EscapeDataString(sessionID))+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TOD argument structure
		/// Agent's TOD configuration
		/// Protocol_tod_get_args mimic/agent/{agentNum}/protocol/msg/tod/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the TOD argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_tod_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tod/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TOD configuration
		/// Agent's TOD configuration
		/// Protocol_tod_get_config mimic/agent/{agentNum}/protocol/msg/tod/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the TOD configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigTOD> Protocol_tod_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tod/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigTOD>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TOD statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_tod_get_statistics mimic/agent/{agentNum}/protocol/msg/tod/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show TOD statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_tod_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tod/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's TOD traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_tod_get_trace mimic/agent/{agentNum}/protocol/msg/tod/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether TOD tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigTOD> Protocol_tod_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tod/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigTOD>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve TOD time
		/// Retrive time from server
		/// Protocol_tod_gettime mimic/agent/{agentNum}/protocol/msg/tod/gettime/server/{serverAddr}/port/{portNum}/script/{scriptName}/timeout/{timeSec}/retries/{numRetries}
		/// </summary>
		/// <param name="agentNum">Agent to show TOD return</param>
		/// <param name="serverAddr">serverAddr</param>
		/// <param name="portNum">portNum</param>
		/// <param name="scriptName">scriptName</param>
		/// <param name="timeSec">timeSec</param>
		/// <param name="numRetries">numRetries</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_tod_gettimeAsync(int agentNum, string serverAddr, int portNum, string scriptName, int timeSec, int numRetries, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tod/gettime/server/"+ (serverAddr==null? "" : System.Uri.EscapeDataString(serverAddr))+"/port/"+portNum+"/script/"+ (scriptName==null? "" : System.Uri.EscapeDataString(scriptName))+"/timeout/"+timeSec+"/retries/"+numRetries;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's TOD configuration
		/// Agent's TOD configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_tod_set_config mimic/agent/{agentNum}/protocol/msg/tod/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the TOD configuration</param>
		/// <param name="argument">Parameter to set the TOD configuration</param>
		/// <param name="value">Value to set the TOD configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_tod_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tod/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's TOD traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_tod_set_trace mimic/agent/{agentNum}/protocol/msg/tod/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the TOD tracing</param>
		/// <param name="enableOrNot">Value to set the TOD tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_tod_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/tod/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's WEB argument structure
		/// Agent's WEB configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_web_get_args mimic/agent/{agentNum}/protocol/msg/web/get/args
		/// </summary>
		/// <param name="agentNum">Agent to show the WEB argument structure</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_web_get_argsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/web/get/args";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's WEB configuration
		/// Agent's WEB configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_web_get_config mimic/agent/{agentNum}/protocol/msg/web/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the WEB configuration</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigWEB> Protocol_web_get_configAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/web/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigWEB>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's WEB statistics
		/// Statistics of fields indicated in the headers
		/// Protocol_web_get_statistics mimic/agent/{agentNum}/protocol/msg/web/get/statistics
		/// </summary>
		/// <param name="agentNum">Agent to show WEB statistics</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Protocol_web_get_statisticsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/web/get/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's WEB traffic tracing
		/// Trace 1 means enabled, 0 means not
		/// Protocol_web_get_trace mimic/agent/{agentNum}/protocol/msg/web/get/trace
		/// </summary>
		/// <param name="agentNum">Agent to show whether WEB tracing is enabled</param>
		/// <returns>successful operation</returns>
		public async Task<ConfigWEB> Protocol_web_get_traceAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/web/get/trace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ConfigWEB>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add the agent's WEB port
		/// Add port
		/// Protocol_web_port_add mimic/agent/{agentNum}/protocol/msg/web/port/add/{port}
		/// </summary>
		/// <param name="agentNum">Agent to add WEB port</param>
		/// <param name="port">TCP port</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_web_port_addAsync(int agentNum, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/web/port/add/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's WEB port
		/// Check the port. 1 means existing, 0 means not
		/// Protocol_web_port_exists mimic/agent/{agentNum}/protocol/msg/web/port/exists/{port}
		/// </summary>
		/// <param name="agentNum">Agent to show WEB configuration</param>
		/// <param name="port">TCP port</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_web_port_existsAsync(int agentNum, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/web/port/exists/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove the agent's WEB port
		/// Remove port
		/// Protocol_web_port_remove mimic/agent/{agentNum}/protocol/msg/web/port/remove/{port}
		/// </summary>
		/// <param name="agentNum">Agent to remove WEB port</param>
		/// <param name="port">TCP port</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_web_port_removeAsync(int agentNum, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/web/port/remove/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's WEB port attribute
		/// Set port
		/// Protocol_web_port_set mimic/agent/{agentNum}/protocol/msg/web/port/set/{port}/{protocol}/{version}
		/// </summary>
		/// <param name="agentNum">Agent to set WEB port</param>
		/// <param name="port">TCP port</param>
		/// <param name="protocol">Encryption or related protocol</param>
		/// <param name="version">Encryption or related protocol version</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_web_port_setAsync(int agentNum, int port, string protocol, string version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/web/port/set/"+port+"/"+ (protocol==null? "" : System.Uri.EscapeDataString(protocol))+"/"+ (version==null? "" : System.Uri.EscapeDataString(version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start the agent's WEB port
		/// Start port
		/// Protocol_web_port_start mimic/agent/{agentNum}/protocol/msg/web/port/start/{port}
		/// </summary>
		/// <param name="agentNum">Agent to start WEB port</param>
		/// <param name="port">TCP port</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_web_port_startAsync(int agentNum, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/web/port/start/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop the agent's WEB port
		/// Stop port
		/// Protocol_web_port_stop mimic/agent/{agentNum}/protocol/msg/web/port/stop/{port}
		/// </summary>
		/// <param name="agentNum">Agent to stop WEB port</param>
		/// <param name="port">TCP port</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_web_port_stopAsync(int agentNum, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/web/port/stop/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's WEB configuration
		/// Agent's WEB configuration with port,rule,prompt,paging_prompt,userdb,keymap
		/// Protocol_web_set_config mimic/agent/{agentNum}/protocol/msg/web/set/config/{argument}/{value}
		/// </summary>
		/// <param name="agentNum">Agent to set the WEB configuration</param>
		/// <param name="argument">Parameter to set the WEB configuration</param>
		/// <param name="value">Value to set the WEB configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_web_set_configAsync(int agentNum, string argument, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/web/set/config/"+ (argument==null? "" : System.Uri.EscapeDataString(argument))+"/"+ (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the agent's WEB traffic tracing
		/// 1 to enable, 0 to disable
		/// Protocol_web_set_trace mimic/agent/{agentNum}/protocol/msg/web/set/trace/{enableOrNot}
		/// </summary>
		/// <param name="agentNum">Agent to set the WEB tracing</param>
		/// <param name="enableOrNot">Value to set the WEB tracing</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_web_set_traceAsync(int agentNum, string enableOrNot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/msg/web/set/trace/"+ (enableOrNot==null? "" : System.Uri.EscapeDataString(enableOrNot));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the protocol's configuration.
		/// Returns the protocol's configuration.
		/// Protocol_get_config mimic/agent/{agentNum}/protocol/{prot}/get/config
		/// </summary>
		/// <param name="agentNum">Agent to show the protocol configuration</param>
		/// <param name="prot">Protocol to show configuration</param>
		/// <returns>successful operation</returns>
		public async Task<string> Protocol_get_configAsync(int agentNum, string prot, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/protocol/"+ (prot==null? "" : System.Uri.EscapeDataString(prot))+"/get/config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reload the current agent.
		/// This only works for halted agents. The net effect is the same as restarting an agent (ie. stop, start, halt), but without disconnecting the network (and thus existing connections).
		/// Reload mimic/agent/{agentNum}/reload
		/// </summary>
		/// <param name="agentNum">Agent to return the primary IP</param>
		/// <returns>successful operation</returns>
		public async Task<string> ReloadAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/reload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove the current agent.
		/// For speed, this operation will complete asynchronously. The same synchronization considerations apply as in /mimic/agent/start.
		/// Agent_remove mimic/agent/{agentNum}/remove
		/// </summary>
		/// <param name="agentNum">Agent to return the primary IP</param>
		/// <returns>successful operation</returns>
		public async Task<string> Agent_removeAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/remove";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resume the current agent.
		/// Resume the current agent.
		/// Resume mimic/agent/{agentNum}/resume
		/// </summary>
		/// <param name="agentNum">Agent to return the primary IP</param>
		/// <returns>successful operation</returns>
		public async Task<string> ResumeAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/resume";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save agent MIB values.
		/// Save agent MIB values.
		/// Save mimic/agent/{agentNum}/save
		/// </summary>
		/// <param name="agentNum">Agent to save</param>
		/// <returns>successful operation</returns>
		public async Task<string> SaveAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/save";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// one-way transit delay in msec
		/// The minimum granularity is 10 msec.
		/// Set_delay mimic/agent/{agentNum}/set/delay/{delay}
		/// </summary>
		/// <param name="agentNum">Agent to set the delay time</param>
		/// <param name="delay">Delay time of the agent</param>
		/// <returns>successful operation</returns>
		public async Task<int> Set_delayAsync(int agentNum, int delay, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/delay/"+delay;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// drop rate (every N-th PDU)
		/// 0 means no drops
		/// Set_drops mimic/agent/{agentNum}/set/drops/{drops}
		/// </summary>
		/// <param name="agentNum">Agent to set the drop rate</param>
		/// <param name="drops">Drop rate of the agent</param>
		/// <returns>successful operation</returns>
		public async Task<int> Set_dropsAsync(int agentNum, int drops, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/drops/"+drops;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// host address of the agent.
		/// Currently, only IPv4 addresses are allowed as the main address of the agent, but both IPv4 and IPv6 addresses are allowed as IP aliases for the agent.
		/// Set_host mimic/agent/{agentNum}/set/host/{host}
		/// </summary>
		/// <param name="agentNum">Agent to set the primary IP</param>
		/// <param name="host">Primary IP of the agent</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_hostAsync(string agentNum, string host, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+ (agentNum==null? "" : System.Uri.EscapeDataString(agentNum))+"/set/host/"+ (host==null? "" : System.Uri.EscapeDataString(host));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// timeout in seconds for retransmitting INFORM PDUs
		/// The agent will retransmit INFORM PDUs at this interval until it has received a reply from the manager.
		/// Set_inform_timeout mimic/agent/{agentNum}/set/inform_timeout/{inform_timeout}
		/// </summary>
		/// <param name="agentNum">Agent to set the timeout setting</param>
		/// <param name="inform_timeout">Tmeout setting</param>
		/// <returns>successful operation</returns>
		public async Task<int> Set_inform_timeoutAsync(int agentNum, int inform_timeout, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/inform_timeout/"+inform_timeout;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// network interface card for the agent
		/// network interface card for the agent
		/// Set_interface mimic/agent/{agentNum}/set/interface/{interface}
		/// </summary>
		/// <param name="agentNum">Agent to set the primary interface</param>
		/// <param name="_interface">Primary interface of the agent</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_interfaceAsync(string agentNum, string _interface, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+ (agentNum==null? "" : System.Uri.EscapeDataString(agentNum))+"/set/interface/"+ (_interface==null? "" : System.Uri.EscapeDataString(_interface));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// subnet mask of the agent.
		/// subnet mask of the agent.
		/// Set_mask mimic/agent/{agentNum}/set/mask/{mask}
		/// </summary>
		/// <param name="agentNum">Agent to set the primary IP address mask</param>
		/// <param name="mask">Mask to set for the agent primary IP address</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_maskAsync(string agentNum, string mask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+ (agentNum==null? "" : System.Uri.EscapeDataString(agentNum))+"/set/mask/"+ (mask==null? "" : System.Uri.EscapeDataString(mask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// set of MIBs, simulations and scenarios
		/// set of MIBs, simulations and scenarios
		/// Set_mibs mimic/agent/{agentNum}/set/mibs
		/// </summary>
		/// <param name="agentNum">Agent to return the MIB triplets</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_mibsAsync(int agentNum, Triplet[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/mibs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// MIB directory of the agent.
		/// MIB directory of the agent.
		/// Set_oiddir mimic/agent/{agentNum}/set/oiddir/{oiddir}
		/// </summary>
		/// <param name="agentNum">Agent to set the directory path</param>
		/// <param name="oiddir">Directory path for the agent</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_oiddirAsync(int agentNum, string oiddir, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/oiddir/"+ (oiddir==null? "" : System.Uri.EscapeDataString(oiddir));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// owner of the agent
		/// owner of the agent
		/// Set_owner mimic/agent/{agentNum}/set/owner/{owner}
		/// </summary>
		/// <param name="agentNum">Agent to set the owner</param>
		/// <param name="owner">Owner of the agent</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_ownerAsync(int agentNum, string owner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/owner/"+ (owner==null? "" : System.Uri.EscapeDataString(owner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// maximum PDU size
		/// The limit for this configurable is 65536
		/// Set_pdusize mimic/agent/{agentNum}/set/pdusize/{pdusize}
		/// </summary>
		/// <param name="agentNum">Agent to return the PDU size</param>
		/// <param name="pdusize">PDU size setting for the agent</param>
		/// <returns>successful operation</returns>
		public async Task<int> Set_pdusizeAsync(int agentNum, int pdusize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/pdusize/"+pdusize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// port number
		/// port number
		/// Set_port mimic/agent/{agentNum}/set/port/{port}
		/// </summary>
		/// <param name="agentNum">Agent to set the primary SNMP port</param>
		/// <param name="port">Primary SNMP port of the agent</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_portAsync(int agentNum, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/port/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// private directory of the agent.
		/// private directory of the agent.
		/// Set_privdir mimic/agent/{agentNum}/set/privdir/{privdir}
		/// </summary>
		/// <param name="agentNum">Agent to set the directory path</param>
		/// <param name="privdir">Directory path for the agent</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_privdirAsync(int agentNum, string privdir, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/privdir/"+ (privdir==null? "" : System.Uri.EscapeDataString(privdir));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// protocols supported by agent as a comma-separated list
		/// protocols supported by agent as a comma-separated list
		/// Set_protocols mimic/agent/{agentNum}/set/protocol
		/// </summary>
		/// <param name="agentNum">Agent to return the protocols arrary</param>
		/// <param name="requestBody">Created agent object</param>
		/// <returns>successful operation</returns>
		public async Task<int[]> Set_protocolsAsync(int agentNum, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/protocol";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// read community string
		/// read community string
		/// Set_read_community mimic/agent/{agentNum}/set/read/{read}
		/// </summary>
		/// <param name="agentNum">Agent to return the SNMP read community string</param>
		/// <param name="read">SNMP read community string</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_read_communityAsync(int agentNum, string read, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/read/"+ (read==null? "" : System.Uri.EscapeDataString(read));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// relative start time
		/// relative start time
		/// Set_starttime mimic/agent/{agentNum}/set/start/{start}
		/// </summary>
		/// <param name="agentNum">Agent to return the relative start time</param>
		/// <param name="start">Relative start time of the agent</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_starttimeAsync(int agentNum, int start, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/start/"+start;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SNMP PDU tracing
		/// SNMP PDU tracing
		/// Set_trace mimic/agent/{agentNum}/set/trace/{trace}
		/// </summary>
		/// <param name="agentNum">Agent to set trace setting</param>
		/// <param name="trace">Trace setting for the agent</param>
		/// <returns>successful operation</returns>
		public async Task<int> Set_traceAsync(int agentNum, int trace, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/trace/"+trace;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SNMP SET validation policy
		/// Is a bitmask in which with the following bits (from LSB) check for type, length, range, access. A default value of 65535 does all validation checking.
		/// Set_validate mimic/agent/{agentNum}/set/validate/{validate}
		/// </summary>
		/// <param name="agentNum">Agent to set the bitmask integer</param>
		/// <param name="validate">Bitmask integer to set</param>
		/// <returns>successful operation</returns>
		public async Task<int> Set_validateAsync(int agentNum, int validate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/validate/"+validate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// write community string
		/// write community string
		/// Set_write_community mimic/agent/{agentNum}/set/write/{write}
		/// </summary>
		/// <param name="agentNum">Agent to set the SNMP write community string</param>
		/// <param name="write">SNMP write community string</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_write_communityAsync(int agentNum, string write, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/set/write/"+ (write==null? "" : System.Uri.EscapeDataString(write));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start the current agent.
		/// For speed, this operation will complete asynchronously. A successful return from this command means the starting of the agent is in progress. If you need to rely on the agent to have completed startup, you should wait for it's state to become RUNNING.
		/// Start mimic/agent/{agentNum}/start
		/// </summary>
		/// <param name="agentNum">Agent to return the primary IP</param>
		/// <returns>successful operation</returns>
		public async Task<string> StartAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the agent's primary IP address
		/// Agent primary IP address
		/// Stop mimic/agent/{agentNum}/stop
		/// </summary>
		/// <param name="agentNum">Agent to return the primary IP</param>
		/// <returns>successful operation</returns>
		public async Task<string> StopAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This command copies the variable store from the other agent to this agent.
		/// This command copies the variable store from the other agent to this agent.
		/// Agent_store_copy mimic/agent/{agentNum}/store/copy/{otherAgent}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="otherAgent">Agent of the value space</param>
		/// <returns>successful operation</returns>
		public async Task<string> Agent_store_copyAsync(int agentNum, int otherAgent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/store/copy/"+otherAgent;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This command can be used as a predicate to ascertain the existence of a given variable.
		/// It returns "1" if the variable exists, else "0".
		/// Agent_store_exists mimic/agent/{agentNum}/store/exists/{var}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_var">Variable name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Agent_store_existsAsync(int agentNum, string _var, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/store/exists/"+ (_var==null? "" : System.Uri.EscapeDataString(_var));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the value associated with a variable.
		/// The value will be returned as a string (like all Tcl values).
		/// Agent_store_get mimic/agent/{agentNum}/store/get/{var}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_var">Variable name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Agent_store_getAsync(int agentNum, string _var, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/store/get/"+ (_var==null? "" : System.Uri.EscapeDataString(_var));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This command will return the list of variables in the said scope.
		/// The list will be a Tcl format list with curly braces "{}" around each list element. These elements in turn are space separated.
		/// Agent_store_list mimic/agent/{agentNum}/store/list
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Agent_store_listAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/store/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.
		/// These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.
		/// Agent_store_lreplace mimic/agent/{agentNum}/store/lreplace/{var}/{index}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_var">Variable name</param>
		/// <param name="index">Index</param>
		/// <param name="requestBody">Value</param>
		/// <returns>successful operation</returns>
		public async Task<string> Agent_store_lreplaceAsync(int agentNum, string _var, int index, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/store/lreplace/"+ (_var==null? "" : System.Uri.EscapeDataString(_var))+"/"+index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This command can be used as a predicate to ascertain the persistence of a given variable.
		/// It returns "1" if the variable is persistent, else "0".
		/// Agent_store_persists mimic/agent/{agentNum}/store/persists/{var}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_var">Variable name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Agent_store_persistsAsync(int agentNum, string _var, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/store/persists/"+ (_var==null? "" : System.Uri.EscapeDataString(_var));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// These commands allow the creation of a new variable, or changing an existing value.
		/// The append sub-command will append the value to an existing variable, or create a new one. The set sub-command will overwrite an existing variable, or create a new one. The optional persist flag can be used to indicate if the variable is to be persistent as described above. By default a value of '0' will be implied for the persist flag. To avoid mistakes, for existing variables the persist flag can only be set. If you want to reset it, you first need to unset the variable.
		/// Agent_store_set mimic/agent/{agentNum}/store/set/{var}/{persist}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_var">Variable name</param>
		/// <param name="persist">Persistent setting</param>
		/// <param name="requestBody">Value</param>
		/// <returns>successful operation</returns>
		public async Task<string> Agent_store_setAsync(int agentNum, string _var, int persist, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/store/set/"+ (_var==null? "" : System.Uri.EscapeDataString(_var))+"/"+persist;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a variable which is currently defined.
		/// This will cleanup persistent variables if needed
		/// Agent_store_unset mimic/agent/{agentNum}/store/unset/{var}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_var">Variable name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Agent_store_unsetAsync(int agentNum, string _var, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/store/unset/"+ (_var==null? "" : System.Uri.EscapeDataString(_var));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new timer script to be executed at specified interval (in msec) with the specified argument.
		/// Add a new timer script to be executed at specified interval (in msec) with the specified argument.
		/// Add_timer_script mimic/agent/{agentNum}/timer/script/add/{script}/{interval}/{arg}
		/// </summary>
		/// <param name="agentNum">Agent to return the timer script list</param>
		/// <param name="script">Script name</param>
		/// <param name="interval">Interval in msec</param>
		/// <param name="arg">Arguments to the script</param>
		/// <returns>successful operation</returns>
		public async Task<string> Add_timer_scriptAsync(int agentNum, string script, int interval, string arg, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/timer/script/add/"+ (script==null? "" : System.Uri.EscapeDataString(script))+"/"+interval+"/"+ (arg==null? "" : System.Uri.EscapeDataString(arg));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a timer script from the execution list.
		/// The first scheduled script that matches the script name, and optionally the interval and argument will be deleted.
		/// Del_timer_script mimic/agent/{agentNum}/timer/script/delete/{script}/{interval}/{arg}
		/// </summary>
		/// <param name="agentNum">Agent to return the timer script list</param>
		/// <param name="script">Script name</param>
		/// <param name="interval">Interval in msec</param>
		/// <param name="arg">Arguments to the script</param>
		/// <returns>successful operation</returns>
		public async Task<string> Del_timer_scriptAsync(int agentNum, string script, int interval, string arg, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/timer/script/delete/"+ (script==null? "" : System.Uri.EscapeDataString(script))+"/"+interval+"/"+ (arg==null? "" : System.Uri.EscapeDataString(arg));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the timer scripts currently running along with the their intervals.
		/// The command mimic timer script list lists global timer scripts, the command /mimic/timer/script/{agentNum}/list is the per-agent equivalent NOTE Global timer scripts run globally but within them you can address individual agents using {agentNum}. To schedule timerscripts for an individual agent, use /mimic/timer/script/{agentNum}.
		/// List_timer_scripts mimic/agent/{agentNum}/timer/script/list
		/// </summary>
		/// <param name="agentNum">Agent to return the timer script list</param>
		/// <returns>successful operation</returns>
		public async Task<TimerScript[]> List_timer_scriptsAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/timer/script/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimerScript[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a trap destination to the set of destinations.
		/// Add a trap destination to the set of destinations.
		/// Trap_config_add mimic/agent/{agentNum}/trap/config/add/{IP}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to add the destination</param>
		/// <param name="IP">IP of the destination</param>
		/// <param name="port">port of the destination</param>
		/// <returns>successful operation</returns>
		public async Task<string> Trap_config_addAsync(int agentNum, string IP, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/trap/config/add/"+ (IP==null? "" : System.Uri.EscapeDataString(IP))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a trap destination from the set of destinations.
		/// Remove a trap destination from the set of destinations.
		/// Trap_config_del mimic/agent/{agentNum}/trap/config/delete/{IP}/{port}
		/// </summary>
		/// <param name="agentNum">Agent to delete the destination</param>
		/// <param name="IP">IP of the destination</param>
		/// <param name="port">port of the destination</param>
		/// <returns>successful operation</returns>
		public async Task<string> Trap_config_delAsync(int agentNum, string IP, int port, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/trap/config/delete/"+ (IP==null? "" : System.Uri.EscapeDataString(IP))+"/"+port;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the set of trap destinations for this agent instance.
		/// Each trap destination is identified with an IP address and a port number. The default port number is the standard SNMP trap port 162.
		/// Trap_config_list mimic/agent/{agentNum}/trap/config/list
		/// </summary>
		/// <param name="agentNum">Agent to show the IP alias list</param>
		/// <returns>successful operation</returns>
		public async Task<TrapDest[]> Trap_config_listAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/trap/config/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TrapDest[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the outstanding asynchronous traps for this agent instance.
		/// List the outstanding asynchronous traps for this agent instance.
		/// Trap_list mimic/agent/{agentNum}/trap/list
		/// </summary>
		/// <param name="agentNum">Agent to list the traps</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Trap_listAsync(int agentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/trap/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an entry to a table.
		/// The object needs to specify the MIB object with the INDEX clause, usually an object whose name ends with Entry.
		/// Add mimic/agent/{agentNum}/value/add/{object}/{instance}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_object">Object (column) of the table in the agent's value space</param>
		/// <param name="instance">Object (column) of the table in the agent's value space</param>
		/// <returns>successful operation</returns>
		public async Task<string> AddAsync(int agentNum, string _object, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/add/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/"+ (instance==null? "" : System.Uri.EscapeDataString(instance));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
		/// Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
		/// Eval_value mimic/agent/{agentNum}/value/eval/{object}/{instance}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_object">Single instance object or object (column) of the table in the agent's value space.</param>
		/// <param name="instance">Row of the table in the agent's value space. 0 for single instance objects</param>
		/// <returns>successful operation</returns>
		public async Task<string> Eval_valueAsync(int agentNum, string _object, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/eval/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/"+ (instance==null? "" : System.Uri.EscapeDataString(instance));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a variable in the Value Space.
		/// Get a variable in the Value Space.
		/// Get_value mimic/agent/{agentNum}/value/get/{object}/{instance}/{variable}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_object">Object (column) of the table in the agent's value space</param>
		/// <param name="instance">Object (column) of the table in the agent's value space</param>
		/// <param name="variable">Object (column) of the table in the agent's value space</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_valueAsync(int agentNum, string _object, string instance, string variable, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/get/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/"+ (variable==null? "" : System.Uri.EscapeDataString(variable));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return the syntactical information for the specified object, such as type, size, range, enumerations, and ACCESS.
		/// Return the syntactical information for the specified object, such as type, size, range, enumerations, and ACCESS.
		/// Get_info mimic/agent/{agentNum}/value/info/{object}
		/// </summary>
		/// <param name="agentNum">Agent to show the information of the object</param>
		/// <param name="_object">Object</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_infoAsync(int agentNum, string _object, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/info/"+ (_object==null? "" : System.Uri.EscapeDataString(_object));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Display the MIB object instances for the specified object.
		/// This enables MIB browsing of the MIB on the current agent.
		/// Get_instances mimic/agent/{agentNum}/value/instances/{object}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_object">Object (column) of the table in the agent's value space</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Get_instancesAsync(int agentNum, string _object, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/instances/"+ (_object==null? "" : System.Uri.EscapeDataString(_object));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Display the MIB objects below the current position
		/// This command is similar to the ls or dir operating system commands to list filesystem directories.
		/// Get_objects mimic/agent/{agentNum}/value/list/{OID}
		/// </summary>
		/// <param name="agentNum">Agent to show the OID branches</param>
		/// <param name="OID">Current OID</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Get_objectsAsync(int agentNum, string OID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/list/"+ (OID==null? "" : System.Uri.EscapeDataString(OID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
		/// Evaluate the values of the specified instance instance for each specified MIB object object and return it as it would through SNMP requests.
		/// Meval_value mimic/agent/{agentNum}/value/meval/{objInsArray}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="objInsArray">Multiple objects or object (column) of the table in the agent's value space.</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Meval_valueAsync(int agentNum, string[] objInsArray, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/meval/{objInsArray}"+string.Join("&", objInsArray.Select(z => $"objInsArray={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get multiple variables in the Value Space.
		/// This is a performance optimization of the mimic value get command, to be used when many variables are requested.
		/// Mget_value mimic/agent/{agentNum}/value/mget/{objInsVarArray}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="objInsVarArray">Multiple objects or object (column) of the table in the agent's value space.</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Mget_valueAsync(int agentNum, string[] objInsVarArray, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/mget/{objInsVarArray}"+string.Join("&", objInsVarArray.Select(z => $"objInsVarArray={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return the MIB that defines the specified object.
		/// This will only return a MIB name if the object is unmistakeably defined in a MIB.
		/// Get_mib mimic/agent/{agentNum}/value/mib/{object}
		/// </summary>
		/// <param name="agentNum">Agent to show the MIB</param>
		/// <param name="_object">Object</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_mibAsync(int agentNum, string _object, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/mib/"+ (_object==null? "" : System.Uri.EscapeDataString(_object));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set multiple variables in the Value Space.
		/// This is a performance optimization of the mimic value set command, to be used when many variables are to be set.
		/// Mset_value mimic/agent/{agentNum}/value/mset
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="requestBody">objInsVarValArray</param>
		/// <returns>successful operation</returns>
		public async Task<string> Mset_valueAsync(int agentNum, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/mset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unset multiple variables in the Value Space
		/// This is a performance optimization of the mimic value unset command, to be used when many variables are to be unset.
		/// Munset_value mimic/agent/{agentNum}/value/munset
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="requestBody">objInsVarArray</param>
		/// <returns>successful operation</returns>
		public async Task<string> Munset_valueAsync(int agentNum, string[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/munset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Return the symbolic name of the specified object identifier.
		/// Return the symbolic name of the specified object identifier.
		/// Get_name mimic/agent/{agentNum}/value/name/{OID}
		/// </summary>
		/// <param name="agentNum">Agent to show the object</param>
		/// <param name="OID">OID</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_nameAsync(int agentNum, string OID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/name/"+ (OID==null? "" : System.Uri.EscapeDataString(OID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return the numeric OID of the specified object.
		/// Return the numeric OID of the specified object.
		/// Get_oid mimic/agent/{agentNum}/value/oid/{object}
		/// </summary>
		/// <param name="agentNum">Agent to show the OID</param>
		/// <param name="_object">Object</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_oidAsync(int agentNum, string _object, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/oid/"+ (_object==null? "" : System.Uri.EscapeDataString(_object));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove an entry from a table.
		/// The object needs to specify the MIB object with the INDEX clause, usually an object whose name ends with Entry.
		/// Remove mimic/agent/{agentNum}/value/remove/{object}/{instance}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_object">Object (column) of the table in the agent's value space</param>
		/// <param name="instance">Object (column) of the table in the agent's value space</param>
		/// <returns>successful operation</returns>
		public async Task<string> RemoveAsync(int agentNum, string _object, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/remove/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/"+ (instance==null? "" : System.Uri.EscapeDataString(instance));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set a variable in the Value Space.
		/// NOTE to set a binary string value, specify a string starting with \\x followed by pairs of hexadecimal digits, eg. "\\x 01 23 45". This command also assigns SNMP PDU action scripts for GET* and SET requests on a MIB object. The instance parameter must be 0. The following variables enable actions, g - The specified TCL script will be run on GET or GETNEXT requests. It has to exist under the simulation directory. s - The specified script will be run on SET requests. It has to exist under the simulation directory. This command also controls advanced trap generation functionality. The following variables control trap generation r, tu, c - These variables together represent the rate settings for the trap. r and tu is the actual per second rate and c represents the total duration in seconds for which the trap is sent. As soon as the c variable is set, the trap generation begins, for this reason it should be the last variable set for a particular trap. The following variables have to be set before setting the c variable to modify the behavior of the generated trap(s). OBJECT - An object name when used as a variable is looked up during the trap send and the value of that variable is included in the PDU. OBJECT.i - This type of variable will be used to assign an optional instance for the specified object in the traps varbind. The value of this variable identifies the index. e.g. The commands below will send ifIndex.2 with a value of 5 in the linkUp trap PDU. i - This variable is used to specify any extra version specific information to the trap generation code. Here is what it can be used to represent for various SNMP versions SNMPv1 - [community_string][,[enterprise][,agent_addr]] SNMPv2c - community_string SNMPv2 - source_party,destination_party,context SNMPv3 - user_name,context v - This variable lets the user override the version of the PDU being generated. The possible values are - "1", "2c", "2" and "3". o - This variable is used for traps that need extra variables to be added to the PDU along with the ones defined in the MIB as its variables. This lets the user force extra objects (along with instances if needed). All variables to be sent need to be assigned to the o variable. O - To omit any variables which are defined in the MIB you can use the O (capital o) variable. This needs to be set to the list of OIDs of the variable bindings in the order defined in the MIB. ip - The variable ip is used for generating the trap from the N-th IP alias address. a - This variable associates an action script to the trap or INFORM request. The action script specified in the value of this variable has to exist in the simulation directory. It will be executed before each instance of the trap is sent out. I - This optional variable controls the generation of INFORM PDUs. An INFORM is sent only if the variable is non-zero, else a TRAP is generated. R, T, E - This variable associates an action script to the INFORM request. The action script specified in the value of this variable has to exist in the simulation directory. The action script associated with the R variable will be executed on receiving a INFORM RESPONSE, the one associated with the T variable on a timeout (ie. no response), the one associated with the E variable on a report PDU. eid.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine id for the destination specified by IP-ADDRESS and optionally by PORT. eb.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine boots. et.IP-ADDRESS.PORT - control variable allows to configure message authoritative engine time.
		/// Set_value mimic/agent/{agentNum}/value/set/{object}/{instance}/{variable}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_object">Single instance object or object (column) of the table in the agent's value space.</param>
		/// <param name="instance">Row of the table in the agent's value space. 0 for single instance objects</param>
		/// <param name="variable">Variable</param>
		/// <param name="requestBody">Value</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_valueAsync(int agentNum, string _object, string instance, string variable, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/set/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/"+ (variable==null? "" : System.Uri.EscapeDataString(variable));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Split the numerical OID into the object OID and instance OID.
		/// This is useful if you have an OID which is a combination of object and instance.
		/// Split_oid mimic/agent/{agentNum}/value/split/{OID}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="OID">OID</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Split_oidAsync(int agentNum, string OID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/split/"+ (OID==null? "" : System.Uri.EscapeDataString(OID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the state of a MIB object object.
		/// To disable traversal into a MIB object and any subtree underneath, set the state to 0, else set the state to 1.
		/// Get_state mimic/agent/{agentNum}/value/state/get/{object}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_object">Object</param>
		/// <returns>successful operation</returns>
		public async Task<string> Get_stateAsync(int agentNum, string _object, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/state/get/"+ (_object==null? "" : System.Uri.EscapeDataString(_object));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the state of a MIB object object
		/// To disable traversal into a MIB object and any subtree underneath, set the state to 0, else set the state to 1.
		/// Set_state mimic/agent/{agentNum}/value/state/set/{object}/{state}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_object">Object</param>
		/// <param name="state">State</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_stateAsync(int agentNum, string _object, int state, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/state/set/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/"+state;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unset a variable in the Value Space in order to free its memory.
		/// Only variables that have previously been set can be unset.
		/// Unset_value mimic/agent/{agentNum}/value/unset/{object}/{instance}/{variable}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_object">Single instance object or object (column) of the table in the agent's value space.</param>
		/// <param name="instance">Row of the table in the agent's value space. 0 for single instance objects</param>
		/// <param name="variable">Variable</param>
		/// <returns>successful operation</returns>
		public async Task<string> Unset_valueAsync(int agentNum, string _object, string instance, string variable, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/unset/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/"+ (instance==null? "" : System.Uri.EscapeDataString(instance))+"/"+ (variable==null? "" : System.Uri.EscapeDataString(variable));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Display the variables for the specified instance instance for the specified MIB object object
		/// This enables variable browsing of the MIB on the current agent.
		/// Get_variables mimic/agent/{agentNum}/value/variables/{object}/{instance}
		/// </summary>
		/// <param name="agentNum">Agent of the value space</param>
		/// <param name="_object">Single instance object or object (column) of the table in the agent's value space.</param>
		/// <param name="instance">Row of the table in the agent's value space. 0 for single instance objects</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Get_variablesAsync(int agentNum, string _object, string instance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/agent/"+agentNum+"/value/variables/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/"+ (instance==null? "" : System.Uri.EscapeDataString(instance));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear the lab configuration.
		/// Clear the lab configuration.
		/// Cfg_new mimic/clear/{firstAgentNum}/{lastAgentNum}
		/// </summary>
		/// <param name="firstAgentNum">Agent number to start clearing</param>
		/// <param name="lastAgentNum">Agent number to end the clearing</param>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Cfg_newAsync(int firstAgentNum, int lastAgentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/clear/"+firstAgentNum+"/"+lastAgentNum;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The list of {agentnum {statistics}} for agents that are currently active and whose statistics have changed since the last invocation of this command.
		/// This list is guaranteed to be sorted into increasing order.
		/// Get_active_data_list mimic/get/active_data_list
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<int[]> Get_active_data_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/active_data_list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The list of {agentnum} that are currently active (running or paused).
		/// This list is guaranteed to be sorted into increasing order.
		/// Get_active_list mimic/get/active_list
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<int[]> Get_active_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/active_list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The currently loaded lab configuration file for the particular user.
		/// In the case of multi-user access this command returns a different configuration file loaded for each user.
		/// Get_cfgfile mimic/get/cfgfile
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Get_cfgfileAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/cfgfile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This predicate indicates if the currently loaded agent configuration file has changed.
		/// Whether the loaded agent configuration file has changed since the last time this predicate was queried. This allows for a client to detect agent configuration changes and to synchronize those changes from the MIMIC daemon.
		/// Get_cfg_file_changed mimic/get/cfgfile_changed
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Get_cfg_file_changedAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/cfgfile_changed";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The list of {agentnum} for which a configurable parameter changed.
		/// This list contains at most 5000 agent(s), and is guaranteed to be sorted into increasing order.
		/// Get_changed_config_list mimic/get/changed_config_list
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<int[]> Get_changed_config_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/changed_config_list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The list of {agentnum state} for which the state changed.
		/// This list contains at most 5000 agent(s), and is guaranteed to be sorted into increasing order.
		/// Get_changed_state_list mimic/get/changed_state_list
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<AgentState[]> Get_changed_state_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/changed_state_list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AgentState[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The number of clients currently connected to the daemon.
		/// The number of clients currently connected to the daemon.
		/// Get_clients mimic/get/clients
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Get_clientsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/clients";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The list of {agentnum} that are currently configured.
		/// This list is guaranteed to be sorted into increasing order.
		/// Get_configured_list mimic/get/configured_list
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<int[]> Get_configured_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/configured_list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The set of network interfaces that can be used for simulations.
		/// The set of network interfaces that can be used for simulations.
		/// Get_interfaces mimic/get/interfaces
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Get_interfacesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/interfaces";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The last configured agent instance.
		/// The last configured agent instance.
		/// Get_last mimic/get/last
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<int> Get_lastAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/last";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The current log file for the Simulator.
		/// The current log file for the Simulator.
		/// Get_log mimic/get/log
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Get_logAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/log";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The maximum number of agent instances.
		/// The maximum number of agent instances.
		/// Get_max mimic/get/max
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<int> Get_maxAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/max";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<int>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The network address of the host where the MIMIC simulator is running.
		/// The network address of the host where the MIMIC simulator is running.
		/// Get_netaddr mimic/get/netaddr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Get_netaddrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/netaddr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The default network device to be used for agent addresses.
		/// The default network device to be used for agent addresses if the interface is not explicitly specified for an agent.
		/// Get_netdev mimic/get/netdev
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Get_netdevAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/netdev";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The product number that is licensed.
		/// The product number that is licensed.
		/// Get_product mimic/get/product
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Get_productAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/product";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The set of protocols supported by the Simulator.
		/// The set of protocols supported by the Simulator.
		/// Get_daemon_protocols mimic/get/protocols
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Get_daemon_protocolsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/protocols";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The return mode.
		/// The OpenAPI daemon operates in two modes, nocatch, where error returns from MIMIC operations return error; or catch, where the TCL catch semantics are used (these are similar to C++ exceptions)
		/// Get_return mimic/get/return
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Get_returnAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/return";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The version of the MIMIC command interface.
		/// The version of the MIMIC command interface.
		/// Get_version mimic/get/version
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string> Get_versionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/get/version";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Load the lab configuration file file.
		/// Load agents in cfgFile from firstAgentNum to lastAgentNum on startAgentNum of current configuration
		/// Cfg_load mimic/load/{cfgFile}/{firstAgentNum}/{lastAgentNum}/{startAgentNum}
		/// </summary>
		/// <param name="cfgFile">MIMIC agent configuration file to load</param>
		/// <param name="firstAgentNum">Agent number in cfgFile to start the loading</param>
		/// <param name="lastAgentNum">Agent number in cfgFile to end the loading</param>
		/// <param name="startAgentNum">Agent number in current configuration to start placing the new agents</param>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Cfg_loadAsync(string cfgFile, int firstAgentNum, int lastAgentNum, int startAgentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/load/"+ (cfgFile==null? "" : System.Uri.EscapeDataString(cfgFile))+"/"+firstAgentNum+"/"+lastAgentNum+"/"+startAgentNum;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get multiple sets of information about MIMIC, where infoArray is one of the parameters defined in the mimic get command.
		/// Get multiple sets of information about MIMIC, where infoArray is one of the parameters defined in the mimic get command.
		/// Mget_info mimic/mget/{infoArray}
		/// </summary>
		/// <param name="infoArray">Multiple strings of info.</param>
		/// <returns>successful operation</returns>
		public async Task<string[]> Mget_infoAsync(string[] infoArray, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/mget/{infoArray}"+string.Join("&", infoArray.Select(z => $"infoArray={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the COAP statistics headers
		/// The headers of statistics fields
		/// Protocol_coap_get_stats_hdr mimic/protocol/msg/coap/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_coap_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/coap/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the DHCP statistics headers
		/// The headers of statistics fields
		/// Protocol_dhcp_get_stats_hdr mimic/protocol/msg/dhcp/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_dhcp_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/dhcp/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the IPMI statistics headers
		/// The headers of statistics fields
		/// Protocol_ipmi_get_stats_hdr mimic/protocol/msg/ipmi/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_ipmi_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/ipmi/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the MQTT statistics headers
		/// The headers of statistics fields
		/// Protocol_mqtt_get_stats_hdr mimic/protocol/msg/mqtt/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_mqtt_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/mqtt/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the NETFLOW statistics headers
		/// The headers of statistics fields
		/// Protocol_netflow_get_stats_hdr mimic/protocol/msg/netflow/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_netflow_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/netflow/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the PROXY statistics headers
		/// The headers of statistics fields
		/// Protocol_proxy_get_stats_hdr mimic/protocol/msg/proxy/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_proxy_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/proxy/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the SFLOW statistics headers
		/// The headers of statistics fields
		/// Protocol_sflow_get_stats_hdr mimic/protocol/msg/sflow/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_sflow_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/sflow/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the SNMPTCP statistics headers
		/// The headers of statistics fields
		/// Protocol_snmptcp_get_stats_hdr mimic/protocol/msg/snmptcp/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_snmptcp_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/snmptcp/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the SSH statistics headers
		/// The headers of statistics fields
		/// Protocol_ssh_get_stats_hdr mimic/protocol/msg/ssh/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_ssh_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/ssh/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the SYSLOG statistics headers
		/// The headers of statistics fields
		/// Protocol_syslog_get_stats_hdr mimic/protocol/msg/syslog/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_syslog_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/syslog/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the TELNET statistics headers
		/// The headers of statistics fields
		/// Protocol_telnet_get_stats_hdr mimic/protocol/msg/telnet/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_telnet_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/telnet/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the TFTP statistics headers
		/// The headers of statistics fields
		/// Protocol_tftp_get_stats_hdr mimic/protocol/msg/tftp/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_tftp_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/tftp/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the TOD statistics headers
		/// The headers of statistics fields
		/// Protocol_tod_get_stats_hdr mimic/protocol/msg/tod/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_tod_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/tod/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show the WEB statistics headers
		/// The headers of statistics fields
		/// Protocol_web_get_stats_hdr mimic/protocol/msg/web/get/stats_hdr
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Protocol_web_get_stats_hdrAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/protocol/msg/web/get/stats_hdr";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save the lab configuration.
		/// Save the lab configuration.
		/// Cfg_save mimic/save
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Cfg_saveAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/save";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save the lab configuration in file.
		/// Save the lab configuration in file.
		/// Cfg_saveas mimic/saveas/{cfgFile}/{firstAgentNum}/{lastAgentNum}
		/// </summary>
		/// <param name="cfgFile">MIMIC agent configuration file to save</param>
		/// <param name="firstAgentNum">Agent number in cfgFile to start the loading</param>
		/// <param name="lastAgentNum">Agent number in cfgFile to end the loading</param>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Cfg_saveasAsync(string cfgFile, int firstAgentNum, int lastAgentNum, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/saveas/"+ (cfgFile==null? "" : System.Uri.EscapeDataString(cfgFile))+"/"+firstAgentNum+"/"+lastAgentNum;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The current log file for the Simulator.
		/// The current log file for the Simulator.
		/// Set_log mimic/set/log
		/// </summary>
		/// <param name="requestBody">The file name of the new log file</param>
		/// <returns>successful operation</returns>
		public async Task<string> Set_logAsync(string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/set/log";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// The network address of the host where the MIMIC simulator is running.
		/// The network address of the host where the MIMIC simulator is running.
		/// Set_netdev mimic/set/netdev
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Set_netdevAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/set/netdev";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This operation flushes all global objects which need to be made persistent to disk.
		/// The MIMIC daemon caches persistent objects and their changes, and writes them to disk at program termination. If it were to crash, these changes would be lost. This operation allows to checkpoint the cache, ie. write changes to persistent objects to disk. To save the lab configuration with per-agent persistent information the mimic save operation needs to be used.
		/// Store_save mimic/set/persistent
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Store_saveAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/set/persistent";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start MIMIC.
		/// Start MIMIC.
		/// Start_all_agents mimic/start
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Start_all_agentsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stop MIMIC.
		/// Stop MIMIC.
		/// Stop_all_agents mimic/stop
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> Stop_all_agentsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This command can be used as a predicate to ascertain the existence of a given variable.
		/// It returns "1" if the variable exists, else "0".
		/// Store_exists mimic/store/exists/{var}
		/// </summary>
		/// <param name="_var">Variable name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Store_existsAsync(string _var, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/store/exists/"+ (_var==null? "" : System.Uri.EscapeDataString(_var));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the value associated with a variable.
		/// The value will be returned as a string (like all Tcl values).
		/// Store_get mimic/store/get/{var}
		/// </summary>
		/// <param name="_var">Variable name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Store_getAsync(string _var, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/store/get/"+ (_var==null? "" : System.Uri.EscapeDataString(_var));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This command will return the list of variables in the said scope.
		/// The list will be a Tcl format list with curly braces "{}" around each list element. These elements in turn are space separated.
		/// Store_list mimic/store/list
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<string[]> Store_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/store/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.
		/// These commands treat the variable as a list, and allow to replace an entry in the list at the specified index with the specified value. The variable has to already exist.
		/// Store_lreplace mimic/store/lreplace/{var}/{index}
		/// </summary>
		/// <param name="_var">Variable name</param>
		/// <param name="index">Index</param>
		/// <param name="requestBody">Value</param>
		/// <returns>successful operation</returns>
		public async Task<string> Store_lreplaceAsync(string _var, int index, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/store/lreplace/"+ (_var==null? "" : System.Uri.EscapeDataString(_var))+"/"+index;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This command can be used as a predicate to ascertain the persistence of a given variable.
		/// It returns "1" if the variable is persistent, else "0".
		/// Store_persists mimic/store/persists/{var}
		/// </summary>
		/// <param name="_var">Variable name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Store_persistsAsync(string _var, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/store/persists/"+ (_var==null? "" : System.Uri.EscapeDataString(_var));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the variable store for the global storage
		/// Persist 1 means persistent , 0 means non-persistent
		/// Store_set mimic/store/set/{var}/{persist}
		/// </summary>
		/// <param name="_var">Variable name</param>
		/// <param name="persist">Persistent setting</param>
		/// <param name="requestBody">Value</param>
		/// <returns>successful operation</returns>
		public async Task<string> Store_setAsync(string _var, int persist, string requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/store/set/"+ (_var==null? "" : System.Uri.EscapeDataString(_var))+"/"+persist;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a variable which is currently defined.
		/// This will cleanup persistent variables if needed
		/// Store_unset mimic/store/unset/{var}
		/// </summary>
		/// <param name="_var">Variable name</param>
		/// <returns>successful operation</returns>
		public async Task<string> Store_unsetAsync(string _var, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/store/unset/"+ (_var==null? "" : System.Uri.EscapeDataString(_var));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Terminate the MIMIC daemon.
		/// Terminate the MIMIC daemon.
		/// Terminate mimic/terminate
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<System.Collections.Generic.Dictionary<string, int>> TerminateAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/terminate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<System.Collections.Generic.Dictionary<string, int>>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new timer script to be executed at specified interval (in msec) with the specified argument.
		/// Add a new timer script to be executed at specified interval (in msec) with the specified argument.
		/// Add_daemon_timer_script mimic/timer/script/add/{script}/{interval}/{arg}
		/// </summary>
		/// <param name="script">Script name</param>
		/// <param name="interval">Interval in msec</param>
		/// <param name="arg">Arguments to the script</param>
		/// <returns>successful operation</returns>
		public async Task<string> Add_daemon_timer_scriptAsync(string script, int interval, string arg, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/timer/script/add/"+ (script==null? "" : System.Uri.EscapeDataString(script))+"/"+interval+"/"+ (arg==null? "" : System.Uri.EscapeDataString(arg));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a timer script from the execution list.
		/// The first scheduled script that matches the script name, and optionally the interval and argument will be deleted.
		/// Del_daemon_timer_script mimic/timer/script/delete/{script}/{interval}/{arg}
		/// </summary>
		/// <param name="script">Script name</param>
		/// <param name="interval">Interval in msec</param>
		/// <param name="arg">Arguments to the script</param>
		/// <returns>successful operation</returns>
		public async Task<string> Del_daemon_timer_scriptAsync(string script, int interval, string arg, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/timer/script/delete/"+ (script==null? "" : System.Uri.EscapeDataString(script))+"/"+interval+"/"+ (arg==null? "" : System.Uri.EscapeDataString(arg));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the timer scripts currently running along with the their intervals.
		/// The command mimic timer script list lists global timer scripts, the command /mimic/timer/script/{agentNum}/list is the per-agent equivalent NOTE Global timer scripts run globally but within them you can address individual agents using {agentNum}. To schedule timerscripts for an individual agent, use /mimic/timer/script/{agentNum}.
		/// List_daemon_timer_scripts mimic/timer/script/list
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<TimerScript[]> List_daemon_timer_scriptsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mimic/timer/script/list";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimerScript[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
