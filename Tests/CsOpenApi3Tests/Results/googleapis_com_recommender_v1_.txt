//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Contains metadata about how much money a recommendation can save or incur.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1CostProjection
	{
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cost")]
		public GoogleTypeMoney Cost { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costInLocalCurrency")]
		public GoogleTypeMoney CostInLocalCurrency { get; set; }
		
		/// <summary>
		/// Duration for which this cost applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
	}
	
	/// <summary>
	/// Represents an amount of money with its currency type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleTypeMoney
	{
		
		/// <summary>
		/// The three-letter currency code defined in ISO 4217.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	/// <summary>
	/// Contains the impact a recommendation can have for a given category.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1Impact
	{
		
		/// <summary>
		/// Category that is being targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<GoogleCloudRecommenderV1ImpactCategory> Category { get; set; }
		
		/// <summary>
		/// Contains metadata about how much money a recommendation can save or incur.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costProjection")]
		public GoogleCloudRecommenderV1CostProjection CostProjection { get; set; }
		
		/// <summary>
		/// Contains information on the impact of a reliability recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reliabilityProjection")]
		public GoogleCloudRecommenderV1ReliabilityProjection ReliabilityProjection { get; set; }
		
		/// <summary>
		/// Contains various ways of describing the impact on Security.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityProjection")]
		public GoogleCloudRecommenderV1SecurityProjection SecurityProjection { get; set; }
		
		/// <summary>
		/// Contains metadata about how much sustainability a recommendation can save or incur.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sustainabilityProjection")]
		public GoogleCloudRecommenderV1SustainabilityProjection SustainabilityProjection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GoogleCloudRecommenderV1ImpactCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATEGORY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECURITY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGEABILITY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSTAINABILITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELIABILITY = 6,
	}
	
	/// <summary>
	/// Contains information on the impact of a reliability recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1ReliabilityProjection
	{
		
		/// <summary>
		/// Per-recommender projection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public System.Collections.Generic.Dictionary<string, object> Details { get; set; }
		
		/// <summary>
		/// Reliability risks mitigated by this recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="risks")]
		public string[] Risks { get; set; }
	}
	
	/// <summary>
	/// Contains various ways of describing the impact on Security.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1SecurityProjection
	{
		
		/// <summary>
		/// Additional security impact details that is provided by the recommender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public System.Collections.Generic.Dictionary<string, object> Details { get; set; }
	}
	
	/// <summary>
	/// Contains metadata about how much sustainability a recommendation can save or incur.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1SustainabilityProjection
	{
		
		/// <summary>
		/// Duration for which this sustainability applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// Carbon Footprint generated in kg of CO2 equivalent. Chose kg_c_o2e so that the name renders correctly in camelCase (kgCO2e).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kgCO2e")]
		public System.Nullable<System.Double> KgCO2e { get; set; }
	}
	
	/// <summary>
	/// An insight along with the information used to derive the insight. The insight may have associated recommendations as well.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1Insight
	{
		
		/// <summary>
		/// Recommendations derived from this insight.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatedRecommendations")]
		public GoogleCloudRecommenderV1InsightRecommendationReference[] AssociatedRecommendations { get; set; }
		
		/// <summary>
		/// Category being targeted by the insight.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public GoogleCloudRecommenderV1ImpactCategory Category { get; set; }
		
		/// <summary>
		/// A struct of custom fields to explain the insight. Example: "grantedPermissionsCount": "1000"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public System.Collections.Generic.Dictionary<string, object> Content { get; set; }
		
		/// <summary>
		/// Free-form human readable summary in English. The maximum length is 500 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Fingerprint of the Insight. Provides optimistic locking when updating states.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Insight subtype. Insight content schema will be stable for a given subtype.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insightSubtype")]
		public string InsightSubtype { get; set; }
		
		/// <summary>
		/// Timestamp of the latest data used to generate the insight.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRefreshTime")]
		public string LastRefreshTime { get; set; }
		
		/// <summary>
		/// Name of the insight.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Observation period that led to the insight. The source data used to generate the insight ends at last_refresh_time and begins at (last_refresh_time - observation_period).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="observationPeriod")]
		public string ObservationPeriod { get; set; }
		
		/// <summary>
		/// Insight's severity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<GoogleCloudRecommenderV1InsightSeverity> Severity { get; set; }
		
		/// <summary>
		/// Information related to insight state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateInfo")]
		public GoogleCloudRecommenderV1InsightStateInfo StateInfo { get; set; }
		
		/// <summary>
		/// Fully qualified resource names that this insight is targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResources")]
		public string[] TargetResources { get; set; }
	}
	
	/// <summary>
	/// Reference to an associated recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1InsightRecommendationReference
	{
		
		/// <summary>
		/// Recommendation resource name, e.g. projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/recommendations/[RECOMMENDATION_ID]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendation")]
		public string Recommendation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GoogleCloudRecommenderV1InsightSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 4,
	}
	
	/// <summary>
	/// Information related to insight state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1InsightStateInfo
	{
		
		/// <summary>
		/// Insight state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<GoogleCloudRecommenderV1InsightStateInfoState> State { get; set; }
		
		/// <summary>
		/// A map of metadata for the state, provided by user or automations systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateMetadata")]
		public System.Collections.Generic.Dictionary<string, string> StateMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GoogleCloudRecommenderV1InsightStateInfoState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISMISSED = 3,
	}
	
	/// <summary>
	/// Configuration for an InsightType.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1InsightTypeConfig
	{
		
		/// <summary>
		/// Allows clients to store small amounts of arbitrary data. Annotations must follow the Kubernetes syntax. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// A user-settable field to provide a human-readable name to be used in user interfaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Fingerprint of the InsightTypeConfig. Provides optimistic locking when updating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// A configuration to customize the generation of insights. Eg, customizing the lookback period considered when generating a insight.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insightTypeGenerationConfig")]
		public GoogleCloudRecommenderV1InsightTypeGenerationConfig InsightTypeGenerationConfig { get; set; }
		
		/// <summary>
		/// Name of insight type config. Eg, projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Immutable. The revision ID of the config. A new revision is committed whenever the config is changed in any way. The format is an 8-character hexadecimal string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Last time when the config was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// A configuration to customize the generation of insights. Eg, customizing the lookback period considered when generating a insight.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1InsightTypeGenerationConfig
	{
		
		/// <summary>
		/// Parameters for this InsightTypeGenerationConfig. These configs can be used by or are applied to all subtypes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, object> Params { get; set; }
	}
	
	/// <summary>
	/// Response to the `ListInsights` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1ListInsightsResponse
	{
		
		/// <summary>
		/// The set of insights for the `parent` resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insights")]
		public GoogleCloudRecommenderV1Insight[] Insights { get; set; }
		
		/// <summary>
		/// A token that can be used to request the next page of results. This field is empty if there are no additional results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response to the `ListRecommendations` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1ListRecommendationsResponse
	{
		
		/// <summary>
		/// A token that can be used to request the next page of results. This field is empty if there are no additional results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The set of recommendations for the `parent` resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendations")]
		public GoogleCloudRecommenderV1Recommendation[] Recommendations { get; set; }
	}
	
	/// <summary>
	/// A recommendation along with a suggested action. E.g., a rightsizing recommendation for an underutilized VM, IAM role recommendations, etc
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1Recommendation
	{
		
		/// <summary>
		/// Optional set of additional impact that this recommendation may have when trying to optimize for the primary category. These may be positive or negative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalImpact")]
		public GoogleCloudRecommenderV1Impact[] AdditionalImpact { get; set; }
		
		/// <summary>
		/// Insights that led to this recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatedInsights")]
		public GoogleCloudRecommenderV1RecommendationInsightReference[] AssociatedInsights { get; set; }
		
		/// <summary>
		/// Contains what resources are changing and how they are changing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public GoogleCloudRecommenderV1RecommendationContent Content { get; set; }
		
		/// <summary>
		/// Free-form human readable summary in English. The maximum length is 500 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Fingerprint of the Recommendation. Provides optimistic locking when updating states.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Last time this recommendation was refreshed by the system that created it in the first place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRefreshTime")]
		public string LastRefreshTime { get; set; }
		
		/// <summary>
		/// Name of recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Contains the impact a recommendation can have for a given category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryImpact")]
		public GoogleCloudRecommenderV1Impact PrimaryImpact { get; set; }
		
		/// <summary>
		/// Recommendation's priority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<GoogleCloudRecommenderV1RecommendationPriority> Priority { get; set; }
		
		/// <summary>
		/// Contains an identifier for a subtype of recommendations produced for the same recommender. Subtype is a function of content and impact, meaning a new subtype might be added when significant changes to `content` or `primary_impact.category` are introduced. See the Recommenders section to see a list of subtypes for a given Recommender. Examples: For recommender = "google.iam.policy.Recommender", recommender_subtype can be one of "REMOVE_ROLE"/"REPLACE_ROLE"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommenderSubtype")]
		public string RecommenderSubtype { get; set; }
		
		/// <summary>
		/// Information for state. Contains state and metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateInfo")]
		public GoogleCloudRecommenderV1RecommendationStateInfo StateInfo { get; set; }
		
		/// <summary>
		/// Corresponds to a mutually exclusive group ID within a recommender. A non-empty ID indicates that the recommendation belongs to a mutually exclusive group. This means that only one recommendation within the group is suggested to be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xorGroupId")]
		public string XorGroupId { get; set; }
	}
	
	/// <summary>
	/// Reference to an associated insight.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1RecommendationInsightReference
	{
		
		/// <summary>
		/// Insight resource name, e.g. projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]/insights/[INSIGHT_ID]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insight")]
		public string Insight { get; set; }
	}
	
	/// <summary>
	/// Contains what resources are changing and how they are changing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1RecommendationContent
	{
		
		/// <summary>
		/// Operations to one or more Google Cloud resources grouped in such a way that, all operations within one group are expected to be performed atomically and in an order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationGroups")]
		public GoogleCloudRecommenderV1OperationGroup[] OperationGroups { get; set; }
		
		/// <summary>
		/// Condensed overview information about the recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public System.Collections.Generic.Dictionary<string, object> Overview { get; set; }
	}
	
	/// <summary>
	/// Group of operations that need to be performed atomically.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1OperationGroup
	{
		
		/// <summary>
		/// List of operations across one or more resources that belong to this group. Loosely based on RFC6902 and should be performed in the order they appear.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public GoogleCloudRecommenderV1Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// Contains an operation for a resource loosely based on the JSON-PATCH format with support for: * Custom filters for describing partial array patch. * Extended path values for describing nested arrays. * Custom fields for describing the resource for which the operation is being described. * Allows extension to custom operations not natively supported by RFC6902. See https://tools.ietf.org/html/rfc6902 for details on the original RFC.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1Operation
	{
		
		/// <summary>
		/// Type of this operation. Contains one of 'add', 'remove', 'replace', 'move', 'copy', 'test' and custom operations. This field is case-insensitive and always populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Path to the target field being operated on. If the operation is at the resource level, then path should be "/". This field is always populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Set of filters to apply if `path` refers to array elements or nested array elements in order to narrow down to a single unique element that is being tested/modified. This is intended to be an exact match per filter. To perform advanced matching, use path_value_matchers. * Example: ``` { "/versions/*/name" : "it-123" "/versions/*/targetSize/percent": 20 } ``` * Example: ``` { "/bindings/*/role": "roles/owner" "/bindings/*/condition" : null } ``` * Example: ``` { "/bindings/*/role": "roles/owner" "/bindings/*/members/*" : ["x@example.com", "y@example.com"] } ``` When both path_filters and path_value_matchers are set, an implicit AND must be performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathFilters")]
		public System.Collections.Generic.Dictionary<string, object> PathFilters { get; set; }
		
		/// <summary>
		/// Similar to path_filters, this contains set of filters to apply if `path` field refers to array elements. This is meant to support value matching beyond exact match. To perform exact match, use path_filters. When both path_filters and path_value_matchers are set, an implicit AND must be performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathValueMatchers")]
		public System.Collections.Generic.Dictionary<string, GoogleCloudRecommenderV1ValueMatcher> PathValueMatchers { get; set; }
		
		/// <summary>
		/// Contains the fully qualified resource name. This field is always populated. ex: //cloudresourcemanager.googleapis.com/projects/foo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Type of GCP resource being modified/tested. This field is always populated. Example: cloudresourcemanager.googleapis.com/Project, compute.googleapis.com/Instance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		/// <summary>
		/// Can be set with action 'copy' or 'move' to indicate the source field within resource or source_resource, ignored if provided for other operation types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourcePath")]
		public string SourcePath { get; set; }
		
		/// <summary>
		/// Can be set with action 'copy' to copy resource configuration across different resources of the same type. Example: A resource clone can be done via action = 'copy', path = "/", from = "/", source_resource = and resource_name = . This field is empty for all other values of `action`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceResource")]
		public string SourceResource { get; set; }
		
		/// <summary>
		/// Value for the `path` field. Will be set for actions:'add'/'replace'. Maybe set for action: 'test'. Either this or `value_matcher` will be set for 'test' operation. An exact match must be performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
		
		/// <summary>
		/// Contains various matching options for values for a GCP resource field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueMatcher")]
		public GoogleCloudRecommenderV1ValueMatcher ValueMatcher { get; set; }
	}
	
	/// <summary>
	/// Contains various matching options for values for a GCP resource field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1ValueMatcher
	{
		
		/// <summary>
		/// To be used for full regex matching. The regular expression is using the Google RE2 syntax (https://github.com/google/re2/wiki/Syntax), so to be used with RE2::FullMatch
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchesPattern")]
		public string MatchesPattern { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GoogleCloudRecommenderV1RecommendationPriority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIORITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P4 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		P1 = 4,
	}
	
	/// <summary>
	/// Information for state. Contains state and metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1RecommendationStateInfo
	{
		
		/// <summary>
		/// The state of the recommendation, Eg ACTIVE, SUCCEEDED, FAILED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<GoogleCloudRecommenderV1RecommendationStateInfoState> State { get; set; }
		
		/// <summary>
		/// A map of metadata for the state, provided by user or automations systems.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateMetadata")]
		public System.Collections.Generic.Dictionary<string, string> StateMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GoogleCloudRecommenderV1RecommendationStateInfoState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLAIMED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISMISSED = 5,
	}
	
	/// <summary>
	/// Request for the `MarkInsightAccepted` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1MarkInsightAcceptedRequest
	{
		
		/// <summary>
		/// Required. Fingerprint of the Insight. Provides optimistic locking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Optional. State properties user wish to include with this state. Full replace of the current state_metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateMetadata")]
		public System.Collections.Generic.Dictionary<string, string> StateMetadata { get; set; }
	}
	
	/// <summary>
	/// Request for the `MarkRecommendationClaimed` Method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1MarkRecommendationClaimedRequest
	{
		
		/// <summary>
		/// Required. Fingerprint of the Recommendation. Provides optimistic locking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// State properties to include with this state. Overwrites any existing `state_metadata`. Keys must match the regex `/^a-z0-9{0,62}$/`. Values must match the regex `/^[a-zA-Z0-9_./-]{0,255}$/`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateMetadata")]
		public System.Collections.Generic.Dictionary<string, string> StateMetadata { get; set; }
	}
	
	/// <summary>
	/// Request for the `MarkRecommendationDismissed` Method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1MarkRecommendationDismissedRequest
	{
		
		/// <summary>
		/// Fingerprint of the Recommendation. Provides optimistic locking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
	}
	
	/// <summary>
	/// Request for the `MarkRecommendationFailed` Method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1MarkRecommendationFailedRequest
	{
		
		/// <summary>
		/// Required. Fingerprint of the Recommendation. Provides optimistic locking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// State properties to include with this state. Overwrites any existing `state_metadata`. Keys must match the regex `/^a-z0-9{0,62}$/`. Values must match the regex `/^[a-zA-Z0-9_./-]{0,255}$/`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateMetadata")]
		public System.Collections.Generic.Dictionary<string, string> StateMetadata { get; set; }
	}
	
	/// <summary>
	/// Request for the `MarkRecommendationSucceeded` Method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1MarkRecommendationSucceededRequest
	{
		
		/// <summary>
		/// Required. Fingerprint of the Recommendation. Provides optimistic locking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// State properties to include with this state. Overwrites any existing `state_metadata`. Keys must match the regex `/^a-z0-9{0,62}$/`. Values must match the regex `/^[a-zA-Z0-9_./-]{0,255}$/`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateMetadata")]
		public System.Collections.Generic.Dictionary<string, string> StateMetadata { get; set; }
	}
	
	/// <summary>
	/// Configuration for a Recommender.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1RecommenderConfig
	{
		
		/// <summary>
		/// Allows clients to store small amounts of arbitrary data. Annotations must follow the Kubernetes syntax. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// A user-settable field to provide a human-readable name to be used in user interfaces.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Fingerprint of the RecommenderConfig. Provides optimistic locking when updating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Name of recommender config. Eg, projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A Configuration to customize the generation of recommendations. Eg, customizing the lookback period considered when generating a recommendation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommenderGenerationConfig")]
		public GoogleCloudRecommenderV1RecommenderGenerationConfig RecommenderGenerationConfig { get; set; }
		
		/// <summary>
		/// Output only. Immutable. The revision ID of the config. A new revision is committed whenever the config is changed in any way. The format is an 8-character hexadecimal string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Last time when the config was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// A Configuration to customize the generation of recommendations. Eg, customizing the lookback period considered when generating a recommendation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudRecommenderV1RecommenderGenerationConfig
	{
		
		/// <summary>
		/// Parameters for this RecommenderGenerationConfig. These configs can be used by or are applied to all subtypes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, object> Params { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the requested recommendation. Requires the recommender.*.get IAM permission for the specified recommender.
		/// Recommender_projects_locations_recommenders_recommendations_get v1/{name}
		/// </summary>
		/// <param name="name">Required. Name of the recommendation.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecommenderV1Recommendation> Recommender_projects_locations_recommenders_recommendations_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudRecommenderV1Recommendation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a Recommender Config. This will create a new revision of the config.
		/// Recommender_projects_locations_recommenders_updateConfig v1/{name}
		/// </summary>
		/// <param name="name">Name of recommender config. Eg, projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]/config</param>
		/// <param name="updateMask">The list of fields to be updated.</param>
		/// <param name="validateOnly">If true, validate the request and preview the change, but do not actually update it.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecommenderV1RecommenderConfig> Recommender_projects_locations_recommenders_updateConfigAsync(string name, string updateMask, bool validateOnly, GoogleCloudRecommenderV1RecommenderConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudRecommenderV1RecommenderConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Marks the Insight State as Accepted. Users can use this method to indicate to the Recommender API that they have applied some action based on the insight. This stops the insight content from being updated. MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the recommender.*.update IAM permission for the specified insight.
		/// Recommender_projects_locations_insightTypes_insights_markAccepted v1/{name}:markAccepted
		/// </summary>
		/// <param name="name">Required. Name of the insight.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecommenderV1Insight> Recommender_projects_locations_insightTypes_insights_markAcceptedAsync(string name, GoogleCloudRecommenderV1MarkInsightAcceptedRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":markAccepted";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudRecommenderV1Insight>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Marks the Recommendation State as Claimed. Users can use this method to indicate to the Recommender API that they are starting to apply the recommendation themselves. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationClaimed can be applied to recommendations in CLAIMED, SUCCEEDED, FAILED, or ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
		/// Recommender_projects_locations_recommenders_recommendations_markClaimed v1/{name}:markClaimed
		/// </summary>
		/// <param name="name">Required. Name of the recommendation.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecommenderV1Recommendation> Recommender_projects_locations_recommenders_recommendations_markClaimedAsync(string name, GoogleCloudRecommenderV1MarkRecommendationClaimedRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":markClaimed";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudRecommenderV1Recommendation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Mark the Recommendation State as Dismissed. Users can use this method to indicate to the Recommender API that an ACTIVE recommendation has to be marked back as DISMISSED. MarkRecommendationDismissed can be applied to recommendations in ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.
		/// Recommender_projects_locations_recommenders_recommendations_markDismissed v1/{name}:markDismissed
		/// </summary>
		/// <param name="name">Required. Name of the recommendation.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecommenderV1Recommendation> Recommender_projects_locations_recommenders_recommendations_markDismissedAsync(string name, GoogleCloudRecommenderV1MarkRecommendationDismissedRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":markDismissed";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudRecommenderV1Recommendation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Marks the Recommendation State as Failed. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation failed. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationFailed can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
		/// Recommender_projects_locations_recommenders_recommendations_markFailed v1/{name}:markFailed
		/// </summary>
		/// <param name="name">Required. Name of the recommendation.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecommenderV1Recommendation> Recommender_projects_locations_recommenders_recommendations_markFailedAsync(string name, GoogleCloudRecommenderV1MarkRecommendationFailedRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":markFailed";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudRecommenderV1Recommendation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Marks the Recommendation State as Succeeded. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation was successful. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationSucceeded can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.
		/// Recommender_projects_locations_recommenders_recommendations_markSucceeded v1/{name}:markSucceeded
		/// </summary>
		/// <param name="name">Required. Name of the recommendation.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecommenderV1Recommendation> Recommender_projects_locations_recommenders_recommendations_markSucceededAsync(string name, GoogleCloudRecommenderV1MarkRecommendationSucceededRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":markSucceeded";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudRecommenderV1Recommendation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists insights for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified insight type.
		/// Recommender_projects_locations_insightTypes_insights_list v1/{parent}/insights
		/// </summary>
		/// <param name="parent">Required. The container resource on which to execute the request. Acceptable formats: * `projects/[PROJECT_NUMBER]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]` * `projects/[PROJECT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]` * `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]` * `folders/[FOLDER_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]` * `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/insightTypes/[INSIGHT_TYPE_ID]` LOCATION here refers to GCP Locations: https://cloud.google.com/about/locations/ INSIGHT_TYPE_ID refers to supported insight types: https://cloud.google.com/recommender/docs/insights/insight-types.</param>
		/// <param name="filter">Optional. Filter expression to restrict the insights returned. Supported filter fields: * `stateInfo.state` * `insightSubtype` * `severity` * `targetResources` Examples: * `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED` * `insightSubtype = PERMISSIONS_USAGE` * `severity = CRITICAL OR severity = HIGH` * `targetResources : //compute.googleapis.com/projects/1234/zones/us-central1-a/instances/instance-1` * `stateInfo.state = ACTIVE AND (severity = CRITICAL OR severity = HIGH)` The max allowed filter length is 500 characters. (These expressions are based on the filter language described at https://google.aip.dev/160)</param>
		/// <param name="pageSize">Optional. The maximum number of results to return from this request. Non-positive values are ignored. If not specified, the server will determine the number of results to return.</param>
		/// <param name="pageToken">Optional. If present, retrieves the next batch of results from the preceding call to this method. `page_token` must be the value of `next_page_token` from the previous response. The values of other method parameters must be identical to those in the previous call.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecommenderV1ListInsightsResponse> Recommender_projects_locations_insightTypes_insights_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/insights&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudRecommenderV1ListInsightsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists recommendations for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified recommender.
		/// Recommender_projects_locations_recommenders_recommendations_list v1/{parent}/recommendations
		/// </summary>
		/// <param name="parent">Required. The container resource on which to execute the request. Acceptable formats: * `projects/[PROJECT_NUMBER]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` * `projects/[PROJECT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` * `billingAccounts/[BILLING_ACCOUNT_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` * `folders/[FOLDER_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` * `organizations/[ORGANIZATION_ID]/locations/[LOCATION]/recommenders/[RECOMMENDER_ID]` LOCATION here refers to GCP Locations: https://cloud.google.com/about/locations/ RECOMMENDER_ID refers to supported recommenders: https://cloud.google.com/recommender/docs/recommenders.</param>
		/// <param name="filter">Filter expression to restrict the recommendations returned. Supported filter fields: * `state_info.state` * `recommenderSubtype` * `priority` * `targetResources` Examples: * `stateInfo.state = ACTIVE OR stateInfo.state = DISMISSED` * `recommenderSubtype = REMOVE_ROLE OR recommenderSubtype = REPLACE_ROLE` * `priority = P1 OR priority = P2` * `targetResources : //compute.googleapis.com/projects/1234/zones/us-central1-a/instances/instance-1` * `stateInfo.state = ACTIVE AND (priority = P1 OR priority = P2)` The max allowed filter length is 500 characters. (These expressions are based on the filter language described at https://google.aip.dev/160)</param>
		/// <param name="pageSize">Optional. The maximum number of results to return from this request. Non-positive values are ignored. If not specified, the server will determine the number of results to return.</param>
		/// <param name="pageToken">Optional. If present, retrieves the next batch of results from the preceding call to this method. `page_token` must be the value of `next_page_token` from the previous response. The values of other method parameters must be identical to those in the previous call.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudRecommenderV1ListRecommendationsResponse> Recommender_projects_locations_recommenders_recommendations_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/recommendations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudRecommenderV1ListRecommendationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
