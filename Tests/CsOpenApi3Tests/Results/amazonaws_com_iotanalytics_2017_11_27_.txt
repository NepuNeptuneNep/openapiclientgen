//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchPutMessageResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="batchPutMessageErrorEntries")]
		public BatchPutMessageErrorEntry[] BatchPutMessageErrorEntries { get; set; }
	}
	
	/// <summary>
	/// Contains informations about errors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchPutMessageErrorEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
	}
	
	/// <summary>
	/// Information about a message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Message
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelPipelineReprocessingResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelArn")]
		public string ChannelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public RetentionPeriod RetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// How long, in days, message data is kept.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RetentionPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="unlimited")]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfDays")]
		public System.Nullable<System.Int32> NumberOfDays { get; set; }
	}
	
	/// <summary>
	/// Used to store channel data in an S3 bucket managed by IoT Analytics. You can't change the choice of S3 storage after the data store is created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceManagedChannelS3Storage
	{
	}
	
	/// <summary>
	/// Used to store channel data in an S3 bucket that you manage. If customer-managed storage is selected, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice of S3 storage after the data store is created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerManagedChannelS3Storage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPrefix")]
		public string KeyPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// A set of key-value pairs that are used to manage the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDatasetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasetName")]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetArn")]
		public string DatasetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public RetentionPeriod RetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// A <code>DatasetAction</code> object that specifies how dataset contents are automatically created.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryAction")]
		public SqlQueryDatasetAction QueryAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerAction")]
		public ContainerDatasetAction ContainerAction { get; set; }
	}
	
	/// <summary>
	/// The SQL query to modify the message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SqlQueryDatasetAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sqlQuery")]
		public string SqlQuery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public QueryFilter[] Filters { get; set; }
	}
	
	/// <summary>
	/// Information that is used to filter message data, to segregate it according to the timeframe in which it arrives.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="deltaTime")]
		public DeltaTime DeltaTime { get; set; }
	}
	
	/// <summary>
	/// Used to limit data to that which has arrived since the last execution of the action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeltaTime
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offsetSeconds")]
		public int OffsetSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeExpression")]
		public string TimeExpression { get; set; }
	}
	
	/// <summary>
	/// Information required to run the <code>containerAction</code> to produce dataset contents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerDatasetAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionRoleArn")]
		public string ExecutionRoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceConfiguration")]
		public ResourceConfiguration ResourceConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public Variable[] Variables { get; set; }
	}
	
	/// <summary>
	/// The configuration of the resource used to execute the <code>containerAction</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="computeType")]
		public ComputeType ComputeType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="volumeSizeInGB")]
		public int VolumeSizeInGB { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ComputeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACU_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACU_2 = 1,
	}
	
	/// <summary>
	/// An instance of a variable to be passed to the <code>containerAction</code> execution. Each variable must have a name and a value given by one of <code>stringValue</code>, <code>datasetContentVersionValue</code>, or <code>outputFileUriValue</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Variable
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetContentVersionValue")]
		public DatasetContentVersionValue DatasetContentVersionValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputFileUriValue")]
		public OutputFileUriValue OutputFileUriValue { get; set; }
	}
	
	/// <summary>
	/// The dataset whose latest contents are used as input to the notebook or application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetContentVersionValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetName")]
		public string DatasetName { get; set; }
	}
	
	/// <summary>
	/// The value of the variable as a structure that specifies an output file URI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputFileUriValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
	}
	
	/// <summary>
	/// The <code>DatasetTrigger</code> that specifies when the dataset is automatically updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetTrigger
	{
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public Schedule Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public TriggeringDataset Dataset { get; set; }
	}
	
	/// <summary>
	/// The schedule for when to trigger an update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Schedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
	}
	
	/// <summary>
	/// Information about the dataset whose content generation triggers the new dataset content generation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TriggeringDataset
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// When dataset contents are created, they are delivered to destination specified here.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetContentDeliveryRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="entryName")]
		public string EntryName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public DatasetContentDeliveryDestination Destination { get; set; }
	}
	
	/// <summary>
	/// The destination to which dataset contents are delivered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetContentDeliveryDestination
	{
		
		[System.Runtime.Serialization.DataMember(Name="iotEventsDestinationConfiguration")]
		public IotEventsDestinationConfiguration IotEventsDestinationConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3DestinationConfiguration")]
		public S3DestinationConfiguration S3DestinationConfiguration { get; set; }
	}
	
	/// <summary>
	/// Configuration information for delivery of dataset contents to IoT Events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IotEventsDestinationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputName")]
		public string InputName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Configuration information for delivery of dataset contents to Amazon Simple Storage Service (Amazon S3).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3DestinationConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="glueConfiguration")]
		public GlueConfiguration GlueConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	/// Configuration information for coordination with Glue, a fully managed extract, transform and load (ETL) service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlueConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="databaseName")]
		public string DatabaseName { get; set; }
	}
	
	/// <summary>
	/// A structure that contains the name and configuration information of a late data rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LateDataRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="ruleName")]
		public string RuleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleConfiguration")]
		public LateDataRuleConfiguration RuleConfiguration { get; set; }
	}
	
	/// <summary>
	/// The information needed to configure a delta time session window.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LateDataRuleConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="deltaTimeSessionWindowConfiguration")]
		public DeltaTimeSessionWindowConfiguration DeltaTimeSessionWindowConfiguration { get; set; }
	}
	
	/// <summary>
	/// <p>A structure that contains the configuration information of a delta time session window.</p> <p> <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html"> <code>DeltaTime</code> </a> specifies a time interval. You can use <code>DeltaTime</code> to create dataset contents with data that has arrived in the data store since the last execution. For an example of <code>DeltaTime</code>, see <a href="https://docs.aws.amazon.com/iotanalytics/latest/userguide/automate-create-dataset.html#automate-example6"> Creating a SQL dataset with a delta window (CLI)</a> in the <i>IoT Analytics User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeltaTimeSessionWindowConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeoutInMinutes")]
		public int TimeoutInMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDatasetContentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="versionId")]
		public string VersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDatastoreResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datastoreName")]
		public string DatastoreName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datastoreArn")]
		public string DatastoreArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public RetentionPeriod RetentionPeriod { get; set; }
	}
	
	/// <summary>
	/// Used to store data in an Amazon S3 bucket managed by IoT Analytics. You can't change the choice of Amazon S3 storage after your data store is created. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceManagedDatastoreS3Storage
	{
	}
	
	/// <summary>
	/// S3-customer-managed; When you choose customer-managed storage, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice of Amazon S3 storage after your data store is created. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerManagedDatastoreS3Storage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPrefix")]
		public string KeyPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	///  Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatastoreIotSiteWiseMultiLayerStorage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customerManagedS3Storage")]
		public IotSiteWiseCustomerManagedDatastoreS3Storage CustomerManagedS3Storage { get; set; }
	}
	
	/// <summary>
	///  Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IotSiteWiseCustomerManagedDatastoreS3Storage
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPrefix")]
		public string KeyPrefix { get; set; }
	}
	
	/// <summary>
	/// Contains the configuration information of the JSON format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JsonConfiguration
	{
	}
	
	/// <summary>
	/// Contains the configuration information of the Parquet format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParquetConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="schemaDefinition")]
		public SchemaDefinition SchemaDefinition { get; set; }
	}
	
	/// <summary>
	/// Information needed to define a schema.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchemaDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public Column[] Columns { get; set; }
	}
	
	/// <summary>
	/// Contains information about a column that stores your data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Column
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	///  A single dimension to partition a data store. The dimension must be an <code>AttributePartition</code> or a <code>TimestampPartition</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatastorePartition
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributePartition")]
		public Partition AttributePartition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestampPartition")]
		public TimestampPartition TimestampPartition { get; set; }
	}
	
	/// <summary>
	///  A partition dimension defined by an attribute. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Partition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributeName")]
		public string AttributeName { get; set; }
	}
	
	/// <summary>
	///  A partition dimension defined by a timestamp attribute. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimestampPartition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributeName")]
		public string AttributeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestampFormat")]
		public string TimestampFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineArn")]
		public string PipelineArn { get; set; }
	}
	
	/// <summary>
	/// An activity that performs a transformation on a message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineActivity
	{
		
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public ChannelActivity Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambda")]
		public LambdaActivity Lambda { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datastore")]
		public DatastoreActivity Datastore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addAttributes")]
		public AddAttributesActivity AddAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="removeAttributes")]
		public RemoveAttributesActivity RemoveAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selectAttributes")]
		public SelectAttributesActivity SelectAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public FilterActivity Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="math")]
		public MathActivity Math { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceRegistryEnrich")]
		public DeviceRegistryEnrichActivity DeviceRegistryEnrich { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceShadowEnrich")]
		public DeviceShadowEnrichActivity DeviceShadowEnrich { get; set; }
	}
	
	/// <summary>
	/// The activity that determines the source of the messages to be processed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChannelActivity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// An activity that runs a Lambda function to modify the message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaActivity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lambdaName")]
		public string LambdaName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="batchSize")]
		public int BatchSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// The datastore activity that specifies where to store the processed data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatastoreActivity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreName")]
		public string DatastoreName { get; set; }
	}
	
	/// <summary>
	/// An activity that adds other attributes based on existing attributes in the message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddAttributesActivity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public AttributeNameMapping Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeNameMapping
	{
	}
	
	/// <summary>
	/// An activity that removes attributes from a message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveAttributesActivity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// Used to create a new message using only the specified attributes from the original message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SelectAttributesActivity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// An activity that filters a message based on its attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterActivity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// An activity that computes an arithmetic expression using the message's attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MathActivity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public string Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="math")]
		public string Math { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// An activity that adds data from the IoT device registry to your message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceRegistryEnrichActivity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public string Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
	}
	
	/// <summary>
	/// An activity that adds information from the IoT Device Shadow service to a message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceShadowEnrichActivity
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public string Attribute { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thingName")]
		public string ThingName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeChannelResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public Channel Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public ChannelStatistics Statistics { get; set; }
	}
	
	/// <summary>
	/// A collection of data from an MQTT topic. Channels archive the raw, unprocessed messages before publishing the data to a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Channel
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storage")]
		public ChannelStorage Storage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ChannelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastMessageArrivalTime")]
		public System.DateTimeOffset LastMessageArrivalTime { get; set; }
	}
	
	/// <summary>
	/// Where channel data is stored. You may choose one of <code>serviceManagedS3</code>, <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. This can't be changed after creation of the channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChannelStorage
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceManagedS3")]
		public ServiceManagedChannelS3Storage ServiceManagedS3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerManagedS3")]
		public CustomerManagedChannelS3Storage CustomerManagedS3 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChannelStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
	}
	
	/// <summary>
	/// Statistics information about the channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChannelStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public EstimatedResourceSize Size { get; set; }
	}
	
	/// <summary>
	/// The estimated size of the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EstimatedResourceSize
	{
		
		[System.Runtime.Serialization.DataMember(Name="estimatedSizeInBytes")]
		public System.Nullable<System.Double> EstimatedSizeInBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="estimatedOn")]
		public System.DateTimeOffset EstimatedOn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDatasetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public Dataset Dataset { get; set; }
	}
	
	/// <summary>
	/// Information about a dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dataset
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public DatasetAction[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		public DatasetTrigger[] Triggers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentDeliveryRules")]
		public DatasetContentDeliveryRule[] ContentDeliveryRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ChannelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versioningConfiguration")]
		public VersioningConfiguration VersioningConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lateDataRules")]
		public LateDataRule[] LateDataRules { get; set; }
	}
	
	/// <summary>
	/// Information about the versioning of dataset contents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VersioningConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="unlimited")]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxVersions")]
		public System.Nullable<System.Int32> MaxVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDatastoreResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datastore")]
		public Datastore Datastore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public DatastoreStatistics Statistics { get; set; }
	}
	
	/// <summary>
	/// Information about a data store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Datastore
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="storage")]
		public DatastoreStorage Storage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ChannelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastMessageArrivalTime")]
		public System.DateTimeOffset LastMessageArrivalTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileFormatConfiguration")]
		public FileFormatConfiguration FileFormatConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datastorePartitions")]
		public DatastorePartitions DatastorePartitions { get; set; }
	}
	
	/// <summary>
	/// Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatastoreStorage
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceManagedS3")]
		public ServiceManagedDatastoreS3Storage ServiceManagedS3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerManagedS3")]
		public CustomerManagedDatastoreS3Storage CustomerManagedS3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotSiteWiseMultiLayerStorage")]
		public DatastoreIotSiteWiseMultiLayerStorage IotSiteWiseMultiLayerStorage { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p> <p>The default file format is JSON. You can specify only one format.</p> <p>You can't change the file format after you create the data store.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileFormatConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="jsonConfiguration")]
		public JsonConfiguration JsonConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parquetConfiguration")]
		public ParquetConfiguration ParquetConfiguration { get; set; }
	}
	
	/// <summary>
	///  Contains information about the partition dimensions in a data store. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatastorePartitions
	{
		
		[System.Runtime.Serialization.DataMember(Name="partitions")]
		public DatastorePartition[] Partitions { get; set; }
	}
	
	/// <summary>
	/// Statistical information about the data store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatastoreStatistics
	{
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public EstimatedResourceSize Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeLoggingOptionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="loggingOptions")]
		public LoggingOptions LoggingOptions { get; set; }
	}
	
	/// <summary>
	/// Information about logging options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoggingOptions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="level")]
		public LoggingLevel Level { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LoggingLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePipelineResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipeline")]
		public Pipeline Pipeline { get; set; }
	}
	
	/// <summary>
	/// Contains information about a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pipeline
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public PipelineActivity[] Activities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reprocessingSummaries")]
		public ReprocessingSummary[] ReprocessingSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
	}
	
	/// <summary>
	/// Information about pipeline reprocessing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReprocessingSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReprocessingStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReprocessingStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDatasetContentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DatasetEntry[] Entries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DatasetContentStatus Status { get; set; }
	}
	
	/// <summary>
	/// The reference to a dataset entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="entryName")]
		public string EntryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataURI")]
		public string DataURI { get; set; }
	}
	
	/// <summary>
	/// The state of the dataset contents and the reason they are in this state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetContentStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public DatasetContentState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatasetContentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListChannelsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="channelSummaries")]
		public ChannelSummary[] ChannelSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChannelSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelStorage")]
		public ChannelStorageSummary ChannelStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ChannelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastMessageArrivalTime")]
		public System.DateTimeOffset LastMessageArrivalTime { get; set; }
	}
	
	/// <summary>
	/// Where channel data is stored.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChannelStorageSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceManagedS3")]
		public ServiceManagedChannelS3StorageSummary ServiceManagedS3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerManagedS3")]
		public CustomerManagedChannelS3StorageSummary CustomerManagedS3 { get; set; }
	}
	
	/// <summary>
	/// Used to store channel data in an S3 bucket managed by IoT Analytics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceManagedChannelS3StorageSummary
	{
	}
	
	/// <summary>
	/// Used to store channel data in an S3 bucket that you manage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerManagedChannelS3StorageSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPrefix")]
		public string KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatasetContentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasetContentSummaries")]
		public DatasetContentSummary[] DatasetContentSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about dataset contents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetContentSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DatasetContentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduleTime")]
		public System.DateTimeOffset ScheduleTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatasetsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasetSummaries")]
		public DatasetSummary[] DatasetSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="datasetName")]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ChannelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		public DatasetTrigger[] Triggers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public DatasetActionSummary[] Actions { get; set; }
	}
	
	/// <summary>
	/// Information about the action that automatically creates the dataset's contents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetActionSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionType")]
		public DatasetActionType ActionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatasetActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUERY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTAINER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatastoresResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="datastoreSummaries")]
		public DatastoreSummary[] DatastoreSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a data store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatastoreSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="datastoreName")]
		public string DatastoreName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datastoreStorage")]
		public DatastoreStorageSummary DatastoreStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ChannelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastMessageArrivalTime")]
		public System.DateTimeOffset LastMessageArrivalTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileFormatType")]
		public FileFormatType FileFormatType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datastorePartitions")]
		public DatastorePartitions DatastorePartitions { get; set; }
	}
	
	/// <summary>
	/// Contains information about your data store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatastoreStorageSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceManagedS3")]
		public ServiceManagedDatastoreS3StorageSummary ServiceManagedS3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerManagedS3")]
		public CustomerManagedDatastoreS3StorageSummary CustomerManagedS3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotSiteWiseMultiLayerStorage")]
		public DatastoreIotSiteWiseMultiLayerStorageSummary IotSiteWiseMultiLayerStorage { get; set; }
	}
	
	/// <summary>
	/// Contains information about the data store that is managed by IoT Analytics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceManagedDatastoreS3StorageSummary
	{
	}
	
	/// <summary>
	/// Contains information about the data store that you manage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomerManagedDatastoreS3StorageSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPrefix")]
		public string KeyPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
	}
	
	/// <summary>
	///  Contains information about the data store that you manage, which stores data used by IoT SiteWise. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatastoreIotSiteWiseMultiLayerStorageSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="customerManagedS3Storage")]
		public IotSiteWiseCustomerManagedDatastoreS3StorageSummary CustomerManagedS3Storage { get; set; }
	}
	
	/// <summary>
	///  Contains information about the data store that you manage, which stores data used by IoT SiteWise. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IotSiteWiseCustomerManagedDatastoreS3StorageSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyPrefix")]
		public string KeyPrefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FileFormatType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARQUET = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPipelinesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineSummaries")]
		public PipelineSummary[] PipelineSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A summary of information about a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reprocessingSummaries")]
		public ReprocessingSummary[] ReprocessingSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunPipelineActivityResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="payloads")]
		public string[] Payloads { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logResult")]
		public string LogResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SampleChannelDataResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="payloads")]
		public string[] Payloads { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartPipelineReprocessingResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="reprocessingId")]
		public string ReprocessingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchPutMessageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelPipelineReprocessingRequest
	{
	}
	
	/// <summary>
	/// Specifies one or more sets of channel messages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChannelMessages
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Paths")]
		public string[] S3Paths { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateChannelRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		public string ChannelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelStorage")]
		public ChannelStorage ChannelStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDatasetContentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="versionId")]
		public string VersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDatasetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetName")]
		public string DatasetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public DatasetAction[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		public DatasetTrigger[] Triggers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentDeliveryRules")]
		public DatasetContentDeliveryRule[] ContentDeliveryRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versioningConfiguration")]
		public VersioningConfiguration VersioningConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lateDataRules")]
		public LateDataRule[] LateDataRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDatastoreRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreName")]
		public string DatastoreName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datastoreStorage")]
		public DatastoreStorage DatastoreStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileFormatConfiguration")]
		public FileFormatConfiguration FileFormatConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datastorePartitions")]
		public DatastorePartitions DatastorePartitions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePipelineRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineActivities")]
		public PipelineActivity[] PipelineActivities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatasetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatastoreStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteChannelRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDatasetContentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDatasetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDatastoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePipelineRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeChannelRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDatasetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDatastoreRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeLoggingOptionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePipelineRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetDatasetContentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListChannelsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatasetContentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatasetsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatastoresRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPipelinesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutLoggingOptionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loggingOptions")]
		public LoggingOptions LoggingOptions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunPipelineActivityRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineActivity")]
		public PipelineActivity PipelineActivity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payloads")]
		public string[] Payloads { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SampleChannelDataRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartPipelineReprocessingRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelMessages")]
		public ChannelMessages ChannelMessages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateChannelRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="channelStorage")]
		public ChannelStorage ChannelStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public RetentionPeriod RetentionPeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDatasetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public DatasetAction[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		public DatasetTrigger[] Triggers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentDeliveryRules")]
		public DatasetContentDeliveryRule[] ContentDeliveryRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versioningConfiguration")]
		public VersioningConfiguration VersioningConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lateDataRules")]
		public LateDataRule[] LateDataRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDatastoreRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public RetentionPeriod RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datastoreStorage")]
		public DatastoreStorage DatastoreStorage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileFormatConfiguration")]
		public FileFormatConfiguration FileFormatConfiguration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatePipelineRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineActivities")]
		public PipelineActivity[] PipelineActivities { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Sends messages to a channel.
		/// BatchPutMessage messages/batch
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchPutMessageResponse> BatchPutMessageAsync(BatchPutMessagePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "messages/batch";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchPutMessageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancels the reprocessing of data through the pipeline.
		/// CancelPipelineReprocessing pipelines/{pipelineName}/reprocessing/{reprocessingId}
		/// </summary>
		/// <param name="pipelineName">The name of pipeline for which data reprocessing is canceled.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="reprocessingId">The ID of the reprocessing task (returned by <code>StartPipelineReprocessing</code>).</param>
		/// <returns>Success</returns>
		public async Task<CancelPipelineReprocessingResponse> CancelPipelineReprocessingAsync(string pipelineName, string reprocessingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pipelines/"+ (pipelineName==null? "" : System.Uri.EscapeDataString(pipelineName))+"/reprocessing/"+ (reprocessingId==null? "" : System.Uri.EscapeDataString(reprocessingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelPipelineReprocessingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Used to create a channel. A channel collects data from an MQTT topic and archives the raw, unprocessed messages before publishing the data to a pipeline.
		/// CreateChannel channels
		/// </summary>
		public async Task CreateChannelAsync(CreateChannelPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of channels.
		/// ListChannels channels
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults"><p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListChannelsResponse> ListChannelsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListChannelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Used to create a dataset. A dataset stores data retrieved from a data store by applying a <code>queryAction</code> (a SQL query) or a <code>containerAction</code> (executing a containerized application). This operation creates the skeleton of a dataset. The dataset can be populated manually by calling <code>CreateDatasetContent</code> or automatically according to a trigger you specify.
		/// CreateDataset datasets
		/// </summary>
		public async Task CreateDatasetAsync(CreateDatasetPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about datasets.
		/// ListDatasets datasets
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults"><p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListDatasetsResponse> ListDatasetsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDatasetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates the content of a dataset by applying a <code>queryAction</code> (a SQL query) or a <code>containerAction</code> (executing a containerized application).
		/// CreateDatasetContent datasets/{datasetName}/content
		/// </summary>
		/// <param name="datasetName">The name of the dataset.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateDatasetContentResponse> CreateDatasetContentAsync(string datasetName, CreateDatasetContentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetName==null? "" : System.Uri.EscapeDataString(datasetName))+"/content";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDatasetContentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the content of the specified dataset.
		/// DeleteDatasetContent datasets/{datasetName}/content
		/// </summary>
		/// <param name="datasetName">The name of the dataset whose content is deleted.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="versionId">The version of the dataset whose content is deleted. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to delete the latest or latest successfully completed data set. If not specified, "$LATEST_SUCCEEDED" is the default.
		/// Min length: 7
		/// Max length: 36
		// </param>
		public async Task DeleteDatasetContentAsync(string datasetName, string versionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetName==null? "" : System.Uri.EscapeDataString(datasetName))+"/content&versionId=" + (versionId==null? "" : System.Uri.EscapeDataString(versionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the contents of a dataset as presigned URIs.
		/// GetDatasetContent datasets/{datasetName}/content
		/// </summary>
		/// <param name="datasetName">The name of the dataset whose contents are retrieved.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="versionId">The version of the dataset whose contents are retrieved. You can also use the strings "$LATEST" or "$LATEST_SUCCEEDED" to retrieve the contents of the latest or latest successfully completed dataset. If not specified, "$LATEST_SUCCEEDED" is the default.
		/// Min length: 7
		/// Max length: 36
		// </param>
		/// <returns>Success</returns>
		public async Task<GetDatasetContentResponse> GetDatasetContentAsync(string datasetName, string versionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetName==null? "" : System.Uri.EscapeDataString(datasetName))+"/content&versionId=" + (versionId==null? "" : System.Uri.EscapeDataString(versionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDatasetContentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a data store, which is a repository for messages.
		/// CreateDatastore datastores
		/// </summary>
		public async Task CreateDatastoreAsync(CreateDatastorePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastores";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of data stores.
		/// ListDatastores datastores
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults"><p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListDatastoresResponse> ListDatastoresAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastores?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDatastoresResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a pipeline. A pipeline consumes messages from a channel and allows you to process the messages before storing them in a data store. You must specify both a <code>channel</code> and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in the <code>pipelineActivities</code> array.
		/// CreatePipeline pipelines
		/// </summary>
		public async Task CreatePipelineAsync(CreatePipelinePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pipelines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of pipelines.
		/// ListPipelines pipelines
		/// </summary>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults"><p>The maximum number of results to return in this request.</p> <p>The default value is 100.</p>
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>Success</returns>
		public async Task<ListPipelinesResponse> ListPipelinesAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pipelines?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPipelinesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified channel.
		/// DeleteChannel channels/{channelName}
		/// </summary>
		/// <param name="channelName">The name of the channel to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		public async Task DeleteChannelAsync(string channelName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (channelName==null? "" : System.Uri.EscapeDataString(channelName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a channel.
		/// DescribeChannel channels/{channelName}
		/// </summary>
		/// <param name="channelName">The name of the channel whose information is retrieved.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="includeStatistics">If true, additional statistical information about the channel is included in the response. This feature can't be used with a channel whose S3 storage is customer-managed.</param>
		/// <returns>Success</returns>
		public async Task<DescribeChannelResponse> DescribeChannelAsync(string channelName, bool includeStatistics, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (channelName==null? "" : System.Uri.EscapeDataString(channelName))+"&includeStatistics="+includeStatistics;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeChannelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Used to update the settings of a channel.
		/// UpdateChannel channels/{channelName}
		/// </summary>
		/// <param name="channelName">The name of the channel to be updated.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task UpdateChannelAsync(string channelName, UpdateChannelPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (channelName==null? "" : System.Uri.EscapeDataString(channelName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified dataset.</p> <p>You do not have to delete the content of the dataset before you perform this operation.</p>
		/// DeleteDataset datasets/{datasetName}
		/// </summary>
		/// <param name="datasetName">The name of the dataset to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		public async Task DeleteDatasetAsync(string datasetName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetName==null? "" : System.Uri.EscapeDataString(datasetName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a dataset.
		/// DescribeDataset datasets/{datasetName}
		/// </summary>
		/// <param name="datasetName">The name of the dataset whose information is retrieved.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribeDatasetResponse> DescribeDatasetAsync(string datasetName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetName==null? "" : System.Uri.EscapeDataString(datasetName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings of a dataset.
		/// UpdateDataset datasets/{datasetName}
		/// </summary>
		/// <param name="datasetName">The name of the dataset to update.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task UpdateDatasetAsync(string datasetName, UpdateDatasetPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetName==null? "" : System.Uri.EscapeDataString(datasetName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified data store.
		/// DeleteDatastore datastores/{datastoreName}
		/// </summary>
		/// <param name="datastoreName">The name of the data store to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		public async Task DeleteDatastoreAsync(string datastoreName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastores/"+ (datastoreName==null? "" : System.Uri.EscapeDataString(datastoreName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a data store.
		/// DescribeDatastore datastores/{datastoreName}
		/// </summary>
		/// <param name="datastoreName">The name of the data store
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="includeStatistics">If true, additional statistical information about the data store is included in the response. This feature can't be used with a data store whose S3 storage is customer-managed.</param>
		/// <returns>Success</returns>
		public async Task<DescribeDatastoreResponse> DescribeDatastoreAsync(string datastoreName, bool includeStatistics, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastores/"+ (datastoreName==null? "" : System.Uri.EscapeDataString(datastoreName))+"&includeStatistics="+includeStatistics;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDatastoreResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Used to update the settings of a data store.
		/// UpdateDatastore datastores/{datastoreName}
		/// </summary>
		/// <param name="datastoreName">The name of the data store to be updated.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task UpdateDatastoreAsync(string datastoreName, UpdateDatastorePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datastores/"+ (datastoreName==null? "" : System.Uri.EscapeDataString(datastoreName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified pipeline.
		/// DeletePipeline pipelines/{pipelineName}
		/// </summary>
		/// <param name="pipelineName">The name of the pipeline to delete.
		/// Min length: 1
		/// Max length: 128
		// </param>
		public async Task DeletePipelineAsync(string pipelineName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pipelines/"+ (pipelineName==null? "" : System.Uri.EscapeDataString(pipelineName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a pipeline.
		/// DescribePipeline pipelines/{pipelineName}
		/// </summary>
		/// <param name="pipelineName">The name of the pipeline whose information is retrieved.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<DescribePipelineResponse> DescribePipelineAsync(string pipelineName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pipelines/"+ (pipelineName==null? "" : System.Uri.EscapeDataString(pipelineName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePipelineResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings of a pipeline. You must specify both a <code>channel</code> and a <code>datastore</code> activity and, optionally, as many as 23 additional activities in the <code>pipelineActivities</code> array.
		/// UpdatePipeline pipelines/{pipelineName}
		/// </summary>
		/// <param name="pipelineName">The name of the pipeline to update.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task UpdatePipelineAsync(string pipelineName, UpdatePipelinePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pipelines/"+ (pipelineName==null? "" : System.Uri.EscapeDataString(pipelineName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves the current settings of the IoT Analytics logging options.
		/// DescribeLoggingOptions logging
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeLoggingOptionsResponse> DescribeLoggingOptionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "logging";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeLoggingOptionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets or updates the IoT Analytics logging options.</p> <p>If you update the value of any <code>loggingOptions</code> field, it takes up to one minute for the change to take effect. Also, if you change the policy attached to the role you specified in the <code>roleArn</code> field (for example, to correct an invalid policy), it takes up to five minutes for that change to take effect. </p>
		/// PutLoggingOptions logging
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutLoggingOptionsAsync(PutLoggingOptionsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "logging";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists information about dataset contents that have been created.
		/// ListDatasetContents datasets/{datasetName}/contents
		/// </summary>
		/// <param name="datasetName">The name of the dataset whose contents information you want to list.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="nextToken">The token for the next set of results.</param>
		/// <param name="maxResults">The maximum number of results to return in this request.
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <param name="scheduledOnOrAfter">A filter to limit results to those dataset contents whose creation is scheduled on or after the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</param>
		/// <param name="scheduledBefore">A filter to limit results to those dataset contents whose creation is scheduled before the given time. See the field <code>triggers.schedule</code> in the <code>CreateDataset</code> request. (timestamp)</param>
		/// <returns>Success</returns>
		public async Task<ListDatasetContentsResponse> ListDatasetContentsAsync(string datasetName, string nextToken, int maxResults, System.DateTimeOffset scheduledOnOrAfter, System.DateTimeOffset scheduledBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "datasets/"+ (datasetName==null? "" : System.Uri.EscapeDataString(datasetName))+"/contents&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults+"&scheduledOnOrAfter=" + scheduledOnOrAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&scheduledBefore=" + scheduledBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDatasetContentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags (metadata) that you have assigned to the resource.
		/// ListTagsForResource tags#resourceArn
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource whose tags you want to list.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#resourceArn?resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds to or modifies the tags of the given resource. Tags are metadata that can be used to manage a resource.
		/// TagResource tags#resourceArn
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource whose tags you want to modify.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		public async Task TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#resourceArn?resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Simulates the results of running a pipeline activity on a message payload.
		/// RunPipelineActivity pipelineactivities/run
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RunPipelineActivityResponse> RunPipelineActivityAsync(RunPipelineActivityPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pipelineactivities/run";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RunPipelineActivityResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a sample of messages from the specified channel ingested during the specified timeframe. Up to 10 messages can be retrieved.
		/// SampleChannelData channels/{channelName}/sample
		/// </summary>
		/// <param name="channelName">The name of the channel whose message samples are retrieved.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <param name="maxMessages">The number of sample messages to be retrieved. The limit is 10. The default is also 10.
		/// Minimum: 1
		/// Maximum: 10
		// </param>
		/// <param name="startTime">The start of the time window from which sample messages are retrieved.</param>
		/// <param name="endTime">The end of the time window from which sample messages are retrieved.</param>
		/// <returns>Success</returns>
		public async Task<SampleChannelDataResponse> SampleChannelDataAsync(string channelName, int maxMessages, System.DateTimeOffset startTime, System.DateTimeOffset endTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/"+ (channelName==null? "" : System.Uri.EscapeDataString(channelName))+"/sample&maxMessages="+maxMessages+"&startTime=" + startTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endTime=" + endTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SampleChannelDataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts the reprocessing of raw message data through the pipeline.
		/// StartPipelineReprocessing pipelines/{pipelineName}/reprocessing
		/// </summary>
		/// <param name="pipelineName">The name of the pipeline on which to start reprocessing.
		/// Min length: 1
		/// Max length: 128
		// </param>
		/// <returns>Success</returns>
		public async Task<StartPipelineReprocessingResponse> StartPipelineReprocessingAsync(string pipelineName, StartPipelineReprocessingPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "pipelines/"+ (pipelineName==null? "" : System.Uri.EscapeDataString(pipelineName))+"/reprocessing";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartPipelineReprocessingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the given tags (metadata) from the resource.
		/// UntagResource tags#resourceArn&tagKeys
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource whose tags you want to remove.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="tagKeys">The keys of those tags which you want to remove.
		/// Minimum items: 1
		/// Maximum items: 50
		// </param>
		public async Task UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags#resourceArn&tagKeys?resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class BatchPutMessagePostBody
	{
		
		/// <summary>
		/// The name of the channel where the messages are sent.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: (^(?!_{2}))(^[a-zA-Z0-9_]+$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^(?!_{2}))(^[a-zA-Z0-9_]+$)")]
		public string ChannelName { get; set; }
		
		/// <summary>
		/// <p>The list of messages to be sent. Each message has the format: { "messageId": "string", "payload": "string"}.</p> <p>The field names of message payloads (data) that you send to IoT Analytics:</p> <ul> <li> <p>Must contain only alphanumeric characters and undescores (_). No other special characters are allowed.</p> </li> <li> <p>Must begin with an alphabetic character or single underscore (_).</p> </li> <li> <p>Cannot contain hyphens (-).</p> </li> <li> <p>In regular expression terms: "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$". </p> </li> <li> <p>Cannot be more than 255 characters.</p> </li> <li> <p>Are case insensitive. (Fields named foo and FOO in the same payload are considered duplicates.)</p> </li> </ul> <p>For example, {"temp_01": 29} or {"_temp_01": 29} are valid, but {"temp-01": 29}, {"01_temp": 29} or {"__temp_01": 29} are invalid in message payloads. </p>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
	}
	
	public class CreateChannelPostBody
	{
		
		/// <summary>
		/// The name of the channel.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: (^(?!_{2}))(^[a-zA-Z0-9_]+$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channelName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^(?!_{2}))(^[a-zA-Z0-9_]+$)")]
		public string ChannelName { get; set; }
		
		/// <summary>
		/// Where channel data is stored. You may choose one of <code>serviceManagedS3</code>, <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. This can't be changed after creation of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelStorage")]
		public CreateChannelPostBodyChannelStorage ChannelStorage { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public CreateChannelPostBodyRetentionPeriod RetentionPeriod { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the channel.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateChannelPostBodyChannelStorage
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceManagedS3")]
		public ServiceManagedChannelS3Storage ServiceManagedS3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerManagedS3")]
		public CustomerManagedChannelS3Storage CustomerManagedS3 { get; set; }
	}
	
	public class CreateChannelPostBodyRetentionPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="unlimited")]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfDays")]
		public System.Nullable<System.Int32> NumberOfDays { get; set; }
	}
	
	public class CreateDatasetPostBody
	{
		
		/// <summary>
		/// The name of the dataset.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: (^(?!_{2}))(^[a-zA-Z0-9_]+$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datasetName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^(?!_{2}))(^[a-zA-Z0-9_]+$)")]
		public string DatasetName { get; set; }
		
		/// <summary>
		/// A list of actions that create the dataset contents.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public DatasetAction[] Actions { get; set; }
		
		/// <summary>
		/// A list of triggers. A trigger causes dataset contents to be populated at a specified time interval or when another dataset's contents are created. The list of triggers can be empty or contain up to five <code>DataSetTrigger</code> objects.
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public DatasetTrigger[] Triggers { get; set; }
		
		/// <summary>
		/// When dataset contents are created, they are delivered to destinations specified here.
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDeliveryRules")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public DatasetContentDeliveryRule[] ContentDeliveryRules { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public CreateDatasetPostBodyRetentionPeriod RetentionPeriod { get; set; }
		
		/// <summary>
		/// Information about the versioning of dataset contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versioningConfiguration")]
		public CreateDatasetPostBodyVersioningConfiguration VersioningConfiguration { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the dataset.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lateDataRules")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public LateDataRule[] LateDataRules { get; set; }
	}
	
	public class CreateDatasetPostBodyRetentionPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="unlimited")]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfDays")]
		public System.Nullable<System.Int32> NumberOfDays { get; set; }
	}
	
	public class CreateDatasetPostBodyVersioningConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="unlimited")]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxVersions")]
		public System.Nullable<System.Int32> MaxVersions { get; set; }
	}
	
	public class CreateDatasetContentPostBody
	{
		
		/// <summary>
		/// The version ID of the dataset content. To specify <code>versionId</code> for a dataset content, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.
		/// Min length: 7
		/// Max length: 36
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionId")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(36)]
		public string VersionId { get; set; }
	}
	
	public class CreateDatastorePostBody
	{
		
		/// <summary>
		/// The name of the data store.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: (^(?!_{2}))(^[a-zA-Z0-9_]+$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="datastoreName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^(?!_{2}))(^[a-zA-Z0-9_]+$)")]
		public string DatastoreName { get; set; }
		
		/// <summary>
		/// Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datastoreStorage")]
		public CreateDatastorePostBodyDatastoreStorage DatastoreStorage { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public CreateDatastorePostBodyRetentionPeriod RetentionPeriod { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the data store.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p> <p>The default file format is JSON. You can specify only one format.</p> <p>You can't change the file format after you create the data store.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileFormatConfiguration")]
		public CreateDatastorePostBodyFileFormatConfiguration FileFormatConfiguration { get; set; }
		
		/// <summary>
		///  Contains information about the partition dimensions in a data store. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datastorePartitions")]
		public CreateDatastorePostBodyDatastorePartitions DatastorePartitions { get; set; }
	}
	
	public class CreateDatastorePostBodyDatastoreStorage
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceManagedS3")]
		public ServiceManagedDatastoreS3Storage ServiceManagedS3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerManagedS3")]
		public CustomerManagedDatastoreS3Storage CustomerManagedS3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotSiteWiseMultiLayerStorage")]
		public DatastoreIotSiteWiseMultiLayerStorage IotSiteWiseMultiLayerStorage { get; set; }
	}
	
	public class CreateDatastorePostBodyRetentionPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="unlimited")]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfDays")]
		public System.Nullable<System.Int32> NumberOfDays { get; set; }
	}
	
	public class CreateDatastorePostBodyFileFormatConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="jsonConfiguration")]
		public JsonConfiguration JsonConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parquetConfiguration")]
		public ParquetConfiguration ParquetConfiguration { get; set; }
	}
	
	public class CreateDatastorePostBodyDatastorePartitions
	{
		
		[System.Runtime.Serialization.DataMember(Name="partitions")]
		public DatastorePartition[] Partitions { get; set; }
	}
	
	public class CreatePipelinePostBody
	{
		
		/// <summary>
		/// The name of the pipeline.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// Pattern: (^(?!_{2}))(^[a-zA-Z0-9_]+$)
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"(^(?!_{2}))(^[a-zA-Z0-9_]+$)")]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// <p>A list of <code>PipelineActivity</code> objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda unctions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p> <p>The list can be 2-25 <code>PipelineActivity</code> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity. For example:</p> <p> <code>pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]</code> </p>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineActivities")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public PipelineActivity[] PipelineActivities { get; set; }
		
		/// <summary>
		/// Metadata which can be used to manage the pipeline.
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	public class UpdateChannelPutBody
	{
		
		/// <summary>
		/// Where channel data is stored. You may choose one of <code>serviceManagedS3</code>, <code>customerManagedS3</code> storage. If not specified, the default is <code>serviceManagedS3</code>. This can't be changed after creation of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelStorage")]
		public UpdateChannelPutBodyChannelStorage ChannelStorage { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public UpdateChannelPutBodyRetentionPeriod RetentionPeriod { get; set; }
	}
	
	public class UpdateChannelPutBodyChannelStorage
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceManagedS3")]
		public ServiceManagedChannelS3Storage ServiceManagedS3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerManagedS3")]
		public CustomerManagedChannelS3Storage CustomerManagedS3 { get; set; }
	}
	
	public class UpdateChannelPutBodyRetentionPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="unlimited")]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfDays")]
		public System.Nullable<System.Int32> NumberOfDays { get; set; }
	}
	
	public class UpdateDatasetPutBody
	{
		
		/// <summary>
		/// A list of <code>DatasetAction</code> objects.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public DatasetAction[] Actions { get; set; }
		
		/// <summary>
		/// A list of <code>DatasetTrigger</code> objects. The list can be empty or can contain up to five <code>DatasetTrigger</code> objects.
		/// Minimum items: 0
		/// Maximum items: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(5)]
		public DatasetTrigger[] Triggers { get; set; }
		
		/// <summary>
		/// When dataset contents are created, they are delivered to destinations specified here.
		/// Minimum items: 0
		/// Maximum items: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDeliveryRules")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public DatasetContentDeliveryRule[] ContentDeliveryRules { get; set; }
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public UpdateDatasetPutBodyRetentionPeriod RetentionPeriod { get; set; }
		
		/// <summary>
		/// Information about the versioning of dataset contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versioningConfiguration")]
		public UpdateDatasetPutBodyVersioningConfiguration VersioningConfiguration { get; set; }
		
		/// <summary>
		/// A list of data rules that send notifications to CloudWatch, when data arrives late. To specify <code>lateDataRules</code>, the dataset must use a <a href="https://docs.aws.amazon.com/iotanalytics/latest/APIReference/API_DeltaTime.html">DeltaTimer</a> filter.
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lateDataRules")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public LateDataRule[] LateDataRules { get; set; }
	}
	
	public class UpdateDatasetPutBodyRetentionPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="unlimited")]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfDays")]
		public System.Nullable<System.Int32> NumberOfDays { get; set; }
	}
	
	public class UpdateDatasetPutBodyVersioningConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="unlimited")]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxVersions")]
		public System.Nullable<System.Int32> MaxVersions { get; set; }
	}
	
	public class UpdateDatastorePutBody
	{
		
		/// <summary>
		/// How long, in days, message data is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public UpdateDatastorePutBodyRetentionPeriod RetentionPeriod { get; set; }
		
		/// <summary>
		/// Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datastoreStorage")]
		public UpdateDatastorePutBodyDatastoreStorage DatastoreStorage { get; set; }
		
		/// <summary>
		/// <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p> <p>The default file format is JSON. You can specify only one format.</p> <p>You can't change the file format after you create the data store.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileFormatConfiguration")]
		public UpdateDatastorePutBodyFileFormatConfiguration FileFormatConfiguration { get; set; }
	}
	
	public class UpdateDatastorePutBodyRetentionPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="unlimited")]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfDays")]
		public System.Nullable<System.Int32> NumberOfDays { get; set; }
	}
	
	public class UpdateDatastorePutBodyDatastoreStorage
	{
		
		[System.Runtime.Serialization.DataMember(Name="serviceManagedS3")]
		public ServiceManagedDatastoreS3Storage ServiceManagedS3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerManagedS3")]
		public CustomerManagedDatastoreS3Storage CustomerManagedS3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iotSiteWiseMultiLayerStorage")]
		public DatastoreIotSiteWiseMultiLayerStorage IotSiteWiseMultiLayerStorage { get; set; }
	}
	
	public class UpdateDatastorePutBodyFileFormatConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="jsonConfiguration")]
		public JsonConfiguration JsonConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parquetConfiguration")]
		public ParquetConfiguration ParquetConfiguration { get; set; }
	}
	
	public class UpdatePipelinePutBody
	{
		
		/// <summary>
		/// <p>A list of <code>PipelineActivity</code> objects. Activities perform transformations on your messages, such as removing, renaming or adding message attributes; filtering messages based on attribute values; invoking your Lambda functions on messages for advanced processing; or performing mathematical transformations to normalize device data.</p> <p>The list can be 2-25 <code>PipelineActivity</code> objects and must contain both a <code>channel</code> and a <code>datastore</code> activity. Each entry in the list must contain only one activity. For example:</p> <p> <code>pipelineActivities = [ { "channel": { ... } }, { "lambda": { ... } }, ... ]</code> </p>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 25
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineActivities")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public PipelineActivity[] PipelineActivities { get; set; }
	}
	
	public class PutLoggingOptionsPutBody
	{
		
		/// <summary>
		/// Information about logging options.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loggingOptions")]
		public PutLoggingOptionsPutBodyLoggingOptions LoggingOptions { get; set; }
	}
	
	public class PutLoggingOptionsPutBodyLoggingOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public LoggingLevel Level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The new or modified tags for the resource.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 50
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public Tag[] Tags { get; set; }
	}
	
	public class RunPipelineActivityPostBody
	{
		
		/// <summary>
		/// An activity that performs a transformation on a message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineActivity")]
		public RunPipelineActivityPostBodyPipelineActivity PipelineActivity { get; set; }
		
		/// <summary>
		/// The sample message payloads on which the pipeline activity is run.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payloads")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] Payloads { get; set; }
	}
	
	public class RunPipelineActivityPostBodyPipelineActivity
	{
		
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public ChannelActivity Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambda")]
		public LambdaActivity Lambda { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datastore")]
		public DatastoreActivity Datastore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addAttributes")]
		public AddAttributesActivity AddAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="removeAttributes")]
		public RemoveAttributesActivity RemoveAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selectAttributes")]
		public SelectAttributesActivity SelectAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public FilterActivity Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="math")]
		public MathActivity Math { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceRegistryEnrich")]
		public DeviceRegistryEnrichActivity DeviceRegistryEnrich { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceShadowEnrich")]
		public DeviceShadowEnrichActivity DeviceShadowEnrich { get; set; }
	}
	
	public class StartPipelineReprocessingPostBody
	{
		
		/// <summary>
		/// <p>The start time (inclusive) of raw message data that is reprocessed.</p> <p>If you specify a value for the <code>startTime</code> parameter, you must not use the <code>channelMessages</code> object.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// <p>The end time (exclusive) of raw message data that is reprocessed.</p> <p>If you specify a value for the <code>endTime</code> parameter, you must not use the <code>channelMessages</code> object.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Specifies one or more sets of channel messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelMessages")]
		public StartPipelineReprocessingPostBodyChannelMessages ChannelMessages { get; set; }
	}
	
	public class StartPipelineReprocessingPostBodyChannelMessages
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Paths")]
		public string[] S3Paths { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
