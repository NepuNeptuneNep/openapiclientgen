//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Quantity of an item that is available to be allocated to orders
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AvailToSellQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AvailToSellQtyUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EACH = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cause
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Elements
	{
		
		[System.Runtime.Serialization.DataMember(Name="inventories")]
		public ElementsInventories[] ElementsInventories { get; set; }
	}
	
	public class ElementsInventories
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public ElementsInventoriesNodes[] ElementsInventoriesNodes { get; set; }
		
		/// <summary>
		/// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class ElementsInventoriesNodes
	{
		
		/// <summary>
		/// Quantity of an item that is available to be allocated to orders
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availToSellQty")]
		public ElementsInventoriesNodesAvailToSellQty AvailToSellQty { get; set; }
		
		/// <summary>
		/// Quantity of an item that is input by the seller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputQty")]
		public ElementsInventoriesNodesInputQty InputQty { get; set; }
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedQty")]
		public ElementsInventoriesNodesReservedQty ReservedQty { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
	}
	
	public class ElementsInventoriesNodesAvailToSellQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class ElementsInventoriesNodesInputQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class ElementsInventoriesNodesReservedQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<ErrorCategory> Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="causes")]
		public ErrorCauses[] ErrorCauses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorIdentifiers")]
		public System.Collections.Generic.Dictionary<string, object> ErrorIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<ErrorSeverity> Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ErrorCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPLICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA = 3,
	}
	
	public class ErrorCauses
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ErrorSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FeedId
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalAttributes")]
		public string AdditionalAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public string Errors { get; set; }
		
		/// <summary>
		/// A unique ID, returned from the Bulk Upload API, used for tracking the feed file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedId")]
		public string FeedId1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAllInventoriesDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public GetAllInventoriesDTONodes[] GetAllInventoriesDTONodes { get; set; }
		
		/// <summary>
		/// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class GetAllInventoriesDTONodes
	{
		
		/// <summary>
		/// Quantity of an item that is available to be allocated to orders
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availToSellQty")]
		public GetAllInventoriesDTONodesAvailToSellQty AvailToSellQty { get; set; }
		
		/// <summary>
		/// Quantity of an item that is input by the seller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputQty")]
		public GetAllInventoriesDTONodesInputQty InputQty { get; set; }
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedQty")]
		public GetAllInventoriesDTONodesReservedQty ReservedQty { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
	}
	
	public class GetAllInventoriesDTONodesAvailToSellQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class GetAllInventoriesDTONodesInputQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class GetAllInventoriesDTONodesReservedQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAllInventoriesNodeDTO
	{
		
		/// <summary>
		/// Quantity of an item that is available to be allocated to orders
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availToSellQty")]
		public GetAllInventoriesNodeDTOAvailToSellQty AvailToSellQty { get; set; }
		
		/// <summary>
		/// Quantity of an item that is input by the seller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputQty")]
		public GetAllInventoriesNodeDTOInputQty InputQty { get; set; }
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedQty")]
		public GetAllInventoriesNodeDTOReservedQty ReservedQty { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
	}
	
	public class GetAllInventoriesNodeDTOAvailToSellQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class GetAllInventoriesNodeDTOInputQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class GetAllInventoriesNodeDTOReservedQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Headers
	{
		
		/// <summary>
		/// Information about the quantity in inventory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Offset is the number of records you wish to skip before selecting results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// Total number of results for query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	/// <summary>
	/// Quantity of an item that is input by the seller
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoriesDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public InventoriesDTONodes[] InventoriesDTONodes { get; set; }
		
		/// <summary>
		/// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class InventoriesDTONodes
	{
		
		/// <summary>
		/// Quantity of an item that is available to be allocated to orders
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availToSellQty")]
		public InventoriesDTONodesAvailToSellQty AvailToSellQty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public InventoriesDTONodesErrors[] InventoriesDTONodesErrors { get; set; }
		
		/// <summary>
		/// Quantity of an item that is input by the seller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputQty")]
		public InventoriesDTONodesInputQty InputQty { get; set; }
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedQty")]
		public InventoriesDTONodesReservedQty ReservedQty { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
	}
	
	public class InventoriesDTONodesAvailToSellQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class InventoriesDTONodesErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ErrorCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="causes")]
		public InventoriesDTONodesErrorsCauses[] InventoriesDTONodesErrorsCauses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorIdentifiers")]
		public System.Collections.Generic.Dictionary<string, object> ErrorIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public ErrorSeverity Severity { get; set; }
	}
	
	public class InventoriesDTONodesErrorsCauses
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class InventoriesDTONodesInputQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class InventoriesDTONodesReservedQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Inventory
	{
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public InventoryQuantity Quantity { get; set; }
		
		/// <summary>
		/// A seller-provided Product ID. Response will have decoded value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class InventoryQuantity
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventoryWFS
	{
		
		[System.Runtime.Serialization.DataMember(Name="shipNodes")]
		public InventoryWFSShipNodes[] InventoryWFSShipNodes { get; set; }
		
		/// <summary>
		/// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class InventoryWFSShipNodes
	{
		
		/// <summary>
		/// The available quantity is the quantity of an item that is available to be allocated to orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availToSellQty")]
		public System.Nullable<System.Int32> AvailToSellQty { get; set; }
		
		/// <summary>
		/// Last changes date for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedDate")]
		public string ModifiedDate { get; set; }
		
		/// <summary>
		/// The on-hand balance is the quantity of active inventory stored at the warehouse.Active inventory is defined as the usable amount of an item that is in the warehouse.Inventory is active if it is not damaged, expired or being inspected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onHandQty")]
		public System.Nullable<System.Int32> OnHandQty { get; set; }
		
		/// <summary>
		/// Identifies fulfillment aspect of invetory. Walmart, seller or 3PL fulfilled. Possible value is 'WFSFulfilled'. In later phase we will also add seller fulfilled inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNodeType")]
		public string ShipNodeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Meta
	{
		
		/// <summary>
		/// Used for pagination to fetch the next set of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextCursor")]
		public string NextCursor { get; set; }
		
		/// <summary>
		/// Total number of Skus of the Seller. Example: '235'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Double> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultiNodeInventoryFetchResponseDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public MultiNodeInventoryFetchResponseDTOElements Elements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public MultiNodeInventoryFetchResponseDTOMeta Meta { get; set; }
	}
	
	public class MultiNodeInventoryFetchResponseDTOElements
	{
		
		[System.Runtime.Serialization.DataMember(Name="inventories")]
		public MultiNodeInventoryFetchResponseDTOElementsInventories[] MultiNodeInventoryFetchResponseDTOElementsInventories { get; set; }
	}
	
	public class MultiNodeInventoryFetchResponseDTOElementsInventories
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public MultiNodeInventoryFetchResponseDTOElementsInventoriesNodes[] MultiNodeInventoryFetchResponseDTOElementsInventoriesNodes { get; set; }
		
		/// <summary>
		/// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class MultiNodeInventoryFetchResponseDTOElementsInventoriesNodes
	{
		
		/// <summary>
		/// Quantity of an item that is available to be allocated to orders
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availToSellQty")]
		public MultiNodeInventoryFetchResponseDTOElementsInventoriesNodesAvailToSellQty AvailToSellQty { get; set; }
		
		/// <summary>
		/// Quantity of an item that is input by the seller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputQty")]
		public MultiNodeInventoryFetchResponseDTOElementsInventoriesNodesInputQty InputQty { get; set; }
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedQty")]
		public MultiNodeInventoryFetchResponseDTOElementsInventoriesNodesReservedQty ReservedQty { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
	}
	
	public class MultiNodeInventoryFetchResponseDTOElementsInventoriesNodesAvailToSellQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class MultiNodeInventoryFetchResponseDTOElementsInventoriesNodesInputQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class MultiNodeInventoryFetchResponseDTOElementsInventoriesNodesReservedQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class MultiNodeInventoryFetchResponseDTOMeta
	{
		
		/// <summary>
		/// Used for pagination to fetch the next set of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextCursor")]
		public string NextCursor { get; set; }
		
		/// <summary>
		/// Total number of Skus of the Seller. Example: '235'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Double> TotalCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultiNodeInventoryUpdateRequestDTO
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inventories")]
		public MultiNodeInventoryUpdateRequestDTOInventories Inventories { get; set; }
	}
	
	public class MultiNodeInventoryUpdateRequestDTOInventories
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public MultiNodeInventoryUpdateRequestDTOInventoriesNodes[] MultiNodeInventoryUpdateRequestDTOInventoriesNodes { get; set; }
	}
	
	public class MultiNodeInventoryUpdateRequestDTOInventoriesNodes
	{
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputQty")]
		public MultiNodeInventoryUpdateRequestDTOInventoriesNodesInputQty InputQty { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
	}
	
	public class MultiNodeInventoryUpdateRequestDTOInventoriesNodesInputQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MultiNodeInventoryUpdateResponseDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public MultiNodeInventoryUpdateResponseDTONodes[] MultiNodeInventoryUpdateResponseDTONodes { get; set; }
		
		/// <summary>
		/// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class MultiNodeInventoryUpdateResponseDTONodes
	{
		
		/// <summary>
		/// Node Update Error description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public MultiNodeInventoryUpdateResponseDTONodesErrors[] MultiNodeInventoryUpdateResponseDTONodesErrors { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
		
		/// <summary>
		/// Node Update status. Example: 'Success'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class MultiNodeInventoryUpdateResponseDTONodesErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ErrorCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="causes")]
		public MultiNodeInventoryUpdateResponseDTONodesErrorsCauses[] MultiNodeInventoryUpdateResponseDTONodesErrorsCauses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorIdentifiers")]
		public System.Collections.Generic.Dictionary<string, object> ErrorIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public ErrorSeverity Severity { get; set; }
	}
	
	public class MultiNodeInventoryUpdateResponseDTONodesErrorsCauses
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NodeDTO
	{
		
		/// <summary>
		/// Quantity of an item that is available to be allocated to orders
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availToSellQty")]
		public NodeDTOAvailToSellQty AvailToSellQty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public NodeDTOErrors[] NodeDTOErrors { get; set; }
		
		/// <summary>
		/// Quantity of an item that is input by the seller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputQty")]
		public NodeDTOInputQty InputQty { get; set; }
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedQty")]
		public NodeDTOReservedQty ReservedQty { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
	}
	
	public class NodeDTOAvailToSellQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class NodeDTOErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ErrorCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="causes")]
		public NodeDTOErrorsCauses[] NodeDTOErrorsCauses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorIdentifiers")]
		public System.Collections.Generic.Dictionary<string, object> ErrorIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public ErrorSeverity Severity { get; set; }
	}
	
	public class NodeDTOErrorsCauses
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class NodeDTOInputQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class NodeDTOReservedQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Payload
	{
		
		[System.Runtime.Serialization.DataMember(Name="inventory")]
		public PayloadInventory[] PayloadInventory { get; set; }
	}
	
	public class PayloadInventory
	{
		
		[System.Runtime.Serialization.DataMember(Name="shipNodes")]
		public PayloadInventoryShipNodes[] PayloadInventoryShipNodes { get; set; }
		
		/// <summary>
		/// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class PayloadInventoryShipNodes
	{
		
		/// <summary>
		/// The available quantity is the quantity of an item that is available to be allocated to orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availToSellQty")]
		public System.Nullable<System.Int32> AvailToSellQty { get; set; }
		
		/// <summary>
		/// Last changes date for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedDate")]
		public string ModifiedDate { get; set; }
		
		/// <summary>
		/// The on-hand balance is the quantity of active inventory stored at the warehouse.Active inventory is defined as the usable amount of an item that is in the warehouse.Inventory is active if it is not damaged, expired or being inspected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onHandQty")]
		public System.Nullable<System.Int32> OnHandQty { get; set; }
		
		/// <summary>
		/// Identifies fulfillment aspect of invetory. Walmart, seller or 3PL fulfilled. Possible value is 'WFSFulfilled'. In later phase we will also add seller fulfilled inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNodeType")]
		public string ShipNodeType { get; set; }
	}
	
	/// <summary>
	/// Quantity that has been ordered by the customers but not yet shipped
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReservedQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShipNodes
	{
		
		/// <summary>
		/// The available quantity is the quantity of an item that is available to be allocated to orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availToSellQty")]
		public System.Nullable<System.Int32> AvailToSellQty { get; set; }
		
		/// <summary>
		/// Last changes date for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedDate")]
		public string ModifiedDate { get; set; }
		
		/// <summary>
		/// The on-hand balance is the quantity of active inventory stored at the warehouse.Active inventory is defined as the usable amount of an item that is in the warehouse.Inventory is active if it is not damaged, expired or being inspected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onHandQty")]
		public System.Nullable<System.Int32> OnHandQty { get; set; }
		
		/// <summary>
		/// Identifies fulfillment aspect of invetory. Walmart, seller or 3PL fulfilled. Possible value is 'WFSFulfilled'. In later phase we will also add seller fulfilled inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNodeType")]
		public string ShipNodeType { get; set; }
	}
	
	/// <summary>
	/// Quantity that has been ordered by the customers but not yet shipped
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SupplyQuantity
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateInventoriesRequestDTO
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public UpdateInventoriesRequestDTONodes[] UpdateInventoriesRequestDTONodes { get; set; }
	}
	
	public class UpdateInventoriesRequestDTONodes
	{
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputQty")]
		public UpdateInventoriesRequestDTONodesInputQty InputQty { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
	}
	
	public class UpdateInventoriesRequestDTONodesInputQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateInventoriesRequestNodeDTO
	{
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputQty")]
		public UpdateInventoriesRequestNodeDTOInputQty InputQty { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
	}
	
	public class UpdateInventoriesRequestNodeDTOInputQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateInventoriesResponseNodeDTO
	{
		
		/// <summary>
		/// Node Update Error description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public UpdateInventoriesResponseNodeDTOErrors[] UpdateInventoriesResponseNodeDTOErrors { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
		
		/// <summary>
		/// Node Update status. Example: 'Success'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class UpdateInventoriesResponseNodeDTOErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ErrorCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="causes")]
		public UpdateInventoriesResponseNodeDTOErrorsCauses[] UpdateInventoriesResponseNodeDTOErrorsCauses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorIdentifiers")]
		public System.Collections.Generic.Dictionary<string, object> ErrorIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public ErrorSeverity Severity { get; set; }
	}
	
	public class UpdateInventoriesResponseNodeDTOErrorsCauses
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WfsInventoryDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public WfsInventoryDTOHeaders Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public WfsInventoryDTOPayload Payload { get; set; }
	}
	
	public class WfsInventoryDTOHeaders
	{
		
		/// <summary>
		/// Information about the quantity in inventory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Offset is the number of records you wish to skip before selecting results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// Total number of results for query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	public class WfsInventoryDTOPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="inventory")]
		public WfsInventoryDTOPayloadInventory[] WfsInventoryDTOPayloadInventory { get; set; }
	}
	
	public class WfsInventoryDTOPayloadInventory
	{
		
		[System.Runtime.Serialization.DataMember(Name="shipNodes")]
		public WfsInventoryDTOPayloadInventoryShipNodes[] WfsInventoryDTOPayloadInventoryShipNodes { get; set; }
		
		/// <summary>
		/// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class WfsInventoryDTOPayloadInventoryShipNodes
	{
		
		/// <summary>
		/// The available quantity is the quantity of an item that is available to be allocated to orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availToSellQty")]
		public System.Nullable<System.Int32> AvailToSellQty { get; set; }
		
		/// <summary>
		/// Last changes date for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedDate")]
		public string ModifiedDate { get; set; }
		
		/// <summary>
		/// The on-hand balance is the quantity of active inventory stored at the warehouse.Active inventory is defined as the usable amount of an item that is in the warehouse.Inventory is active if it is not damaged, expired or being inspected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onHandQty")]
		public System.Nullable<System.Int32> OnHandQty { get; set; }
		
		/// <summary>
		/// Identifies fulfillment aspect of invetory. Walmart, seller or 3PL fulfilled. Possible value is 'WFSFulfilled'. In later phase we will also add seller fulfilled inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNodeType")]
		public string ShipNodeType { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// WFS Inventory
		/// You can use this API to get the current Available to Sell inventory quantities for all WFS items in your catalog. You can also query specific SKUs or filter to only items updated after a specific date in order to reduce the response size.
		/// GetWFSInventory v3/fulfillment/inventory
		/// </summary>
		/// <param name="sku">An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', "'", '(', ')', '*', '+', ',', ';', '=', ‘ ’ as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.</param>
		/// <param name="fromModifiedDate">last inventory modified date - starting range.</param>
		/// <param name="toModifiedDate">last inventory modified date - starting range.</param>
		/// <param name="limit">Number of Sku to be returned. Cannot be larger than 300.</param>
		/// <param name="offset">Offset is the number of records you wish to skip before selecting records.</param>
		/// <returns>Successful Operation</returns>
		public async Task<GetWFSInventoryReturn> GetWFSInventoryAsync(string sku, string fromModifiedDate, string toModifiedDate, string limit, string offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/fulfillment/inventory?sku=" + (sku==null? "" : System.Uri.EscapeDataString(sku))+"&fromModifiedDate=" + (fromModifiedDate==null? "" : System.Uri.EscapeDataString(fromModifiedDate))+"&toModifiedDate=" + (toModifiedDate==null? "" : System.Uri.EscapeDataString(toModifiedDate))+"&limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&offset=" + (offset==null? "" : System.Uri.EscapeDataString(offset));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetWFSInventoryReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Multiple Item Inventory for All Ship Nodes
		/// This API will retrieve the inventory count for all of a seller's items across all ship nodes by item to ship node mapping. Inventory can be zero or non-zero. Please note that NextCursor value changes and it needs to be passed on from the previous call to next call.
		/// GetMultiNodeInventoryForAllSkuAndAllShipNodes v3/inventories
		/// </summary>
		/// <param name="limit">The number of items returned. Cannot be more than 50.</param>
		/// <param name="nextCursor">String returned from initial API call to indicate pagination. Specify nextCursor value to retrieve the next 50 items.</param>
		/// <returns>Successful Operation</returns>
		public async Task<GetMultiNodeInventoryForAllSkuAndAllShipNodesReturn> GetMultiNodeInventoryForAllSkuAndAllShipNodesAsync(string limit, string nextCursor, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/inventories?limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&nextCursor=" + (nextCursor==null? "" : System.Uri.EscapeDataString(nextCursor));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetMultiNodeInventoryForAllSkuAndAllShipNodesReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Single Item Inventory by Ship Node
		/// This API will retrieve the inventory count for an item across all ship nodes or one specific ship node. You can specify the ship node for which you want to fetch the inventory
		/// GetMultiNodeInventoryForSkuAndAllShipnodes v3/inventories/{sku}
		/// </summary>
		/// <param name="sku">An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', "'", '(', ')', '*', '+', ',', ';', '=', ‘ ’ as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.</param>
		/// <param name="shipNode">ShipNode Id of the ship node for which the inventory is requested</param>
		/// <returns>Successful Operation</returns>
		public async Task<GetMultiNodeInventoryForSkuAndAllShipnodesReturn> GetMultiNodeInventoryForSkuAndAllShipnodesAsync(string sku, string shipNode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/inventories/"+ (sku==null? "" : System.Uri.EscapeDataString(sku))+"&shipNode=" + (shipNode==null? "" : System.Uri.EscapeDataString(shipNode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetMultiNodeInventoryForSkuAndAllShipnodesReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Item Inventory per Ship Node
		/// This API will update the inventory for an item across one or more fulfillment centers, known as ship nodes.
		/// UpdateMultiNodeInventory v3/inventories/{sku}
		/// </summary>
		/// <param name="sku">An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', "'", '(', ')', '*', '+', ',', ';', '=', ‘ ’ as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.</param>
		/// <param name="requestBody">Request fields</param>
		/// <returns>Successful Operation</returns>
		public async Task<UpdateMultiNodeInventoryReturn> UpdateMultiNodeInventoryAsync(string sku, UpdateMultiNodeInventoryPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/inventories/"+ (sku==null? "" : System.Uri.EscapeDataString(sku));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateMultiNodeInventoryReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Inventory
		/// You can use this API to get the inventory for a given item.
		/// GetInventory v3/inventory
		/// </summary>
		/// <param name="sku">An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', "'", '(', ')', '*', '+', ',', ';', '=', ‘ ’, '{', '}' as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.</param>
		/// <param name="shipNode">The shipNode for which the inventory is requested</param>
		/// <returns>Successful Operation</returns>
		public async Task<GetInventoryReturn> GetInventoryAsync(string sku, string shipNode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/inventory?sku=" + (sku==null? "" : System.Uri.EscapeDataString(sku))+"&shipNode=" + (shipNode==null? "" : System.Uri.EscapeDataString(shipNode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetInventoryReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update inventory
		/// Updates the inventory for a given item.
		/// UpdateInventoryForAnItem v3/inventory
		/// </summary>
		/// <param name="sku">An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: ':', '/', '?', '#', '[', ']', '@', '!', '$', '&', "'", '(', ')', '*', '+', ',', ';', '=', ‘ ’, '{', '}' as well as '%' itself if it's a part of sku. Make sure to encode space with %20. Other characters don't need to be encoded.</param>
		/// <param name="shipNode">The shipNode for which the inventory is to be updated.</param>
		/// <param name="requestBody">File fields</param>
		/// <returns>Successful Operation</returns>
		public async Task<UpdateInventoryForAnItemReturn> UpdateInventoryForAnItemAsync(string sku, string shipNode, UpdateInventoryForAnItemPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/inventory?sku=" + (sku==null? "" : System.Uri.EscapeDataString(sku))+"&shipNode=" + (shipNode==null? "" : System.Uri.EscapeDataString(shipNode));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateInventoryForAnItemReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum UpdateBulkInventoryFeedType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inventory = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP_INVENTORY = 1,
	}
	
	public class GetWFSInventoryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public GetWFSInventoryReturnHeaders Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public GetWFSInventoryReturnPayload Payload { get; set; }
	}
	
	public class GetWFSInventoryReturnHeaders
	{
		
		/// <summary>
		/// Information about the quantity in inventory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Offset is the number of records you wish to skip before selecting results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public System.Nullable<System.Int32> Offset { get; set; }
		
		/// <summary>
		/// Total number of results for query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Int32> TotalCount { get; set; }
	}
	
	public class GetWFSInventoryReturnPayload
	{
		
		[System.Runtime.Serialization.DataMember(Name="inventory")]
		public GetWFSInventoryReturnPayloadInventory[] GetWFSInventoryReturnPayloadInventory { get; set; }
	}
	
	public class GetWFSInventoryReturnPayloadInventory
	{
		
		[System.Runtime.Serialization.DataMember(Name="shipNodes")]
		public GetWFSInventoryReturnPayloadInventoryShipNodes[] GetWFSInventoryReturnPayloadInventoryShipNodes { get; set; }
		
		/// <summary>
		/// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class GetWFSInventoryReturnPayloadInventoryShipNodes
	{
		
		/// <summary>
		/// The available quantity is the quantity of an item that is available to be allocated to orders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availToSellQty")]
		public System.Nullable<System.Int32> AvailToSellQty { get; set; }
		
		/// <summary>
		/// Last changes date for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedDate")]
		public string ModifiedDate { get; set; }
		
		/// <summary>
		/// The on-hand balance is the quantity of active inventory stored at the warehouse.Active inventory is defined as the usable amount of an item that is in the warehouse.Inventory is active if it is not damaged, expired or being inspected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onHandQty")]
		public System.Nullable<System.Int32> OnHandQty { get; set; }
		
		/// <summary>
		/// Identifies fulfillment aspect of invetory. Walmart, seller or 3PL fulfilled. Possible value is 'WFSFulfilled'. In later phase we will also add seller fulfilled inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNodeType")]
		public string ShipNodeType { get; set; }
	}
	
	public class GetMultiNodeInventoryForAllSkuAndAllShipNodesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElements Elements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnMeta Meta { get; set; }
	}
	
	public class GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElements
	{
		
		[System.Runtime.Serialization.DataMember(Name="inventories")]
		public GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElementsInventories[] GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElementsInventories { get; set; }
	}
	
	public class GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElementsInventories
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElementsInventoriesNodes[] GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElementsInventoriesNodes { get; set; }
		
		/// <summary>
		/// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElementsInventoriesNodes
	{
		
		/// <summary>
		/// Quantity of an item that is available to be allocated to orders
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availToSellQty")]
		public GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElementsInventoriesNodesAvailToSellQty AvailToSellQty { get; set; }
		
		/// <summary>
		/// Quantity of an item that is input by the seller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputQty")]
		public GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElementsInventoriesNodesInputQty InputQty { get; set; }
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedQty")]
		public GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElementsInventoriesNodesReservedQty ReservedQty { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
	}
	
	public class GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElementsInventoriesNodesAvailToSellQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElementsInventoriesNodesInputQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnElementsInventoriesNodesReservedQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class GetMultiNodeInventoryForAllSkuAndAllShipNodesReturnMeta
	{
		
		/// <summary>
		/// Used for pagination to fetch the next set of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextCursor")]
		public string NextCursor { get; set; }
		
		/// <summary>
		/// Total number of Skus of the Seller. Example: '235'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalCount")]
		public System.Nullable<System.Double> TotalCount { get; set; }
	}
	
	public class GetMultiNodeInventoryForSkuAndAllShipnodesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodes[] GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodes { get; set; }
		
		/// <summary>
		/// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodes
	{
		
		/// <summary>
		/// Quantity of an item that is available to be allocated to orders
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availToSellQty")]
		public GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodesAvailToSellQty AvailToSellQty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodesErrors[] GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodesErrors { get; set; }
		
		/// <summary>
		/// Quantity of an item that is input by the seller
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputQty")]
		public GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodesInputQty InputQty { get; set; }
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservedQty")]
		public GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodesReservedQty ReservedQty { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
	}
	
	public class GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodesAvailToSellQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodesErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ErrorCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="causes")]
		public GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodesErrorsCauses[] GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodesErrorsCauses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorIdentifiers")]
		public System.Collections.Generic.Dictionary<string, object> ErrorIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public ErrorSeverity Severity { get; set; }
	}
	
	public class GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodesErrorsCauses
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodesInputQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class GetMultiNodeInventoryForSkuAndAllShipnodesReturnNodesReservedQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class UpdateMultiNodeInventoryPutBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inventories")]
		public UpdateMultiNodeInventoryPutBodyInventories Inventories { get; set; }
	}
	
	public class UpdateMultiNodeInventoryPutBodyInventories
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public UpdateMultiNodeInventoryPutBodyInventoriesNodes[] UpdateMultiNodeInventoryPutBodyInventoriesNodes { get; set; }
	}
	
	public class UpdateMultiNodeInventoryPutBodyInventoriesNodes
	{
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputQty")]
		public UpdateMultiNodeInventoryPutBodyInventoriesNodesInputQty InputQty { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
	}
	
	public class UpdateMultiNodeInventoryPutBodyInventoriesNodesInputQty
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class UpdateMultiNodeInventoryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public UpdateMultiNodeInventoryReturnNodes[] UpdateMultiNodeInventoryReturnNodes { get; set; }
		
		/// <summary>
		/// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class UpdateMultiNodeInventoryReturnNodes
	{
		
		/// <summary>
		/// Node Update Error description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public UpdateMultiNodeInventoryReturnNodesErrors[] UpdateMultiNodeInventoryReturnNodesErrors { get; set; }
		
		/// <summary>
		/// ShipNode Id of the ship node for which the inventory is requested
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shipNode")]
		public string ShipNode { get; set; }
		
		/// <summary>
		/// Node Update status. Example: 'Success'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class UpdateMultiNodeInventoryReturnNodesErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ErrorCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="causes")]
		public UpdateMultiNodeInventoryReturnNodesErrorsCauses[] UpdateMultiNodeInventoryReturnNodesErrorsCauses { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorIdentifiers")]
		public System.Collections.Generic.Dictionary<string, object> ErrorIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public ErrorSeverity Severity { get; set; }
	}
	
	public class UpdateMultiNodeInventoryReturnNodesErrorsCauses
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class GetInventoryReturn
	{
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public GetInventoryReturnQuantity Quantity { get; set; }
		
		/// <summary>
		/// A seller-provided Product ID. Response will have decoded value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class GetInventoryReturnQuantity
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class UpdateInventoryForAnItemPutBody
	{
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public UpdateInventoryForAnItemPutBodyQuantity Quantity { get; set; }
		
		/// <summary>
		/// A seller-provided Product ID. Response will have decoded value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class UpdateInventoryForAnItemPutBodyQuantity
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
	
	public class UpdateInventoryForAnItemReturn
	{
		
		/// <summary>
		/// Quantity that has been ordered by the customers but not yet shipped
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public UpdateInventoryForAnItemReturnQuantity Quantity { get; set; }
		
		/// <summary>
		/// A seller-provided Product ID. Response will have decoded value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
	}
	
	public class UpdateInventoryForAnItemReturnQuantity
	{
		
		/// <summary>
		/// Inventory Count
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unit of measurement. Example: 'EACH'
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public AvailToSellQtyUnit Unit { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
