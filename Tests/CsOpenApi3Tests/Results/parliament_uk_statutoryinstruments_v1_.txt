//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessItemUri")]
		public string BusinessItemUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="houseId")]
		public string HouseId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="houseName")]
		public string HouseName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="houseUri")]
		public string HouseUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="houses")]
		public BusinessItemHouse[] Houses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemDate")]
		public System.Nullable<System.DateTimeOffset> ItemDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="laidPaperType")]
		public System.Nullable<BusinessItemLaidPaperType> LaidPaperType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procedureStepId")]
		public string ProcedureStepId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procedureStepUri")]
		public string ProcedureStepUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sequence")]
		public System.Nullable<System.Int32> Sequence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statutoryInstrumentId")]
		public string StatutoryInstrumentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statutoryInstrumentUri")]
		public string StatutoryInstrumentUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stepName")]
		public string StepName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workpackageProcedureUri")]
		public string WorkpackageProcedureUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessItemHouse
	{
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public System.Nullable<BusinessItemHouseHouse> House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BusinessItemHouseHouse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commons = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lords = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BusinessItemLaidPaperType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatutoryInstrument = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProposedNegative = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessItemResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public BusinessItem Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Link
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessItemResourceCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public BusinessItemResource[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Department
	{
		
		[System.Runtime.Serialization.DataMember(Name="departmentId")]
		public System.Nullable<System.Int32> DepartmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum House
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Commons = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lords = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LaidPaperSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LaidPaperType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StatutoryInstrument = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProposedNegative = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LayingBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="departmentId")]
		public System.Nullable<System.Int32> DepartmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LayingBodyResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public LayingBody Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LayingBodyResourceCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public LayingBodyResource[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParliamentaryProcess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotConcluded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Concluded = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProblemDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Procedure
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProcedureDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProcedureDetailsResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProcedureDetails Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProcedureResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Procedure Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProcedureResourceCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ProcedureResource[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProposedNegativeStatutoryInstrument
	{
		
		[System.Runtime.Serialization.DataMember(Name="commonsLayingDate")]
		public System.Nullable<System.DateTimeOffset> CommonsLayingDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commonsPublishedDate")]
		public System.Nullable<System.DateTimeOffset> CommonsPublishedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="departmentId")]
		public System.Nullable<System.Int32> DepartmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layingBodyDepartment")]
		public Department LayingBodyDepartment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layingBodyId")]
		public string LayingBodyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layingBodyName")]
		public string LayingBodyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lordsLayingDate")]
		public System.Nullable<System.DateTimeOffset> LordsLayingDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lordsPublishedDate")]
		public System.Nullable<System.DateTimeOffset> LordsPublishedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procedure")]
		public Procedure Procedure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procedureName")]
		public string ProcedureName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procedureUri")]
		public string ProcedureUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statutoryInstrument")]
		public LaidPaperSummary StatutoryInstrument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statutoryInstrumentPaperId")]
		public string StatutoryInstrumentPaperId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statutoryInstrumentPaperName")]
		public string StatutoryInstrumentPaperName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProposedNegativeStatutoryInstrumentResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ProposedNegativeStatutoryInstrument Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProposedNegativeStatutoryInstrumentResourceCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ProposedNegativeStatutoryInstrumentResource[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatutoryInstrument
	{
		
		[System.Runtime.Serialization.DataMember(Name="commonsLayingDate")]
		public System.Nullable<System.DateTimeOffset> CommonsLayingDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commonsPublishedDate")]
		public System.Nullable<System.DateTimeOffset> CommonsPublishedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="departmentId")]
		public System.Nullable<System.Int32> DepartmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layingBodyDepartment")]
		public Department LayingBodyDepartment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layingBodyId")]
		public string LayingBodyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layingBodyName")]
		public string LayingBodyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lordsLayingDate")]
		public System.Nullable<System.DateTimeOffset> LordsLayingDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lordsPublishedDate")]
		public System.Nullable<System.DateTimeOffset> LordsPublishedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paperComingIntoForceDate")]
		public System.Nullable<System.DateTimeOffset> PaperComingIntoForceDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paperComingIntoForceNote")]
		public string PaperComingIntoForceNote { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paperMadeDate")]
		public System.Nullable<System.DateTimeOffset> PaperMadeDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paperNumber")]
		public System.Nullable<System.Int32> PaperNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paperPrefix")]
		public string PaperPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paperYear")]
		public string PaperYear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procedure")]
		public Procedure Procedure { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procedureName")]
		public string ProcedureName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="procedureUri")]
		public string ProcedureUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proposedNegativeStatutoryInstrument")]
		public LaidPaperSummary ProposedNegativeStatutoryInstrument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proposedNegativeStatutoryInstrumentPaperId")]
		public string ProposedNegativeStatutoryInstrumentPaperId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proposedNegativeStatutoryInstrumentPaperName")]
		public string ProposedNegativeStatutoryInstrumentPaperName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatutoryInstrumentResource
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public StatutoryInstrument Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatutoryInstrumentResourceCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public StatutoryInstrumentResource[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StatutoryInstrumentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DraftAffirmative = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DraftNegative = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MadeAffirmative = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MadeNegative = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns business item by ID.
		/// GetBusinessItemById api/v1/BusinessItem/{id}
		/// </summary>
		/// <param name="id">Business item with the ID specified</param>
		/// <param name="LaidPaper">Business item by laid paper type</param>
		/// <returns>The requested business item</returns>
		public async Task<BusinessItemResource> GetBusinessItemByIdAsync(string id, BusinessItemLaidPaperType LaidPaper, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/BusinessItem/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&LaidPaper=" + LaidPaper;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BusinessItemResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all laying bodies.
		/// GetLayingBodies api/v1/LayingBody
		/// </summary>
		/// <returns>Success</returns>
		public async Task<LayingBodyResourceCollection> GetLayingBodiesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/LayingBody";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LayingBodyResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all procedures.
		/// GetProceduresV1 api/v1/Procedure
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ProcedureResourceCollection> GetProceduresV1Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Procedure";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcedureResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns procedure by ID.
		/// GetProceduresByIdV1 api/v1/Procedure/{id}
		/// </summary>
		/// <param name="id">Procedure with the ID specified</param>
		/// <returns>Success</returns>
		public async Task<ProcedureDetailsResource> GetProceduresByIdV1Async(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Procedure/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProcedureDetailsResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of proposed negative statutory instruments.
		/// GetProposedNegativeStatutoryInstruments api/v1/ProposedNegativeStatutoryInstrument
		/// </summary>
		/// <param name="Name">Proposed negative statutory instruments with the name provided</param>
		/// <param name="RecommendedForProcedureChange">Proposed negative statutory instruments recommended for procedure change</param>
		/// <param name="DepartmentId">Proposed negative statutory instruments with the department ID specified
		/// Minimum: 1
		/// Maximum: 2147483647
		// </param>
		/// <param name="LayingBodyId">Proposed negative statutory instruments with the laying body ID specified</param>
		/// <param name="Skip">The number of records to skip from the first, default is 0
		/// Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <param name="Take">The number of records to return, default is 20
		/// Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task<ProposedNegativeStatutoryInstrumentResourceCollection> GetProposedNegativeStatutoryInstrumentsAsync(string Name, bool RecommendedForProcedureChange, int DepartmentId, string LayingBodyId, int Skip, int Take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/ProposedNegativeStatutoryInstrument?Name=" + (Name==null? "" : System.Uri.EscapeDataString(Name))+"&RecommendedForProcedureChange="+RecommendedForProcedureChange+"&DepartmentId="+DepartmentId+"&LayingBodyId=" + (LayingBodyId==null? "" : System.Uri.EscapeDataString(LayingBodyId))+"&Skip="+Skip+"&Take="+Take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProposedNegativeStatutoryInstrumentResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns proposed negative statutory instrument by ID.
		/// GetProposedNegativeStatutoryInstrumentById api/v1/ProposedNegativeStatutoryInstrument/{id}
		/// </summary>
		/// <param name="id">Proposed negative statutory instrument with the ID specified</param>
		/// <returns>Success</returns>
		public async Task<ProposedNegativeStatutoryInstrumentResource> GetProposedNegativeStatutoryInstrumentByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/ProposedNegativeStatutoryInstrument/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProposedNegativeStatutoryInstrumentResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns business items belonging to a proposed negative statutory instrument.
		/// GetBusinessItemsByProposedNegativeStatutoryInstrumentId api/v1/ProposedNegativeStatutoryInstrument/{id}/BusinessItems
		/// </summary>
		/// <param name="id">Business items belonging to proposed negative statutory instrument with the ID specified</param>
		/// <returns>Success</returns>
		public async Task<BusinessItemResourceCollection> GetBusinessItemsByProposedNegativeStatutoryInstrumentIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/ProposedNegativeStatutoryInstrument/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/BusinessItems";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BusinessItemResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of statutory instruments.
		/// GetStatutoryInstruments api/v1/StatutoryInstrument
		/// </summary>
		/// <param name="Name">Statutory instruments with the name specified</param>
		/// <param name="StatutoryInstrumentType">Statutory instruments where the statutory instrument type is the type provided</param>
		/// <param name="ScheduledDebate">Statutory instrument which contains a scheduled debate</param>
		/// <param name="MotionToStop">Statutory instruments which contains a motion to stop</param>
		/// <param name="ConcernsRaisedByCommittee">Statutory instruments which contains concerns raised by committee</param>
		/// <param name="ParliamentaryProcessConcluded">Statutory instruments where the parliamentary process is concluded or notconcluded</param>
		/// <param name="DepartmentId">Statutory instruments with the department ID specified
		/// Minimum: 1
		/// Maximum: 2147483647
		// </param>
		/// <param name="LayingBodyId">Statutory instruments with the laying body ID specified</param>
		/// <param name="House">Statutory instruments laid in the house specified</param>
		/// <param name="Skip">The number of records to skip from the first, default is 0
		/// Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <param name="Take">The number of records to return, default is 20
		/// Minimum: 0
		/// Maximum: 2147483647
		// </param>
		/// <returns>Success</returns>
		public async Task<StatutoryInstrumentResourceCollection> GetStatutoryInstrumentsAsync(string Name, StatutoryInstrumentType StatutoryInstrumentType, bool ScheduledDebate, bool MotionToStop, bool ConcernsRaisedByCommittee, ParliamentaryProcess ParliamentaryProcessConcluded, int DepartmentId, string LayingBodyId, BusinessItemHouseHouse House, int Skip, int Take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/StatutoryInstrument?Name=" + (Name==null? "" : System.Uri.EscapeDataString(Name))+"&StatutoryInstrumentType=" + StatutoryInstrumentType+"&ScheduledDebate="+ScheduledDebate+"&MotionToStop="+MotionToStop+"&ConcernsRaisedByCommittee="+ConcernsRaisedByCommittee+"&ParliamentaryProcessConcluded=" + ParliamentaryProcessConcluded+"&DepartmentId="+DepartmentId+"&LayingBodyId=" + (LayingBodyId==null? "" : System.Uri.EscapeDataString(LayingBodyId))+"&House=" + House+"&Skip="+Skip+"&Take="+Take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StatutoryInstrumentResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a statutory instrument by ID.
		/// GetStatutoryInstrumentById api/v1/StatutoryInstrument/{id}
		/// </summary>
		/// <param name="id">Statutory instrument with the ID specified</param>
		/// <returns>Success</returns>
		public async Task<StatutoryInstrumentResource> GetStatutoryInstrumentByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/StatutoryInstrument/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StatutoryInstrumentResource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns business items belonging to statutory instrument with ID.
		/// GetBusinessItemsByStatutoryInstrumentId api/v1/StatutoryInstrument/{id}/BusinessItems
		/// </summary>
		/// <param name="id">Business items belonging to statutory instrument with the ID specified</param>
		/// <returns>Success</returns>
		public async Task<BusinessItemResourceCollection> GetBusinessItemsByStatutoryInstrumentIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/StatutoryInstrument/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/BusinessItems";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BusinessItemResourceCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
