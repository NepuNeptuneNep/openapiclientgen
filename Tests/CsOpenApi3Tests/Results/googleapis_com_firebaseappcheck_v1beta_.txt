//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An app's App Attest configuration object. This configuration controls certain properties of the `AppCheckToken` returned by ExchangeAppAttestAttestation and ExchangeAppAttestAssertion, such as its ttl. Note that the Team ID registered with your app is used as part of the validation process. Please register it via the Firebase Console or programmatically via the [Firebase Management Service](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.iosApps/patch).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaAppAttestConfig
	{
		
		/// <summary>
		/// Required. The relative resource name of the App Attest configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/appAttestConfig ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies the duration for which App Check tokens exchanged from App Attest artifacts will be valid. If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenTtl")]
		public string TokenTtl { get; set; }
	}
	
	/// <summary>
	/// Encapsulates an *App Check token*, which are used to access Firebase services protected by App Check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaAppCheckToken
	{
		
		/// <summary>
		/// An App Check token. App Check tokens are signed [JWTs](https://tools.ietf.org/html/rfc7519) containing claims that identify the attested app and Firebase project. This token is used to access Firebase services protected by App Check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attestationToken")]
		public string AttestationToken { get; set; }
		
		/// <summary>
		/// An App Check token. App Check tokens are signed [JWTs](https://tools.ietf.org/html/rfc7519) containing claims that identify the attested app and Firebase project. This token is used to access Firebase services protected by App Check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The duration from the time this token is minted until its expiration. This field is intended to ease client-side token management, since the client may have clock skew, but is still able to accurately measure a duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
	}
	
	/// <summary>
	/// Encapsulates an *App Check token*, which are used to access Firebase services protected by App Check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaAttestationTokenResponse
	{
		
		/// <summary>
		/// An App Check token. App Check tokens are signed [JWTs](https://tools.ietf.org/html/rfc7519) containing claims that identify the attested app and Firebase project. This token is used to access Firebase services protected by App Check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attestationToken")]
		public string AttestationToken { get; set; }
		
		/// <summary>
		/// The duration from the time this token is minted until its expiration. This field is intended to ease client-side token management, since the client may have clock skew, but is still able to accurately measure a duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
	}
	
	/// <summary>
	/// Response message for the BatchGetAppAttestConfigs method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaBatchGetAppAttestConfigsResponse
	{
		
		/// <summary>
		/// AppAttestConfigs retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public GoogleFirebaseAppcheckV1betaAppAttestConfig[] Configs { get; set; }
	}
	
	/// <summary>
	/// Response message for the BatchGetDeviceCheckConfigs method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaBatchGetDeviceCheckConfigsResponse
	{
		
		/// <summary>
		/// DeviceCheckConfigs retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public GoogleFirebaseAppcheckV1betaDeviceCheckConfig[] Configs { get; set; }
	}
	
	/// <summary>
	/// An app's DeviceCheck configuration object. This configuration is used by ExchangeDeviceCheckToken to validate device tokens issued to apps by DeviceCheck. It also controls certain properties of the returned `AppCheckToken`, such as its ttl. Note that the Team ID registered with your app is used as part of the validation process. Please register it via the Firebase Console or programmatically via the [Firebase Management Service](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.iosApps/patch).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaDeviceCheckConfig
	{
		
		/// <summary>
		/// Required. The key identifier of a private key enabled with DeviceCheck, created in your Apple Developer account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyId")]
		public string KeyId { get; set; }
		
		/// <summary>
		/// Required. The relative resource name of the DeviceCheck configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Input only. The contents of the private key (`.p8`) file associated with the key specified by `key_id`. For security reasons, this field will never be populated in any response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKey")]
		public string PrivateKey { get; set; }
		
		/// <summary>
		/// Output only. Whether the `private_key` field was previously set. Since we will never return the `private_key` field, this field is the only way to find out whether it was previously set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKeySet")]
		public System.Nullable<System.Boolean> PrivateKeySet { get; set; }
		
		/// <summary>
		/// Specifies the duration for which App Check tokens exchanged from DeviceCheck tokens will be valid. If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenTtl")]
		public string TokenTtl { get; set; }
	}
	
	/// <summary>
	/// Response message for the BatchGetPlayIntegrityConfigs method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaBatchGetPlayIntegrityConfigsResponse
	{
		
		/// <summary>
		/// PlayIntegrityConfigs retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public GoogleFirebaseAppcheckV1betaPlayIntegrityConfig[] Configs { get; set; }
	}
	
	/// <summary>
	/// An app's Play Integrity configuration object. This configuration controls certain properties of the `AppCheckToken` returned by ExchangePlayIntegrityToken, such as its ttl. Note that your registered SHA-256 certificate fingerprints are used to validate tokens issued by the Play Integrity API; please register them via the Firebase Console or programmatically via the [Firebase Management Service](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.androidApps.sha/create).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaPlayIntegrityConfig
	{
		
		/// <summary>
		/// Required. The relative resource name of the Play Integrity configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies the duration for which App Check tokens exchanged from Play Integrity tokens will be valid. If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenTtl")]
		public string TokenTtl { get; set; }
	}
	
	/// <summary>
	/// Response message for the BatchGetRecaptchaConfigs method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaBatchGetRecaptchaConfigsResponse
	{
		
		/// <summary>
		/// RecaptchaConfigs retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public GoogleFirebaseAppcheckV1betaRecaptchaConfig[] Configs { get; set; }
	}
	
	/// <summary>
	/// An app's reCAPTCHA v3 configuration object. This configuration is used by ExchangeRecaptchaToken to validate reCAPTCHA tokens issued to apps by reCAPTCHA v3. It also controls certain properties of the returned `AppCheckToken`, such as its ttl.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaRecaptchaConfig
	{
		
		/// <summary>
		/// Required. The relative resource name of the reCAPTCHA v3 configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaConfig ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Input only. The site secret used to identify your service for reCAPTCHA v3 verification. For security reasons, this field will never be populated in any response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteSecret")]
		public string SiteSecret { get; set; }
		
		/// <summary>
		/// Output only. Whether the `site_secret` field was previously set. Since we will never return the `site_secret` field, this field is the only way to find out whether it was previously set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteSecretSet")]
		public System.Nullable<System.Boolean> SiteSecretSet { get; set; }
		
		/// <summary>
		/// Specifies the duration for which App Check tokens exchanged from reCAPTCHA tokens will be valid. If unset, a default value of 1 day is assumed. Must be between 30 minutes and 7 days, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenTtl")]
		public string TokenTtl { get; set; }
	}
	
	/// <summary>
	/// Response message for the BatchGetRecaptchaEnterpriseConfigs method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaBatchGetRecaptchaEnterpriseConfigsResponse
	{
		
		/// <summary>
		/// RecaptchaEnterpriseConfigs retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public GoogleFirebaseAppcheckV1betaRecaptchaEnterpriseConfig[] Configs { get; set; }
	}
	
	/// <summary>
	/// An app's reCAPTCHA Enterprise configuration object. This configuration is used by ExchangeRecaptchaEnterpriseToken to validate reCAPTCHA tokens issued to apps by reCAPTCHA Enterprise. It also controls certain properties of the returned `AppCheckToken`, such as its ttl.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaRecaptchaEnterpriseConfig
	{
		
		/// <summary>
		/// Required. The relative resource name of the reCAPTCHA Enterprise configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The score-based site key [created in reCAPTCHA Enterprise](https://cloud.google.com/recaptcha-enterprise/docs/create-key#creating_a_site_key) used to [invoke reCAPTCHA and generate the reCAPTCHA tokens](https://cloud.google.com/recaptcha-enterprise/docs/instrument-web-pages) for your application. Important: This is *not* the `site_secret` (as it is in reCAPTCHA v3), but rather your score-based reCAPTCHA Enterprise site key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteKey")]
		public string SiteKey { get; set; }
		
		/// <summary>
		/// Specifies the duration for which App Check tokens exchanged from reCAPTCHA Enterprise tokens will be valid. If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenTtl")]
		public string TokenTtl { get; set; }
	}
	
	/// <summary>
	/// Response message for the BatchGetRecaptchaV3Configs method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaBatchGetRecaptchaV3ConfigsResponse
	{
		
		/// <summary>
		/// RecaptchaV3Configs retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public GoogleFirebaseAppcheckV1betaRecaptchaV3Config[] Configs { get; set; }
	}
	
	/// <summary>
	/// An app's reCAPTCHA v3 configuration object. This configuration is used by ExchangeRecaptchaV3Token to validate reCAPTCHA tokens issued to apps by reCAPTCHA v3. It also controls certain properties of the returned `AppCheckToken`, such as its ttl.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaRecaptchaV3Config
	{
		
		/// <summary>
		/// Required. The relative resource name of the reCAPTCHA v3 configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Input only. The site secret used to identify your service for reCAPTCHA v3 verification. For security reasons, this field will never be populated in any response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteSecret")]
		public string SiteSecret { get; set; }
		
		/// <summary>
		/// Output only. Whether the `site_secret` field was previously set. Since we will never return the `site_secret` field, this field is the only way to find out whether it was previously set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteSecretSet")]
		public System.Nullable<System.Boolean> SiteSecretSet { get; set; }
		
		/// <summary>
		/// Specifies the duration for which App Check tokens exchanged from reCAPTCHA tokens will be valid. If unset, a default value of 1 day is assumed. Must be between 30 minutes and 7 days, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenTtl")]
		public string TokenTtl { get; set; }
	}
	
	/// <summary>
	/// Response message for the BatchGetSafetyNetConfigs method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaBatchGetSafetyNetConfigsResponse
	{
		
		/// <summary>
		/// SafetyNetConfigs retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public GoogleFirebaseAppcheckV1betaSafetyNetConfig[] Configs { get; set; }
	}
	
	/// <summary>
	/// An app's SafetyNet configuration object. This configuration controls certain properties of the `AppCheckToken` returned by ExchangeSafetyNetToken, such as its ttl. Note that your registered SHA-256 certificate fingerprints are used to validate tokens issued by SafetyNet; please register them via the Firebase Console or programmatically via the [Firebase Management Service](https://firebase.google.com/docs/projects/api/reference/rest/v1beta1/projects.androidApps.sha/create).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaSafetyNetConfig
	{
		
		/// <summary>
		/// Required. The relative resource name of the SafetyNet configuration object, in the format: ``` projects/{project_number}/apps/{app_id}/safetyNetConfig ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies the duration for which App Check tokens exchanged from SafetyNet tokens will be valid. If unset, a default value of 1 hour is assumed. Must be between 30 minutes and 7 days, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenTtl")]
		public string TokenTtl { get; set; }
	}
	
	/// <summary>
	/// Request message for the BatchUpdateResourcePolicies method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaBatchUpdateResourcePoliciesRequest
	{
		
		/// <summary>
		/// Required. The request messages specifying the ResourcePolicys to update. A maximum of 100 objects can be updated in a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public GoogleFirebaseAppcheckV1betaUpdateResourcePolicyRequest[] Requests { get; set; }
		
		/// <summary>
		/// Optional. A comma-separated list of names of fields in the ResourceConfigurations to update. Example: `enforcement_mode`. If this field is present, the `update_mask` field in the UpdateResourcePolicyRequest messages must all match this field, or the entire batch fails and no updates will be committed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Request message for the UpdateResourcePolicy method as well as an individual update message for the BatchUpdateResourcePolicies method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaUpdateResourcePolicyRequest
	{
		
		/// <summary>
		/// App Check enforcement policy for a specific resource of a Firebase service supported by App Check. Note that this policy will override the Service level enforcement mode configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourcePolicy")]
		public GoogleFirebaseAppcheckV1betaResourcePolicy ResourcePolicy { get; set; }
		
		/// <summary>
		/// Required. A comma-separated list of names of fields in the ResourcePolicy to update. Example: `enforcement_mode`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// App Check enforcement policy for a specific resource of a Firebase service supported by App Check. Note that this policy will override the Service level enforcement mode configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaResourcePolicy
	{
		
		/// <summary>
		/// Required. The App Check enforcement mode for this resource. This will override the EnforcementMode setting on the service. For new resources that you are creating, you should consider setting an override and enable enforcement on the resource immediately, if there are no outdated clients that can use it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enforcementMode")]
		public System.Nullable<GoogleFirebaseAppcheckV1betaResourcePolicyEnforcementMode> EnforcementMode { get; set; }
		
		/// <summary>
		/// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. This etag is strongly validated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Required. The relative name of the resource configuration object, in the format: ``` projects/{project_number}/services/{service_id}/resourcePolicies/{resource_policy_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `oauth2.googleapis.com` (Google Identity for iOS) `resource_policy_id` is a system-generated UID used as the resource ID for the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Service specific name of the resource object to which this policy applies, in the format: * `//oauth2.googleapis.com/projects/{project}/oauthClients/{oauth_client_id}` (Google Identity for iOS) NOTE that the resource must belong to the service specified in the `name` and be from the same project as this policy, but it may or may not exist at the time of creation of the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResource")]
		public string TargetResource { get; set; }
		
		/// <summary>
		/// Output only. Timestamp when this service configuration object was most recently updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleFirebaseAppcheckV1betaResourcePolicyEnforcementMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNENFORCED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENFORCED = 2,
	}
	
	/// <summary>
	/// Response message for the BatchUpdateResourcePolicies method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaBatchUpdateResourcePoliciesResponse
	{
		
		/// <summary>
		/// ResourcePolicy objects after the updates have been applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourcePolicies")]
		public GoogleFirebaseAppcheckV1betaResourcePolicy[] ResourcePolicies { get; set; }
	}
	
	/// <summary>
	/// Request message for the BatchUpdateServices method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaBatchUpdateServicesRequest
	{
		
		/// <summary>
		/// Required. The request messages specifying the Services to update. A maximum of 100 objects can be updated in a batch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public GoogleFirebaseAppcheckV1betaUpdateServiceRequest[] Requests { get; set; }
		
		/// <summary>
		/// Optional. A comma-separated list of names of fields in the Services to update. Example: `display_name`. If this field is present, the `update_mask` field in the UpdateServiceRequest messages must all match this field, or the entire batch fails and no updates will be committed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Request message for the UpdateService method as well as an individual update message for the BatchUpdateServices method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaUpdateServiceRequest
	{
		
		/// <summary>
		/// The enforcement configuration for a Firebase service supported by App Check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public GoogleFirebaseAppcheckV1betaService Service { get; set; }
		
		/// <summary>
		/// Required. A comma-separated list of names of fields in the Service to update. Example: `enforcement_mode`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// The enforcement configuration for a Firebase service supported by App Check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaService
	{
		
		/// <summary>
		/// Required. The App Check enforcement mode for this service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enforcementMode")]
		public GoogleFirebaseAppcheckV1betaResourcePolicyEnforcementMode EnforcementMode { get; set; }
		
		/// <summary>
		/// This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. This etag is strongly validated as defined by RFC 7232.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Required. The relative resource name of the service configuration object, in the format: ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `firebasestorage.googleapis.com` (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase Realtime Database) * `firestore.googleapis.com` (Cloud Firestore) * `identitytoolkit.googleapis.com` (Firebase Authentication with Identity Platform)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Timestamp when this service configuration object was most recently updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Response message for the BatchUpdateServices method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaBatchUpdateServicesResponse
	{
		
		/// <summary>
		/// Service objects after the updates have been applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public GoogleFirebaseAppcheckV1betaService[] Services { get; set; }
	}
	
	/// <summary>
	/// A *debug token* is a secret used during the development or integration testing of an app. It essentially allows the development or integration testing to bypass app attestation while still allowing App Check to enforce protection on supported production Firebase services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaDebugToken
	{
		
		/// <summary>
		/// Required. A human readable display name used to identify this debug token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required. The relative resource name of the debug token, in the format: ``` projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Input only. Immutable. The secret token itself. Must be provided during creation, and must be a UUID4, case insensitive. This field is immutable once set, and cannot be provided during an UpdateDebugToken request. You can, however, delete this debug token using DeleteDebugToken to revoke it. For security reasons, this field will never be populated in any response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// Request message for the ExchangeAppAttestAssertion method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest
	{
		
		/// <summary>
		/// Required. The artifact returned by a previous call to ExchangeAppAttestAttestation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifact")]
		public string Artifact { get; set; }
		
		/// <summary>
		/// Required. The CBOR-encoded assertion returned by the client-side App Attest API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assertion")]
		public string Assertion { get; set; }
		
		/// <summary>
		/// Required. A one-time challenge returned by an immediately prior call to GenerateAppAttestChallenge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challenge")]
		public string Challenge { get; set; }
		
		/// <summary>
		/// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitedUse")]
		public System.Nullable<System.Boolean> LimitedUse { get; set; }
	}
	
	/// <summary>
	/// Request message for the ExchangeAppAttestAttestation method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest
	{
		
		/// <summary>
		/// Required. The App Attest statement returned by the client-side App Attest API. This is a base64url encoded CBOR object in the JSON response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attestationStatement")]
		public string AttestationStatement { get; set; }
		
		/// <summary>
		/// Required. A one-time challenge returned by an immediately prior call to GenerateAppAttestChallenge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challenge")]
		public string Challenge { get; set; }
		
		/// <summary>
		/// Required. The key ID generated by App Attest for the client app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyId")]
		public string KeyId { get; set; }
		
		/// <summary>
		/// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitedUse")]
		public System.Nullable<System.Boolean> LimitedUse { get; set; }
	}
	
	/// <summary>
	/// Response message for the ExchangeAppAttestAttestation method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationResponse
	{
		
		/// <summary>
		/// Encapsulates an *App Check token*, which are used to access Firebase services protected by App Check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appCheckToken")]
		public GoogleFirebaseAppcheckV1betaAppCheckToken AppCheckToken { get; set; }
		
		/// <summary>
		/// An artifact that can be used in future calls to ExchangeAppAttestAssertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifact")]
		public string Artifact { get; set; }
		
		/// <summary>
		/// Encapsulates an *App Check token*, which are used to access Firebase services protected by App Check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attestationToken")]
		public GoogleFirebaseAppcheckV1betaAttestationTokenResponse AttestationToken { get; set; }
	}
	
	/// <summary>
	/// Request message for the ExchangeCustomToken method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaExchangeCustomTokenRequest
	{
		
		/// <summary>
		/// Required. A custom token signed using your project's Admin SDK service account credentials.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customToken")]
		public string CustomToken { get; set; }
		
		/// <summary>
		/// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitedUse")]
		public System.Nullable<System.Boolean> LimitedUse { get; set; }
	}
	
	/// <summary>
	/// Request message for the ExchangeDebugToken method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaExchangeDebugTokenRequest
	{
		
		/// <summary>
		/// Required. A debug token secret. This string must match a debug token secret previously created using CreateDebugToken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugToken")]
		public string DebugToken { get; set; }
		
		/// <summary>
		/// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitedUse")]
		public System.Nullable<System.Boolean> LimitedUse { get; set; }
	}
	
	/// <summary>
	/// Request message for the ExchangeDeviceCheckToken method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest
	{
		
		/// <summary>
		/// Required. The `device_token` as returned by Apple's client-side [DeviceCheck API](https://developer.apple.com/documentation/devicecheck/dcdevice). This is the base64 encoded `Data` (Swift) or `NSData` (ObjC) object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceToken")]
		public string DeviceToken { get; set; }
		
		/// <summary>
		/// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitedUse")]
		public System.Nullable<System.Boolean> LimitedUse { get; set; }
	}
	
	/// <summary>
	/// Request message for the ExchangePlayIntegrityToken method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaExchangePlayIntegrityTokenRequest
	{
		
		/// <summary>
		/// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitedUse")]
		public System.Nullable<System.Boolean> LimitedUse { get; set; }
		
		/// <summary>
		/// Required. The [integrity verdict response token from Play Integrity](https://developer.android.com/google/play/integrity/verdict#decrypt-verify) issued to your app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playIntegrityToken")]
		public string PlayIntegrityToken { get; set; }
	}
	
	/// <summary>
	/// Request message for the ExchangeRecaptchaEnterpriseToken method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaExchangeRecaptchaEnterpriseTokenRequest
	{
		
		/// <summary>
		/// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitedUse")]
		public System.Nullable<System.Boolean> LimitedUse { get; set; }
		
		/// <summary>
		/// Required. The reCAPTCHA token as returned by the [reCAPTCHA Enterprise JavaScript API](https://cloud.google.com/recaptcha-enterprise/docs/instrument-web-pages).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recaptchaEnterpriseToken")]
		public string RecaptchaEnterpriseToken { get; set; }
	}
	
	/// <summary>
	/// Request message for the ExchangeRecaptchaToken method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest
	{
		
		/// <summary>
		/// Required. The reCAPTCHA token as returned by the [reCAPTCHA v3 JavaScript API](https://developers.google.com/recaptcha/docs/v3).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recaptchaToken")]
		public string RecaptchaToken { get; set; }
	}
	
	/// <summary>
	/// Request message for the ExchangeRecaptchaV3Token method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaExchangeRecaptchaV3TokenRequest
	{
		
		/// <summary>
		/// Specifies whether this attestation is for use in a *limited use* (`true`) or *session based* (`false`) context. To enable this attestation to be used with the *replay protection* feature, set this to `true`. The default value is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitedUse")]
		public System.Nullable<System.Boolean> LimitedUse { get; set; }
		
		/// <summary>
		/// Required. The reCAPTCHA token as returned by the [reCAPTCHA v3 JavaScript API](https://developers.google.com/recaptcha/docs/v3).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recaptchaV3Token")]
		public string RecaptchaV3Token { get; set; }
	}
	
	/// <summary>
	/// Request message for the ExchangeSafetyNetToken method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest
	{
		
		/// <summary>
		/// Required. The [SafetyNet attestation response](https://developer.android.com/training/safetynet/attestation#request-attestation-step) issued to your app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safetyNetToken")]
		public string SafetyNetToken { get; set; }
	}
	
	/// <summary>
	/// Request message for the GenerateAppAttestChallenge method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeRequest
	{
	}
	
	/// <summary>
	/// Response message for the GenerateAppAttestChallenge method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeResponse
	{
		
		/// <summary>
		/// A one-time use challenge for the client to pass to the App Attest API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challenge")]
		public string Challenge { get; set; }
		
		/// <summary>
		/// The duration from the time this challenge is minted until its expiration. This field is intended to ease client-side token management, since the client may have clock skew, but is still able to accurately measure a duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
	}
	
	/// <summary>
	/// Request message for the GeneratePlayIntegrityChallenge method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaGeneratePlayIntegrityChallengeRequest
	{
	}
	
	/// <summary>
	/// Response message for the GeneratePlayIntegrityChallenge method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaGeneratePlayIntegrityChallengeResponse
	{
		
		/// <summary>
		/// A one-time use [challenge](https://developer.android.com/google/play/integrity/verdict#protect-against-replay-attacks) for the client to pass to the Play Integrity API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challenge")]
		public string Challenge { get; set; }
		
		/// <summary>
		/// The duration from the time this challenge is minted until its expiration. This field is intended to ease client-side token management, since the client may have clock skew, but is still able to accurately measure a duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
	}
	
	/// <summary>
	/// Response message for the ListDebugTokens method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaListDebugTokensResponse
	{
		
		/// <summary>
		/// The DebugTokens retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugTokens")]
		public GoogleFirebaseAppcheckV1betaDebugToken[] DebugTokens { get; set; }
		
		/// <summary>
		/// If the result list is too large to fit in a single response, then a token is returned. If the string is empty or omitted, then this response is the last page of results. This token can be used in a subsequent call to ListDebugTokens to find the next group of DebugTokens. Page tokens are short-lived and should not be persisted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for the ListResourcePolicies method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaListResourcePoliciesResponse
	{
		
		/// <summary>
		/// If the result list is too large to fit in a single response, then a token is returned. If the string is empty or omitted, then this response is the last page of results. This token can be used in a subsequent call to ListResourcePolicies to find the next group of ResourcePolicys. Page tokens are short-lived and should not be persisted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The ResourcePolicys retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourcePolicies")]
		public GoogleFirebaseAppcheckV1betaResourcePolicy[] ResourcePolicies { get; set; }
	}
	
	/// <summary>
	/// Response message for the ListServices method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaListServicesResponse
	{
		
		/// <summary>
		/// If the result list is too large to fit in a single response, then a token is returned. If the string is empty or omitted, then this response is the last page of results. This token can be used in a subsequent call to ListServices to find the next group of Services. Page tokens are short-lived and should not be persisted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The Services retrieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public GoogleFirebaseAppcheckV1betaService[] Services { get; set; }
	}
	
	/// <summary>
	/// A JWK as specified by [section 4 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4) and [section 6.3.1 of RFC 7518](https://tools.ietf.org/html/rfc7518#section-6.3.1).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaPublicJwk
	{
		
		/// <summary>
		/// See [section 4.4 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4.4).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alg")]
		public string Alg { get; set; }
		
		/// <summary>
		/// See [section 6.3.1.2 of RFC 7518](https://tools.ietf.org/html/rfc7518#section-6.3.1.2).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="e")]
		public string E { get; set; }
		
		/// <summary>
		/// See [section 4.5 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4.5).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kid")]
		public string Kid { get; set; }
		
		/// <summary>
		/// See [section 4.1 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4.1).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kty")]
		public string Kty { get; set; }
		
		/// <summary>
		/// See [section 6.3.1.1 of RFC 7518](https://tools.ietf.org/html/rfc7518#section-6.3.1.1).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="n")]
		public string N { get; set; }
		
		/// <summary>
		/// See [section 4.2 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-4.2).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="use")]
		public string Use { get; set; }
	}
	
	/// <summary>
	/// The currently active set of public keys that can be used to verify App Check tokens. This object is a JWK set as specified by [section 5 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-5). For security, the response **must not** be cached for longer than six hours.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaPublicJwkSet
	{
		
		/// <summary>
		/// The set of public keys. See [section 5.1 of RFC 7517](https://tools.ietf.org/html/rfc7517#section-5).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public GoogleFirebaseAppcheckV1betaPublicJwk[] Keys { get; set; }
	}
	
	/// <summary>
	/// Request message for the VerifyAppCheckToken method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaVerifyAppCheckTokenRequest
	{
		
		/// <summary>
		/// Required. The App Check token to verify. App Check tokens exchanged from the SafetyNet provider are not supported; an HTTP 400 error will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appCheckToken")]
		public string AppCheckToken { get; set; }
	}
	
	/// <summary>
	/// Response message for the VerifyAppCheckToken method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleFirebaseAppcheckV1betaVerifyAppCheckTokenResponse
	{
		
		/// <summary>
		/// Whether this token was already consumed. If this is the first time this method has seen the given App Check token, this field will be omitted from the response. The given token will then be marked as `already_consumed` (set to `true`) for all future invocations of this method for that token. Note that if the given App Check token is invalid, an HTTP 403 error is returned instead of a response containing this field, regardless whether the token was already consumed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alreadyConsumed")]
		public System.Nullable<System.Boolean> AlreadyConsumed { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleProtobufEmpty
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Accepts an App Attest assertion and an artifact previously obtained from ExchangeAppAttestAttestation and verifies those with Apple. If valid, returns an AppCheckToken.
		/// Firebaseappcheck_projects_apps_exchangeAppAttestAssertion v1beta/{app}:exchangeAppAttestAssertion
		/// </summary>
		/// <param name="app">Required. The relative resource name of the iOS app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaAppCheckToken> Firebaseappcheck_projects_apps_exchangeAppAttestAssertionAsync(string app, GoogleFirebaseAppcheckV1betaExchangeAppAttestAssertionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (app==null? "" : System.Uri.EscapeDataString(app))+":exchangeAppAttestAssertion";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaAppCheckToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accepts an App Attest CBOR attestation and verifies it with Apple using your preconfigured team and bundle IDs. If valid, returns an attestation artifact that can later be exchanged for an AppCheckToken using ExchangeAppAttestAssertion. For convenience and performance, this method's response object will also contain an AppCheckToken (if the verification is successful).
		/// Firebaseappcheck_projects_apps_exchangeAppAttestAttestation v1beta/{app}:exchangeAppAttestAttestation
		/// </summary>
		/// <param name="app">Required. The relative resource name of the iOS app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationResponse> Firebaseappcheck_projects_apps_exchangeAppAttestAttestationAsync(string app, GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (app==null? "" : System.Uri.EscapeDataString(app))+":exchangeAppAttestAttestation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaExchangeAppAttestAttestationResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates a custom token signed using your project's Admin SDK service account credentials. If valid, returns an AppCheckToken.
		/// Firebaseappcheck_projects_apps_exchangeCustomToken v1beta/{app}:exchangeCustomToken
		/// </summary>
		/// <param name="app">Required. The relative resource name of the app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaAppCheckToken> Firebaseappcheck_projects_apps_exchangeCustomTokenAsync(string app, GoogleFirebaseAppcheckV1betaExchangeCustomTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (app==null? "" : System.Uri.EscapeDataString(app))+":exchangeCustomToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaAppCheckToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates a debug token secret that you have previously created using CreateDebugToken. If valid, returns an AppCheckToken. Note that a restrictive quota is enforced on this method to prevent accidental exposure of the app to abuse.
		/// Firebaseappcheck_projects_apps_exchangeDebugToken v1beta/{app}:exchangeDebugToken
		/// </summary>
		/// <param name="app">Required. The relative resource name of the app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaAppCheckToken> Firebaseappcheck_projects_apps_exchangeDebugTokenAsync(string app, GoogleFirebaseAppcheckV1betaExchangeDebugTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (app==null? "" : System.Uri.EscapeDataString(app))+":exchangeDebugToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaAppCheckToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accepts a [`device_token`](https://developer.apple.com/documentation/devicecheck/dcdevice) issued by DeviceCheck, and attempts to validate it with Apple. If valid, returns an AppCheckToken.
		/// Firebaseappcheck_projects_apps_exchangeDeviceCheckToken v1beta/{app}:exchangeDeviceCheckToken
		/// </summary>
		/// <param name="app">Required. The relative resource name of the iOS app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaAppCheckToken> Firebaseappcheck_projects_apps_exchangeDeviceCheckTokenAsync(string app, GoogleFirebaseAppcheckV1betaExchangeDeviceCheckTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (app==null? "" : System.Uri.EscapeDataString(app))+":exchangeDeviceCheckToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaAppCheckToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates an [integrity verdict response token from Play Integrity](https://developer.android.com/google/play/integrity/verdict#decrypt-verify). If valid, returns an AppCheckToken.
		/// Firebaseappcheck_projects_apps_exchangePlayIntegrityToken v1beta/{app}:exchangePlayIntegrityToken
		/// </summary>
		/// <param name="app">Required. The relative resource name of the Android app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaAppCheckToken> Firebaseappcheck_projects_apps_exchangePlayIntegrityTokenAsync(string app, GoogleFirebaseAppcheckV1betaExchangePlayIntegrityTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (app==null? "" : System.Uri.EscapeDataString(app))+":exchangePlayIntegrityToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaAppCheckToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates a [reCAPTCHA Enterprise response token](https://cloud.google.com/recaptcha-enterprise/docs/create-assessment#retrieve_token). If valid, returns an App Check token AppCheckToken.
		/// Firebaseappcheck_projects_apps_exchangeRecaptchaEnterpriseToken v1beta/{app}:exchangeRecaptchaEnterpriseToken
		/// </summary>
		/// <param name="app">Required. The relative resource name of the web app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaAppCheckToken> Firebaseappcheck_projects_apps_exchangeRecaptchaEnterpriseTokenAsync(string app, GoogleFirebaseAppcheckV1betaExchangeRecaptchaEnterpriseTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (app==null? "" : System.Uri.EscapeDataString(app))+":exchangeRecaptchaEnterpriseToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaAppCheckToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates a [reCAPTCHA v3 response token](https://developers.google.com/recaptcha/docs/v3). If valid, returns an AppCheckToken.
		/// Firebaseappcheck_projects_apps_exchangeRecaptchaToken v1beta/{app}:exchangeRecaptchaToken
		/// </summary>
		/// <param name="app">Required. The relative resource name of the web app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaAppCheckToken> Firebaseappcheck_projects_apps_exchangeRecaptchaTokenAsync(string app, GoogleFirebaseAppcheckV1betaExchangeRecaptchaTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (app==null? "" : System.Uri.EscapeDataString(app))+":exchangeRecaptchaToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaAppCheckToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates a [reCAPTCHA v3 response token](https://developers.google.com/recaptcha/docs/v3). If valid, returns an AppCheckToken.
		/// Firebaseappcheck_projects_apps_exchangeRecaptchaV3Token v1beta/{app}:exchangeRecaptchaV3Token
		/// </summary>
		/// <param name="app">Required. The relative resource name of the web app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaAppCheckToken> Firebaseappcheck_projects_apps_exchangeRecaptchaV3TokenAsync(string app, GoogleFirebaseAppcheckV1betaExchangeRecaptchaV3TokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (app==null? "" : System.Uri.EscapeDataString(app))+":exchangeRecaptchaV3Token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaAppCheckToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates a [SafetyNet token](https://developer.android.com/training/safetynet/attestation#request-attestation-step). If valid, returns an AppCheckToken.
		/// Firebaseappcheck_projects_apps_exchangeSafetyNetToken v1beta/{app}:exchangeSafetyNetToken
		/// </summary>
		/// <param name="app">Required. The relative resource name of the Android app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaAppCheckToken> Firebaseappcheck_projects_apps_exchangeSafetyNetTokenAsync(string app, GoogleFirebaseAppcheckV1betaExchangeSafetyNetTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (app==null? "" : System.Uri.EscapeDataString(app))+":exchangeSafetyNetToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaAppCheckToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a challenge that protects the integrity of an immediately following call to ExchangeAppAttestAttestation or ExchangeAppAttestAssertion. A challenge should not be reused for multiple calls.
		/// Firebaseappcheck_projects_apps_generateAppAttestChallenge v1beta/{app}:generateAppAttestChallenge
		/// </summary>
		/// <param name="app">Required. The relative resource name of the iOS app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeResponse> Firebaseappcheck_projects_apps_generateAppAttestChallengeAsync(string app, GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (app==null? "" : System.Uri.EscapeDataString(app))+":generateAppAttestChallenge";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaGenerateAppAttestChallengeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a challenge that protects the integrity of an immediately following integrity verdict request to the Play Integrity API. The next call to ExchangePlayIntegrityToken using the resulting integrity token will verify the presence and validity of the challenge. A challenge should not be reused for multiple calls.
		/// Firebaseappcheck_projects_apps_generatePlayIntegrityChallenge v1beta/{app}:generatePlayIntegrityChallenge
		/// </summary>
		/// <param name="app">Required. The relative resource name of the app, in the format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaGeneratePlayIntegrityChallengeResponse> Firebaseappcheck_projects_apps_generatePlayIntegrityChallengeAsync(string app, GoogleFirebaseAppcheckV1betaGeneratePlayIntegrityChallengeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (app==null? "" : System.Uri.EscapeDataString(app))+":generatePlayIntegrityChallenge";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaGeneratePlayIntegrityChallengeResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified ResourcePolicy configuration.
		/// Firebaseappcheck_projects_services_resourcePolicies_delete v1beta/{name}
		/// </summary>
		/// <param name="name">Required. The relative resource name of the ResourcePolicy to delete, in the format: ``` projects/{project_number}/services/{service_id}/resourcePolicies/{resource_name} ```</param>
		/// <param name="etag">The checksum to be validated against the current ResourcePolicy, to ensure the client has an up-to-date value before proceeding. The user can obtain this from the ResourcePolicy object that they last received. This etag is strongly validated.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Firebaseappcheck_projects_services_resourcePolicies_deleteAsync(string name, string etag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&etag=" + (etag==null? "" : System.Uri.EscapeDataString(etag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleProtobufEmpty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the requested ResourcePolicy configuration.
		/// Firebaseappcheck_projects_services_resourcePolicies_get v1beta/{name}
		/// </summary>
		/// <param name="name">Required. The relative resource name of the ResourcePolicy to retrieve, in the format: ``` projects/{project_number}/services/{service_id}/resourcePolicies/{resource_policy_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `oauth2.googleapis.com` (Google Identity for iOS) `resource_policy_id` is a system-generated UID used as the resource ID for the policy.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaResourcePolicy> Firebaseappcheck_projects_services_resourcePolicies_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaResourcePolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified ResourcePolicy configuration.
		/// Firebaseappcheck_projects_services_resourcePolicies_patch v1beta/{name}
		/// </summary>
		/// <param name="name">Required. The relative name of the resource configuration object, in the format: ``` projects/{project_number}/services/{service_id}/resourcePolicies/{resource_policy_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `oauth2.googleapis.com` (Google Identity for iOS) `resource_policy_id` is a system-generated UID used as the resource ID for the policy.</param>
		/// <param name="updateMask">Required. A comma-separated list of names of fields in the ResourcePolicy to update. Example: `enforcement_mode`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaResourcePolicy> Firebaseappcheck_projects_services_resourcePolicies_patchAsync(string name, string updateMask, GoogleFirebaseAppcheckV1betaResourcePolicy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaResourcePolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Atomically gets the AppAttestConfigs for the specified list of apps.
		/// Firebaseappcheck_projects_apps_appAttestConfig_batchGet v1beta/{parent}/apps/-/appAttestConfig:batchGet
		/// </summary>
		/// <param name="parent">Required. The parent project name shared by all AppAttestConfigs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.</param>
		/// <param name="names">Required. The relative resource names of the AppAttestConfigs to retrieve, in the format ``` projects/{project_number}/apps/{app_id}/appAttestConfig ``` A maximum of 100 objects can be retrieved in a batch.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaBatchGetAppAttestConfigsResponse> Firebaseappcheck_projects_apps_appAttestConfig_batchGetAsync(string parent, string[] names, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/apps/-/appAttestConfig:batchGet&"+string.Join("&", names.Select(z => $"names={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaBatchGetAppAttestConfigsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Atomically gets the DeviceCheckConfigs for the specified list of apps. For security reasons, the `private_key` field is never populated in the response.
		/// Firebaseappcheck_projects_apps_deviceCheckConfig_batchGet v1beta/{parent}/apps/-/deviceCheckConfig:batchGet
		/// </summary>
		/// <param name="parent">Required. The parent project name shared by all DeviceCheckConfigs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.</param>
		/// <param name="names">Required. The relative resource names of the DeviceCheckConfigs to retrieve, in the format ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ``` A maximum of 100 objects can be retrieved in a batch.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaBatchGetDeviceCheckConfigsResponse> Firebaseappcheck_projects_apps_deviceCheckConfig_batchGetAsync(string parent, string[] names, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/apps/-/deviceCheckConfig:batchGet&"+string.Join("&", names.Select(z => $"names={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaBatchGetDeviceCheckConfigsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Atomically gets the PlayIntegrityConfigs for the specified list of apps.
		/// Firebaseappcheck_projects_apps_playIntegrityConfig_batchGet v1beta/{parent}/apps/-/playIntegrityConfig:batchGet
		/// </summary>
		/// <param name="parent">Required. The parent project name shared by all PlayIntegrityConfigs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.</param>
		/// <param name="names">Required. The relative resource names of the PlayIntegrityConfigs to retrieve, in the format ``` projects/{project_number}/apps/{app_id}/playIntegrityConfig ``` A maximum of 100 objects can be retrieved in a batch.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaBatchGetPlayIntegrityConfigsResponse> Firebaseappcheck_projects_apps_playIntegrityConfig_batchGetAsync(string parent, string[] names, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/apps/-/playIntegrityConfig:batchGet&"+string.Join("&", names.Select(z => $"names={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaBatchGetPlayIntegrityConfigsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Atomically gets the RecaptchaConfigs for the specified list of apps. For security reasons, the `site_secret` field is never populated in the response.
		/// Firebaseappcheck_projects_apps_recaptchaConfig_batchGet v1beta/{parent}/apps/-/recaptchaConfig:batchGet
		/// </summary>
		/// <param name="parent">Required. The parent project name shared by all RecaptchaConfigs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.</param>
		/// <param name="names">Required. The relative resource names of the RecaptchaConfigs to retrieve, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaConfig ``` A maximum of 100 objects can be retrieved in a batch.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaBatchGetRecaptchaConfigsResponse> Firebaseappcheck_projects_apps_recaptchaConfig_batchGetAsync(string parent, string[] names, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/apps/-/recaptchaConfig:batchGet&"+string.Join("&", names.Select(z => $"names={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaBatchGetRecaptchaConfigsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Atomically gets the RecaptchaEnterpriseConfigs for the specified list of apps.
		/// Firebaseappcheck_projects_apps_recaptchaEnterpriseConfig_batchGet v1beta/{parent}/apps/-/recaptchaEnterpriseConfig:batchGet
		/// </summary>
		/// <param name="parent">Required. The parent project name shared by all RecaptchaEnterpriseConfigs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.</param>
		/// <param name="names">Required. The relative resource names of the RecaptchaEnterpriseConfigs to retrieve, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ``` A maximum of 100 objects can be retrieved in a batch.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaBatchGetRecaptchaEnterpriseConfigsResponse> Firebaseappcheck_projects_apps_recaptchaEnterpriseConfig_batchGetAsync(string parent, string[] names, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/apps/-/recaptchaEnterpriseConfig:batchGet&"+string.Join("&", names.Select(z => $"names={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaBatchGetRecaptchaEnterpriseConfigsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Atomically gets the RecaptchaV3Configs for the specified list of apps. For security reasons, the `site_secret` field is never populated in the response.
		/// Firebaseappcheck_projects_apps_recaptchaV3Config_batchGet v1beta/{parent}/apps/-/recaptchaV3Config:batchGet
		/// </summary>
		/// <param name="parent">Required. The parent project name shared by all RecaptchaV3Configs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.</param>
		/// <param name="names">Required. The relative resource names of the RecaptchaV3Configs to retrieve, in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaV3Config ``` A maximum of 100 objects can be retrieved in a batch.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaBatchGetRecaptchaV3ConfigsResponse> Firebaseappcheck_projects_apps_recaptchaV3Config_batchGetAsync(string parent, string[] names, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/apps/-/recaptchaV3Config:batchGet&"+string.Join("&", names.Select(z => $"names={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaBatchGetRecaptchaV3ConfigsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Atomically gets the SafetyNetConfigs for the specified list of apps.
		/// Firebaseappcheck_projects_apps_safetyNetConfig_batchGet v1beta/{parent}/apps/-/safetyNetConfig:batchGet
		/// </summary>
		/// <param name="parent">Required. The parent project name shared by all SafetyNetConfigs being retrieved, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being retrieved must match this field, or the entire batch fails.</param>
		/// <param name="names">Required. The relative resource names of the SafetyNetConfigs to retrieve, in the format ``` projects/{project_number}/apps/{app_id}/safetyNetConfig ``` A maximum of 100 objects can be retrieved in a batch.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaBatchGetSafetyNetConfigsResponse> Firebaseappcheck_projects_apps_safetyNetConfig_batchGetAsync(string parent, string[] names, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/apps/-/safetyNetConfig:batchGet&"+string.Join("&", names.Select(z => $"names={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaBatchGetSafetyNetConfigsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all DebugTokens for the specified app. For security reasons, the `token` field is never populated in the response.
		/// Firebaseappcheck_projects_apps_debugTokens_list v1beta/{parent}/debugTokens
		/// </summary>
		/// <param name="parent">Required. The relative resource name of the parent app for which to list each associated DebugToken, in the format: ``` projects/{project_number}/apps/{app_id} ```</param>
		/// <param name="pageSize">The maximum number of DebugTokens to return in the response. Note that an app can have at most 20 debug tokens. The server may return fewer than this at its own discretion. If no value is specified (or too large a value is specified), the server will impose its own limit.</param>
		/// <param name="pageToken">Token returned from a previous call to ListDebugTokens indicating where in the set of DebugTokens to resume listing. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListDebugTokens must match the call that provided the page token; if they do not match, the result is undefined.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaListDebugTokensResponse> Firebaseappcheck_projects_apps_debugTokens_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/debugTokens&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaListDebugTokensResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new DebugToken for the specified app. For security reasons, after the creation operation completes, the `token` field cannot be updated or retrieved, but you can revoke the debug token using DeleteDebugToken. Each app can have a maximum of 20 debug tokens.
		/// Firebaseappcheck_projects_apps_debugTokens_create v1beta/{parent}/debugTokens
		/// </summary>
		/// <param name="parent">Required. The relative resource name of the parent app in which the specified DebugToken will be created, in the format: ``` projects/{project_number}/apps/{app_id} ```</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaDebugToken> Firebaseappcheck_projects_apps_debugTokens_createAsync(string parent, GoogleFirebaseAppcheckV1betaDebugToken requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/debugTokens";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaDebugToken>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all ResourcePolicy configurations for the specified project and service.
		/// Firebaseappcheck_projects_services_resourcePolicies_list v1beta/{parent}/resourcePolicies
		/// </summary>
		/// <param name="parent">Required. The relative resource name of the parent project and service for which to list each associated ResourcePolicy, in the format: ``` projects/{project_number}/services/{service_name} ```</param>
		/// <param name="pageSize">The maximum number of ResourcePolicys to return in the response. Only explicitly configured policies are returned. The server may return fewer than this at its own discretion. If no value is specified (or too large a value is specified), the server will impose its own limit.</param>
		/// <param name="pageToken">Token returned from a previous call to ListResourcePolicies indicating where in the set of ResourcePolicys to resume listing. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListResourcePolicies must match the call that provided the page token; if they do not match, the result is undefined.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaListResourcePoliciesResponse> Firebaseappcheck_projects_services_resourcePolicies_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/resourcePolicies&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaListResourcePoliciesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates the specified ResourcePolicy configuration.
		/// Firebaseappcheck_projects_services_resourcePolicies_create v1beta/{parent}/resourcePolicies
		/// </summary>
		/// <param name="parent">Required. The relative resource name of the parent service in which the specified ResourcePolicy will be created, in the format: ``` projects/{project_number}/services/{service_id} ``` Note that the `service_id` element must be a supported service ID. Currently, the following service IDs are supported: * `oauth2.googleapis.com` (Google Identity for iOS)</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaResourcePolicy> Firebaseappcheck_projects_services_resourcePolicies_createAsync(string parent, GoogleFirebaseAppcheckV1betaResourcePolicy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/resourcePolicies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaResourcePolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Atomically updates the specified ResourcePolicy configurations.
		/// Firebaseappcheck_projects_services_resourcePolicies_batchUpdate v1beta/{parent}/resourcePolicies:batchUpdate
		/// </summary>
		/// <param name="parent">Required. The parent project name and the service, in the format ``` projects/{project_number}/services/{service_id} ``` The parent collection in the `name` field of any resource being updated must match this field, or the entire batch fails.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaBatchUpdateResourcePoliciesResponse> Firebaseappcheck_projects_services_resourcePolicies_batchUpdateAsync(string parent, GoogleFirebaseAppcheckV1betaBatchUpdateResourcePoliciesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/resourcePolicies:batchUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaBatchUpdateResourcePoliciesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all Service configurations for the specified project. Only Services which were explicitly configured using UpdateService or BatchUpdateServices will be returned.
		/// Firebaseappcheck_projects_services_list v1beta/{parent}/services
		/// </summary>
		/// <param name="parent">Required. The relative resource name of the parent project for which to list each associated Service, in the format: ``` projects/{project_number} ```</param>
		/// <param name="pageSize">The maximum number of Services to return in the response. Only explicitly configured services are returned. The server may return fewer than this at its own discretion. If no value is specified or set to zero (or too large a value is specified), the server will impose its own limit.</param>
		/// <param name="pageToken">Token returned from a previous call to ListServices indicating where in the set of Services to resume listing. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ListServices must match the call that provided the page token; if they do not match, the result is undefined.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaListServicesResponse> Firebaseappcheck_projects_services_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/services&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaListServicesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Atomically updates the specified Service configurations.
		/// Firebaseappcheck_projects_services_batchUpdate v1beta/{parent}/services:batchUpdate
		/// </summary>
		/// <param name="parent">Required. The parent project name shared by all Service configurations being updated, in the format ``` projects/{project_number} ``` The parent collection in the `name` field of any resource being updated must match this field, or the entire batch fails.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaBatchUpdateServicesResponse> Firebaseappcheck_projects_services_batchUpdateAsync(string parent, GoogleFirebaseAppcheckV1betaBatchUpdateServicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/services:batchUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaBatchUpdateServicesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Verifies the given App Check token and returns token usage signals that callers may act upon. This method currently only supports App Check tokens exchanged from the following attestation providers: * Play Integrity API * App Attest * DeviceCheck (`DCDevice` tokens) * reCAPTCHA Enterprise * reCAPTCHA v3 * Custom providers App Check tokens exchanged from debug secrets are also supported. Calling this method on an otherwise valid App Check token with an unsupported provider will cause an HTTP 400 error to be returned. Returns whether this token was already consumed before this call. If this is the first time this method has seen the given App Check token, the field `already_consumed` in the response will be absent. The given token will then be marked as `already_consumed` (set to `true`) for all future invocations of this method for that token. Note that if the given App Check token is invalid, an HTTP 403 error is returned instead of a response object, regardless whether the token was already consumed. Currently, when evaluating whether an App Check token was already consumed, only calls to this exact method are counted. Use of the App Check token elsewhere will not mark the token as being already consumed. The caller must have the [`firebaseappcheck.appCheckTokens.verify`](https://firebase.google.com/docs/projects/iam/permissions#app-check) permission to call this method. This permission is part of the [Firebase App Check Token Verifier role](https://firebase.google.com/docs/projects/iam/roles-predefined-product#app-check).
		/// Firebaseappcheck_projects_verifyAppCheckToken v1beta/{project}:verifyAppCheckToken
		/// </summary>
		/// <param name="project">Required. The relative resource name of the project for which the token was minted, in the format: ``` projects/{project_number} ``` If necessary, the `project_number` element can be replaced with the project ID of the Firebase project. Learn more about using project identifiers in Google's [AIP 2510](https://google.aip.dev/cloud/2510) standard.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleFirebaseAppcheckV1betaVerifyAppCheckTokenResponse> Firebaseappcheck_projects_verifyAppCheckTokenAsync(string project, GoogleFirebaseAppcheckV1betaVerifyAppCheckTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (project==null? "" : System.Uri.EscapeDataString(project))+":verifyAppCheckToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleFirebaseAppcheckV1betaVerifyAppCheckTokenResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
