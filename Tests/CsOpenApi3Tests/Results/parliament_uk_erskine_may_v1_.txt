//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErskineMayChapterOverview
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partNumber")]
		public System.Nullable<System.Int32> PartNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sections")]
		public ErskineMaySectionOverview[] Sections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErskineMaySectionOverview
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subSections")]
		public ErskineMaySectionOverview[] SubSections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="titleChain")]
		public string TitleChain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErskineMayFootnote
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErskineMayIndexTerm
	{
		
		[System.Runtime.Serialization.DataMember(Name="childTerms")]
		public ErskineMayIndexTerm[] ChildTerms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayAs")]
		public string DisplayAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentTerm")]
		public ErskineMayIndexTerm ParentTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="references")]
		public ErskineMayParagraphSearchResult[] References { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seeLinks")]
		public ErskineMayIndexTermSeeLink[] SeeLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErskineMayParagraphSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="chapterNumber")]
		public System.Nullable<System.Int32> ChapterNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chapterTitle")]
		public string ChapterTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paragraphReference")]
		public string ParagraphReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partNumber")]
		public System.Nullable<System.Int32> PartNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchResultText")]
		public string SearchResultText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sectionId")]
		public System.Nullable<System.Int32> SectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sectionTitle")]
		public string SectionTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sectionTitleChain")]
		public string SectionTitleChain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErskineMayIndexTermSeeLink
	{
		
		[System.Runtime.Serialization.DataMember(Name="indexTermId")]
		public System.Nullable<System.Int32> IndexTermId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seeType")]
		public string SeeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seeValue")]
		public string SeeValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErskineMayIndexTermSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayAs")]
		public string DisplayAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seeValue")]
		public string SeeValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErskineMayIndexTermSearchResultErskineMaySearch
	{
		
		[System.Runtime.Serialization.DataMember(Name="searchResults")]
		public ErskineMayIndexTermSearchResult[] SearchResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchTerm")]
		public string SearchTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchTerms")]
		public string[] SearchTerms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suggestedSearch")]
		public string SuggestedSearch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErskineMayParagraphSearchResultErskineMaySearch
	{
		
		[System.Runtime.Serialization.DataMember(Name="searchResults")]
		public ErskineMayParagraphSearchResult[] SearchResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchTerm")]
		public string SearchTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchTerms")]
		public string[] SearchTerms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suggestedSearch")]
		public string SuggestedSearch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErskineMayPart
	{
		
		[System.Runtime.Serialization.DataMember(Name="chapters")]
		public ErskineMayChapterOverview[] Chapters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErskineMaySectionDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="chapterNumber")]
		public System.Nullable<System.Int32> ChapterNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chapterTitle")]
		public string ChapterTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentHtml")]
		public string ContentHtml { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="footnotes")]
		public ErskineMayFootnote[] Footnotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isUpdated")]
		public System.Nullable<System.Boolean> IsUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSectionId")]
		public System.Nullable<System.Int32> ParentSectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentSectionTitle")]
		public string ParentSectionTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partNumber")]
		public System.Nullable<System.Int32> PartNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partTitle")]
		public string PartTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subSections")]
		public ErskineMaySectionOverview[] SubSections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="titleChain")]
		public string TitleChain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedDate")]
		public System.Nullable<System.DateTimeOffset> UpdatedDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErskineMaySectionSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="chapterNumber")]
		public System.Nullable<System.Int32> ChapterNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chapterTitle")]
		public string ChapterTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partNumber")]
		public System.Nullable<System.Int32> PartNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sectionId")]
		public System.Nullable<System.Int32> SectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sectionTitle")]
		public string SectionTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sectionTitleChain")]
		public string SectionTitleChain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErskineMaySectionSearchResultErskineMaySearch
	{
		
		[System.Runtime.Serialization.DataMember(Name="searchResults")]
		public ErskineMaySectionSearchResult[] SearchResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchTerm")]
		public string SearchTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchTerms")]
		public string[] SearchTerms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skip")]
		public System.Nullable<System.Int32> Skip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suggestedSearch")]
		public string SuggestedSearch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="take")]
		public System.Nullable<System.Int32> Take { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a single chapter overview by chapter number.
		/// ApiChapter_chapterNumberGet api/Chapter/{chapterNumber}
		/// </summary>
		/// <param name="chapterNumber">Chapter overview with the chapter number specified</param>
		/// <returns>Success</returns>
		public async Task<ErskineMayChapterOverview> ApiChapter_chapterNumberGetAsync(int chapterNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Chapter/"+chapterNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ErskineMayChapterOverview>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of index terms by start letter.
		/// ApiIndexTermBrowseGetByStartLetterAndSkipAndTake api/IndexTerm/browse
		/// </summary>
		/// <param name="startLetter">Index terms by start letter</param>
		/// <param name="skip">The number of records to skip from the first, default is 0.</param>
		/// <param name="take">The number of records to return, default is 20, maximum is 20.</param>
		/// <returns>Success</returns>
		public async Task<ErskineMayIndexTermSearchResultErskineMaySearch> ApiIndexTermBrowseGetByStartLetterAndSkipAndTakeAsync(string startLetter, int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/IndexTerm/browse?startLetter=" + (startLetter==null? "" : System.Uri.EscapeDataString(startLetter))+"&skip="+skip+"&take="+take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ErskineMayIndexTermSearchResultErskineMaySearch>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an index term by id.
		/// ApiIndexTerm_indexTermIdGet api/IndexTerm/{indexTermId}
		/// </summary>
		/// <param name="indexTermId">Index term by if</param>
		/// <returns>Success</returns>
		public async Task<ErskineMayIndexTerm> ApiIndexTerm_indexTermIdGetAsync(int indexTermId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/IndexTerm/"+indexTermId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ErskineMayIndexTerm>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all parts.
		/// ApiPartGet api/Part
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ErskineMayPart[]> ApiPartGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Part";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ErskineMayPart[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a part by part number.
		/// ApiPart_partNumberGet api/Part/{partNumber}
		/// </summary>
		/// <param name="partNumber">Part by part number</param>
		/// <returns>Success</returns>
		public async Task<ErskineMayPart> ApiPart_partNumberGetAsync(int partNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Part/"+partNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ErskineMayPart>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of index terms which contain the search term.
		/// ApiSearchIndexTermSearchResults_searchTermGetBySkipAndTake api/Search/IndexTermSearchResults/{searchTerm}
		/// </summary>
		/// <param name="searchTerm">Index terms which contain search term.</param>
		/// <param name="skip">The number of records to skip from the first, default is 0.</param>
		/// <param name="take">The number of records to return, default is 20, maximum is 20.</param>
		/// <returns>Success</returns>
		public async Task<ErskineMayIndexTermSearchResultErskineMaySearch> ApiSearchIndexTermSearchResults_searchTermGetBySkipAndTakeAsync(string searchTerm, int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Search/IndexTermSearchResults/"+ (searchTerm==null? "" : System.Uri.EscapeDataString(searchTerm))+"&skip="+skip+"&take="+take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ErskineMayIndexTermSearchResultErskineMaySearch>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a section overview by reference.
		/// ApiSearchParagraph_referenceGet api/Search/Paragraph/{reference}
		/// </summary>
		/// <param name="reference">Section overview by reference.</param>
		/// <returns>Success</returns>
		public async Task<ErskineMaySectionOverview> ApiSearchParagraph_referenceGetAsync(string reference, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Search/Paragraph/"+ (reference==null? "" : System.Uri.EscapeDataString(reference));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ErskineMaySectionOverview>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of paragraphs which contain the search term.
		/// ApiSearchParagraphSearchResults_searchTermGetBySkipAndTake api/Search/ParagraphSearchResults/{searchTerm}
		/// </summary>
		/// <param name="searchTerm">Paragraphs which contain search term in their content.</param>
		/// <param name="skip">The number of records to skip from the first, default is 0.</param>
		/// <param name="take">The number of records to return, default is 20, maximum is 20.</param>
		/// <returns>Success</returns>
		public async Task<ErskineMayParagraphSearchResultErskineMaySearch> ApiSearchParagraphSearchResults_searchTermGetBySkipAndTakeAsync(string searchTerm, int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Search/ParagraphSearchResults/"+ (searchTerm==null? "" : System.Uri.EscapeDataString(searchTerm))+"&skip="+skip+"&take="+take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ErskineMayParagraphSearchResultErskineMaySearch>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of sections which contain the search term.
		/// ApiSearchSectionSearchResults_searchTermGetBySkipAndTake api/Search/SectionSearchResults/{searchTerm}
		/// </summary>
		/// <param name="searchTerm">Sections which contain search term in their title.</param>
		/// <param name="skip">The number of records to skip from the first, default is 0.</param>
		/// <param name="take">The number of records to return, default is 20, maximum is 20.</param>
		/// <returns>Success</returns>
		public async Task<ErskineMaySectionSearchResultErskineMaySearch> ApiSearchSectionSearchResults_searchTermGetBySkipAndTakeAsync(string searchTerm, int skip, int take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Search/SectionSearchResults/"+ (searchTerm==null? "" : System.Uri.EscapeDataString(searchTerm))+"&skip="+skip+"&take="+take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ErskineMaySectionSearchResultErskineMaySearch>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a section by section id.
		/// ApiSection_sectionIdGet api/Section/{sectionId}
		/// </summary>
		/// <param name="sectionId">Section by id.</param>
		/// <returns>Success</returns>
		public async Task<ErskineMaySectionDetail> ApiSection_sectionIdGetAsync(int sectionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Section/"+sectionId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ErskineMaySectionDetail>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a section overview by section id and step.
		/// ApiSection_sectionId__stepGet api/Section/{sectionId},{step}
		/// </summary>
		/// <param name="sectionId">Section by id.</param>
		/// <param name="step">Number of sections to step over from given section.</param>
		/// <returns>Success</returns>
		public async Task<ErskineMaySectionOverview> ApiSection_sectionId__stepGetAsync(int sectionId, int step, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Section/"+sectionId+","+step;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ErskineMaySectionOverview>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
