//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Comparison
	{
		
		[System.Runtime.Serialization.DataMember(Name="differences")]
		public System.Nullable<System.Int32> Differences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public Element[] Elements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public System.Nullable<System.Boolean> Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="show_comparisons_public_url")]
		public string Show_comparisons_public_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="show_comparisons_web_url")]
		public string Show_comparisons_web_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tolerance")]
		public System.Nullable<System.Int32> Tolerance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Element
	{
		
		[System.Runtime.Serialization.DataMember(Name="difference")]
		public string Difference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="full_path")]
		public string Full_path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="short_path")]
		public string Short_path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="show_difference_public_url")]
		public string Show_difference_public_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="show_difference_web_url")]
		public string Show_difference_web_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Full_comparison_test
	{
		
		[System.Runtime.Serialization.DataMember(Name="base")]
		public Full_comparison_testBase Base { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public Target[] Targets { get; set; }
	}
	
	public class Full_comparison_testBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="screenshot")]
		public Screenshot Screenshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Screenshot
	{
		
		[System.Runtime.Serialization.DataMember(Name="screenshot_id")]
		public System.Nullable<System.Int32> Screenshot_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Target
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparison")]
		public Comparison Comparison { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="screenshot")]
		public Screenshot Screenshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Single_comparison_test
	{
		
		[System.Runtime.Serialization.DataMember(Name="base")]
		public Single_comparison_testBase Base { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public Target Target { get; set; }
	}
	
	public class Single_comparison_testBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="screenshot")]
		public Screenshot Screenshot { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Compare Screenshot Test Versions
		/// Get comparison results for all browsers in target screenshot test against the same browser in the base screenshot test. This is a good method for regression testing. For example, you've run a screenshot test against a set of browsers that is "good". Then, after some changes, you run a new screenshot test against the same set of browsers. This method will compare each of the same browsers against each other. For example, IE9 will be compared to IE9 from an earlier test. This is a many-to-many comparison where the OS/Browser/Resolution must match between the two test versions in order for the comparison to return results. The two versions can be from the same screenshot_test_id or not.
		/// Screenshots_target_screenshot_test_id_target_version_idComparisonParallel_base_version_idGetByFormatAndCallbackAndTolerance screenshots/{target_screenshot_test_id}/{target_version_id}/comparison/parallel/{base_version_id}
		/// </summary>
		/// <param name="target_screenshot_test_id">test id of the target Screenshot Test</param>
		/// <param name="target_version_id">version id of the target Screenshot Test</param>
		/// <param name="base_version_id">version id of the base Screenshot Test</param>
		/// <param name="format">The format of the returned data. Possible values are "json" or "jsonp".</param>
		/// <param name="callback">Name of callback method for JSONP requests.</param>
		/// <param name="tolerance">Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences.</param>
		/// <returns>An array of Configuration objects. Within each configuration is an array of browsers</returns>
		public async Task<Single_comparison_test[]> Screenshots_target_screenshot_test_id_target_version_idComparisonParallel_base_version_idGetByFormatAndCallbackAndToleranceAsync(int target_screenshot_test_id, int target_version_id, int base_version_id, string format, string callback, string tolerance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "screenshots/"+target_screenshot_test_id+"/"+target_version_id+"/comparison/parallel/"+base_version_id+"?format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&tolerance=" + (tolerance==null? "" : System.Uri.EscapeDataString(tolerance));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Single_comparison_test[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Compare Full Screenshot Test
		/// Get comparison results for all browsers in target screenshot test against a base screenshot result. The base result can be from the same test or from another test run at an earlier time. This is a one-to-many comparison.
		/// Screenshots_target_screenshot_test_id_target_version_idComparison_base_result_idGetByFormatAndCallbackAndTolerance screenshots/{target_screenshot_test_id}/{target_version_id}/comparison/{base_result_id}
		/// </summary>
		/// <param name="target_screenshot_test_id">test id of the target Screenshot Test</param>
		/// <param name="target_version_id">version id of the target Screenshot Test</param>
		/// <param name="base_result_id">result id of the base Screenshot Test</param>
		/// <param name="format">The format of the returned data. Possible values are "json" or "jsonp".</param>
		/// <param name="callback">Name of callback method for JSONP requests.</param>
		/// <param name="tolerance">Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences.</param>
		/// <returns>An array of Configuration objects. Within each configuration is an array of browsers</returns>
		public async Task<Full_comparison_test> Screenshots_target_screenshot_test_id_target_version_idComparison_base_result_idGetByFormatAndCallbackAndToleranceAsync(int target_screenshot_test_id, int target_version_id, int base_result_id, string format, string callback, string tolerance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "screenshots/"+target_screenshot_test_id+"/"+target_version_id+"/comparison/"+base_result_id+"?format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&tolerance=" + (tolerance==null? "" : System.Uri.EscapeDataString(tolerance));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Full_comparison_test>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Compare Single Screenshot
		/// Get comparison results for a single target screenshot result against a base screenshot result. This is a one-to-one comparison.
		/// Screenshots_target_screenshot_test_id_target_version_id_target_result_idComparison_base_result_idGetByFormatAndCallbackAndTolerance screenshots/{target_screenshot_test_id}/{target_version_id}/{target_result_id}/comparison/{base_result_id}
		/// </summary>
		/// <param name="target_screenshot_test_id">test id of the target Screenshot Test</param>
		/// <param name="target_version_id">version id of the target Screenshot Test</param>
		/// <param name="target_result_id">result id of the target Screenshot Test</param>
		/// <param name="base_result_id">result id of the base Screenshot Test</param>
		/// <param name="format">The format of the returned data. Possible values are "json" or "jsonp".</param>
		/// <param name="callback">Name of callback method for JSONP requests.</param>
		/// <param name="tolerance">Used as the basis for detecting box model differences in element positioning and dimensions that should be flagged and reported back to the comparison results. The default is 30px which is a good basis for finding notable layout differences.</param>
		/// <returns>An array of Configuration objects. Within each configuration is an array of browsers</returns>
		public async Task<Single_comparison_test> Screenshots_target_screenshot_test_id_target_version_id_target_result_idComparison_base_result_idGetByFormatAndCallbackAndToleranceAsync(int target_screenshot_test_id, int target_version_id, int target_result_id, int base_result_id, string format, string callback, string tolerance, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "screenshots/"+target_screenshot_test_id+"/"+target_version_id+"/"+target_result_id+"/comparison/"+base_result_id+"?format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&tolerance=" + (tolerance==null? "" : System.Uri.EscapeDataString(tolerance));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Single_comparison_test>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
