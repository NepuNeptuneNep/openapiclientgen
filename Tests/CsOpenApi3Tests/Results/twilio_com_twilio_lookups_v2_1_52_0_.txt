//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Lookupsv2phone_number
	{
		
		/// <summary>
		/// An object that contains information on the unconditional call forwarding status of mobile phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="call_forwarding")]
		public object Call_forwarding { get; set; }
		
		/// <summary>
		/// An object that contains caller name information based on [CNAM](https://support.twilio.com/hc/en-us/articles/360051670533-Getting-Started-with-CNAM-Caller-ID).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="caller_name")]
		public object Caller_name { get; set; }
		
		/// <summary>
		/// International dialing prefix of the phone number defined in the E.164 standard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calling_country_code")]
		public string Calling_country_code { get; set; }
		
		/// <summary>
		/// The phone number's [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// An object that contains identity match information. The result of comparing user-provided information including name, address, date of birth, national ID, against authoritative phone-based data sources
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity_match")]
		public object Identity_match { get; set; }
		
		/// <summary>
		/// An object that contains line type information including the carrier name, mobile country code, and mobile network code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line_type_intelligence")]
		public object Line_type_intelligence { get; set; }
		
		/// <summary>
		/// An object that contains live activity information for a mobile phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="live_activity")]
		public object Live_activity { get; set; }
		
		/// <summary>
		/// The phone number in [national format](https://en.wikipedia.org/wiki/National_conventions_for_writing_telephone_numbers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="national_format")]
		public string National_format { get; set; }
		
		/// <summary>
		/// The phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format, which consists of a + followed by the country code and subscriber number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// An object that contains information of a mobile phone number quality score. Quality score will return a risk score about the phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number_quality_score")]
		public object Phone_number_quality_score { get; set; }
		
		/// <summary>
		/// An object that contains reassigned number information. Reassigned Numbers will return a phone number's reassignment status given a phone number and date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reassigned_number")]
		public object Reassigned_number { get; set; }
		
		/// <summary>
		/// An object that contains information on the last date the subscriber identity module (SIM) was changed for a mobile phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sim_swap")]
		public object Sim_swap { get; set; }
		
		/// <summary>
		/// An object that contains information on if a phone number has been currently or previously blocked by Verify Fraud Guard for receiving malicious SMS pumping traffic as well as other signals associated with risky carriers and low conversion rates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sms_pumping_risk")]
		public object Sms_pumping_risk { get; set; }
		
		/// <summary>
		/// The absolute URL of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Boolean which indicates if the phone number is in a valid range that can be freely assigned by a carrier to a user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public System.Nullable<System.Boolean> Valid { get; set; }
		
		/// <summary>
		/// Contains reasons why a phone number is invalid. Possible values: TOO_SHORT, TOO_LONG, INVALID_BUT_POSSIBLE, INVALID_COUNTRY_CODE, INVALID_LENGTH, NOT_A_NUMBER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validation_errors")]
		public Phone_number_enum_validation_error[] Validation_errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Phone_number_enum_validation_error
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOO_SHORT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOO_LONG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_BUT_POSSIBLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_COUNTRY_CODE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_LENGTH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_A_NUMBER = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Phone_number_enum_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		landline = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mobile = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		voip = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// FetchPhoneNumber v2/PhoneNumbers/{PhoneNumber}
		/// </summary>
		/// <param name="PhoneNumber">The phone number to lookup in E.164 or national format. Default country code is +1 (North America).</param>
		/// <param name="Fields">A comma-separated list of fields to return. Possible values are caller_name, sim_swap, call_forwarding, live_activity, line_type_intelligence, identity_match, reassigned_number.</param>
		/// <param name="CountryCode">The [country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) used if the phone number provided is in national format.</param>
		/// <param name="FirstName">User’s first name. This query parameter is only used (optionally) for identity_match package requests.</param>
		/// <param name="LastName">User’s last name. This query parameter is only used (optionally) for identity_match package requests.</param>
		/// <param name="AddressLine1">User’s first address line. This query parameter is only used (optionally) for identity_match package requests.</param>
		/// <param name="AddressLine2">User’s second address line. This query parameter is only used (optionally) for identity_match package requests.</param>
		/// <param name="City">User’s city. This query parameter is only used (optionally) for identity_match package requests.</param>
		/// <param name="State">User’s country subdivision, such as state, province, or locality. This query parameter is only used (optionally) for identity_match package requests.</param>
		/// <param name="PostalCode">User’s postal zip code. This query parameter is only used (optionally) for identity_match package requests.</param>
		/// <param name="AddressCountryCode">User’s country, up to two characters. This query parameter is only used (optionally) for identity_match package requests.</param>
		/// <param name="NationalId">User’s national ID, such as SSN or Passport ID. This query parameter is only used (optionally) for identity_match package requests.</param>
		/// <param name="DateOfBirth">User’s date of birth, in YYYYMMDD format. This query parameter is only used (optionally) for identity_match package requests.</param>
		/// <param name="LastVerifiedDate">The date you obtained consent to call or text the end-user of the phone number or a date on which you are reasonably certain that the end-user could still be reached at that number. This query parameter is only used (optionally) for reassigned_number package requests.</param>
		/// <returns>OK</returns>
		public async Task<Lookupsv2phone_number> FetchPhoneNumberAsync(string PhoneNumber, string Fields, string CountryCode, string FirstName, string LastName, string AddressLine1, string AddressLine2, string City, string State, string PostalCode, string AddressCountryCode, string NationalId, string DateOfBirth, string LastVerifiedDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/PhoneNumbers/"+ (PhoneNumber==null? "" : System.Uri.EscapeDataString(PhoneNumber))+"&Fields=" + (Fields==null? "" : System.Uri.EscapeDataString(Fields))+"&CountryCode=" + (CountryCode==null? "" : System.Uri.EscapeDataString(CountryCode))+"&FirstName=" + (FirstName==null? "" : System.Uri.EscapeDataString(FirstName))+"&LastName=" + (LastName==null? "" : System.Uri.EscapeDataString(LastName))+"&AddressLine1=" + (AddressLine1==null? "" : System.Uri.EscapeDataString(AddressLine1))+"&AddressLine2=" + (AddressLine2==null? "" : System.Uri.EscapeDataString(AddressLine2))+"&City=" + (City==null? "" : System.Uri.EscapeDataString(City))+"&State=" + (State==null? "" : System.Uri.EscapeDataString(State))+"&PostalCode=" + (PostalCode==null? "" : System.Uri.EscapeDataString(PostalCode))+"&AddressCountryCode=" + (AddressCountryCode==null? "" : System.Uri.EscapeDataString(AddressCountryCode))+"&NationalId=" + (NationalId==null? "" : System.Uri.EscapeDataString(NationalId))+"&DateOfBirth=" + (DateOfBirth==null? "" : System.Uri.EscapeDataString(DateOfBirth))+"&LastVerifiedDate=" + (LastVerifiedDate==null? "" : System.Uri.EscapeDataString(LastVerifiedDate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Lookupsv2phone_number>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
