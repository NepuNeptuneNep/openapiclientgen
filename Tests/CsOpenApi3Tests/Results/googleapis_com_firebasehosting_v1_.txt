//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// A set of ACME challenges you can use to allow Hosting to create an SSL certificate for your domain name before directing traffic to Hosting servers. Use either the DNS or HTTP challenge; it's not necessary to provide both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CertVerification
	{
		
		/// <summary>
		/// A set of DNS record updates that you should make to allow Hosting to serve secure content in response to requests against your domain name. These updates present the current state of your domain name's DNS records when Hosting last queried them, and the desired set of records that Hosting needs to see before your custom domain can be fully active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dns")]
		public DnsUpdates Dns { get; set; }
		
		/// <summary>
		/// A file you can add to your existing, non-Hosting hosting service that confirms your intent to allow Hosting's Certificate Authorities to create an SSL certificate for your domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="http")]
		public HttpUpdate Http { get; set; }
	}
	
	/// <summary>
	/// A set of DNS record updates that you should make to allow Hosting to serve secure content in response to requests against your domain name. These updates present the current state of your domain name's DNS records when Hosting last queried them, and the desired set of records that Hosting needs to see before your custom domain can be fully active.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsUpdates
	{
		
		/// <summary>
		/// The last time Hosting checked your custom domain's DNS records.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkTime")]
		public string CheckTime { get; set; }
		
		/// <summary>
		/// The set of DNS records Hosting needs to serve secure content on the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desired")]
		public DnsRecordSet[] Desired { get; set; }
		
		/// <summary>
		/// The set of DNS records Hosting discovered when inspecting a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discovered")]
		public DnsRecordSet[] Discovered { get; set; }
	}
	
	/// <summary>
	/// A set of DNS records relevant to the setup and maintenance of a custom domain in Firebase Hosting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsRecordSet
	{
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkError")]
		public Status CheckError { get; set; }
		
		/// <summary>
		/// Output only. The domain name the record set pertains to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Output only. Records on the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="records")]
		public DnsRecord[] Records { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// DNS records are resource records that define how systems and services should behave when handling requests for a domain name. For example, when you add `A` records to your domain name's DNS records, you're informing other systems (such as your users' web browsers) to contact those IPv4 addresses to retrieve resources relevant to your domain name (such as your Hosting site files).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsRecord
	{
		
		/// <summary>
		/// Output only. The domain name the record pertains to, e.g. `foo.bar.com.`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Output only. The data of the record. The meaning of the value depends on record type: - A and AAAA: IP addresses for the domain name. - CNAME: Another domain to check for records. - TXT: Arbitrary text strings associated with the domain name. Hosting uses TXT records to determine which Firebase projects have permission to act on the domain name's behalf. - CAA: The record's flags, tag, and value, e.g. `0 issue "pki.goog"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rdata")]
		public string Rdata { get; set; }
		
		/// <summary>
		/// Output only. An enum that indicates the a required action for this record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredAction")]
		public System.Nullable<DnsRecordRequiredAction> RequiredAction { get; set; }
		
		/// <summary>
		/// Output only. The record's type, which determines what data the record contains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DnsRecordType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DnsRecordRequiredAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DnsRecordType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CNAME = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TXT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAAA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAA = 5,
	}
	
	/// <summary>
	/// A file you can add to your existing, non-Hosting hosting service that confirms your intent to allow Hosting's Certificate Authorities to create an SSL certificate for your domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpUpdate
	{
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkError")]
		public Status CheckError { get; set; }
		
		/// <summary>
		/// Output only. A text string to serve at the path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desired")]
		public string Desired { get; set; }
		
		/// <summary>
		/// Output only. Whether Hosting was able to find the required file contents on the specified path during its last check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discovered")]
		public string Discovered { get; set; }
		
		/// <summary>
		/// Output only. The last time Hosting systems checked for the file contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCheckTime")]
		public string LastCheckTime { get; set; }
		
		/// <summary>
		/// Output only. The path to the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Metadata associated with a`CustomDomain` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomDomainMetadata
	{
		
		/// <summary>
		/// The `CertState` of the domain name's SSL certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certState")]
		public System.Nullable<CustomDomainMetadataCertState> CertState { get; set; }
		
		/// <summary>
		/// The `HostState` of the domain name this `CustomDomain` refers to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostState")]
		public System.Nullable<CustomDomainMetadataHostState> HostState { get; set; }
		
		/// <summary>
		/// A list of issues that are currently preventing Hosting from completing the operation. These are generally DNS-related issues that Hosting encounters when querying a domain name's records or attempting to mint an SSL certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public Status[] Issues { get; set; }
		
		/// <summary>
		/// A set of DNS record updates and ACME challenges that allow you to transition domain names to Firebase Hosting with zero downtime. These updates allow Hosting to create an SSL certificate and establish ownership for your custom domain before Hosting begins serving traffic on it. If your domain name is already in active use with another provider, add one of the challenges and make the recommended DNS updates. After adding challenges and adjusting DNS records as necessary, wait for the `ownershipState` to be `OWNERSHIP_ACTIVE` and the `certState` to be `CERT_ACTIVE` before sending traffic to Hosting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveMigrationSteps")]
		public LiveMigrationStep[] LiveMigrationSteps { get; set; }
		
		/// <summary>
		/// The `OwnershipState` of the domain name this `CustomDomain` refers to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownershipState")]
		public System.Nullable<CustomDomainMetadataOwnershipState> OwnershipState { get; set; }
		
		/// <summary>
		/// A set of DNS record updates that you should make to allow Hosting to serve secure content in response to requests against your domain name. These updates present the current state of your domain name's DNS records when Hosting last queried them, and the desired set of records that Hosting needs to see before your custom domain can be fully active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quickSetupUpdates")]
		public DnsUpdates QuickSetupUpdates { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomDomainMetadataCertState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_PREPARING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_VALIDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_PROPAGATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_ACTIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_EXPIRING_SOON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CERT_EXPIRED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomDomainMetadataHostState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_UNHOSTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_UNREACHABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_MISMATCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_CONFLICT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOST_ACTIVE = 5,
	}
	
	/// <summary>
	/// A set of updates including ACME challenges and DNS records that allow Hosting to create an SSL certificate and establish project ownership for your domain name before you direct traffic to Hosting servers. Use these updates to facilitate zero downtime migrations to Hosting from other services. After you've made the recommended updates, check your custom domain's `ownershipState` and `certState`. To avoid downtime, they should be `OWNERSHIP_ACTIVE` and `CERT_ACTIVE`, respectively, before you update your `A` and `AAAA` records.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LiveMigrationStep
	{
		
		/// <summary>
		/// A set of ACME challenges you can use to allow Hosting to create an SSL certificate for your domain name before directing traffic to Hosting servers. Use either the DNS or HTTP challenge; it's not necessary to provide both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certVerification")]
		public CertVerification CertVerification { get; set; }
		
		/// <summary>
		/// A set of DNS record updates that you should make to allow Hosting to serve secure content in response to requests against your domain name. These updates present the current state of your domain name's DNS records when Hosting last queried them, and the desired set of records that Hosting needs to see before your custom domain can be fully active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsUpdates")]
		public DnsUpdates DnsUpdates { get; set; }
		
		/// <summary>
		/// Output only. Issues that prevent the current step from completing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public Status[] Issues { get; set; }
		
		/// <summary>
		/// Output only. The state of the live migration step, indicates whether you should work to complete the step now, in the future, or have already completed it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<LiveMigrationStepState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LiveMigrationStepState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREPARING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPLETE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomDomainMetadataOwnershipState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_MISSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_UNREACHABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_MISMATCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_CONFLICT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_PENDING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNERSHIP_ACTIVE = 6,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// DeleteOperation is a part of the google.longrunning.Operations interface, but is not implemented for CustomDomain resources.
		/// Firebasehosting_projects_sites_customDomains_operations_delete v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Firebasehosting_projects_sites_customDomains_operations_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Firebasehosting_operations_list v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Firebasehosting_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// CancelOperation is a part of the google.longrunning.Operations interface, but is not implemented for CustomDomain resources.
		/// Firebasehosting_projects_sites_customDomains_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Firebasehosting_projects_sites_customDomains_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
