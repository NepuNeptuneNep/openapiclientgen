//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateClusterResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Cluster[] ProcessedClusters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UnprocessedCluster[] UnprocessedClusters { get; set; }
	}
	
	/// <summary>
	/// Contains all of the attributes of a specific cluster.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cluster
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterPendingUpdates PendingUpdates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfShards { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Shard[] Shards { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AZStatus AvailabilityMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Endpoint ClusterEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnginePatchVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SecurityGroupMembership[] SecurityGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TLSEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnapshotRetentionLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ACLName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataTieringStatus DataTiering { get; set; }
	}
	
	/// <summary>
	/// A list of updates being applied to the cluster
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClusterPendingUpdates
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReshardingStatus Resharding { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ACLsUpdateStatus ACLs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PendingModifiedServiceUpdate[] ServiceUpdates { get; set; }
	}
	
	/// <summary>
	/// The status of the online resharding
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReshardingStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SlotMigration SlotMigration { get; set; }
	}
	
	/// <summary>
	/// Represents the progress of an online resharding operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlotMigration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ProgressPercentage { get; set; }
	}
	
	/// <summary>
	/// The status of the ACL update
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ACLsUpdateStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ACLToApply { get; set; }
	}
	
	/// <summary>
	/// Update action that has yet to be processed for the corresponding apply/stop request
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PendingModifiedServiceUpdate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUpdateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdateStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServiceUpdateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		available = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-progress")]
		inMinusprogress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		complete = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scheduled = 3,
	}
	
	/// <summary>
	/// Represents a collection of nodes in a cluster. One node in the node group is the read/write primary node. All the other nodes are read-only Replica nodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Shard
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Slots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Node[] Nodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfNodes { get; set; }
	}
	
	/// <summary>
	/// Represents an individual node within a cluster. Each node runs its own instance of the cluster's protocol-compliant caching software.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Node
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AvailabilityZone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Endpoint Endpoint { get; set; }
	}
	
	/// <summary>
	/// Represents the information required for client programs to connect to the cluster and its nodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Endpoint
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AZStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		singleaz = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		multiaz = 1,
	}
	
	/// <summary>
	/// Represents a single security group and its status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecurityGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SecurityGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataTieringStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
	}
	
	/// <summary>
	/// A cluster whose updates have failed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnprocessedCluster
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateClusterRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ClusterNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdateRequest ServiceUpdate { get; set; }
	}
	
	/// <summary>
	/// A request to apply a service update
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceUpdateRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUpdateNameToApply { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceUpdateNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidParameterValueException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopySnapshotResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	/// <summary>
	/// Represents a copy of an entire cluster as of the time when the snapshot was taken.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Snapshot
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClusterConfiguration ClusterConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataTieringStatus DataTiering { get; set; }
	}
	
	/// <summary>
	/// A list of cluster configuration options. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClusterConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnapshotRetentionLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumShards { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShardDetail[] Shards { get; set; }
	}
	
	/// <summary>
	/// Provides details of a shard in a snapshot
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShardDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShardConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Size { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SnapshotCreationTime { get; set; }
	}
	
	/// <summary>
	/// Shard configuration options. Each shard configuration has the following: Slots and ReplicaCount.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShardConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Slots { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReplicaCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopySnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceSnapshotName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TargetSnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetBucket { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// A tag that can be added to an MemoryDB resource. Tags are composed of a Key/Value pair. You can use tags to categorize and track all your MemoryDB resources. When you add or remove tags on clusters, those actions will be replicated to all nodes in the cluster. A tag with a null Value is permitted. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/tagging-resources.html">Tagging your MemoryDB resources</a> 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SnapshotAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SnapshotNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SnapshotQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidSnapshotStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceLinkedRoleNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidParameterCombinationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagQuotaPerResourceExceeded
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateACLResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ACL ACL { get; set; }
	}
	
	/// <summary>
	/// An Access Control List. You can authenticate users with Access Contol Lists. ACLs enable you to control cluster access by grouping users. These Access control lists are designed as a way to organize access to clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ACL
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinimumEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ACLPendingChanges PendingChanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Clusters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
	}
	
	/// <summary>
	/// Returns the updates being applied to the ACL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ACLPendingChanges
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserNamesToRemove { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserNamesToAdd { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateACLRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ACLName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DuplicateUserNameFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ACLAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DefaultUserRequired
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ACLQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateClusterResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateClusterRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumShards { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumReplicasPerShard { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Port { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> TLSEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SnapshotArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnapshotRetentionLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotWindow { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ACLName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AutoMinorVersionUpgrade { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DataTiering { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClusterAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubnetGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClusterQuotaForCustomerExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NodeQuotaForClusterExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NodeQuotaForCustomerExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParameterGroupNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsufficientClusterCapacityFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidVPCNetworkStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShardsPerClusterQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidCredentialsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ACLNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidACLStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateParameterGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterGroup ParameterGroup { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a CreateParameterGroup operation. A parameter group represents a combination of specific values for the parameters that are passed to the engine software during startup.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParameterGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Family { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateParameterGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Family { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParameterGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParameterGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidParameterGroupStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSnapshotResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClusterNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidClusterStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSubnetGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetGroup SubnetGroup { get; set; }
	}
	
	/// <summary>
	/// <p>Represents the output of one of the following operations:</p> <ul> <li> <p>CreateSubnetGroup</p> </li> <li> <p>UpdateSubnetGroup</p> </li> </ul> <p>A subnet group is a collection of subnets (typically private) that you can designate for your clusters running in an Amazon Virtual Private Cloud (VPC) environment.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubnetGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpcId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Subnet[] Subnets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
	}
	
	/// <summary>
	/// Represents the subnet associated with a cluster. This parameter refers to subnets defined in Amazon Virtual Private Cloud (Amazon VPC) and used with MemoryDB.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Subnet
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AvailabilityZone AvailabilityZone { get; set; }
	}
	
	/// <summary>
	/// Indicates if the cluster has a Multi-AZ configuration (multiaz) or not (singleaz).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AvailabilityZone
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSubnetGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubnetGroupAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubnetGroupQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubnetQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidSubnet
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubnetNotAllowedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
	}
	
	/// <summary>
	/// You create users and assign them specific permissions by using an access string. You assign the users to Access Control Lists aligned with a specific role (administrators, human resources) that are then deployed to one or more MemoryDB clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccessString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ACLNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinimumEngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Authentication Authentication { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
	}
	
	/// <summary>
	/// Denotes the user's authentication properties, such as whether it requires a password to authenticate. Used in output responses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Authentication
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PasswordCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		password = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no-password")]
		noMinuspassword = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		iam = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationMode AuthenticationMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessString { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Denotes the user's authentication properties, such as whether it requires a password to authenticate. Used in output responses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthenticationMode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public InputAuthenticationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Passwords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputAuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		password = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		iam = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteACLResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ACL ACL { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteACLRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ACLName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteClusterResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteClusterRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FinalSnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteParameterGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterGroup ParameterGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteParameterGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSnapshotResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Snapshot Snapshot { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSnapshotRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSubnetGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetGroup SubnetGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSubnetGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubnetGroupInUseFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidUserStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeACLsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ACL[] ACLs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeACLsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ACLName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeClustersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Cluster[] Clusters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeClustersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowShardDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEngineVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EngineVersionInfo[] EngineVersions { get; set; }
	}
	
	/// <summary>
	/// Provides details of the Redis engine version
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EngineVersionInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EnginePatchVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupFamily { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEngineVersionsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupFamily { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DefaultOnly { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEventsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Event[] Events { get; set; }
	}
	
	/// <summary>
	/// Represents a single occurrence of something interesting within the system. Some examples of events are creating a cluster or adding or removing a node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		node = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="parameter-group")]
		parameterMinusgroup = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subnet-group")]
		subnetMinusgroup = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cluster = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		acl = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEventsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceType SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeParameterGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterGroup[] ParameterGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeParameterGroupsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeParametersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Parameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// Describes an individual setting that controls some aspect of MemoryDB behavior.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Parameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinimumEngineVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeParametersRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeReservedNodesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedNode[] ReservedNodes { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>PurchaseReservedNodesOffering</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReservedNode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NodeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecurringCharge[] RecurringCharges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
	}
	
	/// <summary>
	/// The recurring charge to run this reserved node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecurringCharge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> RecurringChargeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecurringChargeFrequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeReservedNodesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReservedNodeNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeReservedNodesOfferingsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedNodesOffering[] ReservedNodesOfferings { get; set; }
	}
	
	/// <summary>
	/// The offering type of this node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReservedNodesOffering
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> FixedPrice { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecurringCharge[] RecurringCharges { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeReservedNodesOfferingsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OfferingType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReservedNodesOfferingNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeServiceUpdatesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdate[] ServiceUpdates { get; set; }
	}
	
	/// <summary>
	/// An update that you can apply to your MemoryDB clusters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceUpdate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUpdateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ReleaseDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdateStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdateType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodesUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset AutoUpdateStartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ServiceUpdateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="security-update")]
		securityMinusupdate = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeServiceUpdatesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUpdateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClusterNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceUpdateStatus[] Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSnapshotsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Snapshot[] Snapshots { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSnapshotsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClusterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShowDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSubnetGroupsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetGroup[] SubnetGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSubnetGroupsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeUsersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public User[] Users { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeUsersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Filter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Used to streamline results of a search based on the property being filtered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Filter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailoverShardResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailoverShardRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ShardName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class APICallRateForCustomerExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShardNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestFailoverNotAvailableFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidKMSKeyFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAllowedNodeTypeUpdatesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ScaleUpNodeTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ScaleDownNodeTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAllowedNodeTypeUpdatesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidARNFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PurchaseReservedNodesOfferingResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReservedNode ReservedNode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PurchaseReservedNodesOfferingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ReservedNodesOfferingId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReservationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NodeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReservedNodeAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReservedNodeQuotaExceededFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetParameterGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterGroup ParameterGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResetParameterGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ParameterNames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagNotFoundFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateACLResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ACL ACL { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateACLRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ACLName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserNamesToAdd { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] UserNamesToRemove { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateClusterResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Cluster Cluster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateClusterRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClusterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaintenanceWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnsTopicStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SnapshotWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SnapshotRetentionLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EngineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReplicaConfigurationRequest ReplicaConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShardConfigurationRequest ShardConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ACLName { get; set; }
	}
	
	/// <summary>
	/// A request to configure the number of replicas in a shard
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplicaConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReplicaCount { get; set; }
	}
	
	/// <summary>
	/// A request to configure the sharding properties of a cluster
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShardConfigurationRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ShardCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidNodeStateFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NoOperationFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateParameterGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterGroup ParameterGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateParameterGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ParameterGroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ParameterNameValue[] ParameterNameValues { get; set; }
	}
	
	/// <summary>
	/// Describes a name-value pair that is used to update the value of a parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParameterNameValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSubnetGroupResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SubnetGroup SubnetGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSubnetGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SubnetGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubnetInUse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AuthenticationMode AuthenticationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccessString { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Apply the service update to a list of clusters supplied. For more information on service updates and applying them, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/managing-updates.html#applying-updates">Applying the service updates</a>.
		/// BatchUpdateCluster #X-Amz-Target=AmazonMemoryDB.BatchUpdateCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchUpdateClusterResponse> BatchUpdateClusterAsync(BatchUpdateClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.BatchUpdateCluster";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchUpdateClusterResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Makes a copy of an existing snapshot.
		/// CopySnapshot #X-Amz-Target=AmazonMemoryDB.CopySnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CopySnapshotResponse> CopySnapshotAsync(CopySnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.CopySnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CopySnapshotResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an Access Control List. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html">Authenticating users with Access Contol Lists (ACLs)</a>.
		/// CreateACL #X-Amz-Target=AmazonMemoryDB.CreateACL
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateACLResponse> CreateACLAsync(CreateACLRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.CreateACL";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateACLResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a cluster. All nodes in the cluster run the same protocol-compliant engine software.
		/// CreateCluster #X-Amz-Target=AmazonMemoryDB.CreateCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateClusterResponse> CreateClusterAsync(CreateClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.CreateCluster";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateClusterResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new MemoryDB parameter group. A parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/parametergroups.html">Configuring engine parameters using parameter groups</a>.
		/// CreateParameterGroup #X-Amz-Target=AmazonMemoryDB.CreateParameterGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateParameterGroupResponse> CreateParameterGroupAsync(CreateParameterGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.CreateParameterGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateParameterGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a copy of an entire cluster at a specific moment in time.
		/// CreateSnapshot #X-Amz-Target=AmazonMemoryDB.CreateSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSnapshotResponse> CreateSnapshotAsync(CreateSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.CreateSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateSnapshotResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a subnet group. A subnet group is a collection of subnets (typically private) that you can designate for your clusters running in an Amazon Virtual Private Cloud (VPC) environment. When you create a cluster in an Amazon VPC, you must specify a subnet group. MemoryDB uses that subnet group to choose a subnet and IP addresses within that subnet to associate with your nodes. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/subnetgroups.html">Subnets and subnet groups</a>.
		/// CreateSubnetGroup #X-Amz-Target=AmazonMemoryDB.CreateSubnetGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSubnetGroupResponse> CreateSubnetGroupAsync(CreateSubnetGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.CreateSubnetGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateSubnetGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a MemoryDB user. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html">Authenticating users with Access Contol Lists (ACLs)</a>.
		/// CreateUser #X-Amz-Target=AmazonMemoryDB.CreateUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateUserResponse> CreateUserAsync(CreateUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.CreateUser";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateUserResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an Access Control List. The ACL must first be disassociated from the cluster before it can be deleted. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/clusters.acls.html">Authenticating users with Access Contol Lists (ACLs)</a>.
		/// DeleteACL #X-Amz-Target=AmazonMemoryDB.DeleteACL
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteACLResponse> DeleteACLAsync(DeleteACLRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DeleteACL";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteACLResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a cluster. It also deletes all associated nodes and node endpoints
		/// DeleteCluster #X-Amz-Target=AmazonMemoryDB.DeleteCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteClusterResponse> DeleteClusterAsync(DeleteClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DeleteCluster";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteClusterResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any clusters. You cannot delete the default parameter groups in your account.
		/// DeleteParameterGroup #X-Amz-Target=AmazonMemoryDB.DeleteParameterGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteParameterGroupResponse> DeleteParameterGroupAsync(DeleteParameterGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DeleteParameterGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteParameterGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing snapshot. When you receive a successful response from this operation, MemoryDB immediately begins deleting the snapshot; you cannot cancel or revert this operation.
		/// DeleteSnapshot #X-Amz-Target=AmazonMemoryDB.DeleteSnapshot
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteSnapshotResponse> DeleteSnapshotAsync(DeleteSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DeleteSnapshot";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteSnapshotResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a subnet group. You cannot delete a default subnet group or one that is associated with any clusters.
		/// DeleteSubnetGroup #X-Amz-Target=AmazonMemoryDB.DeleteSubnetGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteSubnetGroupResponse> DeleteSubnetGroupAsync(DeleteSubnetGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DeleteSubnetGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteSubnetGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a user. The user will be removed from all ACLs and in turn removed from all clusters.
		/// DeleteUser #X-Amz-Target=AmazonMemoryDB.DeleteUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteUserResponse> DeleteUserAsync(DeleteUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DeleteUser";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteUserResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of ACLs
		/// DescribeACLs #X-Amz-Target=AmazonMemoryDB.DescribeACLs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeACLsResponse> DescribeACLsAsync(string MaxResults, string NextToken, DescribeACLsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DescribeACLs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeACLsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cluster if a cluster name is supplied.
		/// DescribeClusters #X-Amz-Target=AmazonMemoryDB.DescribeClusters
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeClustersResponse> DescribeClustersAsync(string MaxResults, string NextToken, DescribeClustersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DescribeClusters?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeClustersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the available Redis engine versions.
		/// DescribeEngineVersions #X-Amz-Target=AmazonMemoryDB.DescribeEngineVersions
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeEngineVersionsResponse> DescribeEngineVersionsAsync(string MaxResults, string NextToken, DescribeEngineVersionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DescribeEngineVersions?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeEngineVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns events related to clusters, security groups, and parameter groups. You can obtain events specific to a particular cluster, security group, or parameter group by providing the name as a parameter. By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days' worth of events if necessary.
		/// DescribeEvents #X-Amz-Target=AmazonMemoryDB.DescribeEvents
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeEventsResponse> DescribeEventsAsync(string MaxResults, string NextToken, DescribeEventsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DescribeEvents?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeEventsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of parameter group descriptions. If a parameter group name is specified, the list contains only the descriptions for that group.
		/// DescribeParameterGroups #X-Amz-Target=AmazonMemoryDB.DescribeParameterGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeParameterGroupsResponse> DescribeParameterGroupsAsync(string MaxResults, string NextToken, DescribeParameterGroupsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DescribeParameterGroups?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeParameterGroupsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the detailed parameter list for a particular parameter group.
		/// DescribeParameters #X-Amz-Target=AmazonMemoryDB.DescribeParameters
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeParametersResponse> DescribeParametersAsync(string MaxResults, string NextToken, DescribeParametersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DescribeParameters?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeParametersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about reserved nodes for this account, or about a specified reserved node.
		/// DescribeReservedNodes #X-Amz-Target=AmazonMemoryDB.DescribeReservedNodes
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeReservedNodesResponse> DescribeReservedNodesAsync(string MaxResults, string NextToken, DescribeReservedNodesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DescribeReservedNodes?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeReservedNodesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists available reserved node offerings.
		/// DescribeReservedNodesOfferings #X-Amz-Target=AmazonMemoryDB.DescribeReservedNodesOfferings
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeReservedNodesOfferingsResponse> DescribeReservedNodesOfferingsAsync(string MaxResults, string NextToken, DescribeReservedNodesOfferingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DescribeReservedNodesOfferings?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeReservedNodesOfferingsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns details of the service updates
		/// DescribeServiceUpdates #X-Amz-Target=AmazonMemoryDB.DescribeServiceUpdates
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeServiceUpdatesResponse> DescribeServiceUpdatesAsync(string MaxResults, string NextToken, DescribeServiceUpdatesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DescribeServiceUpdates?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeServiceUpdatesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about cluster snapshots. By default, DescribeSnapshots lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cluster.
		/// DescribeSnapshots #X-Amz-Target=AmazonMemoryDB.DescribeSnapshots
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeSnapshotsResponse> DescribeSnapshotsAsync(string MaxResults, string NextToken, DescribeSnapshotsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DescribeSnapshots?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeSnapshotsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group.
		/// DescribeSubnetGroups #X-Amz-Target=AmazonMemoryDB.DescribeSubnetGroups
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeSubnetGroupsResponse> DescribeSubnetGroupsAsync(string MaxResults, string NextToken, DescribeSubnetGroupsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DescribeSubnetGroups?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeSubnetGroupsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of users.
		/// DescribeUsers #X-Amz-Target=AmazonMemoryDB.DescribeUsers
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeUsersResponse> DescribeUsersAsync(string MaxResults, string NextToken, DescribeUsersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.DescribeUsers?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeUsersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Used to failover a shard. This API is designed for testing the behavior of your application in case of MemoryDB failover. It is not designed to be used as a production-level tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large scale operational events, Amazon may block this API.
		/// FailoverShard #X-Amz-Target=AmazonMemoryDB.FailoverShard
		/// </summary>
		/// <returns>Success</returns>
		public async Task<FailoverShardResponse> FailoverShardAsync(FailoverShardRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.FailoverShard";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FailoverShardResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all available node types that you can scale to from your cluster's current node type. When you use the UpdateCluster operation to scale your cluster, the value of the NodeType parameter must be one of the node types returned by this operation.
		/// ListAllowedNodeTypeUpdates #X-Amz-Target=AmazonMemoryDB.ListAllowedNodeTypeUpdates
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListAllowedNodeTypeUpdatesResponse> ListAllowedNodeTypeUpdatesAsync(ListAllowedNodeTypeUpdatesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.ListAllowedNodeTypeUpdates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAllowedNodeTypeUpdatesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all tags currently on a named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track your MemoryDB resources. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/Tagging-Resources.html">Tagging your MemoryDB resources</a>
		/// ListTags #X-Amz-Target=AmazonMemoryDB.ListTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsResponse> ListTagsAsync(ListTagsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.ListTags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows you to purchase a reserved node offering. Reserved nodes are not eligible for cancellation and are non-refundable.
		/// PurchaseReservedNodesOffering #X-Amz-Target=AmazonMemoryDB.PurchaseReservedNodesOffering
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PurchaseReservedNodesOfferingResponse> PurchaseReservedNodesOfferingAsync(PurchaseReservedNodesOfferingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.PurchaseReservedNodesOffering";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PurchaseReservedNodesOfferingResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the parameters of a parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire parameter group, specify the AllParameters and ParameterGroupName parameters.
		/// ResetParameterGroup #X-Amz-Target=AmazonMemoryDB.ResetParameterGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ResetParameterGroupResponse> ResetParameterGroupAsync(ResetParameterGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.ResetParameterGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResetParameterGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your MemoryDB resources. When you add or remove tags on clusters, those actions will be replicated to all nodes in the cluster. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/iam.resourcelevelpermissions.html">Resource-level permissions</a>.</p> <p>For example, you can use cost-allocation tags to your MemoryDB resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/tagging.html">Using Cost Allocation Tags</a>.</p>
		/// TagResource #X-Amz-Target=AmazonMemoryDB.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.TagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Use this operation to remove tags on a resource
		/// UntagResource #X-Amz-Target=AmazonMemoryDB.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.UntagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes the list of users that belong to the Access Control List.
		/// UpdateACL #X-Amz-Target=AmazonMemoryDB.UpdateACL
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateACLResponse> UpdateACLAsync(UpdateACLRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.UpdateACL";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateACLResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration settings by specifying the settings and the new values.
		/// UpdateCluster #X-Amz-Target=AmazonMemoryDB.UpdateCluster
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateClusterResponse> UpdateClusterAsync(UpdateClusterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.UpdateCluster";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateClusterResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
		/// UpdateParameterGroup #X-Amz-Target=AmazonMemoryDB.UpdateParameterGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateParameterGroupResponse> UpdateParameterGroupAsync(UpdateParameterGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.UpdateParameterGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateParameterGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a subnet group. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/ubnetGroups.Modifying.html">Updating a subnet group</a>
		/// UpdateSubnetGroup #X-Amz-Target=AmazonMemoryDB.UpdateSubnetGroup
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateSubnetGroupResponse> UpdateSubnetGroupAsync(UpdateSubnetGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.UpdateSubnetGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateSubnetGroupResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes user password(s) and/or access string.
		/// UpdateUser #X-Amz-Target=AmazonMemoryDB.UpdateUser
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateUserResponse> UpdateUserAsync(UpdateUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AmazonMemoryDB.UpdateUser";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateUserResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum BatchUpdateClusterX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.BatchUpdateCluster")]
		AmazonMemoryDB_BatchUpdateCluster = 0,
	}
	
	public enum CopySnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.CopySnapshot")]
		AmazonMemoryDB_CopySnapshot = 0,
	}
	
	public enum CreateACLX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.CreateACL")]
		AmazonMemoryDB_CreateACL = 0,
	}
	
	public enum CreateClusterX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.CreateCluster")]
		AmazonMemoryDB_CreateCluster = 0,
	}
	
	public enum CreateParameterGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.CreateParameterGroup")]
		AmazonMemoryDB_CreateParameterGroup = 0,
	}
	
	public enum CreateSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.CreateSnapshot")]
		AmazonMemoryDB_CreateSnapshot = 0,
	}
	
	public enum CreateSubnetGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.CreateSubnetGroup")]
		AmazonMemoryDB_CreateSubnetGroup = 0,
	}
	
	public enum CreateUserX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.CreateUser")]
		AmazonMemoryDB_CreateUser = 0,
	}
	
	public enum DeleteACLX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DeleteACL")]
		AmazonMemoryDB_DeleteACL = 0,
	}
	
	public enum DeleteClusterX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DeleteCluster")]
		AmazonMemoryDB_DeleteCluster = 0,
	}
	
	public enum DeleteParameterGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DeleteParameterGroup")]
		AmazonMemoryDB_DeleteParameterGroup = 0,
	}
	
	public enum DeleteSnapshotX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DeleteSnapshot")]
		AmazonMemoryDB_DeleteSnapshot = 0,
	}
	
	public enum DeleteSubnetGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DeleteSubnetGroup")]
		AmazonMemoryDB_DeleteSubnetGroup = 0,
	}
	
	public enum DeleteUserX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DeleteUser")]
		AmazonMemoryDB_DeleteUser = 0,
	}
	
	public enum DescribeACLsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DescribeACLs")]
		AmazonMemoryDB_DescribeACLs = 0,
	}
	
	public enum DescribeClustersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DescribeClusters")]
		AmazonMemoryDB_DescribeClusters = 0,
	}
	
	public enum DescribeEngineVersionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DescribeEngineVersions")]
		AmazonMemoryDB_DescribeEngineVersions = 0,
	}
	
	public enum DescribeEventsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DescribeEvents")]
		AmazonMemoryDB_DescribeEvents = 0,
	}
	
	public enum DescribeParameterGroupsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DescribeParameterGroups")]
		AmazonMemoryDB_DescribeParameterGroups = 0,
	}
	
	public enum DescribeParametersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DescribeParameters")]
		AmazonMemoryDB_DescribeParameters = 0,
	}
	
	public enum DescribeReservedNodesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DescribeReservedNodes")]
		AmazonMemoryDB_DescribeReservedNodes = 0,
	}
	
	public enum DescribeReservedNodesOfferingsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DescribeReservedNodesOfferings")]
		AmazonMemoryDB_DescribeReservedNodesOfferings = 0,
	}
	
	public enum DescribeServiceUpdatesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DescribeServiceUpdates")]
		AmazonMemoryDB_DescribeServiceUpdates = 0,
	}
	
	public enum DescribeSnapshotsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DescribeSnapshots")]
		AmazonMemoryDB_DescribeSnapshots = 0,
	}
	
	public enum DescribeSubnetGroupsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DescribeSubnetGroups")]
		AmazonMemoryDB_DescribeSubnetGroups = 0,
	}
	
	public enum DescribeUsersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.DescribeUsers")]
		AmazonMemoryDB_DescribeUsers = 0,
	}
	
	public enum FailoverShardX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.FailoverShard")]
		AmazonMemoryDB_FailoverShard = 0,
	}
	
	public enum ListAllowedNodeTypeUpdatesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.ListAllowedNodeTypeUpdates")]
		AmazonMemoryDB_ListAllowedNodeTypeUpdates = 0,
	}
	
	public enum ListTagsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.ListTags")]
		AmazonMemoryDB_ListTags = 0,
	}
	
	public enum PurchaseReservedNodesOfferingX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.PurchaseReservedNodesOffering")]
		AmazonMemoryDB_PurchaseReservedNodesOffering = 0,
	}
	
	public enum ResetParameterGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.ResetParameterGroup")]
		AmazonMemoryDB_ResetParameterGroup = 0,
	}
	
	public enum TagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.TagResource")]
		AmazonMemoryDB_TagResource = 0,
	}
	
	public enum UntagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.UntagResource")]
		AmazonMemoryDB_UntagResource = 0,
	}
	
	public enum UpdateACLX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.UpdateACL")]
		AmazonMemoryDB_UpdateACL = 0,
	}
	
	public enum UpdateClusterX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.UpdateCluster")]
		AmazonMemoryDB_UpdateCluster = 0,
	}
	
	public enum UpdateParameterGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.UpdateParameterGroup")]
		AmazonMemoryDB_UpdateParameterGroup = 0,
	}
	
	public enum UpdateSubnetGroupX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.UpdateSubnetGroup")]
		AmazonMemoryDB_UpdateSubnetGroup = 0,
	}
	
	public enum UpdateUserX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonMemoryDB.UpdateUser")]
		AmazonMemoryDB_UpdateUser = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
