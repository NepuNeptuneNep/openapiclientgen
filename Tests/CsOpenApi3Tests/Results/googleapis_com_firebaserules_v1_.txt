//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Arg matchers for the mock function.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Arg
	{
		
		/// <summary>
		/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="anyValue")]
		public Empty AnyValue { get; set; }
		
		/// <summary>
		/// Argument exactly matches value provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exactValue")]
		public object ExactValue { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// Describes where in a file an expression is found and what it was evaluated to over the course of its use.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExpressionReport
	{
		
		/// <summary>
		/// Subexpressions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public ExpressionReport[] Children { get; set; }
		
		/// <summary>
		/// Position in the `Source` content including its line, column number, and an index of the `File` in the `Source` message. Used for debug purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourcePosition")]
		public SourcePosition SourcePosition { get; set; }
		
		/// <summary>
		/// Values that this expression evaluated to when encountered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public ValueCount[] Values { get; set; }
	}
	
	/// <summary>
	/// Position in the `Source` content including its line, column number, and an index of the `File` in the `Source` message. Used for debug purposes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourcePosition
	{
		
		/// <summary>
		/// First column on the source line associated with the source fragment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="column")]
		public System.Nullable<System.Int32> Column { get; set; }
		
		/// <summary>
		/// Start position relative to the beginning of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentOffset")]
		public System.Nullable<System.Int32> CurrentOffset { get; set; }
		
		/// <summary>
		/// End position relative to the beginning of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOffset")]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		/// <summary>
		/// Name of the `File`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		/// <summary>
		/// Line number of the source fragment. 1-based.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line")]
		public System.Nullable<System.Int32> Line { get; set; }
	}
	
	/// <summary>
	/// Tuple for how many times an Expression was evaluated to a particular ExpressionValue.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValueCount
	{
		
		/// <summary>
		/// The amount of times that expression returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// The return value of the expression
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	/// <summary>
	/// `File` containing source content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class File
	{
		
		/// <summary>
		/// Required. Textual Content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Fingerprint (e.g. github sha) associated with the `File`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// Required. File name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents a service-defined function call that was invoked during test execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FunctionCall
	{
		
		/// <summary>
		/// The arguments that were provided to the function.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Name of the function invoked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="function")]
		public string Function { get; set; }
	}
	
	/// <summary>
	/// Mock function definition. Mocks must refer to a function declared by the target service. The type of the function args and result will be inferred at test time. If either the arg or result values are not compatible with function type declaration, the request will be considered invalid. More than one `FunctionMock` may be provided for a given function name so long as the `Arg` matchers are distinct. There may be only one function for a given overload where all `Arg` values are `Arg.any_value`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FunctionMock
	{
		
		/// <summary>
		/// The list of `Arg` values to match. The order in which the arguments are provided is the order in which they must appear in the function invocation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public Arg[] Args { get; set; }
		
		/// <summary>
		/// The name of the function. The function name must match one provided by a service declaration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="function")]
		public string Function { get; set; }
		
		/// <summary>
		/// Possible result values from the function mock invocation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public Result Result { get; set; }
	}
	
	/// <summary>
	/// Possible result values from the function mock invocation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Result
	{
		
		/// <summary>
		/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="undefined")]
		public Empty Undefined { get; set; }
		
		/// <summary>
		/// The result is an actual value. The type of the value must match that of the type declared by the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	/// <summary>
	/// The response for FirebaseRulesService.GetReleaseExecutable
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetReleaseExecutableResponse
	{
		
		/// <summary>
		/// Executable view of the `Ruleset` referenced by the `Release`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executable")]
		public string Executable { get; set; }
		
		/// <summary>
		/// The Rules runtime version of the executable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executableVersion")]
		public System.Nullable<GetReleaseExecutableResponseExecutableVersion> ExecutableVersion { get; set; }
		
		/// <summary>
		/// `Language` used to generate the executable bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public System.Nullable<GetReleaseExecutableResponseLanguage> Language { get; set; }
		
		/// <summary>
		/// `Ruleset` name associated with the `Release` executable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rulesetName")]
		public string RulesetName { get; set; }
		
		/// <summary>
		/// Optional, indicates the freshness of the result. The response is guaranteed to be the latest within an interval up to the sync_time (inclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="syncTime")]
		public string SyncTime { get; set; }
		
		/// <summary>
		/// Timestamp for the most recent `Release.update_time`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GetReleaseExecutableResponseExecutableVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELEASE_EXECUTABLE_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIREBASE_RULES_EXECUTABLE_V1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIREBASE_RULES_EXECUTABLE_V2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GetReleaseExecutableResponseLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANGUAGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIREBASE_RULES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_FLOW_TRIGGERS = 2,
	}
	
	/// <summary>
	/// Issues include warnings, errors, and deprecation notices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Issue
	{
		
		/// <summary>
		/// Short error description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The severity of the issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<IssueSeverity> Severity { get; set; }
		
		/// <summary>
		/// Position in the `Source` content including its line, column number, and an index of the `File` in the `Source` message. Used for debug purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourcePosition")]
		public SourcePosition SourcePosition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum IssueSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 3,
	}
	
	/// <summary>
	/// The response for FirebaseRulesService.ListReleases.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReleasesResponse
	{
		
		/// <summary>
		/// The pagination token to retrieve the next page of results. If the value is empty, no further results remain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of `Release` instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releases")]
		public Release[] Releases { get; set; }
	}
	
	/// <summary>
	/// `Release` is a named reference to a `Ruleset`. Once a `Release` refers to a `Ruleset`, rules-enabled services will be able to enforce the `Ruleset`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Release
	{
		
		/// <summary>
		/// Output only. Time the release was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Required. Format: `projects/{project_id}/releases/{release_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Name of the `Ruleset` referred to by this `Release`. The `Ruleset` must exist for the `Release` to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rulesetName")]
		public string RulesetName { get; set; }
		
		/// <summary>
		/// Output only. Time the release was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// The response for FirebaseRulesService.ListRulesets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRulesetsResponse
	{
		
		/// <summary>
		/// The pagination token to retrieve the next page of results. If the value is empty, no further results remain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of `Ruleset` instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rulesets")]
		public Ruleset[] Rulesets { get; set; }
	}
	
	/// <summary>
	/// `Ruleset` is an immutable copy of `Source` with a globally unique identifier and a creation time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ruleset
	{
		
		/// <summary>
		/// Immutable. Intended resource to which this Ruleset should be released. May be left blank to signify the resource associated with the default release. Expected format: firestore.googleapis.com/projects//databases/
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachmentPoint")]
		public string AttachmentPoint { get; set; }
		
		/// <summary>
		/// Output only. Time the `Ruleset` was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Metadata for a Ruleset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata Metadata { get; set; }
		
		/// <summary>
		/// Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format: `projects/{project_id}/rulesets/{ruleset_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// `Source` is one or more `File` messages comprising a logical set of rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
	}
	
	/// <summary>
	/// Metadata for a Ruleset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Metadata
	{
		
		/// <summary>
		/// Services that this ruleset has declarations for (e.g., "cloud.firestore"). There may be 0+ of these.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public string[] Services { get; set; }
	}
	
	/// <summary>
	/// `Source` is one or more `File` messages comprising a logical set of rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Source
	{
		
		/// <summary>
		/// Required. `File` set constituting the `Source` bundle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public File[] Files { get; set; }
	}
	
	/// <summary>
	/// `TestCase` messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the `request`, `resource`, and `function_mocks` to mock a function call to a service-provided function. The `request` object represents context present at request-time. The `resource` is the value of the target resource as it appears in persistent storage before the request is executed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestCase
	{
		
		/// <summary>
		/// Test expectation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectation")]
		public System.Nullable<TestCaseExpectation> Expectation { get; set; }
		
		/// <summary>
		/// Specifies what should be included in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expressionReportLevel")]
		public System.Nullable<TestCaseExpressionReportLevel> ExpressionReportLevel { get; set; }
		
		/// <summary>
		/// Optional function mocks for service-defined functions. If not set, any service defined function is expected to return an error, which may or may not influence the test outcome.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functionMocks")]
		public FunctionMock[] FunctionMocks { get; set; }
		
		/// <summary>
		/// Specifies whether paths (such as request.path) are encoded and how.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathEncoding")]
		public System.Nullable<TestCasePathEncoding> PathEncoding { get; set; }
		
		/// <summary>
		/// Request context. The exact format of the request context is service-dependent. See the appropriate service documentation for information about the supported fields and types on the request. Minimally, all services support the following fields and types: Request field | Type ---------------|----------------- auth.uid | `string` auth.token | `map` headers | `map` method | `string` params | `map` path | `string` time | `google.protobuf.Timestamp` If the request value is not well-formed for the service, the request will be rejected as an invalid argument.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="request")]
		public object Request { get; set; }
		
		/// <summary>
		/// Optional resource value as it appears in persistent storage before the request is fulfilled. The resource type depends on the `request.path` value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public object Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TestCaseExpectation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPECTATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TestCaseExpressionReportLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISITED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TestCasePathEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENCODING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL_ENCODED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAIN = 2,
	}
	
	/// <summary>
	/// Test result message containing the state of the test as well as a description and source position for test failures.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestResult
	{
		
		/// <summary>
		/// Debug messages related to test execution issues encountered during evaluation. Debug messages may be related to too many or too few invocations of function mocks or to runtime errors that occur during evaluation. For example: ```Unable to read variable [name: "resource"]```
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debugMessages")]
		public string[] DebugMessages { get; set; }
		
		/// <summary>
		/// Position in the `Source` content including its line, column number, and an index of the `File` in the `Source` message. Used for debug purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorPosition")]
		public SourcePosition ErrorPosition { get; set; }
		
		/// <summary>
		/// The mapping from expression in the ruleset AST to the values they were evaluated to. Partially-nested to mirror AST structure. Note that this field is actually tracking expressions and not permission statements in contrast to the "visited_expressions" field above. Literal expressions are omitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expressionReports")]
		public ExpressionReport[] ExpressionReports { get; set; }
		
		/// <summary>
		/// The set of function calls made to service-defined methods. Function calls are included in the order in which they are encountered during evaluation, are provided for both mocked and unmocked functions, and included on the response regardless of the test `state`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functionCalls")]
		public FunctionCall[] FunctionCalls { get; set; }
		
		/// <summary>
		/// State of the test.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<TestResultState> State { get; set; }
		
		/// <summary>
		/// The set of visited permission expressions for a given test. This returns the positions and evaluation results of all visited permission expressions which were relevant to the test case, e.g. ``` match /path { allow read if: } ``` For a detailed report of the intermediate evaluation states, see the `expression_reports` field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visitedExpressions")]
		public VisitedExpression[] VisitedExpressions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TestResultState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE = 2,
	}
	
	/// <summary>
	/// Store the position and access outcome for an expression visited in rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VisitedExpression
	{
		
		/// <summary>
		/// Position in the `Source` content including its line, column number, and an index of the `File` in the `Source` message. Used for debug purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourcePosition")]
		public SourcePosition SourcePosition { get; set; }
		
		/// <summary>
		/// The evaluated value for the visited expression, e.g. true/false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public object Value { get; set; }
	}
	
	/// <summary>
	/// The request for FirebaseRulesService.TestRuleset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestRulesetRequest
	{
		
		/// <summary>
		/// `Source` is one or more `File` messages comprising a logical set of rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
		
		/// <summary>
		/// `TestSuite` is a collection of `TestCase` instances that validate the logical correctness of a `Ruleset`. The `TestSuite` may be referenced in-line within a `TestRuleset` invocation or as part of a `Release` object as a pre-release check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testSuite")]
		public TestSuite TestSuite { get; set; }
	}
	
	/// <summary>
	/// `TestSuite` is a collection of `TestCase` instances that validate the logical correctness of a `Ruleset`. The `TestSuite` may be referenced in-line within a `TestRuleset` invocation or as part of a `Release` object as a pre-release check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestSuite
	{
		
		/// <summary>
		/// Collection of test cases associated with the `TestSuite`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testCases")]
		public TestCase[] TestCases { get; set; }
	}
	
	/// <summary>
	/// The response for FirebaseRulesService.TestRuleset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestRulesetResponse
	{
		
		/// <summary>
		/// Syntactic and semantic `Source` issues of varying severity. Issues of `ERROR` severity will prevent tests from executing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issues")]
		public Issue[] Issues { get; set; }
		
		/// <summary>
		/// The set of test results given the test cases in the `TestSuite`. The results will appear in the same order as the test cases appear in the `TestSuite`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testResults")]
		public TestResult[] TestResults { get; set; }
	}
	
	/// <summary>
	/// The request for FirebaseRulesService.UpdateRelease.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateReleaseRequest
	{
		
		/// <summary>
		/// `Release` is a named reference to a `Ruleset`. Once a `Release` refers to a `Ruleset`, rules-enabled services will be able to enforce the `Ruleset`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="release")]
		public Release Release { get; set; }
		
		/// <summary>
		/// Specifies which fields to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete a `Ruleset` by resource name. If the `Ruleset` is referenced by a `Release` the operation will fail.
		/// Firebaserules_projects_rulesets_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. Resource name for the ruleset to delete. Format: `projects/{project_id}/rulesets/{ruleset_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Firebaserules_projects_rulesets_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a `Ruleset` by name including the full `Source` contents.
		/// Firebaserules_projects_rulesets_get v1/{name}
		/// </summary>
		/// <param name="name">Required. Resource name for the ruleset to get. Format: `projects/{project_id}/rulesets/{ruleset_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Ruleset> Firebaserules_projects_rulesets_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ruleset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a `Release` via PATCH. Only updates to `ruleset_name` will be honored. `Release` rename is not supported. To create a `Release` use the CreateRelease method.
		/// Firebaserules_projects_releases_patch v1/{name}
		/// </summary>
		/// <param name="name">Required. Resource name for the project which owns this `Release`. Format: `projects/{project_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Release> Firebaserules_projects_releases_patchAsync(string name, UpdateReleaseRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Release>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the `Release` values for a project. This list may optionally be filtered by `Release` name, `Ruleset` name, `TestSuite` name, or any combination thereof.
		/// Firebaserules_projects_releases_list v1/{name}/releases
		/// </summary>
		/// <param name="name">Required. Resource name for the project. Format: `projects/{project_id}`</param>
		/// <param name="filter">`Release` filter. The list method supports filters with restrictions on the `Release.name`, and `Release.ruleset_name`. Example 1: A filter of 'name=prod*' might return `Release`s with names within 'projects/foo' prefixed with 'prod': Name -> Ruleset Name: * projects/foo/releases/prod -> projects/foo/rulesets/uuid1234 * projects/foo/releases/prod/v1 -> projects/foo/rulesets/uuid1234 * projects/foo/releases/prod/v2 -> projects/foo/rulesets/uuid8888 Example 2: A filter of `name=prod* ruleset_name=uuid1234` would return only `Release` instances for 'projects/foo' with names prefixed with 'prod' referring to the same `Ruleset` name of 'uuid1234': Name -> Ruleset Name: * projects/foo/releases/prod -> projects/foo/rulesets/1234 * projects/foo/releases/prod/v1 -> projects/foo/rulesets/1234 In the examples, the filter parameters refer to the search filters are relative to the project. Fully qualified prefixed may also be used.</param>
		/// <param name="pageSize">Page size to load. Maximum of 100. Defaults to 10. Note: `page_size` is just a hint and the service may choose to load fewer than `page_size` results due to the size of the output. To traverse all of the releases, the caller should iterate until the `page_token` on the response is empty.</param>
		/// <param name="pageToken">Next page token for the next batch of `Release` instances.</param>
		/// <returns>Successful response</returns>
		public async Task<ListReleasesResponse> Firebaserules_projects_releases_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/releases&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListReleasesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a `Release`. Release names should reflect the developer's deployment practices. For example, the release name may include the environment name, application name, application version, or any other name meaningful to the developer. Once a `Release` refers to a `Ruleset`, the rules can be enforced by Firebase Rules-enabled services. More than one `Release` may be 'live' concurrently. Consider the following three `Release` names for `projects/foo` and the `Ruleset` to which they refer. Release Name -> Ruleset Name * projects/foo/releases/prod -> projects/foo/rulesets/uuid123 * projects/foo/releases/prod/beta -> projects/foo/rulesets/uuid123 * projects/foo/releases/prod/v23 -> projects/foo/rulesets/uuid456 The relationships reflect a `Ruleset` rollout in progress. The `prod` and `prod/beta` releases refer to the same `Ruleset`. However, `prod/v23` refers to a new `Ruleset`. The `Ruleset` reference for a `Release` may be updated using the UpdateRelease method.
		/// Firebaserules_projects_releases_create v1/{name}/releases
		/// </summary>
		/// <param name="name">Required. Resource name for the project which owns this `Release`. Format: `projects/{project_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Release> Firebaserules_projects_releases_createAsync(string name, Release requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/releases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Release>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List `Ruleset` metadata only and optionally filter the results by `Ruleset` name. The full `Source` contents of a `Ruleset` may be retrieved with GetRuleset.
		/// Firebaserules_projects_rulesets_list v1/{name}/rulesets
		/// </summary>
		/// <param name="name">Required. Resource name for the project. Format: `projects/{project_id}`</param>
		/// <param name="filter">`Ruleset` filter. The list method supports filters with restrictions on `Ruleset.name`. Filters on `Ruleset.create_time` should use the `date` function which parses strings that conform to the RFC 3339 date/time specifications. Example: `create_time > date("2017-01-01T00:00:00Z") AND name=UUID-*`</param>
		/// <param name="pageSize">Page size to load. Maximum of 100. Defaults to 10. Note: `page_size` is just a hint and the service may choose to load less than `page_size` due to the size of the output. To traverse all of the releases, caller should iterate until the `page_token` is empty.</param>
		/// <param name="pageToken">Next page token for loading the next batch of `Ruleset` instances.</param>
		/// <returns>Successful response</returns>
		public async Task<ListRulesetsResponse> Firebaserules_projects_rulesets_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/rulesets&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRulesetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a `Ruleset` from `Source`. The `Ruleset` is given a unique generated name which is returned to the caller. `Source` containing syntactic or semantics errors will result in an error response indicating the first error encountered. For a detailed view of `Source` issues, use TestRuleset.
		/// Firebaserules_projects_rulesets_create v1/{name}/rulesets
		/// </summary>
		/// <param name="name">Required. Resource name for Project which owns this `Ruleset`. Format: `projects/{project_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Ruleset> Firebaserules_projects_rulesets_createAsync(string name, Ruleset requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/rulesets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ruleset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the `Release` executable to use when enforcing rules.
		/// Firebaserules_projects_releases_getExecutable v1/{name}:getExecutable
		/// </summary>
		/// <param name="name">Required. Resource name of the `Release`. Format: `projects/{project_id}/releases/{release_id}`</param>
		/// <param name="executableVersion">The requested runtime executable version. Defaults to FIREBASE_RULES_EXECUTABLE_V1.</param>
		/// <returns>Successful response</returns>
		public async Task<GetReleaseExecutableResponse> Firebaserules_projects_releases_getExecutableAsync(string name, GetReleaseExecutableResponseExecutableVersion executableVersion, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":getExecutable&executableVersion=" + executableVersion;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetReleaseExecutableResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Test `Source` for syntactic and semantic correctness. Issues present, if any, will be returned to the caller with a description, severity, and source location. The test method may be executed with `Source` or a `Ruleset` name. Passing `Source` is useful for unit testing new rules. Passing a `Ruleset` name is useful for regression testing an existing rule. The following is an example of `Source` that permits users to upload images to a bucket bearing their user id and matching the correct metadata: _*Example*_ // Users are allowed to subscribe and unsubscribe to the blog. service firebase.storage { match /users/{userId}/images/{imageName} { allow write: if userId == request.auth.uid && (imageName.matches('*.png$') || imageName.matches('*.jpg$')) && resource.mimeType.matches('^image/') } }
		/// Firebaserules_projects_test v1/{name}:test
		/// </summary>
		/// <param name="name">Required. Tests may either provide `source` or a `Ruleset` resource name. For tests against `source`, the resource name must refer to the project: Format: `projects/{project_id}` For tests against a `Ruleset`, this must be the `Ruleset` resource name: Format: `projects/{project_id}/rulesets/{ruleset_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<TestRulesetResponse> Firebaserules_projects_testAsync(string name, TestRulesetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":test";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TestRulesetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
