//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class License
	{
		
		/// <summary>
		/// If set to 'false', the License is disabled. License can be re-enabled, but as long as it is disabled, the License is excluded from the validation process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Specifies currency for the License price. Check data types to discover which currencies are supported. Read-only, set from License Template on creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// If set to 'true', this License is not shown in NetLicensing Shop as purchased License. Set from License Template on creation, if not specified explicitly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		/// <summary>
		/// Name for the Licensed item. Set from License Template on creation, if not specified explicitly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// 'price' for the License. If >0, it must always be accompanied by the currency specification. Read-only, set from License Template on creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicenseTemplate
	{
		
		/// <summary>
		/// If set to 'false', the License Template is disabled. Licensee can not obtain any new Licenses off this License Template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// If set to 'true', every new Licensee automatically gets one License out of this License Template on creation. Automatic Licenses must have their price set to 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automatic")]
		public System.Nullable<System.Boolean> Automatic { get; set; }
		
		/// <summary>
		/// Specifies currency for the License price. Check data types to discover which currencies are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// If set to 'true', this License Template is not shown in NetLicensing Shop as offered for purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		/// <summary>
		/// If set to 'true', Licenses from this License Template are not visible to the end customer, but participate in validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hiddenLicenses")]
		public System.Nullable<System.Boolean> HiddenLicenses { get; set; }
		
		/// <summary>
		/// Type of Licenses created from this License Template
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenseType")]
		public System.Nullable<LicenseTemplateLicenseType> LicenseType { get; set; }
		
		/// <summary>
		/// Name for the Licensed item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unique number (across all Product of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// 'price' for the License. If >0, it must always be accompanied by the currency specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Double> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LicenseTemplateLicenseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEATURE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEVOLUME = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Licensee
	{
		
		/// <summary>
		/// If set to 'false', the Licensee is disabled. Licensee can not obtain new Licenses, and validation is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Unique number (across all Products of a Vendor) that identifies the Licensee. Vendor can assign this number when creating a Licensee or let NetLicensing generate one. Read-only after creation of the first License for the Licensee.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaymentMethod
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Product
	{
		
		/// <summary>
		/// If set to 'false', the Product is disabled. No new Licensees can be registered for the Product, existing Licensees can not obtain new Licenses
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// If set to 'true', non-existing Licensees will be created at first validation attempt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenseeAutoCreate")]
		public System.Nullable<System.Boolean> LicenseeAutoCreate { get; set; }
		
		/// <summary>
		/// Product name. Together with the version identifies the Product for the end customer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unique number that identifies the Product. Vendor can assign this number when creating a Product or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Product version. Convenience parameter, additional to the Product name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductModule
	{
		
		/// <summary>
		/// If set to 'false', the Product Module is disabled. Licensees can not obtain any new Licenses for this Product Module.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Licensing model applied to this Product Module. Defines what License Templates can be configured for the Product Module and how Licenses for this Product Module are processed during validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licensingInfo")]
		public string LicensingInfo { get; set; }
		
		/// <summary>
		/// Product Module name that is visible to the end customers in NetLicensing Shop.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unique number (across all Product of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Token
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expirationTime")]
		public System.Nullable<System.DateTimeOffset> ExpirationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licenseNumber")]
		public string LicenseNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shopURL")]
		public string ShopURL { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenType")]
		public string TokenType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendorNumber")]
		public string VendorNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Transaction
	{
		
		/// <summary>
		/// Always true for the Transactions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public string Active { get; set; }
		
		/// <summary>
		/// Unique number (across all Products of a Vendor) that identifies the Transaction. This number is always generated by NetLicensing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<TransactionSource> Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TransactionStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TransactionSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHOP = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TransactionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Discount
	{
		
		[System.Runtime.Serialization.DataMember(Name="amountPercent")]
		public string AmountPercent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPrice")]
		public System.Nullable<System.Double> TotalPrice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Infos
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Items
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LicensingModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Netlicensing
	{
		
		[System.Runtime.Serialization.DataMember(Name="infos")]
		public Infos Infos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Items Items { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List Licenses
		/// Return a list of all Licenses for the current Vendor
		/// ListLicenses license
		/// </summary>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing[]> ListLicensesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "license";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete License
		/// Delete License by a 'licenseNumber'
		/// DeleteLicense license/{licenseNumber}
		/// </summary>
		/// <param name="licenseNumber">Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> DeleteLicenseAsync(string licenseNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "license/"+ (licenseNumber==null? "" : System.Uri.EscapeDataString(licenseNumber));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get License
		/// Get License by a 'licenseNumber'
		/// GetLicense license/{licenseNumber}
		/// </summary>
		/// <param name="licenseNumber">Unique number (across all Products/Licensees of a Vendor) that identifies the License. Vendor can assign this number when creating a License or let NetLicensing generate one. Read-only after corresponding creation Transaction status is set to closed.</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> GetLicenseAsync(string licenseNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "license/"+ (licenseNumber==null? "" : System.Uri.EscapeDataString(licenseNumber));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Licensees
		/// Return a list of all Licensees for the current Vendor
		/// ListLicensees licensee
		/// </summary>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing[]> ListLicenseesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "licensee";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Licensee
		/// Delete a Licensee by 'number'
		/// DeleteLicensee licensee/{licenseeNumber}
		/// </summary>
		/// <param name="licenseeNumber">Unique number (across all Products of a Vendor) that identifies the Licensee.</param>
		/// <param name="forceCascade">Force object deletion and all descendants.</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> DeleteLicenseeAsync(string licenseeNumber, bool forceCascade, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "licensee/"+ (licenseeNumber==null? "" : System.Uri.EscapeDataString(licenseeNumber))+"&forceCascade="+forceCascade;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Licensee
		/// Return a Licensee by 'licenseeNumber'
		/// GetLicensee licensee/{licenseeNumber}
		/// </summary>
		/// <param name="licenseeNumber">Unique number (across all Products of a Vendor) that identifies the Licensee. Vendor can assign this number when creating a Licensee or let NetLicensing generate one. Read-only after creation of the first License for the Licensee.</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> GetLicenseeAsync(string licenseeNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "licensee/"+ (licenseeNumber==null? "" : System.Uri.EscapeDataString(licenseeNumber));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List License Templates
		/// Return a list of all License Templates for the current Vendor
		/// ListLicenseTemplates licensetemplate
		/// </summary>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing[]> ListLicenseTemplatesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "licensetemplate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete License Template
		/// Delete a License Template by 'number'.
		/// DeleteLicenseTemplate licensetemplate/{licenseTemplateNumber}
		/// </summary>
		/// <param name="licenseTemplateNumber">Unique number (across all Products of a Vendor) that identifies the License Template.</param>
		/// <param name="forceCascade">Force object deletion and all descendants.</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> DeleteLicenseTemplateAsync(string licenseTemplateNumber, bool forceCascade, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "licensetemplate/"+ (licenseTemplateNumber==null? "" : System.Uri.EscapeDataString(licenseTemplateNumber))+"&forceCascade="+forceCascade;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get License Template
		/// Return a License Template by 'licenseTemplateNumber'
		/// GetLicenseTemplate licensetemplate/{licenseTemplateNumber}
		/// </summary>
		/// <param name="licenseTemplateNumber">Unique number (across all Products of a Vendor) that identifies the License Template. Vendor can assign this number when creating a License Template or let NetLicensing generate one. Read-only after creation of the first License from this License Template.</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> GetLicenseTemplateAsync(string licenseTemplateNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "licensetemplate/"+ (licenseTemplateNumber==null? "" : System.Uri.EscapeDataString(licenseTemplateNumber));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Payment Methods
		/// Return a list of all Payment Methods for the current Vendor
		/// ListPaymentMethods paymentmethod
		/// </summary>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing[]> ListPaymentMethodsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "paymentmethod";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Payment Method
		/// Return a Payment Method info by 'paymentMethodNumber'
		/// GetPaymentMethod paymentmethod/{paymentMethodNumber}
		/// </summary>
		/// <param name="paymentMethodNumber">Payment method number</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> GetPaymentMethodAsync(string paymentMethodNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "paymentmethod/"+ (paymentMethodNumber==null? "" : System.Uri.EscapeDataString(paymentMethodNumber));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Products
		/// Return a list of all configured Products for the current Vendor
		/// ListProducts product
		/// </summary>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing[]> ListProductsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Product
		/// Delete a Product by 'number'
		/// DeleteProduct product/{productNumber}
		/// </summary>
		/// <param name="productNumber">Unique number that identifies the Product.</param>
		/// <param name="forceCascade">Force object deletion and all descendants.</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> DeleteProductAsync(string productNumber, bool forceCascade, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product/"+ (productNumber==null? "" : System.Uri.EscapeDataString(productNumber))+"&forceCascade="+forceCascade;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Product
		/// Return a Product by 'productNumber'
		/// ProductNumber product/{productNumber}
		/// </summary>
		/// <param name="productNumber">Unique number that identifies the Product.</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> ProductNumberAsync(string productNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "product/"+ (productNumber==null? "" : System.Uri.EscapeDataString(productNumber));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Product Modules
		/// Return a list of all Product Modules for the current Vendor
		/// ListProductModules productmodule
		/// </summary>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing[]> ListProductModulesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "productmodule";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Product Module
		/// Delete a Product Module by 'number'
		/// DeleteProductModule productmodule/{productModuleNumber}
		/// </summary>
		/// <param name="productModuleNumber">Unique number (across all Products of a Vendor) that identifies the Product Module.</param>
		/// <param name="forceCascade">Force object deletion and all descendants.</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> DeleteProductModuleAsync(string productModuleNumber, bool forceCascade, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "productmodule/"+ (productModuleNumber==null? "" : System.Uri.EscapeDataString(productModuleNumber))+"&forceCascade="+forceCascade;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Product Module
		/// Return a Product Module by 'productModuleNumber'
		/// GetProductModule productmodule/{productModuleNumber}
		/// </summary>
		/// <param name="productModuleNumber">Unique number (across all Products of a Vendor) that identifies the Product Module. Vendor can assign this number when creating a Product Module or let NetLicensing generate one. Read-only after creation of the first Licensee for the Product.</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> GetProductModuleAsync(string productModuleNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "productmodule/"+ (productModuleNumber==null? "" : System.Uri.EscapeDataString(productModuleNumber));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Tokens
		/// Return a list of all tokens for the current Vendor
		/// ListTokens token
		/// </summary>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing[]> ListTokensAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "token";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete token
		/// Delete a token by 'number'
		/// DeleteToken token/{tokenNumber}
		/// </summary>
		/// <param name="tokenNumber">Token number</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> DeleteTokenAsync(string tokenNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "token/"+ (tokenNumber==null? "" : System.Uri.EscapeDataString(tokenNumber));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get token
		/// Return a token by 'tokenNumber'
		/// GetToken token/{tokenNumber}
		/// </summary>
		/// <param name="tokenNumber">Token number</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> GetTokenAsync(string tokenNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "token/"+ (tokenNumber==null? "" : System.Uri.EscapeDataString(tokenNumber));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Transactions
		/// Return a list of all Transactions for the current Vendor
		/// ListTransactions transaction
		/// </summary>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing[]> ListTransactionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transaction";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing[]>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Transaction
		/// Return a Transaction by 'transactionNumber'
		/// GetTransaction transaction/{transactionNumber}
		/// </summary>
		/// <param name="transactionNumber">Unique number (across all Products of a Vendor) that identifies the Transaction</param>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> GetTransactionAsync(string transactionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transaction/"+ (transactionNumber==null? "" : System.Uri.EscapeDataString(transactionNumber));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List License Types
		/// Return a list of all License Types supported by the service
		/// LicenseTypes utility/licenseTypes
		/// </summary>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> LicenseTypesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "utility/licenseTypes";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List Licensing Models
		/// Return a list of all licensing models supported by the service
		/// LicensingModels utility/licensingModels
		/// </summary>
		/// <returns>Successful request</returns>
		public async Task<Netlicensing> LicensingModelsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "utility/licensingModels";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Netlicensing>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
