//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlbumBase
	{
		
		/// <summary>
		/// The type of the album.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="album_type")]
		public AlbumBaseAlbum_type Album_type { get; set; }
		
		/// <summary>
		/// The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="available_markets")]
		public string[] Available_markets { get; set; }
		
		/// <summary>
		/// The copyright statements of the album.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyrights")]
		public CopyrightObject[] Copyrights { get; set; }
		
		/// <summary>
		/// Known external IDs for the album.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_ids")]
		public ExternalIdObject External_ids { get; set; }
		
		/// <summary>
		/// Known external URLs for this album.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// A list of the genres the album is associated with. If not yet classified, the array is empty.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genres")]
		public string[] Genres { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the album.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The cover art for the album in various sizes, widest first.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageObject[] Images { get; set; }
		
		/// <summary>
		/// The label associated with the album.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The name of the album. In case of an album takedown, the value may be an empty string.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The popularity of the album. The value will be between 0 and 100, with 100 being the most popular.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="popularity")]
		public System.Nullable<System.Int32> Popularity { get; set; }
		
		/// <summary>
		/// The date the album was first released.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="release_date")]
		public string Release_date { get; set; }
		
		/// <summary>
		/// The precision with which `release_date` value is known.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="release_date_precision")]
		public AlbumBaseRelease_date_precision Release_date_precision { get; set; }
		
		/// <summary>
		/// Included in the response when a content restriction is applied.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public AlbumRestrictionObject Restrictions { get; set; }
		
		/// <summary>
		/// The number of tracks in the album.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_tracks")]
		public int Total_tracks { get; set; }
		
		/// <summary>
		/// The object type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AlbumBaseType Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AlbumBaseAlbum_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		album = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		single = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		compilation = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyrightObject
	{
		
		/// <summary>
		/// The copyright text for this content.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalIdObject
	{
		
		/// <summary>
		/// [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isrc")]
		public string Isrc { get; set; }
		
		/// <summary>
		/// [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upc")]
		public string Upc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalUrlObject
	{
		
		/// <summary>
		/// The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spotify")]
		public string Spotify { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageObject
	{
		
		/// <summary>
		/// The image height in pixels.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The source URL of the image.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The image width in pixels.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AlbumBaseRelease_date_precision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		year = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		month = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		day = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlbumRestrictionObject
	{
		
		/// <summary>
		/// The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user's subscription type, or when the user's account is set to not play explicit content.
		///Additional reasons may be added in the future.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<AlbumRestrictionObjectReason> Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AlbumRestrictionObjectReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		market = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		product = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="explicit")]
		_explicit = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AlbumBaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		album = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AlbumObject : AlbumBase
	{
		
		/// <summary>
		/// The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public ArtistObject[] Artists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public PagingSimplifiedTrackObject Tracks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArtistObject
	{
		
		/// <summary>
		/// Known external URLs for this artist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// Information about the followers of the artist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public FollowersObject Followers { get; set; }
		
		/// <summary>
		/// A list of the genres the artist is associated with. If not yet classified, the array is empty.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genres")]
		public string[] Genres { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the artist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Images of the artist in various sizes, widest first.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageObject[] Images { get; set; }
		
		/// <summary>
		/// The name of the artist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist's popularity is calculated from the popularity of all the artist's tracks.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="popularity")]
		public System.Nullable<System.Int32> Popularity { get; set; }
		
		/// <summary>
		/// The object type.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ArtistObjectType> Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FollowersObject
	{
		
		/// <summary>
		/// This will always be set to null, as the Web API does not support it at the moment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The total number of followers.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ArtistObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		artist = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingSimplifiedTrackObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioAnalysisObject
	{
		
		/// <summary>
		/// The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bars")]
		public TimeIntervalObject[] Bars { get; set; }
		
		/// <summary>
		/// The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beats")]
		public TimeIntervalObject[] Beats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public AudioAnalysisObjectMeta Meta { get; set; }
		
		/// <summary>
		/// Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sections")]
		public SectionObject[] Sections { get; set; }
		
		/// <summary>
		/// Each segment contains a roughly conisistent sound throughout its duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segments")]
		public SegmentObject[] Segments { get; set; }
		
		/// <summary>
		/// A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tatums")]
		public TimeIntervalObject[] Tatums { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="track")]
		public AudioAnalysisObjectTrack Track { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeIntervalObject
	{
		
		/// <summary>
		/// The confidence, from 0.0 to 1.0, of the reliability of the interval.
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// The duration (in seconds) of the time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Double> Duration { get; set; }
		
		/// <summary>
		/// The starting point (in seconds) of the time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Double> Start { get; set; }
	}
	
	public class AudioAnalysisObjectMeta
	{
		
		/// <summary>
		/// The amount of time taken to analyze this track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analysis_time")]
		public System.Nullable<System.Double> Analysis_time { get; set; }
		
		/// <summary>
		/// The version of the Analyzer used to analyze this track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analyzer_version")]
		public string Analyzer_version { get; set; }
		
		/// <summary>
		/// A detailed status code for this track. If analysis data is missing, this code may explain why.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailed_status")]
		public string Detailed_status { get; set; }
		
		/// <summary>
		/// The method used to read the track's audio data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input_process")]
		public string Input_process { get; set; }
		
		/// <summary>
		/// The platform used to read the track's audio data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		/// <summary>
		/// The return code of the analyzer process. 0 if successful, 1 if any errors occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_code")]
		public System.Nullable<System.Int32> Status_code { get; set; }
		
		/// <summary>
		/// The Unix timestamp (in seconds) at which this track was analyzed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int32> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SectionObject
	{
		
		/// <summary>
		/// The confidence, from 0.0 to 1.0, of the reliability of the section's "designation".
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// The duration (in seconds) of the section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Double> Duration { get; set; }
		
		/// <summary>
		/// The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public System.Nullable<System.Int32> Key { get; set; }
		
		/// <summary>
		/// The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key_confidence")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> Key_confidence { get; set; }
		
		/// <summary>
		/// The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loudness")]
		public System.Nullable<System.Double> Loudness { get; set; }
		
		/// <summary>
		/// Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for "minor", a 1 for "major", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<SectionObjectMode> Mode { get; set; }
		
		/// <summary>
		/// The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode_confidence")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> Mode_confidence { get; set; }
		
		/// <summary>
		/// The starting point (in seconds) of the section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Double> Start { get; set; }
		
		/// <summary>
		/// The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempo")]
		public System.Nullable<System.Double> Tempo { get; set; }
		
		/// <summary>
		/// The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field.
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempo_confidence")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> Tempo_confidence { get; set; }
		
		/// <summary>
		/// An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of "3/4", to "7/4".
		/// Minimum: 3
		/// Maximum: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_signature")]
		[System.ComponentModel.DataAnnotations.Range(3, 7)]
		public System.Nullable<System.Int32> Time_signature { get; set; }
		
		/// <summary>
		/// The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_signature_confidence")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> Time_signature_confidence { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SectionObjectMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_Minus1 = -1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SegmentObject
	{
		
		/// <summary>
		/// The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field.
		///
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> Confidence { get; set; }
		
		/// <summary>
		/// The duration (in seconds) of the segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Double> Duration { get; set; }
		
		/// <summary>
		/// The offset loudness of the segment in decibels (dB). This value should be equivalent to the loudness_start of the following segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loudness_end")]
		public System.Nullable<System.Double> Loudness_end { get; set; }
		
		/// <summary>
		/// The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and `loudness_max_time`, these components can be used to describe the "attack" of the segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loudness_max")]
		public System.Nullable<System.Double> Loudness_max { get; set; }
		
		/// <summary>
		/// The segment-relative offset of the segment peak loudness in seconds. Combined with `loudness_start` and `loudness_max`, these components can be used to desctibe the "attack" of the segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loudness_max_time")]
		public System.Nullable<System.Double> Loudness_max_time { get; set; }
		
		/// <summary>
		/// The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and `loudness_max_time`, these components can be used to describe the "attack" of the segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loudness_start")]
		public System.Nullable<System.Double> Loudness_start { get; set; }
		
		/// <summary>
		/// Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).
		///
		///Vectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0.
		///As can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies.
		///![pitch vector](https://developer.spotify.com/assets/audio/Pitch_vector.png)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pitches")]
		public double[] Pitches { get; set; }
		
		/// <summary>
		/// The starting point (in seconds) of the segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Double> Start { get; set; }
		
		/// <summary>
		/// Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.
		///
		///For completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments).
		///![timbre basis functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png)
		///
		///The actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timbre")]
		public double[] Timbre { get; set; }
	}
	
	public class AudioAnalysisObjectTrack
	{
		
		/// <summary>
		/// The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analysis_channels")]
		public System.Nullable<System.Int32> Analysis_channels { get; set; }
		
		/// <summary>
		/// The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analysis_sample_rate")]
		public System.Nullable<System.Int32> Analysis_sample_rate { get; set; }
		
		/// <summary>
		/// A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code_version")]
		public System.Nullable<System.Double> Code_version { get; set; }
		
		/// <summary>
		/// An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="codestring")]
		public string Codestring { get; set; }
		
		/// <summary>
		/// Length of the track in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Double> Duration { get; set; }
		
		/// <summary>
		/// A version number for the EchoPrint format used in the echoprintstring field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="echoprint_version")]
		public System.Nullable<System.Double> Echoprint_version { get; set; }
		
		/// <summary>
		/// An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="echoprintstring")]
		public string Echoprintstring { get; set; }
		
		/// <summary>
		/// The time, in seconds, at which the track's fade-in period ends. If the track has no fade-in, this will be 0.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_of_fade_in")]
		public System.Nullable<System.Double> End_of_fade_in { get; set; }
		
		/// <summary>
		/// The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
		///
		/// Minimum: -1
		/// Maximum: 11
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		[System.ComponentModel.DataAnnotations.Range(-1, 11)]
		public System.Nullable<System.Int32> Key { get; set; }
		
		/// <summary>
		/// The confidence, from 0.0 to 1.0, of the reliability of the `key`.
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key_confidence")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> Key_confidence { get; set; }
		
		/// <summary>
		/// The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loudness")]
		public System.Nullable<System.Single> Loudness { get; set; }
		
		/// <summary>
		/// Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<System.Int32> Mode { get; set; }
		
		/// <summary>
		/// The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode_confidence")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> Mode_confidence { get; set; }
		
		/// <summary>
		/// The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_samples")]
		public System.Nullable<System.Int32> Num_samples { get; set; }
		
		/// <summary>
		/// An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset_seconds")]
		public System.Nullable<System.Int32> Offset_seconds { get; set; }
		
		/// <summary>
		/// A version number for the Rhythmstring used in the rhythmstring field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rhythm_version")]
		public System.Nullable<System.Double> Rhythm_version { get; set; }
		
		/// <summary>
		/// A Rhythmstring for this track. The format of this string is similar to the Synchstring.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rhythmstring")]
		public string Rhythmstring { get; set; }
		
		/// <summary>
		/// This field will always contain the empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sample_md5")]
		public string Sample_md5 { get; set; }
		
		/// <summary>
		/// The time, in seconds, at which the track's fade-out period starts. If the track has no fade-out, this should match the track's length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_of_fade_out")]
		public System.Nullable<System.Double> Start_of_fade_out { get; set; }
		
		/// <summary>
		/// A version number for the Synchstring used in the synchstring field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="synch_version")]
		public System.Nullable<System.Double> Synch_version { get; set; }
		
		/// <summary>
		/// A [Synchstring](https://github.com/echonest/synchdata) for this track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="synchstring")]
		public string Synchstring { get; set; }
		
		/// <summary>
		/// The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempo")]
		public System.Nullable<System.Single> Tempo { get; set; }
		
		/// <summary>
		/// The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempo_confidence")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> Tempo_confidence { get; set; }
		
		/// <summary>
		/// An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of "3/4", to "7/4".
		/// Minimum: 3
		/// Maximum: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_signature")]
		[System.ComponentModel.DataAnnotations.Range(3, 7)]
		public System.Nullable<System.Int32> Time_signature { get; set; }
		
		/// <summary>
		/// The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_signature_confidence")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Double> Time_signature_confidence { get; set; }
		
		/// <summary>
		/// The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="window_seconds")]
		public System.Nullable<System.Int32> Window_seconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioFeaturesObject
	{
		
		/// <summary>
		/// A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
		///
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acousticness")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Single> Acousticness { get; set; }
		
		/// <summary>
		/// A URL to access the full audio analysis of this track. An access token is required to access this data.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analysis_url")]
		public string Analysis_url { get; set; }
		
		/// <summary>
		/// Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="danceability")]
		public System.Nullable<System.Single> Danceability { get; set; }
		
		/// <summary>
		/// The duration of the track in milliseconds.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration_ms")]
		public System.Nullable<System.Int32> Duration_ms { get; set; }
		
		/// <summary>
		/// Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energy")]
		public System.Nullable<System.Single> Energy { get; set; }
		
		/// <summary>
		/// The Spotify ID for the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instrumentalness")]
		public System.Nullable<System.Single> Instrumentalness { get; set; }
		
		/// <summary>
		/// The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
		///
		/// Minimum: -1
		/// Maximum: 11
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		[System.ComponentModel.DataAnnotations.Range(-1, 11)]
		public System.Nullable<System.Int32> Key { get; set; }
		
		/// <summary>
		/// Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveness")]
		public System.Nullable<System.Single> Liveness { get; set; }
		
		/// <summary>
		/// The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loudness")]
		public System.Nullable<System.Single> Loudness { get; set; }
		
		/// <summary>
		/// Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<System.Int32> Mode { get; set; }
		
		/// <summary>
		/// Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speechiness")]
		public System.Nullable<System.Single> Speechiness { get; set; }
		
		/// <summary>
		/// The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempo")]
		public System.Nullable<System.Single> Tempo { get; set; }
		
		/// <summary>
		/// An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of "3/4", to "7/4".
		/// Minimum: 3
		/// Maximum: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_signature")]
		[System.ComponentModel.DataAnnotations.Range(3, 7)]
		public System.Nullable<System.Int32> Time_signature { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track_href")]
		public string Track_href { get; set; }
		
		/// <summary>
		/// The object type.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AudioFeaturesObjectType> Type { get; set; }
		
		/// <summary>
		/// The Spotify URI for the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
		
		/// <summary>
		/// A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
		///
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valence")]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public System.Nullable<System.Single> Valence { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudioFeaturesObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		audio_features = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudiobookBase
	{
		
		/// <summary>
		/// The author(s) for the audiobook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authors")]
		public AuthorObject[] Authors { get; set; }
		
		/// <summary>
		/// A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="available_markets")]
		public string[] Available_markets { get; set; }
		
		/// <summary>
		/// The copyright statements of the audiobook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="copyrights")]
		public CopyrightObject[] Copyrights { get; set; }
		
		/// <summary>
		/// A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The edition of the audiobook.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edition")]
		public string Edition { get; set; }
		
		/// <summary>
		/// Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown).
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="explicit")]
		public bool Explicit { get; set; }
		
		/// <summary>
		/// External URLs for this audiobook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the audiobook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// A description of the audiobook. This field may contain HTML tags.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="html_description")]
		public string Html_description { get; set; }
		
		/// <summary>
		/// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The cover art for the audiobook in various sizes, widest first.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageObject[] Images { get; set; }
		
		/// <summary>
		/// A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The media type of the audiobook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media_type")]
		public string Media_type { get; set; }
		
		/// <summary>
		/// The name of the audiobook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The narrator(s) for the audiobook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="narrators")]
		public NarratorObject[] Narrators { get; set; }
		
		/// <summary>
		/// The publisher of the audiobook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// The number of chapters in this audiobook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_chapters")]
		public int Total_chapters { get; set; }
		
		/// <summary>
		/// The object type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AudiobookBaseType Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorObject
	{
		
		/// <summary>
		/// The name of the author.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NarratorObject
	{
		
		/// <summary>
		/// The name of the Narrator.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudiobookBaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		audiobook = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudiobookObject : AudiobookBase
	{
		
		/// <summary>
		/// The chapters of the audiobook.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chapters")]
		public string Chapters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CategoryObject
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning full details of the category.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The category icon, in various sizes.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="icons")]
		public ImageObject[] Icons { get; set; }
		
		/// <summary>
		/// The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) of the category.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the category.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChapterBase
	{
		
		/// <summary>
		/// A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="audio_preview_url")]
		public string Audio_preview_url { get; set; }
		
		/// <summary>
		/// A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_markets")]
		public string[] Available_markets { get; set; }
		
		/// <summary>
		/// The number of the chapter
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chapter_number")]
		public int Chapter_number { get; set; }
		
		/// <summary>
		/// A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The episode length in milliseconds.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration_ms")]
		public int Duration_ms { get; set; }
		
		/// <summary>
		/// Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="explicit")]
		public bool Explicit { get; set; }
		
		/// <summary>
		/// External URLs for this episode.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the episode.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// A description of the episode. This field may contain HTML tags.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="html_description")]
		public string Html_description { get; set; }
		
		/// <summary>
		/// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The cover art for the episode in various sizes, widest first.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageObject[] Images { get; set; }
		
		/// <summary>
		/// True if the episode is playable in the given market. Otherwise false.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_playable")]
		public bool Is_playable { get; set; }
		
		/// <summary>
		/// A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The name of the episode.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="release_date")]
		public string Release_date { get; set; }
		
		/// <summary>
		/// The precision with which `release_date` value is known.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="release_date_precision")]
		public AlbumBaseRelease_date_precision Release_date_precision { get; set; }
		
		/// <summary>
		/// Included in the response when a content restriction is applied.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public ChapterRestrictionObject Restrictions { get; set; }
		
		/// <summary>
		/// The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resume_point")]
		public ResumePointObject Resume_point { get; set; }
		
		/// <summary>
		/// The object type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ChapterBaseType Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChapterRestrictionObject
	{
		
		/// <summary>
		/// The reason for the restriction. Supported values:
		///- `market` - The content item is not available in the given market.
		///- `product` - The content item is not available for the user's subscription type.
		///- `explicit` - The content item is explicit and the user's account is set to not play explicit content.
		///- `payment_required` - Payment is required to play the content item.
		///
		///Additional reasons may be added in the future.
		///**Note**: If you use this field, make sure that your application safely handles unknown values.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResumePointObject
	{
		
		/// <summary>
		/// Whether or not the episode has been fully played by the user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fully_played")]
		public System.Nullable<System.Boolean> Fully_played { get; set; }
		
		/// <summary>
		/// The user's most recent position in the episode in milliseconds.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resume_position_ms")]
		public System.Nullable<System.Int32> Resume_position_ms { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChapterBaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		episode = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChapterObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContextObject
	{
		
		/// <summary>
		/// External URLs for this context.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The object type, e.g. "artist", "playlist", "album", "show".
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CurrentlyPlayingContextObject
	{
		
		/// <summary>
		/// Allows to update the user interface based on which playback actions are available within the current context.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public DisallowsObject Actions { get; set; }
		
		/// <summary>
		/// A Context Object. Can be `null`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public ContextObject Context { get; set; }
		
		/// <summary>
		/// The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currently_playing_type")]
		public string Currently_playing_type { get; set; }
		
		/// <summary>
		/// The device that is currently active.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public DeviceObject Device { get; set; }
		
		/// <summary>
		/// If something is currently playing, return `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_playing")]
		public System.Nullable<System.Boolean> Is_playing { get; set; }
		
		/// <summary>
		/// The currently playing track or episode. Can be `null`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item")]
		public TrackObject Item { get; set; }
		
		/// <summary>
		/// Progress into the currently playing track or episode. Can be `null`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress_ms")]
		public System.Nullable<System.Int32> Progress_ms { get; set; }
		
		/// <summary>
		/// off, track, context
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeat_state")]
		public string Repeat_state { get; set; }
		
		/// <summary>
		/// If shuffle is on or off.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shuffle_state")]
		public System.Nullable<System.Boolean> Shuffle_state { get; set; }
		
		/// <summary>
		/// Unix Millisecond Timestamp when data was fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int32> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisallowsObject
	{
		
		/// <summary>
		/// Interrupting playback. Optional field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interrupting_playback")]
		public System.Nullable<System.Boolean> Interrupting_playback { get; set; }
		
		/// <summary>
		/// Pausing. Optional field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pausing")]
		public System.Nullable<System.Boolean> Pausing { get; set; }
		
		/// <summary>
		/// Resuming. Optional field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resuming")]
		public System.Nullable<System.Boolean> Resuming { get; set; }
		
		/// <summary>
		/// Seeking playback location. Optional field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seeking")]
		public System.Nullable<System.Boolean> Seeking { get; set; }
		
		/// <summary>
		/// Skipping to the next context. Optional field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipping_next")]
		public System.Nullable<System.Boolean> Skipping_next { get; set; }
		
		/// <summary>
		/// Skipping to the previous context. Optional field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipping_prev")]
		public System.Nullable<System.Boolean> Skipping_prev { get; set; }
		
		/// <summary>
		/// Toggling repeat context flag. Optional field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toggling_repeat_context")]
		public System.Nullable<System.Boolean> Toggling_repeat_context { get; set; }
		
		/// <summary>
		/// Toggling repeat track flag. Optional field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toggling_repeat_track")]
		public System.Nullable<System.Boolean> Toggling_repeat_track { get; set; }
		
		/// <summary>
		/// Toggling shuffle flag. Optional field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toggling_shuffle")]
		public System.Nullable<System.Boolean> Toggling_shuffle { get; set; }
		
		/// <summary>
		/// Transfering playback between devices. Optional field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferring_playback")]
		public System.Nullable<System.Boolean> Transferring_playback { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceObject
	{
		
		/// <summary>
		/// The device ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If this device is the currently active device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_active")]
		public System.Nullable<System.Boolean> Is_active { get; set; }
		
		/// <summary>
		/// If this device is currently in a private session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_private_session")]
		public System.Nullable<System.Boolean> Is_private_session { get; set; }
		
		/// <summary>
		/// Whether controlling this device is restricted. At present if this is "true" then no Web API commands will be accepted by this device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_restricted")]
		public System.Nullable<System.Boolean> Is_restricted { get; set; }
		
		/// <summary>
		/// A human-readable name for the device. Some devices have a name that the user can configure (e.g. \"Loudest speaker\") and some devices have a generic name associated with the manufacturer or device model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Device type, such as "computer", "smartphone" or "speaker".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The current volume in percent.
		/// Minimum: 0
		/// Maximum: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volume_percent")]
		[System.ComponentModel.DataAnnotations.Range(0, 100)]
		public System.Nullable<System.Int32> Volume_percent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrackObject
	{
		
		/// <summary>
		/// The album on which the track appears. The album object includes a link in `href` to full information about the album.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="album")]
		public SimplifiedAlbumObject Album { get; set; }
		
		/// <summary>
		/// The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public ArtistObject[] Artists { get; set; }
		
		/// <summary>
		/// A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_markets")]
		public string[] Available_markets { get; set; }
		
		/// <summary>
		/// The disc number (usually `1` unless the album consists of more than one disc).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disc_number")]
		public System.Nullable<System.Int32> Disc_number { get; set; }
		
		/// <summary>
		/// The track length in milliseconds.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration_ms")]
		public System.Nullable<System.Int32> Duration_ms { get; set; }
		
		/// <summary>
		/// Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicit")]
		public System.Nullable<System.Boolean> Explicit { get; set; }
		
		/// <summary>
		/// Known external IDs for the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_ids")]
		public ExternalIdObject External_ids { get; set; }
		
		/// <summary>
		/// Known external URLs for this track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether or not the track is from a local file.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_local")]
		public System.Nullable<System.Boolean> Is_local { get; set; }
		
		/// <summary>
		/// Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_playable")]
		public System.Nullable<System.Boolean> Is_playable { get; set; }
		
		/// <summary>
		/// Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linked_from")]
		public string Linked_from { get; set; }
		
		/// <summary>
		/// The name of the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="popularity")]
		public System.Nullable<System.Int32> Popularity { get; set; }
		
		/// <summary>
		/// A link to a 30 second preview (MP3 format) of the track. Can be `null`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_url")]
		public string Preview_url { get; set; }
		
		/// <summary>
		/// Included in the response when a content restriction is applied.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public TrackRestrictionObject Restrictions { get; set; }
		
		/// <summary>
		/// The number of the track. If an album has several discs, the track number is the number on the specified disc.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track_number")]
		public System.Nullable<System.Int32> Track_number { get; set; }
		
		/// <summary>
		/// The object type: "track".
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TrackObjectType> Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrackRestrictionObject
	{
		
		/// <summary>
		/// The reason for the restriction. Supported values:
		///- `market` - The content item is not available in the given market.
		///- `product` - The content item is not available for the user's subscription type.
		///- `explicit` - The content item is explicit and the user's account is set to not play explicit content.
		///
		///Additional reasons may be added in the future.
		///**Note**: If you use this field, make sure that your application safely handles unknown values.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TrackObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		track = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CurrentlyPlayingObject
	{
		
		/// <summary>
		/// A Context Object. Can be `null`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public ContextObject Context { get; set; }
		
		/// <summary>
		/// The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currently_playing_type")]
		public string Currently_playing_type { get; set; }
		
		/// <summary>
		/// If something is currently playing, return `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_playing")]
		public System.Nullable<System.Boolean> Is_playing { get; set; }
		
		/// <summary>
		/// The currently playing track or episode. Can be `null`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item")]
		public TrackObject Item { get; set; }
		
		/// <summary>
		/// Progress into the currently playing track or episode. Can be `null`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress_ms")]
		public System.Nullable<System.Int32> Progress_ms { get; set; }
		
		/// <summary>
		/// Unix Millisecond Timestamp when data was fetched
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int32> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CursorObject
	{
		
		/// <summary>
		/// The cursor to use as key to find the next page of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="after")]
		public string After { get; set; }
		
		/// <summary>
		/// The cursor to use as key to find the previous page of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="before")]
		public string Before { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CursorPagingObject
	{
		
		/// <summary>
		/// The cursors used to find the next set of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cursors")]
		public CursorObject Cursors { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The maximum number of items in the response (as set in the query or by default).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// URL to the next page of items. ( `null` if none)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The total number of items available to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CursorPagingPlayHistoryObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CursorPagingSimplifiedArtistObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DevicesObject
	{
		
		/// <summary>
		/// A list of 0..n Device objects
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public DeviceObject[] Devices { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EpisodeBase
	{
		
		/// <summary>
		/// A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="audio_preview_url")]
		public string Audio_preview_url { get; set; }
		
		/// <summary>
		/// A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The episode length in milliseconds.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration_ms")]
		public int Duration_ms { get; set; }
		
		/// <summary>
		/// Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown).
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="explicit")]
		public bool Explicit { get; set; }
		
		/// <summary>
		/// External URLs for this episode.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the episode.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// A description of the episode. This field may contain HTML tags.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="html_description")]
		public string Html_description { get; set; }
		
		/// <summary>
		/// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The cover art for the episode in various sizes, widest first.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageObject[] Images { get; set; }
		
		/// <summary>
		/// True if the episode is hosted outside of Spotify's CDN.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_externally_hosted")]
		public bool Is_externally_hosted { get; set; }
		
		/// <summary>
		/// True if the episode is playable in the given market. Otherwise false.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_playable")]
		public bool Is_playable { get; set; }
		
		/// <summary>
		/// The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The name of the episode.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The date the episode was first released, for example `"1981-12-15"`. Depending on the precision, it might be shown as `"1981"` or `"1981-12"`.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="release_date")]
		public string Release_date { get; set; }
		
		/// <summary>
		/// The precision with which `release_date` value is known.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="release_date_precision")]
		public AlbumBaseRelease_date_precision Release_date_precision { get; set; }
		
		/// <summary>
		/// Included in the response when a content restriction is applied.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public EpisodeRestrictionObject Restrictions { get; set; }
		
		/// <summary>
		/// The user's most recent position in the episode. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resume_point")]
		public ResumePointObject Resume_point { get; set; }
		
		/// <summary>
		/// The object type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ChapterBaseType Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EpisodeRestrictionObject
	{
		
		/// <summary>
		/// The reason for the restriction. Supported values:
		///- `market` - The content item is not available in the given market.
		///- `product` - The content item is not available for the user's subscription type.
		///- `explicit` - The content item is explicit and the user's account is set to not play explicit content.
		///
		///Additional reasons may be added in the future.
		///**Note**: If you use this field, make sure that your application safely handles unknown values.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EpisodeObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorObject
	{
		
		/// <summary>
		/// A short description of the cause of the error.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The HTTP status code (also returned in the response header; see [Response Status Codes](/documentation/web-api/concepts/api-calls#response-status-codes) for more information).
		///
		/// Required
		/// Minimum: 400
		/// Maximum: 599
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.Range(400, 599)]
		public int Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExplicitContentSettingsObject
	{
		
		/// <summary>
		/// When `true`, indicates that explicit content should not be played.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter_enabled")]
		public System.Nullable<System.Boolean> Filter_enabled { get; set; }
		
		/// <summary>
		/// When `true`, indicates that the explicit content setting is locked and can't be changed by the user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter_locked")]
		public System.Nullable<System.Boolean> Filter_locked { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinkedTrackObject
	{
		
		/// <summary>
		/// Known external URLs for this track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The object type: "track".
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingArtistObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingFeaturedPlaylistObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="playlists")]
		public PagingPlaylistObject Playlists { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingPlaylistObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingObject
	{
		
		/// <summary>
		/// A link to the Web API endpoint returning the full result of the request
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The maximum number of items in the response (as set in the query or by default).
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public int Limit { get; set; }
		
		/// <summary>
		/// URL to the next page of items. ( `null` if none)
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// The offset of the items returned (as set in the query or by default)
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public int Offset { get; set; }
		
		/// <summary>
		/// URL to the previous page of items. ( `null` if none)
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="previous")]
		public string Previous { get; set; }
		
		/// <summary>
		/// The total number of items available to return.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingPlaylistTrackObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingSavedAlbumObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingSavedEpisodeObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingSavedShowObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingSavedTrackObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingSimplifiedAlbumObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingSimplifiedArtistObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingSimplifiedAudiobookObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingSimplifiedChapterObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingSimplifiedEpisodeObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingSimplifiedShowObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagingTrackObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlayHistoryObject
	{
		
		/// <summary>
		/// The context the track was played from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public ContextObject Context { get; set; }
		
		/// <summary>
		/// The date and time the track was played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="played_at")]
		public System.Nullable<System.DateTimeOffset> Played_at { get; set; }
		
		/// <summary>
		/// The track the user listened to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track")]
		public TrackObject Track { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlayerErrorObject
	{
		
		/// <summary>
		/// A short description of the cause of the error.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public PlayerErrorReasons Reason { get; set; }
		
		/// <summary>
		/// The HTTP status code. Either `404 NOT FOUND` or `403 FORBIDDEN`.  Also returned in the response header.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	/// <summary>
	/// * `NO_PREV_TRACK` - The command requires a previous track, but there is none in the context.
	///* `NO_NEXT_TRACK` - The command requires a next track, but there is none in the context.
	///* `NO_SPECIFIC_TRACK` - The requested track does not exist.
	///* `ALREADY_PAUSED` - The command requires playback to not be paused.
	///* `NOT_PAUSED` - The command requires playback to be paused.
	///* `NOT_PLAYING_LOCALLY` - The command requires playback on the local device.
	///* `NOT_PLAYING_TRACK` - The command requires that a track is currently playing.
	///* `NOT_PLAYING_CONTEXT` - The command requires that a context is currently playing.
	///* `ENDLESS_CONTEXT` - The shuffle command cannot be applied on an endless context.
	///* `CONTEXT_DISALLOW` - The command could not be performed on the context.
	///* `ALREADY_PLAYING` - The track should not be restarted if the same track and context is already playing, and there is a resume point.
	///* `RATE_LIMITED` - The user is rate limited due to too frequent track play, also known as cat-on-the-keyboard spamming.
	///* `REMOTE_CONTROL_DISALLOW` - The context cannot be remote-controlled.
	///* `DEVICE_NOT_CONTROLLABLE` - Not possible to remote control the device.
	///* `VOLUME_CONTROL_DISALLOW` - Not possible to remote control the device's volume.
	///* `NO_ACTIVE_DEVICE` - Requires an active device and the user has none.
	///* `PREMIUM_REQUIRED` - The request is prohibited for non-premium users.
	///* `UNKNOWN` - Certain actions are restricted because of unknown reasons.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlayerErrorReasons
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PREV_TRACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_NEXT_TRACK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_SPECIFIC_TRACK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALREADY_PAUSED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_PAUSED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_PLAYING_LOCALLY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_PLAYING_TRACK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_PLAYING_CONTEXT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDLESS_CONTEXT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTEXT_DISALLOW = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALREADY_PLAYING = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RATE_LIMITED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOTE_CONTROL_DISALLOW = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_NOT_CONTROLLABLE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VOLUME_CONTROL_DISALLOW = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_ACTIVE_DEVICE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREMIUM_REQUIRED = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlaylistObject
	{
		
		/// <summary>
		/// `true` if the owner allows other users to modify the playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collaborative")]
		public System.Nullable<System.Boolean> Collaborative { get; set; }
		
		/// <summary>
		/// The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Known external URLs for this playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// Information about the followers of the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public FollowersObject Followers { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageObject[] Images { get; set; }
		
		/// <summary>
		/// The name of the playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The user who owns the playlist
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public PlaylistOwnerObject Owner { get; set; }
		
		/// <summary>
		/// The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshot_id")]
		public string Snapshot_id { get; set; }
		
		/// <summary>
		/// The tracks of the playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public string Tracks { get; set; }
		
		/// <summary>
		/// The object type: "playlist"
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlaylistOwnerObject : PlaylistUserObject
	{
		
		/// <summary>
		/// The name displayed on the user's profile. `null` if not available.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlaylistTrackObject
	{
		
		/// <summary>
		/// The date and time the track or episode was added. _**Note**: some very old playlists may return `null` in this field._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_at")]
		public System.Nullable<System.DateTimeOffset> Added_at { get; set; }
		
		/// <summary>
		/// The Spotify user who added the track or episode. _**Note**: some very old playlists may return `null` in this field._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_by")]
		public PlaylistUserObject Added_by { get; set; }
		
		/// <summary>
		/// Whether this track or episode is a [local file](/documentation/web-api/concepts/playlists/#local-files) or not.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_local")]
		public System.Nullable<System.Boolean> Is_local { get; set; }
		
		/// <summary>
		/// Information about the track or episode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track")]
		public TrackObject Track { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlaylistUserObject
	{
		
		/// <summary>
		/// Known public external URLs for this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// Information about the followers of this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public FollowersObject Followers { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint for this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The object type.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PlaylistUserObjectType> Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlaylistUserObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlaylistTracksRefObject
	{
		
		/// <summary>
		/// A link to the Web API endpoint where full details of the playlist's tracks can be retrieved.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// Number of tracks in the playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrivateUserObject
	{
		
		/// <summary>
		/// The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The name displayed on the user's profile. `null` if not available.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The user's explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicit_content")]
		public ExplicitContentSettingsObject Explicit_content { get; set; }
		
		/// <summary>
		/// Known external URLs for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// Information about the followers of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public FollowersObject Followers { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint for this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The user's profile image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageObject[] Images { get; set; }
		
		/// <summary>
		/// The user's Spotify subscription level: "premium", "free", etc. (The subscription level "open" can be considered the same as "free".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		/// <summary>
		/// The object type: "user"
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublicUserObject
	{
		
		/// <summary>
		/// The name displayed on the user's profile. `null` if not available.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_name")]
		public string Display_name { get; set; }
		
		/// <summary>
		/// Known public external URLs for this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// Information about the followers of this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followers")]
		public FollowersObject Followers { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint for this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The user's profile image.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageObject[] Images { get; set; }
		
		/// <summary>
		/// The object type.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PlaylistUserObjectType Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueueObject
	{
		
		/// <summary>
		/// The currently playing track or episode. Can be `null`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currently_playing")]
		public TrackObject Currently_playing { get; set; }
		
		/// <summary>
		/// The tracks or episodes in the queue. Can be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queue")]
		public string[] Queue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecommendationSeedObject
	{
		
		/// <summary>
		/// The number of tracks available after min\_\* and max\_\* filters have been applied.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="afterFilteringSize")]
		public System.Nullable<System.Int32> AfterFilteringSize { get; set; }
		
		/// <summary>
		/// The number of tracks available after relinking for regional availability.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="afterRelinkingSize")]
		public System.Nullable<System.Int32> AfterRelinkingSize { get; set; }
		
		/// <summary>
		/// A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The number of recommended tracks available for this seed.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="initialPoolSize")]
		public System.Nullable<System.Int32> InitialPoolSize { get; set; }
		
		/// <summary>
		/// The entity type of this seed. One of `artist`, `track` or `genre`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecommendationsObject
	{
		
		/// <summary>
		/// An array of recommendation seed objects.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="seeds")]
		public RecommendationSeedObject[] Seeds { get; set; }
		
		/// <summary>
		/// An array of track object (simplified) ordered according to the parameters supplied.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public TrackObject[] Tracks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SavedAlbumObject
	{
		
		/// <summary>
		/// The date and time the album was saved
		///Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
		///If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_at")]
		public System.Nullable<System.DateTimeOffset> Added_at { get; set; }
		
		/// <summary>
		/// Information about the album.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="album")]
		public AlbumObject Album { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SavedEpisodeObject
	{
		
		/// <summary>
		/// The date and time the episode was saved.
		///Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_at")]
		public System.Nullable<System.DateTimeOffset> Added_at { get; set; }
		
		/// <summary>
		/// Information about the episode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="episode")]
		public EpisodeObject Episode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SavedShowObject
	{
		
		/// <summary>
		/// The date and time the show was saved.
		///Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
		///If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_at")]
		public System.Nullable<System.DateTimeOffset> Added_at { get; set; }
		
		/// <summary>
		/// Information about the show.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="show")]
		public SimplifiedShowObject Show { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SavedTrackObject
	{
		
		/// <summary>
		/// The date and time the track was saved.
		///Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ.
		///If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_at")]
		public System.Nullable<System.DateTimeOffset> Added_at { get; set; }
		
		/// <summary>
		/// Information about the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track")]
		public TrackObject Track { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShowBase
	{
		
		/// <summary>
		/// A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="available_markets")]
		public string[] Available_markets { get; set; }
		
		/// <summary>
		/// The copyright statements of the show.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="copyrights")]
		public CopyrightObject[] Copyrights { get; set; }
		
		/// <summary>
		/// A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown).
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="explicit")]
		public bool Explicit { get; set; }
		
		/// <summary>
		/// External URLs for this show.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the show.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// A description of the show. This field may contain HTML tags.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="html_description")]
		public string Html_description { get; set; }
		
		/// <summary>
		/// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The cover art for the show in various sizes, widest first.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageObject[] Images { get; set; }
		
		/// <summary>
		/// True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_externally_hosted")]
		public bool Is_externally_hosted { get; set; }
		
		/// <summary>
		/// A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// The media type of the show.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media_type")]
		public string Media_type { get; set; }
		
		/// <summary>
		/// The name of the episode.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The publisher of the show.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
		
		/// <summary>
		/// The total number of episodes in the show.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_episodes")]
		public int Total_episodes { get; set; }
		
		/// <summary>
		/// The object type.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ShowBaseType Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ShowBaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		show = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShowObject : ShowBase
	{
		
		/// <summary>
		/// The episodes of the show.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="episodes")]
		public string Episodes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimplifiedAlbumObject : AlbumBase
	{
		
		/// <summary>
		/// The field is present when getting an artist's albums. Compare to album_type this field represents relationship between the artist and the album.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="album_group")]
		public System.Nullable<SimplifiedAlbumObjectAlbum_group> Album_group { get; set; }
		
		/// <summary>
		/// The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public SimplifiedArtistObject[] Artists { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SimplifiedAlbumObjectAlbum_group
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		album = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		single = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		compilation = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		appears_on = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimplifiedArtistObject
	{
		
		/// <summary>
		/// Known external URLs for this artist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the artist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the artist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The object type.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ArtistObjectType Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimplifiedAudiobookObject : AudiobookBase
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimplifiedChapterObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimplifiedEpisodeObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimplifiedPlaylistObject
	{
		
		/// <summary>
		/// `true` if the owner allows other users to modify the playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collaborative")]
		public System.Nullable<System.Boolean> Collaborative { get; set; }
		
		/// <summary>
		/// The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Known external URLs for this playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public ImageObject[] Images { get; set; }
		
		/// <summary>
		/// The name of the playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The user who owns the playlist
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public PlaylistOwnerObject Owner { get; set; }
		
		/// <summary>
		/// The playlist's public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
		
		/// <summary>
		/// The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshot_id")]
		public string Snapshot_id { get; set; }
		
		/// <summary>
		/// A collection containing a link ( `href` ) to the Web API endpoint where full details of the playlist's tracks can be retrieved, along with the `total` number of tracks in the playlist. Note, a track object may be `null`. This can happen if a track is no longer available.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public PlaylistTracksRefObject Tracks { get; set; }
		
		/// <summary>
		/// The object type: "playlist"
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimplifiedShowObject : ShowBase
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimplifiedTrackObject
	{
		
		/// <summary>
		/// The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public SimplifiedArtistObject[] Artists { get; set; }
		
		/// <summary>
		/// A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_markets")]
		public string[] Available_markets { get; set; }
		
		/// <summary>
		/// The disc number (usually `1` unless the album consists of more than one disc).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disc_number")]
		public System.Nullable<System.Int32> Disc_number { get; set; }
		
		/// <summary>
		/// The track length in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration_ms")]
		public System.Nullable<System.Int32> Duration_ms { get; set; }
		
		/// <summary>
		/// Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicit")]
		public System.Nullable<System.Boolean> Explicit { get; set; }
		
		/// <summary>
		/// External URLs for this track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="external_urls")]
		public ExternalUrlObject External_urls { get; set; }
		
		/// <summary>
		/// A link to the Web API endpoint providing full details of the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		/// <summary>
		/// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether or not the track is from a local file.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_local")]
		public System.Nullable<System.Boolean> Is_local { get; set; }
		
		/// <summary>
		/// Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If `true`, the track is playable in the given market. Otherwise `false`.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_playable")]
		public System.Nullable<System.Boolean> Is_playable { get; set; }
		
		/// <summary>
		/// Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied and is only part of the response if the track linking, in fact, exists. The requested track has been replaced with a different track. The track in the `linked_from` object contains information about the originally requested track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linked_from")]
		public LinkedTrackObject Linked_from { get; set; }
		
		/// <summary>
		/// The name of the track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A URL to a 30 second preview (MP3 format) of the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview_url")]
		public string Preview_url { get; set; }
		
		/// <summary>
		/// Included in the response when a content restriction is applied.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public TrackRestrictionObject Restrictions { get; set; }
		
		/// <summary>
		/// The number of the track. If an album has several discs, the track number is the number on the specified disc.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track_number")]
		public System.Nullable<System.Int32> Track_number { get; set; }
		
		/// <summary>
		/// The object type: "track".
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TuneableTrackObject
	{
		
		/// <summary>
		/// A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acousticness")]
		public System.Nullable<System.Single> Acousticness { get; set; }
		
		/// <summary>
		/// Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="danceability")]
		public System.Nullable<System.Single> Danceability { get; set; }
		
		/// <summary>
		/// The duration of the track in milliseconds.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration_ms")]
		public System.Nullable<System.Int32> Duration_ms { get; set; }
		
		/// <summary>
		/// Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energy")]
		public System.Nullable<System.Single> Energy { get; set; }
		
		/// <summary>
		/// Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly "vocal". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instrumentalness")]
		public System.Nullable<System.Single> Instrumentalness { get; set; }
		
		/// <summary>
		/// The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.
		///
		/// Minimum: -1
		/// Maximum: 11
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		[System.ComponentModel.DataAnnotations.Range(-1, 11)]
		public System.Nullable<System.Int32> Key { get; set; }
		
		/// <summary>
		/// Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="liveness")]
		public System.Nullable<System.Single> Liveness { get; set; }
		
		/// <summary>
		/// The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loudness")]
		public System.Nullable<System.Single> Loudness { get; set; }
		
		/// <summary>
		/// Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<System.Int32> Mode { get; set; }
		
		/// <summary>
		/// The popularity of the track. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are. _**Note**: When applying track relinking via the `market` parameter, it is expected to find relinked tracks with popularities that do not match `min_*`, `max_*`and `target_*` popularities. These relinked tracks are accurate replacements for unplayable tracks with the expected popularity scores. Original, non-relinked tracks are available via the `linked_from` attribute of the [relinked track response](/documentation/web-api/concepts/track-relinking)._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="popularity")]
		public System.Nullable<System.Single> Popularity { get; set; }
		
		/// <summary>
		/// Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speechiness")]
		public System.Nullable<System.Single> Speechiness { get; set; }
		
		/// <summary>
		/// The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tempo")]
		public System.Nullable<System.Single> Tempo { get; set; }
		
		/// <summary>
		/// An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of "3/4", to "7/4".
		/// Minimum: 3
		/// Maximum: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_signature")]
		[System.ComponentModel.DataAnnotations.Range(3, 7)]
		public System.Nullable<System.Int32> Time_signature { get; set; }
		
		/// <summary>
		/// A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valence")]
		public System.Nullable<System.Single> Valence { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get Several Albums
		/// 
		/// Get Spotify catalog information for multiple albums identified by their Spotify IDs.
		/// 
		/// Get_multiple_albums albums
		/// </summary>
		/// <returns>A set of albums</returns>
		public async Task<Get_multiple_albumsReturn> Get_multiple_albumsAsync(string ids, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "albums?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_multiple_albumsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Album
		/// 
		/// Get Spotify catalog information for a single album.
		/// 
		/// Get_an_album albums/{id}
		/// </summary>
		/// <returns>An album</returns>
		public async Task<AlbumObject> Get_an_albumAsync(string id, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "albums/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AlbumObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Album Tracks
		/// 
		/// Get Spotify catalog information about an album’s tracks.
		/// Optional parameters can be used to limit the number of tracks returned.
		/// 
		/// Get_an_albums_tracks albums/{id}/tracks
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>Pages of tracks</returns>
		public async Task<PagingSimplifiedTrackObject> Get_an_albums_tracksAsync(string id, string market, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "albums/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/tracks&market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingSimplifiedTrackObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Several Artists
		/// 
		/// Get Spotify catalog information for several artists based on their Spotify IDs.
		/// 
		/// Get_multiple_artists artists
		/// </summary>
		/// <returns>A set of artists</returns>
		public async Task<Get_multiple_artistsReturn> Get_multiple_artistsAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "artists?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_multiple_artistsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Artist
		/// 
		/// Get Spotify catalog information for a single artist identified by their unique Spotify ID.
		/// 
		/// Get_an_artist artists/{id}
		/// </summary>
		/// <returns>An artist</returns>
		public async Task<ArtistObject> Get_an_artistAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "artists/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ArtistObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Artist's Albums
		/// 
		/// Get Spotify catalog information about an artist's albums.
		/// 
		/// Get_an_artists_albums artists/{id}/albums
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>Pages of albums</returns>
		public async Task<PagingSimplifiedAlbumObject> Get_an_artists_albumsAsync(string id, string include_groups, string market, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "artists/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/albums&include_groups=" + (include_groups==null? "" : System.Uri.EscapeDataString(include_groups))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingSimplifiedAlbumObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Artist's Related Artists
		/// 
		/// Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's [listening history](http://news.spotify.com/se/2010/02/03/related-artists/).
		/// 
		/// Get_an_artists_related_artists artists/{id}/related-artists
		/// </summary>
		/// <returns>A set of artists</returns>
		public async Task<Get_an_artists_related_artistsReturn> Get_an_artists_related_artistsAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "artists/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/related-artists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_an_artists_related_artistsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Artist's Top Tracks
		/// 
		/// Get Spotify catalog information about an artist's top tracks by country.
		/// 
		/// Get_an_artists_top_tracks artists/{id}/top-tracks
		/// </summary>
		/// <returns>A set of tracks</returns>
		public async Task<Get_an_artists_top_tracksReturn> Get_an_artists_top_tracksAsync(string id, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "artists/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/top-tracks&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_an_artists_top_tracksReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Track's Audio Analysis
		/// 
		/// Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre.
		/// 
		/// Get_audio_analysis audio-analysis/{id}
		/// </summary>
		/// <returns>Audio analysis for one track</returns>
		public async Task<AudioAnalysisObject> Get_audio_analysisAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audio-analysis/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AudioAnalysisObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Tracks' Audio Features
		/// 
		/// Get audio features for multiple tracks based on their Spotify IDs.
		/// 
		/// Get_several_audio_features audio-features
		/// </summary>
		/// <returns>A set of audio features</returns>
		public async Task<Get_several_audio_featuresReturn> Get_several_audio_featuresAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audio-features?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_several_audio_featuresReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Track's Audio Features
		/// 
		/// Get audio feature information for a single track identified by its unique
		/// Spotify ID.
		/// 
		/// Get_audio_features audio-features/{id}
		/// </summary>
		/// <returns>Audio features for one track</returns>
		public async Task<AudioFeaturesObject> Get_audio_featuresAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audio-features/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AudioFeaturesObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Several Audiobooks
		/// 
		/// Get Spotify catalog information for several audiobooks identified by their Spotify IDs.<br />
		/// **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**
		/// 
		/// Get_multiple_audiobooks audiobooks
		/// </summary>
		/// <returns>A set of audiobooks</returns>
		public async Task<Get_multiple_audiobooksReturn> Get_multiple_audiobooksAsync(string ids, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audiobooks?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_multiple_audiobooksReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an Audiobook
		/// 
		/// Get Spotify catalog information for a single audiobook.<br />
		/// **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**
		/// 
		/// Get_an_audiobook audiobooks/{id}
		/// </summary>
		/// <returns>An Audiobook</returns>
		public async Task<AudiobookObject> Get_an_audiobookAsync(string id, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audiobooks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AudiobookObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Audiobook Chapters
		/// 
		/// Get Spotify catalog information about an audiobook's chapters.<br />
		/// **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**
		/// 
		/// Get_audiobook_chapters audiobooks/{id}/chapters
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>Pages of chapters</returns>
		public async Task<PagingSimplifiedChapterObject> Get_audiobook_chaptersAsync(string id, string market, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "audiobooks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/chapters&market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingSimplifiedChapterObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Several Browse Categories
		/// 
		/// Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).
		/// 
		/// Get_categories browse/categories
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>A paged set of categories</returns>
		public async Task<Get_categoriesReturn> Get_categoriesAsync(string country, string locale, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browse/categories?country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_categoriesReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Single Browse Category
		/// 
		/// Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).
		/// 
		/// Get_a_category browse/categories/{category_id}
		/// </summary>
		/// <returns>A category</returns>
		public async Task<CategoryObject> Get_a_categoryAsync(string category_id, string country, string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browse/categories/"+ (category_id==null? "" : System.Uri.EscapeDataString(category_id))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CategoryObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Category's Playlists
		/// 
		/// Get a list of Spotify playlists tagged with a particular category.
		/// 
		/// Get_a_categories_playlists browse/categories/{category_id}/playlists
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>A paged set of playlists</returns>
		public async Task<PagingFeaturedPlaylistObject> Get_a_categories_playlistsAsync(string category_id, string country, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browse/categories/"+ (category_id==null? "" : System.Uri.EscapeDataString(category_id))+"/playlists&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingFeaturedPlaylistObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Featured Playlists
		/// 
		/// Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).
		/// 
		/// Get_featured_playlists browse/featured-playlists
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>A paged set of playlists</returns>
		public async Task<PagingFeaturedPlaylistObject> Get_featured_playlistsAsync(string country, string locale, string timestamp, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browse/featured-playlists?country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&timestamp=" + (timestamp==null? "" : System.Uri.EscapeDataString(timestamp))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingFeaturedPlaylistObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get New Releases
		/// 
		/// Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).
		/// 
		/// Get_new_releases browse/new-releases
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>A paged set of albums</returns>
		public async Task<Get_new_releasesReturn> Get_new_releasesAsync(string country, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "browse/new-releases?country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_new_releasesReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Several Chapters
		/// 
		/// Get Spotify catalog information for several chapters identified by their Spotify IDs.<br />
		/// **Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.**
		/// 
		/// Get_several_chapters chapters
		/// </summary>
		/// <returns>A set of chapters</returns>
		public async Task<Get_several_chaptersReturn> Get_several_chaptersAsync(string ids, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "chapters?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_several_chaptersReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Chapter
		/// 
		/// Get Spotify catalog information for a single chapter.<br />
		/// **Note: Chapters are only available for the US, UK, Ireland, New Zealand and Australia markets.**
		/// 
		/// Get_a_chapter chapters/{id}
		/// </summary>
		/// <returns>A Chapter</returns>
		public async Task<ChapterObject> Get_a_chapterAsync(string id, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "chapters/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChapterObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Several Episodes
		/// 
		/// Get Spotify catalog information for several episodes based on their Spotify IDs.
		/// 
		/// Get_multiple_episodes episodes
		/// </summary>
		/// <returns>A set of episodes</returns>
		public async Task<Get_multiple_episodesReturn> Get_multiple_episodesAsync(string ids, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "episodes?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_multiple_episodesReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Episode
		/// 
		/// Get Spotify catalog information for a single episode identified by its
		/// unique Spotify ID.
		/// 
		/// Get_an_episode episodes/{id}
		/// </summary>
		/// <returns>An episode</returns>
		public async Task<EpisodeObject> Get_an_episodeAsync(string id, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "episodes/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EpisodeObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Available Markets
		/// 
		/// Get the list of markets where Spotify is available.
		/// 
		/// Get_available_markets markets
		/// </summary>
		/// <returns>A markets object with an array of country codes</returns>
		public async Task<Get_available_marketsReturn> Get_available_marketsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "markets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_available_marketsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Current User's Profile
		/// 
		/// Get detailed profile information about the current user (including the
		/// current user's username).
		/// 
		/// Get_current_users_profile me
		/// </summary>
		/// <returns>A user</returns>
		public async Task<PrivateUserObject> Get_current_users_profileAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PrivateUserObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove Users' Saved Albums
		/// 
		/// Remove one or more albums from the current user's 'Your Music' library.
		/// 
		/// Remove_albums_user me/albums
		/// </summary>
		/// <returns>Album(s) have been removed from the library</returns>
		public async Task Remove_albums_userAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/albums?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Saved Albums
		/// 
		/// Get a list of the albums saved in the current Spotify user's 'Your Music' library.
		/// 
		/// Get_users_saved_albums me/albums
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>Pages of albums</returns>
		public async Task<PagingSavedAlbumObject> Get_users_saved_albumsAsync(int limit, int offset, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/albums?limit="+limit+"&offset="+offset+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingSavedAlbumObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save Albums for Current User
		/// 
		/// Save one or more albums to the current user's 'Your Music' library.
		/// 
		/// Save_albums_user me/albums
		/// </summary>
		/// <returns>The album is saved</returns>
		public async Task Save_albums_userAsync(string ids, Save_albums_userPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/albums?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check User's Saved Albums
		/// 
		/// Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.
		/// 
		/// Check_users_saved_albums me/albums/contains
		/// </summary>
		/// <returns>Array of booleans</returns>
		public async Task<bool[]> Check_users_saved_albumsAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/albums/contains?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove User's Saved Audiobooks
		/// 
		/// Remove one or more audiobooks from the Spotify user's library.
		/// 
		/// Remove_audiobooks_user me/audiobooks
		/// </summary>
		/// <returns>Audiobook(s) have been removed from the library</returns>
		public async Task Remove_audiobooks_userAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/audiobooks?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Saved Audiobooks
		/// 
		/// Get a list of the audiobooks saved in the current Spotify user's 'Your Music' library.
		/// 
		/// Get_users_saved_audiobooks me/audiobooks
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>Pages of audiobooks</returns>
		public async Task<PagingSimplifiedAudiobookObject> Get_users_saved_audiobooksAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/audiobooks?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingSimplifiedAudiobookObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save Audiobooks for Current User
		/// 
		/// Save one or more audiobooks to the current Spotify user's library.
		/// 
		/// Save_audiobooks_user me/audiobooks
		/// </summary>
		/// <returns>Audiobook(s) are saved to the library</returns>
		public async Task Save_audiobooks_userAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/audiobooks?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check User's Saved Audiobooks
		/// 
		/// Check if one or more audiobooks are already saved in the current Spotify user's library.
		/// 
		/// Check_users_saved_audiobooks me/audiobooks/contains
		/// </summary>
		/// <returns>Array of booleans</returns>
		public async Task<bool[]> Check_users_saved_audiobooksAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/audiobooks/contains?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove User's Saved Episodes
		/// 
		/// Remove one or more episodes from the current user's library.<br/>
		/// This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
		/// 
		/// Remove_episodes_user me/episodes
		/// </summary>
		/// <returns>Episode removed</returns>
		public async Task Remove_episodes_userAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/episodes?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Saved Episodes
		/// 
		/// Get a list of the episodes saved in the current Spotify user's library.<br/>
		/// This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
		/// 
		/// Get_users_saved_episodes me/episodes
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>Pages of episodes</returns>
		public async Task<PagingSavedEpisodeObject> Get_users_saved_episodesAsync(string market, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/episodes?market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingSavedEpisodeObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save Episodes for Current User
		/// 
		/// Save one or more episodes to the current user's library.<br/>
		/// This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).
		/// 
		/// Save_episodes_user me/episodes
		/// </summary>
		/// <returns>Episode saved</returns>
		public async Task Save_episodes_userAsync(string ids, Save_episodes_userPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/episodes?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check User's Saved Episodes
		/// 
		/// Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes' library.<br/>
		/// This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer)..
		/// 
		/// Check_users_saved_episodes me/episodes/contains
		/// </summary>
		/// <returns>Array of booleans</returns>
		public async Task<bool[]> Check_users_saved_episodesAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/episodes/contains?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unfollow Artists or Users
		/// 
		/// Remove the current user as a follower of one or more artists or other Spotify users.
		/// 
		/// Unfollow_artists_users me/following
		/// </summary>
		/// <returns>Artist or user unfollowed</returns>
		public async Task Unfollow_artists_usersAsync(Unfollow_artists_usersType type, string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/following?type=" + type+"&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Followed Artists
		/// 
		/// Get the current user's followed artists.
		/// 
		/// Get_followed me/following
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>A paged set of artists</returns>
		public async Task<Get_followedReturn> Get_followedAsync(ArtistObjectType type, string after, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/following?type=" + type+"&after=" + (after==null? "" : System.Uri.EscapeDataString(after))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_followedReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow Artists or Users
		/// 
		/// Add the current user as a follower of one or more artists or other Spotify users.
		/// 
		/// Follow_artists_users me/following
		/// </summary>
		public async Task Follow_artists_usersAsync(Unfollow_artists_usersType type, string ids, Follow_artists_usersPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/following?type=" + type+"&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check If User Follows Artists or Users
		/// 
		/// Check to see if the current user is following one or more artists or other Spotify users.
		/// 
		/// Check_current_user_follows me/following/contains
		/// </summary>
		/// <returns>Array of booleans</returns>
		public async Task<bool[]> Check_current_user_followsAsync(Unfollow_artists_usersType type, string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/following/contains?type=" + type+"&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Playback State
		/// 
		/// Get information about the user’s current playback state, including track or episode, progress, and active device.
		/// 
		/// Get_information_about_the_users_current_playback me/player
		/// </summary>
		/// <returns>Information about playback</returns>
		public async Task<CurrentlyPlayingContextObject> Get_information_about_the_users_current_playbackAsync(string market, string additional_types, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player?market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&additional_types=" + (additional_types==null? "" : System.Uri.EscapeDataString(additional_types));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CurrentlyPlayingContextObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Transfer Playback
		/// 
		/// Transfer playback to a new device and determine if it should start playing.
		/// 
		/// Transfer_a_users_playback me/player
		/// </summary>
		public async Task Transfer_a_users_playbackAsync(Transfer_a_users_playbackPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Currently Playing Track
		/// 
		/// Get the object currently being played on the user's Spotify account.
		/// 
		/// Get_the_users_currently_playing_track me/player/currently-playing
		/// </summary>
		/// <returns>Information about the currently playing track</returns>
		public async Task<CurrentlyPlayingContextObject> Get_the_users_currently_playing_trackAsync(string market, string additional_types, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player/currently-playing?market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&additional_types=" + (additional_types==null? "" : System.Uri.EscapeDataString(additional_types));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CurrentlyPlayingContextObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Available Devices
		/// 
		/// Get information about a user’s available devices.
		/// 
		/// Get_a_users_available_devices me/player/devices
		/// </summary>
		/// <returns>A set of devices</returns>
		public async Task<Get_a_users_available_devicesReturn> Get_a_users_available_devicesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player/devices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_a_users_available_devicesReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Skip To Next
		/// 
		/// Skips to next track in the user’s queue.
		/// 
		/// Skip_users_playback_to_next_track me/player/next
		/// </summary>
		public async Task Skip_users_playback_to_next_trackAsync(string device_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player/next?device_id=" + (device_id==null? "" : System.Uri.EscapeDataString(device_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Pause Playback
		/// 
		/// Pause playback on the user's account.
		/// 
		/// Pause_a_users_playback me/player/pause
		/// </summary>
		public async Task Pause_a_users_playbackAsync(string device_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player/pause?device_id=" + (device_id==null? "" : System.Uri.EscapeDataString(device_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start/Resume Playback
		/// 
		/// Start a new context or resume current playback on the user's active device.
		/// 
		/// Start_a_users_playback me/player/play
		/// </summary>
		public async Task Start_a_users_playbackAsync(string device_id, Start_a_users_playbackPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player/play?device_id=" + (device_id==null? "" : System.Uri.EscapeDataString(device_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Skip To Previous
		/// 
		/// Skips to previous track in the user’s queue.
		/// 
		/// Skip_users_playback_to_previous_track me/player/previous
		/// </summary>
		public async Task Skip_users_playback_to_previous_trackAsync(string device_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player/previous?device_id=" + (device_id==null? "" : System.Uri.EscapeDataString(device_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the User's Queue
		/// 
		/// Get the list of objects that make up the user's queue.
		/// 
		/// Get_queue me/player/queue
		/// </summary>
		/// <returns>Information about the queue</returns>
		public async Task<QueueObject> Get_queueAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player/queue";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueueObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add Item to Playback Queue
		/// 
		/// Add an item to the end of the user's current playback queue.
		/// 
		/// Add_to_queue me/player/queue
		/// </summary>
		public async Task Add_to_queueAsync(string uri, string device_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player/queue?uri=" + (uri==null? "" : System.Uri.EscapeDataString(uri))+"&device_id=" + (device_id==null? "" : System.Uri.EscapeDataString(device_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Recently Played Tracks
		/// 
		/// Get tracks from the current user's recently played tracks.
		/// _**Note**: Currently doesn't support podcast episodes._
		/// 
		/// Get_recently_played me/player/recently-played
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>A paged set of tracks</returns>
		public async Task<CursorPagingPlayHistoryObject> Get_recently_playedAsync(int limit, int after, int before, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player/recently-played?limit="+limit+"&after="+after+"&before="+before;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CursorPagingPlayHistoryObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set Repeat Mode
		/// 
		/// Set the repeat mode for the user's playback. Options are repeat-track,
		/// repeat-context, and off.
		/// 
		/// Set_repeat_mode_on_users_playback me/player/repeat
		/// </summary>
		public async Task Set_repeat_mode_on_users_playbackAsync(string state, string device_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player/repeat?state=" + (state==null? "" : System.Uri.EscapeDataString(state))+"&device_id=" + (device_id==null? "" : System.Uri.EscapeDataString(device_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Seek To Position
		/// 
		/// Seeks to the given position in the user’s currently playing track.
		/// 
		/// Seek_to_position_in_currently_playing_track me/player/seek
		/// </summary>
		public async Task Seek_to_position_in_currently_playing_trackAsync(int position_ms, string device_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player/seek?position_ms="+position_ms+"&device_id=" + (device_id==null? "" : System.Uri.EscapeDataString(device_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Toggle Playback Shuffle
		/// 
		/// Toggle shuffle on or off for user’s playback.
		/// 
		/// Toggle_shuffle_for_users_playback me/player/shuffle
		/// </summary>
		public async Task Toggle_shuffle_for_users_playbackAsync(bool state, string device_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player/shuffle?state="+state+"&device_id=" + (device_id==null? "" : System.Uri.EscapeDataString(device_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set Playback Volume
		/// 
		/// Set the volume for the user’s current playback device.
		/// 
		/// Set_volume_for_users_playback me/player/volume
		/// </summary>
		public async Task Set_volume_for_users_playbackAsync(int volume_percent, string device_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/player/volume?volume_percent="+volume_percent+"&device_id=" + (device_id==null? "" : System.Uri.EscapeDataString(device_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Current User's Playlists
		/// 
		/// Get a list of the playlists owned or followed by the current Spotify
		/// user.
		/// 
		/// Get_a_list_of_current_users_playlists me/playlists
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>A paged set of playlists</returns>
		public async Task<PagingPlaylistObject> Get_a_list_of_current_users_playlistsAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/playlists?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingPlaylistObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove User's Saved Shows
		/// 
		/// Delete one or more shows from current Spotify user's library.
		/// 
		/// Remove_shows_user me/shows
		/// </summary>
		/// <returns>Show removed</returns>
		public async Task Remove_shows_userAsync(string ids, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/shows?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Saved Shows
		/// 
		/// Get a list of shows saved in the current Spotify user's library. Optional parameters can be used to limit the number of shows returned.
		/// 
		/// Get_users_saved_shows me/shows
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>Pages of shows</returns>
		public async Task<PagingSavedShowObject> Get_users_saved_showsAsync(int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/shows?limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingSavedShowObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save Shows for Current User
		/// 
		/// Save one or more shows to current Spotify user's library.
		/// 
		/// Save_shows_user me/shows
		/// </summary>
		/// <returns>Show saved</returns>
		public async Task Save_shows_userAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/shows?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check User's Saved Shows
		/// 
		/// Check if one or more shows is already saved in the current Spotify user's library.
		/// 
		/// Check_users_saved_shows me/shows/contains
		/// </summary>
		/// <returns>Array of booleans</returns>
		public async Task<bool[]> Check_users_saved_showsAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/shows/contains?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Top Items
		/// 
		/// Get the current user's top artists or tracks based on calculated affinity.
		/// 
		/// Get_users_top_artists_and_tracks me/top/{type}
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>Pages of artists or tracks</returns>
		public async Task<string> Get_users_top_artists_and_tracksAsync(Get_users_top_artists_and_tracksType type, string time_range, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/top/"+type+"?time_range=" + (time_range==null? "" : System.Uri.EscapeDataString(time_range))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove User's Saved Tracks
		/// 
		/// Remove one or more tracks from the current user's 'Your Music' library.
		/// 
		/// Remove_tracks_user me/tracks
		/// </summary>
		/// <returns>Track removed</returns>
		public async Task Remove_tracks_userAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/tracks?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Saved Tracks
		/// 
		/// Get a list of the songs saved in the current Spotify user's 'Your Music' library.
		/// 
		/// Get_users_saved_tracks me/tracks
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>Pages of tracks</returns>
		public async Task<PagingSavedTrackObject> Get_users_saved_tracksAsync(string market, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/tracks?market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingSavedTrackObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Save Tracks for Current User
		/// 
		/// Save one or more tracks to the current user's 'Your Music' library.
		/// 
		/// Save_tracks_user me/tracks
		/// </summary>
		/// <returns>Track saved</returns>
		public async Task Save_tracks_userAsync(string ids, Save_tracks_userPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/tracks?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check User's Saved Tracks
		/// 
		/// Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.
		/// 
		/// Check_users_saved_tracks me/tracks/contains
		/// </summary>
		/// <returns>Array of booleans</returns>
		public async Task<bool[]> Check_users_saved_tracksAsync(string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/tracks/contains?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Playlist
		/// 
		/// Get a playlist owned by a Spotify user.
		/// 
		/// Get_playlist playlists/{playlist_id}
		/// </summary>
		/// <returns>A playlist</returns>
		public async Task<PlaylistObject> Get_playlistAsync(string playlist_id, string market, string fields, string additional_types, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&additional_types=" + (additional_types==null? "" : System.Uri.EscapeDataString(additional_types));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlaylistObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change Playlist Details
		/// 
		/// Change a playlist's name and public/private state. (The user must, of
		/// course, own the playlist.)
		/// 
		/// Change_playlist_details playlists/{playlist_id}
		/// </summary>
		/// <returns>Playlist updated</returns>
		public async Task Change_playlist_detailsAsync(string playlist_id, Change_playlist_detailsPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unfollow Playlist
		/// 
		/// Remove the current user as a follower of a playlist.
		/// 
		/// Unfollow_playlist playlists/{playlist_id}/followers
		/// </summary>
		/// <returns>Playlist unfollowed</returns>
		public async Task Unfollow_playlistAsync(string playlist_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/followers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow Playlist
		/// 
		/// Add the current user as a follower of a playlist.
		/// 
		/// Follow_playlist playlists/{playlist_id}/followers
		/// </summary>
		/// <returns>Playlist followed</returns>
		public async Task Follow_playlistAsync(string playlist_id, Follow_playlistPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/followers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if Users Follow Playlist
		/// 
		/// Check to see if one or more Spotify users are following a specified playlist.
		/// 
		/// Check_if_user_follows_playlist playlists/{playlist_id}/followers/contains
		/// </summary>
		/// <returns>Array of booleans</returns>
		public async Task<bool[]> Check_if_user_follows_playlistAsync(string playlist_id, string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/followers/contains&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<bool[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Playlist Cover Image
		/// 
		/// Get the current image associated with a specific playlist.
		/// 
		/// Get_playlist_cover playlists/{playlist_id}/images
		/// </summary>
		/// <returns>A set of images</returns>
		public async Task<ImageObject[]> Get_playlist_coverAsync(string playlist_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/images";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ImageObject[]>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove Playlist Items
		/// 
		/// Remove one or more items from a user's playlist.
		/// 
		/// Remove_tracks_playlist playlists/{playlist_id}/tracks
		/// </summary>
		/// <returns>A snapshot ID for the playlist</returns>
		public async Task<Remove_tracks_playlistReturn> Remove_tracks_playlistAsync(string playlist_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/tracks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Remove_tracks_playlistReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Playlist Items
		/// 
		/// Get full details of the items of a playlist owned by a Spotify user.
		/// 
		/// Get_playlists_tracks playlists/{playlist_id}/tracks
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>Pages of tracks</returns>
		public async Task<PagingPlaylistTrackObject> Get_playlists_tracksAsync(string playlist_id, string market, string fields, int limit, int offset, string additional_types, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/tracks&market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&limit="+limit+"&offset="+offset+"&additional_types=" + (additional_types==null? "" : System.Uri.EscapeDataString(additional_types));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingPlaylistTrackObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add Items to Playlist
		/// 
		/// Add one or more items to a user's playlist.
		/// 
		/// Add_tracks_to_playlist playlists/{playlist_id}/tracks
		/// </summary>
		public async Task Add_tracks_to_playlistAsync(string playlist_id, int position, string uris, Add_tracks_to_playlistPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/tracks&position="+position+"&uris=" + (uris==null? "" : System.Uri.EscapeDataString(uris));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Playlist Items
		/// 
		/// Either reorder or replace items in a playlist depending on the request's parameters.
		/// To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request's body.
		/// To replace items, include `uris` as either a query parameter or in the request's body.
		/// Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist.
		/// <br/>
		/// **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters.
		/// These operations can't be applied together in a single request.
		/// 
		/// Reorder_or_replace_playlists_tracks playlists/{playlist_id}/tracks
		/// </summary>
		/// <returns>A snapshot ID for the playlist</returns>
		public async Task<Reorder_or_replace_playlists_tracksReturn> Reorder_or_replace_playlists_tracksAsync(string playlist_id, string uris, Reorder_or_replace_playlists_tracksPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "playlists/"+ (playlist_id==null? "" : System.Uri.EscapeDataString(playlist_id))+"/tracks&uris=" + (uris==null? "" : System.Uri.EscapeDataString(uris));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Reorder_or_replace_playlists_tracksReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Recommendations
		/// 
		/// Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.
		/// 
		/// For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks.
		/// 
		/// Get_recommendations recommendations
		/// </summary>
		/// <param name="limit">Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="min_acousticness">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="max_acousticness">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="target_acousticness">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="min_danceability">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="max_danceability">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="target_danceability">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="min_energy">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="max_energy">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="target_energy">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="min_instrumentalness">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="max_instrumentalness">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="target_instrumentalness">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="min_key">Minimum: 0
		/// Maximum: 11
		// </param>
		/// <param name="max_key">Minimum: 0
		/// Maximum: 11
		// </param>
		/// <param name="target_key">Minimum: 0
		/// Maximum: 11
		// </param>
		/// <param name="min_liveness">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="max_liveness">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="target_liveness">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="min_mode">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="max_mode">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="target_mode">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="min_popularity">Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="max_popularity">Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="target_popularity">Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="min_speechiness">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="max_speechiness">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="target_speechiness">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="min_time_signature">Maximum: 11</param>
		/// <param name="min_valence">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="max_valence">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <param name="target_valence">Minimum: 0
		/// Maximum: 1
		// </param>
		/// <returns>A set of recommendations</returns>
		public async Task<RecommendationsObject> Get_recommendationsAsync(
					int limit, 
					string market, 
					string seed_artists, 
					string seed_genres, 
					string seed_tracks, 
					double min_acousticness, 
					double max_acousticness, 
					double target_acousticness, 
					double min_danceability, 
					double max_danceability, 
					double target_danceability, 
					int min_duration_ms, 
					int max_duration_ms, 
					int target_duration_ms, 
					double min_energy, 
					double max_energy, 
					double target_energy, 
					double min_instrumentalness, 
					double max_instrumentalness, 
					double target_instrumentalness, 
					int min_key, 
					int max_key, 
					int target_key, 
					double min_liveness, 
					double max_liveness, 
					double target_liveness, 
					double min_loudness, 
					double max_loudness, 
					double target_loudness, 
					int min_mode, 
					int max_mode, 
					int target_mode, 
					int min_popularity, 
					int max_popularity, 
					int target_popularity, 
					double min_speechiness, 
					double max_speechiness, 
					double target_speechiness, 
					double min_tempo, 
					double max_tempo, 
					double target_tempo, 
					int min_time_signature, 
					int max_time_signature, 
					int target_time_signature, 
					double min_valence, 
					double max_valence, 
					double target_valence, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recommendations?limit="+limit+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&seed_artists=" + (seed_artists==null? "" : System.Uri.EscapeDataString(seed_artists))+"&seed_genres=" + (seed_genres==null? "" : System.Uri.EscapeDataString(seed_genres))+"&seed_tracks=" + (seed_tracks==null? "" : System.Uri.EscapeDataString(seed_tracks))+"&min_acousticness="+min_acousticness+"&max_acousticness="+max_acousticness+"&target_acousticness="+target_acousticness+"&min_danceability="+min_danceability+"&max_danceability="+max_danceability+"&target_danceability="+target_danceability+"&min_duration_ms="+min_duration_ms+"&max_duration_ms="+max_duration_ms+"&target_duration_ms="+target_duration_ms+"&min_energy="+min_energy+"&max_energy="+max_energy+"&target_energy="+target_energy+"&min_instrumentalness="+min_instrumentalness+"&max_instrumentalness="+max_instrumentalness+"&target_instrumentalness="+target_instrumentalness+"&min_key="+min_key+"&max_key="+max_key+"&target_key="+target_key+"&min_liveness="+min_liveness+"&max_liveness="+max_liveness+"&target_liveness="+target_liveness+"&min_loudness="+min_loudness+"&max_loudness="+max_loudness+"&target_loudness="+target_loudness+"&min_mode="+min_mode+"&max_mode="+max_mode+"&target_mode="+target_mode+"&min_popularity="+min_popularity+"&max_popularity="+max_popularity+"&target_popularity="+target_popularity+"&min_speechiness="+min_speechiness+"&max_speechiness="+max_speechiness+"&target_speechiness="+target_speechiness+"&min_tempo="+min_tempo+"&max_tempo="+max_tempo+"&target_tempo="+target_tempo+"&min_time_signature="+min_time_signature+"&max_time_signature="+max_time_signature+"&target_time_signature="+target_time_signature+"&min_valence="+min_valence+"&max_valence="+max_valence+"&target_valence="+target_valence;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendationsObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Available Genre Seeds
		/// 
		/// Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations).
		/// 
		/// Get_recommendation_genres recommendations/available-genre-seeds
		/// </summary>
		/// <returns>A set of genres</returns>
		public async Task<Get_recommendation_genresReturn> Get_recommendation_genresAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recommendations/available-genre-seeds";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_recommendation_genresReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for Item
		/// 
		/// Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks
		/// that match a keyword string.<br />
		/// **Note: Audiobooks are only available for the US, UK, Ireland, New Zealand and Australia markets.**
		/// 
		/// Search search
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <param name="offset">Minimum: 0
		/// Maximum: 1000
		// </param>
		/// <returns>Search response</returns>
		public async Task<SearchReturn> SearchAsync(string q, string[] type, string market, int limit, int offset, SearchInclude_external include_external, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&"+string.Join("&", type.Select(z => $"type={System.Uri.EscapeDataString(z.ToString())}"))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&limit="+limit+"&offset="+offset+"&include_external=" + include_external;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Several Shows
		/// 
		/// Get Spotify catalog information for several shows based on their Spotify IDs.
		/// 
		/// Get_multiple_shows shows
		/// </summary>
		/// <returns>A set of shows</returns>
		public async Task<Get_multiple_showsReturn> Get_multiple_showsAsync(string market, string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shows?market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_multiple_showsReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Show
		/// 
		/// Get Spotify catalog information for a single show identified by its
		/// unique Spotify ID.
		/// 
		/// Get_a_show shows/{id}
		/// </summary>
		/// <returns>A show</returns>
		public async Task<ShowObject> Get_a_showAsync(string market, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shows/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ShowObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Show Episodes
		/// 
		/// Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned.
		/// 
		/// Get_a_shows_episodes shows/{id}/episodes
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>Pages of episodes</returns>
		public async Task<PagingSimplifiedEpisodeObject> Get_a_shows_episodesAsync(string id, string market, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "shows/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/episodes&market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingSimplifiedEpisodeObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Several Tracks
		/// 
		/// Get Spotify catalog information for multiple tracks based on their Spotify IDs.
		/// 
		/// Get_several_tracks tracks
		/// </summary>
		/// <returns>A set of tracks</returns>
		public async Task<Get_several_tracksReturn> Get_several_tracksAsync(string market, string ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tracks?market=" + (market==null? "" : System.Uri.EscapeDataString(market))+"&ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Get_several_tracksReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Track
		/// 
		/// Get Spotify catalog information for a single track identified by its
		/// unique Spotify ID.
		/// 
		/// Get_track tracks/{id}
		/// </summary>
		/// <returns>A track</returns>
		public async Task<TrackObject> Get_trackAsync(string id, string market, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tracks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&market=" + (market==null? "" : System.Uri.EscapeDataString(market));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TrackObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Profile
		/// 
		/// Get public profile information about a Spotify user.
		/// 
		/// Get_users_profile users/{user_id}
		/// </summary>
		/// <returns>A user</returns>
		public async Task<PublicUserObject> Get_users_profileAsync(string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicUserObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Playlists
		/// 
		/// Get a list of the playlists owned or followed by a Spotify user.
		/// 
		/// Get_list_users_playlists users/{user_id}/playlists
		/// </summary>
		/// <param name="limit">Minimum: 0
		/// Maximum: 50
		// </param>
		/// <returns>A paged set of playlists</returns>
		public async Task<PagingPlaylistObject> Get_list_users_playlistsAsync(string user_id, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/playlists&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagingPlaylistObject>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Playlist
		/// 
		/// Create a playlist for a Spotify user. (The playlist will be empty until
		/// you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).)
		/// 
		/// Create_playlist users/{user_id}/playlists
		/// </summary>
		public async Task Create_playlistAsync(string user_id, Create_playlistPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"/playlists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Get_multiple_albumsReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="albums")]
		public AlbumObject[] Albums { get; set; }
	}
	
	public class Get_multiple_artistsReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public ArtistObject[] Artists { get; set; }
	}
	
	public class Get_an_artists_related_artistsReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public ArtistObject[] Artists { get; set; }
	}
	
	public class Get_an_artists_top_tracksReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public TrackObject[] Tracks { get; set; }
	}
	
	public class Get_several_audio_featuresReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="audio_features")]
		public AudioFeaturesObject[] Audio_features { get; set; }
	}
	
	public class Get_multiple_audiobooksReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="audiobooks")]
		public AudiobookObject[] Audiobooks { get; set; }
	}
	
	public class Get_categoriesReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public PagingObject Categories { get; set; }
	}
	
	public class Get_new_releasesReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="albums")]
		public PagingSimplifiedAlbumObject Albums { get; set; }
	}
	
	public class Get_several_chaptersReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="chapters")]
		public ChapterObject[] Chapters { get; set; }
	}
	
	public class Get_multiple_episodesReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="episodes")]
		public EpisodeObject[] Episodes { get; set; }
	}
	
	public class Get_available_marketsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="markets")]
		public string[] Markets { get; set; }
	}
	
	public class Save_albums_userPutBody
	{
		
		/// <summary>
		/// A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
	}
	
	public class Save_episodes_userPutBody
	{
		
		/// <summary>
		/// A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
	}
	
	public enum Unfollow_artists_usersType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		artist = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 1,
	}
	
	public class Get_followedReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public CursorPagingSimplifiedArtistObject Artists { get; set; }
	}
	
	public class Follow_artists_usersPutBody
	{
		
		/// <summary>
		/// A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids).
		///For example: `{ids:["74ASZWbe4lXaubB36ztrGX", "08td7MxkoHQkXnWAYD8d6Q"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
	}
	
	public class Transfer_a_users_playbackPutBody
	{
		
		/// <summary>
		/// A JSON array containing the ID of the device on which playback should be started/transferred.<br/>For example:`{device_ids:["74ASZWbe4lXaubB36ztrGX"]}`<br/>_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`_
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="device_ids")]
		public string[] Device_ids { get; set; }
		
		/// <summary>
		/// **true**: ensure playback happens on new device.<br/>**false** or not provided: keep the current playback state.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="play")]
		public System.Nullable<System.Boolean> Play { get; set; }
	}
	
	public class Get_a_users_available_devicesReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public DeviceObject[] Devices { get; set; }
	}
	
	public class Start_a_users_playbackPutBody
	{
		
		/// <summary>
		/// Optional. Spotify URI of the context to play.
		///Valid contexts are albums, artists & playlists.
		///`{context_uri:"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT"}`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context_uri")]
		public string Context_uri { get; set; }
		
		/// <summary>
		/// Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object
		///"position" is zero based and can’t be negative. Example: `"offset": {"position": 5}`
		///"uri" is a string representing the uri of the item to start at. Example: `"offset": {"uri": "spotify:track:1301WleyT98MSxVHPZCA6M"}`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		/// <summary>
		/// integer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position_ms")]
		public System.Nullable<System.Int32> Position_ms { get; set; }
		
		/// <summary>
		/// Optional. A JSON array of the Spotify track URIs to play.
		///For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh", "spotify:track:1301WleyT98MSxVHPZCA6M"]}`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uris")]
		public string[] Uris { get; set; }
	}
	
	public enum Get_users_top_artists_and_tracksType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		artists = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tracks = 1,
	}
	
	public class Save_tracks_userPutBody
	{
		
		/// <summary>
		/// A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
	}
	
	public class Change_playlist_detailsPutBody
	{
		
		/// <summary>
		/// If `true`, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. <br/>
		///_**Note**: You can only set `collaborative` to `true` on non-public playlists._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collaborative")]
		public System.Nullable<System.Boolean> Collaborative { get; set; }
		
		/// <summary>
		/// Value for playlist description as displayed in Spotify Clients and in the Web API.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The new name for the playlist, for example `"My New Playlist Title"`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If `true` the playlist will be public, if `false` it will be private.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
	}
	
	public class Follow_playlistPutBody
	{
		
		/// <summary>
		/// Defaults to `true`. If `true` the playlist will be included in user's public playlists, if `false` it will remain private.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
	}
	
	public class Remove_tracks_playlistReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="snapshot_id")]
		public string Snapshot_id { get; set; }
	}
	
	public class Add_tracks_to_playlistPostBody
	{
		
		/// <summary>
		/// The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0` ; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M"], "position": 3}`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		/// <summary>
		/// A JSON array of the [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to add. For example: `{"uris": ["spotify:track:4iV5W9uYEdYUVa79Axb7Rh","spotify:track:1301WleyT98MSxVHPZCA6M", "spotify:episode:512ojhOuo1ktJprKbVcKyQ"]}`<br/>A maximum of 100 items can be added in one request. _**Note**: if the `uris` parameter is present in the query string, any URIs listed here in the body will be ignored._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uris")]
		public string[] Uris { get; set; }
	}
	
	public class Reorder_or_replace_playlists_tracksPutBody
	{
		
		/// <summary>
		/// The position where the items should be inserted.<br/>To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.<br/>Examples:<br/>To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.<br/>To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insert_before")]
		public System.Nullable<System.Int32> Insert_before { get; set; }
		
		/// <summary>
		/// The amount of items to be reordered. Defaults to 1 if not set.<br/>The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.<br/>Example:<br/>To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range_length")]
		public System.Nullable<System.Int32> Range_length { get; set; }
		
		/// <summary>
		/// The position of the first item to be reordered.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range_start")]
		public System.Nullable<System.Int32> Range_start { get; set; }
		
		/// <summary>
		/// The playlist's snapshot ID against which you want to make the changes.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshot_id")]
		public string Snapshot_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uris")]
		public string[] Uris { get; set; }
	}
	
	public class Reorder_or_replace_playlists_tracksReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="snapshot_id")]
		public string Snapshot_id { get; set; }
	}
	
	public class Get_recommendation_genresReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="genres")]
		public string[] Genres { get; set; }
	}
	
	public enum SearchInclude_external
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		audio = 0,
	}
	
	public class SearchReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="albums")]
		public PagingSimplifiedAlbumObject Albums { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artists")]
		public PagingArtistObject Artists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="audiobooks")]
		public PagingSimplifiedAudiobookObject Audiobooks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="episodes")]
		public PagingSimplifiedEpisodeObject Episodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="playlists")]
		public PagingPlaylistObject Playlists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shows")]
		public PagingSimplifiedShowObject Shows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public PagingTrackObject Tracks { get; set; }
	}
	
	public class Get_multiple_showsReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shows")]
		public SimplifiedShowObject[] Shows { get; set; }
	}
	
	public class Get_several_tracksReturn
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public TrackObject[] Tracks { get; set; }
	}
	
	public class Create_playlistPostBody
	{
		
		/// <summary>
		/// Defaults to `false`. If `true` the playlist will be collaborative. _**Note**: to create a collaborative playlist you must also set `public` to `false`. To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](/documentation/web-api/concepts/scopes/#list-of-scopes)._
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collaborative")]
		public System.Nullable<System.Boolean> Collaborative { get; set; }
		
		/// <summary>
		/// value for playlist description as displayed in Spotify Clients and in the Web API.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The name for the new playlist, for example `"Your Coolest Playlist"`. This name does not need to be unique; a user may have several playlists with the same name.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Defaults to `true`. If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](/documentation/web-api/concepts/scopes/#list-of-scopes)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public")]
		public System.Nullable<System.Boolean> Public { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
