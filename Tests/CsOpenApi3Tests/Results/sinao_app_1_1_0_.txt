//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessInvitation
	{
		
		[System.Runtime.Serialization.DataMember(Name="app")]
		public App App { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public PolicyProfile Profile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipient_user")]
		public User Recipient_user { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sender_user")]
		public User Sender_user { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="used_at")]
		public System.Nullable<System.DateTimeOffset> Used_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity")]
		public System.Nullable<System.DateTimeOffset> Validity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class App
	{
		
		[System.Runtime.Serialization.DataMember(Name="admin")]
		public User Admin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string[] Config { get; set; }
		
		/// <summary>
		/// Specific hostname for this app. To use default URI, null this param
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostname_alias")]
		public string Hostname_alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_access_at")]
		public System.Nullable<System.DateTimeOffset> Last_access_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_user")]
		public User Last_user { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization")]
		public SinaoOrganization Organization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public UserPolicy[] Policies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public Subscription Subscription { get; set; }
		
		/// <summary>
		/// URI to this app. Can be overwrited by hostname_alias param
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserPolicy
	{
		
		[System.Runtime.Serialization.DataMember(Name="app")]
		public App App { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policy_profile")]
		public PolicyProfile Policy_profile { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homepage")]
		public string Homepage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="restricted")]
		public System.Nullable<System.Boolean> Restricted { get; set; }
		
		/// <summary>
		/// Routes list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rights")]
		public string[] Rights { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public System.Nullable<System.Int32> Visible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subscription
	{
		
		[System.Runtime.Serialization.DataMember(Name="access_level")]
		public System.Nullable<SubscriptionAccess_level> Access_level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payment_card")]
		public string Payment_card { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payment_failed_count")]
		public System.Nullable<System.Int32> Payment_failed_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period_ending_date")]
		public System.Nullable<System.DateTimeOffset> Period_ending_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period_remaining_days")]
		public System.Nullable<System.Int32> Period_remaining_days { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period_starting_date")]
		public System.Nullable<System.DateTimeOffset> Period_starting_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plan_color")]
		public string Plan_color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plan_name")]
		public string Plan_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripe_customer_id")]
		public string Stripe_customer_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripe_plan_id")]
		public string Stripe_plan_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripe_subscription_id")]
		public string Stripe_subscription_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SubscriptionAccess_level
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		full = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		start = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pro = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		restricted = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		[System.Runtime.Serialization.DataMember(Name="accounting_number")]
		public string Accounting_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editable")]
		public System.Nullable<System.Boolean> Editable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_associate")]
		public System.Nullable<System.Boolean> Is_associate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_cashflow")]
		public System.Nullable<System.Boolean> Is_cashflow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_purchase")]
		public System.Nullable<System.Boolean> Is_purchase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_sales")]
		public System.Nullable<System.Boolean> Is_sales { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_various")]
		public System.Nullable<System.Boolean> Is_various { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="journalcode")]
		public string Journalcode { get; set; }
		
		/// <summary>
		/// keywords comma separated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="need_charge")]
		public System.Nullable<System.Boolean> Need_charge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="need_employee")]
		public System.Nullable<System.Boolean> Need_employee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="need_invoice")]
		public System.Nullable<System.Boolean> Need_invoice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="technical_name")]
		public string Technical_name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attachment
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachable_id")]
		public string Attachable_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachable_type")]
		public string Attachable_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_url")]
		public string File_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Balance
	{
		
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public System.Nullable<System.Boolean> Completed { get; set; }
		
		/// <summary>
		/// Initial balance total due
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="due")]
		public System.Nullable<System.Int32> Due { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meaning")]
		public System.Nullable<BalanceMeaning> Meaning { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paid")]
		public System.Nullable<System.Int32> Paid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remaining")]
		public System.Nullable<System.Int32> Remaining { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BalanceMeaning
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		remaining = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		overpaid = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BankDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="bic")]
		public string Bic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CashflowSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="account_type")]
		public string Account_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="balance_amount")]
		public System.Nullable<System.Int32> Balance_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Int32> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifiant")]
		public string Identifiant { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_cashflow_source")]
		public CashflowSource Parent_cashflow_source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactOrganization
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactPerson
	{
	}
	
	/// <summary>
	/// A card for an establishment contact informations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EstablishmentIdentity
	{
		
		[System.Runtime.Serialization.DataMember(Name="emails")]
		public string[] Emails { get; set; }
		
		/// <summary>
		/// The identifier of the establishment can be absent if the data comes from the INSEE database. In this case, it is not editable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Establishment name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Establishment number (french NIC)
		/// Pattern: /^[0-9]{5}$/i
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nic")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/^[0-9]{5}$/i")]
		public string Nic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phones")]
		public string[] Phones { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="place")]
		public EstablishmentIdentityPlace Place { get; set; }
	}
	
	public class EstablishmentIdentityPlace
	{
		
		[System.Runtime.Serialization.DataMember(Name="administrative_area_level1")]
		public string Administrative_area_level1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="administrative_area_level2")]
		public string Administrative_area_level2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="administrative_area_level3")]
		public string Administrative_area_level3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryiso2")]
		public string Countryiso2 { get; set; }
		
		/// <summary>
		/// When obtaining data, the formatted address is automatically composed from the other properties of the object. When updating data, the formatted address can be used to automatically hydrate the other properties from Google Maps
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formatted_address")]
		public string Formatted_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Int32> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Int32> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="route")]
		public string Route { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="route2")]
		public string Route2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street_number")]
		public string Street_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sublocality")]
		public string Sublocality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entries_count")]
		public System.Nullable<System.Int32> Entries_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period_end")]
		public System.Nullable<System.DateTimeOffset> Period_end { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period_start")]
		public System.Nullable<System.DateTimeOffset> Period_start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_credit")]
		public System.Nullable<System.Int32> Total_credit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_debit")]
		public System.Nullable<System.Int32> Total_debit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExportFile
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downloaded_at")]
		public System.Nullable<System.DateTimeOffset> Downloaded_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entries_count")]
		public System.Nullable<System.Int32> Entries_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_size")]
		public System.Nullable<System.Int32> File_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="file_url")]
		public string File_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period_end")]
		public System.Nullable<System.DateTimeOffset> Period_end { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period_start")]
		public System.Nullable<System.DateTimeOffset> Period_start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Invoice : SalesDocumentContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="avoid_of")]
		public Invoice Avoid_of { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="delivered_at")]
		public System.Nullable<System.DateTimeOffset> Delivered_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downpayments")]
		public Invoice[] Downpayments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice_of")]
		public Quote Invoice_of { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paid_at")]
		public System.Nullable<System.DateTimeOffset> Paid_at { get; set; }
		
		/// <summary>
		/// Accepted methods of payment for this invoice. Methods comma separated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_methods")]
		public string Payment_methods { get; set; }
		
		/// <summary>
		/// Days count before considere this invoice as late
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_period")]
		public System.Nullable<System.Int32> Payment_period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_recurring_invoice")]
		public RecurringInvoice Related_recurring_invoice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sepa_direct_debit_exported_at")]
		public System.Nullable<System.DateTimeOffset> Sepa_direct_debit_exported_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<InvoiceStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InvoiceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		final = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		paid = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JsonWebToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public System.Nullable<System.Int32> Expires_in { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public string Token_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationIdentity
	{
		
		/// <summary>
		/// Company name for billing
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing_name")]
		public string Billing_name { get; set; }
		
		/// <summary>
		/// Capital in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capital")]
		public System.Nullable<System.Int32> Capital { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closeaccounting_period")]
		public string Closeaccounting_period { get; set; }
		
		/// <summary>
		/// French NAF Code
		/// Pattern: /^[0-9]{4}[a-z]$/i
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code_naf")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"/^[0-9]{4}[a-z]$/i")]
		public string Code_naf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country_iso2")]
		public string Country_iso2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dissolution_date")]
		public System.Nullable<System.DateOnly> Dissolution_date { get; set; }
		
		/// <summary>
		/// List of contact establishments. Some establishments come from the public database (INSEE), they cannot be edited and have no ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="establishments")]
		public EstablishmentIdentity[] Establishments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="founding_date")]
		public System.Nullable<System.DateOnly> Founding_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="founding_location")]
		public string Founding_location { get; set; }
		
		/// <summary>
		/// French. Tribunal de commerce
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="greffe")]
		public string Greffe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legal_form")]
		public string Legal_form { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// Company name visible on the app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unique National Id, format by country. **In France : [0-9]{9} with last number as security key.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="national_id")]
		public string National_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number_of_employees")]
		public string Number_of_employees { get; set; }
		
		/// <summary>
		/// French. Registre du Commerce et des Sociétés
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rcs")]
		public string Rcs { get; set; }
		
		/// <summary>
		/// Free variable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slogan")]
		public string Slogan { get; set; }
		
		/// <summary>
		/// International Tax Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_id")]
		public string Tax_id { get; set; }
		
		/// <summary>
		/// European VAT Id. **In France : FR [0-9]{2} [0-9]{9}**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vat_id")]
		public string Vat_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat_system")]
		public string Vat_system { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Payment
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Invoice Document { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_type")]
		public System.Nullable<PaymentDocument_type> Document_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<PaymentSource> Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PaymentDocument_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sales = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purchase = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PaymentSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bank = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cashdesk = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creditnote = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PersonIdentity
	{
		
		/// <summary>
		/// Civility is the lastname prefix
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="civility")]
		public string Civility { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="establishments")]
		public EstablishmentIdentity[] Establishments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string[] Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Product
	{
		
		[System.Runtime.Serialization.DataMember(Name="accounting_number")]
		public string Accounting_number { get; set; }
		
		/// <summary>
		/// Price without taxes in milli-cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_accurately")]
		public System.Nullable<System.Int32> Amount_accurately { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ProductCategory Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// Is a service or a product ?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intangible")]
		public System.Nullable<System.Boolean> Intangible { get; set; }
		
		/// <summary>
		/// Product life time in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifetime")]
		public System.Nullable<System.Int32> Lifetime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string[] Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the quantity: days, liters, m2, m3...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity_name")]
		public string Quantity_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Unity, hours, days, meters, liters..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unity")]
		public string Unity { get; set; }
		
		/// <summary>
		/// VAT rate in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vat_percent")]
		public System.Nullable<System.Int32> Vat_percent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public ProductCategory Parent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="products")]
		public Product Products { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductStock
	{
		
		[System.Runtime.Serialization.DataMember(Name="bar_code")]
		public System.Nullable<System.Int32> Bar_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cost_amount")]
		public System.Nullable<System.Int32> Cost_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entered_at")]
		public System.Nullable<System.Int32> Entered_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expired_at")]
		public System.Nullable<System.Int32> Expired_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="initial_quantity")]
		public System.Nullable<System.Int32> Initial_quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public System.Nullable<System.Int32> Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public Product Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_stocks_movements")]
		public ProductStocksMovement[] Product_stocks_movements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="purchase")]
		public Purchase Purchase { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity_in")]
		public System.Nullable<System.Int32> Quantity_in { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity_out")]
		public System.Nullable<System.Int32> Quantity_out { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sales_lines")]
		public SalesLine[] Sales_lines { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="use_duration")]
		public System.Nullable<System.Int32> Use_duration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductStocksMovement
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="future_return_date")]
		public System.Nullable<System.DateTimeOffset> Future_return_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invoice")]
		public Invoice Invoice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moved_at")]
		public System.Nullable<System.DateTimeOffset> Moved_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_stock")]
		public ProductStock Product_stock { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ProductStocksMovementType> Type { get; set; }
		
		/// <summary>
		/// Usage duration in seconds
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="use_duration")]
		public System.Nullable<System.Int32> Use_duration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ProductStocksMovementType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		buy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sell = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		back = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		temporaryexit = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		destruct = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesLine
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<SalesLineAction> Action { get; set; }
		
		/// <summary>
		/// Price without taxes in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Price without taxes in cents + 3 decimales, example : 9899000 = 98,99€ || 1 = 0,00001€
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_accurately")]
		public System.Nullable<System.Int32> Amount_accurately { get; set; }
		
		/// <summary>
		/// Used when there is a difference of 1 cent when starting from the amount with taxes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_with_taxes")]
		public System.Nullable<System.Boolean> Amount_with_taxes { get; set; }
		
		/// <summary>
		/// Description of the product or service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public SalesLineDiscount Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Invoice Document { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string[] Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public Product Product { get; set; }
		
		/// <summary>
		/// Quantity of product or service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stock")]
		public ProductStock Stock { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="style")]
		public SalesLineStyle Style { get; set; }
		
		/// <summary>
		/// Information about total quantity to sell, only for display
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_quantity")]
		public string Total_quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totals")]
		public SalesLineTotals Totals { get; set; }
		
		/// <summary>
		/// Unity, hours, days, meters, liters..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unity")]
		public string Unity { get; set; }
		
		/// <summary>
		/// VAT rate in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vat_percent")]
		public System.Nullable<System.Int32> Vat_percent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SalesLineAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sell = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rent = 1,
	}
	
	public class SalesLineDiscount
	{
		
		/// <summary>
		/// Use discount value for fix discount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Use discount percent for variable discount
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percent")]
		public System.Nullable<System.Int32> Percent { get; set; }
	}
	
	public class SalesLineStyle
	{
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Int32> Position { get; set; }
		
		/// <summary>
		/// Section is an Order with a position like SectionId
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="section_id")]
		public System.Nullable<System.Int32> Section_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SalesLineStyleType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SalesLineStyleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		section = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		description = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		product = 2,
	}
	
	public class SalesLineTotals
	{
		
		[System.Runtime.Serialization.DataMember(Name="due")]
		public System.Nullable<System.Int32> Due { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public System.Nullable<System.Int32> Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public System.Nullable<System.Int32> Taxes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Purchase
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public Account Account { get; set; }
		
		/// <summary>
		/// Date on which the accounting entries were generated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accounted_at")]
		public System.Nullable<System.DateTimeOffset> Accounted_at { get; set; }
		
		/// <summary>
		/// Amount without taxes in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Amount without taxes in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_net_foreign_currency")]
		public System.Nullable<System.Int32> Amount_net_foreign_currency { get; set; }
		
		/// <summary>
		/// Amount of taxes in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_tax")]
		public System.Nullable<System.Int32> Amount_tax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public Balance Balance { get; set; }
		
		/// <summary>
		/// Date of invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billed_at")]
		public System.Nullable<System.DateTimeOffset> Billed_at { get; set; }
		
		/// <summary>
		/// free field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Date on which the account, supplier, amount and billed_at fields were completed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed_at")]
		public System.Nullable<System.DateTimeOffset> Completed_at { get; set; }
		
		/// <summary>
		/// Amount of taxes in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foreign_currency")]
		public string Foreign_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The payment deadline has passed and full payment has not been received
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_late")]
		public System.Nullable<System.Boolean> Is_late { get; set; }
		
		/// <summary>
		/// Md5 hash of the initial file sent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5")]
		public string Md5 { get; set; }
		
		/// <summary>
		/// Date on which the invoice was fully paid
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paid_at")]
		public System.Nullable<System.DateTimeOffset> Paid_at { get; set; }
		
		/// <summary>
		/// Payment Account number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_account_number")]
		public string Payment_account_number { get; set; }
		
		/// <summary>
		/// Payment deadline
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_deadline_at")]
		public System.Nullable<System.DateTimeOffset> Payment_deadline_at { get; set; }
		
		/// <summary>
		/// Payment IBAN
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_iban")]
		public string Payment_iban { get; set; }
		
		/// <summary>
		/// Payment Routing number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_routing_number")]
		public string Payment_routing_number { get; set; }
		
		/// <summary>
		/// Payment SWIFT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_swift")]
		public string Payment_swift { get; set; }
		
		/// <summary>
		/// Purchase picture
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public string Picture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PurchaseStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplier")]
		public ContactOrganization Supplier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplier_name")]
		public string Supplier_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Name visible on the accounting entries of the purchase
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// VAT breakdown
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vat_detail")]
		public string Vat_detail { get; set; }
		
		/// <summary>
		/// In France, depending on the type of purchase (product or service), VAT is not payable at the same time. VAT on products is due on the date of the invoice, while VAT on services is due on the date of payment thereof
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vat_repayment")]
		public System.Nullable<PurchaseVat_repayment> Vat_repayment { get; set; }
		
		/// <summary>
		/// Date the payment will be late. Is `false` if payment has been made
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="will_be_late_at")]
		public System.Nullable<System.DateTimeOffset> Will_be_late_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PurchaseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="new")]
		_new = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		paid = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PurchaseVat_repayment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		payment = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		billing = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PurchaseLine
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public Account Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product")]
		public Product Product { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Quote : SalesDocumentContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="commercialvalidity_deadline")]
		public System.Nullable<System.DateTimeOffset> Commercialvalidity_deadline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<QuoteStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum QuoteStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		draft = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		waiting = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		goodforagreement = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		refused = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transformed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Reconciliation
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecurringInvoice : SalesDocumentContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public SalesLine[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public System.Nullable<System.Int32> Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount_end_at")]
		public System.Nullable<System.DateTimeOffset> Discount_end_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount_mode")]
		public string Discount_mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount_start_at")]
		public System.Nullable<System.DateTimeOffset> Discount_start_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_at")]
		public System.Nullable<System.DateTimeOffset> End_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequency_count")]
		public System.Nullable<System.Int32> Frequency_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequency_duration")]
		public string Frequency_duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_invoice_at")]
		public System.Nullable<System.DateTimeOffset> Next_invoice_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orders_plan")]
		public RecurringInvoiceOrders_plan[] RecurringInvoiceOrders_plan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="saving_status")]
		public string Saving_status { get; set; }
	}
	
	public class RecurringInvoiceOrders_plan
	{
		
		[System.Runtime.Serialization.DataMember(Name="end_at")]
		public System.Nullable<System.DateTimeOffset> End_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public System.Nullable<System.Int32> Model { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Relationship
	{
		
		[System.Runtime.Serialization.DataMember(Name="accounting_infos")]
		public RelationshipAccounting_infos Accounting_infos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importance_level")]
		public System.Nullable<System.Int32> Importance_level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_customer")]
		public System.Nullable<System.Boolean> Is_customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_notifying")]
		public System.Nullable<System.Boolean> Is_notifying { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_prospect")]
		public System.Nullable<System.Boolean> Is_prospect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_supplier")]
		public System.Nullable<System.Boolean> Is_supplier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string[] Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rating")]
		public System.Nullable<System.Int32> Rating { get; set; }
	}
	
	public class RelationshipAccounting_infos
	{
		
		[System.Runtime.Serialization.DataMember(Name="balance_initial_amount")]
		public System.Nullable<System.Int32> Balance_initial_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer_id")]
		public string Customer_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supplier_id")]
		public string Supplier_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Rule
	{
		
		/// <summary>
		/// [ [property, comparator, value], ... ]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public string[] Conditions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="on_event")]
		public string On_event { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SEPAMandate
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public User Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bic")]
		public string Bic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ContactPerson Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer_name")]
		public string Customer_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="electronic_signature")]
		public string Electronic_signature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_first")]
		public System.Nullable<System.Int32> Is_first { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debit_amount")]
		public System.Nullable<System.Int32> Last_debit_amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debit_at")]
		public System.Nullable<System.DateTimeOffset> Last_debit_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_debit_id")]
		public System.Nullable<System.Int32> Last_debit_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logs_sepa_direct_debits")]
		public string Logs_sepa_direct_debits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mandate_id")]
		public System.Nullable<System.Int32> Mandate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="old_mandate_id")]
		public System.Nullable<System.Int32> Old_mandate_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signed_at")]
		public System.Nullable<System.DateTimeOffset> Signed_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesDocumentContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public string[] Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public User Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public Balance Balance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bank_detail")]
		public BankDetails Bank_detail { get; set; }
		
		/// <summary>
		/// Columns titles. Remove or NULL a property to hide a column
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public SalesDocumentContractColumns Columns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact_infos")]
		public SalesDocumentContractContact_infos Contact_infos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public SalesLine[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public ContactPerson Customer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public SalesDocumentContractDiscount Discount { get; set; }
		
		/// <summary>
		/// Amount of deposit required on the quote. On an invoice, this deposit represents a cash advance to be deducted from the payment but not from the amount of the invoice
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downpayment_request")]
		public SalesDocumentContractDownpayment_request Downpayment_request { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email_sent_at")]
		public System.Nullable<System.DateTimeOffset> Email_sent_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imported_at")]
		public System.Nullable<System.DateTimeOffset> Imported_at { get; set; }
		
		/// <summary>
		/// Legal mentions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legal_notice")]
		public string Legal_notice { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string[] Metadata { get; set; }
		
		/// <summary>
		/// Private note
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Free variable not display in document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="third_account")]
		public SalesDocumentContractThird_account Third_account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totals")]
		public SalesDocumentContractTotals Totals { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validated_at")]
		public System.Nullable<System.DateTimeOffset> Validated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat_exemption")]
		public SalesDocumentContractVat_exemption Vat_exemption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="written_at")]
		public System.Nullable<System.DateTimeOffset> Written_at { get; set; }
	}
	
	public class SalesDocumentContractColumns
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="designation")]
		public string Designation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public string Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="due")]
		public string Due { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info_total_quantity")]
		public string Info_total_quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity_name")]
		public string Quantity_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public string Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat_percent")]
		public string Vat_percent { get; set; }
	}
	
	public class SalesDocumentContractContact_infos
	{
		
		/// <summary>
		/// Customer addresss (street number and address) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Customer address subline obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Customer address location (city, postal code and country) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Customer name obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SalesDocumentContractContact_infosType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SalesDocumentContractContact_infosType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		organization = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		person = 1,
	}
	
	public class SalesDocumentContractDiscount
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percent")]
		public System.Nullable<System.Int32> Percent { get; set; }
		
		/// <summary>
		/// Value calculated by amount and percent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	public class SalesDocumentContractDownpayment_request
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percent")]
		public System.Nullable<System.Int32> Percent { get; set; }
	}
	
	public class SalesDocumentContractThird_account
	{
		
		/// <summary>
		/// Third account addresss (street number and address) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Third account address location (city, postal code and country) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Third account name obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SalesDocumentContractContact_infosType Type { get; set; }
	}
	
	public class SalesDocumentContractTotals
	{
		
		[System.Runtime.Serialization.DataMember(Name="due")]
		public System.Nullable<System.Int32> Due { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public SalesDocumentContractTotalsSubtotal Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxes")]
		public SalesDocumentContractTotalsTaxes Taxes { get; set; }
	}
	
	public class SalesDocumentContractTotalsSubtotal
	{
		
		[System.Runtime.Serialization.DataMember(Name="by_account")]
		public string[] By_account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by_vat")]
		public string[] By_vat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class SalesDocumentContractTotalsTaxes
	{
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat")]
		public SalesDocumentContractTotalsTaxesVat Vat { get; set; }
	}
	
	public class SalesDocumentContractTotalsTaxesVat
	{
		
		[System.Runtime.Serialization.DataMember(Name="by_account")]
		public string[] By_account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="by_vat")]
		public string[] By_vat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class SalesDocumentContractVat_exemption
	{
		
		[System.Runtime.Serialization.DataMember(Name="article")]
		public string Article { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempted")]
		public System.Nullable<System.Boolean> Exempted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SalesDocumentModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="json")]
		public SalesLine[] Json { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SinaoOrganization : OrganizationIdentity
	{
		
		[System.Runtime.Serialization.DataMember(Name="app")]
		public App App { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Transaction
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public User Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cashflow_source")]
		public CashflowSource Cashflow_source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactPerson Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted_at")]
		public System.Nullable<System.DateTimeOffset> Deleted_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public System.Nullable<System.Int32> Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public System.Nullable<System.Int32> Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lettered_at")]
		public System.Nullable<System.DateTimeOffset> Lettered_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string[] Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public System.Nullable<System.Int32> Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="received_at")]
		public System.Nullable<System.DateTimeOffset> Received_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class URSSAFMandate
	{
		
		[System.Runtime.Serialization.DataMember(Name="bic")]
		public string Bic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User : PersonIdentity
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// Email used as login
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_access_at")]
		public System.Nullable<System.DateTimeOffset> Last_access_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public string[] Metadata { get; set; }
		
		/// <summary>
		/// Min length: 8
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password_is_undefined")]
		public System.Nullable<System.Boolean> Password_is_undefined { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List apps
		/// Get all apps
		/// App_list apps
		/// </summary>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>search results</returns>
		public async Task<App[]> App_listAsync(int limit, string search, App_listFilters[] filters, App_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps?limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an app
		/// Create a new `App` with their organization profile
		/// App_create apps
		/// </summary>
		/// <param name="organization_name">Organization name. Minimum 3 characters with 1 alpha</param>
		/// <returns>Success</returns>
		public async Task<App> App_createAsync(string organization_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps?organization_name=" + (organization_name==null? "" : System.Uri.EscapeDataString(organization_name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an invitation from token
		/// Remove an invitation from token
		/// App_policies_registration_delete apps/access/invite/{accessToken}
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<ApiResponse> App_policies_registration_deleteAsync(string accessToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/access/invite/"+ (accessToken==null? "" : System.Uri.EscapeDataString(accessToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get invitation informations
		/// Get infos of an invitation request. Returns an `AccessInvitation` object
		/// App_policies_registration_get apps/access/invite/{accessToken}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AccessInvitation> App_policies_registration_getAsync(string accessToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/access/invite/"+ (accessToken==null? "" : System.Uri.EscapeDataString(accessToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessInvitation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an User by invitation
		/// Registration for an invited user
		/// App_policies_registration_register apps/access/invite/{accessToken}/register
		/// </summary>
		/// <param name="password">Password for account</param>
		/// <param name="firstname">First name of user before account creation / account link</param>
		/// <param name="lastname">Last name of user before account creation / account link</param>
		/// <param name="cgu">User has valided CGU ?</param>
		/// <returns>Success</returns>
		public async Task<User> App_policies_registration_registerAsync(string accessToken, string password, string firstname, string lastname, bool cgu, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/access/invite/"+ (accessToken==null? "" : System.Uri.EscapeDataString(accessToken))+"/register&password=" + (password==null? "" : System.Uri.EscapeDataString(password))+"&firstname=" + (firstname==null? "" : System.Uri.EscapeDataString(firstname))+"&lastname=" + (lastname==null? "" : System.Uri.EscapeDataString(lastname))+"&cgu="+cgu;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an app
		/// Get app informations
		/// App_get apps/{appId}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<App> App_getAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get policies for an app
		/// Get all policies for an app. Manage access for users
		/// App_policies_list apps/{appId}/access
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<PolicyProfile[]> App_policies_listAsync(int appId, int limit, string search, App_policies_listFilters[] filters, App_policies_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/access?limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PolicyProfile[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List invitations
		/// Get all sent invitations
		/// App_policies_invitations_list apps/{appId}/access/invite
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<AccessInvitation[]> App_policies_invitations_listAsync(int appId, int limit, string search, App_policies_invitations_listFilters[] filters, App_policies_invitations_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/access/invite?limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessInvitation[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invite an user
		/// Invites a user to access the organization panel
		/// App_policies_invitations_create apps/{appId}/access/invite
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="email">Email for invitation. Will be used to account creation or account matching with an existing user</param>
		/// <param name="policy_profile_id">Profile for policies set</param>
		/// <param name="firstname">First name of user before account creation / account link</param>
		/// <param name="lastname">Last name of user before account creation / account link</param>
		/// <param name="civility">Last name of user before account creation / account link</param>
		/// <param name="password">Password for new user</param>
		/// <returns>Success</returns>
		public async Task<AccessInvitation> App_policies_invitations_createAsync(int appId, string email, int policy_profile_id, string firstname, string lastname, string civility, string password, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/access/invite?email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&policy_profile_id="+policy_profile_id+"&firstname=" + (firstname==null? "" : System.Uri.EscapeDataString(firstname))+"&lastname=" + (lastname==null? "" : System.Uri.EscapeDataString(lastname))+"&civility=" + (civility==null? "" : System.Uri.EscapeDataString(civility))+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessInvitation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an invitation
		/// Remove an invitation
		/// App_policies_invitations_delete apps/{appId}/access/invite/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>successful operation</returns>
		public async Task<ApiResponse> App_policies_invitations_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/access/invite/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get profiles
		/// Get all profiles
		/// App_policies_profiles_list apps/{appId}/access/profiles
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<PolicyProfile[]> App_policies_profiles_listAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/access/profiles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PolicyProfile[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete police for an user
		/// Cancel access for an user on an app
		/// App_policies_delete apps/{appId}/access/{userId}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_policies_deleteAsync(int appId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/access/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get police for an user
		/// Find policy profile for an user on an app
		/// App_policies_get apps/{appId}/access/{userId}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<PolicyProfile> App_policies_getAsync(int appId, string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/access/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PolicyProfile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update police for an user
		/// Update police for an user on an app
		/// App_policies_update apps/{appId}/access/{userId}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<PolicyProfile> App_policies_updateAsync(int appId, string userId, int policy_profile_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/access/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"&policy_profile_id="+policy_profile_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PolicyProfile>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List categories
		/// App_accounting_categories_list apps/{appId}/accountcategories/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<AccountCategory[]> App_accounting_categories_listAsync(int appId, int offset, int limit, string search, App_accounting_categories_listFilters[] filters, App_accounting_categories_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/accountcategories/?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountCategory[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a category
		/// App_accounting_categories_create apps/{appId}/accountcategories/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<AccountCategory> App_accounting_categories_createAsync(int appId, string name, string description, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/accountcategories/?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountCategory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a category
		/// App_accounting_categories_delete apps/{appId}/accountcategories/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID</param>
		/// <returns>Success</returns>
		public async Task App_accounting_categories_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/accountcategories/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a category
		/// App_accounting_categories_get apps/{appId}/accountcategories/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID</param>
		/// <returns>Success</returns>
		public async Task<AccountCategory> App_accounting_categories_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/accountcategories/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountCategory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a category
		/// App_accounting_categories_update apps/{appId}/accountcategories/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID</param>
		/// <returns>Success</returns>
		public async Task<AccountCategory> App_accounting_categories_updateAsync(int appId, int id, string name, string description, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/accountcategories/"+id+"?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountCategory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List accounting entries
		/// App_accounting_entries_list apps/{appId}/accounting_entries/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<Account[]> App_accounting_entries_listAsync(int appId, int offset, int limit, string search, App_accounting_entries_listFilters[] filters, App_accounting_entries_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/accounting_entries/?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Account
		/// App_accounting_accounts_list apps/{appId}/accounts/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<Account[]> App_accounting_accounts_listAsync(int appId, int offset, int limit, string search, App_accounting_accounts_listFilters[] filters, App_accounting_accounts_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/accounts/?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Account
		/// App_accounting_accounts_create apps/{appId}/accounts/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<Account> App_accounting_accounts_createAsync(int appId, string journalcode, string name, string description, string keywords, string accounting_number, bool is_cashflow, bool is_sales, bool is_purchase, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/accounts/?journalcode=" + (journalcode==null? "" : System.Uri.EscapeDataString(journalcode))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&keywords=" + (keywords==null? "" : System.Uri.EscapeDataString(keywords))+"&accounting_number=" + (accounting_number==null? "" : System.Uri.EscapeDataString(accounting_number))+"&is_cashflow="+is_cashflow+"&is_sales="+is_sales+"&is_purchase="+is_purchase;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create many accounts
		/// Create many accounts
		/// App_accounting_accounts_batch apps/{appId}/accounts/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="data">List of accounts. Without ID for insert</param>
		/// <returns>Success</returns>
		public async Task<Account> App_accounting_accounts_batchAsync(int appId, Account[] data, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/accounts/batch?"+string.Join("&", data.Select(z => $"data={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a Account
		/// App_accounting_accounts_delete apps/{appId}/accounts/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of Account</param>
		/// <returns>Success</returns>
		public async Task App_accounting_accounts_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Account
		/// App_accounting_accounts_get apps/{appId}/accounts/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of Account</param>
		/// <returns>Success</returns>
		public async Task<Account> App_accounting_accounts_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Account
		/// App_accounting_accounts_update apps/{appId}/accounts/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of Account</param>
		/// <returns>Success</returns>
		public async Task<Account> App_accounting_accounts_updateAsync(int appId, int id, string journalcode, string name, string description, string keywords, string accounting_number, bool is_cashflow, bool is_sales, bool is_purchase, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/accounts/"+id+"?journalcode=" + (journalcode==null? "" : System.Uri.EscapeDataString(journalcode))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&keywords=" + (keywords==null? "" : System.Uri.EscapeDataString(keywords))+"&accounting_number=" + (accounting_number==null? "" : System.Uri.EscapeDataString(accounting_number))+"&is_cashflow="+is_cashflow+"&is_sales="+is_sales+"&is_purchase="+is_purchase;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all api keys
		/// App_apikeys_list apps/{appId}/apikeys
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<string> App_apikeys_listAsync(int appId, int limit, string search, App_apikeys_listFilters[] filters, App_apikeys_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/apikeys?limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create new API key
		/// App_apikeys_create apps/{appId}/apikeys
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="name">Key name</param>
		/// <param name="api_partner_id">Partner ID for official connexion</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_apikeys_createAsync(int appId, string name, int api_partner_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/apikeys?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&api_partner_id="+api_partner_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove an api key
		/// App_apikeys_delete apps/{appId}/apikeys/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Automatically added</param>
		/// <returns>Success</returns>
		public async Task App_apikeys_deleteAsync(int appId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/apikeys/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all api parners
		/// App_apipartners_list apps/{appId}/apipartners
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<string> App_apipartners_listAsync(int appId, int limit, string search, App_apipartners_listFilters[] filters, App_apipartners_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/apipartners?limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List attachments
		/// Get list of attachments
		/// App_attachments_list apps/{appId}/attachments
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<Attachment[]> App_attachments_listAsync(int appId, int offset, int limit, string search, App_attachments_listFilters[] filters, App_attachments_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/attachments?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attach a file on an object
		/// App_attachments_create apps/{appId}/attachments
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="type">Object to attach file</param>
		/// <param name="attachable_id">Object id</param>
		/// <param name="file">File to attach</param>
		/// <returns>Success</returns>
		public async Task App_attachments_createAsync(int appId, App_attachments_createType type, int attachable_id, string file, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/attachments?type=" + type+"&attachable_id="+attachable_id+"&file=" + (file==null? "" : System.Uri.EscapeDataString(file));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recreate S.A.P attestations
		/// App_sapAttestations_generateSapAttestations apps/{appId}/attachments
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="year">year number to generate</param>
		/// <returns>Success</returns>
		public async Task App_sapAttestations_generateSapAttestationsAsync(int appId, int year, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/attachments?year="+year;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a list of attachments in pdf into a .zip file
		/// App_attachments_download apps/{appId}/attachments/download
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="ids">Array of attachments id</param>
		/// <param name="type">Type of attachment</param>
		/// <returns>Success</returns>
		public async Task App_attachments_downloadAsync(int appId, string ids, App_attachments_downloadType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/attachments/download?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a list of SAP attestations in pdf into a .zip file
		/// App_sapAttestations_download apps/{appId}/attachments/sap-download
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="ids">Array of attachments id</param>
		/// <param name="type">Type of attachment</param>
		/// <returns>Success</returns>
		public async Task App_sapAttestations_downloadAsync(int appId, string ids, App_attachments_downloadType type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/attachments/sap-download?ids=" + (ids==null? "" : System.Uri.EscapeDataString(ids))+"&type=" + type;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detach a file from id
		/// App_attachments_delete apps/{appId}/attachments/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Attachment id</param>
		/// <returns>Success</returns>
		public async Task App_attachments_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/attachments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get attachment by id
		/// App_attachments_get apps/{appId}/attachments/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Attachment id</param>
		/// <returns>Success</returns>
		public async Task App_attachments_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/attachments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download the attachment as pdf
		/// App_attachments_RedirectToPublicUrl apps/{appId}/attachments/{id}/pdf
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Attachment id to download</param>
		/// <param name="random">random number to force fresh pdf</param>
		/// <returns>Success</returns>
		public async Task App_attachments_RedirectToPublicUrlAsync(int appId, int id, int random, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/attachments/"+id+"/pdf?random="+random;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List BankDetails
		/// App_documents_sales_bankdetails_list apps/{appId}/bankdetails
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<BankDetails[]> App_documents_sales_bankdetails_listAsync(int appId, int offset, int limit, string search, App_documents_sales_bankdetails_listFilters[] filters, App_documents_sales_bankdetails_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/bankdetails?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankDetails[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a BankDetails
		/// App_documents_sales_bankdetails_create apps/{appId}/bankdetails
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<BankDetails> App_documents_sales_bankdetails_createAsync(int appId, string name, string iban, string bic, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/bankdetails?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&iban=" + (iban==null? "" : System.Uri.EscapeDataString(iban))+"&bic=" + (bic==null? "" : System.Uri.EscapeDataString(bic));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a BankDetails
		/// App_documents_sales_bankdetails_delete apps/{appId}/bankdetails/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of BankDetails</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_bankdetails_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/bankdetails/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a BankDetails
		/// App_documents_sales_bankdetails_get apps/{appId}/bankdetails/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of BankDetails</param>
		/// <returns>Success</returns>
		public async Task<BankDetails> App_documents_sales_bankdetails_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/bankdetails/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a BankDetails
		/// App_documents_sales_bankdetails_update apps/{appId}/bankdetails/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of BankDetails</param>
		/// <returns>Success</returns>
		public async Task<BankDetails> App_documents_sales_bankdetails_updateAsync(int appId, int id, string name, string iban, string bic, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/bankdetails/"+id+"?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&iban=" + (iban==null? "" : System.Uri.EscapeDataString(iban))+"&bic=" + (bic==null? "" : System.Uri.EscapeDataString(bic));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BankDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a Bankin synchronization
		/// The deletion of the account is irreversible, it will not be possible to resume synchronization as it is afterwards. - If transactions have been exported to accounting or used as payment, the CashflowSource will be left as it is. Resuming synchronization will remain impossible. If you re-import the account, a new CashflowSource will be created and transactions will therefore be duplicated. - Otherwise, if the CashflowSource was not used, it as well as its transactions will be deleted
		/// App_cashflow_banks_delete apps/{appId}/banks/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<string> App_cashflow_banks_deleteAsync(int appId, int item_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/banks/?item_id="+item_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List banks connected to bankin
		/// App_cashflow_banks_list apps/{appId}/banks/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<string> App_cashflow_banks_listAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/banks/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the link to the funnel to connect a bank with Sinao
		/// App_cashflow_banks_connect apps/{appId}/banks/connect
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<App_cashflow_banks_connectReturn> App_cashflow_banks_connectAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/banks/connect";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App_cashflow_banks_connectReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Triggers synchronization at Bankin then synchronizes transactions with Sinao
		/// App_cashflow_banks_synchronize apps/{appId}/banks/synchronize
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Optional item id to refresh. If set, triggers a refresh at Bankin before synchronizing transactions</param>
		/// <param name="is_incremential">The value 'false' triggers a non-incremental syncronization of the maximum possible duration. The value 'true' updates the transactions updated by Bankin since a certain date</param>
		/// <returns>Success</returns>
		public async Task<CashflowSource> App_cashflow_banks_synchronizeAsync(int appId, int id, bool is_incremential, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/banks/synchronize?id="+id+"&is_incremential="+is_incremential;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CashflowSource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the link to the funnel to edit password
		/// App_cashflow_banks_url_edit apps/{appId}/banks/{id}/funnel/edit
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<App_cashflow_banks_url_editReturn> App_cashflow_banks_url_editAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/banks/"+id+"/funnel/edit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App_cashflow_banks_url_editReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the link to the funnel to start manually a synchronization (SCA)
		/// App_cashflow_banks_url_sync apps/{appId}/banks/{id}/funnel/sync
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<App_cashflow_banks_url_syncReturn> App_cashflow_banks_url_syncAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/banks/"+id+"/funnel/sync";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App_cashflow_banks_url_syncReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the link to the funnel to validate a pro item (SCA)
		/// App_cashflow_banks_url_validate apps/{appId}/banks/{id}/funnel/validate
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<App_cashflow_banks_url_validateReturn> App_cashflow_banks_url_validateAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/banks/"+id+"/funnel/validate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App_cashflow_banks_url_validateReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Select accounts to synchronize
		/// App_cashflow_banks_select_accounts apps/{appId}/banks/{id}/select_accounts
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="bank_account_ids">List of enables accounts</param>
		/// <returns>Success</returns>
		public async Task<CashflowSource> App_cashflow_banks_select_accountsAsync(int appId, int id, int[] bank_account_ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/banks/"+id+"/select_accounts?"+string.Join("&", bank_account_ids.Select(z => $"bank_account_ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CashflowSource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List CashflowSource
		/// App_cashflow_cashflowsources_list apps/{appId}/cashflowsources/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<CashflowSource[]> App_cashflow_cashflowsources_listAsync(int appId, int offset, int limit, string search, App_cashflow_cashflowsources_listFilters[] filters, App_cashflow_cashflowsources_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/cashflowsources/?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CashflowSource[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a CashflowSource
		/// App_cashflow_cashflowsources_create apps/{appId}/cashflowsources/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<CashflowSource> App_cashflow_cashflowsources_createAsync(int appId, string name, string identifiant, App_cashflow_cashflowsources_createType type, int balance_amount, App_cashflow_cashflowsources_createAccount_type account_type, int parent_cashflow_source_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/cashflowsources/?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&identifiant=" + (identifiant==null? "" : System.Uri.EscapeDataString(identifiant))+"&type=" + type+"&balance_amount="+balance_amount+"&account_type=" + account_type+"&parent_cashflow_source_id="+parent_cashflow_source_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CashflowSource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a CashflowSource
		/// App_cashflow_cashflowsources_delete apps/{appId}/cashflowsources/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of CashflowSource</param>
		/// <returns>Success</returns>
		public async Task App_cashflow_cashflowsources_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/cashflowsources/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a CashflowSource
		/// App_cashflow_cashflowsources_get apps/{appId}/cashflowsources/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of CashflowSource</param>
		/// <returns>Success</returns>
		public async Task<CashflowSource> App_cashflow_cashflowsources_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/cashflowsources/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CashflowSource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a CashflowSource
		/// App_cashflow_cashflowsources_update apps/{appId}/cashflowsources/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of CashflowSource</param>
		/// <returns>Success</returns>
		public async Task<CashflowSource> App_cashflow_cashflowsources_updateAsync(int appId, int id, string name, string identifiant, App_cashflow_cashflowsources_createType type, int balance_amount, App_cashflow_cashflowsources_createAccount_type account_type, int parent_cashflow_source_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/cashflowsources/"+id+"?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&identifiant=" + (identifiant==null? "" : System.Uri.EscapeDataString(identifiant))+"&type=" + type+"&balance_amount="+balance_amount+"&account_type=" + account_type+"&parent_cashflow_source_id="+parent_cashflow_source_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CashflowSource>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Merge many contacts
		/// App_contacts_transform_merge apps/{appId}/contacts/merge
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_contacts_transform_mergeAsync(int appId, App_contacts_transform_mergeContacts[] contacts, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/contacts/merge?"+string.Join("&", contacts.Select(z => $"contacts={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send emails
		/// App_contacts_email_batch apps/{appId}/email/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_contacts_email_batchAsync(int appId, string from, App_contacts_email_batchMessages[] messages, bool need_copy_bcc, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/email/batch?from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&"+string.Join("&", messages.Select(z => $"messages={z}"))+"&need_copy_bcc="+need_copy_bcc;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send an email
		/// App_contacts_email_send apps/{appId}/email/document
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_contacts_email_sendAsync(int appId, string from, string[] recipients, string[] recipients_cc, string[] recipients_bcc, string title, string body, App_contacts_email_sendDocuments[] documents, bool need_copy_bcc, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/email/document?from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&"+string.Join("&", recipients.Select(z => $"recipients={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", recipients_cc.Select(z => $"recipients_cc={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", recipients_bcc.Select(z => $"recipients_bcc={System.Uri.EscapeDataString(z.ToString())}"))+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&body=" + (body==null? "" : System.Uri.EscapeDataString(body))+"&"+string.Join("&", documents.Select(z => $"documents={z}"))+"&need_copy_bcc="+need_copy_bcc;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove an establishment
		/// Remove an establishment
		/// App_contacts_establishments_delete apps/{appId}/establishments/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of establishment</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_contacts_establishments_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/establishments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an establishment
		/// Get an establishment by id
		/// App_contacts_establishments_get apps/{appId}/establishments/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of an establishment</param>
		/// <returns>Success</returns>
		public async Task<EstablishmentIdentity> App_contacts_establishments_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/establishments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EstablishmentIdentity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an establishment
		/// Update an establishment by id
		/// App_contacts_establishments_update apps/{appId}/establishments/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of an establishment</param>
		/// <param name="nic">Establishment number (french NIC)</param>
		/// <returns>Success</returns>
		public async Task<EstablishmentIdentity> App_contacts_establishments_updateAsync(int appId, int id, string name, string[] phones, string[] emails, string nic, App_contacts_establishments_updatePlace place, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/establishments/"+id+"?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&"+string.Join("&", phones.Select(z => $"phones={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", emails.Select(z => $"emails={System.Uri.EscapeDataString(z.ToString())}"))+"&nic=" + (nic==null? "" : System.Uri.EscapeDataString(nic))+"&place=" + place;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EstablishmentIdentity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ExportEntity
		/// App_accounting_export_list apps/{appId}/exports
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<ExportEntity[]> App_accounting_export_listAsync(int appId, int offset, int limit, string search, App_accounting_export_listFilters[] filters, App_accounting_export_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/exports?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportEntity[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a ExportEntity
		/// App_accounting_export_create apps/{appId}/exports
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<ExportEntity> App_accounting_export_createAsync(int appId, System.DateTimeOffset until, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/exports?until=" + until.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportEntity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the ACD UUID for authentification
		/// If response UUID is empty, you must register your identifiants.
		/// App_accounting_export_AcdComptaGetUuid apps/{appId}/exports/acd_compta
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<App_accounting_export_AcdComptaGetUuidReturn> App_accounting_export_AcdComptaGetUuidAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/exports/acd_compta";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App_accounting_export_AcdComptaGetUuidReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Register ACD identifiants
		/// Sinao will try to connect ACD authentification with your ids. If succed, Sinao will store your ids.
		/// App_accounting_export_AcdComptaSetUuid apps/{appId}/exports/acd_compta
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="login">the login provided by ACD Compta</param>
		/// <param name="password">the password provided by ACD Compta</param>
		/// <param name="_base">Your ACD account number (3XXXX)</param>
		/// <param name="cnx">your CNX by ACD Compta</param>
		/// <returns>Success</returns>
		public async Task<App_accounting_export_AcdComptaSetUuidReturn> App_accounting_export_AcdComptaSetUuidAsync(int appId, string login, string password, string _base, string cnx, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/exports/acd_compta?login=" + (login==null? "" : System.Uri.EscapeDataString(login))+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password))+"&base=" + (_base==null? "" : System.Uri.EscapeDataString(_base))+"&cnx=" + (cnx==null? "" : System.Uri.EscapeDataString(cnx));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App_accounting_export_AcdComptaSetUuidReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download the export entity as zip
		/// App_accounting_export_download apps/{appId}/exports/download
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="format">The export format can be a FEC (universal - similar to the French legal file 'Fichier des Ecritures Comptables') or specific for accounting software</param>
		/// <param name="start_at">Automatically find export entities from a date range</param>
		/// <param name="end_at">Automatically find export entities from a date range</param>
		/// <param name="since">Automatically find export entities since a date</param>
		/// <param name="since_last">Automatically find the export entities since the last export downloaded</param>
		/// <returns>Success</returns>
		public async Task App_accounting_export_downloadAsync(int appId, App_accounting_export_downloadFormat format, int[] export_entities_ids, System.DateTimeOffset start_at, System.DateTimeOffset end_at, System.DateTimeOffset since, bool since_last, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/exports/download?format=" + format+"&"+string.Join("&", export_entities_ids.Select(z => $"export_entities_ids={z}"))+"&start_at=" + start_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_at=" + end_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&since=" + since.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&since_last="+since_last;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ExportEntity
		/// App_accounting_export_list_by_months apps/{appId}/exports/months
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<ExportEntity[]> App_accounting_export_list_by_monthsAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/exports/months";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportEntity[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a ExportEntity
		/// App_accounting_export_delete apps/{appId}/exports/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of ExportEntity</param>
		/// <returns>Success</returns>
		public async Task App_accounting_export_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/exports/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a ExportEntity
		/// App_accounting_export_get apps/{appId}/exports/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of ExportEntity</param>
		/// <returns>Success</returns>
		public async Task<ExportEntity> App_accounting_export_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/exports/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportEntity>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List invoices
		/// Get list of invoices
		/// App_documents_sales_invoices_list apps/{appId}/invoices
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<Invoice[]> App_documents_sales_invoices_listAsync(int appId, int offset, int limit, string search, App_documents_sales_invoices_listFilters[] filters, App_documents_sales_invoices_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoice[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an invoice
		/// Create a new invoice with an Organization or a Person. Relationship store notes, metadata and accounting settings parameters
		/// App_documents_sales_invoices_create apps/{appId}/invoices
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="columns">List columns to display</param>
		/// <param name="reference">Free variable not display in document</param>
		/// <param name="legal_notice">Legal mentions</param>
		/// <param name="payment_period">Days count before considere this invoice as late</param>
		/// <param name="payment_methods">Accepted methods of payment for this invoice. Methods comma separated</param>
		/// <param name="number_from_other_software">Invoices imported from another software are not counted in the numbering and are not locked</param>
		/// <returns>Success</returns>
		public async Task<Invoice> App_documents_sales_invoices_createAsync(
					int appId, 
					App_documents_sales_invoices_createContact_infos contact_infos, 
					App_documents_sales_invoices_createThird_account third_account, 
					string title, 
					SalesLine[] content, 
					App_documents_sales_invoices_createColumns columns, 
					string reference, 
					App_documents_sales_invoices_createDiscount discount, 
					string currency, 
					string legal_notice, 
					int bank_details_id, 
					App_documents_sales_invoices_createVat_exemption vat_exemption, 
					string[] tags, 
					string[] metadata, 
					int[] downpayments, 
					int downpayment_cash, 
					int avoid_of, 
					System.DateTimeOffset delivered_at, 
					int payment_period, 
					string payment_methods, 
					string number_from_other_software, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices?contact_infos=" + contact_infos+"&third_account=" + third_account+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&"+string.Join("&", content.Select(z => $"content={z}"))+"&columns=" + columns+"&reference=" + (reference==null? "" : System.Uri.EscapeDataString(reference))+"&discount=" + discount+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&legal_notice=" + (legal_notice==null? "" : System.Uri.EscapeDataString(legal_notice))+"&bank_details_id="+bank_details_id+"&vat_exemption=" + vat_exemption+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", downpayments.Select(z => $"downpayments={z}"))+"&downpayment_cash="+downpayment_cash+"&avoid_of="+avoid_of+"&delivered_at=" + delivered_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&payment_period="+payment_period+"&payment_methods=" + (payment_methods==null? "" : System.Uri.EscapeDataString(payment_methods))+"&number_from_other_software=" + (number_from_other_software==null? "" : System.Uri.EscapeDataString(number_from_other_software));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete many invoices
		/// Delete many invoices
		/// App_documents_sales_invoices_batch_delete apps/{appId}/invoices/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="ids">List of invoices ID</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_documents_sales_invoices_batch_deleteAsync(int appId, int[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/batch?"+string.Join("&", ids.Select(z => $"ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update many invoices
		/// Create or update many invoices
		/// App_documents_sales_invoices_batch apps/{appId}/invoices/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="data">List of invoices. With ID for update, without for insert</param>
		/// <returns>Success</returns>
		public async Task<Invoice> App_documents_sales_invoices_batchAsync(int appId, Invoice[] data, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/batch?"+string.Join("&", data.Select(z => $"data={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a list of invoices in pdf into a .zip file
		/// App_documents_sales_invoices_download apps/{appId}/invoices/download
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="ids">Array of invoices id</param>
		/// <param name="template">Template name to generate document</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_invoices_downloadAsync(int appId, int[] ids, App_documents_sales_invoices_downloadTemplate template, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/download?"+string.Join("&", ids.Select(z => $"ids={z}"))+"&template=" + template;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerate pdf and recalcul amounts of invoice
		/// App_documents_sales_invoices_fresh apps/{appId}/invoices/fresh
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="ids">Array of invoices id</param>
		/// <returns>Success</returns>
		public async Task<string> App_documents_sales_invoices_freshAsync(int appId, int[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/fresh?"+string.Join("&", ids.Select(z => $"ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the next invoice number for preview
		/// App_documents_sales_invoices_nextnumber apps/{appId}/invoices/nextnumber
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="written_at">Write date</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_invoices_nextnumberAsync(int appId, System.DateTimeOffset written_at, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/nextnumber?written_at=" + written_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtain statistics about invoices
		/// App_documents_sales_invoices_statistics apps/{appId}/invoices/statistics
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <returns>Success</returns>
		public async Task<string> App_documents_sales_invoices_statisticsAsync(int appId, string search, App_documents_sales_invoices_statisticsFilters[] filters, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/statistics?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove an invoice
		/// Remove an invoice by id : only for draft
		/// App_documents_sales_invoices_delete apps/{appId}/invoices/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of invoice</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_documents_sales_invoices_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an invoice
		/// Get an Sales/Invoice object by Id
		/// App_documents_sales_invoices_get apps/{appId}/invoices/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of invoice</param>
		/// <returns>Success</returns>
		public async Task<Invoice> App_documents_sales_invoices_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an invoice
		/// Update an invoice by id
		/// App_documents_sales_invoices_update apps/{appId}/invoices/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of invoice</param>
		/// <param name="columns">List columns to display</param>
		/// <param name="reference">Free variable not display in document</param>
		/// <param name="legal_notice">Legal mentions</param>
		/// <param name="payment_period">Days count before considere this invoice as late</param>
		/// <param name="payment_methods">Accepted methods of payment for this invoice. Methods comma separated</param>
		/// <returns>Success</returns>
		public async Task<Invoice> App_documents_sales_invoices_updateAsync(
					int appId, 
					int id, 
					App_documents_sales_invoices_updateContact_infos contact_infos, 
					App_documents_sales_invoices_updateThird_account third_account, 
					string title, 
					SalesLine[] content, 
					App_documents_sales_invoices_updateColumns columns, 
					string reference, 
					App_documents_sales_invoices_updateDiscount discount, 
					string currency, 
					string legal_notice, 
					int bank_details_id, 
					App_documents_sales_invoices_updateVat_exemption vat_exemption, 
					string[] tags, 
					string[] metadata, 
					int[] downpayments, 
					int downpayment_cash, 
					int avoid_of, 
					System.DateTimeOffset delivered_at, 
					int payment_period, 
					string payment_methods, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/"+id+"?contact_infos=" + contact_infos+"&third_account=" + third_account+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&"+string.Join("&", content.Select(z => $"content={z}"))+"&columns=" + columns+"&reference=" + (reference==null? "" : System.Uri.EscapeDataString(reference))+"&discount=" + discount+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&legal_notice=" + (legal_notice==null? "" : System.Uri.EscapeDataString(legal_notice))+"&bank_details_id="+bank_details_id+"&vat_exemption=" + vat_exemption+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", downpayments.Select(z => $"downpayments={z}"))+"&downpayment_cash="+downpayment_cash+"&avoid_of="+avoid_of+"&delivered_at=" + delivered_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&payment_period="+payment_period+"&payment_methods=" + (payment_methods==null? "" : System.Uri.EscapeDataString(payment_methods));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detach a file at an invoice
		/// App_documents_sales_invoices_detach apps/{appId}/invoices/{id}/attach
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Invoice id</param>
		/// <param name="file_id">File to detach</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_invoices_detachAsync(int appId, int id, int file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/"+id+"/attach?file_id="+file_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attach a file at an invoice
		/// App_documents_sales_invoices_attach apps/{appId}/invoices/{id}/attach
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="file">File to attach</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_invoices_attachAsync(int appId, int id, string file, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/"+id+"/attach?file=" + (file==null? "" : System.Uri.EscapeDataString(file));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a creditnote on an invoice
		/// App_documents_sales_invoices_avoid apps/{appId}/invoices/{id}/avoid
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Invoice id to create a credit note</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_invoices_avoidAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/"+id+"/avoid";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Duplicate an invoice
		/// App_documents_sales_invoices_duplicate apps/{appId}/invoices/{id}/duplicate
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Invoice id to duplicate</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_invoices_duplicateAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/"+id+"/duplicate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finalize an invoice
		/// App_documents_sales_invoices_finalize apps/{appId}/invoices/{id}/finalize
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Invoice id to finalize</param>
		/// <param name="force_date">Automatically updates the date if earlier than the last invoice</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_invoices_finalizeAsync(int appId, int id, bool force_date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/"+id+"/finalize?force_date="+force_date;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download the invoice as pdf
		/// App_documents_sales_invoices_pdf apps/{appId}/invoices/{id}/pdf
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Invoice id to download</param>
		/// <param name="template">Template name to generate document</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_invoices_pdfAsync(int appId, int id, App_documents_sales_invoices_downloadTemplate template, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/"+id+"/pdf?template=" + template;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download invoice as jpeg
		/// App_documents_sales_invoices_preview apps/{appId}/invoices/{id}/preview.jpg
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Invoice id to download</param>
		/// <param name="template">Template name to generate document</param>
		/// <param name="disable_cache">Force the regeneration of the preview</param>
		/// <param name="base64">Get the image in base64</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_invoices_previewAsync(int appId, int id, string template, bool disable_cache, bool base64, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/"+id+"/preview.jpg?template=" + (template==null? "" : System.Uri.EscapeDataString(template))+"&disable_cache="+disable_cache+"&base64="+base64;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a tag on an invoice
		/// App_documents_sales_invoices_untag apps/{appId}/invoices/{id}/tag
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Invoice id</param>
		/// <param name="tag">Tag to delete</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_invoices_untagAsync(int appId, int id, string tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/"+id+"/tag?tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a tag on an invoice
		/// App_documents_sales_invoices_tag apps/{appId}/invoices/{id}/tag
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Invoice id</param>
		/// <param name="tag">Tag to add</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_invoices_tagAsync(int appId, int id, string tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/"+id+"/tag?tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the status of an invoice
		/// App_documents_sales_invoices_updatestatus apps/{appId}/invoices/{id}/updatestatus
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Invoice id</param>
		/// <param name="status">Status to update</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_invoices_updatestatusAsync(int appId, int id, InvoiceStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/invoices/"+id+"/updatestatus?status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear autoreconciliation logs
		/// App_cashflow_logsautoreconciliations_clear apps/{appId}/logs/autoreconcile/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_cashflow_logsautoreconciliations_clearAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/logs/autoreconcile/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List autoreconciliation logs
		/// App_cashflow_logsautoreconciliations_list apps/{appId}/logs/autoreconcile/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task App_cashflow_logsautoreconciliations_listAsync(int appId, int offset, int limit, string search, App_cashflow_logsautoreconciliations_listFilters[] filters, App_cashflow_logsautoreconciliations_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/logs/autoreconcile/?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start force autoreconciliation
		/// App_cashflow_logsautoreconciliations_start apps/{appId}/logs/autoreconcile/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_cashflow_logsautoreconciliations_startAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/logs/autoreconcile/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the import state of Stripe data
		/// App_openai_billings_estimate apps/{appId}/openai/billing/estimate
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_openai_billings_estimateAsync(int appId, string description, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/openai/billing/estimate?description=" + (description==null? "" : System.Uri.EscapeDataString(description));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get organization profile for current app
		/// App_organization_get apps/{appId}/organization
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<SinaoOrganization[]> App_organization_getAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/organization";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SinaoOrganization[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update organization profile for current app
		/// App_organization_update apps/{appId}/organization
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="name">Company name visible on the app</param>
		/// <param name="billing_name">Company name for billing</param>
		/// <param name="national_id">Unique National Id, format by country. **In France : [0-9]{9} with last number as security key.**</param>
		/// <param name="trade_directory_registration">France Directory Registration : Unique national ID SIRET [0-9]{9} + 'RM' + CMA identification number [0-9a-z]{2,}</param>
		/// <param name="vat_id">European VAT Id. **In France : FR [0-9]{2} [0-9]{9}**</param>
		/// <param name="code_naf">French NAF Code</param>
		/// <param name="rcs">French. Registre du Commerce et des Sociétés</param>
		/// <param name="greffe">French. Tribunal de commerce</param>
		/// <param name="sap_number_registration">NOVA agreement/registration number</param>
		/// <param name="sap_activities">Organisation activities displayed in annual taxes customer attestation</param>
		/// <param name="sap_date_registration">NOVA agreement/registration date</param>
		/// <returns>Success</returns>
		public async Task<SinaoOrganization> App_organization_updateAsync(
					int appId, 
					string name, 
					string billing_name, 
					string logo, 
					string legal_form, 
					string country_iso2, 
					System.DateOnly founding_date, 
					string founding_location, 
					System.DateOnly dissolution_date, 
					string closeaccounting_period, 
					string national_id, 
					string trade_directory_registration, 
					string vat_id, 
					string code_naf, 
					string number_of_employees, 
					string industry, 
					string slogan, 
					string rcs, 
					string greffe, 
					string sap_number_registration, 
					string sap_activities, 
					string sap_date_registration, 
					int capital, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/organization?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&billing_name=" + (billing_name==null? "" : System.Uri.EscapeDataString(billing_name))+"&logo=" + (logo==null? "" : System.Uri.EscapeDataString(logo))+"&legal_form=" + (legal_form==null? "" : System.Uri.EscapeDataString(legal_form))+"&country_iso2=" + (country_iso2==null? "" : System.Uri.EscapeDataString(country_iso2))+"&founding_date="+founding_date+"&founding_location=" + (founding_location==null? "" : System.Uri.EscapeDataString(founding_location))+"&dissolution_date="+dissolution_date+"&closeaccounting_period=" + (closeaccounting_period==null? "" : System.Uri.EscapeDataString(closeaccounting_period))+"&national_id=" + (national_id==null? "" : System.Uri.EscapeDataString(national_id))+"&trade_directory_registration=" + (trade_directory_registration==null? "" : System.Uri.EscapeDataString(trade_directory_registration))+"&vat_id=" + (vat_id==null? "" : System.Uri.EscapeDataString(vat_id))+"&code_naf=" + (code_naf==null? "" : System.Uri.EscapeDataString(code_naf))+"&number_of_employees=" + (number_of_employees==null? "" : System.Uri.EscapeDataString(number_of_employees))+"&industry=" + (industry==null? "" : System.Uri.EscapeDataString(industry))+"&slogan=" + (slogan==null? "" : System.Uri.EscapeDataString(slogan))+"&rcs=" + (rcs==null? "" : System.Uri.EscapeDataString(rcs))+"&greffe=" + (greffe==null? "" : System.Uri.EscapeDataString(greffe))+"&sap_number_registration=" + (sap_number_registration==null? "" : System.Uri.EscapeDataString(sap_number_registration))+"&sap_activities=" + (sap_activities==null? "" : System.Uri.EscapeDataString(sap_activities))+"&sap_date_registration=" + (sap_date_registration==null? "" : System.Uri.EscapeDataString(sap_date_registration))+"&capital="+capital;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SinaoOrganization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List organizations
		/// List all organizations
		/// App_contacts_organizations_list apps/{appId}/organizations
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<ContactOrganization[]> App_contacts_organizations_listAsync(int appId, int limit, string search, App_contacts_organizations_listFilters[] filters, App_contacts_organizations_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/organizations?limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactOrganization[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an organization
		/// Create a contact organization. This organization will be automatically completed and updated by public data. The public profile will be automatically find by NationalID
		/// App_contacts_organizations_create apps/{appId}/organizations
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="name">Company name visible on the app</param>
		/// <param name="billing_name">Company name for billing</param>
		/// <param name="national_id">Unique National Id, format by country. **In France : [0-9]{9} with last number as security key.**</param>
		/// <param name="vat_id">European VAT Id. **In France : FR [0-9]{2} [0-9]{9}**</param>
		/// <param name="code_naf">French NAF Code</param>
		/// <param name="rcs">French. Registre du Commerce et des Sociétés</param>
		/// <param name="greffe">French. Tribunal de commerce</param>
		/// <returns>Success</returns>
		public async Task<ContactOrganization> App_contacts_organizations_createAsync(
					int appId, 
					string name, 
					string billing_name, 
					string logo, 
					string legal_form, 
					string country_iso2, 
					System.DateOnly founding_date, 
					string founding_location, 
					System.DateOnly dissolution_date, 
					string vat_system, 
					string closeaccounting_period, 
					string national_id, 
					string vat_id, 
					string code_naf, 
					string number_of_employees, 
					string slogan, 
					string rcs, 
					string greffe, 
					int capital, 
					string[] metadata, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/organizations?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&billing_name=" + (billing_name==null? "" : System.Uri.EscapeDataString(billing_name))+"&logo=" + (logo==null? "" : System.Uri.EscapeDataString(logo))+"&legal_form=" + (legal_form==null? "" : System.Uri.EscapeDataString(legal_form))+"&country_iso2=" + (country_iso2==null? "" : System.Uri.EscapeDataString(country_iso2))+"&founding_date="+founding_date+"&founding_location=" + (founding_location==null? "" : System.Uri.EscapeDataString(founding_location))+"&dissolution_date="+dissolution_date+"&vat_system=" + (vat_system==null? "" : System.Uri.EscapeDataString(vat_system))+"&closeaccounting_period=" + (closeaccounting_period==null? "" : System.Uri.EscapeDataString(closeaccounting_period))+"&national_id=" + (national_id==null? "" : System.Uri.EscapeDataString(national_id))+"&vat_id=" + (vat_id==null? "" : System.Uri.EscapeDataString(vat_id))+"&code_naf=" + (code_naf==null? "" : System.Uri.EscapeDataString(code_naf))+"&number_of_employees=" + (number_of_employees==null? "" : System.Uri.EscapeDataString(number_of_employees))+"&slogan=" + (slogan==null? "" : System.Uri.EscapeDataString(slogan))+"&rcs=" + (rcs==null? "" : System.Uri.EscapeDataString(rcs))+"&greffe=" + (greffe==null? "" : System.Uri.EscapeDataString(greffe))+"&capital="+capital+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactOrganization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create multiple organizations
		/// Create a contact organization. This organization will be automatically completed and updated by public data. The public profile will be automatically find by NationalID
		/// App_contacts_organizations_batch apps/{appId}/organizations/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="data">List of invoices. With ID for update, without for insert</param>
		/// <returns>Success</returns>
		public async Task<ContactOrganization> App_contacts_organizations_batchAsync(int appId, ContactOrganization[] data, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/organizations/batch?"+string.Join("&", data.Select(z => $"data={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactOrganization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove an organization
		/// Remove an organization
		/// App_contacts_organizations_delete apps/{appId}/organizations/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of organization</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_contacts_organizations_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/organizations/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an organization
		/// Get an organization by id
		/// App_contacts_organizations_get apps/{appId}/organizations/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of organization</param>
		/// <returns>Success</returns>
		public async Task<ContactOrganization> App_contacts_organizations_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/organizations/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactOrganization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an organization
		/// Update an organization by id
		/// App_contacts_organizations_update apps/{appId}/organizations/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of organization</param>
		/// <param name="name">Company name visible on the app</param>
		/// <param name="billing_name">Company name for billing</param>
		/// <param name="national_id">Unique National Id, format by country. **In France : [0-9]{9} with last number as security key.**</param>
		/// <param name="vat_id">European VAT Id. **In France : FR [0-9]{2} [0-9]{9}**</param>
		/// <param name="code_naf">French NAF Code</param>
		/// <param name="rcs">French. Registre du Commerce et des Sociétés</param>
		/// <param name="greffe">French. Tribunal de commerce</param>
		/// <returns>Success</returns>
		public async Task<ContactOrganization> App_contacts_organizations_updateAsync(
					int appId, 
					int id, 
					string name, 
					string billing_name, 
					string logo, 
					string legal_form, 
					string country_iso2, 
					System.DateOnly founding_date, 
					string founding_location, 
					System.DateOnly dissolution_date, 
					string vat_system, 
					string closeaccounting_period, 
					string national_id, 
					string vat_id, 
					string code_naf, 
					string number_of_employees, 
					string slogan, 
					string rcs, 
					string greffe, 
					int capital, 
					string[] metadata, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/organizations/"+id+"?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&billing_name=" + (billing_name==null? "" : System.Uri.EscapeDataString(billing_name))+"&logo=" + (logo==null? "" : System.Uri.EscapeDataString(logo))+"&legal_form=" + (legal_form==null? "" : System.Uri.EscapeDataString(legal_form))+"&country_iso2=" + (country_iso2==null? "" : System.Uri.EscapeDataString(country_iso2))+"&founding_date="+founding_date+"&founding_location=" + (founding_location==null? "" : System.Uri.EscapeDataString(founding_location))+"&dissolution_date="+dissolution_date+"&vat_system=" + (vat_system==null? "" : System.Uri.EscapeDataString(vat_system))+"&closeaccounting_period=" + (closeaccounting_period==null? "" : System.Uri.EscapeDataString(closeaccounting_period))+"&national_id=" + (national_id==null? "" : System.Uri.EscapeDataString(national_id))+"&vat_id=" + (vat_id==null? "" : System.Uri.EscapeDataString(vat_id))+"&code_naf=" + (code_naf==null? "" : System.Uri.EscapeDataString(code_naf))+"&number_of_employees=" + (number_of_employees==null? "" : System.Uri.EscapeDataString(number_of_employees))+"&slogan=" + (slogan==null? "" : System.Uri.EscapeDataString(slogan))+"&rcs=" + (rcs==null? "" : System.Uri.EscapeDataString(rcs))+"&greffe=" + (greffe==null? "" : System.Uri.EscapeDataString(greffe))+"&capital="+capital+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactOrganization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restore an organization
		/// Restore an organization by id
		/// App_contacts_organizations_restore apps/{appId}/organizations/{id}/restore
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of organization</param>
		/// <returns>Success</returns>
		public async Task<ContactOrganization> App_contacts_organizations_restoreAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/organizations/"+id+"/restore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactOrganization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List payments
		/// Get list of payments
		/// App_payments_payments_list apps/{appId}/payments
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<Payment[]> App_payments_payments_listAsync(int appId, int offset, int limit, string search, App_payments_payments_listFilters[] filters, App_payments_payments_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/payments?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the recipe book
		/// Get a Payment object by Id
		/// App_payments_payments_recipe_book apps/{appId}/payments/recipe_book
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_payments_payments_recipe_bookAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/payments/recipe_book";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a payment
		/// Remove a payment by id
		/// App_payments_payments_delete apps/{appId}/payments/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of quote</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_payments_payments_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/payments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a payment
		/// Get a Payment object by Id
		/// App_payments_payments_get apps/{appId}/payments/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of payment</param>
		/// <returns>Success</returns>
		public async Task<Payment> App_payments_payments_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/payments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List persons
		/// Get all persons
		/// App_contacts_persons_list apps/{appId}/persons
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<ContactPerson[]> App_contacts_persons_listAsync(int appId, int limit, string search, App_contacts_persons_listFilters[] filters, App_contacts_persons_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/persons?limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactPerson[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a person
		/// Create a new person. Represent a private contact
		/// App_contacts_persons_create apps/{appId}/persons
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="civility">Civility is the lastname prefix</param>
		/// <returns>Success</returns>
		public async Task<ContactPerson> App_contacts_persons_createAsync(int appId, string civility, string lastname, string firstname, string picture, string[] metadata, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/persons?civility=" + (civility==null? "" : System.Uri.EscapeDataString(civility))+"&lastname=" + (lastname==null? "" : System.Uri.EscapeDataString(lastname))+"&firstname=" + (firstname==null? "" : System.Uri.EscapeDataString(firstname))+"&picture=" + (picture==null? "" : System.Uri.EscapeDataString(picture))+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactPerson>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create multiple persons
		/// Create a new person. Represent a private contact
		/// App_contacts_persons_batch apps/{appId}/persons/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="data">List of persons. With ID for update, without for insert</param>
		/// <returns>Success</returns>
		public async Task<ContactPerson> App_contacts_persons_batchAsync(int appId, ContactPerson[] data, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/persons/batch?"+string.Join("&", data.Select(z => $"data={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactPerson>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a person
		/// Remove an person
		/// App_contacts_persons_delete apps/{appId}/persons/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of person</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_contacts_persons_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/persons/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a person
		/// Get a person by id
		/// App_contacts_persons_get apps/{appId}/persons/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of a person</param>
		/// <returns>Success</returns>
		public async Task<ContactPerson> App_contacts_persons_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/persons/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactPerson>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a person
		/// Update a person by id
		/// App_contacts_persons_update apps/{appId}/persons/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of a person</param>
		/// <param name="civility">Civility is the lastname prefix</param>
		/// <returns>Success</returns>
		public async Task<ContactPerson> App_contacts_persons_updateAsync(int appId, int id, string civility, string lastname, string firstname, string picture, string[] metadata, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/persons/"+id+"?civility=" + (civility==null? "" : System.Uri.EscapeDataString(civility))+"&lastname=" + (lastname==null? "" : System.Uri.EscapeDataString(lastname))+"&firstname=" + (firstname==null? "" : System.Uri.EscapeDataString(firstname))+"&picture=" + (picture==null? "" : System.Uri.EscapeDataString(picture))+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactPerson>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restore a person
		/// Restore a person by id
		/// App_contacts_persons_restore apps/{appId}/persons/{id}/restore
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of a person</param>
		/// <returns>Success</returns>
		public async Task<ContactPerson> App_contacts_persons_restoreAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/persons/"+id+"/restore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContactPerson>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Ping app web hostname
		/// Try if a specific app is online
		/// App_ping apps/{appId}/ping
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_pingAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/ping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List product categories
		/// Get list of product categories
		/// App_catalog_categories_list apps/{appId}/productcategory
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<ProductCategory[]> App_catalog_categories_listAsync(int appId, int offset, int limit, string search, App_catalog_categories_listFilters[] filters, App_catalog_categories_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/productcategory?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductCategory[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a product category
		/// Create a new product category
		/// App_catalog_categories_create apps/{appId}/productcategory
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<ProductCategory> App_catalog_categories_createAsync(int appId, string name, string image, int parent_category_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/productcategory?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&image=" + (image==null? "" : System.Uri.EscapeDataString(image))+"&parent_category_id="+parent_category_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductCategory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a product category
		/// Remove a product category by id
		/// App_catalog_categories_delete apps/{appId}/productcategory/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of product category</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_catalog_categories_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/productcategory/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a product category
		/// Get a Product category object by Id
		/// App_catalog_categories_get apps/{appId}/productcategory/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of product category</param>
		/// <returns>Success</returns>
		public async Task<ProductCategory> App_catalog_categories_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/productcategory/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductCategory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a product category
		/// Update a product category by id
		/// App_catalog_categories_update apps/{appId}/productcategory/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of product category</param>
		/// <returns>Success</returns>
		public async Task<ProductCategory> App_catalog_categories_updateAsync(int appId, int id, string name, string image, int parent_category_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/productcategory/"+id+"?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&image=" + (image==null? "" : System.Uri.EscapeDataString(image))+"&parent_category_id="+parent_category_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductCategory>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List products
		/// Get list of products
		/// App_catalog_products_list apps/{appId}/products
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<Product[]> App_catalog_products_listAsync(int appId, int offset, int limit, string search, App_catalog_products_listFilters[] filters, App_catalog_products_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/products?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a product
		/// Create a new product
		/// App_catalog_products_create apps/{appId}/products
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="amount">Price without taxes in cents</param>
		/// <param name="amount_accurately">Price without taxes in cents / 1000</param>
		/// <param name="vat_percent">Taxe rate in cents</param>
		/// <param name="lifetime">Product life time in seconds</param>
		/// <param name="description">Product description</param>
		/// <param name="type">Is a service or a product ?</param>
		/// <param name="quantity_name">Name of the quantity: days, liters, m2, m3...</param>
		/// <returns>Success</returns>
		public async Task<Product> App_catalog_products_createAsync(
					int appId, 
					string name, 
					int amount, 
					int amount_accurately, 
					int vat_percent, 
					string image, 
					int lifetime, 
					string description, 
					App_catalog_products_createType type, 
					string quantity_name, 
					string reference, 
					string account_id, 
					string[] tags, 
					int category_id, 
					string[] metadata, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/products?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&amount="+amount+"&amount_accurately="+amount_accurately+"&vat_percent="+vat_percent+"&image=" + (image==null? "" : System.Uri.EscapeDataString(image))+"&lifetime="+lifetime+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&type=" + type+"&quantity_name=" + (quantity_name==null? "" : System.Uri.EscapeDataString(quantity_name))+"&reference=" + (reference==null? "" : System.Uri.EscapeDataString(reference))+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&category_id="+category_id+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create multiple products
		/// Create a new product
		/// App_catalog_products_batch apps/{appId}/products/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="data">List of products. With ID for update, without for insert</param>
		/// <returns>Success</returns>
		public async Task<Product> App_catalog_products_batchAsync(int appId, Product[] data, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/products/batch?"+string.Join("&", data.Select(z => $"data={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a product
		/// Remove a product by id
		/// App_catalog_products_delete apps/{appId}/products/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of quote</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_catalog_products_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/products/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a product
		/// Get a Product object by Id
		/// App_catalog_products_get apps/{appId}/products/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of product</param>
		/// <returns>Success</returns>
		public async Task<Product> App_catalog_products_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/products/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a product
		/// Update a product by id
		/// App_catalog_products_update apps/{appId}/products/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of product</param>
		/// <param name="amount">Price without taxes in cents</param>
		/// <param name="amount_accurately">Price without taxes in cents / 1000</param>
		/// <param name="vat_percent">Taxe rate in cents</param>
		/// <param name="lifetime">Product life time in seconds</param>
		/// <param name="description">Product description</param>
		/// <param name="type">Is a service or a product ?</param>
		/// <param name="quantity_name">Name of the quantity: days, liters, m2, m3...</param>
		/// <returns>Success</returns>
		public async Task<Product> App_catalog_products_updateAsync(
					int appId, 
					int id, 
					string name, 
					int amount, 
					int amount_accurately, 
					int vat_percent, 
					string image, 
					int lifetime, 
					string description, 
					App_catalog_products_createType type, 
					string quantity_name, 
					string reference, 
					string account_id, 
					string[] tags, 
					int category_id, 
					string[] metadata, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/products/"+id+"?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&amount="+amount+"&amount_accurately="+amount_accurately+"&vat_percent="+vat_percent+"&image=" + (image==null? "" : System.Uri.EscapeDataString(image))+"&lifetime="+lifetime+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&type=" + type+"&quantity_name=" + (quantity_name==null? "" : System.Uri.EscapeDataString(quantity_name))+"&reference=" + (reference==null? "" : System.Uri.EscapeDataString(reference))+"&account_id=" + (account_id==null? "" : System.Uri.EscapeDataString(account_id))+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&category_id="+category_id+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Product>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detach a file
		/// App_catalog_products_detach apps/{appId}/products/{id}/attach
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="file_id">File to detach</param>
		/// <returns>Success</returns>
		public async Task App_catalog_products_detachAsync(int appId, int id, int file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/products/"+id+"/attach?file_id="+file_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attach a file
		/// App_catalog_products_attach apps/{appId}/products/{id}/attach
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="file">File to attach</param>
		/// <returns>Success</returns>
		public async Task App_catalog_products_attachAsync(int appId, int id, string file, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/products/"+id+"/attach?file=" + (file==null? "" : System.Uri.EscapeDataString(file));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List stocks
		/// Get list of stocks
		/// App_catalog_stocks_list apps/{appId}/productstocks
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<ProductStock[]> App_catalog_stocks_listAsync(int appId, int offset, int limit, string search, App_catalog_stocks_listFilters[] filters, App_catalog_stocks_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/productstocks?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductStock[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a stocks
		/// Create a new stocks
		/// App_catalog_stocks_create apps/{appId}/productstocks
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="product_id">Parent object</param>
		/// <param name="purchase_id">Purchase that generated the stock if exists</param>
		/// <param name="quantity">The initial quantity will no longer be modifiable. To change the quantity manually, use the `destruct` endpoint</param>
		/// <param name="use_duration">Use duration in seconds</param>
		/// <returns>Success</returns>
		public async Task<ProductStock> App_catalog_stocks_createAsync(int appId, int product_id, int purchase_id, int quantity, string bar_code, string location, System.DateTimeOffset entered_at, System.DateTimeOffset expired_at, int cost_amount, int use_duration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/productstocks?product_id="+product_id+"&purchase_id="+purchase_id+"&quantity="+quantity+"&bar_code=" + (bar_code==null? "" : System.Uri.EscapeDataString(bar_code))+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&entered_at=" + entered_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&expired_at=" + expired_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&cost_amount="+cost_amount+"&use_duration="+use_duration;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductStock>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a stocks
		/// Remove a stocks by id
		/// App_catalog_stocks_delete apps/{appId}/productstocks/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of stocks</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_catalog_stocks_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/productstocks/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a stocks
		/// Get a Product object by Id
		/// App_catalog_stocks_get apps/{appId}/productstocks/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of stocks</param>
		/// <returns>Success</returns>
		public async Task<ProductStock> App_catalog_stocks_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/productstocks/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductStock>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a stocks
		/// Update a stocks by id
		/// App_catalog_stocks_update apps/{appId}/productstocks/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of stocks</param>
		/// <param name="purchase_id">Purchase that generated the stock if exists</param>
		/// <param name="use_duration">Use duration in seconds</param>
		/// <returns>Success</returns>
		public async Task<ProductStock> App_catalog_stocks_updateAsync(int appId, int id, int purchase_id, string bar_code, string location, System.DateTimeOffset entered_at, System.DateTimeOffset expired_at, int cost_amount, int use_duration, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/productstocks/"+id+"?purchase_id="+purchase_id+"&bar_code=" + (bar_code==null? "" : System.Uri.EscapeDataString(bar_code))+"&location=" + (location==null? "" : System.Uri.EscapeDataString(location))+"&entered_at=" + entered_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&expired_at=" + expired_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&cost_amount="+cost_amount+"&use_duration="+use_duration;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductStock>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Destruct a quantity of stock (forgotten, destructed, expirated stock...)
		/// Update a stocks by id to reduce quantity of stocks
		/// App_catalog_stocks_destruct apps/{appId}/productstocks/{id}/destruct
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of stocks</param>
		/// <param name="quantity">Quantity to destruct</param>
		/// <returns>Success</returns>
		public async Task<ProductStock> App_catalog_stocks_destructAsync(int appId, int id, int quantity, string comment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/productstocks/"+id+"/destruct?quantity="+quantity+"&comment=" + (comment==null? "" : System.Uri.EscapeDataString(comment));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductStock>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Consider part of the stock as back
		/// Update the amount of stocks available through the return of rented stocks
		/// App_catalog_stocks_rental_back apps/{appId}/productstocks/{id}/rental/back
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of stocks</param>
		/// <param name="quantity">Quantity to return in stocks</param>
		/// <param name="use_duration">Usage duration in seconds</param>
		/// <returns>Success</returns>
		public async Task<ProductStock> App_catalog_stocks_rental_backAsync(int appId, int id, int quantity, System.DateTimeOffset current_return_date, int use_duration, string comment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/productstocks/"+id+"/rental/back?quantity="+quantity+"&current_return_date=" + current_return_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&use_duration="+use_duration+"&comment=" + (comment==null? "" : System.Uri.EscapeDataString(comment));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductStock>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Consider part of the stock as rented
		/// Updates the quantity of available stocks and provides for a stocks return date
		/// App_catalog_stocks_rental_exit apps/{appId}/productstocks/{id}/rental/exit
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of stocks</param>
		/// <param name="quantity">Quantity to rent</param>
		/// <returns>Success</returns>
		public async Task<ProductStock> App_catalog_stocks_rental_exitAsync(int appId, int id, int quantity, System.DateTimeOffset future_return_date, string comment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/productstocks/"+id+"/rental/exit?quantity="+quantity+"&future_return_date=" + future_return_date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&comment=" + (comment==null? "" : System.Uri.EscapeDataString(comment));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProductStock>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List purchases
		/// Get list of purchases
		/// App_documents_purchases_purchases_list apps/{appId}/purchases
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<Purchase[]> App_documents_purchases_purchases_listAsync(int appId, int offset, int limit, string search, App_documents_purchases_purchases_listFilters[] filters, App_documents_purchases_purchases_listOrder[] order, string[] expand, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"))+"&"+string.Join("&", expand.Select(z => $"expand={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Purchase[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a purchase
		/// Create a new purchase with an Organization. Relationship store notes, metadata and accounting settings parameters
		/// App_documents_purchases_purchases_create apps/{appId}/purchases
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="invoice">Invoice or receipt file (pdf or image)</param>
		/// <returns>Success</returns>
		public async Task<Purchase> App_documents_purchases_purchases_createAsync(
					int appId, 
					string invoice, 
					int account_id, 
					int supplier_organization_id, 
					string title, 
					string supplier_name, 
					int amount, 
					int amount_tax, 
					string currency, 
					string vat_detail, 
					System.DateOnly billed_at, 
					int comment, 
					string[] tags, 
					PurchaseVat_repayment vat_repayment, 
					System.DateOnly payment_deadline_at, 
					string payment_account_number, 
					string payment_routing_number, 
					string payment_swift, 
					string payment_iban, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases?invoice=" + (invoice==null? "" : System.Uri.EscapeDataString(invoice))+"&account_id="+account_id+"&supplier_organization_id="+supplier_organization_id+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&supplier_name=" + (supplier_name==null? "" : System.Uri.EscapeDataString(supplier_name))+"&amount="+amount+"&amount_tax="+amount_tax+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&vat_detail=" + (vat_detail==null? "" : System.Uri.EscapeDataString(vat_detail))+"&billed_at="+billed_at+"&comment="+comment+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&vat_repayment=" + vat_repayment+"&payment_deadline_at="+payment_deadline_at+"&payment_account_number=" + (payment_account_number==null? "" : System.Uri.EscapeDataString(payment_account_number))+"&payment_routing_number=" + (payment_routing_number==null? "" : System.Uri.EscapeDataString(payment_routing_number))+"&payment_swift=" + (payment_swift==null? "" : System.Uri.EscapeDataString(payment_swift))+"&payment_iban=" + (payment_iban==null? "" : System.Uri.EscapeDataString(payment_iban));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Purchase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete many purchases
		/// Delete many purchases
		/// App_documents_purchases_purchases_batch_delete apps/{appId}/purchases/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="ids">List of purchases ID</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_documents_purchases_purchases_batch_deleteAsync(int appId, int[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/batch?"+string.Join("&", ids.Select(z => $"ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update many purchases
		/// Create or update many purchases
		/// App_documents_purchases_purchases_batch apps/{appId}/purchases/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="data">List of purchases. With ID for update, without for insert</param>
		/// <returns>Success</returns>
		public async Task<Purchase> App_documents_purchases_purchases_batchAsync(int appId, Purchase[] data, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/batch?"+string.Join("&", data.Select(z => $"data={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Purchase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a list of purchases in pdf into a .zip file
		/// App_documents_purchases_purchases_download apps/{appId}/purchases/download
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="ids">Array of purchases id</param>
		/// <returns>Success</returns>
		public async Task App_documents_purchases_purchases_downloadAsync(int appId, int[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/download?"+string.Join("&", ids.Select(z => $"ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtain statistics about purchases
		/// App_documents_purchases_purchases_statistics apps/{appId}/purchases/statistics
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <returns>Success</returns>
		public async Task<string> App_documents_purchases_purchases_statisticsAsync(int appId, string search, App_documents_purchases_purchases_statisticsFilters[] filters, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/statistics?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a purchase
		/// Remove a purchase by id
		/// App_documents_purchases_purchases_delete apps/{appId}/purchases/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of purchase</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_documents_purchases_purchases_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a purchase
		/// Get an Purchase/Purchase object by Id
		/// App_documents_purchases_purchases_get apps/{appId}/purchases/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of purchase</param>
		/// <returns>Success</returns>
		public async Task<Purchase> App_documents_purchases_purchases_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Purchase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a purchase
		/// Update a purchase by id
		/// App_documents_purchases_purchases_update apps/{appId}/purchases/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of purchase</param>
		/// <param name="account_id">Auto-calculated by sales_lines total</param>
		/// <param name="amount">Auto-calculated by sales_lines total</param>
		/// <returns>Success</returns>
		public async Task<Purchase> App_documents_purchases_purchases_updateAsync(
					int appId, 
					int id, 
					int account_id, 
					int supplier_organization_id, 
					string title, 
					string supplier_name, 
					int amount, 
					int amount_tax, 
					string currency, 
					string vat_detail, 
					System.DateOnly billed_at, 
					int comment, 
					string[] tags, 
					PurchaseVat_repayment vat_repayment, 
					System.DateOnly payment_deadline_at, 
					string payment_account_number, 
					string payment_routing_number, 
					string payment_swift, 
					string payment_iban, 
					App_documents_purchases_purchases_updatePurchase_lines[] purchase_lines, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/"+id+"?account_id="+account_id+"&supplier_organization_id="+supplier_organization_id+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&supplier_name=" + (supplier_name==null? "" : System.Uri.EscapeDataString(supplier_name))+"&amount="+amount+"&amount_tax="+amount_tax+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&vat_detail=" + (vat_detail==null? "" : System.Uri.EscapeDataString(vat_detail))+"&billed_at="+billed_at+"&comment="+comment+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&vat_repayment=" + vat_repayment+"&payment_deadline_at="+payment_deadline_at+"&payment_account_number=" + (payment_account_number==null? "" : System.Uri.EscapeDataString(payment_account_number))+"&payment_routing_number=" + (payment_routing_number==null? "" : System.Uri.EscapeDataString(payment_routing_number))+"&payment_swift=" + (payment_swift==null? "" : System.Uri.EscapeDataString(payment_swift))+"&payment_iban=" + (payment_iban==null? "" : System.Uri.EscapeDataString(payment_iban))+"&"+string.Join("&", purchase_lines.Select(z => $"purchase_lines={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Purchase>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detach a file at a purchase
		/// App_documents_purchases_purchases_detach apps/{appId}/purchases/{id}/attach
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Purchase id</param>
		/// <param name="file_id">File to detach</param>
		/// <returns>Success</returns>
		public async Task App_documents_purchases_purchases_detachAsync(int appId, int id, int file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/"+id+"/attach?file_id="+file_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attach a file at a purchase
		/// App_documents_purchases_purchases_attach apps/{appId}/purchases/{id}/attach
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Purchase id</param>
		/// <param name="file">File to attach</param>
		/// <returns>Success</returns>
		public async Task App_documents_purchases_purchases_attachAsync(int appId, int id, string file, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/"+id+"/attach?file=" + (file==null? "" : System.Uri.EscapeDataString(file));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download the purchase as pdf
		/// App_documents_purchases_purchases_original apps/{appId}/purchases/{id}/original
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Purchase id to download</param>
		/// <returns>Success</returns>
		public async Task App_documents_purchases_purchases_originalAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/"+id+"/original";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download purchase as jpeg
		/// App_documents_purchases_purchases_preview apps/{appId}/purchases/{id}/preview.jpg
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Purchase id to download</param>
		/// <returns>Success</returns>
		public async Task App_documents_purchases_purchases_previewAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/"+id+"/preview.jpg";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a tag on a purchase
		/// App_documents_purchases_purchases_untag apps/{appId}/purchases/{id}/tag
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Purchase id</param>
		/// <param name="tag">Tag to delete</param>
		/// <returns>Success</returns>
		public async Task App_documents_purchases_purchases_untagAsync(int appId, int id, string tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/"+id+"/tag?tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a tag on a purchase
		/// App_documents_purchases_purchases_tag apps/{appId}/purchases/{id}/tag
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Purchase id</param>
		/// <param name="tag">Tag to add</param>
		/// <returns>Success</returns>
		public async Task App_documents_purchases_purchases_tagAsync(int appId, int id, string tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/"+id+"/tag?tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show purchase thumbnail as jpeg
		/// App_documents_purchases_purchases_thumbnail apps/{appId}/purchases/{id}/thumbnail.jpg
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Purchase id to download</param>
		/// <returns>Success</returns>
		public async Task App_documents_purchases_purchases_thumbnailAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/"+id+"/thumbnail.jpg";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the status of an invoice
		/// App_documents_purchases_purchases_updatestatus apps/{appId}/purchases/{id}/updatestatus
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of purchase</param>
		/// <param name="status">Status to update</param>
		/// <returns>Success</returns>
		public async Task App_documents_purchases_purchases_updatestatusAsync(int appId, int id, App_documents_purchases_purchases_updatestatusStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/purchases/"+id+"/updatestatus?status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List quotes
		/// Get list of quotes
		/// App_documents_sales_quotes_list apps/{appId}/quotes
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<Quote[]> App_documents_sales_quotes_listAsync(int appId, int offset, int limit, string search, App_documents_sales_quotes_listFilters[] filters, App_documents_sales_quotes_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quote[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a quote
		/// Create a new quote with an Organization or a Person. Relationship store notes, metadata and accounting settings parameters
		/// App_documents_sales_quotes_create apps/{appId}/quotes
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="columns">List columns to display</param>
		/// <param name="reference">Free variable not display in document</param>
		/// <param name="legal_notice">Legal mentions</param>
		/// <param name="number_from_other_software">Invoices imported from another software are not counted in the numbering and are not locked</param>
		/// <returns>Success</returns>
		public async Task<Quote> App_documents_sales_quotes_createAsync(
					int appId, 
					App_documents_sales_quotes_createContact_infos contact_infos, 
					App_documents_sales_quotes_createThird_account third_account, 
					string title, 
					SalesLine[] content, 
					App_documents_sales_quotes_createColumns columns, 
					string reference, 
					App_documents_sales_quotes_createDiscount discount, 
					string currency, 
					string legal_notice, 
					int bank_details_id, 
					App_documents_sales_quotes_createVat_exemption vat_exemption, 
					string[] tags, 
					string[] metadata, 
					App_documents_sales_quotes_createDownpayment_request downpayment_request, 
					System.DateTimeOffset commercialvalidity_deadline, 
					string number_from_other_software, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes?contact_infos=" + contact_infos+"&third_account=" + third_account+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&"+string.Join("&", content.Select(z => $"content={z}"))+"&columns=" + columns+"&reference=" + (reference==null? "" : System.Uri.EscapeDataString(reference))+"&discount=" + discount+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&legal_notice=" + (legal_notice==null? "" : System.Uri.EscapeDataString(legal_notice))+"&bank_details_id="+bank_details_id+"&vat_exemption=" + vat_exemption+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"))+"&downpayment_request=" + downpayment_request+"&commercialvalidity_deadline=" + commercialvalidity_deadline.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&number_from_other_software=" + (number_from_other_software==null? "" : System.Uri.EscapeDataString(number_from_other_software));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete many quotes
		/// Delete many quotes
		/// App_documents_sales_quotes_batch_delete apps/{appId}/quotes/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="ids">List of quotes ID</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_documents_sales_quotes_batch_deleteAsync(int appId, int[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/batch?"+string.Join("&", ids.Select(z => $"ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update many quotes
		/// Create or update many quotes
		/// App_documents_sales_quotes_batch apps/{appId}/quotes/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="data">List of quotes. With ID for update, without for insert</param>
		/// <returns>Success</returns>
		public async Task<Quote> App_documents_sales_quotes_batchAsync(int appId, Quote[] data, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/batch?"+string.Join("&", data.Select(z => $"data={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a list of quotes in pdf into a .zip file
		/// App_documents_sales_quotes_download apps/{appId}/quotes/download
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="ids">Array of quotes id</param>
		/// <param name="template">Template name to generate document</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_quotes_downloadAsync(int appId, int[] ids, App_documents_sales_invoices_downloadTemplate template, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/download?"+string.Join("&", ids.Select(z => $"ids={z}"))+"&template=" + template;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Regenerate pdf and recalcul amounts of quote
		/// App_documents_sales_quotes_fresh apps/{appId}/quotes/fresh
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="ids">Array of quotes id</param>
		/// <returns>Success</returns>
		public async Task<string> App_documents_sales_quotes_freshAsync(int appId, int[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/fresh?"+string.Join("&", ids.Select(z => $"ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update many quotes
		/// Create or update many quotes
		/// App_documents_sales_quotes_invoices apps/{appId}/quotes/invoice
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="ids">Array of quotes id</param>
		/// <returns>Success</returns>
		public async Task<Invoice> App_documents_sales_quotes_invoicesAsync(int appId, int[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/invoice?"+string.Join("&", ids.Select(z => $"ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the next quote number for preview
		/// App_documents_sales_quotes_nextnumber apps/{appId}/quotes/nextnumber
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="written_at">Write date</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_quotes_nextnumberAsync(int appId, System.DateTimeOffset written_at, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/nextnumber?written_at=" + written_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtain statistics about quotes
		/// App_documents_sales_quotes_statistics apps/{appId}/quotes/statistics
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <returns>Success</returns>
		public async Task<string> App_documents_sales_quotes_statisticsAsync(int appId, string search, App_documents_sales_quotes_statisticsFilters[] filters, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/statistics?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a quote
		/// Remove a quote by id : only for draft
		/// App_documents_sales_quotes_delete apps/{appId}/quotes/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of quote</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_documents_sales_quotes_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a quote
		/// Get a Sales/Quote object by Id
		/// App_documents_sales_quotes_get apps/{appId}/quotes/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of quote</param>
		/// <returns>Success</returns>
		public async Task<Quote> App_documents_sales_quotes_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a quote
		/// Update a quote by id
		/// App_documents_sales_quotes_update apps/{appId}/quotes/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of quote</param>
		/// <param name="columns">List columns to display</param>
		/// <param name="reference">Free variable not display in document</param>
		/// <param name="legal_notice">Legal mentions</param>
		/// <returns>Success</returns>
		public async Task<Quote> App_documents_sales_quotes_updateAsync(
					int appId, 
					int id, 
					App_documents_sales_quotes_updateContact_infos contact_infos, 
					App_documents_sales_quotes_updateThird_account third_account, 
					string title, 
					SalesLine[] content, 
					App_documents_sales_quotes_updateColumns columns, 
					string reference, 
					App_documents_sales_quotes_updateDiscount discount, 
					string currency, 
					string legal_notice, 
					int bank_details_id, 
					App_documents_sales_quotes_updateVat_exemption vat_exemption, 
					string[] tags, 
					string[] metadata, 
					App_documents_sales_quotes_updateDownpayment_request downpayment_request, 
					System.DateTimeOffset commercialvalidity_deadline, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"?contact_infos=" + contact_infos+"&third_account=" + third_account+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&"+string.Join("&", content.Select(z => $"content={z}"))+"&columns=" + columns+"&reference=" + (reference==null? "" : System.Uri.EscapeDataString(reference))+"&discount=" + discount+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&legal_notice=" + (legal_notice==null? "" : System.Uri.EscapeDataString(legal_notice))+"&bank_details_id="+bank_details_id+"&vat_exemption=" + vat_exemption+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"))+"&downpayment_request=" + downpayment_request+"&commercialvalidity_deadline=" + commercialvalidity_deadline.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detach a file at a quote
		/// App_documents_sales_quotes_detach apps/{appId}/quotes/{id}/attach
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Quote id</param>
		/// <param name="file_id">File to detach</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_quotes_detachAsync(int appId, int id, int file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"/attach?file_id="+file_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attach a file at a quote
		/// App_documents_sales_quotes_attach apps/{appId}/quotes/{id}/attach
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Quote id</param>
		/// <param name="file">File to attach</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_quotes_attachAsync(int appId, int id, string file, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"/attach?file=" + (file==null? "" : System.Uri.EscapeDataString(file));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Transform the quote in a downpayment invoice
		/// App_documents_sales_quotes_downpayment apps/{appId}/quotes/{id}/downpayment
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="percent">Percentage of downpayment in cents (100 = 1%)</param>
		/// <returns>Success</returns>
		public async Task<Invoice> App_documents_sales_quotes_downpaymentAsync(int appId, int id, int percent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"/downpayment?percent="+percent;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Duplicate a quote
		/// App_documents_sales_quotes_duplicate apps/{appId}/quotes/{id}/duplicate
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Quote id to duplicate</param>
		/// <returns>Success</returns>
		public async Task<Quote> App_documents_sales_quotes_duplicateAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"/duplicate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Finalize a quote
		/// App_documents_sales_quotes_finalize apps/{appId}/quotes/{id}/finalize
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Quote id to finalize</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_quotes_finalizeAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"/finalize";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Transform the quote in invoice
		/// App_documents_sales_quotes_invoice apps/{appId}/quotes/{id}/invoice
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Quote id to transform</param>
		/// <returns>Success</returns>
		public async Task<Invoice> App_documents_sales_quotes_invoiceAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"/invoice";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download the quote as pdf
		/// App_documents_sales_quotes_pdf apps/{appId}/quotes/{id}/pdf
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Quote id to download</param>
		/// <param name="template">Template name to generate document</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_quotes_pdfAsync(int appId, int id, App_documents_sales_invoices_downloadTemplate template, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"/pdf?template=" + template;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download quote as jpeg
		/// App_documents_sales_quotes_preview apps/{appId}/quotes/{id}/preview.jpg
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Quote id to download</param>
		/// <param name="template">Template name to generate document</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_quotes_previewAsync(int appId, int id, App_documents_sales_invoices_downloadTemplate template, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"/preview.jpg?template=" + template;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Transform the quote into a situation invoice
		/// App_documents_sales_quotes_situation_invoice apps/{appId}/quotes/{id}/situation_invoice
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Quote id to transform</param>
		/// <param name="progress">Percentage of progress in cents (100 = 1%)</param>
		/// <returns>Success</returns>
		public async Task<Invoice> App_documents_sales_quotes_situation_invoiceAsync(int appId, int id, int progress, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"/situation_invoice?progress="+progress;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a tag on a quote
		/// App_documents_sales_quotes_untag apps/{appId}/quotes/{id}/tag
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Quote id</param>
		/// <param name="tag">Tag to delete</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_quotes_untagAsync(int appId, int id, string tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"/tag?tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a tag on an quote
		/// App_documents_sales_quotes_tag apps/{appId}/quotes/{id}/tag
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Quote id</param>
		/// <param name="tag">Tag to add</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_quotes_tagAsync(int appId, int id, string tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"/tag?tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the status of a quote
		/// App_documents_sales_quotes_updatestatus apps/{appId}/quotes/{id}/updatestatus
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Invoice id to finalize</param>
		/// <param name="status">Status to update</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_quotes_updatestatusAsync(int appId, int id, App_documents_sales_quotes_updatestatusStatus status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"/updatestatus?status=" + status;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download quote as jpeg
		/// App_documents_sales_quotes_yousign_preview apps/{appId}/quotes/{id}/yousign/preview.jpg
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Quote id to download</param>
		/// <param name="template">Template name to generate document</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_quotes_yousign_previewAsync(int appId, int id, App_documents_sales_invoices_downloadTemplate template, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/quotes/"+id+"/yousign/preview.jpg?template=" + template;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove payments by an object
		/// Remove all payments of a parent object
		/// App_payments_reconciliation_unreconcile apps/{appId}/reconcile
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="type">Object to unpay with this payment</param>
		/// <param name="id">Transaction, sales invoice or purchase invoice id to unreconcile</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_payments_reconciliation_unreconcileAsync(int appId, App_payments_reconciliation_unreconcileType type, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/reconcile?type=" + type+"&id="+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reconcile a transaction or a document
		/// Create a new payments and categorizations by one-to-many
		/// App_payments_reconciliation_reconcile apps/{appId}/reconcile
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="replace_all">Remove all previous reconciliations</param>
		/// <param name="type">Object to pay with these payments and categorizations</param>
		/// <param name="id">Transaction, sales invoice or purchase invoice id to reconcile</param>
		/// <param name="paid_at">Payment date for cashdesk or waiting entries</param>
		/// <param name="rule">Create an auto-reconciliation rule</param>
		/// <returns>Success</returns>
		public async Task<Payment> App_payments_reconciliation_reconcileAsync(int appId, bool replace_all, App_payments_reconciliation_unreconcileType type, int id, App_payments_reconciliation_reconcileMovements movements, System.DateTimeOffset paid_at, App_payments_reconciliation_reconcileRule rule, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/reconcile?replace_all="+replace_all+"&type=" + type+"&id="+id+"&movements=" + movements+"&paid_at=" + paid_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&rule=" + rule;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Payment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reconcile several transactions
		/// Create new payments and categorizations by one-to-many
		/// App_payments_reconciliation_batch apps/{appId}/reconcile/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="data">array of reconciliation params</param>
		/// <returns>Success</returns>
		public async Task<Quote> App_payments_reconciliation_batchAsync(int appId, Reconciliation[] data, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/reconcile/batch?"+string.Join("&", data.Select(z => $"data={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Quote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List RecurringInvoice
		/// App_documents_sales_recurringinvoices_list apps/{appId}/recurringinvoices
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<RecurringInvoice[]> App_documents_sales_recurringinvoices_listAsync(int appId, int offset, int limit, string search, App_documents_sales_recurringinvoices_listFilters[] filters, App_documents_sales_recurringinvoices_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/recurringinvoices?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecurringInvoice[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a RecurringInvoice
		/// App_documents_sales_recurringinvoices_create apps/{appId}/recurringinvoices
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="columns">List columns to display</param>
		/// <param name="legal_notice">Legal mentions</param>
		/// <param name="payment_period">Days count before considere this invoice as late</param>
		/// <returns>Success</returns>
		public async Task<RecurringInvoice> App_documents_sales_recurringinvoices_createAsync(
					int appId, 
					App_documents_sales_recurringinvoices_createContact_infos contact_infos, 
					string title, 
					SalesLine[] content, 
					App_documents_sales_recurringinvoices_createColumns columns, 
					string currency, 
					string legal_notice, 
					int bank_details_id, 
					App_documents_sales_recurringinvoices_createVat_exemption vat_exemption, 
					string[] tags, 
					string[] metadata, 
					int payment_period, 
					System.DateTimeOffset next_invoice_at, 
					System.DateTimeOffset end_at, 
					int frequency_count, 
					App_documents_sales_recurringinvoices_createFrequency_duration frequency_duration, 
					int discount, 
					App_documents_sales_recurringinvoices_createDiscount_mode discount_mode, 
					System.DateTimeOffset discount_start_at, 
					System.DateTimeOffset discount_end_at, 
					string details, 
					App_documents_sales_recurringinvoices_createOrders_plan[] orders_plan, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/recurringinvoices?contact_infos=" + contact_infos+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&"+string.Join("&", content.Select(z => $"content={z}"))+"&columns=" + columns+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&legal_notice=" + (legal_notice==null? "" : System.Uri.EscapeDataString(legal_notice))+"&bank_details_id="+bank_details_id+"&vat_exemption=" + vat_exemption+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"))+"&payment_period="+payment_period+"&next_invoice_at=" + next_invoice_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_at=" + end_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&frequency_count="+frequency_count+"&frequency_duration=" + frequency_duration+"&discount="+discount+"&discount_mode=" + discount_mode+"&discount_start_at=" + discount_start_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&discount_end_at=" + discount_end_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&details=" + (details==null? "" : System.Uri.EscapeDataString(details))+"&"+string.Join("&", orders_plan.Select(z => $"orders_plan={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecurringInvoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete many RecurringInvoice
		/// Delete many RecurringInvoice
		/// App_documents_sales_recurringinvoices_batch_delete apps/{appId}/recurringinvoices/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="ids">List of RecurringInvoice ID</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_documents_sales_recurringinvoices_batch_deleteAsync(int appId, int[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/recurringinvoices/batch?"+string.Join("&", ids.Select(z => $"ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update many RecurringInvoice
		/// Create or update many RecurringInvoice
		/// App_documents_sales_recurringinvoices_batch apps/{appId}/recurringinvoices/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="data">List of RecurringInvoice. With ID for update, without for insert</param>
		/// <returns>Success</returns>
		public async Task<RecurringInvoice> App_documents_sales_recurringinvoices_batchAsync(int appId, RecurringInvoice[] data, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/recurringinvoices/batch?"+string.Join("&", data.Select(z => $"data={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecurringInvoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get json of periods_formats for a date.
		/// Get json of periods_formats for a date. If request parameter date is null, returns periods_formats for today.
		/// App_documents_sales_recurringinvoices_getPeriods apps/{appId}/recurringinvoices/periods
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="date">Date of the invoice</param>
		/// <returns>Success</returns>
		public async Task<string[]> App_documents_sales_recurringinvoices_getPeriodsAsync(int appId, System.DateTimeOffset date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/recurringinvoices/periods?date=" + date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a RecurringInvoice
		/// App_documents_sales_recurringinvoices_delete apps/{appId}/recurringinvoices/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of RecurringInvoice</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_recurringinvoices_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/recurringinvoices/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a RecurringInvoice
		/// App_documents_sales_recurringinvoices_get apps/{appId}/recurringinvoices/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of RecurringInvoice</param>
		/// <returns>Success</returns>
		public async Task<RecurringInvoice> App_documents_sales_recurringinvoices_getAsync(int appId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/recurringinvoices/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecurringInvoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a RecurringInvoice
		/// App_documents_sales_recurringinvoices_update apps/{appId}/recurringinvoices/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of RecurringInvoice</param>
		/// <param name="columns">List columns to display</param>
		/// <param name="legal_notice">Legal mentions</param>
		/// <param name="payment_period">Days count before considere this invoice as late</param>
		/// <returns>Success</returns>
		public async Task<RecurringInvoice> App_documents_sales_recurringinvoices_updateAsync(
					int appId, 
					int id, 
					App_documents_sales_recurringinvoices_updateContact_infos contact_infos, 
					string title, 
					SalesLine[] content, 
					App_documents_sales_recurringinvoices_updateColumns columns, 
					string currency, 
					string legal_notice, 
					int bank_details_id, 
					App_documents_sales_recurringinvoices_updateVat_exemption vat_exemption, 
					string[] tags, 
					string[] metadata, 
					int payment_period, 
					System.DateTimeOffset next_invoice_at, 
					System.DateTimeOffset end_at, 
					int frequency_count, 
					App_documents_sales_recurringinvoices_createFrequency_duration frequency_duration, 
					int discount, 
					App_documents_sales_recurringinvoices_createDiscount_mode discount_mode, 
					System.DateTimeOffset discount_start_at, 
					System.DateTimeOffset discount_end_at, 
					string details, 
					App_documents_sales_recurringinvoices_updateOrders_plan[] orders_plan, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/recurringinvoices/"+id+"?contact_infos=" + contact_infos+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&"+string.Join("&", content.Select(z => $"content={z}"))+"&columns=" + columns+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&legal_notice=" + (legal_notice==null? "" : System.Uri.EscapeDataString(legal_notice))+"&bank_details_id="+bank_details_id+"&vat_exemption=" + vat_exemption+"&"+string.Join("&", tags.Select(z => $"tags={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"))+"&payment_period="+payment_period+"&next_invoice_at=" + next_invoice_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_at=" + end_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&frequency_count="+frequency_count+"&frequency_duration=" + frequency_duration+"&discount="+discount+"&discount_mode=" + discount_mode+"&discount_start_at=" + discount_start_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&discount_end_at=" + discount_end_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&details=" + (details==null? "" : System.Uri.EscapeDataString(details))+"&"+string.Join("&", orders_plan.Select(z => $"orders_plan={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecurringInvoice>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Preview next invoices generations
		/// App_documents_sales_recurringinvoices_plan apps/{appId}/recurringinvoices/{id}/plan
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Recurring invoice id</param>
		/// <param name="until">Until date to generate plan</param>
		/// <returns>Success</returns>
		public async Task<Invoice[]> App_documents_sales_recurringinvoices_planAsync(int appId, int id, System.DateTimeOffset until, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/recurringinvoices/"+id+"/plan?until=" + until.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Invoice[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List relationships
		/// List all relationships
		/// App_contacts_relationships_list apps/{appId}/relationships
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<Relationship[]> App_contacts_relationships_listAsync(int appId, int limit, string search, App_contacts_relationships_listFilters[] filters, App_contacts_relationships_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/relationships?limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Relationship[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a relationship
		/// Get a relationship by id
		/// App_contacts_relationships_get apps/{appId}/relationships/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of Relationship</param>
		/// <returns>Success</returns>
		public async Task<Relationship> App_contacts_relationships_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/relationships/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Relationship>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a relationship
		/// Update a relationship by id
		/// App_contacts_relationships_update apps/{appId}/relationships/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of Relationship</param>
		/// <param name="reference">Accounting number if it's specific</param>
		/// <returns>Success</returns>
		public async Task<Relationship> App_contacts_relationships_updateAsync(
					int appId, 
					int id, 
					bool is_customer, 
					bool is_supplier, 
					bool is_prospect, 
					int importance_level, 
					int rating, 
					int balance_initial_amount, 
					bool is_notifying, 
					string note, 
					string reference, 
					string tags, 
					string discount, 
					string details, 
					string[] metadata, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/relationships/"+id+"?is_customer="+is_customer+"&is_supplier="+is_supplier+"&is_prospect="+is_prospect+"&importance_level="+importance_level+"&rating="+rating+"&balance_initial_amount="+balance_initial_amount+"&is_notifying="+is_notifying+"&note=" + (note==null? "" : System.Uri.EscapeDataString(note))+"&reference=" + (reference==null? "" : System.Uri.EscapeDataString(reference))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&discount=" + (discount==null? "" : System.Uri.EscapeDataString(discount))+"&details=" + (details==null? "" : System.Uri.EscapeDataString(details))+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Relationship>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detach a file
		/// App_contacts_relationships_detach apps/{appId}/relationships/{id}/attach
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="file_id">File to detach</param>
		/// <returns>Success</returns>
		public async Task App_contacts_relationships_detachAsync(int appId, int id, int file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/relationships/"+id+"/attach?file_id="+file_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attach a file
		/// App_contacts_relationships_attach apps/{appId}/relationships/{id}/attach
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="file">File to attach</param>
		/// <returns>Success</returns>
		public async Task App_contacts_relationships_attachAsync(int appId, int id, string file, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/relationships/"+id+"/attach?file=" + (file==null? "" : System.Uri.EscapeDataString(file));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset all data
		/// Reset everything
		/// App_reset apps/{appId}/reset
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_resetAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List rules
		/// App_rules_list apps/{appId}/rules/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<Rule[]> App_rules_listAsync(int appId, int offset, int limit, string search, App_rules_listFilters[] filters, App_rules_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/rules/?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Rule[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a rule
		/// App_rules_create apps/{appId}/rules/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="on_event">Event like model.event, event in [saved, created, updated, deleted]</param>
		/// <returns>Success</returns>
		public async Task<Rule> App_rules_createAsync(int appId, string[] conditions, string on_event, string parameter, string value, int priority, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/rules/?"+string.Join("&", conditions.Select(z => $"conditions={System.Uri.EscapeDataString(z.ToString())}"))+"&on_event=" + (on_event==null? "" : System.Uri.EscapeDataString(on_event))+"&parameter=" + (parameter==null? "" : System.Uri.EscapeDataString(parameter))+"&value=" + (value==null? "" : System.Uri.EscapeDataString(value))+"&priority="+priority;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Rule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Execute all rules
		/// App_rules_execute_on apps/{appId}/rules/execute_on
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<Rule> App_rules_execute_onAsync(int appId, string model, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/rules/execute_on?model=" + (model==null? "" : System.Uri.EscapeDataString(model));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Rule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a rule
		/// App_rules_delete apps/{appId}/rules/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_rules_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/rules/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a rule
		/// App_rules_get apps/{appId}/rules/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<Rule> App_rules_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/rules/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Rule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a rule
		/// App_rules_update apps/{appId}/rules/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<Rule> App_rules_updateAsync(int appId, int id, string[] conditions, string on_event, string parameter, string value, int priority, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/rules/"+id+"?"+string.Join("&", conditions.Select(z => $"conditions={System.Uri.EscapeDataString(z.ToString())}"))+"&on_event=" + (on_event==null? "" : System.Uri.EscapeDataString(on_event))+"&parameter=" + (parameter==null? "" : System.Uri.EscapeDataString(parameter))+"&value=" + (value==null? "" : System.Uri.EscapeDataString(value))+"&priority="+priority;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Rule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List sales documents models
		/// App_documents_sales_models_list apps/{appId}/salesdocumentmodels
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<SalesDocumentModel[]> App_documents_sales_models_listAsync(int appId, int offset, int limit, string search, App_documents_sales_models_listFilters[] filters, App_documents_sales_models_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/salesdocumentmodels?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesDocumentModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a sales document model
		/// App_documents_sales_models_create apps/{appId}/salesdocumentmodels
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="columns">List columns to display</param>
		/// <returns>Success</returns>
		public async Task<SalesDocumentModel> App_documents_sales_models_createAsync(int appId, string name, string title, SalesLine[] content, App_documents_sales_models_createColumns columns, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/salesdocumentmodels?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&"+string.Join("&", content.Select(z => $"content={z}"))+"&columns=" + columns;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesDocumentModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a sales document model
		/// App_documents_sales_models_delete apps/{appId}/salesdocumentmodels/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of SalesDocumentModel</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_models_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/salesdocumentmodels/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a sales document model
		/// App_documents_sales_models_get apps/{appId}/salesdocumentmodels/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of SalesDocumentModel</param>
		/// <returns>Success</returns>
		public async Task<SalesDocumentModel> App_documents_sales_models_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/salesdocumentmodels/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesDocumentModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a sales document model
		/// App_documents_sales_models_update apps/{appId}/salesdocumentmodels/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of SalesDocumentModel</param>
		/// <param name="columns">List columns to display</param>
		/// <returns>Success</returns>
		public async Task<SalesDocumentModel> App_documents_sales_models_updateAsync(int appId, int id, string name, string title, SalesLine[] content, App_documents_sales_models_updateColumns columns, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/salesdocumentmodels/"+id+"?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&title=" + (title==null? "" : System.Uri.EscapeDataString(title))+"&"+string.Join("&", content.Select(z => $"content={z}"))+"&columns=" + columns;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SalesDocumentModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List SEPAMandate
		/// App_payments_sepamandates_list apps/{appId}/sepamandates/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<SEPAMandate[]> App_payments_sepamandates_listAsync(int appId, int offset, int limit, string search, App_payments_sepamandates_listFilters[] filters, App_payments_sepamandates_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sepamandates/?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SEPAMandate[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a SEPAMandate
		/// App_payments_sepamandates_create apps/{appId}/sepamandates/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<SEPAMandate> App_payments_sepamandates_createAsync(int appId, int customer_organization_id, int customer_person_id, int old_mandate_id, string mandate_id, System.DateTimeOffset signed_at, string electronic_signature, string customer_name, string iban, string bic, bool is_first, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sepamandates/?customer_organization_id="+customer_organization_id+"&customer_person_id="+customer_person_id+"&old_mandate_id="+old_mandate_id+"&mandate_id=" + (mandate_id==null? "" : System.Uri.EscapeDataString(mandate_id))+"&signed_at=" + signed_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&electronic_signature=" + (electronic_signature==null? "" : System.Uri.EscapeDataString(electronic_signature))+"&customer_name=" + (customer_name==null? "" : System.Uri.EscapeDataString(customer_name))+"&iban=" + (iban==null? "" : System.Uri.EscapeDataString(iban))+"&bic=" + (bic==null? "" : System.Uri.EscapeDataString(bic))+"&is_first="+is_first;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SEPAMandate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Preview sepa credit transfer file
		/// App_payments_sepacredittransfer_preview apps/{appId}/sepamandates/credittransfer
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<string> App_payments_sepacredittransfer_previewAsync(int appId, int[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sepamandates/credittransfer?"+string.Join("&", ids.Select(z => $"ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Preview sepa credit transfer file
		/// App_payments_sepacredittransfer_download apps/{appId}/sepamandates/credittransfer
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="amounts">Optional array with amounts (keys must to correspond to ids)</param>
		/// <returns>Success</returns>
		public async Task App_payments_sepacredittransfer_downloadAsync(int appId, int[] ids, int[] amounts, string debtor_name, string debtor_iban, string debtor_bic, int btchBookg, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sepamandates/credittransfer?"+string.Join("&", ids.Select(z => $"ids={z}"))+"&"+string.Join("&", amounts.Select(z => $"amounts={z}"))+"&debtor_name=" + (debtor_name==null? "" : System.Uri.EscapeDataString(debtor_name))+"&debtor_iban=" + (debtor_iban==null? "" : System.Uri.EscapeDataString(debtor_iban))+"&debtor_bic=" + (debtor_bic==null? "" : System.Uri.EscapeDataString(debtor_bic))+"&btchBookg="+btchBookg;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Preview sepa direct debit file
		/// App_payments_sepadirectdebit_preview apps/{appId}/sepamandates/directdebit
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<string> App_payments_sepadirectdebit_previewAsync(int appId, int[] invoices_ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sepamandates/directdebit?"+string.Join("&", invoices_ids.Select(z => $"invoices_ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download sepa direct debit file
		/// App_payments_sepadirectdebit_download apps/{appId}/sepamandates/directdebit
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="amounts">Optional array with amounts (keys must to correspond to invoices_ids)</param>
		/// <returns>Success</returns>
		public async Task App_payments_sepadirectdebit_downloadAsync(int appId, int[] invoices_ids, int[] amounts, string creditor_name, string creditor_iban, string creditor_bic, string creditor_ics, System.DateTimeOffset date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sepamandates/directdebit?"+string.Join("&", invoices_ids.Select(z => $"invoices_ids={z}"))+"&"+string.Join("&", amounts.Select(z => $"amounts={z}"))+"&creditor_name=" + (creditor_name==null? "" : System.Uri.EscapeDataString(creditor_name))+"&creditor_iban=" + (creditor_iban==null? "" : System.Uri.EscapeDataString(creditor_iban))+"&creditor_bic=" + (creditor_bic==null? "" : System.Uri.EscapeDataString(creditor_bic))+"&creditor_ics=" + (creditor_ics==null? "" : System.Uri.EscapeDataString(creditor_ics))+"&date=" + date.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a SEPAMandate
		/// App_payments_sepamandates_delete apps/{appId}/sepamandates/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of SEPAMandate</param>
		/// <returns>Success</returns>
		public async Task App_payments_sepamandates_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sepamandates/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a SEPAMandate
		/// App_payments_sepamandates_get apps/{appId}/sepamandates/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of SEPAMandate</param>
		/// <returns>Success</returns>
		public async Task<SEPAMandate> App_payments_sepamandates_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sepamandates/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SEPAMandate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a SEPAMandate
		/// App_payments_sepamandates_update apps/{appId}/sepamandates/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of SEPAMandate</param>
		/// <returns>Success</returns>
		public async Task<SEPAMandate> App_payments_sepamandates_updateAsync(int appId, int id, int customer_organization_id, int customer_person_id, int old_mandate_id, string mandate_id, System.DateTimeOffset signed_at, string electronic_signature, string customer_name, string iban, string bic, bool is_first, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sepamandates/"+id+"?customer_organization_id="+customer_organization_id+"&customer_person_id="+customer_person_id+"&old_mandate_id="+old_mandate_id+"&mandate_id=" + (mandate_id==null? "" : System.Uri.EscapeDataString(mandate_id))+"&signed_at=" + signed_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&electronic_signature=" + (electronic_signature==null? "" : System.Uri.EscapeDataString(electronic_signature))+"&customer_name=" + (customer_name==null? "" : System.Uri.EscapeDataString(customer_name))+"&iban=" + (iban==null? "" : System.Uri.EscapeDataString(iban))+"&bic=" + (bic==null? "" : System.Uri.EscapeDataString(bic))+"&is_first="+is_first;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SEPAMandate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Ping Stripe webhook endpoint
		/// App_services_stripe_webhook_ping apps/{appId}/services/stripe/webhook
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_services_stripe_webhook_pingAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/services/stripe/webhook";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Webhook for Stripe
		/// App_services_stripe_webhook_handle apps/{appId}/services/stripe/webhook
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_services_stripe_webhook_handleAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/services/stripe/webhook";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Webhook for Yousign
		/// App_services_yousign_webhook_handle apps/{appId}/services/yousign/webhook
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_services_yousign_webhook_handleAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/services/yousign/webhook";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get app config
		/// Get a configuration variable by key
		/// App_settings_get apps/{appId}/settings
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<string> App_settings_getAsync(int appId, string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/settings?key=" + (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update app config
		/// General settings of an app. Can be modified in app
		/// App_settings_update apps/{appId}/settings
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="value">Value can be a primitive or a file</param>
		/// <returns>Success</returns>
		public async Task<ApiResponse> App_settings_updateAsync(int appId, System.Collections.Generic.Dictionary<string, string> settings, string key, string value, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/settings?settings=" + settings+"&key=" + (key==null? "" : System.Uri.EscapeDataString(key))+"&value=" + (value==null? "" : System.Uri.EscapeDataString(value));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a signature
		/// Create a new signature
		/// App_documents_sales_signature_create apps/{appId}/signature
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_documents_sales_signature_createAsync(int appId, int documentId, string email, string firstname, string lastname, string phone, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/signature?documentId="+documentId+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&firstname=" + (firstname==null? "" : System.Uri.EscapeDataString(firstname))+"&lastname=" + (lastname==null? "" : System.Uri.EscapeDataString(lastname))+"&phone=" + (phone==null? "" : System.Uri.EscapeDataString(phone));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activate the invitation for sponsorship
		/// App_sponsorship_activate apps/{appId}/sponsorship/activate
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<string> App_sponsorship_activateAsync(int appId, string referrer_app_id, string recipient, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sponsorship/activate?referrer_app_id=" + (referrer_app_id==null? "" : System.Uri.EscapeDataString(referrer_app_id))+"&recipient=" + (recipient==null? "" : System.Uri.EscapeDataString(recipient));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send an email
		/// App_sponsorship_send_invitation apps/{appId}/sponsorship/invite
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_sponsorship_send_invitationAsync(int appId, string from, string recipient, string referrer_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sponsorship/invite?from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&recipient=" + (recipient==null? "" : System.Uri.EscapeDataString(recipient))+"&referrer_name=" + (referrer_name==null? "" : System.Uri.EscapeDataString(referrer_name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all referrals for a referrer
		/// App_sponsorship_referrals apps/{appId}/sponsorship/list/referrals
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<string> App_sponsorship_referralsAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sponsorship/list/referrals";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the referrer information for my app
		/// App_sponsorship_referrer apps/{appId}/sponsorship/referrer
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<string> App_sponsorship_referrerAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sponsorship/referrer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the referrer url for my app
		/// App_sponsorship_referrer_url apps/{appId}/sponsorship/referrer/url
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<string> App_sponsorship_referrer_urlAsync(int appId, string referrer_name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/sponsorship/referrer/url?referrer_name=" + (referrer_name==null? "" : System.Uri.EscapeDataString(referrer_name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtain statistics about sales
		/// App_statistics_charts_get apps/{appId}/statistics/charts/{type}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="methods">Array of [object_property, calcul]</param>
		/// <param name="show_details">Recovers the details of the calculations</param>
		/// <returns>Success</returns>
		public async Task<string[]> App_statistics_charts_getAsync(
					int appId, 
					string type, 
					int count, 
					App_statistics_charts_getPeriod period, 
					System.DateTimeOffset start_at, 
					App_statistics_charts_getObject _object, 
					string object_property, 
					App_statistics_charts_getCalcul calcul, 
					string[] methods, 
					string object_date_property, 
					string[] group_by, 
					string group_by_object_name, 
					int[] exclude_keys, 
					string search, 
					string filters, 
					bool show_details, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/statistics/charts/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&count="+count+"&period=" + period+"&start_at=" + start_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&object=" + _object+"&object_property=" + (object_property==null? "" : System.Uri.EscapeDataString(object_property))+"&calcul=" + calcul+"&"+string.Join("&", methods.Select(z => $"methods={System.Uri.EscapeDataString(z.ToString())}"))+"&object_date_property=" + (object_date_property==null? "" : System.Uri.EscapeDataString(object_date_property))+"&"+string.Join("&", group_by.Select(z => $"group_by={System.Uri.EscapeDataString(z.ToString())}"))+"&group_by_object_name=" + (group_by_object_name==null? "" : System.Uri.EscapeDataString(group_by_object_name))+"&"+string.Join("&", exclude_keys.Select(z => $"exclude_keys={z}"))+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&filters=" + (filters==null? "" : System.Uri.EscapeDataString(filters))+"&show_details="+show_details;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtain statistics about timetable purchases
		/// App_statistics_timetable_purchases apps/{appId}/statistics/timetable/purchases
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<App_statistics_timetable_purchasesReturn[]> App_statistics_timetable_purchasesAsync(int appId, bool detailed, string[] groups, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/statistics/timetable/purchases?detailed="+detailed+"&"+string.Join("&", groups.Select(z => $"groups={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App_statistics_timetable_purchasesReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtain statistics about sales
		/// App_statistics_timetable_sales apps/{appId}/statistics/timetable/sales
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<App_statistics_timetable_salesReturn[]> App_statistics_timetable_salesAsync(int appId, bool detailed, string[] groups, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/statistics/timetable/sales?detailed="+detailed+"&"+string.Join("&", groups.Select(z => $"groups={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App_statistics_timetable_salesReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Obtain statistics about vat
		/// App_statistics_vat_get apps/{appId}/statistics/vat
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<string> App_statistics_vat_getAsync(int appId, bool detailed, System.DateTimeOffset start_at, App_statistics_vat_getPeriod period, System.DateTimeOffset end_at, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/statistics/vat?detailed="+detailed+"&start_at=" + start_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&period=" + period+"&end_at=" + end_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Launch the import of Stripe data
		/// App_stripeImport_import_launch apps/{appId}/stripe/import/launch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_stripeImport_import_launchAsync(int appId, object public_key, string secret_key, string private_webhook, string start_at, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/stripe/import/launch?public_key=" + public_key+"&secret_key=" + (secret_key==null? "" : System.Uri.EscapeDataString(secret_key))+"&private_webhook=" + (private_webhook==null? "" : System.Uri.EscapeDataString(private_webhook))+"&start_at=" + (start_at==null? "" : System.Uri.EscapeDataString(start_at));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the import state of Stripe data
		/// App_stripeImport_import_state apps/{appId}/stripe/import/state
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_stripeImport_import_stateAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/stripe/import/state";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the import status of Stripe data
		/// App_stripeImport_import_status apps/{appId}/stripe/import/status
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_stripeImport_import_statusAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/stripe/import/status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update anchor date
		/// App_subscription_anchordate apps/{appId}/subscription/anchordate
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_subscription_anchordateAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/anchordate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get payment link to Stripe Checkout
		/// App_subscription_checkout_add_source apps/{appId}/subscription/checkout_add_source
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_subscription_checkout_add_sourceAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/checkout_add_source";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add coupon
		/// App_subscription_coupon apps/{appId}/subscription/coupon
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_subscription_couponAsync(int appId, string code, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/coupon?code=" + (code==null? "" : System.Uri.EscapeDataString(code));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Extend trial period
		/// App_subscription_extend_trial apps/{appId}/subscription/extend_trial
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_subscription_extend_trialAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/extend_trial";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable plan
		/// App_subscription_extra_enable apps/{appId}/subscription/extra/{stripe_plan}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="stripe_plan">Stripe plan id to update invoice</param>
		/// <returns>Success</returns>
		public async Task App_subscription_extra_enableAsync(int appId, string stripe_plan, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/extra/"+ (stripe_plan==null? "" : System.Uri.EscapeDataString(stripe_plan));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Pay all due invoices
		/// App_subscription_pay_all apps/{appId}/subscription/pay_all
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_subscription_pay_allAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/pay_all";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// End current plan
		/// App_subscription_end apps/{appId}/subscription/plan
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_subscription_endAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/plan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get current plan
		/// App_subscription_get apps/{appId}/subscription/plan
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<App_subscription_getReturn> App_subscription_getAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/plan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App_subscription_getReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get plans
		/// App_subscription_list apps/{appId}/subscription/plans
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<App_subscription_listReturn> App_subscription_listAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/plans";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App_subscription_listReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Simulate a plan
		/// App_subscription_upcoming apps/{appId}/subscription/plans/{stripe_plan}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="stripe_plan">Stripe plan id to simulate invoice</param>
		/// <param name="stripe_coupon">Stripe coupon id to simulate invoice</param>
		/// <returns>Success</returns>
		public async Task App_subscription_upcomingAsync(int appId, string stripe_plan, string stripe_coupon, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/plans/"+ (stripe_plan==null? "" : System.Uri.EscapeDataString(stripe_plan))+"&stripe_coupon=" + (stripe_coupon==null? "" : System.Uri.EscapeDataString(stripe_coupon));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change plan
		/// App_subscription_pay apps/{appId}/subscription/plans/{stripe_plan}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="stripe_plan">Stripe plan id to update invoice</param>
		/// <param name="stripe_source">Stripe source to pay</param>
		/// <param name="stripe_coupon">Stripe coupon id to apply</param>
		/// <returns>Success</returns>
		public async Task App_subscription_payAsync(int appId, string stripe_plan, string stripe_source, string stripe_coupon, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/plans/"+ (stripe_plan==null? "" : System.Uri.EscapeDataString(stripe_plan))+"&stripe_source=" + (stripe_source==null? "" : System.Uri.EscapeDataString(stripe_source))+"&stripe_coupon=" + (stripe_coupon==null? "" : System.Uri.EscapeDataString(stripe_coupon));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get payment link to Stripe Checkout
		/// App_subscription_checkout apps/{appId}/subscription/plans/{stripe_plan}/checkout
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="stripe_plan">Stripe plan id to simulate invoice</param>
		/// <param name="stripe_coupon">Stripe coupon id to simulate invoice</param>
		/// <returns>Success</returns>
		public async Task App_subscription_checkoutAsync(int appId, string stripe_plan, string stripe_coupon, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/plans/"+ (stripe_plan==null? "" : System.Uri.EscapeDataString(stripe_plan))+"/checkout&stripe_coupon=" + (stripe_coupon==null? "" : System.Uri.EscapeDataString(stripe_coupon));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove creditcard or sepadebit
		/// App_subscription_remove_source apps/{appId}/subscription/source
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="stripe_source">Stripe source to pay</param>
		/// <returns>Success</returns>
		public async Task App_subscription_remove_sourceAsync(int appId, string stripe_source, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/source?stripe_source=" + (stripe_source==null? "" : System.Uri.EscapeDataString(stripe_source));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add creditcard or sepadebit
		/// App_subscription_add_source apps/{appId}/subscription/source
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="stripe_source">Stripe source to pay</param>
		/// <returns>Success</returns>
		public async Task App_subscription_add_sourceAsync(int appId, string stripe_source, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/source?stripe_source=" + (stripe_source==null? "" : System.Uri.EscapeDataString(stripe_source));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change default source
		/// App_subscription_set_default apps/{appId}/subscription/source/default
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="stripe_source">Stripe source to set as default source</param>
		/// <returns>Success</returns>
		public async Task App_subscription_set_defaultAsync(int appId, string stripe_source, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/subscription/source/default?stripe_source=" + (stripe_source==null? "" : System.Uri.EscapeDataString(stripe_source));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all existants tags
		/// App_statistics_tags_get apps/{appId}/tags
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<string[]> App_statistics_tags_getAsync(int appId, App_statistics_tags_getObject _object, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/tags?object=" + _object;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get templates
		/// Get all templates
		/// App_settings_templates_list apps/{appId}/templates
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_settings_templates_listAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a template
		/// Create a template
		/// App_settings_templates_create apps/{appId}/templates
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_settings_templates_createAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create multiple templates
		/// Create multiple templates
		/// App_settings_templates_batch apps/{appId}/templates/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="data">List of templates. With ID for update, without for insert</param>
		/// <returns>Success</returns>
		public async Task App_settings_templates_batchAsync(int appId, string[] data, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/templates/batch?"+string.Join("&", data.Select(z => $"data={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get default template
		/// Get the default template
		/// App_settings_templates_default_template apps/{appId}/templates/default
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_settings_templates_default_templateAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/templates/default";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a template
		/// Get a template
		/// App_settings_templates_get apps/{appId}/templates/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Automatically added</param>
		/// <returns>Success</returns>
		public async Task App_settings_templates_getAsync(int appId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/templates/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a template
		/// Update a template
		/// App_settings_templates_update apps/{appId}/templates/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">Automatically added</param>
		/// <returns>Success</returns>
		public async Task App_settings_templates_updateAsync(int appId, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/templates/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Transaction
		/// App_cashflow_transactions_list apps/{appId}/transactions/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="offset">The number of items to skip before starting to collect the result set.</param>
		/// <param name="limit">The numbers of items to return.</param>
		/// <param name="search">A string to search for in objects.</param>
		/// <param name="filters">List of filters to apply to the query.</param>
		/// <param name="order">List in order of priority of the variables by which to order the result.</param>
		/// <returns>Success</returns>
		public async Task<Transaction[]> App_cashflow_transactions_listAsync(int appId, int offset, int limit, string search, App_cashflow_transactions_listFilters[] filters, App_cashflow_transactions_listOrder[] order, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/transactions/?offset="+offset+"&limit="+limit+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&"+string.Join("&", filters.Select(z => $"filters={z}"))+"&"+string.Join("&", order.Select(z => $"order={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Transaction
		/// App_cashflow_transactions_create apps/{appId}/transactions/
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<Transaction> App_cashflow_transactions_createAsync(int appId, int contact_organization_id, int contact_person_id, int account_id, int cashflow_source_id, string contact_name, int amount, App_cashflow_transactions_createMethod method, System.DateTimeOffset received_at, string label, string details, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/transactions/?contact_organization_id="+contact_organization_id+"&contact_person_id="+contact_person_id+"&account_id="+account_id+"&cashflow_source_id="+cashflow_source_id+"&contact_name=" + (contact_name==null? "" : System.Uri.EscapeDataString(contact_name))+"&amount="+amount+"&method=" + method+"&received_at=" + received_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&label=" + (label==null? "" : System.Uri.EscapeDataString(label))+"&details=" + (details==null? "" : System.Uri.EscapeDataString(details));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create multiple transactions
		/// App_cashflow_transactions_batch apps/{appId}/transactions/batch
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="data">List of transactions. With ID for update, without for insert</param>
		/// <returns>Success</returns>
		public async Task<Transaction> App_cashflow_transactions_batchAsync(int appId, Transaction[] data, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/transactions/batch?"+string.Join("&", data.Select(z => $"data={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a Transaction
		/// App_cashflow_transactions_delete apps/{appId}/transactions/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of Transaction</param>
		/// <returns>Success</returns>
		public async Task App_cashflow_transactions_deleteAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/transactions/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Transaction
		/// App_cashflow_transactions_get apps/{appId}/transactions/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of Transaction</param>
		/// <returns>Success</returns>
		public async Task<Transaction> App_cashflow_transactions_getAsync(int appId, int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/transactions/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Transaction
		/// App_cashflow_transactions_update apps/{appId}/transactions/{id}
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="id">ID of Transaction</param>
		/// <returns>Success</returns>
		public async Task<Transaction> App_cashflow_transactions_updateAsync(int appId, int id, int contact_organization_id, int contact_person_id, int account_id, int cashflow_source_id, string contact_name, int amount, App_cashflow_transactions_createMethod method, System.DateTimeOffset received_at, string label, string details, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/transactions/"+id+"?contact_organization_id="+contact_organization_id+"&contact_person_id="+contact_person_id+"&account_id="+account_id+"&cashflow_source_id="+cashflow_source_id+"&contact_name=" + (contact_name==null? "" : System.Uri.EscapeDataString(contact_name))+"&amount="+amount+"&method=" + method+"&received_at=" + received_at.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&label=" + (label==null? "" : System.Uri.EscapeDataString(label))+"&details=" + (details==null? "" : System.Uri.EscapeDataString(details));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Detach a file
		/// App_cashflow_transactions_detach apps/{appId}/transactions/{id}/attach
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="file_id">File to detach</param>
		/// <returns>Success</returns>
		public async Task App_cashflow_transactions_detachAsync(int appId, int id, int file_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/transactions/"+id+"/attach?file_id="+file_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Attach a file
		/// App_cashflow_transactions_attach apps/{appId}/transactions/{id}/attach
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <param name="file">File to attach</param>
		/// <returns>Success</returns>
		public async Task App_cashflow_transactions_attachAsync(int appId, int id, string file, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/transactions/"+id+"/attach?file=" + (file==null? "" : System.Uri.EscapeDataString(file));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Login URSSAF
		/// App_payments_urssaftiers_auth apps/{appId}/urssaf/auth
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Successfully logged, credentials has been saved</returns>
		public async Task App_payments_urssaftiers_authAsync(int appId, string client_id, string client_secret, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/urssaf/auth?client_id=" + (client_id==null? "" : System.Uri.EscapeDataString(client_id))+"&client_secret=" + (client_secret==null? "" : System.Uri.EscapeDataString(client_secret));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get status of a payment
		/// App_payments_urssaftiers_get_status apps/{appId}/urssaf/payment
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<string> App_payments_urssaftiers_get_statusAsync(int appId, int[] invoices_ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/urssaf/payment?"+string.Join("&", invoices_ids.Select(z => $"invoices_ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send URSSAF request payment
		/// App_payments_urssaftiers_send_payments apps/{appId}/urssaf/payment
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_payments_urssaftiers_send_paymentsAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/urssaf/payment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Preview URSSAF request payment
		/// App_payments_urssaftiers_preview apps/{appId}/urssaf/preview
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task<string> App_payments_urssaftiers_previewAsync(int appId, App_payments_urssaftiers_previewType type, int[] ids, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/urssaf/preview?type=" + type+"&"+string.Join("&", ids.Select(z => $"ids={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Register a person to URSSAF and create him a mandate
		/// App_payments_urssaftiers_register_customer apps/{appId}/urssaf/register_customer
		/// </summary>
		/// <param name="appId">The identifier of the Sinao application you are using. Each application corresponds to a company and an accounting. A user can have several Sinao applications. To retrieve the identifiers of its applications, you must call the endpoint `/apps`.</param>
		/// <returns>Success</returns>
		public async Task App_payments_urssaftiers_register_customerAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+appId+"/urssaf/register_customer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Change password
		/// Change password by email forgotten_password_token
		/// Auth_changepassword changepassword
		/// </summary>
		/// <param name="password">Password for account</param>
		/// <returns>Successful Operation</returns>
		public async Task Auth_changepasswordAsync(string forgotten_password_token, string password, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "changepassword?forgotten_password_token=" + (forgotten_password_token==null? "" : System.Uri.EscapeDataString(forgotten_password_token))+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Login
		/// User login by email and password. Used only on Sinao API. CloudAccounting API needs a different API key
		/// Auth_login login
		/// </summary>
		/// <param name="email">Email for login</param>
		/// <param name="password">Password for login in clear text</param>
		/// <returns>Successful Operation</returns>
		public async Task Auth_loginAsync(string email, string password, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "login?email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Logout
		/// Log the user out (Invalidate the token)
		/// Auth_logout logout
		/// </summary>
		/// <returns>Success</returns>
		public async Task Auth_logoutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "logout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get current user
		/// Get current logged user, as `User` object
		/// Account_get me
		/// </summary>
		/// <returns>Success</returns>
		public async Task<User> Account_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update current user
		/// Update current user informations
		/// Account_update me
		/// </summary>
		/// <returns>Success</returns>
		public async Task<User> Account_updateAsync(string civility, string firstname, string lastname, string password, string email, string image, string[] metadata, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me?civility=" + (civility==null? "" : System.Uri.EscapeDataString(civility))+"&firstname=" + (firstname==null? "" : System.Uri.EscapeDataString(firstname))+"&lastname=" + (lastname==null? "" : System.Uri.EscapeDataString(lastname))+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&image=" + (image==null? "" : System.Uri.EscapeDataString(image))+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Ping server
		/// Auth_ping ping
		/// </summary>
		/// <returns>Success</returns>
		public async Task Auth_pingAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refresh a token
		/// Refresh token without relogin
		/// Auth_refresh refresh
		/// </summary>
		/// <returns>Success</returns>
		public async Task<JsonWebToken> Auth_refreshAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "refresh";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<JsonWebToken>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an User
		/// Create a new `User` from the registration form. The user will be created without an application or access, there is nothing he can do without another step such as creating an application or inviting access
		/// Account_create register
		/// </summary>
		/// <param name="email">Email is the user's login, it must not have been registered</param>
		/// <param name="cgu">The user must have validated the T&Cs</param>
		/// <returns>Successful Operation</returns>
		public async Task Account_createAsync(string email, string password, bool cgu, string firstname, string lastname, string[] metadata, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "register?email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&password=" + (password==null? "" : System.Uri.EscapeDataString(password))+"&cgu="+cgu+"&firstname=" + (firstname==null? "" : System.Uri.EscapeDataString(firstname))+"&lastname=" + (lastname==null? "" : System.Uri.EscapeDataString(lastname))+"&"+string.Join("&", metadata.Select(z => $"metadata={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Password recover by email
		/// Send a forgotten_password_token by email to recover password
		/// Auth_sendpassword sendpassword
		/// </summary>
		/// <param name="email">Email for login</param>
		/// <returns>Successful Operation</returns>
		public async Task Auth_sendpasswordAsync(string email, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sendpassword?email=" + (email==null? "" : System.Uri.EscapeDataString(email));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Push to purchase collector
		/// Admin_purchaseCollector_push services/collector
		/// </summary>
		/// <param name="invoice">Invoice or receipt file (pdf or image)</param>
		/// <returns>Success</returns>
		public async Task Admin_purchaseCollector_pushAsync(string app_identifiant, string collector_key, string invoice, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/collector?app_identifiant=" + (app_identifiant==null? "" : System.Uri.EscapeDataString(app_identifiant))+"&collector_key=" + (collector_key==null? "" : System.Uri.EscapeDataString(collector_key))+"&invoice=" + (invoice==null? "" : System.Uri.EscapeDataString(invoice));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get VIES database informations from SIREN
		/// Services_vies_get services/vies/{siren}
		/// </summary>
		/// <returns>Success</returns>
		public async Task Services_vies_getAsync(string siren, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services/vies/"+ (siren==null? "" : System.Uri.EscapeDataString(siren));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class App_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public System.Nullable<App_listOrderDirection> Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_listOrderDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	public class App_policies_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_policies_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_policies_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_policies_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_policies_invitations_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_policies_invitations_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_policies_invitations_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_policies_invitations_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_accounting_categories_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_accounting_categories_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_accounting_categories_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_accounting_categories_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_accounting_entries_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_accounting_entries_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_accounting_entries_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_accounting_entries_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_accounting_accounts_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_accounting_accounts_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_accounting_accounts_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_accounting_accounts_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_apikeys_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_apikeys_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_apikeys_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_apikeys_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_apipartners_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_apipartners_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_apipartners_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_apipartners_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_attachments_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_attachments_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_attachments_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_attachments_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public enum App_attachments_createType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purchase = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invoice = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		quote = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transaction = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		relationship = 5,
	}
	
	public enum App_attachments_downloadType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sap = 0,
	}
	
	public class App_documents_sales_bankdetails_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_documents_sales_bankdetails_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_documents_sales_bankdetails_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_documents_sales_bankdetails_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_cashflow_banks_connectReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class App_cashflow_banks_url_editReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class App_cashflow_banks_url_syncReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class App_cashflow_banks_url_validateReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class App_cashflow_cashflowsources_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_cashflow_cashflowsources_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_cashflow_cashflowsources_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_cashflow_cashflowsources_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public enum App_cashflow_cashflowsources_createType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bank = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cashdesk = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		waiting = 2,
	}
	
	public enum App_cashflow_cashflowsources_createAccount_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		checking = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		card = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		savings = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		special = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		securities = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		loan = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		life_insurance = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pending = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		share_savings_plan = 9,
	}
	
	public class App_contacts_transform_mergeContacts
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SalesDocumentContractContact_infosType Type { get; set; }
	}
	
	public class App_contacts_email_batchMessages
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public App_contacts_email_batchMessagesDocuments[] App_contacts_email_batchMessagesDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipients")]
		public string[] Recipients { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipients_bcc")]
		public string[] Recipients_bcc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipients_cc")]
		public string[] Recipients_cc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class App_contacts_email_batchMessagesDocuments
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<App_contacts_email_batchMessagesDocumentsType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_contacts_email_batchMessagesDocumentsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invoice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		quote = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		attachment = 2,
	}
	
	public class App_contacts_email_sendDocuments
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public App_contacts_email_batchMessagesDocumentsType Type { get; set; }
	}
	
	public class App_contacts_establishments_updatePlace
	{
		
		[System.Runtime.Serialization.DataMember(Name="administrative_area_level1")]
		public string Administrative_area_level1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="administrative_area_level2")]
		public string Administrative_area_level2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="administrative_area_level3")]
		public string Administrative_area_level3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryiso2")]
		public string Countryiso2 { get; set; }
		
		/// <summary>
		/// Address formatted for intelligent analysis by google maps
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formatted_address")]
		public string Formatted_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Int32> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Int32> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="route")]
		public string Route { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="route2")]
		public string Route2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street_number")]
		public string Street_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sublocality")]
		public string Sublocality { get; set; }
	}
	
	public class App_accounting_export_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_accounting_export_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_accounting_export_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_accounting_export_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_accounting_export_AcdComptaGetUuidReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public class App_accounting_export_AcdComptaSetUuidReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	public enum App_accounting_export_downloadFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		universal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		quadra = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fiducial = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		acd = 3,
	}
	
	public class App_documents_sales_invoices_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_documents_sales_invoices_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_documents_sales_invoices_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_documents_sales_invoices_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_documents_sales_invoices_createContact_infos
	{
		
		/// <summary>
		/// Customer addresss (street number and address) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Customer address subline obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Customer address location (city, postal code and country) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Customer name obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SalesDocumentContractContact_infosType Type { get; set; }
	}
	
	public class App_documents_sales_invoices_createThird_account
	{
		
		/// <summary>
		/// Third account addresss (street number and address) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Third account address location (city, postal code and country) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Third account name obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SalesDocumentContractContact_infosType Type { get; set; }
	}
	
	public class App_documents_sales_invoices_createColumns
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="designation")]
		public string Designation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public string Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="due")]
		public string Due { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info_total_quantity")]
		public string Info_total_quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity_name")]
		public string Quantity_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public string Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat_percent")]
		public string Vat_percent { get; set; }
	}
	
	public class App_documents_sales_invoices_createDiscount
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percent")]
		public System.Nullable<System.Int32> Percent { get; set; }
	}
	
	public class App_documents_sales_invoices_createVat_exemption
	{
		
		[System.Runtime.Serialization.DataMember(Name="article")]
		public string Article { get; set; }
		
		/// <summary>
		/// specify if exempted or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exempted")]
		public System.Nullable<System.Boolean> Exempted { get; set; }
		
		/// <summary>
		/// example : micro for microentrepreneur
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	public enum App_documents_sales_invoices_downloadTemplate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delivery = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		command = 1,
	}
	
	public class App_documents_sales_invoices_statisticsFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_documents_sales_invoices_statisticsFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_documents_sales_invoices_statisticsFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_documents_sales_invoices_updateContact_infos
	{
		
		/// <summary>
		/// Customer addresss (street number and address) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Customer address subline obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Customer address location (city, postal code and country) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Customer name obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SalesDocumentContractContact_infosType Type { get; set; }
	}
	
	public class App_documents_sales_invoices_updateThird_account
	{
		
		/// <summary>
		/// Third account addresss (street number and address) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Third account address location (city, postal code and country) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Third account name obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SalesDocumentContractContact_infosType Type { get; set; }
	}
	
	public class App_documents_sales_invoices_updateColumns
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="designation")]
		public string Designation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public string Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="due")]
		public string Due { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info_total_quantity")]
		public string Info_total_quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity_name")]
		public string Quantity_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public string Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat_percent")]
		public string Vat_percent { get; set; }
	}
	
	public class App_documents_sales_invoices_updateDiscount
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percent")]
		public System.Nullable<System.Int32> Percent { get; set; }
	}
	
	public class App_documents_sales_invoices_updateVat_exemption
	{
		
		[System.Runtime.Serialization.DataMember(Name="article")]
		public string Article { get; set; }
		
		/// <summary>
		/// specify if exempted or not
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exempted")]
		public System.Nullable<System.Boolean> Exempted { get; set; }
		
		/// <summary>
		/// example : micro for microentrepreneur
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	public class App_cashflow_logsautoreconciliations_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_cashflow_logsautoreconciliations_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_cashflow_logsautoreconciliations_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_cashflow_logsautoreconciliations_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_contacts_organizations_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_contacts_organizations_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_contacts_organizations_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_contacts_organizations_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_payments_payments_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_payments_payments_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_payments_payments_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_payments_payments_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_contacts_persons_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_contacts_persons_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_contacts_persons_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_contacts_persons_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_catalog_categories_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_catalog_categories_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_catalog_categories_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_catalog_categories_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_catalog_products_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_catalog_products_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_catalog_products_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_catalog_products_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public enum App_catalog_products_createType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		product = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		service = 1,
	}
	
	public class App_catalog_stocks_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_catalog_stocks_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_catalog_stocks_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_catalog_stocks_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_documents_purchases_purchases_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_documents_purchases_purchases_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_documents_purchases_purchases_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_documents_purchases_purchases_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_documents_purchases_purchases_statisticsFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_documents_purchases_purchases_statisticsFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_documents_purchases_purchases_statisticsFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_documents_purchases_purchases_updatePurchase_lines
	{
		
		[System.Runtime.Serialization.DataMember(Name="account_id")]
		public System.Nullable<System.Int32> Account_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
	}
	
	public enum App_documents_purchases_purchases_updatestatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		paid = 1,
	}
	
	public class App_documents_sales_quotes_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_documents_sales_quotes_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_documents_sales_quotes_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_documents_sales_quotes_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_documents_sales_quotes_createContact_infos
	{
		
		/// <summary>
		/// Customer addresss (street number and address) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Customer address subline obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Customer address location (city, postal code and country) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Customer name obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SalesDocumentContractContact_infosType Type { get; set; }
	}
	
	public class App_documents_sales_quotes_createThird_account
	{
		
		/// <summary>
		/// Third account addresss (street number and address) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Third account address location (city, postal code and country) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Third account name obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SalesDocumentContractContact_infosType Type { get; set; }
	}
	
	public class App_documents_sales_quotes_createColumns
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="designation")]
		public string Designation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public string Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="due")]
		public string Due { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info_total_quantity")]
		public string Info_total_quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity_name")]
		public string Quantity_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public string Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat_percent")]
		public string Vat_percent { get; set; }
	}
	
	public class App_documents_sales_quotes_createDiscount
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percent")]
		public System.Nullable<System.Int32> Percent { get; set; }
	}
	
	public class App_documents_sales_quotes_createVat_exemption
	{
		
		[System.Runtime.Serialization.DataMember(Name="article")]
		public string Article { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempted")]
		public System.Nullable<System.Boolean> Exempted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	public class App_documents_sales_quotes_createDownpayment_request
	{
		
		/// <summary>
		/// Use downpayment request value for fix downpayment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Use downpayment request in percent for variable downpayment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percent")]
		public System.Nullable<System.Int32> Percent { get; set; }
	}
	
	public class App_documents_sales_quotes_statisticsFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_documents_sales_quotes_statisticsFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_documents_sales_quotes_statisticsFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_documents_sales_quotes_updateContact_infos
	{
		
		/// <summary>
		/// Customer addresss (street number and address) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Customer address subline obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Customer address location (city, postal code and country) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Customer name obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SalesDocumentContractContact_infosType Type { get; set; }
	}
	
	public class App_documents_sales_quotes_updateThird_account
	{
		
		/// <summary>
		/// Third account addresss (street number and address) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Third account address location (city, postal code and country) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Third account name obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SalesDocumentContractContact_infosType Type { get; set; }
	}
	
	public class App_documents_sales_quotes_updateColumns
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="designation")]
		public string Designation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public string Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="due")]
		public string Due { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info_total_quantity")]
		public string Info_total_quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity_name")]
		public string Quantity_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public string Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat_percent")]
		public string Vat_percent { get; set; }
	}
	
	public class App_documents_sales_quotes_updateDiscount
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percent")]
		public System.Nullable<System.Int32> Percent { get; set; }
	}
	
	public class App_documents_sales_quotes_updateVat_exemption
	{
		
		[System.Runtime.Serialization.DataMember(Name="article")]
		public string Article { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempted")]
		public System.Nullable<System.Boolean> Exempted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	public class App_documents_sales_quotes_updateDownpayment_request
	{
		
		/// <summary>
		/// Use downpayment request value for fix downpayment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Use downpayment request in percent for variable downpayment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percent")]
		public System.Nullable<System.Int32> Percent { get; set; }
	}
	
	public enum App_documents_sales_quotes_updatestatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		waiting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		goodforagreement = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		refused = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transformed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deleted = 4,
	}
	
	public enum App_payments_reconciliation_unreconcileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transaction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sales = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purchase = 2,
	}
	
	public class App_payments_reconciliation_reconcileMovements
	{
		
		/// <summary>
		/// Payment amount in cents
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Object id -- create object when null (usefull for cashdesk or waiting entries)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<App_payments_reconciliation_reconcileMovementsType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_payments_reconciliation_reconcileMovementsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		account = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purchase = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sales = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bank_entry = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cashdesk_entry = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		waiting_entry = 5,
	}
	
	public class App_payments_reconciliation_reconcileRule
	{
		
		/// <summary>
		/// [ [property, comparator, value], ... ]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditions")]
		public string[] Conditions { get; set; }
		
		/// <summary>
		/// Event like model.event, event in [saved, created, updated, deleted]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="on_event")]
		public string On_event { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class App_documents_sales_recurringinvoices_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_documents_sales_recurringinvoices_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_documents_sales_recurringinvoices_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_documents_sales_recurringinvoices_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_documents_sales_recurringinvoices_createContact_infos
	{
		
		/// <summary>
		/// Customer addresss (street number and address) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Customer address subline obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Customer address location (city, postal code and country) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Customer name obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SalesDocumentContractContact_infosType Type { get; set; }
	}
	
	public class App_documents_sales_recurringinvoices_createColumns
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="designation")]
		public string Designation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public string Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="due")]
		public string Due { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info_total_quantity")]
		public string Info_total_quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity_name")]
		public string Quantity_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public string Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat_percent")]
		public string Vat_percent { get; set; }
	}
	
	public class App_documents_sales_recurringinvoices_createVat_exemption
	{
		
		[System.Runtime.Serialization.DataMember(Name="article")]
		public string Article { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempted")]
		public System.Nullable<System.Boolean> Exempted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	public enum App_documents_sales_recurringinvoices_createFrequency_duration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		week = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		month = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		trimester = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		semester = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		year = 5,
	}
	
	public enum App_documents_sales_recurringinvoices_createDiscount_mode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		percent = 0,
	}
	
	public class App_documents_sales_recurringinvoices_createOrders_plan
	{
		
		[System.Runtime.Serialization.DataMember(Name="end_at")]
		public System.Nullable<System.DateTimeOffset> End_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public System.Nullable<System.Int32> Model { get; set; }
	}
	
	public class App_documents_sales_recurringinvoices_updateContact_infos
	{
		
		/// <summary>
		/// Customer addresss (street number and address) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Customer address subline obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Customer address location (city, postal code and country) obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Customer name obtained from customer object or set manually
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SalesDocumentContractContact_infosType Type { get; set; }
	}
	
	public class App_documents_sales_recurringinvoices_updateColumns
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="designation")]
		public string Designation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public string Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="due")]
		public string Due { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info_total_quantity")]
		public string Info_total_quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity_name")]
		public string Quantity_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public string Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat_percent")]
		public string Vat_percent { get; set; }
	}
	
	public class App_documents_sales_recurringinvoices_updateVat_exemption
	{
		
		[System.Runtime.Serialization.DataMember(Name="article")]
		public string Article { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exempted")]
		public System.Nullable<System.Boolean> Exempted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	public class App_documents_sales_recurringinvoices_updateOrders_plan
	{
		
		[System.Runtime.Serialization.DataMember(Name="end_at")]
		public System.Nullable<System.DateTimeOffset> End_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model")]
		public System.Nullable<System.Int32> Model { get; set; }
	}
	
	public class App_contacts_relationships_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_contacts_relationships_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_contacts_relationships_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_contacts_relationships_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_rules_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_rules_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_rules_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_rules_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_documents_sales_models_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_documents_sales_models_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_documents_sales_models_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_documents_sales_models_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class App_documents_sales_models_createColumns
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="designation")]
		public string Designation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public string Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="due")]
		public string Due { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info_total_quantity")]
		public string Info_total_quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity_name")]
		public string Quantity_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public string Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat_percent")]
		public string Vat_percent { get; set; }
	}
	
	public class App_documents_sales_models_updateColumns
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public string Amount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="designation")]
		public string Designation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="discount")]
		public string Discount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="due")]
		public string Due { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info_total_quantity")]
		public string Info_total_quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="quantity_name")]
		public string Quantity_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtotal")]
		public string Subtotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vat_percent")]
		public string Vat_percent { get; set; }
	}
	
	public class App_payments_sepamandates_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_payments_sepamandates_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_payments_sepamandates_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_payments_sepamandates_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public enum App_statistics_charts_getPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hourly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		daily = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		weekly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monthly = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		quarterly = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		yearly = 5,
	}
	
	public enum App_statistics_charts_getObject
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invoice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		quote = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purchase = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transaction = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		payment = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		relationship = 5,
	}
	
	public enum App_statistics_charts_getCalcul
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sum = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		avg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		count = 2,
	}
	
	public class App_statistics_timetable_purchasesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int32> Balance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Purchase[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public string[] Interval { get; set; }
	}
	
	public class App_statistics_timetable_salesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int32> Balance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Invoice[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public string[] Interval { get; set; }
	}
	
	public enum App_statistics_vat_getPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monthly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		quarterly = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="half-yearly")]
		halfMinusyearly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		yearly = 3,
	}
	
	public class App_subscription_getReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="extras")]
		public string[] Extras { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plans")]
		public string[] Plans { get; set; }
	}
	
	public class App_subscription_listReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="extras")]
		public string[] Extras { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plans")]
		public string[] Plans { get; set; }
	}
	
	public enum App_statistics_tags_getObject
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invoice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		quote = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purchase = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		product = 3,
	}
	
	public class App_cashflow_transactions_listFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="comparator")]
		public System.Nullable<App_cashflow_transactions_listFiltersComparator> Comparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum App_cashflow_transactions_listFiltersComparator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="=")]
		Equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<")]
		LessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">")]
		Greater = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="<=")]
		LessThanEqual = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value=">=")]
		GreaterEqual = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="!=")]
		ExclamationEqual = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIKE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGEX = 8,
	}
	
	public class App_cashflow_transactions_listOrder
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public App_listOrderDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public enum App_cashflow_transactions_createMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		check = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transfer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cash = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creditcard = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		automatic_debit = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creditnote = 5,
	}
	
	public enum App_payments_urssaftiers_previewType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invoice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		quote = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		contact = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
