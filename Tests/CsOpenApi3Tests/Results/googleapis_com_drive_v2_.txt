//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An item with user information and settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class About
	{
		
		/// <summary>
		/// Information about supported additional roles per file type. The most specific type takes precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalRoleInfo")]
		public AboutAdditionalRoleInfo[] AboutAdditionalRoleInfo { get; set; }
		
		/// <summary>
		/// Whether the user can create shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canCreateDrives")]
		public System.Nullable<System.Boolean> CanCreateDrives { get; set; }
		
		/// <summary>
		/// Deprecated: Use `canCreateDrives` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canCreateTeamDrives")]
		public System.Nullable<System.Boolean> CanCreateTeamDrives { get; set; }
		
		/// <summary>
		/// The domain sharing policy for the current user. Possible values are: * `allowed` * `allowedWithWarning` * `incomingOnly` * `disallowed`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainSharingPolicy")]
		public string DomainSharingPolicy { get; set; }
		
		/// <summary>
		/// A list of themes that are supported for shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveThemes")]
		public AboutDriveThemes[] AboutDriveThemes { get; set; }
		
		/// <summary>
		/// The ETag of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The allowable export formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportFormats")]
		public AboutExportFormats[] AboutExportFormats { get; set; }
		
		/// <summary>
		/// List of additional features enabled on this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public AboutFeatures[] AboutFeatures { get; set; }
		
		/// <summary>
		/// The palette of allowable folder colors as RGB hex strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folderColorPalette")]
		public string[] FolderColorPalette { get; set; }
		
		/// <summary>
		/// The allowable import formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="importFormats")]
		public AboutImportFormats[] AboutImportFormats { get; set; }
		
		/// <summary>
		/// A boolean indicating whether the authenticated app is installed by the authenticated user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCurrentAppInstalled")]
		public System.Nullable<System.Boolean> IsCurrentAppInstalled { get; set; }
		
		/// <summary>
		/// This is always `drive#about`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#about")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#about";
		
		/// <summary>
		/// The user's language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// The largest change id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="largestChangeId")]
		public string LargestChangeId { get; set; }
		
		/// <summary>
		/// List of max upload sizes for each file type. The most specific type takes precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxUploadSizes")]
		public AboutMaxUploadSizes[] AboutMaxUploadSizes { get; set; }
		
		/// <summary>
		/// The name of the current user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The current user's ID as visible in the permissions collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionId")]
		public string PermissionId { get; set; }
		
		/// <summary>
		/// The amount of storage quota used by different Google services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaBytesByService")]
		public AboutQuotaBytesByService[] AboutQuotaBytesByService { get; set; }
		
		/// <summary>
		/// The total number of quota bytes. This is only relevant when quotaType is LIMITED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaBytesTotal")]
		public string QuotaBytesTotal { get; set; }
		
		/// <summary>
		/// The number of quota bytes used by Google Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaBytesUsed")]
		public string QuotaBytesUsed { get; set; }
		
		/// <summary>
		/// The number of quota bytes used by all Google apps (Drive, Picasa, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaBytesUsedAggregate")]
		public string QuotaBytesUsedAggregate { get; set; }
		
		/// <summary>
		/// The number of quota bytes used by trashed items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaBytesUsedInTrash")]
		public string QuotaBytesUsedInTrash { get; set; }
		
		/// <summary>
		/// The type of the user's storage quota. Possible values are: * `LIMITED` * `UNLIMITED`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaType")]
		public string QuotaType { get; set; }
		
		/// <summary>
		/// The number of remaining change ids, limited to no more than 2500.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remainingChangeIds")]
		public string RemainingChangeIds { get; set; }
		
		/// <summary>
		/// The id of the root folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootFolderId")]
		public string RootFolderId { get; set; }
		
		/// <summary>
		/// A link back to this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Deprecated: Use `driveThemes` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamDriveThemes")]
		public AboutTeamDriveThemes[] AboutTeamDriveThemes { get; set; }
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	public class AboutAdditionalRoleInfo
	{
		
		/// <summary>
		/// The supported additional roles per primary role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roleSets")]
		public AboutAdditionalRoleInfoRoleSets[] AboutAdditionalRoleInfoRoleSets { get; set; }
		
		/// <summary>
		/// The content type that this additional role info applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class AboutAdditionalRoleInfoRoleSets
	{
		
		/// <summary>
		/// The supported additional roles with the primary role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalRoles")]
		public string[] AdditionalRoles { get; set; }
		
		/// <summary>
		/// A primary permission role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryRole")]
		public string PrimaryRole { get; set; }
	}
	
	public class AboutDriveThemes
	{
		
		/// <summary>
		/// A link to this theme's background image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImageLink")]
		public string BackgroundImageLink { get; set; }
		
		/// <summary>
		/// The color of this theme as an RGB hex string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorRgb")]
		public string ColorRgb { get; set; }
		
		/// <summary>
		/// The ID of the theme.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class AboutExportFormats
	{
		
		/// <summary>
		/// The content type to convert from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The possible content types to convert to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public string[] Targets { get; set; }
	}
	
	public class AboutFeatures
	{
		
		/// <summary>
		/// The name of the feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureName")]
		public string FeatureName { get; set; }
		
		/// <summary>
		/// The request limit rate for this feature, in queries per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureRate")]
		public System.Nullable<System.Double> FeatureRate { get; set; }
	}
	
	public class AboutImportFormats
	{
		
		/// <summary>
		/// The imported file's content type to convert from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The possible content types to convert to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targets")]
		public string[] Targets { get; set; }
	}
	
	public class AboutMaxUploadSizes
	{
		
		/// <summary>
		/// The max upload size for this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The file type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class AboutQuotaBytesByService
	{
		
		/// <summary>
		/// The storage quota bytes used by the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesUsed")]
		public string BytesUsed { get; set; }
		
		/// <summary>
		/// The service's name, e.g. DRIVE, GMAIL, or PHOTOS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	public class AboutTeamDriveThemes
	{
		
		/// <summary>
		/// Deprecated: Use `driveThemes/backgroundImageLink` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImageLink")]
		public string BackgroundImageLink { get; set; }
		
		/// <summary>
		/// Deprecated: Use `driveThemes/colorRgb` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorRgb")]
		public string ColorRgb { get; set; }
		
		/// <summary>
		/// Deprecated: Use `driveThemes/id` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Information about a Drive user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// Output only. A plain text displayable name for this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The email address of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Output only. Whether this user is the same as the authenticated user for whom the request was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAuthenticatedUser")]
		public System.Nullable<System.Boolean> IsAuthenticatedUser { get; set; }
		
		/// <summary>
		/// Output only. This is always `drive#user`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#user")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#user";
		
		/// <summary>
		/// Output only. The user's ID as visible in the permissions collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionId")]
		public string PermissionId { get; set; }
		
		/// <summary>
		/// Output only. The user's profile picture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public UserPicture Picture { get; set; }
	}
	
	public class UserPicture
	{
		
		/// <summary>
		/// Output Only. A URL that points to a profile picture of this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// The apps resource provides a list of the apps that a user has installed, with information about each app's supported MIME types, file extensions, and other details. Some resource methods (such as `apps.get`) require an `appId`. Use the `apps.list` method to retrieve the ID for an installed application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class App
	{
		
		/// <summary>
		/// Whether the app is authorized to access data on the user's Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorized")]
		public System.Nullable<System.Boolean> Authorized { get; set; }
		
		/// <summary>
		/// The template url to create a new file with this app in a given folder. The template will contain {folderId} to be replaced by the folder to create the new file in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createInFolderTemplate")]
		public string CreateInFolderTemplate { get; set; }
		
		/// <summary>
		/// The url to create a new file with this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createUrl")]
		public string CreateUrl { get; set; }
		
		/// <summary>
		/// Whether the app has drive-wide scope. An app with drive-wide scope can access all files in the user's drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasDriveWideScope")]
		public System.Nullable<System.Boolean> HasDriveWideScope { get; set; }
		
		/// <summary>
		/// The various icons for the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icons")]
		public AppIcons[] AppIcons { get; set; }
		
		/// <summary>
		/// The ID of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether the app is installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installed")]
		public System.Nullable<System.Boolean> Installed { get; set; }
		
		/// <summary>
		/// This is always `drive#app`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#app")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#app";
		
		/// <summary>
		/// A long description of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longDescription")]
		public string LongDescription { get; set; }
		
		/// <summary>
		/// The name of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of object this app creates (e.g. Chart). If empty, the app name should be used instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public string ObjectType { get; set; }
		
		/// <summary>
		/// The template url for opening files with this app. The template will contain `{ids}` and/or `{exportIds}` to be replaced by the actual file ids. See Open Files for the full documentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openUrlTemplate")]
		public string OpenUrlTemplate { get; set; }
		
		/// <summary>
		/// The list of primary file extensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryFileExtensions")]
		public string[] PrimaryFileExtensions { get; set; }
		
		/// <summary>
		/// The list of primary mime types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryMimeTypes")]
		public string[] PrimaryMimeTypes { get; set; }
		
		/// <summary>
		/// The ID of the product listing for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// A link to the product listing for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productUrl")]
		public string ProductUrl { get; set; }
		
		/// <summary>
		/// The list of secondary file extensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryFileExtensions")]
		public string[] SecondaryFileExtensions { get; set; }
		
		/// <summary>
		/// The list of secondary mime types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryMimeTypes")]
		public string[] SecondaryMimeTypes { get; set; }
		
		/// <summary>
		/// A short description of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortDescription")]
		public string ShortDescription { get; set; }
		
		/// <summary>
		/// Whether this app supports creating new objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsCreate")]
		public System.Nullable<System.Boolean> SupportsCreate { get; set; }
		
		/// <summary>
		/// Whether this app supports importing from Docs Editors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsImport")]
		public System.Nullable<System.Boolean> SupportsImport { get; set; }
		
		/// <summary>
		/// Whether this app supports opening more than one file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsMultiOpen")]
		public System.Nullable<System.Boolean> SupportsMultiOpen { get; set; }
		
		/// <summary>
		/// Whether this app supports creating new files when offline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsOfflineCreate")]
		public System.Nullable<System.Boolean> SupportsOfflineCreate { get; set; }
		
		/// <summary>
		/// Whether the app is selected as the default handler for the types it supports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useByDefault")]
		public System.Nullable<System.Boolean> UseByDefault { get; set; }
	}
	
	public class AppIcons
	{
		
		/// <summary>
		/// Category of the icon. Allowed values are: * `application` - icon for the application * `document` - icon for a file associated with the app * `documentShared` - icon for a shared file associated with the app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// URL for the icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconUrl")]
		public string IconUrl { get; set; }
		
		/// <summary>
		/// Size of the icon. Represented as the maximum of the width and height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
	}
	
	/// <summary>
	/// A list of third-party applications which the user has installed or given access to Google Drive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppList
	{
		
		/// <summary>
		/// List of app IDs that the user has specified to use by default. The list is in reverse-priority order (lowest to highest).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultAppIds")]
		public string[] DefaultAppIds { get; set; }
		
		/// <summary>
		/// The ETag of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The list of apps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public App[] Items { get; set; }
		
		/// <summary>
		/// This is always `drive#appList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#appList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#appList";
		
		/// <summary>
		/// A link back to this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// Representation of a change to a file or shared drive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Change
	{
		
		/// <summary>
		/// The type of the change. Possible values are `file` and `drive`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changeType")]
		public string ChangeType { get; set; }
		
		/// <summary>
		/// Whether the file or shared drive has been removed from this list of changes, for example by deletion or loss of access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// Representation of a shared drive. Some resource methods (such as `drives.update`) require a `driveId`. Use the `drives.list` method to retrieve the ID for a shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="drive")]
		public Drive Drive { get; set; }
		
		/// <summary>
		/// The ID of the shared drive associated with this change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveId")]
		public string DriveId { get; set; }
		
		/// <summary>
		/// The metadata for a file. Some resource methods (such as `files.update`) require a `fileId`. Use the `files.list` method to retrieve the ID for a file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file")]
		public File File { get; set; }
		
		/// <summary>
		/// The ID of the file associated with this change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileId")]
		public string FileId { get; set; }
		
		/// <summary>
		/// The ID of the change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// This is always `drive#change`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#change")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#change";
		
		/// <summary>
		/// The time of this modification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modificationDate")]
		public System.Nullable<System.DateTimeOffset> ModificationDate { get; set; }
		
		/// <summary>
		/// A link back to this change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Deprecated: Use the `drive` collection instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamDrive")]
		public TeamDrive TeamDrive { get; set; }
		
		/// <summary>
		/// Deprecated: Use `driveId` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamDriveId")]
		public string TeamDriveId { get; set; }
		
		/// <summary>
		/// Deprecated: Use `changeType` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Representation of a shared drive. Some resource methods (such as `drives.update`) require a `driveId`. Use the `drives.list` method to retrieve the ID for a shared drive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Drive
	{
		
		/// <summary>
		/// An image file and cropping parameters from which a background image for this shared drive is set. This is a write only field; it can only be set on `drive.drives.update` requests that don't set `themeId`. When specified, all fields of the `backgroundImageFile` must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImageFile")]
		public DriveBackgroundImageFile BackgroundImageFile { get; set; }
		
		/// <summary>
		/// Output only. A short-lived link to this shared drive's background image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImageLink")]
		public string BackgroundImageLink { get; set; }
		
		/// <summary>
		/// Output only. Capabilities the current user has on this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public DriveCapabilities Capabilities { get; set; }
		
		/// <summary>
		/// The color of this shared drive as an RGB hex string. It can only be set on a `drive.drives.update` request that does not set `themeId`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorRgb")]
		public string ColorRgb { get; set; }
		
		/// <summary>
		/// The time at which the shared drive was created (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Whether the shared drive is hidden from default view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		/// <summary>
		/// Output only. The ID of this shared drive which is also the ID of the top level folder of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. This is always `drive#drive`
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#drive")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#drive";
		
		/// <summary>
		/// The name of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The organizational unit of this shared drive. This field is only populated on `drives.list` responses when the `useDomainAdminAccess` parameter is set to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
		
		/// <summary>
		/// A set of restrictions that apply to this shared drive or items inside this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public DriveRestrictions Restrictions { get; set; }
		
		/// <summary>
		/// The ID of the theme from which the background image and color will be set. The set of possible `driveThemes` can be retrieved from a `drive.about.get` response. When not specified on a `drive.drives.insert` request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set `colorRgb` or `backgroundImageFile`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
	}
	
	public class DriveBackgroundImageFile
	{
		
		/// <summary>
		/// The ID of an image file in Google Drive to use for the background image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The width of the cropped image in the closed range of 0 to 1. This value represents the width of the cropped image divided by the width of the entire image. The height is computed by applying a width to height aspect ratio of 80 to 9. The resulting image must be at least 1280 pixels wide and 144 pixels high.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Single> Width { get; set; }
		
		/// <summary>
		/// The X coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the horizontal distance from the left side of the entire image to the left side of the cropping area divided by the width of the entire image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xCoordinate")]
		public System.Nullable<System.Single> XCoordinate { get; set; }
		
		/// <summary>
		/// The Y coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the vertical distance from the top side of the entire image to the top side of the cropping area divided by the height of the entire image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yCoordinate")]
		public System.Nullable<System.Single> YCoordinate { get; set; }
	}
	
	public class DriveCapabilities
	{
		
		/// <summary>
		/// Output only. Whether the current user can add children to folders in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAddChildren")]
		public System.Nullable<System.Boolean> CanAddChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the `copyRequiresWriterPermission` restriction of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeCopyRequiresWriterPermissionRestriction")]
		public System.Nullable<System.Boolean> CanChangeCopyRequiresWriterPermissionRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the `domainUsersOnly` restriction of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeDomainUsersOnlyRestriction")]
		public System.Nullable<System.Boolean> CanChangeDomainUsersOnlyRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the background of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeDriveBackground")]
		public System.Nullable<System.Boolean> CanChangeDriveBackground { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the `driveMembersOnly` restriction of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeDriveMembersOnlyRestriction")]
		public System.Nullable<System.Boolean> CanChangeDriveMembersOnlyRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the `sharingFoldersRequiresOrganizerPermission` restriction of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeSharingFoldersRequiresOrganizerPermissionRestriction")]
		public System.Nullable<System.Boolean> CanChangeSharingFoldersRequiresOrganizerPermissionRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can comment on files in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canComment")]
		public System.Nullable<System.Boolean> CanComment { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can copy files in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canCopy")]
		public System.Nullable<System.Boolean> CanCopy { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can delete children from folders in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDeleteChildren")]
		public System.Nullable<System.Boolean> CanDeleteChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can delete this shared drive. Attempting to delete the shared drive may still fail if there are untrashed items inside the shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDeleteDrive")]
		public System.Nullable<System.Boolean> CanDeleteDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can download files in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDownload")]
		public System.Nullable<System.Boolean> CanDownload { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can edit files in this shared drive
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canEdit")]
		public System.Nullable<System.Boolean> CanEdit { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can list the children of folders in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canListChildren")]
		public System.Nullable<System.Boolean> CanListChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can add members to this shared drive or remove them or change their role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canManageMembers")]
		public System.Nullable<System.Boolean> CanManageMembers { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can read the revisions resource of files in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReadRevisions")]
		public System.Nullable<System.Boolean> CanReadRevisions { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can rename files or folders in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRename")]
		public System.Nullable<System.Boolean> CanRename { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can rename this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRenameDrive")]
		public System.Nullable<System.Boolean> CanRenameDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can reset the shared drive restrictions to defaults.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canResetDriveRestrictions")]
		public System.Nullable<System.Boolean> CanResetDriveRestrictions { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can share files or folders in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canShare")]
		public System.Nullable<System.Boolean> CanShare { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can trash children from folders in this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canTrashChildren")]
		public System.Nullable<System.Boolean> CanTrashChildren { get; set; }
	}
	
	public class DriveRestrictions
	{
		
		/// <summary>
		/// Whether administrative privileges on this shared drive are required to modify restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminManagedRestrictions")]
		public System.Nullable<System.Boolean> AdminManagedRestrictions { get; set; }
		
		/// <summary>
		/// Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters. When this restriction is set to `true`, it will override the similarly named field to `true` for any file inside this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyRequiresWriterPermission")]
		public System.Nullable<System.Boolean> CopyRequiresWriterPermission { get; set; }
		
		/// <summary>
		/// Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs. This restriction may be overridden by other sharing policies controlled outside of this shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainUsersOnly")]
		public System.Nullable<System.Boolean> DomainUsersOnly { get; set; }
		
		/// <summary>
		/// Whether access to items inside this shared drive is restricted to its members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveMembersOnly")]
		public System.Nullable<System.Boolean> DriveMembersOnly { get; set; }
		
		/// <summary>
		/// If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharingFoldersRequiresOrganizerPermission")]
		public System.Nullable<System.Boolean> SharingFoldersRequiresOrganizerPermission { get; set; }
	}
	
	/// <summary>
	/// The metadata for a file. Some resource methods (such as `files.update`) require a `fileId`. Use the `files.list` method to retrieve the ID for a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class File
	{
		
		/// <summary>
		/// Output only. A link for opening the file in a relevant Google editor or viewer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateLink")]
		public string AlternateLink { get; set; }
		
		/// <summary>
		/// Output only. Whether this file is in the Application Data folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appDataContents")]
		public System.Nullable<System.Boolean> AppDataContents { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `capabilities/canComment` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canComment")]
		public System.Nullable<System.Boolean> CanComment { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `capabilities/canReadRevisions` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReadRevisions")]
		public System.Nullable<System.Boolean> CanReadRevisions { get; set; }
		
		/// <summary>
		/// Output only. Capabilities the current user has on this file. Each capability corresponds to a fine-grained action that a user may take.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public FileCapabilities Capabilities { get; set; }
		
		/// <summary>
		/// Restrictions for accessing the content of the file. Only populated if such a restriction exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentRestrictions")]
		public ContentRestriction[] ContentRestrictions { get; set; }
		
		/// <summary>
		/// Whether the options to copy, print, or download this file, should be disabled for readers and commenters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyRequiresWriterPermission")]
		public System.Nullable<System.Boolean> CopyRequiresWriterPermission { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `capabilities/canCopy` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyable")]
		public System.Nullable<System.Boolean> Copyable { get; set; }
		
		/// <summary>
		/// Create time for this file (formatted RFC 3339 timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Output only. A link to open this file with the user's default app for this file. Only populated when the drive.apps.readonly scope is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultOpenWithLink")]
		public string DefaultOpenWithLink { get; set; }
		
		/// <summary>
		/// A short description of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. Short lived download URL for the file. This field is only populated for files with content stored in Google Drive; it is not populated for Google Docs or shortcut files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
		
		/// <summary>
		/// Output only. ID of the shared drive the file resides in. Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="driveId")]
		public string DriveId { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `capabilities/canEdit` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editable")]
		public System.Nullable<System.Boolean> Editable { get; set; }
		
		/// <summary>
		/// Output only. A link for embedding the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embedLink")]
		public string EmbedLink { get; set; }
		
		/// <summary>
		/// Output only. ETag of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Output only. Whether this file has been explicitly trashed, as opposed to recursively trashed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explicitlyTrashed")]
		public System.Nullable<System.Boolean> ExplicitlyTrashed { get; set; }
		
		/// <summary>
		/// Output only. Links for exporting Docs Editors files to specific formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportLinks")]
		public System.Collections.Generic.Dictionary<string, string> ExportLinks { get; set; }
		
		/// <summary>
		/// Output only. The final component of `fullFileExtension` with trailing text that does not appear to be part of the extension removed. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileExtension")]
		public string FileExtension { get; set; }
		
		/// <summary>
		/// Output only. Size in bytes of blobs and first party editor files. Won't be populated for files that have no size, like shortcuts and folders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSize")]
		public string FileSize { get; set; }
		
		/// <summary>
		/// Folder color as an RGB hex string if the file is a folder or a shortcut to a folder. The list of supported colors is available in the folderColorPalette field of the About resource. If an unsupported color is specified, it will be changed to the closest color in the palette.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="folderColorRgb")]
		public string FolderColorRgb { get; set; }
		
		/// <summary>
		/// Output only. The full file extension; extracted from the title. May contain multiple concatenated extensions, such as "tar.gz". Removing an extension from the title does not clear this field; however, changing the extension on the title does update this field. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullFileExtension")]
		public string FullFileExtension { get; set; }
		
		/// <summary>
		/// Output only. Whether there are permissions directly on this file. This field is only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasAugmentedPermissions")]
		public System.Nullable<System.Boolean> HasAugmentedPermissions { get; set; }
		
		/// <summary>
		/// Output only. Whether this file has a thumbnail. This does not indicate whether the requesting app has access to the thumbnail. To check access, look for the presence of the thumbnailLink field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasThumbnail")]
		public System.Nullable<System.Boolean> HasThumbnail { get; set; }
		
		/// <summary>
		/// Output only. The ID of the file's head revision. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headRevisionId")]
		public string HeadRevisionId { get; set; }
		
		/// <summary>
		/// Output only. A link to the file's icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconLink")]
		public string IconLink { get; set; }
		
		/// <summary>
		/// The ID of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Metadata about image media. This will only be present for image types, and its contents will depend on what can be parsed from the image content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageMediaMetadata")]
		public FileImageMediaMetadata ImageMediaMetadata { get; set; }
		
		/// <summary>
		/// Indexable text attributes for the file (can only be written)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexableText")]
		public FileIndexableText IndexableText { get; set; }
		
		/// <summary>
		/// Output only. Whether the file was created or opened by the requesting app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAppAuthorized")]
		public System.Nullable<System.Boolean> IsAppAuthorized { get; set; }
		
		/// <summary>
		/// Output only. The type of file. This is always `drive#file`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#file")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#file";
		
		/// <summary>
		/// Output only. An overview of the labels on the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelInfo")]
		public FileLabelInfo LabelInfo { get; set; }
		
		/// <summary>
		/// A group of labels for the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public FileLabels Labels { get; set; }
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifyingUser")]
		public User LastModifyingUser { get; set; }
		
		/// <summary>
		/// Output only. Name of the last user to modify this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifyingUserName")]
		public string LastModifyingUserName { get; set; }
		
		/// <summary>
		/// Last time this file was viewed by the user (formatted RFC 3339 timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastViewedByMeDate")]
		public System.Nullable<System.DateTimeOffset> LastViewedByMeDate { get; set; }
		
		/// <summary>
		/// Contains details about the link URLs that clients are using to refer to this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkShareMetadata")]
		public FileLinkShareMetadata LinkShareMetadata { get; set; }
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markedViewedByMeDate")]
		public System.Nullable<System.DateTimeOffset> MarkedViewedByMeDate { get; set; }
		
		/// <summary>
		/// Output only. An MD5 checksum for the content of this file. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5Checksum")]
		public string Md5Checksum { get; set; }
		
		/// <summary>
		/// The MIME type of the file. This is only mutable on update when uploading new content. This field can be left blank, and the mimetype will be determined from the uploaded content's MIME type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Last time this file was modified by the user (formatted RFC 3339 timestamp). Note that setting modifiedDate will also update the modifiedByMe date for the user which set the date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedByMeDate")]
		public System.Nullable<System.DateTimeOffset> ModifiedByMeDate { get; set; }
		
		/// <summary>
		/// Last time this file was modified by anyone (formatted RFC 3339 timestamp). This is only mutable on update when the setModifiedDate parameter is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedDate")]
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// Output only. A map of the id of each of the user's apps to a link to open this file with that app. Only populated when the drive.apps.readonly scope is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openWithLinks")]
		public System.Collections.Generic.Dictionary<string, string> OpenWithLinks { get; set; }
		
		/// <summary>
		/// The original filename of the uploaded content if available, or else the original value of the `title` field. This is only available for files with binary content in Google Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalFilename")]
		public string OriginalFilename { get; set; }
		
		/// <summary>
		/// Output only. Whether the file is owned by the current user. Not populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownedByMe")]
		public System.Nullable<System.Boolean> OwnedByMe { get; set; }
		
		/// <summary>
		/// Output only. Name(s) of the owner(s) of this file. Not populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerNames")]
		public string[] OwnerNames { get; set; }
		
		/// <summary>
		/// Output only. The owner of this file. Only certain legacy files may have more than one owner. This field isn't populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owners")]
		public User[] Owners { get; set; }
		
		/// <summary>
		/// Collection of parent folders which contain this file. If not specified as part of an insert request, the file will be placed directly in the user's My Drive folder. If not specified as part of a copy request, the file will inherit any discoverable parents of the source file. Update requests can also use the `addParents` and `removeParents` parameters to modify the parents list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parents")]
		public ParentReference[] Parents { get; set; }
		
		/// <summary>
		/// Output only. List of permission IDs for users with access to this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionIds")]
		public string[] PermissionIds { get; set; }
		
		/// <summary>
		/// Output only. The list of permissions for users with access to this file. Not populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public Permission[] Permissions { get; set; }
		
		/// <summary>
		/// The list of properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Property[] Properties { get; set; }
		
		/// <summary>
		/// Output only. The number of quota bytes used by this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotaBytesUsed")]
		public string QuotaBytesUsed { get; set; }
		
		/// <summary>
		/// Output only. A key needed to access the item via a shared link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceKey")]
		public string ResourceKey { get; set; }
		
		/// <summary>
		/// Output only. A link back to this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Output only. The SHA1 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1Checksum")]
		public string Sha1Checksum { get; set; }
		
		/// <summary>
		/// Output only. The SHA256 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256Checksum")]
		public string Sha256Checksum { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `capabilities/canShare` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareable")]
		public System.Nullable<System.Boolean> Shareable { get; set; }
		
		/// <summary>
		/// Output only. Whether the file has been shared. Not populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shared")]
		public System.Nullable<System.Boolean> Shared { get; set; }
		
		/// <summary>
		/// Time at which this file was shared with the user (formatted RFC 3339 timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedWithMeDate")]
		public System.Nullable<System.DateTimeOffset> SharedWithMeDate { get; set; }
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharingUser")]
		public User SharingUser { get; set; }
		
		/// <summary>
		/// Shortcut file details. Only populated for shortcut files, which have the mimeType field set to `application/vnd.google-apps.shortcut`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortcutDetails")]
		public FileShortcutDetails ShortcutDetails { get; set; }
		
		/// <summary>
		/// Output only. The list of spaces which contain the file. Supported values are `drive`, `appDataFolder` and `photos`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaces")]
		public string[] Spaces { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `driveId` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamDriveId")]
		public string TeamDriveId { get; set; }
		
		/// <summary>
		/// A thumbnail for the file. This will only be used if a standard thumbnail cannot be generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public FileThumbnail Thumbnail { get; set; }
		
		/// <summary>
		/// Output only. A short-lived link to the file's thumbnail, if available. Typically lasts on the order of hours. Only populated when the requesting app can access the file's content. If the file isn't shared publicly, the URL returned in `Files.thumbnailLink` must be fetched using a credentialed request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailLink")]
		public string ThumbnailLink { get; set; }
		
		/// <summary>
		/// Output only. The thumbnail version for use in thumbnail cache invalidation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailVersion")]
		public string ThumbnailVersion { get; set; }
		
		/// <summary>
		/// The title of this file. Note that for immutable items such as the top level folders of shared drives, My Drive root folder, and Application Data folder the title is constant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The time that the item was trashed (formatted RFC 3339 timestamp). Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trashedDate")]
		public System.Nullable<System.DateTimeOffset> TrashedDate { get; set; }
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trashingUser")]
		public User TrashingUser { get; set; }
		
		/// <summary>
		/// A permission for a file. A permission grants a user, group, domain, or the world access to a file or a folder hierarchy. Some resource methods (such as `permissions.update`) require a `permissionId`. Use the `permissions.list` method to retrieve the ID for a file, folder, or shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userPermission")]
		public Permission UserPermission { get; set; }
		
		/// <summary>
		/// Output only. A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the requesting user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		/// <summary>
		/// Output only. Metadata about video media. This will only be present for video types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoMediaMetadata")]
		public FileVideoMediaMetadata VideoMediaMetadata { get; set; }
		
		/// <summary>
		/// Output only. A link for downloading the content of the file in a browser using cookie based authentication. In cases where the content is shared publicly, the content can be downloaded without any credentials.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webContentLink")]
		public string WebContentLink { get; set; }
		
		/// <summary>
		/// Output only. A link only available on public folders for viewing their static web assets (HTML, CSS, JS, etc) via Google Drive's Website Hosting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webViewLink")]
		public string WebViewLink { get; set; }
		
		/// <summary>
		/// Whether writers can share the document with other users. Not populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writersCanShare")]
		public System.Nullable<System.Boolean> WritersCanShare { get; set; }
	}
	
	public class FileCapabilities
	{
		
		/// <summary>
		/// Output only. Whether the current user is the pending owner of the file. Not populated for shared drive files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAcceptOwnership")]
		public System.Nullable<System.Boolean> CanAcceptOwnership { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can add children to this folder. This is always false when the item is not a folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAddChildren")]
		public System.Nullable<System.Boolean> CanAddChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can add a folder from another drive (different shared drive or My Drive) to this folder. This is false when the item is not a folder. Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAddFolderFromAnotherDrive")]
		public System.Nullable<System.Boolean> CanAddFolderFromAnotherDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can add a parent for the item without removing an existing parent in the same request. Not populated for shared drive files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAddMyDriveParent")]
		public System.Nullable<System.Boolean> CanAddMyDriveParent { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the `copyRequiresWriterPermission` restriction of this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeCopyRequiresWriterPermission")]
		public System.Nullable<System.Boolean> CanChangeCopyRequiresWriterPermission { get; set; }
		
		/// <summary>
		/// Output only. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeRestrictedDownload")]
		public System.Nullable<System.Boolean> CanChangeRestrictedDownload { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can change the securityUpdateEnabled field on link share metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeSecurityUpdateEnabled")]
		public System.Nullable<System.Boolean> CanChangeSecurityUpdateEnabled { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can comment on this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canComment")]
		public System.Nullable<System.Boolean> CanComment { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can copy this file. For an item in a shared drive, whether the current user can copy non-folder descendants of this item, or this item itself if it is not a folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canCopy")]
		public System.Nullable<System.Boolean> CanCopy { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can delete this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDelete")]
		public System.Nullable<System.Boolean> CanDelete { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can delete children of this folder. This is false when the item is not a folder. Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDeleteChildren")]
		public System.Nullable<System.Boolean> CanDeleteChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can download this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDownload")]
		public System.Nullable<System.Boolean> CanDownload { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can edit this file. Other factors may limit the type of changes a user can make to a file. For example, see `canChangeCopyRequiresWriterPermission` or `canModifyContent`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canEdit")]
		public System.Nullable<System.Boolean> CanEdit { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can list the children of this folder. This is always false when the item is not a folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canListChildren")]
		public System.Nullable<System.Boolean> CanListChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can modify the content of this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canModifyContent")]
		public System.Nullable<System.Boolean> CanModifyContent { get; set; }
		
		/// <summary>
		/// Deprecated: Output only. Use one of `canModifyEditorContentRestriction`, `canModifyOwnerContentRestriction` or `canRemoveContentRestriction`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canModifyContentRestriction")]
		public System.Nullable<System.Boolean> CanModifyContentRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can add or modify content restrictions on the file which are editor restricted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canModifyEditorContentRestriction")]
		public System.Nullable<System.Boolean> CanModifyEditorContentRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can modify the labels on the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canModifyLabels")]
		public System.Nullable<System.Boolean> CanModifyLabels { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can add or modify content restrictions which are owner restricted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canModifyOwnerContentRestriction")]
		public System.Nullable<System.Boolean> CanModifyOwnerContentRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can move children of this folder outside of the shared drive. This is false when the item is not a folder. Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveChildrenOutOfDrive")]
		public System.Nullable<System.Boolean> CanMoveChildrenOutOfDrive { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `canMoveChildrenOutOfDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveChildrenOutOfTeamDrive")]
		public System.Nullable<System.Boolean> CanMoveChildrenOutOfTeamDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can move children of this folder within this drive. This is false when the item is not a folder. Note that a request to move the child may still fail depending on the current user's access to the child and to the destination folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveChildrenWithinDrive")]
		public System.Nullable<System.Boolean> CanMoveChildrenWithinDrive { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `canMoveChildrenWithinDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveChildrenWithinTeamDrive")]
		public System.Nullable<System.Boolean> CanMoveChildrenWithinTeamDrive { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `canMoveItemOutOfDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveItemIntoTeamDrive")]
		public System.Nullable<System.Boolean> CanMoveItemIntoTeamDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can move this item outside of this drive by changing its parent. Note that a request to change the parent of the item may still fail depending on the new parent that is being added.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveItemOutOfDrive")]
		public System.Nullable<System.Boolean> CanMoveItemOutOfDrive { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `canMoveItemOutOfDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveItemOutOfTeamDrive")]
		public System.Nullable<System.Boolean> CanMoveItemOutOfTeamDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can move this item within this drive. Note that a request to change the parent of the item may still fail depending on the new parent that is being added and the parent that is being removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveItemWithinDrive")]
		public System.Nullable<System.Boolean> CanMoveItemWithinDrive { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `canMoveItemWithinDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveItemWithinTeamDrive")]
		public System.Nullable<System.Boolean> CanMoveItemWithinTeamDrive { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `canMoveItemWithinDrive` or `canMoveItemOutOfDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canMoveTeamDriveItem")]
		public System.Nullable<System.Boolean> CanMoveTeamDriveItem { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can read the shared drive to which this file belongs. Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReadDrive")]
		public System.Nullable<System.Boolean> CanReadDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can read the labels on the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReadLabels")]
		public System.Nullable<System.Boolean> CanReadLabels { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can read the revisions resource of this file. For a shared drive item, whether revisions of non-folder descendants of this item, or this item itself if it is not a folder, can be read.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReadRevisions")]
		public System.Nullable<System.Boolean> CanReadRevisions { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `canReadDrive` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReadTeamDrive")]
		public System.Nullable<System.Boolean> CanReadTeamDrive { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can remove children from this folder. This is always false when the item is not a folder. For a folder in a shared drive, use `canDeleteChildren` or `canTrashChildren` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRemoveChildren")]
		public System.Nullable<System.Boolean> CanRemoveChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether there is a content restriction on the file that can be removed by the current user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRemoveContentRestriction")]
		public System.Nullable<System.Boolean> CanRemoveContentRestriction { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can remove a parent from the item without adding another parent in the same request. Not populated for shared drive files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRemoveMyDriveParent")]
		public System.Nullable<System.Boolean> CanRemoveMyDriveParent { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can rename this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRename")]
		public System.Nullable<System.Boolean> CanRename { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can modify the sharing settings for this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canShare")]
		public System.Nullable<System.Boolean> CanShare { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can move this file to trash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canTrash")]
		public System.Nullable<System.Boolean> CanTrash { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can trash children of this folder. This is false when the item is not a folder. Only populated for items in shared drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canTrashChildren")]
		public System.Nullable<System.Boolean> CanTrashChildren { get; set; }
		
		/// <summary>
		/// Output only. Whether the current user can restore this file from trash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canUntrash")]
		public System.Nullable<System.Boolean> CanUntrash { get; set; }
	}
	
	/// <summary>
	/// A restriction for accessing the content of the file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentRestriction
	{
		
		/// <summary>
		/// Whether the content restriction can only be modified or removed by a user who owns the file. For files in shared drives, any user with `organizer` capabilities can modify or remove this content restriction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerRestricted")]
		public System.Nullable<System.Boolean> OwnerRestricted { get; set; }
		
		/// <summary>
		/// Whether the content of the file is read-only. If a file is read-only, a new revision of the file may not be added, comments may not be added or modified, and the title of the file may not be modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
		
		/// <summary>
		/// Reason for why the content of the file is restricted. This is only mutable on requests that also set `readOnly=true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictingUser")]
		public User RestrictingUser { get; set; }
		
		/// <summary>
		/// The time at which the content restriction was set (formatted RFC 3339 timestamp). Only populated if readOnly is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictionDate")]
		public System.Nullable<System.DateTimeOffset> RestrictionDate { get; set; }
		
		/// <summary>
		/// Output only. Whether the content restriction was applied by the system, for example due to an esignature. Users cannot modify or remove system restricted content restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemRestricted")]
		public System.Nullable<System.Boolean> SystemRestricted { get; set; }
		
		/// <summary>
		/// Output only. The type of the content restriction. Currently the only possible value is `globalContentRestriction`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class FileImageMediaMetadata
	{
		
		/// <summary>
		/// Output only. The aperture used to create the photo (f-number).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aperture")]
		public System.Nullable<System.Single> Aperture { get; set; }
		
		/// <summary>
		/// Output only. The make of the camera used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cameraMake")]
		public string CameraMake { get; set; }
		
		/// <summary>
		/// Output only. The model of the camera used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cameraModel")]
		public string CameraModel { get; set; }
		
		/// <summary>
		/// Output only. The color space of the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorSpace")]
		public string ColorSpace { get; set; }
		
		/// <summary>
		/// Output only. The date and time the photo was taken (EXIF format timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Output only. The exposure bias of the photo (APEX value).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exposureBias")]
		public System.Nullable<System.Single> ExposureBias { get; set; }
		
		/// <summary>
		/// Output only. The exposure mode used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exposureMode")]
		public string ExposureMode { get; set; }
		
		/// <summary>
		/// Output only. The length of the exposure, in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exposureTime")]
		public System.Nullable<System.Single> ExposureTime { get; set; }
		
		/// <summary>
		/// Output only. Whether a flash was used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flashUsed")]
		public System.Nullable<System.Boolean> FlashUsed { get; set; }
		
		/// <summary>
		/// Output only. The focal length used to create the photo, in millimeters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="focalLength")]
		public System.Nullable<System.Single> FocalLength { get; set; }
		
		/// <summary>
		/// Output only. The height of the image in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Output only. The ISO speed used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isoSpeed")]
		public System.Nullable<System.Int32> IsoSpeed { get; set; }
		
		/// <summary>
		/// Output only. The lens used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lens")]
		public string Lens { get; set; }
		
		/// <summary>
		/// Output only. Geographic location information stored in the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public FileImageMediaMetadataLocation Location { get; set; }
		
		/// <summary>
		/// Output only. The smallest f-number of the lens at the focal length used to create the photo (APEX value).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxApertureValue")]
		public System.Nullable<System.Single> MaxApertureValue { get; set; }
		
		/// <summary>
		/// Output only. The metering mode used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meteringMode")]
		public string MeteringMode { get; set; }
		
		/// <summary>
		/// Output only. The number of clockwise 90 degree rotations applied from the image's original orientation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rotation")]
		public System.Nullable<System.Int32> Rotation { get; set; }
		
		/// <summary>
		/// Output only. The type of sensor used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sensor")]
		public string Sensor { get; set; }
		
		/// <summary>
		/// Output only. The distance to the subject of the photo, in meters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subjectDistance")]
		public System.Nullable<System.Int32> SubjectDistance { get; set; }
		
		/// <summary>
		/// Output only. The white balance mode used to create the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whiteBalance")]
		public string WhiteBalance { get; set; }
		
		/// <summary>
		/// Output only. The width of the image in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class FileImageMediaMetadataLocation
	{
		
		/// <summary>
		/// Output only. The altitude stored in the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altitude")]
		public System.Nullable<System.Double> Altitude { get; set; }
		
		/// <summary>
		/// Output only. The latitude stored in the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Output only. The longitude stored in the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	public class FileIndexableText
	{
		
		/// <summary>
		/// The text to be indexed for this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	public class FileLabelInfo
	{
		
		/// <summary>
		/// Output only. The set of labels on the file as requested by the label IDs in the `includeLabels` parameter. By default, no labels are returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
	}
	
	/// <summary>
	/// Representation of a label and label fields.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Label
	{
		
		/// <summary>
		/// A map of the fields on the label, keyed by the field's ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public System.Collections.Generic.Dictionary<string, LabelField> Fields { get; set; }
		
		/// <summary>
		/// The ID of the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// This is always `drive#label`
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#label")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#label";
		
		/// <summary>
		/// The revision ID of the label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// Representation of field, which is a typed key-value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LabelField
	{
		
		/// <summary>
		/// Only present if valueType is dateString. RFC 3339 formatted date: YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateString")]
		public string[] DateString { get; set; }
		
		/// <summary>
		/// The identifier of this label field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Only present if `valueType` is `integer`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integer")]
		public string[] Integer { get; set; }
		
		/// <summary>
		/// This is always `drive#labelField`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#labelField")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#labelField";
		
		/// <summary>
		/// Only present if `valueType` is `selection`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selection")]
		public string[] Selection { get; set; }
		
		/// <summary>
		/// Only present if `valueType` is `text`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string[] Text { get; set; }
		
		/// <summary>
		/// Only present if `valueType` is `user`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User[] User { get; set; }
		
		/// <summary>
		/// The field type. While new values may be supported in the future, the following are currently allowed: * `dateString` * `integer` * `selection` * `text` * `user`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueType")]
		public string ValueType { get; set; }
	}
	
	public class FileLabels
	{
		
		/// <summary>
		/// Output only. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		/// <summary>
		/// Output only. Whether the file has been modified by this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public System.Nullable<System.Boolean> Modified { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `copyRequiresWriterPermission` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restricted")]
		public System.Nullable<System.Boolean> Restricted { get; set; }
		
		/// <summary>
		/// Whether this file is starred by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starred")]
		public System.Nullable<System.Boolean> Starred { get; set; }
		
		/// <summary>
		/// Whether this file has been trashed. This label applies to all users accessing the file; however, only owners are allowed to see and untrash files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trashed")]
		public System.Nullable<System.Boolean> Trashed { get; set; }
		
		/// <summary>
		/// Whether this file has been viewed by this user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewed")]
		public System.Nullable<System.Boolean> Viewed { get; set; }
	}
	
	public class FileLinkShareMetadata
	{
		
		/// <summary>
		/// Output only. Whether the file is eligible for security update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityUpdateEligible")]
		public System.Nullable<System.Boolean> SecurityUpdateEligible { get; set; }
		
		/// <summary>
		/// Output only. Whether the security update is enabled for this file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityUpdateEnabled")]
		public System.Nullable<System.Boolean> SecurityUpdateEnabled { get; set; }
	}
	
	/// <summary>
	/// A reference to a file's parent. Some resource methods (such as `parents.get`) require a `parentId`. Use the `parents.list` method to retrieve the ID for a parent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParentReference
	{
		
		/// <summary>
		/// The ID of the parent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. Whether or not the parent is the root folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRoot")]
		public System.Nullable<System.Boolean> IsRoot { get; set; }
		
		/// <summary>
		/// Output only. This is always `drive#parentReference`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#parentReference")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#parentReference";
		
		/// <summary>
		/// Output only. A link to the parent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentLink")]
		public string ParentLink { get; set; }
		
		/// <summary>
		/// Output only. A link back to this reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// A permission for a file. A permission grants a user, group, domain, or the world access to a file or a folder hierarchy. Some resource methods (such as `permissions.update`) require a `permissionId`. Use the `permissions.list` method to retrieve the ID for a file, folder, or shared drive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Permission
	{
		
		/// <summary>
		/// Additional roles for this user. Only `commenter` is currently allowed, though more may be supported in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalRoles")]
		public string[] AdditionalRoles { get; set; }
		
		/// <summary>
		/// Output only. Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authKey")]
		public string AuthKey { get; set; }
		
		/// <summary>
		/// Output only. Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// Output only. The domain name of the entity this permission refers to. This is an output-only field which is present when the permission type is `user`, `group` or `domain`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Output only. The email address of the user or group this permission refers to. This is an output-only field which is present when the permission type is `user` or `group`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Output only. The ETag of the permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The time at which this permission will expire (RFC 3339 date-time). Expiration dates have the following restrictions: - They can only be set on user and group permissions - The date must be in the future - The date cannot be more than a year in the future - The date can only be set on drive.permissions.update or drive.permissions.patch requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// The ID of the user this permission refers to, and identical to the `permissionId` in the About and Files resources. When making a `drive.permissions.insert` request, exactly one of the `id` or `value` fields must be specified unless the permission type is `anyone`, in which case both `id` and `value` are ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. This is always `drive#permission`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#permission")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#permission";
		
		/// <summary>
		/// Output only. The name for this permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether the account associated with this permission is a pending owner. Only populated for `user` type permissions for files that are not in a shared drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingOwner")]
		public System.Nullable<System.Boolean> PendingOwner { get; set; }
		
		/// <summary>
		/// Output only. Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionDetails")]
		public PermissionPermissionDetails[] PermissionPermissionDetails { get; set; }
		
		/// <summary>
		/// Output only. A link to the profile photo, if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoLink")]
		public string PhotoLink { get; set; }
		
		/// <summary>
		/// The primary role for this user. While new values may be supported in the future, the following are currently allowed: * `owner` * `organizer` * `fileOrganizer` * `writer` * `reader`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// Output only. A link back to this permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `permissionDetails` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamDrivePermissionDetails")]
		public PermissionTeamDrivePermissionDetails[] PermissionTeamDrivePermissionDetails { get; set; }
		
		/// <summary>
		/// The account type. Allowed values are: * `user` * `group` * `domain` * `anyone`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The email address or domain name for the entity. This is used during inserts and is not populated in responses. When making a `drive.permissions.insert` request, exactly one of the `id` or `value` fields must be specified unless the permission type is `anyone`, in which case both `id` and `value` are ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// Indicates the view for this permission. Only populated for permissions that belong to a view. `published` is the only supported value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="view")]
		public string View { get; set; }
		
		/// <summary>
		/// Whether the link is required for this permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withLink")]
		public System.Nullable<System.Boolean> WithLink { get; set; }
	}
	
	public class PermissionPermissionDetails
	{
		
		/// <summary>
		/// Output only. Additional roles for this user. Only `commenter` is currently possible, though more may be supported in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalRoles")]
		public string[] AdditionalRoles { get; set; }
		
		/// <summary>
		/// Output only. Whether this permission is inherited. This field is always populated. This is an output-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inherited")]
		public System.Nullable<System.Boolean> Inherited { get; set; }
		
		/// <summary>
		/// Output only. The ID of the item from which this permission is inherited. This is an output-only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inheritedFrom")]
		public string InheritedFrom { get; set; }
		
		/// <summary>
		/// Output only. The permission type for this user. While new values may be added in future, the following are currently possible: * `file` * `member`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionType")]
		public string PermissionType { get; set; }
		
		/// <summary>
		/// Output only. The primary role for this user. While new values may be added in the future, the following are currently possible: * `organizer` * `fileOrganizer` * `writer` * `reader`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	public class PermissionTeamDrivePermissionDetails
	{
		
		/// <summary>
		/// Output only. Deprecated: Use `permissionDetails/additionalRoles` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalRoles")]
		public string[] AdditionalRoles { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `permissionDetails/inherited` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inherited")]
		public System.Nullable<System.Boolean> Inherited { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `permissionDetails/inheritedFrom` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inheritedFrom")]
		public string InheritedFrom { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `permissionDetails/role` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// Output only. Deprecated: Use `permissionDetails/permissionType` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamDrivePermissionType")]
		public string TeamDrivePermissionType { get; set; }
	}
	
	/// <summary>
	/// A key-value pair attached to a file that is either public or private to an application. The following limits apply to file properties: * Maximum of 100 properties total per file * Maximum of 30 private properties per app * Maximum of 30 public properties * Maximum of 124 bytes size limit on (key + value) string in UTF-8 encoding for a single property Some resource methods (such as `properties.update`) require a `propertyKey`. Use the `properties.list` method to retrieve the key for a property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Property
	{
		
		/// <summary>
		/// Output only. ETag of the property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The key of this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Output only. This is always `drive#property`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#property")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#property";
		
		/// <summary>
		/// Output only. The link back to this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The value of this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// The visibility of this property. Allowed values are PRIVATE (default) and PUBLIC. Private properties can only be retrieved using an authenticated request. An authenticated request uses an access token obtained with a OAuth 2 client ID. You cannot use an API key to retrieve private properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public string Visibility { get; set; }
	}
	
	public class FileShortcutDetails
	{
		
		/// <summary>
		/// The ID of the file that this shortcut points to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetId")]
		public string TargetId { get; set; }
		
		/// <summary>
		/// Output only. The MIME type of the file that this shortcut points to. The value of this field is a snapshot of the target's MIME type, captured when the shortcut is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetMimeType")]
		public string TargetMimeType { get; set; }
		
		/// <summary>
		/// Output only. The ResourceKey for the target file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetResourceKey")]
		public string TargetResourceKey { get; set; }
	}
	
	public class FileThumbnail
	{
		
		/// <summary>
		/// The URL-safe Base64 encoded bytes of the thumbnail image. It should conform to RFC 4648 section 5.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// The MIME type of the thumbnail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
	}
	
	public class FileVideoMediaMetadata
	{
		
		/// <summary>
		/// Output only. The duration of the video in milliseconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="durationMillis")]
		public string DurationMillis { get; set; }
		
		/// <summary>
		/// Output only. The height of the video in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Output only. The width of the video in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	/// <summary>
	/// Deprecated: Use the `drive` collection instead.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamDrive
	{
		
		/// <summary>
		/// An image file and cropping parameters from which a background image for this Team Drive is set. This is a write only field; it can only be set on `drive.teamdrives.update` requests that don't set `themeId`. When specified, all fields of the `backgroundImageFile` must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImageFile")]
		public TeamDriveBackgroundImageFile BackgroundImageFile { get; set; }
		
		/// <summary>
		/// A short-lived link to this Team Drive's background image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImageLink")]
		public string BackgroundImageLink { get; set; }
		
		/// <summary>
		/// Capabilities the current user has on this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public TeamDriveCapabilities Capabilities { get; set; }
		
		/// <summary>
		/// The color of this Team Drive as an RGB hex string. It can only be set on a `drive.teamdrives.update` request that does not set `themeId`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorRgb")]
		public string ColorRgb { get; set; }
		
		/// <summary>
		/// The time at which the Team Drive was created (RFC 3339 date-time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// The ID of this Team Drive which is also the ID of the top level folder of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// This is always `drive#teamDrive`
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#teamDrive")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#teamDrive";
		
		/// <summary>
		/// The name of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The organizational unit of this shared drive. This field is only populated on `drives.list` responses when the `useDomainAdminAccess` parameter is set to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgUnitId")]
		public string OrgUnitId { get; set; }
		
		/// <summary>
		/// A set of restrictions that apply to this Team Drive or items inside this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public TeamDriveRestrictions Restrictions { get; set; }
		
		/// <summary>
		/// The ID of the theme from which the background image and color will be set. The set of possible `teamDriveThemes` can be retrieved from a `drive.about.get` response. When not specified on a `drive.teamdrives.insert` request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set `colorRgb` or `backgroundImageFile`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="themeId")]
		public string ThemeId { get; set; }
	}
	
	public class TeamDriveBackgroundImageFile
	{
		
		/// <summary>
		/// The ID of an image file in Drive to use for the background image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The width of the cropped image in the closed range of 0 to 1. This value represents the width of the cropped image divided by the width of the entire image. The height is computed by applying a width to height aspect ratio of 80 to 9. The resulting image must be at least 1280 pixels wide and 144 pixels high.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Single> Width { get; set; }
		
		/// <summary>
		/// The X coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the horizontal distance from the left side of the entire image to the left side of the cropping area divided by the width of the entire image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xCoordinate")]
		public System.Nullable<System.Single> XCoordinate { get; set; }
		
		/// <summary>
		/// The Y coordinate of the upper left corner of the cropping area in the background image. This is a value in the closed range of 0 to 1. This value represents the vertical distance from the top side of the entire image to the top side of the cropping area divided by the height of the entire image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yCoordinate")]
		public System.Nullable<System.Single> YCoordinate { get; set; }
	}
	
	public class TeamDriveCapabilities
	{
		
		/// <summary>
		/// Whether the current user can add children to folders in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAddChildren")]
		public System.Nullable<System.Boolean> CanAddChildren { get; set; }
		
		/// <summary>
		/// Whether the current user can change the `copyRequiresWriterPermission` restriction of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeCopyRequiresWriterPermissionRestriction")]
		public System.Nullable<System.Boolean> CanChangeCopyRequiresWriterPermissionRestriction { get; set; }
		
		/// <summary>
		/// Whether the current user can change the `domainUsersOnly` restriction of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeDomainUsersOnlyRestriction")]
		public System.Nullable<System.Boolean> CanChangeDomainUsersOnlyRestriction { get; set; }
		
		/// <summary>
		/// Whether the current user can change the `sharingFoldersRequiresOrganizerPermission` restriction of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeSharingFoldersRequiresOrganizerPermissionRestriction")]
		public System.Nullable<System.Boolean> CanChangeSharingFoldersRequiresOrganizerPermissionRestriction { get; set; }
		
		/// <summary>
		/// Whether the current user can change the background of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeTeamDriveBackground")]
		public System.Nullable<System.Boolean> CanChangeTeamDriveBackground { get; set; }
		
		/// <summary>
		/// Whether the current user can change the `teamMembersOnly` restriction of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canChangeTeamMembersOnlyRestriction")]
		public System.Nullable<System.Boolean> CanChangeTeamMembersOnlyRestriction { get; set; }
		
		/// <summary>
		/// Whether the current user can comment on files in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canComment")]
		public System.Nullable<System.Boolean> CanComment { get; set; }
		
		/// <summary>
		/// Whether the current user can copy files in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canCopy")]
		public System.Nullable<System.Boolean> CanCopy { get; set; }
		
		/// <summary>
		/// Whether the current user can delete children from folders in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDeleteChildren")]
		public System.Nullable<System.Boolean> CanDeleteChildren { get; set; }
		
		/// <summary>
		/// Whether the current user can delete this Team Drive. Attempting to delete the Team Drive may still fail if there are untrashed items inside the Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDeleteTeamDrive")]
		public System.Nullable<System.Boolean> CanDeleteTeamDrive { get; set; }
		
		/// <summary>
		/// Whether the current user can download files in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canDownload")]
		public System.Nullable<System.Boolean> CanDownload { get; set; }
		
		/// <summary>
		/// Whether the current user can edit files in this Team Drive
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canEdit")]
		public System.Nullable<System.Boolean> CanEdit { get; set; }
		
		/// <summary>
		/// Whether the current user can list the children of folders in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canListChildren")]
		public System.Nullable<System.Boolean> CanListChildren { get; set; }
		
		/// <summary>
		/// Whether the current user can add members to this Team Drive or remove them or change their role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canManageMembers")]
		public System.Nullable<System.Boolean> CanManageMembers { get; set; }
		
		/// <summary>
		/// Whether the current user can read the revisions resource of files in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canReadRevisions")]
		public System.Nullable<System.Boolean> CanReadRevisions { get; set; }
		
		/// <summary>
		/// Deprecated: Use `canDeleteChildren` or `canTrashChildren` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRemoveChildren")]
		public System.Nullable<System.Boolean> CanRemoveChildren { get; set; }
		
		/// <summary>
		/// Whether the current user can rename files or folders in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRename")]
		public System.Nullable<System.Boolean> CanRename { get; set; }
		
		/// <summary>
		/// Whether the current user can rename this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canRenameTeamDrive")]
		public System.Nullable<System.Boolean> CanRenameTeamDrive { get; set; }
		
		/// <summary>
		/// Whether the current user can reset the Team Drive restrictions to defaults.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canResetTeamDriveRestrictions")]
		public System.Nullable<System.Boolean> CanResetTeamDriveRestrictions { get; set; }
		
		/// <summary>
		/// Whether the current user can share files or folders in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canShare")]
		public System.Nullable<System.Boolean> CanShare { get; set; }
		
		/// <summary>
		/// Whether the current user can trash children from folders in this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canTrashChildren")]
		public System.Nullable<System.Boolean> CanTrashChildren { get; set; }
	}
	
	public class TeamDriveRestrictions
	{
		
		/// <summary>
		/// Whether administrative privileges on this Team Drive are required to modify restrictions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminManagedRestrictions")]
		public System.Nullable<System.Boolean> AdminManagedRestrictions { get; set; }
		
		/// <summary>
		/// Whether the options to copy, print, or download files inside this Team Drive, should be disabled for readers and commenters. When this restriction is set to `true`, it will override the similarly named field to `true` for any file inside this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyRequiresWriterPermission")]
		public System.Nullable<System.Boolean> CopyRequiresWriterPermission { get; set; }
		
		/// <summary>
		/// Whether access to this Team Drive and items inside this Team Drive is restricted to users of the domain to which this Team Drive belongs. This restriction may be overridden by other sharing policies controlled outside of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainUsersOnly")]
		public System.Nullable<System.Boolean> DomainUsersOnly { get; set; }
		
		/// <summary>
		/// If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharingFoldersRequiresOrganizerPermission")]
		public System.Nullable<System.Boolean> SharingFoldersRequiresOrganizerPermission { get; set; }
		
		/// <summary>
		/// Whether access to items inside this Team Drive is restricted to members of this Team Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamMembersOnly")]
		public System.Nullable<System.Boolean> TeamMembersOnly { get; set; }
	}
	
	/// <summary>
	/// A list of changes for a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChangeList
	{
		
		/// <summary>
		/// The ETag of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The list of changes. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Change[] Items { get; set; }
		
		/// <summary>
		/// This is always `drive#changeList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#changeList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#changeList";
		
		/// <summary>
		/// The current largest change ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="largestChangeId")]
		public string LargestChangeId { get; set; }
		
		/// <summary>
		/// The starting page token for future changes. This will be present only if the end of the current changes list has been reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newStartPageToken")]
		public string NewStartPageToken { get; set; }
		
		/// <summary>
		/// A link to the next page of changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The page token for the next page of changes. This will be absent if the end of the changes list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A link back to this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// A notification channel used to watch for resource changes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Channel
	{
		
		/// <summary>
		/// The address where notifications are delivered for this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public string Expiration { get; set; }
		
		/// <summary>
		/// A UUID or similar unique string that identifies this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`.
		/// </summary>
		[System.ComponentModel.DefaultValue("api#channel")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "api#channel";
		
		/// <summary>
		/// Additional parameters controlling delivery channel behavior. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, string> Params { get; set; }
		
		/// <summary>
		/// A Boolean value to indicate whether payload is wanted. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public System.Nullable<System.Boolean> Payload { get; set; }
		
		/// <summary>
		/// An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// A version-specific identifier for the watched resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
		
		/// <summary>
		/// An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The type of delivery mechanism used for this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A list of children of a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChildList
	{
		
		/// <summary>
		/// The ETag of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The list of children. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ChildReference[] Items { get; set; }
		
		/// <summary>
		/// This is always `drive#childList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#childList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#childList";
		
		/// <summary>
		/// A link to the next page of children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The page token for the next page of children. This will be absent if the end of the children list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A link back to this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// A reference to a folder's child. Some resource methods (such as `children.get`) require a `childId`. Use the `children.list` method to retrieve the ID of the child.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChildReference
	{
		
		/// <summary>
		/// Output only. A link to the child.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childLink")]
		public string ChildLink { get; set; }
		
		/// <summary>
		/// The ID of the child.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. This is always `drive#childReference`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#childReference")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#childReference";
		
		/// <summary>
		/// Output only. A link back to this reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// A comment on a file in Google Drive. Some resource methods (such as `comments.update`) require a `commentId`. Use the `comments.list` method to retrieve the ID for a comment in a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Comment
	{
		
		/// <summary>
		/// A region of the document represented as a JSON string. For details on defining anchor properties, refer to [Add comments and replies](https://developers.google.com/drive/api/v2/manage-comments).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="anchor")]
		public string Anchor { get; set; }
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public User Author { get; set; }
		
		/// <summary>
		/// Output only. The ID of the comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commentId")]
		public string CommentId { get; set; }
		
		/// <summary>
		/// The plain text content used to create this comment. This is not HTML safe and should only be used as a starting point to make edits to a comment's content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The context of the file which is being commented on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public CommentContext Context { get; set; }
		
		/// <summary>
		/// The date when this comment was first created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Output only. Whether this comment has been deleted. If a comment has been deleted the content will be cleared and this will only represent a comment that once existed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// Output only. The file which this comment is addressing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileId")]
		public string FileId { get; set; }
		
		/// <summary>
		/// Output only. The title of the file which this comment is addressing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileTitle")]
		public string FileTitle { get; set; }
		
		/// <summary>
		/// Output only. HTML formatted content for this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlContent")]
		public string HtmlContent { get; set; }
		
		/// <summary>
		/// Output only. This is always `drive#comment`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#comment")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#comment";
		
		/// <summary>
		/// The date when this comment or any of its replies were last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedDate")]
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// Output only. Replies to this post.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public CommentReply[] Replies { get; set; }
		
		/// <summary>
		/// Output only. A link back to this comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Output only. The status of this comment. Status can be changed by posting a reply to a comment with the desired status. * `open` - The comment is still open. * `resolved` - The comment has been resolved by one of its replies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class CommentContext
	{
		
		/// <summary>
		/// The MIME type of the context snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Data representation of the segment of the file being commented on. In the case of a text file for example, this would be the actual text that the comment is about.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A comment on a file in Google Drive. Some resource methods (such as `replies.update`) require a `replyId`. Use the `replies.list` method to retrieve the ID for a reply.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommentReply
	{
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public User Author { get; set; }
		
		/// <summary>
		/// The plain text content used to create this reply. This is not HTML safe and should only be used as a starting point to make edits to a reply's content. This field is required on inserts if no verb is specified (resolve/reopen).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The date when this reply was first created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public System.Nullable<System.DateTimeOffset> CreatedDate { get; set; }
		
		/// <summary>
		/// Output only. Whether this reply has been deleted. If a reply has been deleted the content will be cleared and this will only represent a reply that once existed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// Output only. HTML formatted content for this reply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlContent")]
		public string HtmlContent { get; set; }
		
		/// <summary>
		/// Output only. This is always `drive#commentReply`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#commentReply")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#commentReply";
		
		/// <summary>
		/// The date when this reply was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedDate")]
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// Output only. The ID of the reply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyId")]
		public string ReplyId { get; set; }
		
		/// <summary>
		/// The action this reply performed to the parent comment. When creating a new reply this is the action to be perform to the parent comment. Possible values are: * `resolve` - To resolve a comment. * `reopen` - To reopen (un-resolve) a comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// A list of comments on a file in Google Drive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommentList
	{
		
		/// <summary>
		/// The list of comments. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Comment[] Items { get; set; }
		
		/// <summary>
		/// This is always `drive#commentList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#commentList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#commentList";
		
		/// <summary>
		/// A link to the next page of comments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The page token for the next page of comments. This will be absent if the end of the comments list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A link back to this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// A list of replies to a comment on a file in Google Drive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CommentReplyList
	{
		
		/// <summary>
		/// The list of replies. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CommentReply[] Items { get; set; }
		
		/// <summary>
		/// This is always `drive#commentReplyList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#commentReplyList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#commentReplyList";
		
		/// <summary>
		/// A link to the next page of replies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The page token for the next page of replies. This will be absent if the end of the replies list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A link back to this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// A list of shared drives.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DriveList
	{
		
		/// <summary>
		/// The list of shared drives. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Drive[] Items { get; set; }
		
		/// <summary>
		/// This is always `drive#driveList`
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#driveList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#driveList";
		
		/// <summary>
		/// The page token for the next page of shared drives. This will be absent if the end of the list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A list of files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileList
	{
		
		/// <summary>
		/// The ETag of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Whether the search process was incomplete. If true, then some search results may be missing, since all documents were not searched. This may occur when searching multiple drives with the "allDrives" corpora, but all corpora could not be searched. When this happens, it is suggested that clients narrow their query by choosing a different corpus such as "default" or "drive".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incompleteSearch")]
		public System.Nullable<System.Boolean> IncompleteSearch { get; set; }
		
		/// <summary>
		/// The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public File[] Items { get; set; }
		
		/// <summary>
		/// This is always `drive#fileList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#fileList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#fileList";
		
		/// <summary>
		/// A link to the next page of files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLink")]
		public string NextLink { get; set; }
		
		/// <summary>
		/// The page token for the next page of files. This will be absent if the end of the files list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A link back to this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// A list of generated IDs which can be provided in insert requests
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeneratedIds
	{
		
		/// <summary>
		/// The IDs generated for the requesting user in the specified space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		/// <summary>
		/// This is always `drive#generatedIds`
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#generatedIds")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#generatedIds";
		
		/// <summary>
		/// The type of file that can be created with these IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="space")]
		public string Space { get; set; }
	}
	
	/// <summary>
	/// A modification to a label's field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LabelFieldModification
	{
		
		/// <summary>
		/// The ID of the field to be modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldId")]
		public string FieldId { get; set; }
		
		/// <summary>
		/// This is always `drive#labelFieldModification`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#labelFieldModification")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#labelFieldModification";
		
		/// <summary>
		/// Replaces the value of a dateString Field with these new values. The string must be in the RFC 3339 full-date format: YYYY-MM-DD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setDateValues")]
		public string[] SetDateValues { get; set; }
		
		/// <summary>
		/// Replaces the value of an `integer` field with these new values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setIntegerValues")]
		public string[] SetIntegerValues { get; set; }
		
		/// <summary>
		/// Replaces a `selection` field with these new values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setSelectionValues")]
		public string[] SetSelectionValues { get; set; }
		
		/// <summary>
		/// Sets the value of a `text` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setTextValues")]
		public string[] SetTextValues { get; set; }
		
		/// <summary>
		/// Replaces a `user` field with these new values. The values must be valid email addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setUserValues")]
		public string[] SetUserValues { get; set; }
		
		/// <summary>
		/// Unsets the values for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unsetValues")]
		public System.Nullable<System.Boolean> UnsetValues { get; set; }
	}
	
	/// <summary>
	/// A list of labels applied to a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LabelList
	{
		
		/// <summary>
		/// The list of labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Label[] Items { get; set; }
		
		/// <summary>
		/// This is always `drive#labelList`
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#labelList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#labelList";
		
		/// <summary>
		/// The page token for the next page of labels. This field will be absent if the end of the list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A modification to a label on a file. A LabelModification can be used to apply a label to a file, update an existing label on a file, or remove a label from a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LabelModification
	{
		
		/// <summary>
		/// The list of modifications to this label's fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldModifications")]
		public LabelFieldModification[] FieldModifications { get; set; }
		
		/// <summary>
		/// This is always `drive#labelModification`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#labelModification")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#labelModification";
		
		/// <summary>
		/// The ID of the label to modify.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelId")]
		public string LabelId { get; set; }
		
		/// <summary>
		/// If true, the label will be removed from the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removeLabel")]
		public System.Nullable<System.Boolean> RemoveLabel { get; set; }
	}
	
	/// <summary>
	/// A request to modify the set of labels on a file. This request may contain many modifications that will either all succeed or all fail atomically.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModifyLabelsRequest
	{
		
		/// <summary>
		/// This is always `drive#modifyLabelsRequest`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#modifyLabelsRequest")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#modifyLabelsRequest";
		
		/// <summary>
		/// The list of modifications to apply to the labels on the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labelModifications")]
		public LabelModification[] LabelModifications { get; set; }
	}
	
	/// <summary>
	/// Response to a ModifyLabels request. This contains only those labels which were added or updated by the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModifyLabelsResponse
	{
		
		/// <summary>
		/// This is always `drive#modifyLabelsResponse`
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#modifyLabelsResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#modifyLabelsResponse";
		
		/// <summary>
		/// The list of labels which were added or updated by the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedLabels")]
		public Label[] ModifiedLabels { get; set; }
	}
	
	/// <summary>
	/// A list of a file's parents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParentList
	{
		
		/// <summary>
		/// The ETag of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The list of parents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ParentReference[] Items { get; set; }
		
		/// <summary>
		/// This is always `drive#parentList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#parentList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#parentList";
		
		/// <summary>
		/// A link back to this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// An ID for a user or group as seen in Permission items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PermissionId
	{
		
		/// <summary>
		/// The permission ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// This is always `drive#permissionId`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#permissionId")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#permissionId";
	}
	
	/// <summary>
	/// A list of permissions associated with a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PermissionList
	{
		
		/// <summary>
		/// The ETag of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The list of permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Permission[] Items { get; set; }
		
		/// <summary>
		/// This is always `drive#permissionList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#permissionList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#permissionList";
		
		/// <summary>
		/// The page token for the next page of permissions. This field will be absent if the end of the permissions list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A link back to this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// A collection of properties, key-value pairs that are either public or private to an application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyList
	{
		
		/// <summary>
		/// The ETag of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The list of properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Property[] Items { get; set; }
		
		/// <summary>
		/// This is always `drive#propertyList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#propertyList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#propertyList";
		
		/// <summary>
		/// The link back to this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// A revision of a file. Some resource methods (such as `revisions.update`) require a `revisionId`. Use the `revisions.list` method to retrieve the ID for a revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Revision
	{
		
		/// <summary>
		/// Output only. Short term download URL for the file. This will only be populated on files with content stored in Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
		
		/// <summary>
		/// Output only. The ETag of the revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Output only. Links for exporting Docs Editors files to specific formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exportLinks")]
		public System.Collections.Generic.Dictionary<string, string> ExportLinks { get; set; }
		
		/// <summary>
		/// Output only. The size of the revision in bytes. This will only be populated on files with content stored in Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSize")]
		public string FileSize { get; set; }
		
		/// <summary>
		/// Output only. The ID of the revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. This is always `drive#revision`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#revision")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#revision";
		
		/// <summary>
		/// Information about a Drive user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifyingUser")]
		public User LastModifyingUser { get; set; }
		
		/// <summary>
		/// Output only. Name of the last user to modify this revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifyingUserName")]
		public string LastModifyingUserName { get; set; }
		
		/// <summary>
		/// Output only. An MD5 checksum for the content of this revision. This will only be populated on files with content stored in Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5Checksum")]
		public string Md5Checksum { get; set; }
		
		/// <summary>
		/// Output only. The MIME type of the revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Last time this revision was modified (formatted RFC 3339 timestamp).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedDate")]
		public System.Nullable<System.DateTimeOffset> ModifiedDate { get; set; }
		
		/// <summary>
		/// Output only. The original filename when this revision was created. This will only be populated on files with content stored in Drive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalFilename")]
		public string OriginalFilename { get; set; }
		
		/// <summary>
		/// Whether this revision is pinned to prevent automatic purging. If not set, the revision is automatically purged 30 days after newer content is uploaded. This field can only be modified on files with content stored in Drive, excluding Docs Editors files. Revisions can also be pinned when they are created through the drive.files.insert/update/copy by using the pinned query parameter. Pinned revisions are stored indefinitely using additional storage quota, up to a maximum of 200 revisions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pinned")]
		public System.Nullable<System.Boolean> Pinned { get; set; }
		
		/// <summary>
		/// Whether subsequent revisions will be automatically republished. This is only populated and can only be modified for Docs Editors files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishAuto")]
		public System.Nullable<System.Boolean> PublishAuto { get; set; }
		
		/// <summary>
		/// Whether this revision is published. This is only populated and can only be modified for Docs Editors files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="published")]
		public System.Nullable<System.Boolean> Published { get; set; }
		
		/// <summary>
		/// Output only. A link to the published revision. This is only populated for Google Sites files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedLink")]
		public string PublishedLink { get; set; }
		
		/// <summary>
		/// Whether this revision is published outside the domain. This is only populated and can only be modified for Docs Editors files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publishedOutsideDomain")]
		public System.Nullable<System.Boolean> PublishedOutsideDomain { get; set; }
		
		/// <summary>
		/// Output only. A link back to this revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	/// <summary>
	/// A list of revisions of a file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevisionList
	{
		
		/// <summary>
		/// The ETag of the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The list of revisions. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Revision[] Items { get; set; }
		
		/// <summary>
		/// This is always `drive#revisionList`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#revisionList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#revisionList";
		
		/// <summary>
		/// The page token for the next page of revisions. This field will be absent if the end of the revisions list has been reached. If the token is rejected for any reason, it should be discarded and pagination should be restarted from the first page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A link back to this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartPageToken
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string `"drive#startPageToken"`.
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#startPageToken")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#startPageToken";
		
		/// <summary>
		/// The starting page token for listing changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startPageToken")]
		public string StartPageToken1 { get; set; }
	}
	
	/// <summary>
	/// A list of Team Drives.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TeamDriveList
	{
		
		/// <summary>
		/// The list of Team Drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public TeamDrive[] Items { get; set; }
		
		/// <summary>
		/// This is always `drive#teamDriveList`
		/// </summary>
		[System.ComponentModel.DefaultValue("drive#teamDriveList")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "drive#teamDriveList";
		
		/// <summary>
		/// The page token for the next page of Team Drives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the information about the current user along with Drive API settings
		/// Drive_about_get about
		/// </summary>
		/// <param name="includeSubscribed">Whether to count changes outside the My Drive hierarchy. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the `maxChangeIdCount`.</param>
		/// <param name="maxChangeIdCount">Maximum number of remaining change IDs to count</param>
		/// <param name="startChangeId">Change ID to start counting from when calculating number of remaining change IDs</param>
		/// <returns>Successful response</returns>
		public async Task<About> Drive_about_getAsync(bool includeSubscribed, string maxChangeIdCount, string startChangeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "about?includeSubscribed="+includeSubscribed+"&maxChangeIdCount=" + (maxChangeIdCount==null? "" : System.Uri.EscapeDataString(maxChangeIdCount))+"&startChangeId=" + (startChangeId==null? "" : System.Uri.EscapeDataString(startChangeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<About>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists a user's installed apps.
		/// Drive_apps_list apps
		/// </summary>
		/// <param name="appFilterExtensions">A comma-separated list of file extensions for open with filtering. All apps within the given app query scope which can open any of the given file extensions will be included in the response. If `appFilterMimeTypes` are provided as well, the result is a union of the two resulting app lists.</param>
		/// <param name="appFilterMimeTypes">A comma-separated list of MIME types for open with filtering. All apps within the given app query scope which can open any of the given MIME types will be included in the response. If `appFilterExtensions` are provided as well, the result is a union of the two resulting app lists.</param>
		/// <param name="languageCode">A language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).</param>
		/// <returns>Successful response</returns>
		public async Task<AppList> Drive_apps_listAsync(string appFilterExtensions, string appFilterMimeTypes, string languageCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps?appFilterExtensions=" + (appFilterExtensions==null? "" : System.Uri.EscapeDataString(appFilterExtensions))+"&appFilterMimeTypes=" + (appFilterMimeTypes==null? "" : System.Uri.EscapeDataString(appFilterMimeTypes))+"&languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a specific app.
		/// Drive_apps_get apps/{appId}
		/// </summary>
		/// <param name="appId">The ID of the app.</param>
		/// <returns>Successful response</returns>
		public async Task<App> Drive_apps_getAsync(string appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<App>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the changes for a user or shared drive.
		/// Drive_changes_list changes
		/// </summary>
		/// <param name="driveId">The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.</param>
		/// <param name="includeCorpusRemovals">Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.</param>
		/// <param name="includeDeleted">Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.</param>
		/// <param name="includeItemsFromAllDrives">Whether both My Drive and shared drive items should be included in results.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only `published` is supported.</param>
		/// <param name="includeSubscribed">Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.</param>
		/// <param name="includeTeamDriveItems">Deprecated: Use `includeItemsFromAllDrives` instead.</param>
		/// <param name="maxResults">Maximum number of changes to return.
		/// Minimum: 1
		// </param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.</param>
		/// <param name="spaces">A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.</param>
		/// <param name="startChangeId">Deprecated: Use `pageToken` instead.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="teamDriveId">Deprecated: Use `driveId` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<ChangeList> Drive_changes_listAsync(
					string driveId, 
					bool includeCorpusRemovals, 
					bool includeDeleted, 
					bool includeItemsFromAllDrives, 
					string includeLabels, 
					string includePermissionsForView, 
					bool includeSubscribed, 
					bool includeTeamDriveItems, 
					int maxResults, 
					string pageToken, 
					string spaces, 
					string startChangeId, 
					bool supportsAllDrives, 
					bool supportsTeamDrives, 
					string teamDriveId, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "changes?driveId=" + (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&includeCorpusRemovals="+includeCorpusRemovals+"&includeDeleted="+includeDeleted+"&includeItemsFromAllDrives="+includeItemsFromAllDrives+"&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&includeSubscribed="+includeSubscribed+"&includeTeamDriveItems="+includeTeamDriveItems+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&spaces=" + (spaces==null? "" : System.Uri.EscapeDataString(spaces))+"&startChangeId=" + (startChangeId==null? "" : System.Uri.EscapeDataString(startChangeId))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&teamDriveId=" + (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChangeList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the starting pageToken for listing future changes.
		/// Drive_changes_getStartPageToken changes/startPageToken
		/// </summary>
		/// <param name="driveId">The ID of the shared drive for which the starting pageToken for listing future changes from that shared drive will be returned.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="teamDriveId">Deprecated: Use `driveId` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<StartPageToken> Drive_changes_getStartPageTokenAsync(string driveId, bool supportsAllDrives, bool supportsTeamDrives, string teamDriveId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "changes/startPageToken?driveId=" + (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&teamDriveId=" + (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartPageToken>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe to changes for a user.
		/// Drive_changes_watch changes/watch
		/// </summary>
		/// <param name="driveId">The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.</param>
		/// <param name="includeCorpusRemovals">Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.</param>
		/// <param name="includeDeleted">Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.</param>
		/// <param name="includeItemsFromAllDrives">Whether both My Drive and shared drive items should be included in results.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only `published` is supported.</param>
		/// <param name="includeSubscribed">Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.</param>
		/// <param name="includeTeamDriveItems">Deprecated: Use `includeItemsFromAllDrives` instead.</param>
		/// <param name="maxResults">Maximum number of changes to return.
		/// Minimum: 1
		// </param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.</param>
		/// <param name="spaces">A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.</param>
		/// <param name="startChangeId">Deprecated: Use `pageToken` instead.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="teamDriveId">Deprecated: Use `driveId` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Drive_changes_watchAsync(
					string driveId, 
					bool includeCorpusRemovals, 
					bool includeDeleted, 
					bool includeItemsFromAllDrives, 
					string includeLabels, 
					string includePermissionsForView, 
					bool includeSubscribed, 
					bool includeTeamDriveItems, 
					int maxResults, 
					string pageToken, 
					string spaces, 
					string startChangeId, 
					bool supportsAllDrives, 
					bool supportsTeamDrives, 
					string teamDriveId, 
					Channel requestBody, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "changes/watch?driveId=" + (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&includeCorpusRemovals="+includeCorpusRemovals+"&includeDeleted="+includeDeleted+"&includeItemsFromAllDrives="+includeItemsFromAllDrives+"&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&includeSubscribed="+includeSubscribed+"&includeTeamDriveItems="+includeTeamDriveItems+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&spaces=" + (spaces==null? "" : System.Uri.EscapeDataString(spaces))+"&startChangeId=" + (startChangeId==null? "" : System.Uri.EscapeDataString(startChangeId))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&teamDriveId=" + (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deprecated: Use `changes.getStartPageToken` and `changes.list` to retrieve recent changes.
		/// Drive_changes_get changes/{changeId}
		/// </summary>
		/// <param name="changeId">The ID of the change.</param>
		/// <param name="driveId">The shared drive from which the change will be returned.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="teamDriveId">Deprecated: Use `driveId` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<Change> Drive_changes_getAsync(string changeId, string driveId, bool supportsAllDrives, bool supportsTeamDrives, string teamDriveId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "changes/"+ (changeId==null? "" : System.Uri.EscapeDataString(changeId))+"&driveId=" + (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&teamDriveId=" + (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Change>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stops watching resources through this channel.
		/// Drive_channels_stop channels/stop
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Drive_channels_stopAsync(Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the user's shared drives. This method accepts the `q` parameter, which is a search query combining one or more search terms. For more information, see the [Search for shared drives](/drive/api/guides/search-shareddrives) guide.
		/// Drive_drives_list drives
		/// </summary>
		/// <param name="maxResults">Maximum number of shared drives to return per page.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pageToken">Page token for shared drives.</param>
		/// <param name="q">Query string for searching shared drives.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then all shared drives of the domain in which the requester is an administrator are returned.</param>
		/// <returns>Successful response</returns>
		public async Task<DriveList> Drive_drives_listAsync(int maxResults, string pageToken, string q, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives?maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DriveList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new shared drive.
		/// Drive_drives_insert drives
		/// </summary>
		/// <param name="requestId">Required. An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a shared drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same shared drive. If the shared drive already exists a 409 error will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<Drive> Drive_drives_insertAsync(string requestId, Drive requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives?requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Drive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Permanently deletes a shared drive for which the user is an `organizer`. The shared drive cannot contain any untrashed items.
		/// Drive_drives_delete drives/{driveId}
		/// </summary>
		/// <param name="driveId">The ID of the shared drive.</param>
		/// <param name="allowItemDeletion">Whether any items inside the shared drive should also be deleted. This option is only supported when `useDomainAdminAccess` is also set to `true`.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_drives_deleteAsync(string driveId, bool allowItemDeletion, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives/"+ (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&allowItemDeletion="+allowItemDeletion+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a shared drive's metadata by ID.
		/// Drive_drives_get drives/{driveId}
		/// </summary>
		/// <param name="driveId">The ID of the shared drive.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<Drive> Drive_drives_getAsync(string driveId, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives/"+ (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Drive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the metadata for a shared drive.
		/// Drive_drives_update drives/{driveId}
		/// </summary>
		/// <param name="driveId">The ID of the shared drive.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<Drive> Drive_drives_updateAsync(string driveId, bool useDomainAdminAccess, Drive requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives/"+ (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Drive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Hides a shared drive from the default view.
		/// Drive_drives_hide drives/{driveId}/hide
		/// </summary>
		/// <param name="driveId">The ID of the shared drive.</param>
		/// <returns>Successful response</returns>
		public async Task<Drive> Drive_drives_hideAsync(string driveId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives/"+ (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"/hide";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Drive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores a shared drive to the default view.
		/// Drive_drives_unhide drives/{driveId}/unhide
		/// </summary>
		/// <param name="driveId">The ID of the shared drive.</param>
		/// <returns>Successful response</returns>
		public async Task<Drive> Drive_drives_unhideAsync(string driveId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "drives/"+ (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"/unhide";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Drive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the user's files. This method accepts the `q` parameter, which is a search query combining one or more search terms. For more information, see the [Search for files & folders](/drive/api/guides/search-files) guide. *Note:* This method returns *all* files by default, including trashed files. If you don't want trashed files to appear in the list, use the `trashed=false` query parameter to remove trashed files from the results.
		/// Drive_files_list files
		/// </summary>
		/// <param name="corpora">Bodies of items (files/documents) to which the query applies. Supported bodies are `default`, `domain`, `drive` and `allDrives`. Prefer `default` or `drive` to `allDrives` for efficiency.</param>
		/// <param name="corpus">Deprecated: The body of items (files/documents) to which the query applies. Use `corpora` instead.</param>
		/// <param name="driveId">ID of the shared drive to search.</param>
		/// <param name="includeItemsFromAllDrives">Whether both My Drive and shared drive items should be included in results.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only `published` is supported.</param>
		/// <param name="includeTeamDriveItems">Deprecated: Use `includeItemsFromAllDrives` instead.</param>
		/// <param name="maxResults">The maximum number of files to return per page. Partial or empty result pages are possible even before the end of the files list has been reached.
		/// Minimum: 0
		// </param>
		/// <param name="orderBy">A comma-separated list of sort keys. Valid keys are `createdDate`, `folder`, `lastViewedByMeDate`, `modifiedByMeDate`, `modifiedDate`, `quotaBytesUsed`, `recency`, `sharedWithMeDate`, `starred`, `title`, and `title_natural`. Each key sorts ascending by default, but may be reversed with the `desc` modifier. Example usage: ?orderBy=folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored.</param>
		/// <param name="pageToken">Page token for files.</param>
		/// <param name="projection">Deprecated: This parameter has no function.</param>
		/// <param name="q">Query string for searching files.</param>
		/// <param name="spaces">A comma-separated list of spaces to query. Supported values are `drive`, and `appDataFolder`.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="teamDriveId">Deprecated: Use `driveId` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<FileList> Drive_files_listAsync(
					string corpora, 
					Drive_files_listCorpus corpus, 
					string driveId, 
					bool includeItemsFromAllDrives, 
					string includeLabels, 
					string includePermissionsForView, 
					bool includeTeamDriveItems, 
					int maxResults, 
					string orderBy, 
					string pageToken, 
					Drive_files_listProjection projection, 
					string q, 
					string spaces, 
					bool supportsAllDrives, 
					bool supportsTeamDrives, 
					string teamDriveId, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files?corpora=" + (corpora==null? "" : System.Uri.EscapeDataString(corpora))+"&corpus=" + corpus+"&driveId=" + (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&includeItemsFromAllDrives="+includeItemsFromAllDrives+"&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&includeTeamDriveItems="+includeTeamDriveItems+"&maxResults="+maxResults+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&projection=" + projection+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&spaces=" + (spaces==null? "" : System.Uri.EscapeDataString(spaces))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&teamDriveId=" + (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FileList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a set of file IDs which can be provided in insert or copy requests.
		/// Drive_files_generateIds files/generateIds
		/// </summary>
		/// <param name="maxResults">Maximum number of IDs to return.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="space">The space in which the IDs can be used to create new files. Supported values are `drive` and `appDataFolder`. (Default: `drive`)</param>
		/// <param name="type">The type of items which the IDs can be used for. Supported values are `files` and `shortcuts`. Note that `shortcuts` are only supported in the `drive` `space`. (Default: `files`)</param>
		/// <returns>Successful response</returns>
		public async Task<GeneratedIds> Drive_files_generateIdsAsync(int maxResults, string space, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/generateIds?maxResults="+maxResults+"&space=" + (space==null? "" : System.Uri.EscapeDataString(space))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GeneratedIds>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permanently deletes all of the user's trashed files.
		/// Drive_files_emptyTrash files/trash
		/// </summary>
		/// <param name="driveId">If set, empties the trash of the provided shared drive.</param>
		/// <param name="enforceSingleParent">Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item is placed under its owner's root.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_files_emptyTrashAsync(string driveId, bool enforceSingleParent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/trash?driveId=" + (driveId==null? "" : System.Uri.EscapeDataString(driveId))+"&enforceSingleParent="+enforceSingleParent;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a shared drive, the user must be an `organizer` on the parent folder. If the target is a folder, all descendants owned by the user are also deleted.
		/// Drive_files_delete files/{fileId}
		/// </summary>
		/// <param name="fileId">The ID of the file to delete.</param>
		/// <param name="enforceSingleParent">Deprecated: If an item is not in a shared drive and its last parent is deleted but the item itself is not, the item is placed under its owner's root.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_files_deleteAsync(string fileId, bool enforceSingleParent, bool supportsAllDrives, bool supportsTeamDrives, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"&enforceSingleParent="+enforceSingleParent+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a file's metadata or content by ID. If you provide the URL parameter `alt=media`, then the response includes the file contents in the response body. Downloading content with `alt=media` only works if the file is stored in Drive. To download Google Docs, Sheets, and Slides use [`files.export`](/drive/api/reference/rest/v2/files/export) instead. For more information, see [Download & export files](/drive/api/guides/manage-downloads).
		/// Drive_files_get files/{fileId}
		/// </summary>
		/// <param name="fileId">The ID for the file in question.</param>
		/// <param name="acknowledgeAbuse">Whether the user is acknowledging the risk of downloading known malware or other abusive files.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only `published` is supported.</param>
		/// <param name="projection">Deprecated: This parameter has no function.</param>
		/// <param name="revisionId">Specifies the Revision ID that should be downloaded. Ignored unless alt=media is specified.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="updateViewedDate">Deprecated: Use `files.update` with `modifiedDateBehavior=noChange, updateViewedDate=true` and an empty request body.</param>
		/// <returns>Successful response</returns>
		public async Task<File> Drive_files_getAsync(string fileId, bool acknowledgeAbuse, string includeLabels, string includePermissionsForView, Drive_files_listProjection projection, string revisionId, bool supportsAllDrives, bool supportsTeamDrives, bool updateViewedDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"&acknowledgeAbuse="+acknowledgeAbuse+"&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&projection=" + projection+"&revisionId=" + (revisionId==null? "" : System.Uri.EscapeDataString(revisionId))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&updateViewedDate="+updateViewedDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<File>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a file's metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might change automatically, such as modifiedDate. This method supports patch semantics.
		/// Drive_files_patch files/{fileId}
		/// </summary>
		/// <param name="fileId">The ID of the file to update.</param>
		/// <param name="addParents">Comma-separated list of parent IDs to add.</param>
		/// <param name="convert">Deprecated: This parameter has no function.</param>
		/// <param name="enforceSingleParent">Deprecated: Adding files to multiple folders is no longer supported. Use `shortcuts` instead.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only `published` is supported.</param>
		/// <param name="modifiedDateBehavior">Determines the behavior in which `modifiedDate` is updated. This overrides `setModifiedDate`.</param>
		/// <param name="newRevision">Whether a blob upload should create a new revision. If false, the blob data in the current head revision is replaced. If true or not set, a new blob is created as head revision, and previous unpinned revisions are preserved for a short period of time. Pinned revisions are stored indefinitely, using additional storage quota, up to a maximum of 200 revisions. For details on how revisions are retained, see the [Drive Help Center](https://support.google.com/drive/answer/2409045). Note that this field is ignored if there is no payload in the request.</param>
		/// <param name="ocr">Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.</param>
		/// <param name="ocrLanguage">If ocr is true, hints at the language to use. Valid values are BCP 47 codes.</param>
		/// <param name="pinned">Whether to pin the new revision. A file can have a maximum of 200 pinned revisions. Note that this field is ignored if there is no payload in the request.</param>
		/// <param name="removeParents">Comma-separated list of parent IDs to remove.</param>
		/// <param name="setModifiedDate">Whether to set the modified date using the value supplied in the request body. Setting this field to `true` is equivalent to `modifiedDateBehavior=fromBodyOrNow`, and `false` is equivalent to `modifiedDateBehavior=now`. To prevent any changes to the modified date set `modifiedDateBehavior=noChange`.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="timedTextLanguage">The language of the timed text.</param>
		/// <param name="timedTextTrackName">The timed text track name.</param>
		/// <param name="updateViewedDate">Whether to update the view date after successfully updating the file.</param>
		/// <param name="useContentAsIndexableText">Whether to use the content as indexable text.</param>
		/// <returns>Successful response</returns>
		public async Task<File> Drive_files_patchAsync(
					string fileId, 
					string addParents, 
					bool convert, 
					bool enforceSingleParent, 
					string includeLabels, 
					string includePermissionsForView, 
					Drive_files_patchModifiedDateBehavior modifiedDateBehavior, 
					bool newRevision, 
					bool ocr, 
					string ocrLanguage, 
					bool pinned, 
					string removeParents, 
					bool setModifiedDate, 
					bool supportsAllDrives, 
					bool supportsTeamDrives, 
					string timedTextLanguage, 
					string timedTextTrackName, 
					bool updateViewedDate, 
					bool useContentAsIndexableText, 
					File requestBody, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"&addParents=" + (addParents==null? "" : System.Uri.EscapeDataString(addParents))+"&convert="+convert+"&enforceSingleParent="+enforceSingleParent+"&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&modifiedDateBehavior=" + modifiedDateBehavior+"&newRevision="+newRevision+"&ocr="+ocr+"&ocrLanguage=" + (ocrLanguage==null? "" : System.Uri.EscapeDataString(ocrLanguage))+"&pinned="+pinned+"&removeParents=" + (removeParents==null? "" : System.Uri.EscapeDataString(removeParents))+"&setModifiedDate="+setModifiedDate+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&timedTextLanguage=" + (timedTextLanguage==null? "" : System.Uri.EscapeDataString(timedTextLanguage))+"&timedTextTrackName=" + (timedTextTrackName==null? "" : System.Uri.EscapeDataString(timedTextTrackName))+"&updateViewedDate="+updateViewedDate+"&useContentAsIndexableText="+useContentAsIndexableText;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<File>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists a file's comments.
		/// Drive_comments_list files/{fileId}/comments
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="includeDeleted">If set, all comments and replies, including deleted comments and replies (with content stripped) will be returned.</param>
		/// <param name="maxResults">The maximum number of discussions to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="pageToken">The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <param name="updatedMin">Only discussions that were updated after this timestamp will be returned. Formatted as an RFC 3339 timestamp.</param>
		/// <returns>Successful response</returns>
		public async Task<CommentList> Drive_comments_listAsync(string fileId, bool includeDeleted, int maxResults, string pageToken, string updatedMin, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments&includeDeleted="+includeDeleted+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&updatedMin=" + (updatedMin==null? "" : System.Uri.EscapeDataString(updatedMin));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new comment on the given file.
		/// Drive_comments_insert files/{fileId}/comments
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <returns>Successful response</returns>
		public async Task<Comment> Drive_comments_insertAsync(string fileId, Comment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a comment.
		/// Drive_comments_delete files/{fileId}/comments/{commentId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_comments_deleteAsync(string fileId, string commentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a comment by ID.
		/// Drive_comments_get files/{fileId}/comments/{commentId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <param name="includeDeleted">If set, this will succeed when retrieving a deleted comment, and will include any deleted replies.</param>
		/// <returns>Successful response</returns>
		public async Task<Comment> Drive_comments_getAsync(string fileId, string commentId, bool includeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"&includeDeleted="+includeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing comment.
		/// Drive_comments_patch files/{fileId}/comments/{commentId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <returns>Successful response</returns>
		public async Task<Comment> Drive_comments_patchAsync(string fileId, string commentId, Comment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing comment.
		/// Drive_comments_update files/{fileId}/comments/{commentId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <returns>Successful response</returns>
		public async Task<Comment> Drive_comments_updateAsync(string fileId, string commentId, Comment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Comment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all of the replies to a comment.
		/// Drive_replies_list files/{fileId}/comments/{commentId}/replies
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <param name="includeDeleted">If set, all replies, including deleted replies (with content stripped) will be returned.</param>
		/// <param name="maxResults">The maximum number of replies to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="pageToken">The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<CommentReplyList> Drive_replies_listAsync(string fileId, string commentId, bool includeDeleted, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/replies&includeDeleted="+includeDeleted+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentReplyList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new reply to the given comment.
		/// Drive_replies_insert files/{fileId}/comments/{commentId}/replies
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <returns>Successful response</returns>
		public async Task<CommentReply> Drive_replies_insertAsync(string fileId, string commentId, CommentReply requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/replies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentReply>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a reply.
		/// Drive_replies_delete files/{fileId}/comments/{commentId}/replies/{replyId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <param name="replyId">The ID of the reply.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_replies_deleteAsync(string fileId, string commentId, string replyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/replies/"+ (replyId==null? "" : System.Uri.EscapeDataString(replyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a reply.
		/// Drive_replies_get files/{fileId}/comments/{commentId}/replies/{replyId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <param name="replyId">The ID of the reply.</param>
		/// <param name="includeDeleted">If set, this will succeed when retrieving a deleted reply.</param>
		/// <returns>Successful response</returns>
		public async Task<CommentReply> Drive_replies_getAsync(string fileId, string commentId, string replyId, bool includeDeleted, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/replies/"+ (replyId==null? "" : System.Uri.EscapeDataString(replyId))+"&includeDeleted="+includeDeleted;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentReply>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing reply.
		/// Drive_replies_patch files/{fileId}/comments/{commentId}/replies/{replyId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <param name="replyId">The ID of the reply.</param>
		/// <returns>Successful response</returns>
		public async Task<CommentReply> Drive_replies_patchAsync(string fileId, string commentId, string replyId, CommentReply requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/replies/"+ (replyId==null? "" : System.Uri.EscapeDataString(replyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentReply>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an existing reply.
		/// Drive_replies_update files/{fileId}/comments/{commentId}/replies/{replyId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="commentId">The ID of the comment.</param>
		/// <param name="replyId">The ID of the reply.</param>
		/// <returns>Successful response</returns>
		public async Task<CommentReply> Drive_replies_updateAsync(string fileId, string commentId, string replyId, CommentReply requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/comments/"+ (commentId==null? "" : System.Uri.EscapeDataString(commentId))+"/replies/"+ (replyId==null? "" : System.Uri.EscapeDataString(replyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommentReply>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a copy of the specified file.
		/// Drive_files_copy files/{fileId}/copy
		/// </summary>
		/// <param name="fileId">The ID of the file to copy.</param>
		/// <param name="convert">Whether to convert this file to the corresponding Docs Editors format.</param>
		/// <param name="enforceSingleParent">Deprecated: Copying files into multiple folders is no longer supported. Use shortcuts instead.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only `published` is supported.</param>
		/// <param name="ocr">Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads.</param>
		/// <param name="ocrLanguage">If `ocr` is true, hints at the language to use. Valid values are BCP 47 codes.</param>
		/// <param name="pinned">Whether to pin the head revision of the new copy. A file can have a maximum of 200 pinned revisions.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="timedTextLanguage">The language of the timed text.</param>
		/// <param name="timedTextTrackName">The timed text track name.</param>
		/// <param name="visibility">The visibility of the new file. This parameter is only relevant when the source is not a native Google Doc and convert=false.</param>
		/// <returns>Successful response</returns>
		public async Task<File> Drive_files_copyAsync(string fileId, bool convert, bool enforceSingleParent, string includeLabels, string includePermissionsForView, bool ocr, string ocrLanguage, bool pinned, bool supportsAllDrives, bool supportsTeamDrives, string timedTextLanguage, string timedTextTrackName, Drive_files_insertVisibility visibility, File requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/copy&convert="+convert+"&enforceSingleParent="+enforceSingleParent+"&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&ocr="+ocr+"&ocrLanguage=" + (ocrLanguage==null? "" : System.Uri.EscapeDataString(ocrLanguage))+"&pinned="+pinned+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&timedTextLanguage=" + (timedTextLanguage==null? "" : System.Uri.EscapeDataString(timedTextLanguage))+"&timedTextTrackName=" + (timedTextTrackName==null? "" : System.Uri.EscapeDataString(timedTextTrackName))+"&visibility=" + visibility;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<File>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Exports a Google Workspace document to the requested MIME type and returns exported byte content. Note that the exported content is limited to 10MB.
		/// Drive_files_export files/{fileId}/export
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="mimeType">Required. The MIME type of the format requested for this export.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_files_exportAsync(string fileId, string mimeType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/export&mimeType=" + (mimeType==null? "" : System.Uri.EscapeDataString(mimeType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the labels on a file.
		/// Drive_files_listLabels files/{fileId}/listLabels
		/// </summary>
		/// <param name="fileId">The ID for the file.</param>
		/// <param name="maxResults">The maximum number of labels to return per page. When not set, defaults to 100.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<LabelList> Drive_files_listLabelsAsync(string fileId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/listLabels&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modifies the set of labels applied to a file. Returns a list of the labels that were added or modified.
		/// Drive_files_modifyLabels files/{fileId}/modifyLabels
		/// </summary>
		/// <param name="fileId">The ID of the file to which the labels belong.</param>
		/// <returns>Successful response</returns>
		public async Task<ModifyLabelsResponse> Drive_files_modifyLabelsAsync(string fileId, ModifyLabelsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/modifyLabels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ModifyLabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists a file's parents.
		/// Drive_parents_list files/{fileId}/parents
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <returns>Successful response</returns>
		public async Task<ParentList> Drive_parents_listAsync(string fileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/parents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ParentList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a parent folder for a file.
		/// Drive_parents_insert files/{fileId}/parents
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="enforceSingleParent">Deprecated: Adding files to multiple folders is no longer supported. Use `shortcuts` instead.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<ParentReference> Drive_parents_insertAsync(string fileId, bool enforceSingleParent, bool supportsAllDrives, bool supportsTeamDrives, ParentReference requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/parents&enforceSingleParent="+enforceSingleParent+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ParentReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a parent from a file.
		/// Drive_parents_delete files/{fileId}/parents/{parentId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="parentId">The ID of the parent.</param>
		/// <param name="enforceSingleParent">Deprecated: If an item is not in a shared drive and its last parent is removed, the item is placed under its owner's root.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_parents_deleteAsync(string fileId, string parentId, bool enforceSingleParent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/parents/"+ (parentId==null? "" : System.Uri.EscapeDataString(parentId))+"&enforceSingleParent="+enforceSingleParent;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a specific parent reference.
		/// Drive_parents_get files/{fileId}/parents/{parentId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="parentId">The ID of the parent.</param>
		/// <returns>Successful response</returns>
		public async Task<ParentReference> Drive_parents_getAsync(string fileId, string parentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/parents/"+ (parentId==null? "" : System.Uri.EscapeDataString(parentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ParentReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists a file's or shared drive's permissions.
		/// Drive_permissions_list files/{fileId}/permissions
		/// </summary>
		/// <param name="fileId">The ID for the file or shared drive.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only `published` is supported.</param>
		/// <param name="maxResults">The maximum number of permissions to return per page. When not set for files in a shared drive, at most 100 results will be returned. When not set for files that are not in a shared drive, the entire list will be returned.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<PermissionList> Drive_permissions_listAsync(string fileId, string includePermissionsForView, int maxResults, string pageToken, bool supportsAllDrives, bool supportsTeamDrives, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/permissions&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a permission for a file or shared drive. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
		/// Drive_permissions_insert files/{fileId}/permissions
		/// </summary>
		/// <param name="fileId">The ID for the file or shared drive.</param>
		/// <param name="emailMessage">A plain text custom message to include in notification emails.</param>
		/// <param name="enforceSingleParent">Deprecated: See `moveToNewOwnersRoot` for details.</param>
		/// <param name="moveToNewOwnersRoot">This parameter will only take effect if the item is not in a shared drive and the request is attempting to transfer the ownership of the item. If set to `true`, the item will be moved to the new owner's My Drive root folder and all prior parents removed. If set to `false`, parents are not changed.</param>
		/// <param name="sendNotificationEmails">Whether to send notification emails when sharing to users or groups. This parameter is ignored and an email is sent if the `role` is `owner`.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<Permission> Drive_permissions_insertAsync(string fileId, string emailMessage, bool enforceSingleParent, bool moveToNewOwnersRoot, bool sendNotificationEmails, bool supportsAllDrives, bool supportsTeamDrives, bool useDomainAdminAccess, Permission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/permissions&emailMessage=" + (emailMessage==null? "" : System.Uri.EscapeDataString(emailMessage))+"&enforceSingleParent="+enforceSingleParent+"&moveToNewOwnersRoot="+moveToNewOwnersRoot+"&sendNotificationEmails="+sendNotificationEmails+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Permission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a permission from a file or shared drive. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
		/// Drive_permissions_delete files/{fileId}/permissions/{permissionId}
		/// </summary>
		/// <param name="fileId">The ID for the file or shared drive.</param>
		/// <param name="permissionId">The ID for the permission.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_permissions_deleteAsync(string fileId, string permissionId, bool supportsAllDrives, bool supportsTeamDrives, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/permissions/"+ (permissionId==null? "" : System.Uri.EscapeDataString(permissionId))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a permission by ID.
		/// Drive_permissions_get files/{fileId}/permissions/{permissionId}
		/// </summary>
		/// <param name="fileId">The ID for the file or shared drive.</param>
		/// <param name="permissionId">The ID for the permission.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<Permission> Drive_permissions_getAsync(string fileId, string permissionId, bool supportsAllDrives, bool supportsTeamDrives, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/permissions/"+ (permissionId==null? "" : System.Uri.EscapeDataString(permissionId))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Permission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a permission using patch semantics. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
		/// Drive_permissions_patch files/{fileId}/permissions/{permissionId}
		/// </summary>
		/// <param name="fileId">The ID for the file or shared drive.</param>
		/// <param name="permissionId">The ID for the permission.</param>
		/// <param name="removeExpiration">Whether to remove the expiration date.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="transferOwnership">Whether changing a role to `owner` downgrades the current owners to writers. Does nothing if the specified role is not `owner`.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<Permission> Drive_permissions_patchAsync(string fileId, string permissionId, bool removeExpiration, bool supportsAllDrives, bool supportsTeamDrives, bool transferOwnership, bool useDomainAdminAccess, Permission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/permissions/"+ (permissionId==null? "" : System.Uri.EscapeDataString(permissionId))+"&removeExpiration="+removeExpiration+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&transferOwnership="+transferOwnership+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Permission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a permission. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
		/// Drive_permissions_update files/{fileId}/permissions/{permissionId}
		/// </summary>
		/// <param name="fileId">The ID for the file or shared drive.</param>
		/// <param name="permissionId">The ID for the permission.</param>
		/// <param name="removeExpiration">Whether to remove the expiration date.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="transferOwnership">Whether changing a role to `owner` downgrades the current owners to writers. Does nothing if the specified role is not `owner`.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<Permission> Drive_permissions_updateAsync(string fileId, string permissionId, bool removeExpiration, bool supportsAllDrives, bool supportsTeamDrives, bool transferOwnership, bool useDomainAdminAccess, Permission requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/permissions/"+ (permissionId==null? "" : System.Uri.EscapeDataString(permissionId))+"&removeExpiration="+removeExpiration+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&transferOwnership="+transferOwnership+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Permission>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists a file's properties.
		/// Drive_properties_list files/{fileId}/properties
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <returns>Successful response</returns>
		public async Task<PropertyList> Drive_properties_listAsync(string fileId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/properties";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PropertyList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a property to a file, or updates it if it already exists.
		/// Drive_properties_insert files/{fileId}/properties
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <returns>Successful response</returns>
		public async Task<Property> Drive_properties_insertAsync(string fileId, Property requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/properties";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Property>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a property.
		/// Drive_properties_delete files/{fileId}/properties/{propertyKey}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="propertyKey">The key of the property.</param>
		/// <param name="visibility">The visibility of the property.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_properties_deleteAsync(string fileId, string propertyKey, string visibility, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/properties/"+ (propertyKey==null? "" : System.Uri.EscapeDataString(propertyKey))+"&visibility=" + (visibility==null? "" : System.Uri.EscapeDataString(visibility));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a property by its key.
		/// Drive_properties_get files/{fileId}/properties/{propertyKey}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="propertyKey">The key of the property.</param>
		/// <param name="visibility">The visibility of the property.</param>
		/// <returns>Successful response</returns>
		public async Task<Property> Drive_properties_getAsync(string fileId, string propertyKey, string visibility, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/properties/"+ (propertyKey==null? "" : System.Uri.EscapeDataString(propertyKey))+"&visibility=" + (visibility==null? "" : System.Uri.EscapeDataString(visibility));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Property>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a property.
		/// Drive_properties_patch files/{fileId}/properties/{propertyKey}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="propertyKey">The key of the property.</param>
		/// <param name="visibility">The visibility of the property. Allowed values are PRIVATE and PUBLIC. (Default: PRIVATE)</param>
		/// <returns>Successful response</returns>
		public async Task<Property> Drive_properties_patchAsync(string fileId, string propertyKey, string visibility, Property requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/properties/"+ (propertyKey==null? "" : System.Uri.EscapeDataString(propertyKey))+"&visibility=" + (visibility==null? "" : System.Uri.EscapeDataString(visibility));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Property>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a property.
		/// Drive_properties_update files/{fileId}/properties/{propertyKey}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="propertyKey">The key of the property.</param>
		/// <param name="visibility">The visibility of the property. Allowed values are PRIVATE and PUBLIC. (Default: PRIVATE)</param>
		/// <returns>Successful response</returns>
		public async Task<Property> Drive_properties_updateAsync(string fileId, string propertyKey, string visibility, Property requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/properties/"+ (propertyKey==null? "" : System.Uri.EscapeDataString(propertyKey))+"&visibility=" + (visibility==null? "" : System.Uri.EscapeDataString(visibility));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Property>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists a file's revisions.
		/// Drive_revisions_list files/{fileId}/revisions
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="maxResults">Maximum number of revisions to return.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="pageToken">Page token for revisions. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<RevisionList> Drive_revisions_listAsync(string fileId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/revisions&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RevisionList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permanently deletes a file version. You can only delete revisions for files with binary content, like images or videos. Revisions for other files, like Google Docs or Sheets, and the last remaining file version can't be deleted.
		/// Drive_revisions_delete files/{fileId}/revisions/{revisionId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="revisionId">The ID of the revision.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_revisions_deleteAsync(string fileId, string revisionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/revisions/"+ (revisionId==null? "" : System.Uri.EscapeDataString(revisionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a specific revision.
		/// Drive_revisions_get files/{fileId}/revisions/{revisionId}
		/// </summary>
		/// <param name="fileId">The ID of the file.</param>
		/// <param name="revisionId">The ID of the revision.</param>
		/// <returns>Successful response</returns>
		public async Task<Revision> Drive_revisions_getAsync(string fileId, string revisionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/revisions/"+ (revisionId==null? "" : System.Uri.EscapeDataString(revisionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Revision>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a revision.
		/// Drive_revisions_patch files/{fileId}/revisions/{revisionId}
		/// </summary>
		/// <param name="fileId">The ID for the file.</param>
		/// <param name="revisionId">The ID for the revision.</param>
		/// <returns>Successful response</returns>
		public async Task<Revision> Drive_revisions_patchAsync(string fileId, string revisionId, Revision requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/revisions/"+ (revisionId==null? "" : System.Uri.EscapeDataString(revisionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Revision>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a revision.
		/// Drive_revisions_update files/{fileId}/revisions/{revisionId}
		/// </summary>
		/// <param name="fileId">The ID for the file.</param>
		/// <param name="revisionId">The ID for the revision.</param>
		/// <returns>Successful response</returns>
		public async Task<Revision> Drive_revisions_updateAsync(string fileId, string revisionId, Revision requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/revisions/"+ (revisionId==null? "" : System.Uri.EscapeDataString(revisionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Revision>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set the file's updated time to the current server time.
		/// Drive_files_touch files/{fileId}/touch
		/// </summary>
		/// <param name="fileId">The ID of the file to update.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only `published` is supported.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<File> Drive_files_touchAsync(string fileId, string includeLabels, string includePermissionsForView, bool supportsAllDrives, bool supportsTeamDrives, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/touch&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<File>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Moves a file to the trash. The currently authenticated user must own the file or be at least a `fileOrganizer` on the parent for shared drive files.
		/// Drive_files_trash files/{fileId}/trash
		/// </summary>
		/// <param name="fileId">The ID of the file to trash.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only `published` is supported.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<File> Drive_files_trashAsync(string fileId, string includeLabels, string includePermissionsForView, bool supportsAllDrives, bool supportsTeamDrives, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/trash&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<File>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores a file from the trash. The currently authenticated user must own the file or be at least a `fileOrganizer` on the parent for shared drive files.
		/// Drive_files_untrash files/{fileId}/untrash
		/// </summary>
		/// <param name="fileId">The ID of the file to untrash.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only `published` is supported.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<File> Drive_files_untrashAsync(string fileId, string includeLabels, string includePermissionsForView, bool supportsAllDrives, bool supportsTeamDrives, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/untrash&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<File>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribes to changes to a file.
		/// Drive_files_watch files/{fileId}/watch
		/// </summary>
		/// <param name="fileId">The ID for the file in question.</param>
		/// <param name="acknowledgeAbuse">Whether the user is acknowledging the risk of downloading known malware or other abusive files.</param>
		/// <param name="includeLabels">A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.</param>
		/// <param name="includePermissionsForView">Specifies which additional view's permissions to include in the response. Only `published` is supported.</param>
		/// <param name="projection">Deprecated: This parameter has no function.</param>
		/// <param name="revisionId">Specifies the Revision ID that should be downloaded. Ignored unless alt=media is specified.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <param name="updateViewedDate">Deprecated: Use files.update with modifiedDateBehavior=noChange, updateViewedDate=true and an empty request body.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Drive_files_watchAsync(string fileId, bool acknowledgeAbuse, string includeLabels, string includePermissionsForView, Drive_files_listProjection projection, string revisionId, bool supportsAllDrives, bool supportsTeamDrives, bool updateViewedDate, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (fileId==null? "" : System.Uri.EscapeDataString(fileId))+"/watch&acknowledgeAbuse="+acknowledgeAbuse+"&includeLabels=" + (includeLabels==null? "" : System.Uri.EscapeDataString(includeLabels))+"&includePermissionsForView=" + (includePermissionsForView==null? "" : System.Uri.EscapeDataString(includePermissionsForView))+"&projection=" + projection+"&revisionId=" + (revisionId==null? "" : System.Uri.EscapeDataString(revisionId))+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives+"&updateViewedDate="+updateViewedDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Channel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists a folder's children.
		/// Drive_children_list files/{folderId}/children
		/// </summary>
		/// <param name="folderId">The ID of the folder.</param>
		/// <param name="maxResults">Maximum number of children to return.
		/// Minimum: 0
		// </param>
		/// <param name="orderBy">A comma-separated list of sort keys. Valid keys are `createdDate`, `folder`, `lastViewedByMeDate`, `modifiedByMeDate`, `modifiedDate`, `quotaBytesUsed`, `recency`, `sharedWithMeDate`, `starred`, and `title`. Each key sorts ascending by default, but may be reversed with the `desc` modifier. Example usage: ?orderBy=folder,modifiedDate desc,title. Please note that there is a current limitation for users with approximately one million files in which the requested sort order is ignored.</param>
		/// <param name="pageToken">Page token for children.</param>
		/// <param name="q">Query string for searching children.</param>
		/// <returns>Successful response</returns>
		public async Task<ChildList> Drive_children_listAsync(string folderId, int maxResults, string orderBy, string pageToken, string q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (folderId==null? "" : System.Uri.EscapeDataString(folderId))+"/children&maxResults="+maxResults+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChildList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Inserts a file into a folder.
		/// Drive_children_insert files/{folderId}/children
		/// </summary>
		/// <param name="folderId">The ID of the folder.</param>
		/// <param name="enforceSingleParent">Deprecated: Adding files to multiple folders is no longer supported. Use `shortcuts` instead.</param>
		/// <param name="supportsAllDrives">Whether the requesting application supports both My Drives and shared drives.</param>
		/// <param name="supportsTeamDrives">Deprecated: Use `supportsAllDrives` instead.</param>
		/// <returns>Successful response</returns>
		public async Task<ChildReference> Drive_children_insertAsync(string folderId, bool enforceSingleParent, bool supportsAllDrives, bool supportsTeamDrives, ChildReference requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (folderId==null? "" : System.Uri.EscapeDataString(folderId))+"/children&enforceSingleParent="+enforceSingleParent+"&supportsAllDrives="+supportsAllDrives+"&supportsTeamDrives="+supportsTeamDrives;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChildReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a child from a folder.
		/// Drive_children_delete files/{folderId}/children/{childId}
		/// </summary>
		/// <param name="folderId">The ID of the folder.</param>
		/// <param name="childId">The ID of the child.</param>
		/// <param name="enforceSingleParent">Deprecated: If an item is not in a shared drive and its last parent is removed, the item is placed under its owner's root.</param>
		/// <returns>Successful response</returns>
		public async Task Drive_children_deleteAsync(string folderId, string childId, bool enforceSingleParent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (folderId==null? "" : System.Uri.EscapeDataString(folderId))+"/children/"+ (childId==null? "" : System.Uri.EscapeDataString(childId))+"&enforceSingleParent="+enforceSingleParent;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a specific child reference.
		/// Drive_children_get files/{folderId}/children/{childId}
		/// </summary>
		/// <param name="folderId">The ID of the folder.</param>
		/// <param name="childId">The ID of the child.</param>
		/// <returns>Successful response</returns>
		public async Task<ChildReference> Drive_children_getAsync(string folderId, string childId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "files/"+ (folderId==null? "" : System.Uri.EscapeDataString(folderId))+"/children/"+ (childId==null? "" : System.Uri.EscapeDataString(childId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChildReference>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the permission ID for an email address.
		/// Drive_permissions_getIdForEmail permissionIds/{email}
		/// </summary>
		/// <param name="email">The email address for which to return a permission ID</param>
		/// <returns>Successful response</returns>
		public async Task<PermissionId> Drive_permissions_getIdForEmailAsync(string email, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "permissionIds/"+ (email==null? "" : System.Uri.EscapeDataString(email));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PermissionId>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deprecated: Use `drives.list` instead.
		/// Drive_teamdrives_list teamdrives
		/// </summary>
		/// <param name="maxResults">Maximum number of Team Drives to return.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pageToken">Page token for Team Drives.</param>
		/// <param name="q">Query string for searching Team Drives.</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then all Team Drives of the domain in which the requester is an administrator are returned.</param>
		/// <returns>Successful response</returns>
		public async Task<TeamDriveList> Drive_teamdrives_listAsync(int maxResults, string pageToken, string q, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teamdrives?maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamDriveList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deprecated: Use `drives.insert` instead.
		/// Drive_teamdrives_insert teamdrives
		/// </summary>
		/// <param name="requestId">Required. An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a Team Drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same Team Drive. If the Team Drive already exists a 409 error will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<TeamDrive> Drive_teamdrives_insertAsync(string requestId, TeamDrive requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teamdrives?requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamDrive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deprecated: Use `drives.delete` instead.
		/// Drive_teamdrives_delete teamdrives/{teamDriveId}
		/// </summary>
		/// <param name="teamDriveId">The ID of the Team Drive</param>
		/// <returns>Successful response</returns>
		public async Task Drive_teamdrives_deleteAsync(string teamDriveId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teamdrives/"+ (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deprecated: Use `drives.get` instead.
		/// Drive_teamdrives_get teamdrives/{teamDriveId}
		/// </summary>
		/// <param name="teamDriveId">The ID of the Team Drive</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<TeamDrive> Drive_teamdrives_getAsync(string teamDriveId, bool useDomainAdminAccess, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teamdrives/"+ (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId))+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamDrive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deprecated: Use `drives.update` instead.
		/// Drive_teamdrives_update teamdrives/{teamDriveId}
		/// </summary>
		/// <param name="teamDriveId">The ID of the Team Drive</param>
		/// <param name="useDomainAdminAccess">Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<TeamDrive> Drive_teamdrives_updateAsync(string teamDriveId, bool useDomainAdminAccess, TeamDrive requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teamdrives/"+ (teamDriveId==null? "" : System.Uri.EscapeDataString(teamDriveId))+"&useDomainAdminAccess="+useDomainAdminAccess;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamDrive>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Drive_files_listCorpus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN = 1,
	}
	
	public enum Drive_files_listProjection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL = 1,
	}
	
	public enum Drive_files_insertVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	public enum Drive_files_patchModifiedDateBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fromBody = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fromBodyIfNeeded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fromBodyOrNow = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		noChange = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		now = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nowIfNeeded = 5,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
