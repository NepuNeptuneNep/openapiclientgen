//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An Anywhere Cache instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnywhereCache
	{
		
		/// <summary>
		/// The cache-level entry admission policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="admissionPolicy")]
		public string AdmissionPolicy { get; set; }
		
		/// <summary>
		/// The ID of the Anywhere cache instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="anywhereCacheId")]
		public string AnywhereCacheId { get; set; }
		
		/// <summary>
		/// The name of the bucket containing this cache instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// The creation time of the cache instance in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// The ID of the resource, including the project number, bucket name and anywhere cache ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of item this is. For Anywhere Cache, this is always storage#anywhereCache.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#anywhereCache")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#anywhereCache";
		
		/// <summary>
		/// True if the cache instance has an active Update long-running operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingUpdate")]
		public System.Nullable<System.Boolean> PendingUpdate { get; set; }
		
		/// <summary>
		/// The link to this cache instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The current state of the cache instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The TTL of all cache entries in whole seconds. e.g., "7200s". 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
		
		/// <summary>
		/// The modification time of the cache instance metadata in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.Nullable<System.DateTimeOffset> UpdateTime { get; set; }
		
		/// <summary>
		/// The zone in which the cache instance is running. For example, us-central1-a.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// A list of Anywhere Caches.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnywhereCaches
	{
		
		/// <summary>
		/// The list of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AnywhereCache[] Items { get; set; }
		
		/// <summary>
		/// The kind of item this is. For lists of Anywhere Caches, this is always storage#anywhereCaches.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#anywhereCaches")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#anywhereCaches";
		
		/// <summary>
		/// The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Bucket
	{
		
		/// <summary>
		/// Access controls on the bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acl")]
		public BucketAccessControl[] Acl { get; set; }
		
		/// <summary>
		/// The bucket's Autoclass configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoclass")]
		public BucketAutoclass Autoclass { get; set; }
		
		/// <summary>
		/// The bucket's billing configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billing")]
		public BucketBilling Billing { get; set; }
		
		/// <summary>
		/// The bucket's Cross-Origin Resource Sharing (CORS) configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cors")]
		public BucketCors[] BucketCors { get; set; }
		
		/// <summary>
		/// The bucket's custom placement configuration for Custom Dual Regions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customPlacementConfig")]
		public BucketCustomPlacementConfig CustomPlacementConfig { get; set; }
		
		/// <summary>
		/// The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultEventBasedHold")]
		public System.Nullable<System.Boolean> DefaultEventBasedHold { get; set; }
		
		/// <summary>
		/// Default access controls to apply to new objects when no ACL is provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultObjectAcl")]
		public ObjectAccessControl[] DefaultObjectAcl { get; set; }
		
		/// <summary>
		/// Encryption configuration for a bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryption")]
		public BucketEncryption Encryption { get; set; }
		
		/// <summary>
		/// HTTP 1.1 Entity tag for the bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The bucket's hierarchical namespace configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hierarchicalNamespace")]
		public BucketHierarchicalNamespace HierarchicalNamespace { get; set; }
		
		/// <summary>
		/// The bucket's IAM configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iamConfiguration")]
		public BucketIamConfiguration IamConfiguration { get; set; }
		
		/// <summary>
		/// The ID of the bucket. For buckets, the id and name properties are the same.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of item this is. For buckets, this is always storage#bucket.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#bucket")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#bucket";
		
		/// <summary>
		/// User-provided labels, in key/value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The bucket's lifecycle configuration. See lifecycle management for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifecycle")]
		public BucketLifecycle Lifecycle { get; set; }
		
		/// <summary>
		/// The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The type of the bucket location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationType")]
		public string LocationType { get; set; }
		
		/// <summary>
		/// The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logging")]
		public BucketLogging Logging { get; set; }
		
		/// <summary>
		/// The metadata generation of this bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metageneration")]
		public string Metageneration { get; set; }
		
		/// <summary>
		/// The name of the bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The bucket's object retention config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectRetention")]
		public BucketObjectRetention ObjectRetention { get; set; }
		
		/// <summary>
		/// The owner of the bucket. This is always the project team's owner group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public BucketOwner Owner { get; set; }
		
		/// <summary>
		/// The project number of the project the bucket belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectNumber")]
		public string ProjectNumber { get; set; }
		
		/// <summary>
		/// The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPolicy")]
		public BucketRetentionPolicy RetentionPolicy { get; set; }
		
		/// <summary>
		/// The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rpo")]
		public string Rpo { get; set; }
		
		/// <summary>
		/// Reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="satisfiesPZS")]
		public System.Nullable<System.Boolean> SatisfiesPZS { get; set; }
		
		/// <summary>
		/// The URI of this bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softDeletePolicy")]
		public BucketSoftDeletePolicy SoftDeletePolicy { get; set; }
		
		/// <summary>
		/// The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageClass")]
		public string StorageClass { get; set; }
		
		/// <summary>
		/// The creation time of the bucket in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeCreated")]
		public System.Nullable<System.DateTimeOffset> TimeCreated { get; set; }
		
		/// <summary>
		/// The modification time of the bucket in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
		
		/// <summary>
		/// The bucket's versioning configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versioning")]
		public BucketVersioning Versioning { get; set; }
		
		/// <summary>
		/// The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public BucketWebsite Website { get; set; }
	}
	
	/// <summary>
	/// An access-control entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BucketAccessControl
	{
		
		/// <summary>
		/// The name of the bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// The domain associated with the entity, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// The email address associated with the entity, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The entity holding the permission, in one of the following forms: 
		///- user-userId 
		///- user-email 
		///- group-groupId 
		///- group-email 
		///- domain-domain 
		///- project-team-projectId 
		///- allUsers 
		///- allAuthenticatedUsers Examples: 
		///- The user liz@example.com would be user-liz@example.com. 
		///- The group example@googlegroups.com would be group-example@googlegroups.com. 
		///- To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public string Entity { get; set; }
		
		/// <summary>
		/// The ID for the entity, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// HTTP 1.1 Entity tag for the access-control entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID of the access-control entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of item this is. For bucket access control entries, this is always storage#bucketAccessControl.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#bucketAccessControl")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#bucketAccessControl";
		
		/// <summary>
		/// The project team associated with the entity, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectTeam")]
		public BucketAccessControlProjectTeam ProjectTeam { get; set; }
		
		/// <summary>
		/// The access permission for the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// The link to this access-control entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	public class BucketAccessControlProjectTeam
	{
		
		/// <summary>
		/// The project number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectNumber")]
		public string ProjectNumber { get; set; }
		
		/// <summary>
		/// The team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team")]
		public string Team { get; set; }
	}
	
	public class BucketAutoclass
	{
		
		/// <summary>
		/// Whether or not Autoclass is enabled on this bucket
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The storage class that objects in the bucket eventually transition to if they are not read for a certain length of time. Valid values are NEARLINE and ARCHIVE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terminalStorageClass")]
		public string TerminalStorageClass { get; set; }
		
		/// <summary>
		/// A date and time in RFC 3339 format representing the time of the most recent update to "terminalStorageClass".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terminalStorageClassUpdateTime")]
		public System.Nullable<System.DateTimeOffset> TerminalStorageClassUpdateTime { get; set; }
		
		/// <summary>
		/// A date and time in RFC 3339 format representing the instant at which "enabled" was last toggled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toggleTime")]
		public System.Nullable<System.DateTimeOffset> ToggleTime { get; set; }
	}
	
	public class BucketBilling
	{
		
		/// <summary>
		/// When set to true, Requester Pays is enabled for this bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requesterPays")]
		public System.Nullable<System.Boolean> RequesterPays { get; set; }
	}
	
	public class BucketCors
	{
		
		/// <summary>
		/// The value, in seconds, to return in the  Access-Control-Max-Age header used in preflight responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAgeSeconds")]
		public System.Nullable<System.Int32> MaxAgeSeconds { get; set; }
		
		/// <summary>
		/// The list of HTTP methods on which to include CORS response headers, (GET, OPTIONS, POST, etc) Note: "*" is permitted in the list of methods, and means "any method".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string[] Method { get; set; }
		
		/// <summary>
		/// The list of Origins eligible to receive CORS response headers. Note: "*" is permitted in the list of origins, and means "any Origin".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string[] Origin { get; set; }
		
		/// <summary>
		/// The list of HTTP headers other than the simple response headers to give permission for the user-agent to share across domains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseHeader")]
		public string[] ResponseHeader { get; set; }
	}
	
	public class BucketCustomPlacementConfig
	{
		
		/// <summary>
		/// The list of regional locations in which data is placed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataLocations")]
		public string[] DataLocations { get; set; }
	}
	
	/// <summary>
	/// An access-control entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectAccessControl
	{
		
		/// <summary>
		/// The name of the bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// The domain associated with the entity, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// The email address associated with the entity, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The entity holding the permission, in one of the following forms: 
		///- user-userId 
		///- user-email 
		///- group-groupId 
		///- group-email 
		///- domain-domain 
		///- project-team-projectId 
		///- allUsers 
		///- allAuthenticatedUsers Examples: 
		///- The user liz@example.com would be user-liz@example.com. 
		///- The group example@googlegroups.com would be group-example@googlegroups.com. 
		///- To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public string Entity { get; set; }
		
		/// <summary>
		/// The ID for the entity, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// HTTP 1.1 Entity tag for the access-control entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The content generation of the object, if applied to an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public string Generation { get; set; }
		
		/// <summary>
		/// The ID of the access-control entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of item this is. For object access control entries, this is always storage#objectAccessControl.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#objectAccessControl")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#objectAccessControl";
		
		/// <summary>
		/// The name of the object, if applied to an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		/// The project team associated with the entity, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectTeam")]
		public ObjectAccessControlProjectTeam ProjectTeam { get; set; }
		
		/// <summary>
		/// The access permission for the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		/// <summary>
		/// The link to this access-control entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
	}
	
	public class ObjectAccessControlProjectTeam
	{
		
		/// <summary>
		/// The project number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectNumber")]
		public string ProjectNumber { get; set; }
		
		/// <summary>
		/// The team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team")]
		public string Team { get; set; }
	}
	
	public class BucketEncryption
	{
		
		/// <summary>
		/// A Cloud KMS key that will be used to encrypt objects inserted into this bucket, if no encryption method is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultKmsKeyName")]
		public string DefaultKmsKeyName { get; set; }
	}
	
	public class BucketHierarchicalNamespace
	{
		
		/// <summary>
		/// When set to true, hierarchical namespace is enabled for this bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	public class BucketIamConfiguration
	{
		
		/// <summary>
		/// The bucket's uniform bucket-level access configuration. The feature was formerly known as Bucket Policy Only. For backward compatibility, this field will be populated with identical information as the uniformBucketLevelAccess field. We recommend using the uniformBucketLevelAccess field to enable and disable the feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketPolicyOnly")]
		public BucketIamConfigurationBucketPolicyOnly BucketPolicyOnly { get; set; }
		
		/// <summary>
		/// The bucket's Public Access Prevention configuration. Currently, 'inherited' and 'enforced' are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicAccessPrevention")]
		public string PublicAccessPrevention { get; set; }
		
		/// <summary>
		/// The bucket's uniform bucket-level access configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniformBucketLevelAccess")]
		public BucketIamConfigurationUniformBucketLevelAccess UniformBucketLevelAccess { get; set; }
	}
	
	public class BucketIamConfigurationBucketPolicyOnly
	{
		
		/// <summary>
		/// If set, access is controlled only by bucket-level or above IAM policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The deadline for changing iamConfiguration.bucketPolicyOnly.enabled from true to false in RFC 3339 format. iamConfiguration.bucketPolicyOnly.enabled may be changed from true to false until the locked time, after which the field is immutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockedTime")]
		public System.Nullable<System.DateTimeOffset> LockedTime { get; set; }
	}
	
	public class BucketIamConfigurationUniformBucketLevelAccess
	{
		
		/// <summary>
		/// If set, access is controlled only by bucket-level or above IAM policies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The deadline for changing iamConfiguration.uniformBucketLevelAccess.enabled from true to false in RFC 3339  format. iamConfiguration.uniformBucketLevelAccess.enabled may be changed from true to false until the locked time, after which the field is immutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockedTime")]
		public System.Nullable<System.DateTimeOffset> LockedTime { get; set; }
	}
	
	public class BucketLifecycle
	{
		
		/// <summary>
		/// A lifecycle management rule, which is made of an action to take and the condition(s) under which the action will be taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public BucketLifecycleRule[] BucketLifecycleRule { get; set; }
	}
	
	public class BucketLifecycleRule
	{
		
		/// <summary>
		/// The action to take.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public BucketLifecycleRuleAction Action { get; set; }
		
		/// <summary>
		/// The condition(s) under which the action will be taken.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public BucketLifecycleRuleCondition Condition { get; set; }
	}
	
	public class BucketLifecycleRuleAction
	{
		
		/// <summary>
		/// Target storage class. Required iff the type of the action is SetStorageClass.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageClass")]
		public string StorageClass { get; set; }
		
		/// <summary>
		/// Type of the action. Currently, only Delete, SetStorageClass, and AbortIncompleteMultipartUpload are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class BucketLifecycleRuleCondition
	{
		
		/// <summary>
		/// Age of an object (in days). This condition is satisfied when an object reaches the specified age.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="age")]
		public System.Nullable<System.Int32> Age { get; set; }
		
		/// <summary>
		/// A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when an object is created before midnight of the specified date in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBefore")]
		public System.Nullable<System.DateOnly> CreatedBefore { get; set; }
		
		/// <summary>
		/// A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the custom time on an object is before this date in UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customTimeBefore")]
		public System.Nullable<System.DateOnly> CustomTimeBefore { get; set; }
		
		/// <summary>
		/// Number of days elapsed since the user-specified timestamp set on an object. The condition is satisfied if the days elapsed is at least this number. If no custom timestamp is specified on an object, the condition does not apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daysSinceCustomTime")]
		public System.Nullable<System.Int32> DaysSinceCustomTime { get; set; }
		
		/// <summary>
		/// Number of days elapsed since the noncurrent timestamp of an object. The condition is satisfied if the days elapsed is at least this number. This condition is relevant only for versioned objects. The value of the field must be a nonnegative integer. If it's zero, the object version will become eligible for Lifecycle action as soon as it becomes noncurrent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daysSinceNoncurrentTime")]
		public System.Nullable<System.Int32> DaysSinceNoncurrentTime { get; set; }
		
		/// <summary>
		/// Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLive")]
		public System.Nullable<System.Boolean> IsLive { get; set; }
		
		/// <summary>
		/// A regular expression that satisfies the RE2 syntax. This condition is satisfied when the name of the object matches the RE2 pattern. Note: This feature is currently in the "Early Access" launch stage and is only available to a whitelisted set of users; that means that this feature may be changed in backward-incompatible ways and that it is not guaranteed to be released.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchesPattern")]
		public string MatchesPattern { get; set; }
		
		/// <summary>
		/// List of object name prefixes. This condition will be satisfied when at least one of the prefixes exactly matches the beginning of the object name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchesPrefix")]
		public string[] MatchesPrefix { get; set; }
		
		/// <summary>
		/// Objects having any of the storage classes specified by this condition will be matched. Values include MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, STANDARD, and DURABLE_REDUCED_AVAILABILITY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchesStorageClass")]
		public string[] MatchesStorageClass { get; set; }
		
		/// <summary>
		/// List of object name suffixes. This condition will be satisfied when at least one of the suffixes exactly matches the end of the object name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchesSuffix")]
		public string[] MatchesSuffix { get; set; }
		
		/// <summary>
		/// A date in RFC 3339 format with only the date part (for instance, "2013-01-15"). This condition is satisfied when the noncurrent time on an object is before this date in UTC. This condition is relevant only for versioned objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noncurrentTimeBefore")]
		public System.Nullable<System.DateOnly> NoncurrentTimeBefore { get; set; }
		
		/// <summary>
		/// Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numNewerVersions")]
		public System.Nullable<System.Int32> NumNewerVersions { get; set; }
	}
	
	public class BucketLogging
	{
		
		/// <summary>
		/// The destination bucket where the current bucket's logs should be placed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logBucket")]
		public string LogBucket { get; set; }
		
		/// <summary>
		/// A prefix for log object names.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logObjectPrefix")]
		public string LogObjectPrefix { get; set; }
	}
	
	public class BucketObjectRetention
	{
		
		/// <summary>
		/// The bucket's object retention mode. Can be Enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
	}
	
	public class BucketOwner
	{
		
		/// <summary>
		/// The entity, in the form project-owner-projectId.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public string Entity { get; set; }
		
		/// <summary>
		/// The ID for the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
	}
	
	public class BucketRetentionPolicy
	{
		
		/// <summary>
		/// Server-determined value that indicates the time from which policy was enforced and effective. This value is in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveTime")]
		public System.Nullable<System.DateTimeOffset> EffectiveTime { get; set; }
		
		/// <summary>
		/// Once locked, an object retention policy cannot be modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLocked")]
		public System.Nullable<System.Boolean> IsLocked { get; set; }
		
		/// <summary>
		/// The duration in seconds that objects need to be retained. Retention duration must be greater than zero and less than 100 years. Note that enforcement of retention periods less than a day is not guaranteed. Such periods should only be used for testing purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public string RetentionPeriod { get; set; }
	}
	
	public class BucketSoftDeletePolicy
	{
		
		/// <summary>
		/// Server-determined value that indicates the time from which the policy, or one with a greater retention, was effective. This value is in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveTime")]
		public System.Nullable<System.DateTimeOffset> EffectiveTime { get; set; }
		
		/// <summary>
		/// The duration in seconds that soft-deleted objects in the bucket will be retained and cannot be permanently deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionDurationSeconds")]
		public string RetentionDurationSeconds { get; set; }
	}
	
	public class BucketVersioning
	{
		
		/// <summary>
		/// While set to true, versioning is fully enabled for this bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	public class BucketWebsite
	{
		
		/// <summary>
		/// If the requested object path is missing, the service will ensure the path has a trailing '/', append this suffix, and attempt to retrieve the resulting object. This allows the creation of index.html objects to represent directory pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mainPageSuffix")]
		public string MainPageSuffix { get; set; }
		
		/// <summary>
		/// If the requested object path is missing, and any mainPageSuffix object is missing, if applicable, the service will return the named object from this bucket as the content for a 404 Not Found result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notFoundPage")]
		public string NotFoundPage { get; set; }
	}
	
	/// <summary>
	/// An access-control list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BucketAccessControls
	{
		
		/// <summary>
		/// The list of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public BucketAccessControl[] Items { get; set; }
		
		/// <summary>
		/// The kind of item this is. For lists of bucket access control entries, this is always storage#bucketAccessControls.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#bucketAccessControls")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#bucketAccessControls";
	}
	
	/// <summary>
	/// A list of buckets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Buckets
	{
		
		/// <summary>
		/// The list of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Bucket[] Items { get; set; }
		
		/// <summary>
		/// The kind of item this is. For lists of buckets, this is always storage#buckets.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#buckets")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#buckets";
		
		/// <summary>
		/// The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A bulk restore objects request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkRestoreObjectsRequest
	{
		
		/// <summary>
		/// If false (default), the restore will not overwrite live objects with the same name at the destination. This means some deleted objects may be skipped. If true, live objects will be overwritten resulting in a noncurrent object (if versioning is enabled). If versioning is not enabled, overwriting the object will result in a soft-deleted object. In either case, if a noncurrent object already exists with the same name, a live version can be written without issue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowOverwrite")]
		public System.Nullable<System.Boolean> AllowOverwrite { get; set; }
		
		/// <summary>
		/// If true, copies the source object's ACL; otherwise, uses the bucket's default object ACL. The default is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copySourceAcl")]
		public System.Nullable<System.Boolean> CopySourceAcl { get; set; }
		
		/// <summary>
		/// Restores only the objects matching any of the specified glob(s). If this parameter is not specified, all objects will be restored within the specified time range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchGlobs")]
		public string[] MatchGlobs { get; set; }
		
		/// <summary>
		/// Restores only the objects that were soft-deleted after this time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softDeletedAfterTime")]
		public System.Nullable<System.DateTimeOffset> SoftDeletedAfterTime { get; set; }
		
		/// <summary>
		/// Restores only the objects that were soft-deleted before this time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softDeletedBeforeTime")]
		public System.Nullable<System.DateTimeOffset> SoftDeletedBeforeTime { get; set; }
	}
	
	/// <summary>
	/// An notification channel used to watch for resource changes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Channel
	{
		
		/// <summary>
		/// The address where notifications are delivered for this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiration")]
		public string Expiration { get; set; }
		
		/// <summary>
		/// A UUID or similar unique string that identifies this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifies this as a notification channel used to watch for changes to a resource, which is "api#channel".
		/// </summary>
		[System.ComponentModel.DefaultValue("api#channel")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "api#channel";
		
		/// <summary>
		/// Additional parameters controlling delivery channel behavior. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, string> Params { get; set; }
		
		/// <summary>
		/// A Boolean value to indicate whether payload is wanted. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public System.Nullable<System.Boolean> Payload { get; set; }
		
		/// <summary>
		/// An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// A version-specific identifier for the watched resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
		
		/// <summary>
		/// An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// The type of delivery mechanism used for this channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A Compose request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComposeRequest
	{
		
		/// <summary>
		/// An object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public Object Destination { get; set; }
		
		/// <summary>
		/// The kind of item this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#composeRequest")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#composeRequest";
		
		/// <summary>
		/// The list of source objects that will be concatenated into a single object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceObjects")]
		public ComposeRequestSourceObjects[] ComposeRequestSourceObjects { get; set; }
	}
	
	/// <summary>
	/// An object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Object
	{
		
		/// <summary>
		/// Access controls on the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acl")]
		public ObjectAccessControl[] Acl { get; set; }
		
		/// <summary>
		/// The name of the bucket containing this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Cache-Control directive for the object data. If omitted, and the object is accessible to all anonymous users, the default will be public, max-age=3600.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cacheControl")]
		public string CacheControl { get; set; }
		
		/// <summary>
		/// Number of underlying components that make up this object. Components are accumulated by compose operations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="componentCount")]
		public System.Nullable<System.Int32> ComponentCount { get; set; }
		
		/// <summary>
		/// Content-Disposition of the object data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDisposition")]
		public string ContentDisposition { get; set; }
		
		/// <summary>
		/// Content-Encoding of the object data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentEncoding")]
		public string ContentEncoding { get; set; }
		
		/// <summary>
		/// Content-Language of the object data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentLanguage")]
		public string ContentLanguage { get; set; }
		
		/// <summary>
		/// Content-Type of the object data. If an object is stored without a Content-Type, it is served as application/octet-stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64 in big-endian byte order. For more information about using the CRC32c checksum, see Hashes and ETags: Best Practices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crc32c")]
		public string Crc32c { get; set; }
		
		/// <summary>
		/// A timestamp in RFC 3339 format specified by the user for an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customTime")]
		public System.Nullable<System.DateTimeOffset> CustomTime { get; set; }
		
		/// <summary>
		/// Metadata of customer-supplied encryption key, if the object is encrypted by such a key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerEncryption")]
		public ObjectCustomerEncryption CustomerEncryption { get; set; }
		
		/// <summary>
		/// HTTP 1.1 Entity tag for the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Whether an object is under event-based hold. Event-based hold is a way to retain objects until an event occurs, which is signified by the hold's release (i.e. this value is set to false). After being released (set to false), such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is the loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventBasedHold")]
		public System.Nullable<System.Boolean> EventBasedHold { get; set; }
		
		/// <summary>
		/// The content generation of this object. Used for object versioning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public string Generation { get; set; }
		
		/// <summary>
		/// This is the time (in the future) when the soft-deleted object will no longer be restorable. It is equal to the soft delete time plus the current soft delete retention duration of the bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardDeleteTime")]
		public System.Nullable<System.DateTimeOffset> HardDeleteTime { get; set; }
		
		/// <summary>
		/// The ID of the object, including the bucket name, object name, and generation number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of item this is. For objects, this is always storage#object.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#object")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#object";
		
		/// <summary>
		/// Not currently supported. Specifying the parameter causes the request to fail with status code 400 - Bad Request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
		
		/// <summary>
		/// MD5 hash of the data; encoded using base64. For more information about using the MD5 hash, see Hashes and ETags: Best Practices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5Hash")]
		public string Md5Hash { get; set; }
		
		/// <summary>
		/// Media download link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaLink")]
		public string MediaLink { get; set; }
		
		/// <summary>
		/// User-provided metadata, in key/value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// The version of the metadata for this object at this generation. Used for preconditions and for detecting changes in metadata. A metageneration number is only meaningful in the context of a particular generation of a particular object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metageneration")]
		public string Metageneration { get; set; }
		
		/// <summary>
		/// The name of the object. Required if not specified by URL parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The owner of the object. This will always be the uploader of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public ObjectOwner Owner { get; set; }
		
		/// <summary>
		/// A collection of object level retention parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retention")]
		public ObjectRetention Retention { get; set; }
		
		/// <summary>
		/// A server-determined value that specifies the earliest time that the object's retention period expires. This value is in RFC 3339 format. Note 1: This field is not provided for objects with an active event-based hold, since retention expiration is unknown until the hold is removed. Note 2: This value can be provided even when temporary hold is set (so that the user can reason about policy without having to first unset the temporary hold).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionExpirationTime")]
		public System.Nullable<System.DateTimeOffset> RetentionExpirationTime { get; set; }
		
		/// <summary>
		/// The link to this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// Content-Length of the data in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// The time at which the object became soft-deleted in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softDeleteTime")]
		public System.Nullable<System.DateTimeOffset> SoftDeleteTime { get; set; }
		
		/// <summary>
		/// Storage class of the object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageClass")]
		public string StorageClass { get; set; }
		
		/// <summary>
		/// Whether an object is under temporary hold. While this flag is set to true, the object is protected against deletion and overwrites. A common use case of this flag is regulatory investigations where objects need to be retained while the investigation is ongoing. Note that unlike event-based hold, temporary hold does not impact retention expiration time of an object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="temporaryHold")]
		public System.Nullable<System.Boolean> TemporaryHold { get; set; }
		
		/// <summary>
		/// The creation time of the object in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeCreated")]
		public System.Nullable<System.DateTimeOffset> TimeCreated { get; set; }
		
		/// <summary>
		/// The time at which the object became noncurrent in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeDeleted")]
		public System.Nullable<System.DateTimeOffset> TimeDeleted { get; set; }
		
		/// <summary>
		/// The time at which the object's storage class was last changed. When the object is initially created, it will be set to timeCreated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeStorageClassUpdated")]
		public System.Nullable<System.DateTimeOffset> TimeStorageClassUpdated { get; set; }
		
		/// <summary>
		/// The modification time of the object metadata in RFC 3339 format. Set initially to object creation time and then updated whenever any metadata of the object changes. This includes changes made by a requester, such as modifying custom metadata, as well as changes made by Cloud Storage on behalf of a requester, such as changing the storage class based on an Object Lifecycle Configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	public class ObjectCustomerEncryption
	{
		
		/// <summary>
		/// The encryption algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionAlgorithm")]
		public string EncryptionAlgorithm { get; set; }
		
		/// <summary>
		/// SHA256 hash value of the encryption key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keySha256")]
		public string KeySha256 { get; set; }
	}
	
	public class ObjectOwner
	{
		
		/// <summary>
		/// The entity, in the form user-userId.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public string Entity { get; set; }
		
		/// <summary>
		/// The ID for the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
	}
	
	public class ObjectRetention
	{
		
		/// <summary>
		/// The bucket's object retention mode, can only be Unlocked or Locked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		/// <summary>
		/// A time in RFC 3339 format until which object retention protects this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retainUntilTime")]
		public System.Nullable<System.DateTimeOffset> RetainUntilTime { get; set; }
	}
	
	public class ComposeRequestSourceObjects
	{
		
		/// <summary>
		/// The generation of this object to use as the source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public string Generation { get; set; }
		
		/// <summary>
		/// The source object's name. All source objects must reside in the same bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Conditions that must be met for this operation to execute.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectPreconditions")]
		public ComposeRequestSourceObjectsObjectPreconditions ObjectPreconditions { get; set; }
	}
	
	public class ComposeRequestSourceObjectsObjectPreconditions
	{
		
		/// <summary>
		/// Only perform the composition if the generation of the source object that would be used matches this value. If this value and a generation are both specified, they must be the same value or the call will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ifGenerationMatch")]
		public string IfGenerationMatch { get; set; }
	}
	
	/// <summary>
	/// Represents an expression text. Example: title: "User account presence" description: "Determines whether the request has a user account" expression: "size(request.user) > 0"
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Expr
	{
		
		/// <summary>
		/// An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax. The application context of the containing message determines which well-known feature set of CEL is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// An optional string indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// An optional title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// A folder. Only available in buckets with hierarchical namespace enabled.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Folder
	{
		
		/// <summary>
		/// The name of the bucket containing this folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// The ID of the folder, including the bucket name, folder name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of item this is. For folders, this is always storage#folder.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#folder")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#folder";
		
		/// <summary>
		/// User-provided metadata, in key/value pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
		
		/// <summary>
		/// The version of the metadata for this folder. Used for preconditions and for detecting changes in metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metageneration")]
		public string Metageneration { get; set; }
		
		/// <summary>
		/// The name of the folder. Required if not specified by URL parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Only present if the folder is part of an ongoing rename folder operation. Contains information which can be used to query the operation status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pendingRenameInfo")]
		public FolderPendingRenameInfo PendingRenameInfo { get; set; }
		
		/// <summary>
		/// The link to this folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The creation time of the folder in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeCreated")]
		public System.Nullable<System.DateTimeOffset> TimeCreated { get; set; }
		
		/// <summary>
		/// The modification time of the folder metadata in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	public class FolderPendingRenameInfo
	{
		
		/// <summary>
		/// The ID of the rename folder operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// A list of folders.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Folders
	{
		
		/// <summary>
		/// The list of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Folder[] Items { get; set; }
		
		/// <summary>
		/// The kind of item this is. For lists of folders, this is always storage#folders.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#folders")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#folders";
		
		/// <summary>
		/// The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for storage.buckets.operations.list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleLongrunningListOperationsResponse
	{
		
		/// <summary>
		/// The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public GoogleLongrunningOperation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleLongrunningOperation
	{
		
		/// <summary>
		/// If the value is "false", it means the operation is still in progress. If "true", the operation is completed, and either "error" or "response" is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The "Status" type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each "Status" message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public GoogleRpcStatus Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the "name" should be a resource name ending with "operations/{operationId}".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal response of the operation in case of success. If the original method returns no data on success, such as "Delete", the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type "XxxResponse", where "Xxx" is the original method name. For example, if the original method name is "TakeSnapshot()", the inferred response type is "TakeSnapshotResponse".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The "Status" type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each "Status" message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleRpcStatus
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// JSON template to produce a JSON-style HMAC Key resource for Create responses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HmacKey
	{
		
		/// <summary>
		/// The kind of item this is. For HMAC keys, this is always storage#hmacKey.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#hmacKey")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#hmacKey";
		
		/// <summary>
		/// JSON template to produce a JSON-style HMAC Key metadata resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public HmacKeyMetadata Metadata { get; set; }
		
		/// <summary>
		/// HMAC secret key material.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
	}
	
	/// <summary>
	/// JSON template to produce a JSON-style HMAC Key metadata resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HmacKeyMetadata
	{
		
		/// <summary>
		/// The ID of the HMAC Key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessId")]
		public string AccessId { get; set; }
		
		/// <summary>
		/// HTTP 1.1 Entity tag for the HMAC key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ID of the HMAC key, including the Project ID and the Access ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of item this is. For HMAC Key metadata, this is always storage#hmacKeyMetadata.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#hmacKeyMetadata")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#hmacKeyMetadata";
		
		/// <summary>
		/// Project ID owning the service account to which the key authenticates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The link to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The email address of the key's associated service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountEmail")]
		public string ServiceAccountEmail { get; set; }
		
		/// <summary>
		/// The state of the key. Can be one of ACTIVE, INACTIVE, or DELETED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// The creation time of the HMAC key in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeCreated")]
		public System.Nullable<System.DateTimeOffset> TimeCreated { get; set; }
		
		/// <summary>
		/// The last modification time of the HMAC key metadata in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.DateTimeOffset> Updated { get; set; }
	}
	
	/// <summary>
	/// A list of hmacKeys.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HmacKeysMetadata
	{
		
		/// <summary>
		/// The list of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public HmacKeyMetadata[] Items { get; set; }
		
		/// <summary>
		/// The kind of item this is. For lists of hmacKeys, this is always storage#hmacKeysMetadata.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#hmacKeysMetadata")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#hmacKeysMetadata";
		
		/// <summary>
		/// The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A managed folder.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedFolder
	{
		
		/// <summary>
		/// The name of the bucket containing this managed folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// The creation time of the managed folder in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.Nullable<System.DateTimeOffset> CreateTime { get; set; }
		
		/// <summary>
		/// The ID of the managed folder, including the bucket name and managed folder name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of item this is. For managed folders, this is always storage#managedFolder.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#managedFolder")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#managedFolder";
		
		/// <summary>
		/// The version of the metadata for this managed folder. Used for preconditions and for detecting changes in metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metageneration")]
		public string Metageneration { get; set; }
		
		/// <summary>
		/// The name of the managed folder. Required if not specified by URL parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The link to this managed folder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The last update time of the managed folder metadata in RFC 3339 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.Nullable<System.DateTimeOffset> UpdateTime { get; set; }
	}
	
	/// <summary>
	/// A list of managed folders.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedFolders
	{
		
		/// <summary>
		/// The list of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ManagedFolder[] Items { get; set; }
		
		/// <summary>
		/// The kind of item this is. For lists of managed folders, this is always storage#managedFolders.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#managedFolders")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#managedFolders";
		
		/// <summary>
		/// The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A subscription to receive Google PubSub notifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Notification
	{
		
		/// <summary>
		/// An optional list of additional attributes to attach to each Cloud PubSub message published for this notification subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_attributes")]
		public System.Collections.Generic.Dictionary<string, string> Custom_attributes { get; set; }
		
		/// <summary>
		/// HTTP 1.1 Entity tag for this subscription notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// If present, only send notifications about listed event types. If empty, sent notifications for all event types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_types")]
		public string[] Event_types { get; set; }
		
		/// <summary>
		/// The ID of the notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The kind of item this is. For notifications, this is always storage#notification.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#notification")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#notification";
		
		/// <summary>
		/// If present, only apply this notification configuration to object names that begin with this prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object_name_prefix")]
		public string Object_name_prefix { get; set; }
		
		/// <summary>
		/// The desired content of the Payload.
		/// </summary>
		[System.ComponentModel.DefaultValue("JSON_API_V1")]
		[System.Runtime.Serialization.DataMember(Name="payload_format")]
		public string Payload_format { get; set; } = "JSON_API_V1";
		
		/// <summary>
		/// The canonical URL of this notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selfLink")]
		public string SelfLink { get; set; }
		
		/// <summary>
		/// The Cloud PubSub topic to which this subscription publishes. Formatted as: '//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	/// <summary>
	/// A list of notification subscriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Notifications
	{
		
		/// <summary>
		/// The list of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Notification[] Items { get; set; }
		
		/// <summary>
		/// The kind of item this is. For lists of notifications, this is always storage#notifications.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#notifications")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#notifications";
	}
	
	/// <summary>
	/// An access-control list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectAccessControls
	{
		
		/// <summary>
		/// The list of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ObjectAccessControl[] Items { get; set; }
		
		/// <summary>
		/// The kind of item this is. For lists of object access control entries, this is always storage#objectAccessControls.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#objectAccessControls")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#objectAccessControls";
	}
	
	/// <summary>
	/// A list of objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Objects
	{
		
		/// <summary>
		/// The list of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Object[] Items { get; set; }
		
		/// <summary>
		/// The kind of item this is. For lists of objects, this is always storage#objects.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#objects")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#objects";
		
		/// <summary>
		/// The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of prefixes of objects matching-but-not-listed up to and including the requested delimiter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefixes")]
		public string[] Prefixes { get; set; }
	}
	
	/// <summary>
	/// A bucket/object/managedFolder IAM policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Policy
	{
		
		/// <summary>
		/// An association between a role, which comes with a set of permissions, and members who may assume that role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public PolicyBindings[] PolicyBindings { get; set; }
		
		/// <summary>
		/// HTTP 1.1  Entity tag for the policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The kind of item this is. For policies, this is always storage#policy. This field is ignored on input.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#policy")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#policy";
		
		/// <summary>
		/// The ID of the resource to which this policy belongs. Will be of the form projects/_/buckets/bucket for buckets, projects/_/buckets/bucket/objects/object for objects, and projects/_/buckets/bucket/managedFolders/managedFolder. A specific generation may be specified by appending #generationNumber to the end of the object name, e.g. projects/_/buckets/my-bucket/objects/data.txt#17. The current generation can be denoted with #0. This field is ignored on input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// The IAM policy format version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	public class PolicyBindings
	{
		
		/// <summary>
		/// Represents an expression text. Example: title: "User account presence" description: "Determines whether the request has a user account" expression: "size(request.user) > 0"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// A collection of identifiers for members who may assume the provided role. Recognized identifiers are as follows:  
		///- allUsers — A special identifier that represents anyone on the internet; with or without a Google account.  
		///- allAuthenticatedUsers — A special identifier that represents anyone who is authenticated with a Google account or a service account.  
		///- user:emailid — An email address that represents a specific account. For example, user:alice@gmail.com or user:joe@example.com.  
		///- serviceAccount:emailid — An email address that represents a service account. For example,  serviceAccount:my-other-app@appspot.gserviceaccount.com .  
		///- group:emailid — An email address that represents a Google group. For example, group:admins@example.com.  
		///- domain:domain — A Google Apps domain name that represents all the users of that domain. For example, domain:google.com or domain:example.com.  
		///- projectOwner:projectid — Owners of the given project. For example, projectOwner:my-example-project  
		///- projectEditor:projectid — Editors of the given project. For example, projectEditor:my-example-project  
		///- projectViewer:projectid — Viewers of the given project. For example, projectViewer:my-example-project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// The role to which members belong. Two types of roles are supported: new IAM roles, which grant permissions that do not map directly to those provided by ACLs, and legacy IAM roles, which do map directly to ACL permissions. All roles are of the format roles/storage.specificRole.
		///The new IAM roles are:  
		///- roles/storage.admin — Full control of Google Cloud Storage resources.  
		///- roles/storage.objectViewer — Read-Only access to Google Cloud Storage objects.  
		///- roles/storage.objectCreator — Access to create objects in Google Cloud Storage.  
		///- roles/storage.objectAdmin — Full control of Google Cloud Storage objects.   The legacy IAM roles are:  
		///- roles/storage.legacyObjectReader — Read-only access to objects without listing. Equivalent to an ACL entry on an object with the READER role.  
		///- roles/storage.legacyObjectOwner — Read/write access to existing objects without listing. Equivalent to an ACL entry on an object with the OWNER role.  
		///- roles/storage.legacyBucketReader — Read access to buckets with object listing. Equivalent to an ACL entry on a bucket with the READER role.  
		///- roles/storage.legacyBucketWriter — Read access to buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the WRITER role.  
		///- roles/storage.legacyBucketOwner — Read and write access to existing buckets with object listing/creation/deletion. Equivalent to an ACL entry on a bucket with the OWNER role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// A rewrite response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RewriteResponse
	{
		
		/// <summary>
		/// true if the copy is finished; otherwise, false if the copy is in progress. This property is always present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The kind of item this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#rewriteResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#rewriteResponse";
		
		/// <summary>
		/// The total size of the object being copied in bytes. This property is always present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectSize")]
		public string ObjectSize { get; set; }
		
		/// <summary>
		/// An object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public Object Resource { get; set; }
		
		/// <summary>
		/// A token to use in subsequent requests to continue copying data. This token is present in the response only when there is more data to copy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewriteToken")]
		public string RewriteToken { get; set; }
		
		/// <summary>
		/// The total bytes written so far, which can be used to provide a waiting user with a progress indicator. This property is always present in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalBytesRewritten")]
		public string TotalBytesRewritten { get; set; }
	}
	
	/// <summary>
	/// A subscription to receive Google PubSub notifications.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceAccount
	{
		
		/// <summary>
		/// The ID of the notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_address")]
		public string Email_address { get; set; }
		
		/// <summary>
		/// The kind of item this is. For notifications, this is always storage#notification.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#serviceAccount")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#serviceAccount";
	}
	
	/// <summary>
	/// A storage.(buckets|objects|managedFolders).testIamPermissions response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TestIamPermissionsResponse
	{
		
		/// <summary>
		/// The kind of item this is.
		/// </summary>
		[System.ComponentModel.DefaultValue("storage#testIamPermissionsResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "storage#testIamPermissionsResponse";
		
		/// <summary>
		/// The permissions held by the caller. Permissions are always of the format storage.resource.capability, where resource is one of buckets, objects, or managedFolders. The supported permissions are as follows:  
		///- storage.buckets.delete — Delete bucket.  
		///- storage.buckets.get — Read bucket metadata.  
		///- storage.buckets.getIamPolicy — Read bucket IAM policy.  
		///- storage.buckets.create — Create bucket.  
		///- storage.buckets.list — List buckets.  
		///- storage.buckets.setIamPolicy — Update bucket IAM policy.  
		///- storage.buckets.update — Update bucket metadata.  
		///- storage.objects.delete — Delete object.  
		///- storage.objects.get — Read object data and metadata.  
		///- storage.objects.getIamPolicy — Read object IAM policy.  
		///- storage.objects.create — Create object.  
		///- storage.objects.list — List objects.  
		///- storage.objects.setIamPolicy — Update object IAM policy.  
		///- storage.objects.update — Update object metadata. 
		///- storage.managedFolders.delete — Delete managed folder.  
		///- storage.managedFolders.get — Read managed folder metadata.  
		///- storage.managedFolders.getIamPolicy — Read managed folder IAM policy.  
		///- storage.managedFolders.create — Create managed folder.  
		///- storage.managedFolders.list — List managed folders.  
		///- storage.managedFolders.setIamPolicy — Update managed folder IAM policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves a list of buckets for a given project.
		/// Storage_buckets_list b
		/// </summary>
		/// <param name="project">A valid API project identifier.</param>
		/// <param name="maxResults">Maximum number of buckets to return in a single response. The service will use this parameter or 1,000 items, whichever is smaller.
		/// Minimum: 0
		// </param>
		/// <param name="pageToken">A previously-returned page token representing part of the larger set of results to view.</param>
		/// <param name="prefix">Filter results to buckets whose names begin with this prefix.</param>
		/// <param name="projection">Set of properties to return. Defaults to noAcl.</param>
		/// <param name="userProject">The project to be billed for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Buckets> Storage_buckets_listAsync(string project, int maxResults, string pageToken, string prefix, Storage_buckets_listProjection projection, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b?project=" + (project==null? "" : System.Uri.EscapeDataString(project))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&prefix=" + (prefix==null? "" : System.Uri.EscapeDataString(prefix))+"&projection=" + projection+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Buckets>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new bucket.
		/// Storage_buckets_insert b
		/// </summary>
		/// <param name="project">A valid API project identifier.</param>
		/// <param name="enableObjectRetention">When set to true, object retention is enabled for this bucket.</param>
		/// <param name="predefinedAcl">Apply a predefined set of access controls to this bucket.</param>
		/// <param name="predefinedDefaultObjectAcl">Apply a predefined set of default object access controls to this bucket.</param>
		/// <param name="projection">Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.</param>
		/// <param name="userProject">The project to be billed for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<Bucket> Storage_buckets_insertAsync(string project, bool enableObjectRetention, Storage_buckets_insertPredefinedAcl predefinedAcl, Storage_buckets_insertPredefinedDefaultObjectAcl predefinedDefaultObjectAcl, Storage_buckets_listProjection projection, string userProject, Bucket requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b?project=" + (project==null? "" : System.Uri.EscapeDataString(project))+"&enableObjectRetention="+enableObjectRetention+"&predefinedAcl=" + predefinedAcl+"&predefinedDefaultObjectAcl=" + predefinedDefaultObjectAcl+"&projection=" + projection+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Bucket>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Permanently deletes an empty bucket.
		/// Storage_buckets_delete b/{bucket}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="ifMetagenerationMatch">If set, only deletes the bucket if its metageneration matches this value.</param>
		/// <param name="ifMetagenerationNotMatch">If set, only deletes the bucket if its metageneration does not match this value.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task Storage_buckets_deleteAsync(string bucket, string ifMetagenerationMatch, string ifMetagenerationNotMatch, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns metadata for the specified bucket.
		/// Storage_buckets_get b/{bucket}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="ifMetagenerationMatch">Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.</param>
		/// <param name="ifMetagenerationNotMatch">Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.</param>
		/// <param name="projection">Set of properties to return. Defaults to noAcl.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Bucket> Storage_buckets_getAsync(string bucket, string ifMetagenerationMatch, string ifMetagenerationNotMatch, Storage_buckets_listProjection projection, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch))+"&projection=" + projection+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Bucket>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
		/// Storage_buckets_patch b/{bucket}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="ifMetagenerationMatch">Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.</param>
		/// <param name="ifMetagenerationNotMatch">Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.</param>
		/// <param name="predefinedAcl">Apply a predefined set of access controls to this bucket.</param>
		/// <param name="predefinedDefaultObjectAcl">Apply a predefined set of default object access controls to this bucket.</param>
		/// <param name="projection">Set of properties to return. Defaults to full.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Bucket> Storage_buckets_patchAsync(string bucket, string ifMetagenerationMatch, string ifMetagenerationNotMatch, Storage_buckets_patchPredefinedAcl predefinedAcl, Storage_buckets_patchPredefinedDefaultObjectAcl predefinedDefaultObjectAcl, Storage_buckets_listProjection projection, string userProject, Bucket requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch))+"&predefinedAcl=" + predefinedAcl+"&predefinedDefaultObjectAcl=" + predefinedDefaultObjectAcl+"&projection=" + projection+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Bucket>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.
		/// Storage_buckets_update b/{bucket}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="ifMetagenerationMatch">Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.</param>
		/// <param name="ifMetagenerationNotMatch">Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.</param>
		/// <param name="predefinedAcl">Apply a predefined set of access controls to this bucket.</param>
		/// <param name="predefinedDefaultObjectAcl">Apply a predefined set of default object access controls to this bucket.</param>
		/// <param name="projection">Set of properties to return. Defaults to full.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Bucket> Storage_buckets_updateAsync(string bucket, string ifMetagenerationMatch, string ifMetagenerationNotMatch, Storage_buckets_updatePredefinedAcl predefinedAcl, Storage_buckets_updatePredefinedDefaultObjectAcl predefinedDefaultObjectAcl, Storage_buckets_listProjection projection, string userProject, Bucket requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch))+"&predefinedAcl=" + predefinedAcl+"&predefinedDefaultObjectAcl=" + predefinedDefaultObjectAcl+"&projection=" + projection+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Bucket>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves ACL entries on the specified bucket.
		/// Storage_bucketAccessControls_list b/{bucket}/acl
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<BucketAccessControls> Storage_bucketAccessControls_listAsync(string bucket, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/acl&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BucketAccessControls>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new ACL entry on the specified bucket.
		/// Storage_bucketAccessControls_insert b/{bucket}/acl
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<BucketAccessControl> Storage_bucketAccessControls_insertAsync(string bucket, string userProject, BucketAccessControl requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/acl&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BucketAccessControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Permanently deletes the ACL entry for the specified entity on the specified bucket.
		/// Storage_bucketAccessControls_delete b/{bucket}/acl/{entity}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="entity">The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task Storage_bucketAccessControls_deleteAsync(string bucket, string entity, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/acl/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the ACL entry for the specified entity on the specified bucket.
		/// Storage_bucketAccessControls_get b/{bucket}/acl/{entity}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="entity">The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<BucketAccessControl> Storage_bucketAccessControls_getAsync(string bucket, string entity, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/acl/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BucketAccessControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Patches an ACL entry on the specified bucket.
		/// Storage_bucketAccessControls_patch b/{bucket}/acl/{entity}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="entity">The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<BucketAccessControl> Storage_bucketAccessControls_patchAsync(string bucket, string entity, string userProject, BucketAccessControl requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/acl/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BucketAccessControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an ACL entry on the specified bucket.
		/// Storage_bucketAccessControls_update b/{bucket}/acl/{entity}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="entity">The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<BucketAccessControl> Storage_bucketAccessControls_updateAsync(string bucket, string entity, string userProject, BucketAccessControl requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/acl/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BucketAccessControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns a list of Anywhere Cache instances of the bucket matching the criteria.
		/// Storage_anywhereCaches_list b/{bucket}/anywhereCaches
		/// </summary>
		/// <param name="bucket">Name of the parent bucket.</param>
		/// <param name="pageSize">Maximum number of items to return in a single page of responses. Maximum 1000.
		/// Minimum: 0
		// </param>
		/// <param name="pageToken">A previously-returned page token representing part of the larger set of results to view.</param>
		/// <returns>Successful response</returns>
		public async Task<AnywhereCaches> Storage_anywhereCaches_listAsync(string bucket, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/anywhereCaches&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AnywhereCaches>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an Anywhere Cache instance.
		/// Storage_anywhereCaches_insert b/{bucket}/anywhereCaches
		/// </summary>
		/// <param name="bucket">Name of the parent bucket.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Storage_anywhereCaches_insertAsync(string bucket, AnywhereCache requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/anywhereCaches";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningOperation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the metadata of an Anywhere Cache instance.
		/// Storage_anywhereCaches_get b/{bucket}/anywhereCaches/{anywhereCacheId}
		/// </summary>
		/// <param name="bucket">Name of the parent bucket.</param>
		/// <param name="anywhereCacheId">The ID of requested Anywhere Cache instance.</param>
		/// <returns>Successful response</returns>
		public async Task<AnywhereCache> Storage_anywhereCaches_getAsync(string bucket, string anywhereCacheId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/anywhereCaches/"+ (anywhereCacheId==null? "" : System.Uri.EscapeDataString(anywhereCacheId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AnywhereCache>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the config(ttl and admissionPolicy) of an Anywhere Cache instance.
		/// Storage_anywhereCaches_update b/{bucket}/anywhereCaches/{anywhereCacheId}
		/// </summary>
		/// <param name="bucket">Name of the parent bucket.</param>
		/// <param name="anywhereCacheId">The ID of requested Anywhere Cache instance.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Storage_anywhereCaches_updateAsync(string bucket, string anywhereCacheId, AnywhereCache requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/anywhereCaches/"+ (anywhereCacheId==null? "" : System.Uri.EscapeDataString(anywhereCacheId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningOperation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Disables an Anywhere Cache instance.
		/// Storage_anywhereCaches_disable b/{bucket}/anywhereCaches/{anywhereCacheId}/disable
		/// </summary>
		/// <param name="bucket">Name of the parent bucket.</param>
		/// <param name="anywhereCacheId">The ID of requested Anywhere Cache instance.</param>
		/// <returns>Successful response</returns>
		public async Task<AnywhereCache> Storage_anywhereCaches_disableAsync(string bucket, string anywhereCacheId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/anywhereCaches/"+ (anywhereCacheId==null? "" : System.Uri.EscapeDataString(anywhereCacheId))+"/disable";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AnywhereCache>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Pauses an Anywhere Cache instance.
		/// Storage_anywhereCaches_pause b/{bucket}/anywhereCaches/{anywhereCacheId}/pause
		/// </summary>
		/// <param name="bucket">Name of the parent bucket.</param>
		/// <param name="anywhereCacheId">The ID of requested Anywhere Cache instance.</param>
		/// <returns>Successful response</returns>
		public async Task<AnywhereCache> Storage_anywhereCaches_pauseAsync(string bucket, string anywhereCacheId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/anywhereCaches/"+ (anywhereCacheId==null? "" : System.Uri.EscapeDataString(anywhereCacheId))+"/pause";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AnywhereCache>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Resumes a paused or disabled Anywhere Cache instance.
		/// Storage_anywhereCaches_resume b/{bucket}/anywhereCaches/{anywhereCacheId}/resume
		/// </summary>
		/// <param name="bucket">Name of the parent bucket.</param>
		/// <param name="anywhereCacheId">The ID of requested Anywhere Cache instance.</param>
		/// <returns>Successful response</returns>
		public async Task<AnywhereCache> Storage_anywhereCaches_resumeAsync(string bucket, string anywhereCacheId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/anywhereCaches/"+ (anywhereCacheId==null? "" : System.Uri.EscapeDataString(anywhereCacheId))+"/resume";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AnywhereCache>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves default object ACL entries on the specified bucket.
		/// Storage_defaultObjectAccessControls_list b/{bucket}/defaultObjectAcl
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="ifMetagenerationMatch">If present, only return default ACL listing if the bucket's current metageneration matches this value.</param>
		/// <param name="ifMetagenerationNotMatch">If present, only return default ACL listing if the bucket's current metageneration does not match the given value.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<ObjectAccessControls> Storage_defaultObjectAccessControls_listAsync(string bucket, string ifMetagenerationMatch, string ifMetagenerationNotMatch, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/defaultObjectAcl&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ObjectAccessControls>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new default object ACL entry on the specified bucket.
		/// Storage_defaultObjectAccessControls_insert b/{bucket}/defaultObjectAcl
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<ObjectAccessControl> Storage_defaultObjectAccessControls_insertAsync(string bucket, string userProject, ObjectAccessControl requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/defaultObjectAcl&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ObjectAccessControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Permanently deletes the default object ACL entry for the specified entity on the specified bucket.
		/// Storage_defaultObjectAccessControls_delete b/{bucket}/defaultObjectAcl/{entity}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="entity">The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task Storage_defaultObjectAccessControls_deleteAsync(string bucket, string entity, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/defaultObjectAcl/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the default object ACL entry for the specified entity on the specified bucket.
		/// Storage_defaultObjectAccessControls_get b/{bucket}/defaultObjectAcl/{entity}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="entity">The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<ObjectAccessControl> Storage_defaultObjectAccessControls_getAsync(string bucket, string entity, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/defaultObjectAcl/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ObjectAccessControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Patches a default object ACL entry on the specified bucket.
		/// Storage_defaultObjectAccessControls_patch b/{bucket}/defaultObjectAcl/{entity}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="entity">The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<ObjectAccessControl> Storage_defaultObjectAccessControls_patchAsync(string bucket, string entity, string userProject, ObjectAccessControl requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/defaultObjectAcl/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ObjectAccessControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates a default object ACL entry on the specified bucket.
		/// Storage_defaultObjectAccessControls_update b/{bucket}/defaultObjectAcl/{entity}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="entity">The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<ObjectAccessControl> Storage_defaultObjectAccessControls_updateAsync(string bucket, string entity, string userProject, ObjectAccessControl requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/defaultObjectAcl/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ObjectAccessControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a list of folders matching the criteria. Only applicable to buckets with hierarchical namespace enabled.
		/// Storage_folders_list b/{bucket}/folders
		/// </summary>
		/// <param name="bucket">Name of the bucket in which to look for folders.</param>
		/// <param name="delimiter">Returns results in a directory-like mode. The only supported value is '/'. If set, items will only contain folders that either exactly match the prefix, or are one level below the prefix.</param>
		/// <param name="endOffset">Filter results to folders whose names are lexicographically before endOffset. If startOffset is also set, the folders listed will have names between startOffset (inclusive) and endOffset (exclusive).</param>
		/// <param name="pageSize">Maximum number of items to return in a single page of responses.
		/// Minimum: 0
		// </param>
		/// <param name="pageToken">A previously-returned page token representing part of the larger set of results to view.</param>
		/// <param name="prefix">Filter results to folders whose paths begin with this prefix. If set, the value must either be an empty string or end with a '/'.</param>
		/// <param name="startOffset">Filter results to folders whose names are lexicographically equal to or after startOffset. If endOffset is also set, the folders listed will have names between startOffset (inclusive) and endOffset (exclusive).</param>
		/// <returns>Successful response</returns>
		public async Task<Folders> Storage_folders_listAsync(string bucket, string delimiter, string endOffset, int pageSize, string pageToken, string prefix, string startOffset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/folders&delimiter=" + (delimiter==null? "" : System.Uri.EscapeDataString(delimiter))+"&endOffset=" + (endOffset==null? "" : System.Uri.EscapeDataString(endOffset))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&prefix=" + (prefix==null? "" : System.Uri.EscapeDataString(prefix))+"&startOffset=" + (startOffset==null? "" : System.Uri.EscapeDataString(startOffset));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Folders>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new folder. Only applicable to buckets with hierarchical namespace enabled.
		/// Storage_folders_insert b/{bucket}/folders
		/// </summary>
		/// <param name="bucket">Name of the bucket in which the folder resides.</param>
		/// <param name="recursive">If true, any parent folder which doesn’t exist will be created automatically.</param>
		/// <returns>Successful response</returns>
		public async Task<Folder> Storage_folders_insertAsync(string bucket, bool recursive, Folder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/folders&recursive="+recursive;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Folder>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Permanently deletes a folder. Only applicable to buckets with hierarchical namespace enabled.
		/// Storage_folders_delete b/{bucket}/folders/{folder}
		/// </summary>
		/// <param name="bucket">Name of the bucket in which the folder resides.</param>
		/// <param name="folder">Name of a folder.</param>
		/// <param name="ifMetagenerationMatch">If set, only deletes the folder if its metageneration matches this value.</param>
		/// <param name="ifMetagenerationNotMatch">If set, only deletes the folder if its metageneration does not match this value.</param>
		/// <returns>Successful response</returns>
		public async Task Storage_folders_deleteAsync(string bucket, string folder, string ifMetagenerationMatch, string ifMetagenerationNotMatch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/folders/"+ (folder==null? "" : System.Uri.EscapeDataString(folder))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns metadata for the specified folder. Only applicable to buckets with hierarchical namespace enabled.
		/// Storage_folders_get b/{bucket}/folders/{folder}
		/// </summary>
		/// <param name="bucket">Name of the bucket in which the folder resides.</param>
		/// <param name="folder">Name of a folder.</param>
		/// <param name="ifMetagenerationMatch">Makes the return of the folder metadata conditional on whether the folder's current metageneration matches the given value.</param>
		/// <param name="ifMetagenerationNotMatch">Makes the return of the folder metadata conditional on whether the folder's current metageneration does not match the given value.</param>
		/// <returns>Successful response</returns>
		public async Task<Folder> Storage_folders_getAsync(string bucket, string folder, string ifMetagenerationMatch, string ifMetagenerationNotMatch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/folders/"+ (folder==null? "" : System.Uri.EscapeDataString(folder))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Folder>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Renames a source folder to a destination folder. Only applicable to buckets with hierarchical namespace enabled.
		/// Storage_folders_rename b/{bucket}/folders/{sourceFolder}/renameTo/folders/{destinationFolder}
		/// </summary>
		/// <param name="bucket">Name of the bucket in which the folders are in.</param>
		/// <param name="sourceFolder">Name of the source folder.</param>
		/// <param name="destinationFolder">Name of the destination folder.</param>
		/// <param name="ifSourceMetagenerationMatch">Makes the operation conditional on whether the source object's current metageneration matches the given value.</param>
		/// <param name="ifSourceMetagenerationNotMatch">Makes the operation conditional on whether the source object's current metageneration does not match the given value.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Storage_folders_renameAsync(string bucket, string sourceFolder, string destinationFolder, string ifSourceMetagenerationMatch, string ifSourceMetagenerationNotMatch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/folders/"+ (sourceFolder==null? "" : System.Uri.EscapeDataString(sourceFolder))+"/renameTo/folders/"+ (destinationFolder==null? "" : System.Uri.EscapeDataString(destinationFolder))+"&ifSourceMetagenerationMatch=" + (ifSourceMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifSourceMetagenerationMatch))+"&ifSourceMetagenerationNotMatch=" + (ifSourceMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifSourceMetagenerationNotMatch));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningOperation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an IAM policy for the specified bucket.
		/// Storage_buckets_getIamPolicy b/{bucket}/iam
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="optionsRequestedPolicyVersion">The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails.
		/// Minimum: 1
		// </param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Storage_buckets_getIamPolicyAsync(string bucket, int optionsRequestedPolicyVersion, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/iam&optionsRequestedPolicyVersion="+optionsRequestedPolicyVersion+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Policy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an IAM policy for the specified bucket.
		/// Storage_buckets_setIamPolicy b/{bucket}/iam
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Storage_buckets_setIamPolicyAsync(string bucket, string userProject, Policy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/iam&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Policy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Tests a set of permissions on the given bucket to see which, if any, are held by the caller.
		/// Storage_buckets_testIamPermissions b/{bucket}/iam/testPermissions
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="permissions">Permissions to test.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Storage_buckets_testIamPermissionsAsync(string bucket, string[] permissions, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/iam/testPermissions&"+string.Join("&", permissions.Select(z => $"permissions={System.Uri.EscapeDataString(z.ToString())}"))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TestIamPermissionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Locks retention policy on a bucket.
		/// Storage_buckets_lockRetentionPolicy b/{bucket}/lockRetentionPolicy
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="ifMetagenerationMatch">Makes the operation conditional on whether bucket's current metageneration matches the given value.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Bucket> Storage_buckets_lockRetentionPolicyAsync(string bucket, string ifMetagenerationMatch, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/lockRetentionPolicy&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Bucket>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists managed folders in the given bucket.
		/// Storage_managedFolders_list b/{bucket}/managedFolders
		/// </summary>
		/// <param name="bucket">Name of the bucket containing the managed folder.</param>
		/// <param name="pageSize">Maximum number of items to return in a single page of responses.
		/// Minimum: 0
		// </param>
		/// <param name="pageToken">A previously-returned page token representing part of the larger set of results to view.</param>
		/// <param name="prefix">The managed folder name/path prefix to filter the output list of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedFolders> Storage_managedFolders_listAsync(string bucket, int pageSize, string pageToken, string prefix, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/managedFolders&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&prefix=" + (prefix==null? "" : System.Uri.EscapeDataString(prefix));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ManagedFolders>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new managed folder.
		/// Storage_managedFolders_insert b/{bucket}/managedFolders
		/// </summary>
		/// <param name="bucket">Name of the bucket containing the managed folder.</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedFolder> Storage_managedFolders_insertAsync(string bucket, ManagedFolder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/managedFolders";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ManagedFolder>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Permanently deletes a managed folder.
		/// Storage_managedFolders_delete b/{bucket}/managedFolders/{managedFolder}
		/// </summary>
		/// <param name="bucket">Name of the bucket containing the managed folder.</param>
		/// <param name="managedFolder">The managed folder name/path.</param>
		/// <param name="ifMetagenerationMatch">If set, only deletes the managed folder if its metageneration matches this value.</param>
		/// <param name="ifMetagenerationNotMatch">If set, only deletes the managed folder if its metageneration does not match this value.</param>
		/// <returns>Successful response</returns>
		public async Task Storage_managedFolders_deleteAsync(string bucket, string managedFolder, string ifMetagenerationMatch, string ifMetagenerationNotMatch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/managedFolders/"+ (managedFolder==null? "" : System.Uri.EscapeDataString(managedFolder))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns metadata of the specified managed folder.
		/// Storage_managedFolders_get b/{bucket}/managedFolders/{managedFolder}
		/// </summary>
		/// <param name="bucket">Name of the bucket containing the managed folder.</param>
		/// <param name="managedFolder">The managed folder name/path.</param>
		/// <param name="ifMetagenerationMatch">Makes the return of the managed folder metadata conditional on whether the managed folder's current metageneration matches the given value.</param>
		/// <param name="ifMetagenerationNotMatch">Makes the return of the managed folder metadata conditional on whether the managed folder's current metageneration does not match the given value.</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedFolder> Storage_managedFolders_getAsync(string bucket, string managedFolder, string ifMetagenerationMatch, string ifMetagenerationNotMatch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/managedFolders/"+ (managedFolder==null? "" : System.Uri.EscapeDataString(managedFolder))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ManagedFolder>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an IAM policy for the specified managed folder.
		/// Storage_managedFolders_getIamPolicy b/{bucket}/managedFolders/{managedFolder}/iam
		/// </summary>
		/// <param name="bucket">Name of the bucket containing the managed folder.</param>
		/// <param name="managedFolder">The managed folder name/path.</param>
		/// <param name="optionsRequestedPolicyVersion">The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails.
		/// Minimum: 1
		// </param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Storage_managedFolders_getIamPolicyAsync(string bucket, string managedFolder, int optionsRequestedPolicyVersion, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/managedFolders/"+ (managedFolder==null? "" : System.Uri.EscapeDataString(managedFolder))+"/iam&optionsRequestedPolicyVersion="+optionsRequestedPolicyVersion+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Policy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an IAM policy for the specified managed folder.
		/// Storage_managedFolders_setIamPolicy b/{bucket}/managedFolders/{managedFolder}/iam
		/// </summary>
		/// <param name="bucket">Name of the bucket containing the managed folder.</param>
		/// <param name="managedFolder">The managed folder name/path.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Storage_managedFolders_setIamPolicyAsync(string bucket, string managedFolder, string userProject, Policy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/managedFolders/"+ (managedFolder==null? "" : System.Uri.EscapeDataString(managedFolder))+"/iam&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Policy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Tests a set of permissions on the given managed folder to see which, if any, are held by the caller.
		/// Storage_managedFolders_testIamPermissions b/{bucket}/managedFolders/{managedFolder}/iam/testPermissions
		/// </summary>
		/// <param name="bucket">Name of the bucket containing the managed folder.</param>
		/// <param name="managedFolder">The managed folder name/path.</param>
		/// <param name="permissions">Permissions to test.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Storage_managedFolders_testIamPermissionsAsync(string bucket, string managedFolder, string[] permissions, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/managedFolders/"+ (managedFolder==null? "" : System.Uri.EscapeDataString(managedFolder))+"/iam/testPermissions&"+string.Join("&", permissions.Select(z => $"permissions={System.Uri.EscapeDataString(z.ToString())}"))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TestIamPermissionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a list of notification subscriptions for a given bucket.
		/// Storage_notifications_list b/{bucket}/notificationConfigs
		/// </summary>
		/// <param name="bucket">Name of a Google Cloud Storage bucket.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Notifications> Storage_notifications_listAsync(string bucket, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/notificationConfigs&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Notifications>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a notification subscription for a given bucket.
		/// Storage_notifications_insert b/{bucket}/notificationConfigs
		/// </summary>
		/// <param name="bucket">The parent bucket of the notification.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Notification> Storage_notifications_insertAsync(string bucket, string userProject, Notification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/notificationConfigs&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Notification>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Permanently deletes a notification subscription.
		/// Storage_notifications_delete b/{bucket}/notificationConfigs/{notification}
		/// </summary>
		/// <param name="bucket">The parent bucket of the notification.</param>
		/// <param name="notification">ID of the notification to delete.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task Storage_notifications_deleteAsync(string bucket, string notification, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/notificationConfigs/"+ (notification==null? "" : System.Uri.EscapeDataString(notification))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// View a notification configuration.
		/// Storage_notifications_get b/{bucket}/notificationConfigs/{notification}
		/// </summary>
		/// <param name="bucket">The parent bucket of the notification.</param>
		/// <param name="notification">Notification ID</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Notification> Storage_notifications_getAsync(string bucket, string notification, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/notificationConfigs/"+ (notification==null? "" : System.Uri.EscapeDataString(notification))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Notification>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a list of objects matching the criteria.
		/// Storage_objects_list b/{bucket}/o
		/// </summary>
		/// <param name="bucket">Name of the bucket in which to look for objects.</param>
		/// <param name="delimiter">Returns results in a directory-like mode. items will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose names, aside from the prefix, contain delimiter will have their name, truncated after the delimiter, returned in prefixes. Duplicate prefixes are omitted.</param>
		/// <param name="endOffset">Filter results to objects whose names are lexicographically before endOffset. If startOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive).</param>
		/// <param name="includeFoldersAsPrefixes">Only applicable if delimiter is set to '/'. If true, will also include folders and managed folders (besides objects) in the returned prefixes.</param>
		/// <param name="includeTrailingDelimiter">If true, objects that end in exactly one instance of delimiter will have their metadata included in items in addition to prefixes.</param>
		/// <param name="matchGlob">Filter results to objects and prefixes that match this glob pattern.</param>
		/// <param name="maxResults">Maximum number of items plus prefixes to return in a single page of responses. As duplicate prefixes are omitted, fewer total results may be returned than requested. The service will use this parameter or 1,000 items, whichever is smaller.
		/// Minimum: 0
		// </param>
		/// <param name="pageToken">A previously-returned page token representing part of the larger set of results to view.</param>
		/// <param name="prefix">Filter results to objects whose names begin with this prefix.</param>
		/// <param name="projection">Set of properties to return. Defaults to noAcl.</param>
		/// <param name="softDeleted">If true, only soft-deleted object versions will be listed. The default is false. For more information, see Soft Delete.</param>
		/// <param name="startOffset">Filter results to objects whose names are lexicographically equal to or after startOffset. If endOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive).</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <param name="versions">If true, lists all versions of an object as distinct results. The default is false. For more information, see Object Versioning.</param>
		/// <returns>Successful response</returns>
		public async Task<Objects> Storage_objects_listAsync(string bucket, string delimiter, string endOffset, bool includeFoldersAsPrefixes, bool includeTrailingDelimiter, string matchGlob, int maxResults, string pageToken, string prefix, Storage_buckets_listProjection projection, bool softDeleted, string startOffset, string userProject, bool versions, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o&delimiter=" + (delimiter==null? "" : System.Uri.EscapeDataString(delimiter))+"&endOffset=" + (endOffset==null? "" : System.Uri.EscapeDataString(endOffset))+"&includeFoldersAsPrefixes="+includeFoldersAsPrefixes+"&includeTrailingDelimiter="+includeTrailingDelimiter+"&matchGlob=" + (matchGlob==null? "" : System.Uri.EscapeDataString(matchGlob))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&prefix=" + (prefix==null? "" : System.Uri.EscapeDataString(prefix))+"&projection=" + projection+"&softDeleted="+softDeleted+"&startOffset=" + (startOffset==null? "" : System.Uri.EscapeDataString(startOffset))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject))+"&versions="+versions;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Objects>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Initiates a long-running bulk restore operation on the specified bucket.
		/// Storage_objects_bulkRestore b/{bucket}/o/bulkRestore
		/// </summary>
		/// <param name="bucket">Name of the bucket in which the object resides.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Storage_objects_bulkRestoreAsync(string bucket, BulkRestoreObjectsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/bulkRestore";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningOperation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Watch for changes on all objects in a bucket.
		/// Storage_objects_watchAll b/{bucket}/o/watch
		/// </summary>
		/// <param name="bucket">Name of the bucket in which to look for objects.</param>
		/// <param name="delimiter">Returns results in a directory-like mode. items will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose names, aside from the prefix, contain delimiter will have their name, truncated after the delimiter, returned in prefixes. Duplicate prefixes are omitted.</param>
		/// <param name="endOffset">Filter results to objects whose names are lexicographically before endOffset. If startOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive).</param>
		/// <param name="includeTrailingDelimiter">If true, objects that end in exactly one instance of delimiter will have their metadata included in items in addition to prefixes.</param>
		/// <param name="maxResults">Maximum number of items plus prefixes to return in a single page of responses. As duplicate prefixes are omitted, fewer total results may be returned than requested. The service will use this parameter or 1,000 items, whichever is smaller.
		/// Minimum: 0
		// </param>
		/// <param name="pageToken">A previously-returned page token representing part of the larger set of results to view.</param>
		/// <param name="prefix">Filter results to objects whose names begin with this prefix.</param>
		/// <param name="projection">Set of properties to return. Defaults to noAcl.</param>
		/// <param name="startOffset">Filter results to objects whose names are lexicographically equal to or after startOffset. If endOffset is also set, the objects listed will have names between startOffset (inclusive) and endOffset (exclusive).</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <param name="versions">If true, lists all versions of an object as distinct results. The default is false. For more information, see Object Versioning.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Storage_objects_watchAllAsync(string bucket, string delimiter, string endOffset, bool includeTrailingDelimiter, int maxResults, string pageToken, string prefix, Storage_buckets_listProjection projection, string startOffset, string userProject, bool versions, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/watch&delimiter=" + (delimiter==null? "" : System.Uri.EscapeDataString(delimiter))+"&endOffset=" + (endOffset==null? "" : System.Uri.EscapeDataString(endOffset))+"&includeTrailingDelimiter="+includeTrailingDelimiter+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&prefix=" + (prefix==null? "" : System.Uri.EscapeDataString(prefix))+"&projection=" + projection+"&startOffset=" + (startOffset==null? "" : System.Uri.EscapeDataString(startOffset))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject))+"&versions="+versions;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Channel>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an object and its metadata. Deletions are permanent if versioning is not enabled for the bucket, or if the generation parameter is used.
		/// Storage_objects_delete b/{bucket}/o/{object}
		/// </summary>
		/// <param name="bucket">Name of the bucket in which the object resides.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="generation">If present, permanently deletes a specific revision of this object (as opposed to the latest version, the default).</param>
		/// <param name="ifGenerationMatch">Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.</param>
		/// <param name="ifGenerationNotMatch">Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.</param>
		/// <param name="ifMetagenerationMatch">Makes the operation conditional on whether the object's current metageneration matches the given value.</param>
		/// <param name="ifMetagenerationNotMatch">Makes the operation conditional on whether the object's current metageneration does not match the given value.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task Storage_objects_deleteAsync(string bucket, string _object, string generation, string ifGenerationMatch, string ifGenerationNotMatch, string ifMetagenerationMatch, string ifMetagenerationNotMatch, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&ifGenerationMatch=" + (ifGenerationMatch==null? "" : System.Uri.EscapeDataString(ifGenerationMatch))+"&ifGenerationNotMatch=" + (ifGenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifGenerationNotMatch))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves an object or its metadata.
		/// Storage_objects_get b/{bucket}/o/{object}
		/// </summary>
		/// <param name="bucket">Name of the bucket in which the object resides.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="generation">If present, selects a specific revision of this object (as opposed to the latest version, the default).</param>
		/// <param name="ifGenerationMatch">Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.</param>
		/// <param name="ifGenerationNotMatch">Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.</param>
		/// <param name="ifMetagenerationMatch">Makes the operation conditional on whether the object's current metageneration matches the given value.</param>
		/// <param name="ifMetagenerationNotMatch">Makes the operation conditional on whether the object's current metageneration does not match the given value.</param>
		/// <param name="projection">Set of properties to return. Defaults to noAcl.</param>
		/// <param name="softDeleted">If true, only soft-deleted object versions will be listed. The default is false. For more information, see Soft Delete.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Object> Storage_objects_getAsync(string bucket, string _object, string generation, string ifGenerationMatch, string ifGenerationNotMatch, string ifMetagenerationMatch, string ifMetagenerationNotMatch, Storage_buckets_listProjection projection, bool softDeleted, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&ifGenerationMatch=" + (ifGenerationMatch==null? "" : System.Uri.EscapeDataString(ifGenerationMatch))+"&ifGenerationNotMatch=" + (ifGenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifGenerationNotMatch))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch))+"&projection=" + projection+"&softDeleted="+softDeleted+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Patches an object's metadata.
		/// Storage_objects_patch b/{bucket}/o/{object}
		/// </summary>
		/// <param name="bucket">Name of the bucket in which the object resides.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="generation">If present, selects a specific revision of this object (as opposed to the latest version, the default).</param>
		/// <param name="ifGenerationMatch">Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.</param>
		/// <param name="ifGenerationNotMatch">Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.</param>
		/// <param name="ifMetagenerationMatch">Makes the operation conditional on whether the object's current metageneration matches the given value.</param>
		/// <param name="ifMetagenerationNotMatch">Makes the operation conditional on whether the object's current metageneration does not match the given value.</param>
		/// <param name="overrideUnlockedRetention">Must be true to remove the retention configuration, reduce its unlocked retention period, or change its mode from unlocked to locked.</param>
		/// <param name="predefinedAcl">Apply a predefined set of access controls to this object.</param>
		/// <param name="projection">Set of properties to return. Defaults to full.</param>
		/// <param name="userProject">The project to be billed for this request, for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Object> Storage_objects_patchAsync(string bucket, string _object, string generation, string ifGenerationMatch, string ifGenerationNotMatch, string ifMetagenerationMatch, string ifMetagenerationNotMatch, bool overrideUnlockedRetention, Storage_objects_patchPredefinedAcl predefinedAcl, Storage_buckets_listProjection projection, string userProject, Object requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&ifGenerationMatch=" + (ifGenerationMatch==null? "" : System.Uri.EscapeDataString(ifGenerationMatch))+"&ifGenerationNotMatch=" + (ifGenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifGenerationNotMatch))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch))+"&overrideUnlockedRetention="+overrideUnlockedRetention+"&predefinedAcl=" + predefinedAcl+"&projection=" + projection+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an object's metadata.
		/// Storage_objects_update b/{bucket}/o/{object}
		/// </summary>
		/// <param name="bucket">Name of the bucket in which the object resides.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="generation">If present, selects a specific revision of this object (as opposed to the latest version, the default).</param>
		/// <param name="ifGenerationMatch">Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.</param>
		/// <param name="ifGenerationNotMatch">Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.</param>
		/// <param name="ifMetagenerationMatch">Makes the operation conditional on whether the object's current metageneration matches the given value.</param>
		/// <param name="ifMetagenerationNotMatch">Makes the operation conditional on whether the object's current metageneration does not match the given value.</param>
		/// <param name="overrideUnlockedRetention">Must be true to remove the retention configuration, reduce its unlocked retention period, or change its mode from unlocked to locked.</param>
		/// <param name="predefinedAcl">Apply a predefined set of access controls to this object.</param>
		/// <param name="projection">Set of properties to return. Defaults to full.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Object> Storage_objects_updateAsync(string bucket, string _object, string generation, string ifGenerationMatch, string ifGenerationNotMatch, string ifMetagenerationMatch, string ifMetagenerationNotMatch, bool overrideUnlockedRetention, Storage_objects_updatePredefinedAcl predefinedAcl, Storage_buckets_listProjection projection, string userProject, Object requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&ifGenerationMatch=" + (ifGenerationMatch==null? "" : System.Uri.EscapeDataString(ifGenerationMatch))+"&ifGenerationNotMatch=" + (ifGenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifGenerationNotMatch))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch))+"&overrideUnlockedRetention="+overrideUnlockedRetention+"&predefinedAcl=" + predefinedAcl+"&projection=" + projection+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves ACL entries on the specified object.
		/// Storage_objectAccessControls_list b/{bucket}/o/{object}/acl
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="generation">If present, selects a specific revision of this object (as opposed to the latest version, the default).</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<ObjectAccessControls> Storage_objectAccessControls_listAsync(string bucket, string _object, string generation, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/acl&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ObjectAccessControls>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new ACL entry on the specified object.
		/// Storage_objectAccessControls_insert b/{bucket}/o/{object}/acl
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="generation">If present, selects a specific revision of this object (as opposed to the latest version, the default).</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<ObjectAccessControl> Storage_objectAccessControls_insertAsync(string bucket, string _object, string generation, string userProject, ObjectAccessControl requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/acl&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ObjectAccessControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Permanently deletes the ACL entry for the specified entity on the specified object.
		/// Storage_objectAccessControls_delete b/{bucket}/o/{object}/acl/{entity}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="entity">The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.</param>
		/// <param name="generation">If present, selects a specific revision of this object (as opposed to the latest version, the default).</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task Storage_objectAccessControls_deleteAsync(string bucket, string _object, string entity, string generation, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/acl/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns the ACL entry for the specified entity on the specified object.
		/// Storage_objectAccessControls_get b/{bucket}/o/{object}/acl/{entity}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="entity">The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.</param>
		/// <param name="generation">If present, selects a specific revision of this object (as opposed to the latest version, the default).</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<ObjectAccessControl> Storage_objectAccessControls_getAsync(string bucket, string _object, string entity, string generation, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/acl/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ObjectAccessControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Patches an ACL entry on the specified object.
		/// Storage_objectAccessControls_patch b/{bucket}/o/{object}/acl/{entity}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="entity">The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.</param>
		/// <param name="generation">If present, selects a specific revision of this object (as opposed to the latest version, the default).</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<ObjectAccessControl> Storage_objectAccessControls_patchAsync(string bucket, string _object, string entity, string generation, string userProject, ObjectAccessControl requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/acl/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ObjectAccessControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an ACL entry on the specified object.
		/// Storage_objectAccessControls_update b/{bucket}/o/{object}/acl/{entity}
		/// </summary>
		/// <param name="bucket">Name of a bucket.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="entity">The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.</param>
		/// <param name="generation">If present, selects a specific revision of this object (as opposed to the latest version, the default).</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<ObjectAccessControl> Storage_objectAccessControls_updateAsync(string bucket, string _object, string entity, string generation, string userProject, ObjectAccessControl requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/acl/"+ (entity==null? "" : System.Uri.EscapeDataString(entity))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ObjectAccessControl>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns an IAM policy for the specified object.
		/// Storage_objects_getIamPolicy b/{bucket}/o/{object}/iam
		/// </summary>
		/// <param name="bucket">Name of the bucket in which the object resides.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="generation">If present, selects a specific revision of this object (as opposed to the latest version, the default).</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Storage_objects_getIamPolicyAsync(string bucket, string _object, string generation, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/iam&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Policy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates an IAM policy for the specified object.
		/// Storage_objects_setIamPolicy b/{bucket}/o/{object}/iam
		/// </summary>
		/// <param name="bucket">Name of the bucket in which the object resides.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="generation">If present, selects a specific revision of this object (as opposed to the latest version, the default).</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Storage_objects_setIamPolicyAsync(string bucket, string _object, string generation, string userProject, Policy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/iam&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Policy>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Tests a set of permissions on the given object to see which, if any, are held by the caller.
		/// Storage_objects_testIamPermissions b/{bucket}/o/{object}/iam/testPermissions
		/// </summary>
		/// <param name="bucket">Name of the bucket in which the object resides.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="permissions">Permissions to test.</param>
		/// <param name="generation">If present, selects a specific revision of this object (as opposed to the latest version, the default).</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<TestIamPermissionsResponse> Storage_objects_testIamPermissionsAsync(string bucket, string _object, string[] permissions, string generation, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/iam/testPermissions&"+string.Join("&", permissions.Select(z => $"permissions={System.Uri.EscapeDataString(z.ToString())}"))+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<TestIamPermissionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Restores a soft-deleted object.
		/// Storage_objects_restore b/{bucket}/o/{object}/restore
		/// </summary>
		/// <param name="bucket">Name of the bucket in which the object resides.</param>
		/// <param name="_object">Name of the object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.</param>
		/// <param name="copySourceAcl">If true, copies the source object's ACL; otherwise, uses the bucket's default object ACL. The default is false.</param>
		/// <param name="generation">Selects a specific revision of this object.</param>
		/// <param name="ifGenerationMatch">Makes the operation conditional on whether the object's one live generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.</param>
		/// <param name="ifGenerationNotMatch">Makes the operation conditional on whether none of the object's live generations match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.</param>
		/// <param name="ifMetagenerationMatch">Makes the operation conditional on whether the object's one live metageneration matches the given value.</param>
		/// <param name="ifMetagenerationNotMatch">Makes the operation conditional on whether none of the object's live metagenerations match the given value.</param>
		/// <param name="projection">Set of properties to return. Defaults to full.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Object> Storage_objects_restoreAsync(string bucket, string _object, bool copySourceAcl, string generation, string ifGenerationMatch, string ifGenerationNotMatch, string ifMetagenerationMatch, string ifMetagenerationNotMatch, Storage_buckets_listProjection projection, string userProject, Object requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/o/"+ (_object==null? "" : System.Uri.EscapeDataString(_object))+"/restore&copySourceAcl="+copySourceAcl+"&generation=" + (generation==null? "" : System.Uri.EscapeDataString(generation))+"&ifGenerationMatch=" + (ifGenerationMatch==null? "" : System.Uri.EscapeDataString(ifGenerationMatch))+"&ifGenerationNotMatch=" + (ifGenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifGenerationNotMatch))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch))+"&projection=" + projection+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request.
		/// Storage_buckets_operations_list b/{bucket}/operations
		/// </summary>
		/// <param name="bucket">Name of the bucket in which to look for operations.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">Maximum number of items to return in a single page of responses. Fewer total results may be returned than requested. The service uses this parameter or 100 items, whichever is smaller.
		/// Minimum: 0
		// </param>
		/// <param name="pageToken">A previously-returned page token representing part of the larger set of results to view.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningListOperationsResponse> Storage_buckets_operations_listAsync(string bucket, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningListOperationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation.
		/// Storage_buckets_operations_get b/{bucket}/operations/{operationId}
		/// </summary>
		/// <param name="bucket">The parent bucket of the operation resource.</param>
		/// <param name="operationId">The ID of the operation resource.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleLongrunningOperation> Storage_buckets_operations_getAsync(string bucket, string operationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/operations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GoogleLongrunningOperation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed.
		/// Storage_buckets_operations_cancel b/{bucket}/operations/{operationId}/cancel
		/// </summary>
		/// <param name="bucket">The parent bucket of the operation resource.</param>
		/// <param name="operationId">The ID of the operation resource.</param>
		/// <returns>Successful response</returns>
		public async Task Storage_buckets_operations_cancelAsync(string bucket, string operationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"/operations/"+ (operationId==null? "" : System.Uri.EscapeDataString(operationId))+"/cancel";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Concatenates a list of existing objects into a new object in the same bucket.
		/// Storage_objects_compose b/{destinationBucket}/o/{destinationObject}/compose
		/// </summary>
		/// <param name="destinationBucket">Name of the bucket containing the source objects. The destination object is stored in this bucket.</param>
		/// <param name="destinationObject">Name of the new object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="destinationPredefinedAcl">Apply a predefined set of access controls to the destination object.</param>
		/// <param name="ifGenerationMatch">Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.</param>
		/// <param name="ifMetagenerationMatch">Makes the operation conditional on whether the object's current metageneration matches the given value.</param>
		/// <param name="kmsKeyName">Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any.</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Object> Storage_objects_composeAsync(string destinationBucket, string destinationObject, Storage_objects_composeDestinationPredefinedAcl destinationPredefinedAcl, string ifGenerationMatch, string ifMetagenerationMatch, string kmsKeyName, string userProject, ComposeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (destinationBucket==null? "" : System.Uri.EscapeDataString(destinationBucket))+"/o/"+ (destinationObject==null? "" : System.Uri.EscapeDataString(destinationObject))+"/compose&destinationPredefinedAcl=" + destinationPredefinedAcl+"&ifGenerationMatch=" + (ifGenerationMatch==null? "" : System.Uri.EscapeDataString(ifGenerationMatch))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&kmsKeyName=" + (kmsKeyName==null? "" : System.Uri.EscapeDataString(kmsKeyName))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Copies a source object to a destination object. Optionally overrides metadata.
		/// Storage_objects_copy b/{sourceBucket}/o/{sourceObject}/copyTo/b/{destinationBucket}/o/{destinationObject}
		/// </summary>
		/// <param name="sourceBucket">Name of the bucket in which to find the source object.</param>
		/// <param name="sourceObject">Name of the source object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="destinationBucket">Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any.For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="destinationObject">Name of the new object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any.</param>
		/// <param name="destinationKmsKeyName">Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any.</param>
		/// <param name="destinationPredefinedAcl">Apply a predefined set of access controls to the destination object.</param>
		/// <param name="ifGenerationMatch">Makes the operation conditional on whether the destination object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.</param>
		/// <param name="ifGenerationNotMatch">Makes the operation conditional on whether the destination object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.</param>
		/// <param name="ifMetagenerationMatch">Makes the operation conditional on whether the destination object's current metageneration matches the given value.</param>
		/// <param name="ifMetagenerationNotMatch">Makes the operation conditional on whether the destination object's current metageneration does not match the given value.</param>
		/// <param name="ifSourceGenerationMatch">Makes the operation conditional on whether the source object's current generation matches the given value.</param>
		/// <param name="ifSourceGenerationNotMatch">Makes the operation conditional on whether the source object's current generation does not match the given value.</param>
		/// <param name="ifSourceMetagenerationMatch">Makes the operation conditional on whether the source object's current metageneration matches the given value.</param>
		/// <param name="ifSourceMetagenerationNotMatch">Makes the operation conditional on whether the source object's current metageneration does not match the given value.</param>
		/// <param name="projection">Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full.</param>
		/// <param name="sourceGeneration">If present, selects a specific revision of the source object (as opposed to the latest version, the default).</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<Object> Storage_objects_copyAsync(
					string sourceBucket, 
					string sourceObject, 
					string destinationBucket, 
					string destinationObject, 
					string destinationKmsKeyName, 
					Storage_objects_copyDestinationPredefinedAcl destinationPredefinedAcl, 
					string ifGenerationMatch, 
					string ifGenerationNotMatch, 
					string ifMetagenerationMatch, 
					string ifMetagenerationNotMatch, 
					string ifSourceGenerationMatch, 
					string ifSourceGenerationNotMatch, 
					string ifSourceMetagenerationMatch, 
					string ifSourceMetagenerationNotMatch, 
					Storage_buckets_listProjection projection, 
					string sourceGeneration, 
					string userProject, 
					Object requestBody, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (sourceBucket==null? "" : System.Uri.EscapeDataString(sourceBucket))+"/o/"+ (sourceObject==null? "" : System.Uri.EscapeDataString(sourceObject))+"/copyTo/b/"+ (destinationBucket==null? "" : System.Uri.EscapeDataString(destinationBucket))+"/o/"+ (destinationObject==null? "" : System.Uri.EscapeDataString(destinationObject))+"&destinationKmsKeyName=" + (destinationKmsKeyName==null? "" : System.Uri.EscapeDataString(destinationKmsKeyName))+"&destinationPredefinedAcl=" + destinationPredefinedAcl+"&ifGenerationMatch=" + (ifGenerationMatch==null? "" : System.Uri.EscapeDataString(ifGenerationMatch))+"&ifGenerationNotMatch=" + (ifGenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifGenerationNotMatch))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch))+"&ifSourceGenerationMatch=" + (ifSourceGenerationMatch==null? "" : System.Uri.EscapeDataString(ifSourceGenerationMatch))+"&ifSourceGenerationNotMatch=" + (ifSourceGenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifSourceGenerationNotMatch))+"&ifSourceMetagenerationMatch=" + (ifSourceMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifSourceMetagenerationMatch))+"&ifSourceMetagenerationNotMatch=" + (ifSourceMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifSourceMetagenerationNotMatch))+"&projection=" + projection+"&sourceGeneration=" + (sourceGeneration==null? "" : System.Uri.EscapeDataString(sourceGeneration))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Object>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Rewrites a source object to a destination object. Optionally overrides metadata.
		/// Storage_objects_rewrite b/{sourceBucket}/o/{sourceObject}/rewriteTo/b/{destinationBucket}/o/{destinationObject}
		/// </summary>
		/// <param name="sourceBucket">Name of the bucket in which to find the source object.</param>
		/// <param name="sourceObject">Name of the source object. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="destinationBucket">Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any.</param>
		/// <param name="destinationObject">Name of the new object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any. For information about how to URL encode object names to be path safe, see [Encoding URI Path Parts](https://cloud.google.com/storage/docs/request-endpoints#encoding).</param>
		/// <param name="destinationKmsKeyName">Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any.</param>
		/// <param name="destinationPredefinedAcl">Apply a predefined set of access controls to the destination object.</param>
		/// <param name="ifGenerationMatch">Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.</param>
		/// <param name="ifGenerationNotMatch">Makes the operation conditional on whether the object's current generation does not match the given value. If no live object exists, the precondition fails. Setting to 0 makes the operation succeed only if there is a live version of the object.</param>
		/// <param name="ifMetagenerationMatch">Makes the operation conditional on whether the destination object's current metageneration matches the given value.</param>
		/// <param name="ifMetagenerationNotMatch">Makes the operation conditional on whether the destination object's current metageneration does not match the given value.</param>
		/// <param name="ifSourceGenerationMatch">Makes the operation conditional on whether the source object's current generation matches the given value.</param>
		/// <param name="ifSourceGenerationNotMatch">Makes the operation conditional on whether the source object's current generation does not match the given value.</param>
		/// <param name="ifSourceMetagenerationMatch">Makes the operation conditional on whether the source object's current metageneration matches the given value.</param>
		/// <param name="ifSourceMetagenerationNotMatch">Makes the operation conditional on whether the source object's current metageneration does not match the given value.</param>
		/// <param name="maxBytesRewrittenPerCall">The maximum number of bytes that will be rewritten per rewrite request. Most callers shouldn't need to specify this parameter - it is primarily in place to support testing. If specified the value must be an integral multiple of 1 MiB (1048576). Also, this only applies to requests where the source and destination span locations and/or storage classes. Finally, this value must not change across rewrite calls else you'll get an error that the rewriteToken is invalid.</param>
		/// <param name="projection">Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full.</param>
		/// <param name="rewriteToken">Include this field (from the previous rewrite response) on each rewrite request after the first one, until the rewrite response 'done' flag is true. Calls that provide a rewriteToken can omit all other request fields, but if included those fields must match the values provided in the first rewrite request.</param>
		/// <param name="sourceGeneration">If present, selects a specific revision of the source object (as opposed to the latest version, the default).</param>
		/// <param name="userProject">The project to be billed for this request. Required for Requester Pays buckets.</param>
		/// <returns>Successful response</returns>
		public async Task<RewriteResponse> Storage_objects_rewriteAsync(
					string sourceBucket, 
					string sourceObject, 
					string destinationBucket, 
					string destinationObject, 
					string destinationKmsKeyName, 
					Storage_objects_rewriteDestinationPredefinedAcl destinationPredefinedAcl, 
					string ifGenerationMatch, 
					string ifGenerationNotMatch, 
					string ifMetagenerationMatch, 
					string ifMetagenerationNotMatch, 
					string ifSourceGenerationMatch, 
					string ifSourceGenerationNotMatch, 
					string ifSourceMetagenerationMatch, 
					string ifSourceMetagenerationNotMatch, 
					string maxBytesRewrittenPerCall, 
					Storage_buckets_listProjection projection, 
					string rewriteToken, 
					string sourceGeneration, 
					string userProject, 
					Object requestBody, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "b/"+ (sourceBucket==null? "" : System.Uri.EscapeDataString(sourceBucket))+"/o/"+ (sourceObject==null? "" : System.Uri.EscapeDataString(sourceObject))+"/rewriteTo/b/"+ (destinationBucket==null? "" : System.Uri.EscapeDataString(destinationBucket))+"/o/"+ (destinationObject==null? "" : System.Uri.EscapeDataString(destinationObject))+"&destinationKmsKeyName=" + (destinationKmsKeyName==null? "" : System.Uri.EscapeDataString(destinationKmsKeyName))+"&destinationPredefinedAcl=" + destinationPredefinedAcl+"&ifGenerationMatch=" + (ifGenerationMatch==null? "" : System.Uri.EscapeDataString(ifGenerationMatch))+"&ifGenerationNotMatch=" + (ifGenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifGenerationNotMatch))+"&ifMetagenerationMatch=" + (ifMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationMatch))+"&ifMetagenerationNotMatch=" + (ifMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifMetagenerationNotMatch))+"&ifSourceGenerationMatch=" + (ifSourceGenerationMatch==null? "" : System.Uri.EscapeDataString(ifSourceGenerationMatch))+"&ifSourceGenerationNotMatch=" + (ifSourceGenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifSourceGenerationNotMatch))+"&ifSourceMetagenerationMatch=" + (ifSourceMetagenerationMatch==null? "" : System.Uri.EscapeDataString(ifSourceMetagenerationMatch))+"&ifSourceMetagenerationNotMatch=" + (ifSourceMetagenerationNotMatch==null? "" : System.Uri.EscapeDataString(ifSourceMetagenerationNotMatch))+"&maxBytesRewrittenPerCall=" + (maxBytesRewrittenPerCall==null? "" : System.Uri.EscapeDataString(maxBytesRewrittenPerCall))+"&projection=" + projection+"&rewriteToken=" + (rewriteToken==null? "" : System.Uri.EscapeDataString(rewriteToken))+"&sourceGeneration=" + (sourceGeneration==null? "" : System.Uri.EscapeDataString(sourceGeneration))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RewriteResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Stop watching resources through this channel
		/// Storage_channels_stop channels/stop
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task Storage_channels_stopAsync(Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "channels/stop";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves a list of HMAC keys matching the criteria.
		/// Storage_projects_hmacKeys_list projects/{projectId}/hmacKeys
		/// </summary>
		/// <param name="projectId">Name of the project in which to look for HMAC keys.</param>
		/// <param name="maxResults">Maximum number of items to return in a single page of responses. The service uses this parameter or 250 items, whichever is smaller. The max number of items per page will also be limited by the number of distinct service accounts in the response. If the number of service accounts in a single response is too high, the page will truncated and a next page token will be returned.
		/// Minimum: 0
		// </param>
		/// <param name="pageToken">A previously-returned page token representing part of the larger set of results to view.</param>
		/// <param name="serviceAccountEmail">If present, only keys for the given service account are returned.</param>
		/// <param name="showDeletedKeys">Whether or not to show keys in the DELETED state.</param>
		/// <param name="userProject">The project to be billed for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<HmacKeysMetadata> Storage_projects_hmacKeys_listAsync(string projectId, int maxResults, string pageToken, string serviceAccountEmail, bool showDeletedKeys, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/hmacKeys&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&serviceAccountEmail=" + (serviceAccountEmail==null? "" : System.Uri.EscapeDataString(serviceAccountEmail))+"&showDeletedKeys="+showDeletedKeys+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HmacKeysMetadata>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a new HMAC key for the specified service account.
		/// Storage_projects_hmacKeys_create projects/{projectId}/hmacKeys
		/// </summary>
		/// <param name="projectId">Project ID owning the service account.</param>
		/// <param name="serviceAccountEmail">Email address of the service account.</param>
		/// <param name="userProject">The project to be billed for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<HmacKey> Storage_projects_hmacKeys_createAsync(string projectId, string serviceAccountEmail, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/hmacKeys&serviceAccountEmail=" + (serviceAccountEmail==null? "" : System.Uri.EscapeDataString(serviceAccountEmail))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HmacKey>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes an HMAC key.
		/// Storage_projects_hmacKeys_delete projects/{projectId}/hmacKeys/{accessId}
		/// </summary>
		/// <param name="projectId">Project ID owning the requested key</param>
		/// <param name="accessId">Name of the HMAC key to be deleted.</param>
		/// <param name="userProject">The project to be billed for this request.</param>
		/// <returns>Successful response</returns>
		public async Task Storage_projects_hmacKeys_deleteAsync(string projectId, string accessId, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/hmacKeys/"+ (accessId==null? "" : System.Uri.EscapeDataString(accessId))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Retrieves an HMAC key's metadata
		/// Storage_projects_hmacKeys_get projects/{projectId}/hmacKeys/{accessId}
		/// </summary>
		/// <param name="projectId">Project ID owning the service account of the requested key.</param>
		/// <param name="accessId">Name of the HMAC key.</param>
		/// <param name="userProject">The project to be billed for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<HmacKeyMetadata> Storage_projects_hmacKeys_getAsync(string projectId, string accessId, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/hmacKeys/"+ (accessId==null? "" : System.Uri.EscapeDataString(accessId))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HmacKeyMetadata>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.
		/// Storage_projects_hmacKeys_update projects/{projectId}/hmacKeys/{accessId}
		/// </summary>
		/// <param name="projectId">Project ID owning the service account of the updated key.</param>
		/// <param name="accessId">Name of the HMAC key being updated.</param>
		/// <param name="userProject">The project to be billed for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<HmacKeyMetadata> Storage_projects_hmacKeys_updateAsync(string projectId, string accessId, string userProject, HmacKeyMetadata requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/hmacKeys/"+ (accessId==null? "" : System.Uri.EscapeDataString(accessId))+"&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<HmacKeyMetadata>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get the email address of this project's Google Cloud Storage service account.
		/// Storage_projects_serviceAccount_get projects/{projectId}/serviceAccount
		/// </summary>
		/// <param name="projectId">Project ID</param>
		/// <param name="userProject">The project to be billed for this request.</param>
		/// <returns>Successful response</returns>
		public async Task<ServiceAccount> Storage_projects_serviceAccount_getAsync(string projectId, string userProject, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/serviceAccount&userProject=" + (userProject==null? "" : System.Uri.EscapeDataString(userProject));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ServiceAccount>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public enum Storage_buckets_listProjection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		full = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		noAcl = 1,
	}
	
	public enum Storage_buckets_insertPredefinedAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticatedRead = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projectPrivate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicRead = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicReadWrite = 4,
	}
	
	public enum Storage_buckets_insertPredefinedDefaultObjectAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticatedRead = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerFullControl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerRead = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projectPrivate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicRead = 5,
	}
	
	public enum Storage_buckets_patchPredefinedAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticatedRead = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projectPrivate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicRead = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicReadWrite = 4,
	}
	
	public enum Storage_buckets_patchPredefinedDefaultObjectAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticatedRead = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerFullControl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerRead = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projectPrivate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicRead = 5,
	}
	
	public enum Storage_buckets_updatePredefinedAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticatedRead = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projectPrivate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicRead = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicReadWrite = 4,
	}
	
	public enum Storage_buckets_updatePredefinedDefaultObjectAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticatedRead = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerFullControl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerRead = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projectPrivate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicRead = 5,
	}
	
	public enum Storage_objects_insertPredefinedAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticatedRead = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerFullControl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerRead = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projectPrivate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicRead = 5,
	}
	
	public enum Storage_objects_patchPredefinedAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticatedRead = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerFullControl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerRead = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projectPrivate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicRead = 5,
	}
	
	public enum Storage_objects_updatePredefinedAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticatedRead = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerFullControl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerRead = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projectPrivate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicRead = 5,
	}
	
	public enum Storage_objects_composeDestinationPredefinedAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticatedRead = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerFullControl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerRead = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projectPrivate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicRead = 5,
	}
	
	public enum Storage_objects_copyDestinationPredefinedAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticatedRead = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerFullControl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerRead = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projectPrivate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicRead = 5,
	}
	
	public enum Storage_objects_rewriteDestinationPredefinedAcl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authenticatedRead = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerFullControl = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bucketOwnerRead = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		projectPrivate = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		publicRead = 5,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
