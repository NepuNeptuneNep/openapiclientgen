//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptedPaymentV3
	{
		
		/// <summary>
		/// The amount of the payment in minor units
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyType")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string CurrencyType { get; set; }
		
		/// <summary>
		/// <p>Any value here will override the memo value in the parent payout</p>
		///<p>This should be the reference field on the statement seen by the payee (but not via ACH)</p>
		///
		/// Max length: 40
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentMemo")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PaymentMemo { get; set; }
		
		/// <summary>
		/// <p>Metadata about the payment that may be relevant to the specific rails or remote system making the payout</p>
		///<p>The structure of the data will be dictated by the requirements of the payment rails</p>
		///
		/// Max length: 512
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentMetadata")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string PaymentMetadata { get; set; }
		
		/// <summary>
		/// A reference identifier for the payor for the given payee payment
		/// Required
		/// Max length: 40
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorPaymentId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PayorPaymentId { get; set; }
		
		/// <summary>
		/// Indicates the 3rd party system involved in making this payment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="railsId")]
		public string RailsId { get; set; }
		
		/// <summary>
		/// Your identifier for the payee
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteId { get; set; }
		
		/// <summary>
		/// <p>The identifier for the remote payments system if not Velo</p>
		///
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteSystemId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteSystemId { get; set; }
		
		/// <summary>
		/// The identifier of the source account to debit the payment from
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceAccountName")]
		public string SourceAccountName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessTokenResponse
	{
		
		/// <summary>
		/// Bearer token used in headers to access secure endpoints
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		/// <summary>
		/// If the user is a payee then the payeeId<P>
		///If the user is a payor then the payorId
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityIds")]
		public string[] EntityIds { get; set; }
		
		/// <summary>
		/// The lifetime in seconds of the access token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public System.Nullable<System.Int32> Expires_in { get; set; }
		
		/// <summary>
		/// can be used to obtain a new access token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
		
		/// <summary>
		/// the scope of the access token
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// the type of the token
		/// </summary>
		[System.ComponentModel.DefaultValue("bearer")]
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public string Token_type { get; set; } = "bearer";
		
		[System.Runtime.Serialization.DataMember(Name="user_info")]
		public UserInfo User_info { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="mfa_details")]
		public MFADetails Mfa_details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userType")]
		public System.Nullable<UserInfoUserType> UserType { get; set; }
		
		/// <summary>
		/// the id of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MFADetails
	{
		
		/// <summary>
		/// The type of the MFA device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mfa_type")]
		public System.Nullable<MFADetailsMfa_type> Mfa_type { get; set; }
		
		/// <summary>
		/// true if the user has used the MFA device for login
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public System.Nullable<System.Boolean> Verified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MFADetailsMfa_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YUBIKEY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserInfoUserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKOFFICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYEE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessTokenValidationRequest
	{
		
		/// <summary>
		/// an OTP either sent via sms or generated by a registered MFA device
		/// Required
		/// Max length: 64
		/// Min length: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="otp")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Otp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityIds")]
		public string[] EntityIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expires_in")]
		public System.Nullable<System.Double> Expires_in { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refresh_token")]
		public string Refresh_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token_type")]
		public string Token_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoTopUpConfigV2
	{
		
		/// <summary>
		/// Is auto top-up enabled? automatically trigger funding to top-up the source account balance when the balance falls below the configured minimum level.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// When the payor balance falls below this level then auto top-up will be triggered. Note - This is in minor units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minBalance")]
		public System.Nullable<System.Int64> MinBalance { get; set; }
		
		/// <summary>
		/// When the payor balance falls below the min balance then auto top-up will request funds bring the balance to this level. Note - this is in minor units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetBalance")]
		public System.Nullable<System.Int64> TargetBalance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoTopUpConfigV3
	{
		
		/// <summary>
		/// Is auto top-up enabled? automatically trigger funding to top-up the source account balance when the balance falls below the configured minimum level.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// Id of funding account from which to pull funds when auto top-up is triggered.  Note - if this is not set then auto top-up is effectively disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fundingAccountId")]
		public string FundingAccountId { get; set; }
		
		/// <summary>
		/// When the payor balance falls below this level then auto top-up will be triggered. Note - This is in minor units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minBalance")]
		public System.Nullable<System.Int64> MinBalance { get; set; }
		
		/// <summary>
		/// When the payor balance falls below the min balance then auto top-up will request funds bring the balance to this level. Note - this is in minor units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetBalance")]
		public System.Nullable<System.Int64> TargetBalance { get; set; }
	}
	
	/// <summary>
	/// The notification category.  One of "payment", "payee", "debit".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Category
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		payment = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		payee = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		debit = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChallengeV3
	{
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 20
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>Used to override the default challenge presented to the payee when they onboard</p>
	///<p>Not used after the payee has onboarded</p>
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChallengeV4
	{
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Description { get; set; }
		
		/// <summary>
		/// The value that the user will be asked to verify when they onboard
		/// Required
		/// Max length: 20
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyV3
	{
		
		/// <summary>
		/// Required
		/// Max length: 40
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string OperatingName { get; set; }
		
		/// <summary>
		/// Company Tax Id must be between 6 and 30 characters long
		/// Max length: 30
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxId")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string TaxId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CompanyV4
	{
		
		/// <summary>
		/// Required
		/// Max length: 40
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string OperatingName { get; set; }
		
		/// <summary>
		/// Company Tax Id must be between 6 and 30 characters long
		/// Max length: 30
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxId")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string TaxId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateFundingAccountRequestV2
	{
		
		/// <summary>
		/// Required if type is either FBO or PRIVATE
		/// Max length: 22
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(22)]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Required if type is either FBO or PRIVATE
		/// Max length: 17
		/// Min length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code, Required if type is either WUBS_DECOUPLED or PRIVATE
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 30
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// Required if type is either FBO or PRIVATE
		/// Max length: 9
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string RoutingNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CreateFundingAccountRequestV2Type Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CreateFundingAccountRequestV2Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FBO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WUBS_DECOUPLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateIndividualV3
	{
		
		/// <summary>
		/// Must not be date in future. Example - 1970-05-20
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dateOfBirth")]
		public System.DateOnly DateOfBirth { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public CreateIndividualV3_name Name { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nationalIdentification")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string NationalIdentification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateIndividualV3_name
	{
		
		/// <summary>
		/// Required
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherNames")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string OtherNames { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateIndividualV4
	{
		
		/// <summary>
		/// Must not be date in future. Example - 1970-05-20
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dateOfBirth")]
		public System.DateOnly DateOfBirth { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public CreateIndividualV3_name Name { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nationalIdentification")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string NationalIdentification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePayeeAddressV3
	{
		
		/// <summary>
		/// Required
		/// Max length: 50
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string City { get; set; }
		
		/// <summary>
		/// 2 letter ISO 3166-1 country code
		/// Required
		/// Max length: 2
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Country { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countyOrProvince")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string CountyOrProvince { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line3")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Line3 { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line4")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Line4 { get; set; }
		
		/// <summary>
		/// Max length: 60
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zipOrPostcode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string ZipOrPostcode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePayeeAddressV4
	{
		
		/// <summary>
		/// Required
		/// Max length: 50
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string City { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string Country { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countyOrProvince")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string CountyOrProvince { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line3")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Line3 { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line4")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Line4 { get; set; }
		
		/// <summary>
		/// Max length: 60
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zipOrPostcode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string ZipOrPostcode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePayeeV3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public CreatePayeeAddressV3 Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="challenge")]
		public ChallengeV3 Challenge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public CompanyV3 Company { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public CreateIndividualV3 Individual { get; set; }
		
		/// <summary>
		/// An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
		///See the /v1/supportedLanguages endpoint to list the available codes for an environment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannel")]
		public CreatePaymentChannelV3 PaymentChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorRefs")]
		public PayeePayorRefV3[] PayorRefs { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteId { get; set; }
		
		/// <summary>
		/// Type of Payee. One of the following values: Individual, Company
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePaymentChannelV3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Either routing number and account number or only iban must be set
		/// Max length: 17
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Must match the regular expression ```^[A-Za-z0-9]+$```.
		/// Max length: 34
		/// Min length: 15
		/// Pattern: ^[A-Za-z0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iban")]
		[System.ComponentModel.DataAnnotations.MinLength(15)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9]+$")]
		public string Iban { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannelName")]
		public string PaymentChannelName { get; set; }
		
		/// <summary>
		/// Either routing number and account number or only iban must be set
		/// Max length: 9
		/// Min length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string RoutingNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeePayorRefV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="invitationStatus")]
		public string InvitationStatus { get; set; }
		
		/// <summary>
		/// The timestamp when the invitation status is updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitationStatusTimestamp")]
		public System.Nullable<System.DateTimeOffset> InvitationStatusTimestamp { get; set; }
		
		/// <summary>
		/// Indicates any conditions which prevent the payee from being payable for this payor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payableIssues")]
		public PayableIssueV3[] PayableIssues { get; set; }
		
		/// <summary>
		/// Indicates if the payee is payable for this payor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payableStatus")]
		public System.Nullable<System.Boolean> PayableStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannelId")]
		public string PaymentChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		public string RemoteId { get; set; }
	}
	
	/// <summary>
	/// payable issues for the payee and payor combination
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayableIssueV3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePayeeV4
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public CreatePayeeAddressV4 Address { get; set; }
		
		/// <summary>
		/// <p>Used to override the default challenge presented to the payee when they onboard</p>
		///<p>Not used after the payee has onboarded</p>
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challenge")]
		public ChallengeV4 Challenge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public CompanyV4 Company { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public CreateIndividualV4 Individual { get; set; }
		
		/// <summary>
		/// An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
		///See the /v1/supportedLanguages endpoint to list the available codes for an environment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannel")]
		public CreatePaymentChannelV4 PaymentChannel { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteId { get; set; }
		
		/// <summary>
		/// The type of the payee
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CreatePayeeV4Type Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePaymentChannelV4
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Either routing number and account number or only iban must be set
		/// Max length: 17
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Must match the regular expression ```^[A-Za-z0-9]+$```.
		/// Max length: 34
		/// Min length: 15
		/// Pattern: ^[A-Za-z0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iban")]
		[System.ComponentModel.DataAnnotations.MinLength(15)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9]+$")]
		public string Iban { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannelName")]
		public string PaymentChannelName { get; set; }
		
		/// <summary>
		/// Either routing number and account number or only iban must be set
		/// Max length: 9
		/// Min length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string RoutingNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CreatePayeeV4Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Individual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Company = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePayeesCSVRequestV3
	{
		
		/// <summary>
		/// Required
		/// Max length: 50
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressCity")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string AddressCity { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressCountry")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string AddressCountry { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressCountyOrProvince")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string AddressCountyOrProvince { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLine3")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AddressLine3 { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLine4")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AddressLine4 { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 60
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressZipOrPostcode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string AddressZipOrPostcode { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challengeDescription")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ChallengeDescription { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challengeValue")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string ChallengeValue { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyEIN")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string CompanyEIN { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyOperatingName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string CompanyOperatingName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Email { get; set; }
		
		/// <summary>
		/// Must not be date in future. Example - 1970-05-20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualDateOfBirth")]
		public System.Nullable<System.DateOnly> IndividualDateOfBirth { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualFirstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string IndividualFirstName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualLastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string IndividualLastName { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualNationalIdentification")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string IndividualNationalIdentification { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualOtherNames")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string IndividualOtherNames { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualTitle")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string IndividualTitle { get; set; }
		
		/// <summary>
		/// An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
		///See the /v1/supportedLanguages endpoint to list the available codes for an environment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeLanguage")]
		public string PayeeLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannelAccountName")]
		public string PaymentChannelAccountName { get; set; }
		
		/// <summary>
		/// Either routing number and account number or only iban must be set
		/// Max length: 17
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentChannelAccountNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string PaymentChannelAccountNumber { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentChannelCountryCode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string PaymentChannelCountryCode { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentChannelCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string PaymentChannelCurrency { get; set; }
		
		/// <summary>
		/// Must match the regular expression ```^[A-Za-z0-9]+$```.
		/// Max length: 34
		/// Min length: 15
		/// Pattern: ^[A-Za-z0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentChannelIban")]
		[System.ComponentModel.DataAnnotations.MinLength(15)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9]+$")]
		public string PaymentChannelIban { get; set; }
		
		/// <summary>
		/// Either routing number and account number or only iban must be set
		/// Max length: 9
		/// Min length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentChannelRoutingNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string PaymentChannelRoutingNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteId { get; set; }
		
		/// <summary>
		/// The type of the payee
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CreatePayeeV4Type Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePayeesCSVRequestV4
	{
		
		/// <summary>
		/// Required
		/// Max length: 50
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressCity")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string AddressCity { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressCountry")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string AddressCountry { get; set; }
		
		/// <summary>
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressCountyOrProvince")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string AddressCountyOrProvince { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AddressLine1 { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AddressLine2 { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLine3")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AddressLine3 { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressLine4")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AddressLine4 { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 60
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="addressZipOrPostcode")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string AddressZipOrPostcode { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challengeDescription")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string ChallengeDescription { get; set; }
		
		/// <summary>
		/// Max length: 20
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challengeValue")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string ChallengeValue { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyEIN")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string CompanyEIN { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyOperatingName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string CompanyOperatingName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Email { get; set; }
		
		/// <summary>
		/// Must not be date in future. Example - 1970-05-20
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualDateOfBirth")]
		public System.Nullable<System.DateOnly> IndividualDateOfBirth { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualFirstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string IndividualFirstName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualLastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string IndividualLastName { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualNationalIdentification")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string IndividualNationalIdentification { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualOtherNames")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string IndividualOtherNames { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualTitle")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string IndividualTitle { get; set; }
		
		/// <summary>
		/// An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
		///See the /v1/supportedLanguages endpoint to list the available codes for an environment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeLanguage")]
		public string PayeeLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannelAccountName")]
		public string PaymentChannelAccountName { get; set; }
		
		/// <summary>
		/// Either routing number and account number or only iban must be set
		/// Max length: 17
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentChannelAccountNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string PaymentChannelAccountNumber { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentChannelCountryCode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string PaymentChannelCountryCode { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentChannelCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string PaymentChannelCurrency { get; set; }
		
		/// <summary>
		/// Must match the regular expression ```^[A-Za-z0-9]+$```.
		/// Max length: 34
		/// Min length: 15
		/// Pattern: ^[A-Za-z0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentChannelIban")]
		[System.ComponentModel.DataAnnotations.MinLength(15)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9]+$")]
		public string PaymentChannelIban { get; set; }
		
		/// <summary>
		/// Either routing number and account number or only iban must be set
		/// Max length: 9
		/// Min length: 9
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentChannelRoutingNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(9)]
		[System.ComponentModel.DataAnnotations.MaxLength(9)]
		public string PaymentChannelRoutingNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteId { get; set; }
		
		/// <summary>
		/// The type of the payee
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CreatePayeeV4Type Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePayeesCSVResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public string BatchId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectedCsvRows")]
		public CreatePayeesCSVResponseV3_rejectedCsvRows[] RejectedCsvRows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePayeesCSVResponseV3_rejectedCsvRows
	{
		
		[System.Runtime.Serialization.DataMember(Name="lineNumber")]
		public System.Nullable<System.Int32> LineNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectedContent")]
		public string RejectedContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePayeesCSVResponseV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="batchId")]
		public string BatchId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectedCsvRows")]
		public CreatePayeesCSVResponseV3_rejectedCsvRows[] RejectedCsvRows { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePayeesRequestV3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payees")]
		public CreatePayeeV3[] Payees { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePayeesRequestV4
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payees")]
		public CreatePayeeV4[] Payees { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePayorLinkRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fromPayorId")]
		public string FromPayorId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkType")]
		public CreatePayorLinkRequestLinkType LinkType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="toPayorId")]
		public string ToPayorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CreatePayorLinkRequestLinkType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARENT_OF = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePayoutRequestV3
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// Maximum items: 2000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payments")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public PaymentInstructionV3[] Payments { get; set; }
		
		/// <summary>
		/// <p>The id of the payor whose source account(s) will be debited</p>
		///<p>payoutFromPayorId and payoutToPayorId must be both supplied or both omitted</p>
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutFromPayorId")]
		public string PayoutFromPayorId { get; set; }
		
		/// <summary>
		/// <p>Text applied to all payment memos unless specified explicitly on a payment</p>
		///<p>This should be the reference field on the statement seen by the payee (but not via ACH)</p>
		///
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutMemo")]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PayoutMemo { get; set; }
		
		/// <summary>
		/// <p>The id of the payor whose payees will be paid</p>
		///<p>payoutFromPayorId and payoutToPayorId must be both supplied or both omitted</p>
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutToPayorId")]
		public string PayoutToPayorId { get; set; }
	}
	
	/// <summary>
	/// Instruction for creating a payment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentInstructionV3
	{
		
		/// <summary>
		/// <p>Amount to send to Payee</p>
		///<p>The maximum payment amount is dependent on the currency</p>
		///
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int64.MaxValue)]
		public long Amount { get; set; }
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// <p>Any value here will override the memo value in the parent payout</p>
		///<p>This should be the reference field on the statement seen by the payee (but not via ACH)</p>
		///
		/// Max length: 40
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentMemo")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PaymentMemo { get; set; }
		
		/// <summary>
		/// <p>Metadata about the payment that may be relevant to the specific rails or remote system making the payout</p>
		///<p>The structure of the data will be dictated by the requirements of the payment rails</p>
		///
		/// Max length: 512
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentMetadata")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string PaymentMetadata { get; set; }
		
		/// <summary>
		/// A reference identifier for the payor for the given payee payment
		/// Max length: 40
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payorPaymentId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PayorPaymentId { get; set; }
		
		/// <summary>
		/// Your identifier for the payee
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteId { get; set; }
		
		/// <summary>
		/// <p>The identifier for the remote payments system if not Velo</p>
		///<p>Should only be used after consultation with Velo Payments</p>
		///
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteSystemId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteSystemId { get; set; }
		
		/// <summary>
		/// Must match a valid source account name belonging to the payor
		/// Required
		/// Max length: 64
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceAccountName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string SourceAccountName { get; set; }
		
		/// <summary>
		/// Optionally choose a specific transmission method for the payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transmissionType")]
		public System.Nullable<PaymentInstructionV3TransmissionType> TransmissionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PaymentInstructionV3TransmissionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAME_DAY_ACH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WIRE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWIFT = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWebhookRequest
	{
		
		/// <summary>
		/// the authorization header to include with the notification.
		/// Max length: 1000
		/// Min length: 4
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationHeader")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string AuthorizationHeader { get; set; }
		
		/// <summary>
		/// the categories to enable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// whether the webhook is enabled.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public bool Enabled { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// the webhook URL to use.
		/// Required
		/// Max length: 2000
		/// Min length: 6
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string WebhookUrl { get; set; }
	}
	
	/// <summary>
	/// Base type for all Debit Events
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DebitEvent : SourceEvent
	{
		
		/// <summary>
		/// ID of this debit transaction within the Velo platform
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debitTransactionId")]
		public string DebitTransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DebitEvent_allOf
	{
		
		/// <summary>
		/// ID of this debit transaction within the Velo platform
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="debitTransactionId")]
		public string DebitTransactionId { get; set; }
	}
	
	/// <summary>
	/// Base type for all debit status changed events
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DebitStatusChanged : DebitEvent
	{
		
		/// <summary>
		/// The new status of the debit. One of "PENDING" "PROCESSING" "REJECTED" "RELEASED"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DebitStatusChanged_allOf
	{
		
		/// <summary>
		/// The new status of the debit. One of "PENDING" "PROCESSING" "REJECTED" "RELEASED"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// Unique numeric code that can be used for switching client behavior or to drive translated or customised error messages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorData")]
		public ErrorData ErrorData { get; set; }
		
		/// <summary>
		/// English language message indicating the nature of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localisationDetails")]
		public LocalisationDetails LocalisationDetails { get; set; }
		
		/// <summary>
		/// the property or object that caused the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// the location type in the request that was the cause of the error
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationType")]
		public System.Nullable<ErrorLocationType> LocationType { get; set; }
		
		/// <summary>
		/// a camel-cased string that can be used by clients to localise client error messages (deprecated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorData
	{
		
		/// <summary>
		/// Object containing typed error data specific to the API
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The description of the error data content
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocalisationDetails
	{
		
		/// <summary>
		/// name to value map containing any named parameters that appear in the message template
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
		
		/// <summary>
		/// the English language message template used to construct the error message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ErrorLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requestBody = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		queryParam = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		requestParam = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		header = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pathParam = 4,
	}
	
	/// <summary>
	/// Error response returned by all error conditions in Velo Services
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponse
	{
		
		/// <summary>
		/// a unique identifier to track a request or related sequence of requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// one or more errors
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// this will mirror the Status-Code part of the Status-Line http response header and is included for extra clarity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatusCode")]
		public System.Nullable<System.Int32> HttpStatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailedPayeeV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public CreatePayeeAddressV3 Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="challenge")]
		public ChallengeV3 Challenge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public CompanyV3 Company { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public CreateIndividualV3 Individual { get; set; }
		
		/// <summary>
		/// An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
		///See the /v1/supportedLanguages endpoint to list the available codes for an environment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannel")]
		public CreatePaymentChannelV3 PaymentChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorRefs")]
		public PayeePayorRefV3[] PayorRefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		public string RemoteId { get; set; }
		
		/// <summary>
		/// Type of Payee. One of the following values: Individual, Company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailedPayeeV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public CreatePayeeAddressV4 Address { get; set; }
		
		/// <summary>
		/// <p>Used to override the default challenge presented to the payee when they onboard</p>
		///<p>Not used after the payee has onboarded</p>
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challenge")]
		public ChallengeV4 Challenge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public CompanyV4 Company { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public CreateIndividualV4 Individual { get; set; }
		
		/// <summary>
		/// An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
		///See the /v1/supportedLanguages endpoint to list the available codes for an environment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannel")]
		public CreatePaymentChannelV4 PaymentChannel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorRefs")]
		public PayeePayorRefV4[] PayorRefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		public string RemoteId { get; set; }
		
		/// <summary>
		/// Type of Payee. One of the following values: Individual, Company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeePayorRefV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="invitationStatus")]
		public string InvitationStatus { get; set; }
		
		/// <summary>
		/// The timestamp when the invitation status is updated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitationStatusTimestamp")]
		public System.Nullable<System.DateTimeOffset> InvitationStatusTimestamp { get; set; }
		
		/// <summary>
		/// Indicates any conditions which prevent the payee from being payable for this payor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payableIssues")]
		public PayableIssueV4[] PayableIssues { get; set; }
		
		/// <summary>
		/// Indicates if the payee is payable for this payor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payableStatus")]
		public System.Nullable<System.Boolean> PayableStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannelId")]
		public string PaymentChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		public string RemoteId { get; set; }
	}
	
	/// <summary>
	/// payable issues for the payee and payor combination
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayableIssueV4
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailedSubmissionV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="failedSubmission")]
		public FailedPayeeV3 FailedSubmission { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureMessage")]
		public string FailureMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailedSubmissionV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="failedSubmission")]
		public FailedPayeeV4 FailedSubmission { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failureMessage")]
		public string FailureMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FundingAccountResponseV2
	{
		
		/// <summary>
		/// name on the bank account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// bank account number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// A flag for whether the funding account has been archived.  Only present in the response if true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		/// <summary>
		/// ISO 3166-1 2 letter country code (upper case)
		/// Max length: 2
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string Country { get; set; }
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// Funding Account Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// name of funding account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// bank account routing number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		public string RoutingNumber { get; set; }
		
		/// <summary>
		/// Funding account type. One of the following values: FBO, WUBS_DECOUPLED, PRIVATE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FundingAudit
	{
		
		/// <summary>
		/// The amount funded
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// The currency of the funding
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateTime")]
		public System.Nullable<System.DateTimeOffset> DateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public FundingEvent[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundingAccountName")]
		public string FundingAccountName { get; set; }
		
		/// <summary>
		/// Funding type. One of the following values: ACH, WIRE, EMBEDDED, BANK_TRANSFER
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fundingType")]
		public string FundingType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceAccountName")]
		public string SourceAccountName { get; set; }
		
		/// <summary>
		/// Status of the funding. One of the following values: PENDING, FAILED, CREDIT, DEBIT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Type of top up. One of the following values: AUTOMATIC, MANUAL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topupType")]
		public string TopupType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FundingEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="eventDateTime")]
		public System.Nullable<System.DateTimeOffset> EventDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// Funding event type. One of the following values: PAYOR_FUNDING_DETECTED, PAYOR_FUNDING_REQUESTED, PAYOR_FUNDING_RETURN_RECEIVED, FUNDING_RETURN_DETECTED, PAYOR_FUNDING_REQUEST_SUBMITTED, PAYOR_FUNDING_ENTRY_DETAIL_RECEIVED, FUNDING_DEALLOCATED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fundingEventType")]
		public string FundingEventType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FundingPayorStatusAuditResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int64> Amount { get; set; }
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundingId")]
		public string FundingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FundingRequestV2
	{
		
		/// <summary>
		/// Amount to fund, decimal implied
		/// Required
		/// Minimum: 1
		/// Maximum: 9999999999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, 9999999999)]
		public long Amount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FundingRequestV3
	{
		
		/// <summary>
		/// Amount to fund in minor units
		/// Required
		/// Minimum: 1
		/// Maximum: 9999999999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, 9999999999)]
		public long Amount { get; set; }
		
		/// <summary>
		/// The funding account id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fundingAccountId")]
		public string FundingAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FundingResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allocationDate")]
		public System.DateTimeOffset AllocationDate { get; set; }
		
		/// <summary>
		/// Funding Allocation Type. One of the following values: AUTOMATIC, MANUAL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocationType")]
		public string AllocationType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public long Amount { get; set; }
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detectedFundingRef")]
		public string DetectedFundingRef { get; set; }
		
		/// <summary>
		/// Funding Account Type. One of the following values: FBO, WUBS_DECOUPLED, PRIVATE
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fundingAccountType")]
		public string FundingAccountType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fundingId")]
		public string FundingId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hiddenDate")]
		public System.Nullable<System.DateTimeOffset> HiddenDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="physicalAccountName")]
		public string PhysicalAccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceAccountId")]
		public string SourceAccountId { get; set; }
		
		/// <summary>
		/// Current status of the funding. One of the follwing values: PENDING, UNALLOCATED, ALLOCATED, HIDDEN, RETURNED, RETURNING, BULK_RETURN, OTHER
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FxSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Current status of the funding. One of the following values: FUNDED, INSTRUCTED, UNFUNDED
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fundingStatus")]
		public string FundingStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invertedRate")]
		public double InvertedRate { get; set; }
		
		/// <summary>
		/// ISO-4217 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string PaymentCurrency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quoteId")]
		public string QuoteId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public double Rate { get; set; }
		
		/// <summary>
		/// ISO-4217 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string SourceCurrency { get; set; }
		
		/// <summary>
		/// Current status of the FX Summary. One of the following values: UNQUOTED, QUOTED, EXPIRED, EXECUTED
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCost")]
		public int TotalCost { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPaymentAmount")]
		public int TotalPaymentAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FxSummaryV3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDateTime")]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Current status of the funding. One of the following values: FUNDED, INSTRUCTED, UNFUNDED
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fundingStatus")]
		public string FundingStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invertedRate")]
		public float InvertedRate { get; set; }
		
		/// <summary>
		/// ISO 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string PaymentCurrency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quoteId")]
		public string QuoteId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public float Rate { get; set; }
		
		/// <summary>
		/// ISO 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string SourceCurrency { get; set; }
		
		/// <summary>
		/// Current status of the FX Summary. One of the following values: UNQUOTED, QUOTED, EXPIRED, EXECUTED
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCost")]
		public int TotalCost { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPaymentAmount")]
		public int TotalPaymentAmount { get; set; }
	}
	
	/// <summary>
	/// List Users Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetFundingsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public FundingAudit[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public GetFundingsResponse_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedUserResponse_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetFundingsResponse_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPayeeListResponseCompanyV3
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string OperatingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPayeeListResponseCompanyV4
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Name { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string OperatingName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPayeeListResponseIndividualV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public NameV3 Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NameV3
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherNames")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string OtherNames { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPayeeListResponseIndividualV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public NameV4 Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NameV4
	{
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherNames")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string OtherNames { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPayeeListResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public GetPayeeListResponseCompanyV3 Company { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabledComment")]
		public string DisabledComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabledUpdatedTimestamp")]
		public System.Nullable<System.DateTimeOffset> DisabledUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public GetPayeeListResponseIndividualV3 Individual { get; set; }
		
		/// <summary>
		/// An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
		///See the /v1/supportedLanguages endpoint to list the available codes for an environment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Onboarded status. One of the following values: CREATED, INVITED, REGISTERED, ONBOARDED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onboardedStatus")]
		public string OnboardedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
		
		/// <summary>
		/// Type of Payee. One of the following values: Individual, Company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeType")]
		public string PayeeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorRefs")]
		public PayeePayorRefV3[] PayorRefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="watchlistOverrideComment")]
		public string WatchlistOverrideComment { get; set; }
		
		/// <summary>
		/// Current watchlist status. One of the following values: NONE, PENDING, REVIEW, PASSED, FAILED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watchlistStatus")]
		public string WatchlistStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="watchlistStatusUpdatedTimestamp")]
		public string WatchlistStatusUpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPayeeListResponseV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public GetPayeeListResponseCompanyV4 Company { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabledComment")]
		public string DisabledComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabledUpdatedTimestamp")]
		public System.Nullable<System.DateTimeOffset> DisabledUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public GetPayeeListResponseIndividualV4 Individual { get; set; }
		
		/// <summary>
		/// An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
		///See the /v1/supportedLanguages endpoint to list the available codes for an environment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Payee onboarded status. One of the following values: CREATED, INVITED, REGISTERED, ONBOARDED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onboardedStatus")]
		public string OnboardedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
		
		/// <summary>
		/// Type of Payee. One of the following values: Individual, Company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeType")]
		public string PayeeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorRefs")]
		public PayeePayorRefV4[] PayorRefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="watchlistOverrideComment")]
		public string WatchlistOverrideComment { get; set; }
		
		/// <summary>
		/// Current watchlist status. One of the following values: NONE, PENDING, REVIEW, PASSED, FAILED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watchlistStatus")]
		public string WatchlistStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="watchlistStatusUpdatedTimestamp")]
		public string WatchlistStatusUpdatedTimestamp { get; set; }
	}
	
	/// <summary>
	/// List Payments for payout
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPaymentsForPayoutResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PaymentResponseV3[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public GetPayoutsResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public GetPaymentsForPayoutResponseV3_page Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public GetPaymentsForPayoutResponseV3_summary Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The account number for the account which will receive the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The country code of the payment channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="events")]
		public PaymentEventResponseV3[] Events { get; set; }
		
		/// <summary>
		/// ACH file payment was submitted in, if applicable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filenameReference")]
		public string FilenameReference { get; set; }
		
		/// <summary>
		/// The funding status of the payment. One of the following values: [FUNDED, INSTRUCTED, UNFUNDED
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fundingStatus")]
		public string FundingStatus { get; set; }
		
		/// <summary>
		/// The iban for the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		/// <summary>
		/// Individual Identification Number assigned to the payment in the ACH file, if applicable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualIdentificationNumber")]
		public string IndividualIdentificationNumber { get; set; }
		
		/// <summary>
		/// The inverted FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invertedRate")]
		public System.Nullable<System.Single> InvertedRate { get; set; }
		
		/// <summary>
		/// The id of the paymeee
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
		
		/// <summary>
		/// The amount which the payee will receive
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentAmount")]
		public int PaymentAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannelId")]
		public string PaymentChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannelName")]
		public string PaymentChannelName { get; set; }
		
		/// <summary>
		/// ISO 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string PaymentCurrency { get; set; }
		
		/// <summary>
		/// The id of the payment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentId")]
		public string PaymentId { get; set; }
		
		/// <summary>
		/// The payment memo set by the payor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentMemo")]
		public string PaymentMemo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentScheme")]
		public string PaymentScheme { get; set; }
		
		/// <summary>
		/// The id of the payor
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// The name of the payor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payorName")]
		public string PayorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorPaymentId")]
		public string PayorPaymentId { get; set; }
		
		/// <summary>
		/// The quote Id used for the FX
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quoteId")]
		public string QuoteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="railsBatchId")]
		public string RailsBatchId { get; set; }
		
		/// <summary>
		/// The rails ID. Default value is RAILS ID UNAVAILABLE when not populated.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("RAILS ID UNAVAILABLE")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="railsId")]
		public string RailsId { get; set; } = "RAILS ID UNAVAILABLE";
		
		[System.Runtime.Serialization.DataMember(Name="railsPaymentId")]
		public string RailsPaymentId { get; set; }
		
		/// <summary>
		/// The FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public System.Nullable<System.Single> Rate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectionReason")]
		public string RejectionReason { get; set; }
		
		/// <summary>
		/// The remote id by which the payor refers to the payee. Only populated once payment is confirmed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		public string RemoteId { get; set; }
		
		/// <summary>
		/// The return cost if a returned payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnCost")]
		public System.Nullable<System.Int32> ReturnCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnReason")]
		public string ReturnReason { get; set; }
		
		/// <summary>
		/// The routing number for the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		public string RoutingNumber { get; set; }
		
		/// <summary>
		/// The id of the source account from which the payment was taken
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceAccountId")]
		public string SourceAccountId { get; set; }
		
		/// <summary>
		/// The name of the source account from which the payment was taken
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceAccountName")]
		public string SourceAccountName { get; set; }
		
		/// <summary>
		/// The source amount for the payment (amount debited to make the payment)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceAmount")]
		public System.Nullable<System.Int32> SourceAmount { get; set; }
		
		/// <summary>
		/// ISO 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string SourceCurrency { get; set; }
		
		/// <summary>
		/// Current status of the payment. One of the following values: ACCEPTED, AWAITING_FUNDS, FUNDED, UNFUNDED, BANK_PAYMENT_REQUESTED, REJECTED, ACCEPTED_BY_RAILS, CONFIRMED, FAILED, WITHDRAWN
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submittedDateTime")]
		public System.DateTimeOffset SubmittedDateTime { get; set; }
		
		/// <summary>
		/// Trace Number assigned to the payment in the ACH file, if applicable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traceNumber")]
		public string TraceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentEventResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The account number attached to the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The date/time at which the event occurred.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventDateTime")]
		public System.DateTimeOffset EventDateTime { get; set; }
		
		/// <summary>
		/// The id of the event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// The type of the event. One of the following values: PAYOUT_SUBMITTED, PAYOUT_COMPLETED, PAYOUT_INSTRUCTED_V3, BANK_PAYMENT_REQUESTED, SOURCE_AMOUNT_CONFIRMED, PAYMENT_SUBMITTED, PAYMENT_SUBMITTED_ACCEPTED, PAYMENT_SUBMITTED_REJECTED, PAYMENT_CONFIRMED, PAYMENT_AWAITING_FUNDS, PAYMENT_FUNDED, PAYMENT_UNFUNDED, PAYMENT_FAILED, ACH_SUBMITTED_TO_ODFI, PAYMENT_ACCEPTED_BY_RAILS, ACH_RETURN_RECEIVED, RETURN_PAYMENT_FUNDING_REQUESTED, PAYOUT_BATCH_EXECUTED, PAYOUT_BATCH_QUOTE_EXPIRED, PAYOUT_BATCH_FUNDED, PAYOUT_BATCH_FUNDS_RETURN_REQUEST, PAYOUT_BATCH_FUNDS_RETURNED, PAYOUT_FUNDS_REQUEST, PAYOUT_FUNDS_GRANTED, PAYOUT_FUNDS_DENIED, PAYOUT_BATCH_QUOTED, PAYOUT_QUOTED, ACH_PAYMENT_RETURN_CANCELLED, RETURN_PAYMENT_CANCELLATION_REQUESTED, PAYOUT_WITHDRAWN
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		/// <summary>
		/// The destination amount exposed by the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentAmount")]
		public System.Nullable<System.Int64> PaymentAmount { get; set; }
		
		/// <summary>
		/// ISO 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string PaymentCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
		
		/// <summary>
		/// The routing number attached to the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		public string RoutingNumber { get; set; }
		
		/// <summary>
		/// The source amount exposed by the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceAmount")]
		public System.Nullable<System.Int64> SourceAmount { get; set; }
		
		/// <summary>
		/// ISO 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string SourceCurrency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPayoutsResponseV3_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPaymentsForPayoutResponseV3_page
	{
		
		[System.Runtime.Serialization.DataMember(Name="numberOfElements")]
		public System.Nullable<System.Int32> NumberOfElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalElements")]
		public System.Nullable<System.Int32> TotalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPaymentsForPayoutResponseV3_summary
	{
		
		/// <summary>
		/// The count of payments within the payout which have been confirmed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmedPayments")]
		public System.Nullable<System.Int32> ConfirmedPayments { get; set; }
		
		/// <summary>
		/// The count of payments within the payout which have failed or been returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedPayments")]
		public System.Nullable<System.Int32> FailedPayments { get; set; }
		
		/// <summary>
		/// The count of payments within the payout which are incomplete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incompletePayments")]
		public System.Nullable<System.Int32> IncompletePayments { get; set; }
		
		/// <summary>
		/// The date/time at which the payout was instructed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instructedDateTime")]
		public System.Nullable<System.DateTimeOffset> InstructedDateTime { get; set; }
		
		/// <summary>
		/// The memo attached to the payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutMemo")]
		public string PayoutMemo { get; set; }
		
		/// <summary>
		/// The current status of the payout. One of the following values: ACCEPTED, REJECTED, SUBMITTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, CONFIRMED, WITHDRAWN
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutStatus")]
		public string PayoutStatus { get; set; }
		
		/// <summary>
		/// The count of payments within the payout which have been released.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releasedPayments")]
		public System.Nullable<System.Int32> ReleasedPayments { get; set; }
		
		/// <summary>
		/// The date/time at which the payout was submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submittedDateTime")]
		public System.Nullable<System.DateTimeOffset> SubmittedDateTime { get; set; }
		
		/// <summary>
		/// The count of payments within the payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPayments")]
		public System.Nullable<System.Int32> TotalPayments { get; set; }
		
		/// <summary>
		/// The date/time at which the payout was withdrawn.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withdrawnDateTime")]
		public System.Nullable<System.DateTimeOffset> WithdrawnDateTime { get; set; }
	}
	
	/// <summary>
	/// List Payments for payout
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPaymentsForPayoutResponseV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PaymentResponseV4[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PagedPayeeResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedPayeeInvitationStatusResponseV3_page Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public GetPaymentsForPayoutResponseV4_summary Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentResponseV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The account number for the account which will receive the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Populated with rejection reason code if the payment was withdrawn automatically at instruct time
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoWithdrawnReasonCode")]
		public string AutoWithdrawnReasonCode { get; set; }
		
		/// <summary>
		/// The country code of the payment channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="events")]
		public PaymentEventResponse[] Events { get; set; }
		
		/// <summary>
		/// ACH file payment was submitted in, if applicable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filenameReference")]
		public string FilenameReference { get; set; }
		
		/// <summary>
		/// Current funding status of the payment. One of the following values: FUNDED, INSTRUCTED, UNFUNDED
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fundingStatus")]
		public string FundingStatus { get; set; }
		
		/// <summary>
		/// The iban for the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		/// <summary>
		/// Individual Identification Number assigned to the payment in the ACH file, if applicable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="individualIdentificationNumber")]
		public string IndividualIdentificationNumber { get; set; }
		
		/// <summary>
		/// The inverted FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invertedRate")]
		public System.Nullable<System.Double> InvertedRate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPaymentCcyBaseCcy")]
		public System.Nullable<System.Boolean> IsPaymentCcyBaseCcy { get; set; }
		
		/// <summary>
		/// The country code of the payee's address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeAddressCountryCode")]
		public string PayeeAddressCountryCode { get; set; }
		
		/// <summary>
		/// The id of the paymeee
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
		
		/// <summary>
		/// The amount which the payee will receive
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentAmount")]
		public int PaymentAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannelId")]
		public string PaymentChannelId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentChannelName")]
		public string PaymentChannelName { get; set; }
		
		/// <summary>
		/// ISO-4217 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string PaymentCurrency { get; set; }
		
		/// <summary>
		/// The id of the payment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentId")]
		public string PaymentId { get; set; }
		
		/// <summary>
		/// The payment memo set by the payor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentMemo")]
		public string PaymentMemo { get; set; }
		
		/// <summary>
		/// Metadata for the payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentMetadata")]
		public string PaymentMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentScheme")]
		public string PaymentScheme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentTrackingReference")]
		public string PaymentTrackingReference { get; set; }
		
		/// <summary>
		/// The id of the payor
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// The name of the payor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payorName")]
		public string PayorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorPaymentId")]
		public string PayorPaymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payout")]
		public PaymentResponseV4_payout Payout { get; set; }
		
		/// <summary>
		/// FX details relating to a payout that was executed or is still waiting to be executed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postInstructFxInfo")]
		public PostInstructFxInfo PostInstructFxInfo { get; set; }
		
		/// <summary>
		/// The quote Id used for the FX
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quoteId")]
		public string QuoteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="railsBatchId")]
		public string RailsBatchId { get; set; }
		
		/// <summary>
		/// The rails ID. Default value is RAILS ID UNAVAILABLE when not populated.
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("RAILS ID UNAVAILABLE")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="railsId")]
		public string RailsId { get; set; } = "RAILS ID UNAVAILABLE";
		
		[System.Runtime.Serialization.DataMember(Name="railsPaymentId")]
		public string RailsPaymentId { get; set; }
		
		/// <summary>
		/// The FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public System.Nullable<System.Double> Rate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectionReason")]
		public string RejectionReason { get; set; }
		
		/// <summary>
		/// The remote id by which the payor refers to the payee. Only populated once payment is confirmed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		public string RemoteId { get; set; }
		
		/// <summary>
		/// The velo id of the remote system orchestrating the payment. Not populated for normal Velo payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteSystemId")]
		public string RemoteSystemId { get; set; }
		
		/// <summary>
		/// The id of the payment in the remote system. Not populated for normal Velo payments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteSystemPaymentId")]
		public string RemoteSystemPaymentId { get; set; }
		
		/// <summary>
		/// The return cost if a returned payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnCost")]
		public System.Nullable<System.Int32> ReturnCost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnReason")]
		public string ReturnReason { get; set; }
		
		/// <summary>
		/// The routing number for the payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		public string RoutingNumber { get; set; }
		
		/// <summary>
		/// Details relating to a payout that was executed via a schedule or is still waiting to be executed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public PayoutSchedule Schedule { get; set; }
		
		/// <summary>
		/// The id of the source account from which the payment was taken
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceAccountId")]
		public string SourceAccountId { get; set; }
		
		/// <summary>
		/// The name of the source account from which the payment was taken
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceAccountName")]
		public string SourceAccountName { get; set; }
		
		/// <summary>
		/// The source amount for the payment (amount debited to make the payment)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceAmount")]
		public System.Nullable<System.Int32> SourceAmount { get; set; }
		
		/// <summary>
		/// ISO-4217 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string SourceCurrency { get; set; }
		
		/// <summary>
		/// Current status of the payment. One of the following values: ACCEPTED, AWAITING_FUNDS, FUNDED, UNFUNDED, BANK_PAYMENT_REQUESTED, REJECTED, ACCEPTED_BY_RAILS, CONFIRMED, RETURNED, WITHDRAWN
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submittedDateTime")]
		public System.DateTimeOffset SubmittedDateTime { get; set; }
		
		/// <summary>
		/// Trace Number assigned to the payment in the ACH file, if applicable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traceNumber")]
		public string TraceNumber { get; set; }
		
		/// <summary>
		/// The transmission type of the payment, e.g. ACH, SAME_DAY_ACH, WIRE, GACHO
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transmissionType")]
		public string TransmissionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="withdrawable")]
		public System.Nullable<System.Boolean> Withdrawable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="withdrawnReason")]
		public string WithdrawnReason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentEventResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The account number attached to the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The date/time at which the event occurred.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventDateTime")]
		public System.DateTimeOffset EventDateTime { get; set; }
		
		/// <summary>
		/// The id of the event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// One of the following values: PAYOUT_SUBMITTED, PAYOUT_COMPLETED, PAYOUT_INSTRUCTED_V3, BANK_PAYMENT_REQUESTED, SOURCE_AMOUNT_CONFIRMED, PAYMENT_SUBMITTED, PAYMENT_SUBMITTED_ACCEPTED, PAYMENT_SUBMITTED_REJECTED, PAYMENT_CONFIRMED, PAYMENT_AWAITING_FUNDS, PAYMENT_FUNDED, PAYMENT_UNFUNDED, PAYMENT_FAILED, PAYMENT_TRACKING_DETAILS_UPDATED, ACH_SUBMITTED_TO_ODFI, PAYMENT_ACCEPTED_BY_RAILS, ACH_RETURN_RECEIVED, RETURN_PAYMENT_FUNDING_REQUESTED, PAYOUT_BATCH_EXECUTED, PAYOUT_BATCH_QUOTE_EXPIRED, PAYOUT_BATCH_FUNDED, PAYOUT_BATCH_FUNDS_RETURN_REQUEST, PAYOUT_BATCH_FUNDS_RETURNED, PAYOUT_FUNDS_REQUEST, PAYOUT_FUNDS_GRANTED, PAYOUT_FUNDS_DENIED, PAYOUT_BATCH_QUOTED, PAYOUT_QUOTED, ACH_PAYMENT_RETURN_CANCELLED, RETURN_PAYMENT_CANCELLATION_REQUESTED, PAYOUT_WITHDRAWN, ORCHESTRATED_PAYMENT_BATCH_REQUESTED, ORCHESTRATED_PAYMENT_BATCH_CONFIRMED, ORCHESTRATED_PAYMENT_REQUESTED
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iban")]
		public string Iban { get; set; }
		
		/// <summary>
		/// The destination amount exposed by the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentAmount")]
		public System.Nullable<System.Int64> PaymentAmount { get; set; }
		
		/// <summary>
		/// ISO-4217 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string PaymentCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
		
		/// <summary>
		/// The routing number attached to the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingNumber")]
		public string RoutingNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledAt")]
		public System.Nullable<System.DateTimeOffset> ScheduledAt { get; set; }
		
		/// <summary>
		/// Optional display name as a hint for who scheduled the payout. Not populated if payout was scheduled by an application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledBy")]
		public string ScheduledBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledFor")]
		public System.Nullable<System.DateTimeOffset> ScheduledFor { get; set; }
		
		/// <summary>
		/// The source amount exposed by the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceAmount")]
		public System.Nullable<System.Int64> SourceAmount { get; set; }
		
		/// <summary>
		/// ISO-4217 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string SourceCurrency { get; set; }
	}
	
	/// <summary>
	/// FX details relating to a payout that was executed or is still waiting to be executed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostInstructFxInfo
	{
		
		/// <summary>
		/// The mode by which the FX rate is to be determined (MANUAL or AUTO)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fxMode")]
		public string FxMode { get; set; }
		
		/// <summary>
		/// The state to which the Post-Instruct FX process has reached (INITIATED or COMPLETED)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fxStatus")]
		public string FxStatus { get; set; }
		
		/// <summary>
		/// The date-time at which the most recent fxStatus was determined.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fxStatusUpdatedAt")]
		public System.DateTimeOffset FxStatusUpdatedAt { get; set; }
		
		/// <summary>
		/// The reference assigned to the FX funding that will fulfil this payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fxTransactionReference")]
		public string FxTransactionReference { get; set; }
	}
	
	/// <summary>
	/// Details relating to a payout that was executed via a schedule or is still waiting to be executed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayoutSchedule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notificationsEnabled")]
		public bool NotificationsEnabled { get; set; }
		
		/// <summary>
		/// Current status of the payout schedule. One of the following values: SCHEDULED, EXECUTED, FAILED
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduleStatus")]
		public string ScheduleStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledAt")]
		public System.DateTimeOffset ScheduledAt { get; set; }
		
		/// <summary>
		/// Optional display name as a hint for who scheduled the payout. Not populated if payout was scheduled by an application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledBy")]
		public string ScheduledBy { get; set; }
		
		/// <summary>
		/// ID of the user or application that scheduled the payout
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledByPrincipalId")]
		public string ScheduledByPrincipalId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledFor")]
		public System.DateTimeOffset ScheduledFor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagedPayeeResponseV3_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPaymentsForPayoutResponseV4_summary
	{
		
		/// <summary>
		/// The count of payments within the payout which have been confirmed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmedPayments")]
		public System.Nullable<System.Int32> ConfirmedPayments { get; set; }
		
		/// <summary>
		/// The count of payments within the payout which are incomplete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incompletePayments")]
		public System.Nullable<System.Int32> IncompletePayments { get; set; }
		
		/// <summary>
		/// Details of principal participating in a payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instructed")]
		public PayoutPrincipal Instructed { get; set; }
		
		/// <summary>
		/// The date/time at which the payout was instructed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instructedDateTime")]
		public System.Nullable<System.DateTimeOffset> InstructedDateTime { get; set; }
		
		/// <summary>
		/// Details of payor and principal participating in a payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutFrom")]
		public PayoutPayor PayoutFrom { get; set; }
		
		/// <summary>
		/// The memo attached to the payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutMemo")]
		public string PayoutMemo { get; set; }
		
		/// <summary>
		/// Current status of the Payout. One of the following values: ACCEPTED, REJECTED, SUBMITTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, CONFIRMED, WITHDRAWN
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutStatus")]
		public string PayoutStatus { get; set; }
		
		/// <summary>
		/// Details of payor and principal participating in a payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutTo")]
		public PayoutPayor PayoutTo { get; set; }
		
		/// <summary>
		/// The type of payout. One of the following values: STANDARD, AS, ON_BEHALF_OF
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutType")]
		public string PayoutType { get; set; }
		
		/// <summary>
		/// Details of principal participating in a payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quoted")]
		public PayoutPrincipal Quoted { get; set; }
		
		/// <summary>
		/// The date/time at which the payout was quoted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quotedDateTime")]
		public System.Nullable<System.DateTimeOffset> QuotedDateTime { get; set; }
		
		/// <summary>
		/// The count of payments within the payout which have been released.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releasedPayments")]
		public System.Nullable<System.Int32> ReleasedPayments { get; set; }
		
		/// <summary>
		/// The count of payments within the payout which have been returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnedPayments")]
		public System.Nullable<System.Int32> ReturnedPayments { get; set; }
		
		/// <summary>
		/// Details relating to a payout that was executed via a schedule or is still waiting to be executed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public PayoutSchedule Schedule { get; set; }
		
		/// <summary>
		/// The date/time at which the payout was submitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submittedDateTime")]
		public System.Nullable<System.DateTimeOffset> SubmittedDateTime { get; set; }
		
		/// <summary>
		/// Details of payor and principal participating in a payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submitting")]
		public PayoutPayor Submitting { get; set; }
		
		/// <summary>
		/// The count of payments within the payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPayments")]
		public System.Nullable<System.Int32> TotalPayments { get; set; }
		
		/// <summary>
		/// Details of principal participating in a payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withdrawn")]
		public PayoutPrincipal Withdrawn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="withdrawnDateTime")]
		public System.Nullable<System.DateTimeOffset> WithdrawnDateTime { get; set; }
		
		/// <summary>
		/// The count of payments within the payout which have been withdrawn.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withdrawnPayments")]
		public System.Nullable<System.Int32> WithdrawnPayments { get; set; }
	}
	
	/// <summary>
	/// Details of principal participating in a payout.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayoutPrincipal
	{
		
		/// <summary>
		/// Email address if principal is a user or ID if application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
		
		/// <summary>
		/// The id of the principal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	/// <summary>
	/// Details of payor and principal participating in a payout.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayoutPayor
	{
		
		/// <summary>
		/// The alternate name of the payor.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dbaName")]
		public string DbaName { get; set; }
		
		/// <summary>
		/// The id of the payor.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// The name of the payor.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorName")]
		public string PayorName { get; set; }
		
		/// <summary>
		/// Email address if principal is a user or ID if application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
		
		/// <summary>
		/// The id of the principal.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principalId")]
		public string PrincipalId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPayoutStatistics
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thisMonthFailedPaymentsCount")]
		public int ThisMonthFailedPaymentsCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="thisMonthPayoutsCount")]
		public int ThisMonthPayoutsCount { get; set; }
	}
	
	/// <summary>
	/// List Payouts Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPayoutsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PayoutSummaryAudit[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PagedPayeeResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedPayeeInvitationStatusResponseV3_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayoutSummaryAudit
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateTime")]
		public System.Nullable<System.DateTimeOffset> DateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fxSummaries")]
		public FxSummary[] FxSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instructedDateTime")]
		public string InstructedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorName")]
		public string PayorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payoutId")]
		public string PayoutId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payoutMemo")]
		public string PayoutMemo { get; set; }
		
		/// <summary>
		/// The type of payout. One of the following values: STANDARD, AS, ON_BEHALF_OF
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payoutType")]
		public string PayoutType { get; set; }
		
		/// <summary>
		/// Details relating to a payout that was executed via a schedule or is still waiting to be executed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public PayoutSchedule Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceAccountSummary")]
		public SourceAccountSummary[] SourceAccountSummary { get; set; }
		
		/// <summary>
		/// Current status of the Payout. One of the following values: ACCEPTED, REJECTED, SUBMITTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, CONFIRMED, WITHDRAWN
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submittedDateTime")]
		public string SubmittedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalIncompletePayments")]
		public System.Nullable<System.Int32> TotalIncompletePayments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPayments")]
		public System.Nullable<System.Int32> TotalPayments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalReturnedPayments")]
		public System.Nullable<System.Int32> TotalReturnedPayments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalWithdrawnPayments")]
		public System.Nullable<System.Int32> TotalWithdrawnPayments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="withdrawnDateTime")]
		public System.Nullable<System.DateTimeOffset> WithdrawnDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceAccountSummary
	{
		
		/// <summary>
		/// ISO-4217 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceAccountId")]
		public string SourceAccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCost")]
		public long TotalCost { get; set; }
	}
	
	/// <summary>
	/// List Payouts Response
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPayoutsResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PayoutSummaryAuditV3[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public GetPayoutsResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public GetPayoutsResponseV3_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayoutSummaryAuditV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="fxSummaries")]
		public FxSummaryV3[] FxSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instructedDateTime")]
		public string InstructedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payoutId")]
		public string PayoutId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payoutMemo")]
		public string PayoutMemo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceAccountSummary")]
		public SourceAccountSummaryV3[] SourceAccountSummary { get; set; }
		
		/// <summary>
		/// Current status of the payout. One of the following values: ACCEPTED, REJECTED, SUBMITTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, CONFIRMED, WITHDRAWN
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submittedDateTime")]
		public string SubmittedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalFailedPayments")]
		public System.Nullable<System.Int32> TotalFailedPayments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalIncompletePayments")]
		public System.Nullable<System.Int32> TotalIncompletePayments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPayments")]
		public System.Nullable<System.Int32> TotalPayments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="withdrawnDateTime")]
		public string WithdrawnDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceAccountSummaryV3
	{
		
		/// <summary>
		/// ISO 3 character currency code
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceAccountId")]
		public string SourceAccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalCost")]
		public long TotalCost { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPayoutsResponseV3_page
	{
		
		[System.Runtime.Serialization.DataMember(Name="numberOfElements")]
		public System.Nullable<System.Int32> NumberOfElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalElements")]
		public System.Nullable<System.Int32> TotalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IndividualV3
	{
		
		/// <summary>
		/// If not authorized to view, value will be masked. Example: - XXXX-XX-XX
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dateOfBirth")]
		public string DateOfBirth { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public IndividualV3_name Name { get; set; }
		
		/// <summary>
		/// If not authorized to view, value will be masked. Example: XXXXX1234
		/// Max length: 30
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nationalIdentification")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string NationalIdentification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IndividualV3_name
	{
		
		/// <summary>
		/// Required
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string LastName { get; set; }
		
		/// <summary>
		/// Max length: 40
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherNames")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string OtherNames { get; set; }
		
		/// <summary>
		/// Max length: 10
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IndividualV4
	{
		
		/// <summary>
		/// If not authorized to view, value will be masked. Example: - XXXX-XX-XX
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dateOfBirth")]
		public string DateOfBirth { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public IndividualV3_name Name { get; set; }
		
		/// <summary>
		/// If not authorized to view, value will be masked. Example: XXXXX1234
		/// Max length: 30
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nationalIdentification")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string NationalIdentification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstructPayoutRequestV3
	{
		
		/// <summary>
		/// Halt instruction if the FX rates have become worse since the last quote
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fxRateDegredationThresholdPercentage")]
		public System.Nullable<System.Single> FxRateDegredationThresholdPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvitePayeeRequestV3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvitePayeeRequestV4
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InviteUserRequest
	{
		
		/// <summary>
		/// the email address of the invited user
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The payorId or payeeId or null if the user is a backoffice admin
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LastName { get; set; }
		
		/// <summary>
		/// <p>The MFA type that the user will use</p>
		///<p>The type may be conditional on the role(s) the user has</p>
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mfaType")]
		public MFADetailsMfa_type MfaType { get; set; }
		
		/// <summary>
		/// The main contact number for the user
		///
		/// Required
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="primaryContactNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string PrimaryContactNumber { get; set; }
		
		/// <summary>
		/// The role(s) for the user
		///The role must exist
		///The role can be a custom role or a system role but the invoker must have the permissions to assign the role
		///System roles are: velo.backoffice.admin, velo.payor.master_admin, velo.payor.admin, velo.payor.support, velo.payee.admin, velo.payee.support
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public string[] Roles { get; set; }
		
		/// <summary>
		/// The secondary contact number for the user
		///
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryContactNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string SecondaryContactNumber { get; set; }
		
		/// <summary>
		/// The phone number of a device that the user can receive sms messages on
		///
		/// Required
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string SmsNumber { get; set; }
		
		/// <summary>
		/// Will default to PAYOR if not provided but entityId is provided
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userType")]
		public UserInfoUserType UserType { get; set; }
		
		/// <summary>
		/// Optional property that MUST be suppied when manually verifying a user
		///The user's smsNumber is registered via a separate endpoint and an OTP sent to them
		///
		/// Max length: 6
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationCode")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string VerificationCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkForResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	/// <summary>
	/// List Funding Accounts Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFundingAccountsResponseV2
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public FundingAccountResponseV2[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ListFundingAccountsResponseV2_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public ListFundingAccountsResponseV2_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFundingAccountsResponseV2_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFundingAccountsResponseV2_page
	{
		
		[System.Runtime.Serialization.DataMember(Name="numberOfElements")]
		public System.Nullable<System.Int32> NumberOfElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalElements")]
		public System.Nullable<System.Int32> TotalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	/// <summary>
	/// List Payments Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPaymentsResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PaymentResponseV3[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public GetPayoutsResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public ListPaymentsResponseV3_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPaymentsResponseV3_page
	{
		
		[System.Runtime.Serialization.DataMember(Name="numberOfElements")]
		public System.Nullable<System.Int32> NumberOfElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalElements")]
		public System.Nullable<System.Int32> TotalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	/// <summary>
	/// List Payments Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPaymentsResponseV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PaymentResponseV4[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public GetPayoutsResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public ListPaymentsResponseV3_page Page { get; set; }
	}
	
	/// <summary>
	/// List Source Accounts Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSourceAccountResponseV2
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public SourceAccountResponseV2[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ListSourceAccountResponseV2_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedUserResponse_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceAccountResponseV2
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string AccountType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoTopUpConfig")]
		public AutoTopUpConfigV2 AutoTopUpConfig { get; set; }
		
		/// <summary>
		/// Decimal implied
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int64> Balance { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="balanceVisible")]
		public bool BalanceVisible { get; set; }
		
		/// <summary>
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundingAccountId")]
		public string FundingAccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fundingRef")]
		public string FundingRef { get; set; }
		
		/// <summary>
		/// Source Account Id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifications")]
		public NotificationsV2 Notifications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="physicalAccountId")]
		public string PhysicalAccountId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="physicalAccountName")]
		public string PhysicalAccountName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pooled")]
		public bool Pooled { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="railsId")]
		public string RailsId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationsV2
	{
		
		[System.Runtime.Serialization.DataMember(Name="minimumBalance")]
		public System.Nullable<System.Int32> MinimumBalance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSourceAccountResponseV2_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	/// <summary>
	/// List Source Accounts Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSourceAccountResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public SourceAccountResponseV3[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ListSourceAccountResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedUserResponse_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceAccountResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoTopUpConfig")]
		public AutoTopUpConfigV3 AutoTopUpConfig { get; set; }
		
		/// <summary>
		/// Decimal implied
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int64> Balance { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string Country { get; set; }
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		/// <summary>
		/// An optional flag for whether the source account has been deleted. Only present in the response if true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// An optional timestamp when the source account has been deleted. Only present in the response if deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletedAt")]
		public System.Nullable<System.DateTimeOffset> DeletedAt { get; set; }
		
		/// <summary>
		/// The funding reference (will not be set for DECOUPLED accounts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fundingRef")]
		public string FundingRef { get; set; }
		
		/// <summary>
		/// Source Account Id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifications")]
		public NotificationsV3 Notifications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// The physical account id (will not be set for DECOUPLED accounts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalAccountId")]
		public string PhysicalAccountId { get; set; }
		
		/// <summary>
		/// The physical account name (will not be set for DECOUPLED accounts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="physicalAccountName")]
		public string PhysicalAccountName { get; set; }
		
		/// <summary>
		/// The pooled account flag (will not be set for DECOUPLED accounts).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pooled")]
		public System.Nullable<System.Boolean> Pooled { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="railsId")]
		public string RailsId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// An optional flag for whether the source account has been deleted by a user. Only present in the response if true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userDeleted")]
		public System.Nullable<System.Boolean> UserDeleted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationsV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="minimumBalance")]
		public System.Nullable<System.Int32> MinimumBalance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSourceAccountResponseV3_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	/// <summary>
	/// The type of the MFA device
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MFAType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YUBIKEY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Notification
	{
		
		/// <summary>
		/// The API version of the notification schema
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// The category that the notification relates to. One of "payment", "payee", "debit" or "system"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// The name of event that led to this notification
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		/// <summary>
		/// This is a payor specific sequence number starting at 1 for the first notification sent
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sequenceNumber")]
		public long SequenceNumber { get; set; }
		
		/// <summary>
		/// One of the available set of source event payloads
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Ping Source { get; set; }
	}
	
	/// <summary>
	/// Base type for all onboarding status changed events
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnboardingStatusChanged : PayeeEvent
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageForResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="numberOfElements")]
		public System.Nullable<System.Int32> NumberOfElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalElements")]
		public System.Nullable<System.Int64> TotalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public FundingPayorStatusAuditResponse[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public LinkForResponse[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PageForResponse Page { get; set; }
	}
	
	/// <summary>
	/// List Payees Invitation Status Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagedPayeeInvitationStatusResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PayeeInvitationStatusResponseV3[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PagedPayeeResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedPayeeInvitationStatusResponseV3_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeInvitationStatusResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="gracePeriodEndDate")]
		public System.Nullable<System.DateOnly> GracePeriodEndDate { get; set; }
		
		/// <summary>
		/// Payee invitation status. One of the following values: ACCEPTED, PENDING, DECLINED
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invitationStatus")]
		public string InvitationStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagedPayeeInvitationStatusResponseV3_page
	{
		
		[System.Runtime.Serialization.DataMember(Name="numberOfElements")]
		public System.Nullable<System.Int32> NumberOfElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalElements")]
		public System.Nullable<System.Int32> TotalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	/// <summary>
	/// List Payees Invitation Status Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagedPayeeInvitationStatusResponseV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PayeeInvitationStatusResponseV4[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PagedPayeeResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedPayeeInvitationStatusResponseV3_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeInvitationStatusResponseV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="gracePeriodEndDate")]
		public System.Nullable<System.DateOnly> GracePeriodEndDate { get; set; }
		
		/// <summary>
		/// Payee invitation status. One of the following values: ACCEPTED, PENDING, DECLINED
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="invitationStatus")]
		public string InvitationStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
	}
	
	/// <summary>
	/// List Payees Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagedPayeeResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public GetPayeeListResponseV3[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PagedPayeeResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedPayeeResponseV3_page Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public PagedPayeeResponseV3_summary Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagedPayeeResponseV3_page
	{
		
		[System.Runtime.Serialization.DataMember(Name="numberOfElements")]
		public System.Nullable<System.Int32> NumberOfElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalElements")]
		public System.Nullable<System.Int32> TotalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagedPayeeResponseV3_summary
	{
		
		[System.Runtime.Serialization.DataMember(Name="totalInvitedCount")]
		public System.Nullable<System.Int32> TotalInvitedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalOnboardedCount")]
		public System.Nullable<System.Int32> TotalOnboardedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPayeesCount")]
		public System.Nullable<System.Int32> TotalPayeesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalRegisteredCount")]
		public System.Nullable<System.Int32> TotalRegisteredCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalWatchlistFailedCount")]
		public System.Nullable<System.Int32> TotalWatchlistFailedCount { get; set; }
	}
	
	/// <summary>
	/// List Payees Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagedPayeeResponseV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public GetPayeeListResponseV4[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PagedPayeeResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedPayeeResponseV3_page Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public PagedPayeeResponseV3_summary Summary { get; set; }
	}
	
	/// <summary>
	/// List Payees Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagedPaymentsResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PaymentV3[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PagedPayeeResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedPayeeInvitationStatusResponseV3_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentV3
	{
		
		/// <summary>
		/// The amount of the payment in minor units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// Populated only if the payment was automatically withdrawn during instruction for being invalid
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoWithdrawnReasonCode")]
		public string AutoWithdrawnReasonCode { get; set; }
		
		/// <summary>
		/// The currency that the payment was made in
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// Payee data associated with a payment. Either individual or company must be populated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payee")]
		public PayoutPayeeV3 Payee { get; set; }
		
		/// <summary>
		/// The id of the payment
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentId")]
		public string PaymentId { get; set; }
		
		/// <summary>
		/// <p>Any value here will override the memo value in the parent payout</p>
		///<p>This should be the reference field on the statement seen by the payee (but not via ACH)</p>
		///
		/// Max length: 40
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentMemo")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PaymentMemo { get; set; }
		
		/// <summary>
		/// <p>Metadata about the payment that may be relevant to the specific rails or remote system making the payout</p>
		///<p>The structure of the data will be dictated by the requirements of the payment rails</p>
		///
		/// Max length: 512
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentMetadata")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string PaymentMetadata { get; set; }
		
		/// <summary>
		/// A reference identifier for the payor for the given payee payment
		/// Max length: 40
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payorPaymentId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PayorPaymentId { get; set; }
		
		/// <summary>
		/// Indicates the 3rd party system involved in making this payment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="railsId")]
		public string RailsId { get; set; }
		
		/// <summary>
		/// The remoteId supplied by the payor that identifies the payee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		public string RemoteId { get; set; }
		
		/// <summary>
		/// <p>The identifier for the remote payments system if not Velo</p>
		///
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteSystemId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteSystemId { get; set; }
		
		/// <summary>
		/// The identifier of the source account to debit the payment from
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceAccountName")]
		public string SourceAccountName { get; set; }
		
		/// <summary>
		/// Current status of payment. One of the following values: SUBMITTED, ACCEPTED, REJECTED, WITHDRAWN, RETURNED, AWAITING_FUNDS, FUNDED, UNFUNDED, CANCELLED, BANK_PAYMENT_REQUESTED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The transmission method of the payment. One of the following values: ACH, SAME_DAY_ACH, WIRE, LOCAL, SWIFT
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transmissionType")]
		public string TransmissionType { get; set; }
		
		/// <summary>
		/// Can this paynent be withdrawn
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withdrawable")]
		public System.Nullable<System.Boolean> Withdrawable { get; set; }
	}
	
	/// <summary>
	/// Payee data associated with a payment. Either individual or company must be populated
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayoutPayeeV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public PayoutCompanyV3 Company { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public PayoutIndividualV3 Individual { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayoutCompanyV3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayoutIndividualV3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public PayoutNameV3 Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayoutNameV3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		public string LastName { get; set; }
	}
	
	/// <summary>
	/// List Users Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagedUserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public UserResponse[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PagedUserResponse_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedUserResponse_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserResponse
	{
		
		/// <summary>
		/// The payor or payee company name or null if the user is not a payor or payee user
		///
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string CompanyName { get; set; }
		
		/// <summary>
		/// the email address of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The payorId or payeeId or null if the user is not a payor or payee user
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public string EntityId { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// The id of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LastName { get; set; }
		
		/// <summary>
		/// If true the user is currently locked out and unable to log in
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockedOut")]
		public System.Nullable<System.Boolean> LockedOut { get; set; }
		
		/// <summary>
		/// A timestamp showing when the user was locked out
		///If null then the user is not currently locked out
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockedOutTimestamp")]
		public System.Nullable<System.DateTimeOffset> LockedOutTimestamp { get; set; }
		
		/// <summary>
		/// The status of the MFA device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mfaStatus")]
		public System.Nullable<UserResponseMfaStatus> MfaStatus { get; set; }
		
		/// <summary>
		/// The type of the MFA device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mfaType")]
		public MFADetailsMfa_type MfaType { get; set; }
		
		/// <summary>
		/// The main contact number for the user
		///
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryContactNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string PrimaryContactNumber { get; set; }
		
		/// <summary>
		/// The role(s) for the user
		///
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roles")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Role[] Roles { get; set; }
		
		/// <summary>
		/// The secondary contact number for the user
		///
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryContactNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string SecondaryContactNumber { get; set; }
		
		/// <summary>
		/// The phone number of a device that the user can receive sms messages on
		///
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smsNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string SmsNumber { get; set; }
		
		/// <summary>
		/// The status of the user
		///when the user has been invited but not yet enrolled they will have a PENDING status
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<UserResponseStatus> Status { get; set; }
		
		/// <summary>
		/// Indicates the type of user. Could be BACKOFFICE, PAYOR or PAYEE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userType")]
		public UserInfoUserType UserType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserResponseMfaStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNREGISTERED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Role
	{
		
		/// <summary>
		/// the name of the role
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagedUserResponse_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagedUserResponse_page
	{
		
		[System.Runtime.Serialization.DataMember(Name="numberOfElements")]
		public System.Nullable<System.Int32> NumberOfElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalElements")]
		public System.Nullable<System.Int32> TotalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PasswordRequest
	{
		
		/// <summary>
		/// a password that passes validation
		/// Required
		/// Max length: 128
		/// Min length: 8
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// Base type for all payable status changed events
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayableStatusChanged : PayeeEvent
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeAddressV3
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string City { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string Country { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countyOrProvince")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string CountyOrProvince { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line3")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line3 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line4")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line4 { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zipOrPostcode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string ZipOrPostcode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeAddressV4
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string City { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 50
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Country { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countyOrProvince")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string CountyOrProvince { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line3")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line3 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line4")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line4 { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zipOrPostcode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string ZipOrPostcode { get; set; }
	}
	
	/// <summary>
	/// List Payee Changes Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeDeltaResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PayeeDeltaV3[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PayeeDeltaResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PayeeDeltaResponseV3_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeDeltaV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="dbaName")]
		public string DbaName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Onboarded status. One of the following values: CREATED, INVITED, REGISTERED, ONBOARDED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onboardedStatus")]
		public string OnboardedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeCountry")]
		public string PayeeCountry { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeDeltaResponseV3_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeDeltaResponseV3_page
	{
		
		[System.Runtime.Serialization.DataMember(Name="numberOfElements")]
		public System.Nullable<System.Int32> NumberOfElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalElements")]
		public System.Nullable<System.Int32> TotalElements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalPages")]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	/// <summary>
	/// List Payee Changes Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeDeltaResponseV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PayeeDeltaV4[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PayeeDeltaResponseV4_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PayeeDeltaResponseV3_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeDeltaV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="dbaName")]
		public string DbaName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Payee onboarded status. One of the following value: CREATED, INVITED, REGISTERED, ONBOARDED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onboardedStatus")]
		public string OnboardedStatus { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeCountry")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string PayeeCountry { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeDeltaResponseV4_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeDetailResponseV3
	{
		
		/// <summary>
		/// The timestamp when the payee last accepted T&Cs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptTermsAndConditionsTimestamp")]
		public System.Nullable<System.DateTimeOffset> AcceptTermsAndConditionsTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PayeeAddressV3 Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cellphoneNumber")]
		public string CellphoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="challenge")]
		public ChallengeV3 Challenge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public CompanyV3 Company { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabledComment")]
		public string DisabledComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabledUpdatedTimestamp")]
		public System.Nullable<System.DateTimeOffset> DisabledUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enhancedKycCompleted")]
		public System.Nullable<System.Boolean> EnhancedKycCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gracePeriodEndDate")]
		public System.Nullable<System.DateOnly> GracePeriodEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public IndividualV3 Individual { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kycCompletedTimestamp")]
		public string KycCompletedTimestamp { get; set; }
		
		/// <summary>
		/// An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
		///See the /v1/supportedLanguages endpoint to list the available codes for an environment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketingOptInDecision")]
		public System.Nullable<System.Boolean> MarketingOptInDecision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketingOptInTimestamp")]
		public string MarketingOptInTimestamp { get; set; }
		
		/// <summary>
		/// Onboarded status. One of the following values: CREATED, INVITED, REGISTERED, ONBOARDED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onboardedStatus")]
		public string OnboardedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pausePayment")]
		public System.Nullable<System.Boolean> PausePayment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pausePaymentTimestamp")]
		public string PausePaymentTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
		
		/// <summary>
		/// Type of Payee. One of the following values: Individual, Company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeType")]
		public string PayeeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorRefs")]
		public PayeePayorRefV3[] PayorRefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="watchlistOverrideComment")]
		public string WatchlistOverrideComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="watchlistOverrideExpiresAtTimestamp")]
		public System.Nullable<System.DateTimeOffset> WatchlistOverrideExpiresAtTimestamp { get; set; }
		
		/// <summary>
		/// Current watchlist status. One of the following values: NONE, PENDING, REVIEW, PASSED, FAILED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watchlistStatus")]
		public string WatchlistStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="watchlistStatusUpdatedTimestamp")]
		public string WatchlistStatusUpdatedTimestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeDetailResponseV4
	{
		
		/// <summary>
		/// The timestamp when the payee last accepted T&Cs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptTermsAndConditionsTimestamp")]
		public System.Nullable<System.DateTimeOffset> AcceptTermsAndConditionsTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PayeeAddressV4 Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cellphoneNumber")]
		public string CellphoneNumber { get; set; }
		
		/// <summary>
		/// <p>Used to override the default challenge presented to the payee when they onboard</p>
		///<p>Not used after the payee has onboarded</p>
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challenge")]
		public ChallengeV4 Challenge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public CompanyV4 Company { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabledComment")]
		public string DisabledComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabledUpdatedTimestamp")]
		public System.Nullable<System.DateTimeOffset> DisabledUpdatedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enhancedKycCompleted")]
		public System.Nullable<System.Boolean> EnhancedKycCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gracePeriodEndDate")]
		public System.Nullable<System.DateOnly> GracePeriodEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public IndividualV4 Individual { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kycCompletedTimestamp")]
		public string KycCompletedTimestamp { get; set; }
		
		/// <summary>
		/// An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
		///See the /v1/supportedLanguages endpoint to list the available codes for an environment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketingOptInDecision")]
		public System.Nullable<System.Boolean> MarketingOptInDecision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marketingOptInTimestamp")]
		public string MarketingOptInTimestamp { get; set; }
		
		/// <summary>
		/// Payee onboarded status. One of the following values: CREATED, INVITED, REGISTERED, ONBOARDED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onboardedStatus")]
		public string OnboardedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pausePayment")]
		public System.Nullable<System.Boolean> PausePayment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pausePaymentTimestamp")]
		public string PausePaymentTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
		
		/// <summary>
		/// Type of Payee. One of the following values: Individual, Company
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeType")]
		public string PayeeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorRefs")]
		public PayeePayorRefV4[] PayorRefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="watchlistOverrideComment")]
		public string WatchlistOverrideComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="watchlistOverrideExpiresAtTimestamp")]
		public System.Nullable<System.DateTimeOffset> WatchlistOverrideExpiresAtTimestamp { get; set; }
		
		/// <summary>
		/// Current watchlist status. One of the following values: NONE, PENDING, REVIEW, PASSED, FAILED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="watchlistStatus")]
		public string WatchlistStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="watchlistStatusUpdatedTimestamp")]
		public string WatchlistStatusUpdatedTimestamp { get; set; }
	}
	
	/// <summary>
	/// Base type for all payee details changed events
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeDetailsChanged : PayeeEvent
	{
	}
	
	/// <summary>
	/// Base type for all Payee Events
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeEvent : SourceEvent
	{
		
		/// <summary>
		/// ID of this payee within the Velo platform
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
		
		/// <summary>
		/// The reasons for the event notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasons")]
		public PayeeEvent_allOf_reasons[] Reasons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeEvent_allOf_reasons
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeEvent_allOf
	{
		
		/// <summary>
		/// ID of this payee within the Velo platform
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payeeId")]
		public string PayeeId { get; set; }
		
		/// <summary>
		/// The reasons for the event notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasons")]
		public PayeeEvent_allOf_reasons[] Reasons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PayeeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INDIVIDUAL = 1,
	}
	
	/// <summary>
	/// The type of the payee
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PayeeTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Individual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Company = 1,
	}
	
	/// <summary>
	/// <p>All properties are optional</p>
	///<p>Only provided properties will be updated</p>
	///<p>Use null to null out a property that is allowed to be nullable</p>
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayeeUserSelfUpdateRequest
	{
		
		/// <summary>
		/// the email address of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LastName { get; set; }
		
		/// <summary>
		/// The main contact number for the user
		///
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryContactNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string PrimaryContactNumber { get; set; }
		
		/// <summary>
		/// The secondary contact number for the user
		///
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryContactNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string SecondaryContactNumber { get; set; }
		
		/// <summary>
		/// The phone number of a device that the user can receive sms messages on
		///
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smsNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string SmsNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentChannelCountry
	{
		
		/// <summary>
		/// The ISO code for the country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isoCountryCode")]
		public string IsoCountryCode { get; set; }
		
		/// <summary>
		/// The rules for the given country
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public PaymentChannelRule[] Rules { get; set; }
	}
	
	/// <summary>
	/// Rules that will get applied when creating or updating a payment channel for the given country
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentChannelRule
	{
		
		/// <summary>
		/// An optional description, or hint, as to how the user should enter the field value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// User friendly name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayOrder")]
		public System.Nullable<System.Int32> DisplayOrder { get; set; }
		
		/// <summary>
		/// <p>the rule element</p>
		///<p>will match a given element name for a payment channel configuration
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="element")]
		public string Element { get; set; }
		
		/// <summary>
		/// maximum length of the element data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxLength")]
		public System.Nullable<System.Int32> MaxLength { get; set; }
		
		/// <summary>
		/// mininum length of the element data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minLength")]
		public System.Nullable<System.Int32> MinLength { get; set; }
		
		/// <summary>
		/// is this element required
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="required")]
		public bool Required { get; set; }
		
		/// <summary>
		/// a regex to validate the element data
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="validation")]
		public string Validation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentChannelRulesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="bank")]
		public PaymentChannelCountry[] Bank { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentDelta
	{
		
		[System.Runtime.Serialization.DataMember(Name="paymentAmount")]
		public System.Nullable<System.Int32> PaymentAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentCurrency")]
		public string PaymentCurrency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentId")]
		public string PaymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorPaymentId")]
		public string PayorPaymentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payoutId")]
		public string PayoutId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceAmount")]
		public System.Nullable<System.Int32> SourceAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceCurrency")]
		public string SourceCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// List Payment Changes Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentDeltaResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PaymentDelta[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PagedPayeeResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedPayeeInvitationStatusResponseV3_page Page { get; set; }
	}
	
	/// <summary>
	/// List Payment Changes Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentDeltaResponseV1
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public PaymentDeltaV1[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PagedPayeeResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedPayeeInvitationStatusResponseV3_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentDeltaV1
	{
		
		[System.Runtime.Serialization.DataMember(Name="paymentAmount")]
		public System.Nullable<System.Int32> PaymentAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentCurrency")]
		public string PaymentCurrency { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentId")]
		public string PaymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorPaymentId")]
		public string PayorPaymentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payoutId")]
		public string PayoutId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceAmount")]
		public System.Nullable<System.Int32> SourceAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceCurrency")]
		public string SourceCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Base type for all Payment Events
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentEvent : SourceEvent
	{
		
		/// <summary>
		/// ID of this payment within the Velo platform
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentId")]
		public string PaymentId { get; set; }
		
		/// <summary>
		/// ID of this payment in the payors system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payorPaymentId")]
		public string PayorPaymentId { get; set; }
		
		/// <summary>
		/// Holder for all payor ids associated with a Payout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutPayorIds")]
		public PayoutPayorIds PayoutPayorIds { get; set; }
	}
	
	/// <summary>
	/// Holder for all payor ids associated with a Payout
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayoutPayorIds
	{
		
		/// <summary>
		/// The ID of the Payor providing the source account for the payout
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payoutFromPayorId")]
		public string PayoutFromPayorId { get; set; }
		
		/// <summary>
		/// The ID of the Payor that owns the Payee (on behalf of)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payoutToPayorId")]
		public string PayoutToPayorId { get; set; }
		
		/// <summary>
		/// The ID of the Payor that is submitting the payout
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="submittingPayorId")]
		public string SubmittingPayorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentEvent_allOf
	{
		
		/// <summary>
		/// ID of this payment within the Velo platform
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentId")]
		public string PaymentId { get; set; }
		
		/// <summary>
		/// ID of this payment in the payors system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payorPaymentId")]
		public string PayorPaymentId { get; set; }
		
		/// <summary>
		/// Holder for all payor ids associated with a Payout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutPayorIds")]
		public PayoutPayorIds PayoutPayorIds { get; set; }
	}
	
	/// <summary>
	/// Base type for all rejection or return payment events
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentRejectedOrReturned : PaymentStatusChanged
	{
		
		/// <summary>
		/// The Velo code that indicates why the payment was rejected or returned
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
		
		/// <summary>
		/// The description of why the payment was rejected or returned
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reasonMessage")]
		public string ReasonMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentRejectedOrReturned_allOf
	{
		
		/// <summary>
		/// The Velo code that indicates why the payment was rejected or returned
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
		
		/// <summary>
		/// The description of why the payment was rejected or returned
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reasonMessage")]
		public string ReasonMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentResponseV4_payout
	{
		
		/// <summary>
		/// Details of payor and principal participating in a payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutFrom")]
		public PayoutPayor PayoutFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payoutId")]
		public string PayoutId { get; set; }
		
		/// <summary>
		/// Details of payor and principal participating in a payout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutTo")]
		public PayoutPayor PayoutTo { get; set; }
	}
	
	/// <summary>
	/// Base type for all payment status changed events
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentStatusChanged : PaymentEvent
	{
		
		/// <summary>
		/// The new status of the payment. One of "SUBMITTED" "ACCEPTED" "REJECTED" "ACCEPTED_BY_RAILS" "CONFIRMED" "RETURNED" "WITHDRAWN"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PaymentStatusChanged_allOf
	{
		
		/// <summary>
		/// The new status of the payment. One of "SUBMITTED" "ACCEPTED" "REJECTED" "ACCEPTED_BY_RAILS" "CONFIRMED" "RETURNED" "WITHDRAWN"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorAddress
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string City { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 50
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Country { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countyOrProvince")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string CountyOrProvince { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line3")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line3 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line4")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line4 { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zipOrPostcode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string ZipOrPostcode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorAddressV2
	{
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string City { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 50
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Country { get; set; }
		
		/// <summary>
		/// Max length: 100
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countyOrProvince")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string CountyOrProvince { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 255
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="line1")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line1 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line2")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line2 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line3")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line3 { get; set; }
		
		/// <summary>
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line4")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Line4 { get; set; }
		
		/// <summary>
		/// Max length: 30
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zipOrPostcode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string ZipOrPostcode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorAmlTransaction
	{
		
		[System.Runtime.Serialization.DataMember(Name="credit")]
		public System.Nullable<System.Int64> Credit { get; set; }
		
		/// <summary>
		/// ISO 4217 3 character currency code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditCurrency")]
		public string CreditCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateFundingRequested")]
		public string DateFundingRequested { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debit")]
		public System.Nullable<System.Int64> Debit { get; set; }
		
		/// <summary>
		/// ISO 4217 3 character currency code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debitCurrency")]
		public string DebitCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundingType")]
		public string FundingType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fxApplied")]
		public System.Nullable<System.Double> FxApplied { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeEmail")]
		public string PayeeEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeName")]
		public string PayeeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeType")]
		public string PayeeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentAmount")]
		public System.Nullable<System.Int64> PaymentAmount { get; set; }
		
		/// <summary>
		/// ISO 4217 3 character currency code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentCurrency")]
		public string PaymentCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentMemo")]
		public string PaymentMemo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentRails")]
		public string PaymentRails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentStatus")]
		public string PaymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorPaymentId")]
		public string PayorPaymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectReason")]
		public string RejectReason { get; set; }
		
		/// <summary>
		/// Remote ID of the Payee, set by Payor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		public string RemoteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportTransactionType")]
		public string ReportTransactionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnCode")]
		public string ReturnCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnDescription")]
		public string ReturnDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnFee")]
		public string ReturnFee { get; set; }
		
		/// <summary>
		/// ISO 4217 3 character currency code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnFeeCurrency")]
		public string ReturnFeeCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnFeeDescription")]
		public string ReturnFeeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceAccount")]
		public string SourceAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionDate")]
		public System.Nullable<System.DateOnly> TransactionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionTime")]
		public string TransactionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorAmlTransactionV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="credit")]
		public System.Nullable<System.Int64> Credit { get; set; }
		
		/// <summary>
		/// ISO 4217 3 character currency code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditCurrency")]
		public string CreditCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateFundingRequested")]
		public string DateFundingRequested { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debit")]
		public System.Nullable<System.Int64> Debit { get; set; }
		
		/// <summary>
		/// ISO 4217 3 character currency code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debitCurrency")]
		public string DebitCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fundingType")]
		public string FundingType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fxApplied")]
		public System.Nullable<System.Double> FxApplied { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payeeType")]
		public string PayeeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentAmount")]
		public System.Nullable<System.Int64> PaymentAmount { get; set; }
		
		/// <summary>
		/// ISO 4217 3 character currency code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentCurrency")]
		public string PaymentCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentMemo")]
		public string PaymentMemo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentRails")]
		public string PaymentRails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentStatus")]
		public string PaymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorPaymentId")]
		public string PayorPaymentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rejectReason")]
		public string RejectReason { get; set; }
		
		/// <summary>
		/// Remote ID of the Payee, set by Payor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		public string RemoteId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reportTransactionType")]
		public string ReportTransactionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnCode")]
		public string ReturnCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnDescription")]
		public string ReturnDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnFee")]
		public string ReturnFee { get; set; }
		
		/// <summary>
		/// ISO 4217 3 character currency code
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnFeeCurrency")]
		public string ReturnFeeCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnFeeDescription")]
		public string ReturnFeeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceAccount")]
		public string SourceAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionDate")]
		public System.Nullable<System.DateOnly> TransactionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionTime")]
		public string TransactionTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorBrandingResponse
	{
		
		/// <summary>
		/// How the payor has chosen to refer to payees
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectiveAlias")]
		public string CollectiveAlias { get; set; }
		
		/// <summary>
		/// The payor’s 'Doing Business As' name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dbaName")]
		public string DbaName { get; set; }
		
		/// <summary>
		/// <p>The URL to use for this payor’s logo</p>
		///<p>This will be an immutable system-generated URL</p>
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="logoUrl")]
		public string LogoUrl { get; set; }
		
		/// <summary>
		/// The name of the payor
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorName")]
		public string PayorName { get; set; }
		
		/// <summary>
		/// The payor’s support contact address
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportContact")]
		public string SupportContact { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorCreateApiKeyRequest
	{
		
		/// <summary>
		/// Description of the key.
		/// Max length: 1024
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// A name for the key.
		/// Required
		/// Max length: 100
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
		
		/// <summary>
		/// <p>A role to assign to the key.</p>
		///<p>If you want your API key to have write access then assign the role velo.payor.admin</p>
		///<p>A later version will change this property from a list to string</p>
		///
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roles")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string[] Roles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorCreateApiKeyResponse
	{
		
		/// <summary>
		/// API Key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		/// <summary>
		/// API Secret
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiSecret")]
		public string ApiSecret { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorCreateApplicationRequest
	{
		
		/// <summary>
		/// Description of the application.
		/// Max length: 1024
		/// Min length: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the application.
		/// Required
		/// Max length: 100
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorEmailOptOutRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reminderEmailsOptOut")]
		public bool ReminderEmailsOptOut { get; set; }
	}
	
	/// <summary>
	/// List Payor Links Response Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorLinksResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PayorLinksResponse_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payors")]
		public PayorLinksResponse_payors[] Payors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorLinksResponse_links
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fromPayorId")]
		public string FromPayorId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkId")]
		public string LinkId { get; set; }
		
		/// <summary>
		/// The type of the link. One of the following values: PARENT_OF
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkType")]
		public string LinkType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="toPayorId")]
		public string ToPayorId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorLinksResponse_payors
	{
		
		/// <summary>
		/// Current KYC state. One of the following values: FAILED_KYC, PASSED_KYC, REQUIRES_KYC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kycState")]
		public string KycState { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorName")]
		public string PayorName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primaryContactEmail")]
		public string PrimaryContactEmail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorLogoRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorV1
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PayorAddress Address { get; set; }
		
		/// <summary>
		/// Whether or not the payor allows language choice in the UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowsLanguageChoice")]
		public System.Nullable<System.Boolean> AllowsLanguageChoice { get; set; }
		
		/// <summary>
		/// How the payor has chosen to refer to payees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectiveAlias")]
		public string CollectiveAlias { get; set; }
		
		/// <summary>
		/// The payor’s 'Doing Business As' name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dbaName")]
		public string DbaName { get; set; }
		
		/// <summary>
		/// The funding account name to be used for the payor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fundingAccountAccountName")]
		public string FundingAccountAccountName { get; set; }
		
		/// <summary>
		/// The funding account number to be used for the payor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fundingAccountAccountNumber")]
		public string FundingAccountAccountNumber { get; set; }
		
		/// <summary>
		/// The funding account routing number to be used for the payor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fundingAccountRoutingNumber")]
		public string FundingAccountRoutingNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includesReports")]
		public System.Nullable<System.Boolean> IncludesReports { get; set; }
		
		/// <summary>
		/// The kyc state of the payor. One of the following values: FAILED_KYC, PASSED_KYC, REQUIRES_KYC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kycState")]
		public string KycState { get; set; }
		
		/// <summary>
		/// The payor’s language preference. Must be one of [EN, FR].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Whether or not the payor has been manually locked by the backoffice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualLockout")]
		public System.Nullable<System.Boolean> ManualLockout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxMasterPayorAdmins")]
		public System.Nullable<System.Int32> MaxMasterPayorAdmins { get; set; }
		
		/// <summary>
		/// The grace period for paying payees in days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeGracePeriodDays")]
		public System.Nullable<System.Int32> PayeeGracePeriodDays { get; set; }
		
		/// <summary>
		/// Whether grace period processing is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeGracePeriodProcessingEnabled")]
		public System.Nullable<System.Boolean> PayeeGracePeriodProcessingEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// The name of the payor.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorName")]
		public string PayorName { get; set; }
		
		/// <summary>
		/// Primary contact email for the payor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryContactEmail")]
		public string PrimaryContactEmail { get; set; }
		
		/// <summary>
		/// Name of primary contact for the payor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryContactName")]
		public string PrimaryContactName { get; set; }
		
		/// <summary>
		/// Primary contact phone number for the payor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryContactPhone")]
		public string PrimaryContactPhone { get; set; }
		
		/// <summary>
		/// Whether or not the payor has opted-out of reminder emails being sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reminderEmailsOptOut")]
		public System.Nullable<System.Boolean> ReminderEmailsOptOut { get; set; }
		
		/// <summary>
		/// The payor’s support contact email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportContact")]
		public string SupportContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transmissionTypes")]
		public TransmissionTypes TransmissionTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransmissionTypes
	{
		
		/// <summary>
		/// Whether the Payor is allowed to pay via ACH
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ACH { get; set; }
		
		/// <summary>
		/// Whether the Payor is allowed to pay via same day ACH
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool SAME_DAY_ACH { get; set; }
		
		/// <summary>
		/// Whether the Payor is allowed to pay via wire
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool WIRE { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayorV2
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PayorAddressV2 Address { get; set; }
		
		/// <summary>
		/// Whether or not the payor allows language choice in the UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowsLanguageChoice")]
		public System.Nullable<System.Boolean> AllowsLanguageChoice { get; set; }
		
		/// <summary>
		/// How the payor has chosen to refer to payees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectiveAlias")]
		public string CollectiveAlias { get; set; }
		
		/// <summary>
		/// The payor’s 'Doing Business As' name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dbaName")]
		public string DbaName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includesReports")]
		public System.Nullable<System.Boolean> IncludesReports { get; set; }
		
		/// <summary>
		/// The kyc state of the payor. One of the following values: FAILED_KYC, PASSED_KYC, REQUIRES_KYC
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kycState")]
		public string KycState { get; set; }
		
		/// <summary>
		/// The payor’s language preference. Must be one of [EN, FR]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="managingPayees")]
		public System.Nullable<System.Boolean> ManagingPayees { get; set; }
		
		/// <summary>
		/// Whether or not the payor has been manually locked by the backoffice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualLockout")]
		public System.Nullable<System.Boolean> ManualLockout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxMasterPayorAdmins")]
		public System.Nullable<System.Int32> MaxMasterPayorAdmins { get; set; }
		
		/// <summary>
		/// Is Open Banking supported for this payor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openBankingEnabled")]
		public System.Nullable<System.Boolean> OpenBankingEnabled { get; set; }
		
		/// <summary>
		/// The grace period for paying payees in days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeGracePeriodDays")]
		public System.Nullable<System.Int32> PayeeGracePeriodDays { get; set; }
		
		/// <summary>
		/// Whether grace period processing is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeGracePeriodProcessingEnabled")]
		public System.Nullable<System.Boolean> PayeeGracePeriodProcessingEnabled { get; set; }
		
		/// <summary>
		/// The id of the payment rails
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentRails")]
		public string PaymentRails { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// The name of the payor.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorName")]
		public string PayorName { get; set; }
		
		/// <summary>
		/// A unique identifier that an external system uses to reference the payor in their system
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payorXid")]
		public string PayorXid { get; set; }
		
		/// <summary>
		/// Primary contact email for the payor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryContactEmail")]
		public string PrimaryContactEmail { get; set; }
		
		/// <summary>
		/// Name of primary contact for the payor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryContactName")]
		public string PrimaryContactName { get; set; }
		
		/// <summary>
		/// Primary contact phone number for the payor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryContactPhone")]
		public string PrimaryContactPhone { get; set; }
		
		/// <summary>
		/// The source of the payorXid, default is null which means Velo
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Whether or not the payor has opted-out of reminder emails being sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reminderEmailsOptOut")]
		public System.Nullable<System.Boolean> ReminderEmailsOptOut { get; set; }
		
		/// <summary>
		/// The payor’s supported remote systems by id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteSystemIds")]
		public string[] RemoteSystemIds { get; set; }
		
		/// <summary>
		/// The payor’s support contact email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportContact")]
		public string SupportContact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transmissionTypes")]
		public TransmissionTypes_2 TransmissionTypes { get; set; }
		
		/// <summary>
		/// USD in minor units
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usdTxnValueReportingThreshold")]
		public System.Nullable<System.Int32> UsdTxnValueReportingThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wuCustomerId")]
		public string WuCustomerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransmissionTypes_2
	{
		
		/// <summary>
		/// Whether the Payor is allowed to pay via ACH
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool ACH { get; set; }
		
		/// <summary>
		/// Whether the Payor is allowed to pay via same day ACH
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool SAME_DAY_ACH { get; set; }
		
		/// <summary>
		/// Whether the Payor is allowed to pay via wire
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool WIRE { get; set; }
	}
	
	/// <summary>
	/// Details relating to a payout that was executed via a schedule or is still waiting to be executed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayoutScheduleV3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notificationsEnabled")]
		public bool NotificationsEnabled { get; set; }
		
		/// <summary>
		/// The current status of the payout schedule. One of the following values: SCHEDULED, EXECUTED, FAILED
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduleStatus")]
		public string ScheduleStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledAt")]
		public System.DateTimeOffset ScheduledAt { get; set; }
		
		/// <summary>
		/// ID of the user or application that scheduled the payout
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledByPrincipalId")]
		public string ScheduledByPrincipalId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledFor")]
		public System.DateTimeOffset ScheduledFor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PayoutSummaryResponseV3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acceptedPayments")]
		public AcceptedPaymentV3[] AcceptedPayments { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public SourceAccountV3[] Accounts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fxSummaries")]
		public QuoteFxSummaryV3[] FxSummaries { get; set; }
		
		/// <summary>
		/// The number of payments that were accepted in the payout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentsAccepted")]
		public System.Nullable<System.Int32> PaymentsAccepted { get; set; }
		
		/// <summary>
		/// The number of payments that were rejected in the payout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentsRejected")]
		public System.Nullable<System.Int32> PaymentsRejected { get; set; }
		
		/// <summary>
		/// The number of payments that were submitted in the payout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentsSubmitted")]
		public System.Nullable<System.Int32> PaymentsSubmitted { get; set; }
		
		/// <summary>
		/// The number of payments that were withdrawn in the payout
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentsWithdrawn")]
		public int PaymentsWithdrawn { get; set; }
		
		/// <summary>
		/// The id of the payout
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payoutId")]
		public string PayoutId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rejectedPayments")]
		public RejectedPaymentV3[] RejectedPayments { get; set; }
		
		/// <summary>
		/// Details relating to a payout that was executed via a schedule or is still waiting to be executed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public PayoutScheduleV3 Schedule { get; set; }
		
		/// <summary>
		/// The status of the payout (one of SUBMITTED, ACCEPTED, REJECTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, WITHDRAWN)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceAccountV3
	{
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The id of the payout
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceAccountId")]
		public string SourceAccountId { get; set; }
		
		/// <summary>
		/// The name of the source account as referencec in the payout
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceAccountName")]
		public string SourceAccountName { get; set; }
		
		/// <summary>
		/// The total amount (in mnor units) that will be debited from the source account for the payout
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPayoutCost")]
		public int TotalPayoutCost { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuoteFxSummaryV3
	{
		
		/// <summary>
		/// Timestamp of when the quote was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.DateTimeOffset CreationTime { get; set; }
		
		/// <summary>
		/// The timestamp for when the quote will expire
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryTime")]
		public System.Nullable<System.DateTimeOffset> ExpiryTime { get; set; }
		
		/// <summary>
		/// Current status of the funding associated with this quote. One of the following values: UNFUNDED, INSTRUCTED, FUNDED
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fundingStatus")]
		public string FundingStatus { get; set; }
		
		/// <summary>
		/// The inverse conversion rate (from paymnent currency to source currency)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invertedRate")]
		public System.Nullable<System.Single> InvertedRate { get; set; }
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="paymentCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string PaymentCurrency { get; set; }
		
		/// <summary>
		/// The id of the created quote
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quoteId")]
		public string QuoteId { get; set; }
		
		/// <summary>
		/// The conversion rate (from the source currency to the payment currency)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public float Rate { get; set; }
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceCurrency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string SourceCurrency { get; set; }
		
		/// <summary>
		/// Current status of the fx quote. One of the following values: UNQUOTED, QUOTED, EXPIRED, EXECUTED, REJECTED
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The amount (in minor units) that the payee will receive
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalPaymentAmount")]
		public int TotalPaymentAmount { get; set; }
		
		/// <summary>
		/// The amount (in minor units) that will be paid from the source account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalSourceAmount")]
		public int TotalSourceAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RejectedPaymentV3
	{
		
		/// <summary>
		/// The amount of the payment in minor units
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public int Amount { get; set; }
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currencyType")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string CurrencyType { get; set; }
		
		/// <summary>
		/// If the payment was submitted in a csv payout then this will be the line number of the payment in the file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNumber")]
		public System.Nullable<System.Int32> LineNumber { get; set; }
		
		/// <summary>
		/// A more general rejection message than the reason property
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// <p>Metadata about the payment that may be relevant to the specific rails or remote system making the payout</p>
		///<p>The structure of the data will be dictated by the requirements of the payment rails</p>
		///
		/// Max length: 512
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentMetadata")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		public string PaymentMetadata { get; set; }
		
		/// <summary>
		/// A reference identifier for the payor for the given payee payment
		/// Required
		/// Max length: 40
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorPaymentId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string PayorPaymentId { get; set; }
		
		/// <summary>
		/// The reason for the payment being rejected
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// The reason code as determined by Velo
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
		
		/// <summary>
		/// The remoteId supplied by the payor that identifies the payee
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		public string RemoteId { get; set; }
		
		/// <summary>
		/// <p>The identifier for the remote payments system if not Velo</p>
		///
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remoteSystemId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteSystemId { get; set; }
		
		/// <summary>
		/// The identifier of the source account to debit the payment from
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceAccountName")]
		public string SourceAccountName { get; set; }
	}
	
	/// <summary>
	/// Ping event for testing the webhook integration. Can be initiated via the Web UI.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ping
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PingResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhookId")]
		public string WebhookId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryBatchResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="failureCount")]
		public System.Nullable<System.Int64> FailureCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failures")]
		public FailedSubmissionV3[] Failures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingCount")]
		public System.Nullable<System.Int64> PendingCount { get; set; }
		
		/// <summary>
		/// Batch Status. One of the following values: SUBMITTED, ACCEPTED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryBatchResponseV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="failureCount")]
		public System.Nullable<System.Int64> FailureCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failures")]
		public FailedSubmissionV4[] Failures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingCount")]
		public System.Nullable<System.Int64> PendingCount { get; set; }
		
		/// <summary>
		/// Batch Status. One of the following values: SUBMITTED, ACCEPTED
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QuoteResponseV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="fxSummaries")]
		public QuoteFxSummaryV3[] FxSummaries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegionV2
	{
		
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterSmsRequest
	{
		
		/// <summary>
		/// The phone number of a device that the user can receive sms messages on
		///
		/// Required
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="smsNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string SmsNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResendTokenRequest
	{
		
		/// <summary>
		/// The type of the token to resend
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tokenType")]
		public ResendTokenRequestTokenType TokenType { get; set; }
		
		/// <summary>
		/// <p>Optional property that MUST be suppied when manually verifying a user</p>
		///<p>The user's smsNumber is registered via a separate endpoint and an OTP sent to them</p>
		///
		/// Max length: 6
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationCode")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string VerificationCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResendTokenRequestTokenType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVITE_MFA_USER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFA_REGISTRATION = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResetPasswordRequest
	{
		
		/// <summary>
		/// the email address of the user requesting the reset password
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleUpdateRequest
	{
		
		/// <summary>
		/// <p>The role(s) for the user</p>
		///<p>The role must exist</p>
		///<p>The role can be a custom role or a system role but the invoker must have the permissions to assign the role</p>
		///<p>System roles are: backoffice.admin, payor.master_admin, payor.admin, payor.support</p>
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public string[] Roles { get; set; }
		
		/// <summary>
		/// <p>Optional property that MUST be suppied when manually verifying a user</p>
		///<p>The user's smsNumber is registered via a separate endpoint and an OTP sent to them</p>
		///
		/// Max length: 6
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationCode")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string VerificationCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SchedulePayoutRequestV3
	{
		
		/// <summary>
		/// Flag to indicate whether to receive notifications when scheduled payout is processed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notificationsEnabled")]
		public bool NotificationsEnabled { get; set; }
		
		/// <summary>
		/// UTC timestamp for instructing the payout. Format is ISO-8601.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledFor")]
		public System.DateTimeOffset ScheduledFor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelfMFATypeUnregisterRequest
	{
		
		/// <summary>
		/// The type of the MFA device
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mfaType")]
		public MFADetailsMfa_type MfaType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelfUpdatePasswordRequest
	{
		
		/// <summary>
		/// The new password
		/// Required
		/// Max length: 128
		/// Min length: 8
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newPassword")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string NewPassword { get; set; }
		
		/// <summary>
		/// The user's current password
		/// Required
		/// Max length: 128
		/// Min length: 8
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oldPassword")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string OldPassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetNotificationsRequest
	{
		
		/// <summary>
		/// Amount to set as minimum balance in minor units
		/// Required
		/// Minimum: 0
		/// Maximum: 9999999999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minimumBalance")]
		[System.ComponentModel.DataAnnotations.Range(0, 9999999999)]
		public long MinimumBalance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetNotificationsRequest_2
	{
		
		/// <summary>
		/// Amount to set as minimum balance for notifications in minor units
		/// Required
		/// Minimum: 0
		/// Maximum: 9999999999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minimumBalance")]
		[System.ComponentModel.DataAnnotations.Range(0, 9999999999)]
		public long MinimumBalance { get; set; }
	}
	
	/// <summary>
	/// Base type for each source event payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceEvent
	{
		
		/// <summary>
		/// ISO8601 timestamp indicating when the source event was created
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// UUID id of the source event in the Velo platform
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// OA3 Schema type name for the source info which is used as the discriminator value to ensure that data binding works correctly
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public string SourceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SupportedCountriesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public SupportedCountry[] Countries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SupportedCountry
	{
		
		[System.Runtime.Serialization.DataMember(Name="currencies")]
		public string[] Currencies { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isoCountryCode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string IsoCountryCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SupportedCountriesResponseV2
	{
		
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public SupportedCountryV2[] Countries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SupportedCountryV2
	{
		
		[System.Runtime.Serialization.DataMember(Name="currencies")]
		public string[] Currencies { get; set; }
		
		/// <summary>
		/// Valid ISO 3166 2 character country code. See the <a href="https://www.iso.org/iso-3166-country-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Max length: 2
		/// Min length: 2
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isoCountryCode")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string IsoCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public RegionV2[] Regions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SupportedCurrencyResponseV2
	{
		
		[System.Runtime.Serialization.DataMember(Name="currencies")]
		public SupportedCurrencyV2[] Currencies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SupportedCurrencyV2
	{
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The max amount allowed in this currency
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPaymentAmount")]
		public System.Nullable<System.Int32> MaxPaymentAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferRequestV2
	{
		
		/// <summary>
		/// Amount to transfer, in minor units
		/// Required
		/// Minimum: 1
		/// Maximum: 9999999999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, 9999999999)]
		public long Amount { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 3
		/// Min length: 3
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		public string Currency { get; set; }
		
		/// <summary>
		/// The 'to' source account id, which will be credited
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="toSourceAccountId")]
		public string ToSourceAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransferRequestV3
	{
		
		/// <summary>
		/// Amount to transfer, in minor units
		/// Required
		/// Minimum: 1
		/// Maximum: 9999999999
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		[System.ComponentModel.DataAnnotations.Range(1, 9999999999)]
		public long Amount { get; set; }
		
		/// <summary>
		/// Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
		/// Required
		/// Max length: 3
		/// Min length: 3
		/// Pattern: ^[A-Z]{3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(3)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3}$")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The 'to' source account id, which will be credited
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="toSourceAccountId")]
		public string ToSourceAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnregisterMFARequest
	{
		
		/// <summary>
		/// The type of the MFA device
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mfaType")]
		public UnregisterMFARequestMfaType MfaType { get; set; }
		
		/// <summary>
		/// <p>Optional property that MUST be suppied when manually verifying a user</p>
		///<p>The user's smsNumber is registered via a separate endpoint and an OTP sent to them</p>
		///
		/// Max length: 6
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationCode")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string VerificationCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UnregisterMFARequestMfaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YUBIKEY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePayeeDetailsRequestV3
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PayeeAddressV3 Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="challenge")]
		public ChallengeV3 Challenge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public CompanyV3 Company { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public IndividualV3 Individual { get; set; }
		
		/// <summary>
		/// An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
		///See the /v1/supportedLanguages endpoint to list the available codes for an environment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The type of the payee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeType")]
		public CreatePayeeV4Type PayeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePayeeDetailsRequestV4
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PayeeAddressV4 Address { get; set; }
		
		/// <summary>
		/// <p>Used to override the default challenge presented to the payee when they onboard</p>
		///<p>Not used after the payee has onboarded</p>
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challenge")]
		public ChallengeV4 Challenge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="company")]
		public CompanyV4 Company { get; set; }
		
		/// <summary>
		/// The phone number of a device that the payee wishes to receive sms messages on
		///
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactSmsNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string ContactSmsNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="individual")]
		public IndividualV4 Individual { get; set; }
		
		/// <summary>
		/// An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
		///See the /v1/supportedLanguages endpoint to list the available codes for an environment.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// The type of the payee
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payeeType")]
		public CreatePayeeV4Type PayeeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRemoteIdRequestV3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRemoteIdRequestV4
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="remoteId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string RemoteId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWebhookRequest
	{
		
		/// <summary>
		/// the authorization header to include with the notification.
		/// Max length: 1000
		/// Min length: 4
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationHeader")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string AuthorizationHeader { get; set; }
		
		/// <summary>
		/// The notification categories to enable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// whether the webhook is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// the webhook URL to use.
		/// Max length: 2000
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string WebhookUrl { get; set; }
	}
	
	/// <summary>
	/// <p>All properties are optional</p>
	///<p>Only provided properties will be updated</p>
	///<p>Use null to null out a property that is allowed to be nullable</p>
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserDetailsUpdateRequest
	{
		
		/// <summary>
		/// the email address of the user
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string FirstName { get; set; }
		
		/// <summary>
		/// Max length: 128
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string LastName { get; set; }
		
		/// <summary>
		/// The type of the MFA device
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mfaType")]
		public MFADetailsMfa_type MfaType { get; set; }
		
		/// <summary>
		/// The main contact number for the user
		///
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryContactNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string PrimaryContactNumber { get; set; }
		
		/// <summary>
		/// The secondary contact number for the user
		///
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryContactNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string SecondaryContactNumber { get; set; }
		
		/// <summary>
		/// The phone number of a device that the user can receive sms messages on
		///
		/// Pattern: ^\+[1-9]\d{1,14}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smsNumber")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\+[1-9]\d{1,14}$")]
		public string SmsNumber { get; set; }
		
		/// <summary>
		/// <p>Optional property that MUST be suppied when manually verifying a user</p>
		///<p>The user's smsNumber is registered via a separate endpoint and an OTP sent to them</p>
		///
		/// Max length: 6
		/// Min length: 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationCode")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(6)]
		public string VerificationCode { get; set; }
	}
	
	/// <summary>
	/// The status of the user
	///when the user has been invited but not yet enrolled they will have a PENDING status
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKOFFICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYEE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UserType_2
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKOFFICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYOR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYEE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidatePasswordResponse
	{
		
		/// <summary>
		/// More secure passwords are given a higher score. <P>
		///For a password to be acceptable for use in Velo, it must score at least 3
		///
		/// Minimum: 0
		/// Maximum: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		[System.ComponentModel.DataAnnotations.Range(0, 4)]
		public System.Nullable<System.Int32> Score { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suggestions")]
		public string[] Suggestions { get; set; }
		
		/// <summary>
		/// if true then the password can be accepted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valid")]
		public System.Nullable<System.Boolean> Valid { get; set; }
		
		/// <summary>
		/// Any warning message as a reason for the given score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warning")]
		public string Warning { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizationHeader")]
		public string AuthorizationHeader { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payorId")]
		public string PayorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		public string WebhookUrl { get; set; }
	}
	
	/// <summary>
	/// List Webhooks Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhooksResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public WebhookResponse[] Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PagedPayeeResponseV3_links[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public PagedPayeeInvitationStatusResponseV3_page Page { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WithdrawPaymentRequest
	{
		
		/// <summary>
		/// Reason for withdrawal
		/// Required
		/// Max length: 256
		/// Min length: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inline_response_400
	{
		
		/// <summary>
		/// a unique identifier to track a request or related sequence of requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// one or more errors
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// this will mirror the Status-Code part of the Status-Line http response header and is included for extra clarity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatusCode")]
		public System.Nullable<System.Int32> HttpStatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inline_response_401
	{
		
		/// <summary>
		/// a unique identifier to track a request or related sequence of requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// one or more errors
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// this will mirror the Status-Code part of the Status-Line http response header and is included for extra clarity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatusCode")]
		public System.Nullable<System.Int32> HttpStatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inline_response_403
	{
		
		/// <summary>
		/// a unique identifier to track a request or related sequence of requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// one or more errors
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// this will mirror the Status-Code part of the Status-Line http response header and is included for extra clarity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatusCode")]
		public System.Nullable<System.Int32> HttpStatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inline_response_404
	{
		
		/// <summary>
		/// a unique identifier to track a request or related sequence of requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// one or more errors
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// this will mirror the Status-Code part of the Status-Line http response header and is included for extra clarity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatusCode")]
		public System.Nullable<System.Int32> HttpStatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inline_response_409
	{
		
		/// <summary>
		/// a unique identifier to track a request or related sequence of requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// one or more errors
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// this will mirror the Status-Code part of the Status-Line http response header and is included for extra clarity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatusCode")]
		public System.Nullable<System.Int32> HttpStatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inline_response_412
	{
		
		/// <summary>
		/// a unique identifier to track a request or related sequence of requests
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// one or more errors
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Error[] Errors { get; set; }
		
		/// <summary>
		/// this will mirror the Status-Code part of the Status-Line http response header and is included for extra clarity
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatusCode")]
		public System.Nullable<System.Int32> HttpStatusCode { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Authentication endpoint
		/// <p>Use this endpoint to obtain an access token for calling Velo Payments APIs. </p>
		/// <p>You need your API key and API secret issued by Velo</p>
		/// <p>To login and get an access token the API key and API secret must be Base64 encoded by concatenating them with a colon between them</p>
		/// <p>e.g. Given an ApiKey: 44a9537d-d55d-4b47-8082-14061c2bcdd8 and ApiSecret: c396b26b-137a-44fd-87f5-34631f8fd529</p>
		/// <p>Using a Base64 encode function Base64Encoder().encode("44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529")</p>
		/// <p>Included as a Basic Authorization header: -H "Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==" </p>
		/// 
		/// VeloAuth v1/authenticate
		/// </summary>
		/// <param name="grant_type">OAuth grant type. Should use 'client_credentials'</param>
		/// <returns>Valid Authenication response</returns>
		public async Task<AuthResponse> VeloAuthAsync(string grant_type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/authenticate?grant_type=" + (grant_type==null? "" : System.Uri.EscapeDataString(grant_type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Funding Audit Delta
		/// Get funding audit deltas for a payor
		/// ListFundingAuditDeltas v1/deltas/fundings
		/// </summary>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <returns>Funding Account Deltas</returns>
		public async Task<PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse> ListFundingAuditDeltasAsync(string payorId, System.DateTimeOffset updatedSince, int page, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/deltas/fundings?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&updatedSince=" + updatedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&page="+page+"&pageSize="+pageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PageResourceFundingPayorStatusAuditResponseFundingPayorStatusAuditResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// V1 List Payment Changes
		/// Deprecated (use /v4/payments/deltas instead)
		/// ListPaymentChanges v1/deltas/payments
		/// </summary>
		/// <param name="payorId">The Payor ID to find associated Payments</param>
		/// <param name="updatedSince">The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <returns>Details of Payment Changes</returns>
		public async Task<PaymentDeltaResponseV1> ListPaymentChangesAsync(string payorId, System.DateTimeOffset updatedSince, int page, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/deltas/payments?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&updatedSince=" + updatedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&page="+page+"&pageSize="+pageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentDeltaResponseV1>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Funding
		/// Get Funding by Id
		/// GetFundingByIdV1 v1/fundings/{fundingId}
		/// </summary>
		/// <returns>Funding response</returns>
		public async Task<FundingResponse> GetFundingByIdV1Async(string fundingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/fundings/"+ (fundingId==null? "" : System.Uri.EscapeDataString(fundingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FundingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Logout
		/// <p>Given a valid access token in the header then log out the authenticated user or client </p>
		/// <p>Will revoke the token</p>
		/// 
		/// Logout v1/logout
		/// </summary>
		public async Task LogoutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/logout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reset password
		/// <p>Reset password </p>
		/// <p>An email with an embedded link will be sent to the receipient of the email address </p>
		/// <p>The link will contain a token to be used for resetting the password </p>
		/// 
		/// ResetPassword v1/password/reset
		/// </summary>
		/// <param name="requestBody">An Email address to send the reset password link to</param>
		public async Task ResetPasswordAsync(ResetPasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/password/reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Payment Channel Country Rules
		/// List the country specific payment channel rules.
		/// ListPaymentChannelRulesV1 v1/paymentChannelRules
		/// </summary>
		/// <returns>List Payment Channel Country Rules</returns>
		public async Task<PaymentChannelRulesResponse> ListPaymentChannelRulesV1Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/paymentChannelRules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentChannelRulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// V1 Get Fundings for Payor
		/// Deprecated (use /v4/paymentaudit/fundings)
		/// GetFundingsV1 v1/paymentaudit/fundings
		/// </summary>
		/// <param name="payorId">The account owner Payor ID</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="sort">List of sort fields. Example: ```?sort=destinationCurrency:asc,destinationAmount:asc```
		///Default is no sort. The supported sort fields are: dateTime and amount.
		///</param>
		/// <returns>Get Fundings normal response</returns>
		public async Task<GetFundingsResponse> GetFundingsV1Async(string payorId, int page, int pageSize, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/paymentaudit/fundings?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetFundingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// V1 Get Payout Statistics
		/// Deprecated (Use /v4/paymentaudit/payoutStatistics)
		/// GetPayoutStatsV1 v1/paymentaudit/payoutStatistics
		/// </summary>
		/// <param name="payorId">The account owner Payor ID. Required for external users.</param>
		/// <returns>Payout Statistics response</returns>
		public async Task<GetPayoutStatistics> GetPayoutStatsV1Async(string payorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/paymentaudit/payoutStatistics?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPayoutStatistics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Withdraw a Payment
		/// <p>withdraw a payment </p>
		/// <p>There are a variety of reasons why this can fail</p>
		/// <ul>
		/// <li>the payment must be in a state of 'accepted' or 'unfunded'</li>
		/// <li>the payout must not be in a state of 'instructed'</li>
		/// </ul>
		/// 
		/// WithdrawPayment v1/payments/{paymentId}/withdraw
		/// </summary>
		/// <param name="paymentId">Id of the Payment</param>
		/// <param name="requestBody">details for withdrawal</param>
		public async Task WithdrawPaymentAsync(string paymentId, WithdrawPaymentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payments/"+ (paymentId==null? "" : System.Uri.EscapeDataString(paymentId))+"/withdraw";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Payor Links
		/// <p>If the payor is set up as part of a hierarchy you can use this API to traverse the hierarchy</p>
		/// 
		/// PayorLinksV1 v1/payorLinks
		/// </summary>
		/// <param name="descendantsOfPayor">The Payor ID from which to start the query to show all descendants</param>
		/// <param name="parentOfPayor">Query for the parent payor details for this payor id</param>
		/// <param name="fields"><p>List of additional Payor fields to include in the response for each Payor</p>
		///<p>The values of payorId and payorName are always included for each Payor by default</p>
		///<p>You can add fields to the response for each payor by including them in the fields parameter separated by commas</p>
		///<p>The supported fields are any combination of: primaryContactEmail,kycState</p>
		///</param>
		/// <returns>Details of Payor Links</returns>
		public async Task<PayorLinksResponse> PayorLinksV1Async(string descendantsOfPayor, string parentOfPayor, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payorLinks?descendantsOfPayor=" + (descendantsOfPayor==null? "" : System.Uri.EscapeDataString(descendantsOfPayor))+"&parentOfPayor=" + (parentOfPayor==null? "" : System.Uri.EscapeDataString(parentOfPayor))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayorLinksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Payor Link
		/// This endpoint allows you to create a payor link.
		/// CreatePayorLinks v1/payorLinks
		/// </summary>
		/// <param name="requestBody">Request to create a payor link</param>
		public async Task CreatePayorLinksAsync(CreatePayorLinkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payorLinks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Payor
		/// <p>Get a Single Payor by Id.</p>
		/// <p>deprecated since v2.10 - Use /v2/payors
		/// 
		/// GetPayorByIdV1 v1/payors/{payorId}
		/// </summary>
		/// <param name="payorId">The Payor Id</param>
		/// <returns>Get Payor Details</returns>
		public async Task<PayorV1> GetPayorByIdV1Async(string payorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payors/"+ (payorId==null? "" : System.Uri.EscapeDataString(payorId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayorV1>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Application
		/// <p>Create an application for the given Payor ID.</p>
		/// <p>Applications provide a means to group your API Keys</p>
		/// <p>For example you might have an SAP application that you wish to integrate with Velo</p>
		/// <p>You can create an application and then create one or more API keys for the application</p>
		/// 
		/// PayorCreateApplicationV1 v1/payors/{payorId}/applications
		/// </summary>
		/// <param name="payorId">The Payor Id</param>
		/// <param name="requestBody">Details of application to create</param>
		public async Task PayorCreateApplicationV1Async(string payorId, PayorCreateApplicationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payors/"+ (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"/applications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create API Key
		/// <p>Create an an API key for the given payor Id and application Id</p>
		/// <p>You can create multiple API Keys for a given application</p>
		/// <p>API Keys are programmatic users for integrating your application with the Velo platform</p>
		/// 
		/// PayorCreateApiKeyV1 v1/payors/{payorId}/applications/{applicationId}/keys
		/// </summary>
		/// <param name="payorId">The Payor Id</param>
		/// <param name="applicationId">Application ID</param>
		/// <param name="requestBody">Details of application API key to create</param>
		/// <returns>HTTP Ok, key created</returns>
		public async Task<PayorCreateApiKeyResponse> PayorCreateApiKeyV1Async(string payorId, string applicationId, PayorCreateApiKeyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payors/"+ (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"/applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/keys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayorCreateApiKeyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Branding
		/// Get the payor branding details.
		/// PayorGetBranding v1/payors/{payorId}/branding
		/// </summary>
		/// <param name="payorId">The Payor Id</param>
		/// <returns>HTTP Ok, key created</returns>
		public async Task<PayorBrandingResponse> PayorGetBrandingAsync(string payorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payors/"+ (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"/branding";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayorBrandingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reminder Email Opt-Out
		/// Update the emailRemindersOptOut field for a Payor. This API can be used to opt out
		/// or opt into Payor Reminder emails. These emails are typically around payee events
		/// such as payees registering and onboarding.
		/// 
		/// PayorEmailOptOut v1/payors/{payorId}/reminderEmailsUpdate
		/// </summary>
		/// <param name="payorId">The Payor Id</param>
		/// <param name="requestBody">Reminder Emails Opt-Out Request</param>
		public async Task PayorEmailOptOutAsync(string payorId, PayorEmailOptOutRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/payors/"+ (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"/reminderEmailsUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set notifications
		/// <p>Set notifications for a given source account</p>
		/// <p>deprecated since 2.34 (use v3 version)</p>
		/// 
		/// SetNotificationsRequest v1/sourceAccounts/{sourceAccountId}/notifications
		/// </summary>
		/// <param name="sourceAccountId">Source account id</param>
		/// <param name="requestBody">Body to included minimum balance to set</param>
		public async Task SetNotificationsRequestAsync(string sourceAccountId, SetNotificationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/sourceAccounts/"+ (sourceAccountId==null? "" : System.Uri.EscapeDataString(sourceAccountId))+"/notifications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Supported Countries
		/// <p>List the supported countries.</p>
		/// <p>This version will be retired in March 2020. Use /v2/supportedCountries</p>
		/// 
		/// ListSupportedCountriesV1 v1/supportedCountries
		/// </summary>
		/// <returns>List of Supported Countries</returns>
		public async Task<SupportedCountriesResponse> ListSupportedCountriesV1Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/supportedCountries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SupportedCountriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// validate
		/// <p>The second part of login involves validating using an MFA device</p>
		/// <p>An access token with PRE_AUTH authorities is required</p>
		/// 
		/// ValidateAccessToken v1/validate
		/// </summary>
		/// <param name="requestBody">An OTP from the user's registered MFA Device
		///</param>
		/// <returns>User request has been validated</returns>
		public async Task<AccessTokenResponse> ValidateAccessTokenAsync(AccessTokenValidationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/validate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the details about the webhooks for the given payor.
		/// List the details about the webhooks for the given payor.
		/// ListWebhooksV1 v1/webhooks
		/// </summary>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="payorId">The Payor ID</param>
		/// <returns>Webhook response</returns>
		public async Task<WebhooksResponse> ListWebhooksV1Async(int page, int pageSize, string payorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/webhooks?page="+page+"&pageSize="+pageSize+"&payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebhooksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Webhook
		/// Create Webhook
		/// CreateWebhookV1 v1/webhooks
		/// </summary>
		public async Task CreateWebhookV1Async(CreateWebhookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get details about the given webhook.
		/// Get details about the given webhook.
		/// GetWebhookV1 v1/webhooks/{webhookId}
		/// </summary>
		/// <param name="webhookId">Webhook id</param>
		/// <returns>Webhook response</returns>
		public async Task<WebhookResponse> GetWebhookV1Async(string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebhookResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Webhook
		/// Update Webhook
		/// UpdateWebhookV1 v1/webhooks/{webhookId}
		/// </summary>
		/// <param name="webhookId">Webhook id</param>
		public async Task UpdateWebhookV1Async(string webhookId, UpdateWebhookRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// PingWebhookV1 v1/webhooks/{webhookId}/ping
		/// </summary>
		/// <param name="webhookId">Webhook id</param>
		public async Task PingWebhookV1Async(string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId))+"/ping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Supported Currencies
		/// List the supported currencies.
		/// ListSupportedCurrenciesV2 v2/currencies
		/// </summary>
		/// <returns>List Supported Currencies</returns>
		public async Task<SupportedCurrencyResponseV2> ListSupportedCurrenciesV2Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/currencies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SupportedCurrencyResponseV2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Funding Accounts
		/// Get the funding accounts.
		/// GetFundingAccountsV2 v2/fundingAccounts
		/// </summary>
		/// <param name="name">The descriptive funding account name</param>
		/// <param name="country">The 2 letter ISO 3166-1 country code (upper case)</param>
		/// <param name="currency">The ISO 4217 currency code</param>
		/// <param name="type">The type of funding account.</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="sort">List of sort fields (e.g. ?sort=accountName:asc,name:asc) Default is accountName:asc The supported sort fields are - accountName, name.</param>
		/// <returns>Get Funding Accounts Response</returns>
		public async Task<ListFundingAccountsResponseV2> GetFundingAccountsV2Async(string payorId, string name, string country, string currency, string type, int page, int pageSize, string sort, bool sensitive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/fundingAccounts?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sensitive="+sensitive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFundingAccountsResponseV2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Funding Account
		/// Create Funding Account
		/// CreateFundingAccountV2 v2/fundingAccounts
		/// </summary>
		public async Task CreateFundingAccountV2Async(CreateFundingAccountRequestV2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/fundingAccounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Funding Account
		/// Get Funding Account by ID
		/// GetFundingAccountV2 v2/fundingAccounts/{fundingAccountId}
		/// </summary>
		/// <returns>Funding Account Response</returns>
		public async Task<FundingAccountResponseV2> GetFundingAccountV2Async(string fundingAccountId, bool sensitive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/fundingAccounts/"+ (fundingAccountId==null? "" : System.Uri.EscapeDataString(fundingAccountId))+"&sensitive="+sensitive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FundingAccountResponseV2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payor
		/// Get a Single Payor by Id.
		/// 
		/// GetPayorByIdV2 v2/payors/{payorId}
		/// </summary>
		/// <param name="payorId">The Payor Id</param>
		/// <returns>Get Payor Details</returns>
		public async Task<PayorV2> GetPayorByIdV2Async(string payorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/payors/"+ (payorId==null? "" : System.Uri.EscapeDataString(payorId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayorV2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of source accounts
		/// List source accounts.
		/// GetSourceAccountsV2 v2/sourceAccounts
		/// </summary>
		/// <param name="physicalAccountName">Physical Account Name</param>
		/// <param name="physicalAccountId">The physical account ID</param>
		/// <param name="payorId">The account owner Payor ID</param>
		/// <param name="fundingAccountId">The funding account ID</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="sort">List of sort fields e.g. ?sort=name:asc
		///Default is name:asc
		///The supported sort fields are - fundingRef, name, balance
		///</param>
		/// <returns>List Source Account response</returns>
		public async Task<ListSourceAccountResponseV2> GetSourceAccountsV2Async(string physicalAccountName, string physicalAccountId, string payorId, string fundingAccountId, int page, int pageSize, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sourceAccounts?physicalAccountName=" + (physicalAccountName==null? "" : System.Uri.EscapeDataString(physicalAccountName))+"&physicalAccountId=" + (physicalAccountId==null? "" : System.Uri.EscapeDataString(physicalAccountId))+"&payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&fundingAccountId=" + (fundingAccountId==null? "" : System.Uri.EscapeDataString(fundingAccountId))+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSourceAccountResponseV2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Source Account
		/// Get details about given source account.
		/// GetSourceAccountV2 v2/sourceAccounts/{sourceAccountId}
		/// </summary>
		/// <param name="sourceAccountId">Source account id</param>
		/// <returns>Source account response</returns>
		public async Task<SourceAccountResponseV2> GetSourceAccountV2Async(string sourceAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sourceAccounts/"+ (sourceAccountId==null? "" : System.Uri.EscapeDataString(sourceAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceAccountResponseV2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Funding Request
		/// Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo  (202 - accepted, 400 - invalid request body, 404 - source account not found).
		/// CreateFundingRequestV2 v2/sourceAccounts/{sourceAccountId}/fundingRequest
		/// </summary>
		/// <param name="sourceAccountId">Source account id</param>
		/// <param name="requestBody">Body to included amount to be funded</param>
		public async Task CreateFundingRequestV2Async(string sourceAccountId, FundingRequestV2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sourceAccounts/"+ (sourceAccountId==null? "" : System.Uri.EscapeDataString(sourceAccountId))+"/fundingRequest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Transfer Funds between source accounts
		/// Transfer funds between source accounts for a Payor. The 'from' source account is identified in the URL, and is the account which will be debited. The 'to' (destination) source account is in the body, and is the account which will be credited. Both source accounts must belong to the same Payor. There must be sufficient balance in the 'from' source account, otherwise the transfer attempt will fail.
		/// TransferFundsV2 v2/sourceAccounts/{sourceAccountId}/transfers
		/// </summary>
		/// <param name="sourceAccountId">The 'from' source account id, which will be debited</param>
		/// <param name="requestBody">Body</param>
		public async Task TransferFundsV2Async(string sourceAccountId, TransferRequestV2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sourceAccounts/"+ (sourceAccountId==null? "" : System.Uri.EscapeDataString(sourceAccountId))+"/transfers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Supported Countries
		/// List the supported countries.
		/// ListSupportedCountriesV2 v2/supportedCountries
		/// </summary>
		/// <returns>List of Supported Countries</returns>
		public async Task<SupportedCountriesResponseV2> ListSupportedCountriesV2Async(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/supportedCountries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SupportedCountriesResponseV2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Users
		/// Get a paginated response listing the Users
		/// ListUsers v2/users
		/// </summary>
		/// <param name="type">The Type of the User.</param>
		/// <param name="status">The status of the User.</param>
		/// <param name="entityId">The entityId of the User.</param>
		/// <param name="payeeType">The Type of the Payee entity. Either COMPANY or INDIVIDUAL.</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="sort">List of sort fields (e.g. ?sort=email:asc,lastName:asc)
		///Default is email:asc 'name'
		///The supported sort fields are - email, lastNmae.
		///</param>
		/// <returns>Paginated list of Users filtered by query parameters</returns>
		public async Task<PagedUserResponse> ListUsersAsync(UserInfoUserType type, UserResponseStatus status, string entityId, PayeeType payeeType, int page, int pageSize, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users?type=" + type+"&status=" + status+"&entityId=" + (entityId==null? "" : System.Uri.EscapeDataString(entityId))+"&payeeType=" + payeeType+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PagedUserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invite a User
		/// Create a User and invite them to the system
		/// 
		/// InviteUser v2/users/invite
		/// </summary>
		/// <param name="requestBody">Details of User to invite</param>
		public async Task InviteUserAsync(InviteUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/invite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Register SMS Number
		/// <p>Register an Sms number and send an OTP to it </p>
		/// <p>Used for manual verification of a user </p>
		/// <p>The backoffice user initiates the request to send the OTP to the user's sms </p>
		/// <p>The user then reads back the OTP which the backoffice user enters in the verifactionCode property for requests that require it</p>
		/// 
		/// RegisterSms v2/users/registration/sms
		/// </summary>
		/// <param name="requestBody">a SMS Number to send an OTP to</param>
		public async Task RegisterSmsAsync(RegisterSmsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/registration/sms";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Self
		/// Get the user's details
		/// 
		/// GetSelf v2/users/self
		/// </summary>
		/// <returns>Get User Details</returns>
		public async Task<UserResponse> GetSelfAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/self";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unregister MFA for Self
		/// <p>Unregister the MFA device for the user </p>
		/// <p>If the user does not require further verification then a register new MFA device token will be sent to them via their email address</p>
		/// 
		/// UnregisterMFAForSelf v2/users/self/mfa/unregister
		/// </summary>
		/// <param name="requestBody">The MFA Type to unregister</param>
		public async Task UnregisterMFAForSelfAsync(SelfMFATypeUnregisterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/self/mfa/unregister";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Password for self
		/// Update password for self
		/// 
		/// UpdatePasswordSelf v2/users/self/password
		/// </summary>
		/// <param name="requestBody">The password</param>
		public async Task UpdatePasswordSelfAsync(SelfUpdatePasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/self/password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Validate the proposed password
		/// validate the password and return a score
		/// 
		/// ValidatePasswordSelf v2/users/self/password/validate
		/// </summary>
		/// <param name="requestBody">The password</param>
		/// <returns>the password was checked and a score returned</returns>
		public async Task<ValidatePasswordResponse> ValidatePasswordSelfAsync(PasswordRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/self/password/validate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ValidatePasswordResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update User Details for self
		/// <p>Update the profile details for the given user</p>
		/// <p>Only Payee user types are supported</p>
		/// 
		/// UserDetailsUpdateForSelf v2/users/self/userDetailsUpdate
		/// </summary>
		/// <param name="requestBody">The details of the user to update</param>
		public async Task UserDetailsUpdateForSelfAsync(PayeeUserSelfUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/self/userDetailsUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a User
		/// Delete User by Id.
		/// 
		/// DeleteUserByIdV2 v2/users/{userId}
		/// </summary>
		/// <param name="userId">The UUID of the User.</param>
		public async Task DeleteUserByIdV2Async(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User
		/// Get a Single User by Id.
		/// 
		/// GetUserByIdV2 v2/users/{userId}
		/// </summary>
		/// <param name="userId">The UUID of the User.</param>
		/// <returns>Get User Details</returns>
		public async Task<UserResponse> GetUserByIdV2Async(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable a User
		/// <p>If a user is enabled this endpoint will disable them </p>
		/// <p>The invoker must have the appropriate permission </p>
		/// <p>A user cannot disable themself </p>
		/// <p>When a user is disabled any active access tokens will be revoked and the user will not be able to log in</p>
		/// 
		/// DisableUserV2 v2/users/{userId}/disable
		/// </summary>
		/// <param name="userId">The UUID of the User.</param>
		public async Task DisableUserV2Async(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable a User
		/// <p>If a user has been disabled this endpoints will enable them </p>
		/// <p>The invoker must have the appropriate permission </p>
		/// <p>A user cannot enable themself </p>
		/// <p>If the user is a payor user and the payor is disabled this operation is not allowed</p>
		/// <p>If enabling a payor user would breach the limit for master admin payor users the request will be rejected </p>
		/// 
		/// EnableUserV2 v2/users/{userId}/enable
		/// </summary>
		/// <param name="userId">The UUID of the User.</param>
		public async Task EnableUserV2Async(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unregister MFA for the user
		/// <p>Unregister the MFA device for the user </p>
		/// <p>If the user does not require further verification then a register new MFA device token will be sent to them via their email address</p>
		/// 
		/// UnregisterMFA v2/users/{userId}/mfa/unregister
		/// </summary>
		/// <param name="userId">The UUID of the User.</param>
		/// <param name="requestBody">The MFA Type to unregister</param>
		public async Task UnregisterMFAAsync(string userId, UnregisterMFARequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/mfa/unregister";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update User Role
		/// <p>Update the user's Role</p>
		/// 
		/// RoleUpdate v2/users/{userId}/roleUpdate
		/// </summary>
		/// <param name="userId">The UUID of the User.</param>
		/// <param name="requestBody">The Role to change to</param>
		public async Task RoleUpdateAsync(string userId, RoleUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/roleUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resend a token
		/// <p>Resend the specified token </p>
		/// <p>The token to resend must already exist for the user </p>
		/// <p>It will be revoked and a new one issued</p>
		/// 
		/// ResendToken v2/users/{userId}/tokens
		/// </summary>
		/// <param name="userId">The UUID of the User.</param>
		/// <param name="requestBody">The type of token to resend</param>
		public async Task ResendTokenAsync(string userId, ResendTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/tokens";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unlock a User
		/// If a user is locked this endpoint will unlock them
		/// 
		/// UnlockUserV2 v2/users/{userId}/unlock
		/// </summary>
		/// <param name="userId">The UUID of the User.</param>
		public async Task UnlockUserV2Async(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/unlock";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update User Details
		/// <p>Update the profile details for the given user</p>
		/// <p>When updating Payor users with the role of payor.master_admin a verificationCode is required</p>
		/// 
		/// UserDetailsUpdate v2/users/{userId}/userDetailsUpdate
		/// </summary>
		/// <param name="userId">The UUID of the User.</param>
		/// <param name="requestBody">The details of the user to update</param>
		public async Task UserDetailsUpdateAsync(string userId, UserDetailsUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/userDetailsUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Payees
		/// <p>Use v4 instead</p>
		/// Get a paginated response listing the payees for a payor.
		/// 
		/// ListPayeesV3 v3/payees
		/// </summary>
		/// <param name="payorId">The account owner Payor ID</param>
		/// <param name="watchlistStatus">The watchlistStatus of the payees.</param>
		/// <param name="disabled">Payee disabled</param>
		/// <param name="onboardedStatus">The onboarded status of the payees.</param>
		/// <param name="email">Email address</param>
		/// <param name="displayName">The display name of the payees.</param>
		/// <param name="remoteId">The remote id of the payees.</param>
		/// <param name="payeeType">The onboarded status of the payees.</param>
		/// <param name="payeeCountry">The country of the payee - 2 letter ISO 3166-1 country code (upper case)</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">Page size. Default is 25. Max allowable is 100.</param>
		/// <param name="sort">List of sort fields (e.g. ?sort=onboardedStatus:asc,name:asc) Default is name:asc 'name' is treated as company name for companies - last name + ',' + firstName for individuals The supported sort fields are - payeeId, displayName, payoutStatus, onboardedStatus.
		///</param>
		/// <returns>Details of Payee</returns>
		public async Task<PagedPayeeResponseV3> ListPayeesV3Async(string payorId, string watchlistStatus, bool disabled, string onboardedStatus, string email, string displayName, string remoteId, string payeeType, string payeeCountry, int page, int pageSize, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payees?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&watchlistStatus=" + (watchlistStatus==null? "" : System.Uri.EscapeDataString(watchlistStatus))+"&disabled="+disabled+"&onboardedStatus=" + (onboardedStatus==null? "" : System.Uri.EscapeDataString(onboardedStatus))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&displayName=" + (displayName==null? "" : System.Uri.EscapeDataString(displayName))+"&remoteId=" + (remoteId==null? "" : System.Uri.EscapeDataString(remoteId))+"&payeeType=" + (payeeType==null? "" : System.Uri.EscapeDataString(payeeType))+"&payeeCountry=" + (payeeCountry==null? "" : System.Uri.EscapeDataString(payeeCountry))+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PagedPayeeResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiate Payee Creation
		/// <p>Use v4 instead</p>
		/// Initiate the process of creating 1 to 2000 payees in a batch Use the response location header to query
		/// for status (201 - Created, 400 - invalid request body. In addition to standard semantic validations, a
		/// 400 will also result if there is a duplicate remote id within the batch / if there is a duplicate email
		/// within the batch, i.e. if there is a conflict between the data provided for one payee within the batch and
		/// that provided for another payee within the same batch). The validation at this stage is intra-batch only.
		/// Validation against payees who have already been invited occurs subsequently during processing of the batch.
		/// 
		/// CreatePayeeV3 v3/payees
		/// </summary>
		/// <param name="requestBody">Post payees to create.</param>
		public async Task CreatePayeeV3Async(CreatePayeesRequestV3 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Query Batch Status
		/// <p>Use v4 instead</p>
		/// Fetch the status of a specific batch of payees. The batch is fully processed when status is ACCEPTED and pendingCount is 0 ( 200 - OK, 404 - batch not found ).
		/// 
		/// QueryBatchStatusV3 v3/payees/batch/{batchId}
		/// </summary>
		/// <param name="batchId">Batch Id</param>
		/// <returns>Get Batch Status</returns>
		public async Task<QueryBatchResponseV3> QueryBatchStatusV3Async(string batchId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payees/batch/"+ (batchId==null? "" : System.Uri.EscapeDataString(batchId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryBatchResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Payee Changes
		/// <p>Use v4 instead</p>
		/// <p>Get a paginated response listing payee changes.</p>
		/// 
		/// ListPayeeChangesV3 v3/payees/deltas
		/// </summary>
		/// <param name="payorId">The Payor ID to find associated Payees</param>
		/// <param name="updatedSince">The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">Page size. Default is 100. Max allowable is 1000.</param>
		/// <returns>Details of Payee Changes</returns>
		public async Task<PayeeDeltaResponseV3> ListPayeeChangesV3Async(string payorId, System.DateTimeOffset updatedSince, int page, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payees/deltas?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&updatedSince=" + updatedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&page="+page+"&pageSize="+pageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayeeDeltaResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payee Invitation Status
		/// <p>Use v4 instead</p>
		/// <p>Returns a filtered, paginated list of payees associated with a payor, along with invitation status and grace period end date.</p>
		/// 
		/// GetPayeesInvitationStatusV3 v3/payees/payors/{payorId}/invitationStatus
		/// </summary>
		/// <param name="payorId">The account owner Payor ID</param>
		/// <param name="payeeId">The UUID of the payee.</param>
		/// <param name="invitationStatus">The invitation status of the payees.</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">Page size. Default is 25. Max allowable is 100.</param>
		/// <returns>Get Payees with Invitaion status - filters of payeeId and invitationStatus</returns>
		public async Task<PagedPayeeInvitationStatusResponseV3> GetPayeesInvitationStatusV3Async(string payorId, string payeeId, string invitationStatus, int page, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payees/payors/"+ (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"/invitationStatus&payeeId=" + (payeeId==null? "" : System.Uri.EscapeDataString(payeeId))+"&invitationStatus=" + (invitationStatus==null? "" : System.Uri.EscapeDataString(invitationStatus))+"&page="+page+"&pageSize="+pageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PagedPayeeInvitationStatusResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Payee by Id
		/// <p>Use v4 instead</p>
		/// <p>This API will delete Payee by Id (UUID). Deletion by ID is not allowed if:</p>
		/// <p>* Payee ID is not found</p>
		/// <p>* If Payee has not been on-boarded</p>
		/// <p>* If Payee is in grace period</p>
		/// <p>* If Payee has existing payments</p>
		/// 
		/// DeletePayeeByIdV3 v3/payees/{payeeId}
		/// </summary>
		/// <param name="payeeId">The UUID of the payee.</param>
		public async Task DeletePayeeByIdV3Async(string payeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payees/"+ (payeeId==null? "" : System.Uri.EscapeDataString(payeeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payee by Id
		/// <p>Use v4 instead</p>
		/// <p>Get Payee by Id</p>
		/// 
		/// GetPayeeByIdV3 v3/payees/{payeeId}
		/// </summary>
		/// <param name="payeeId">The UUID of the payee.</param>
		/// <param name="sensitive">Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked.
		///If set to true, and you have permission, the PII values will be returned as their original unmasked values.
		///</param>
		/// <returns>Success response, request completed okay</returns>
		public async Task<PayeeDetailResponseV3> GetPayeeByIdV3Async(string payeeId, bool sensitive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payees/"+ (payeeId==null? "" : System.Uri.EscapeDataString(payeeId))+"&sensitive="+sensitive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayeeDetailResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resend Payee Invite
		/// <p>Use v4 instead</p>
		/// <p>Resend an invite to the Payee The payee must have already been invited by the payor and not yet accepted or declined</p>
		/// <p>Any previous invites to the payee by this Payor will be invalidated</p>
		/// 
		/// ResendPayeeInviteV3 v3/payees/{payeeId}/invite
		/// </summary>
		/// <param name="payeeId">The UUID of the payee.</param>
		/// <param name="requestBody">Provide Payor Id in body of request</param>
		/// <returns>the request was accepted</returns>
		public async Task ResendPayeeInviteV3Async(string payeeId, InvitePayeeRequestV3 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payees/"+ (payeeId==null? "" : System.Uri.EscapeDataString(payeeId))+"/invite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Payee Details
		/// <p>Use v4 instead</p>
		/// <p>Update payee details for the given Payee Id.<p>
		/// 
		/// PayeeDetailsUpdateV3 v3/payees/{payeeId}/payeeDetailsUpdate
		/// </summary>
		/// <param name="payeeId">The UUID of the payee.</param>
		/// <param name="requestBody">Request to update payee details</param>
		public async Task PayeeDetailsUpdateV3Async(string payeeId, UpdatePayeeDetailsRequestV3 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payees/"+ (payeeId==null? "" : System.Uri.EscapeDataString(payeeId))+"/payeeDetailsUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Payee Remote Id
		/// <p>Use v4 instead</p>
		/// <p>Update the remote Id for the given Payee Id.</p>
		/// 
		/// PayeesPostByPayeeId v3/payees/{payeeId}/remoteIdUpdate
		/// </summary>
		/// <param name="payeeId">The UUID of the payee.</param>
		/// <param name="requestBody">Request to update payee remote id v3</param>
		public async Task PayeesPostByPayeeIdAsync(string payeeId, UpdateRemoteIdRequestV3 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payees/"+ (payeeId==null? "" : System.Uri.EscapeDataString(payeeId))+"/remoteIdUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// V3 Get List of Payments
		/// Deprecated (use /v4/paymentaudit/payments instead)
		/// ListPaymentsAuditV3 v3/paymentaudit/payments
		/// </summary>
		/// <param name="payeeId">The UUID of the payee.</param>
		/// <param name="payorId">The account owner Payor Id. Required for external users.</param>
		/// <param name="payorName">The payor’s name. This filters via a case insensitive substring match.</param>
		/// <param name="remoteId">The remote id of the payees.</param>
		/// <param name="status">Payment Status</param>
		/// <param name="sourceAccountName">The source account name filter. This filters via a case insensitive substring match.</param>
		/// <param name="sourceAmountFrom">The source amount from range filter. Filters for sourceAmount >= sourceAmountFrom</param>
		/// <param name="sourceAmountTo">The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo</param>
		/// <param name="sourceCurrency">The source currency filter. Filters based on an exact match on the currency.</param>
		/// <param name="paymentAmountFrom">The payment amount from range filter. Filters for paymentAmount >= paymentAmountFrom</param>
		/// <param name="paymentAmountTo">The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo</param>
		/// <param name="paymentCurrency">The payment currency filter. Filters based on an exact match on the currency.</param>
		/// <param name="submittedDateFrom">The submitted date from range filter. Format is yyyy-MM-dd.</param>
		/// <param name="submittedDateTo">The submitted date to range filter. Format is yyyy-MM-dd.</param>
		/// <param name="paymentMemo">The payment memo filter. This filters via a case insensitive substring match.</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="sort">List of sort fields (e.g. ?sort=submittedDateTime:asc,status:asc). Default is sort by remoteId
		///The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency,
		///routingNumber, accountNumber, remoteId, submittedDateTime and status
		///</param>
		/// <param name="sensitive">Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked.
		///If set to true, and you have permission, the PII values will be returned as their original unmasked values.
		///</param>
		/// <returns>Paginated list of payments</returns>
		public async Task<ListPaymentsResponseV3> ListPaymentsAuditV3Async(
					string payeeId, 
					string payorId, 
					string payorName, 
					string remoteId, 
					ListPaymentsAuditV3Status status, 
					string sourceAccountName, 
					int sourceAmountFrom, 
					int sourceAmountTo, 
					string sourceCurrency, 
					int paymentAmountFrom, 
					int paymentAmountTo, 
					string paymentCurrency, 
					System.DateOnly submittedDateFrom, 
					System.DateOnly submittedDateTo, 
					string paymentMemo, 
					int page, 
					int pageSize, 
					string sort, 
					bool sensitive, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/paymentaudit/payments?payeeId=" + (payeeId==null? "" : System.Uri.EscapeDataString(payeeId))+"&payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&payorName=" + (payorName==null? "" : System.Uri.EscapeDataString(payorName))+"&remoteId=" + (remoteId==null? "" : System.Uri.EscapeDataString(remoteId))+"&status=" + status+"&sourceAccountName=" + (sourceAccountName==null? "" : System.Uri.EscapeDataString(sourceAccountName))+"&sourceAmountFrom="+sourceAmountFrom+"&sourceAmountTo="+sourceAmountTo+"&sourceCurrency=" + (sourceCurrency==null? "" : System.Uri.EscapeDataString(sourceCurrency))+"&paymentAmountFrom="+paymentAmountFrom+"&paymentAmountTo="+paymentAmountTo+"&paymentCurrency=" + (paymentCurrency==null? "" : System.Uri.EscapeDataString(paymentCurrency))+"&submittedDateFrom="+submittedDateFrom+"&submittedDateTo="+submittedDateTo+"&paymentMemo=" + (paymentMemo==null? "" : System.Uri.EscapeDataString(paymentMemo))+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sensitive="+sensitive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPaymentsResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// V3 Get Payment
		/// Deprecated (use /v4/paymentaudit/payments/<paymentId> instead)
		/// GetPaymentDetailsV3 v3/paymentaudit/payments/{paymentId}
		/// </summary>
		/// <param name="paymentId">Payment Id</param>
		/// <param name="sensitive">Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked.
		///If set to true, and you have permission, the PII values will be returned as their original unmasked values.
		///</param>
		/// <returns>200 response, request completed okay</returns>
		public async Task<PaymentResponseV3> GetPaymentDetailsV3Async(string paymentId, bool sensitive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/paymentaudit/payments/"+ (paymentId==null? "" : System.Uri.EscapeDataString(paymentId))+"&sensitive="+sensitive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// V3 Get Payouts for Payor
		/// Deprecated (use /v4/paymentaudit/payouts instead)
		/// GetPayoutsForPayorV3 v3/paymentaudit/payouts
		/// </summary>
		/// <param name="payorId">The account owner Payor ID</param>
		/// <param name="payoutMemo">Payout Memo filter - case insensitive sub-string match</param>
		/// <param name="status">Payout Status</param>
		/// <param name="submittedDateFrom">The submitted date from range filter. Format is yyyy-MM-dd.</param>
		/// <param name="submittedDateTo">The submitted date to range filter. Format is yyyy-MM-dd.</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="sort">List of sort fields (e.g. ?sort=submittedDateTime:asc,instructedDateTime:asc,status:asc)
		///Default is submittedDateTime:asc
		///The supported sort fields are: submittedDateTime, instructedDateTime, status.
		///</param>
		/// <returns>Payor data found</returns>
		public async Task<GetPayoutsResponseV3> GetPayoutsForPayorV3Async(string payorId, string payoutMemo, GetPayoutsForPayorV3Status status, System.DateOnly submittedDateFrom, System.DateOnly submittedDateTo, int page, int pageSize, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/paymentaudit/payouts?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&payoutMemo=" + (payoutMemo==null? "" : System.Uri.EscapeDataString(payoutMemo))+"&status=" + status+"&submittedDateFrom="+submittedDateFrom+"&submittedDateTo="+submittedDateTo+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPayoutsResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// V3 Get Payments for Payout
		/// Deprecated (use /v4/paymentaudit/payouts/<payoutId> instead)
		/// GetPaymentsForPayout_PA_V3 v3/paymentaudit/payouts/{payoutId}
		/// </summary>
		/// <param name="payoutId">The id (UUID) of the payout.</param>
		/// <param name="remoteId">The remote id of the payees.</param>
		/// <param name="status">Payment Status</param>
		/// <param name="sourceAmountFrom">The source amount from range filter. Filters for sourceAmount >= sourceAmountFrom</param>
		/// <param name="sourceAmountTo">The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo</param>
		/// <param name="paymentAmountFrom">The payment amount from range filter. Filters for paymentAmount >= paymentAmountFrom</param>
		/// <param name="paymentAmountTo">The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo</param>
		/// <param name="submittedDateFrom">The submitted date from range filter. Format is yyyy-MM-dd.</param>
		/// <param name="submittedDateTo">The submitted date to range filter. Format is yyyy-MM-dd.</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="sort"><p>List of sort fields (e.g. ?sort=submittedDateTime:asc,status:asc). Default is sort by remoteId</p>
		///<p>The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency,
		///routingNumber, accountNumber, remoteId, submittedDateTime and status</p>
		///</param>
		/// <param name="sensitive">Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked.
		///If set to true, and you have permission, the PII values will be returned as their original unmasked values.
		///</param>
		/// <returns>200 response, data found okay</returns>
		public async Task<GetPaymentsForPayoutResponseV3> GetPaymentsForPayout_PA_V3Async(string payoutId, string remoteId, ListPaymentsAuditV3Status status, int sourceAmountFrom, int sourceAmountTo, int paymentAmountFrom, int paymentAmountTo, System.DateOnly submittedDateFrom, System.DateOnly submittedDateTo, int page, int pageSize, string sort, bool sensitive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/paymentaudit/payouts/"+ (payoutId==null? "" : System.Uri.EscapeDataString(payoutId))+"&remoteId=" + (remoteId==null? "" : System.Uri.EscapeDataString(remoteId))+"&status=" + status+"&sourceAmountFrom="+sourceAmountFrom+"&sourceAmountTo="+sourceAmountTo+"&paymentAmountFrom="+paymentAmountFrom+"&paymentAmountTo="+paymentAmountTo+"&submittedDateFrom="+submittedDateFrom+"&submittedDateTo="+submittedDateTo+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sensitive="+sensitive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPaymentsForPayoutResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// V3 Export Transactions
		/// Deprecated (use /v4/paymentaudit/transactions instead)
		/// ExportTransactionsCSVV3 v3/paymentaudit/transactions
		/// </summary>
		/// <param name="payorId">The Payor ID for whom you wish to run the report.
		///For a Payor requesting the report, this could be their exact Payor, or it could be a child/descendant Payor.
		///</param>
		/// <param name="startDate">Start date, inclusive. Format is YYYY-MM-DD</param>
		/// <param name="endDate">End date, inclusive. Format is YYYY-MM-DD</param>
		/// <returns>Export Transactions response</returns>
		public async Task ExportTransactionsCSVV3Async(string payorId, System.DateOnly startDate, System.DateOnly endDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/paymentaudit/transactions?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&startDate="+startDate+"&endDate="+endDate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit Payout
		/// <p>Create a new payout and return a location header with a link to the payout</p>
		/// <p>Basic validation of the payout is performed before returning but more comprehensive validation is done asynchronously</p>
		/// <p>The results can be obtained by issuing a HTTP GET to the URL returned in the location header</p>
		/// <p>**NOTE:** amount values in payments must be in 'minor units' format. E.g. cents for USD, pence for GBP etc with no decimal places</p>
		/// 
		/// SubmitPayoutV3 v3/payouts
		/// </summary>
		/// <param name="requestBody">Post amount to transfer using stored funding account details.</param>
		public async Task SubmitPayoutV3Async(CreatePayoutRequestV3 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payouts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Withdraw Payout
		/// Withdraw Payout will remove the payout details from the rails but the payout will still be accessible in payout service in WITHDRAWN status.
		/// WithdrawPayoutV3 v3/payouts/{payoutId}
		/// </summary>
		/// <param name="payoutId">Id of the payout</param>
		public async Task WithdrawPayoutV3Async(string payoutId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payouts/"+ (payoutId==null? "" : System.Uri.EscapeDataString(payoutId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payout Summary
		/// Get payout summary - returns the current state of the payout.
		/// GetPayoutSummaryV3 v3/payouts/{payoutId}
		/// </summary>
		/// <param name="payoutId">Id of the payout</param>
		/// <returns>Details of Payout</returns>
		public async Task<PayoutSummaryResponseV3> GetPayoutSummaryV3Async(string payoutId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payouts/"+ (payoutId==null? "" : System.Uri.EscapeDataString(payoutId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayoutSummaryResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Instruct Payout
		/// Instruct a payout to be made for the specified payoutId.
		/// InstructPayoutV3 v3/payouts/{payoutId}
		/// </summary>
		/// <param name="payoutId">Id of the payout</param>
		/// <param name="requestBody">Additional instruct payout parameters</param>
		public async Task InstructPayoutV3Async(string payoutId, InstructPayoutRequestV3 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payouts/"+ (payoutId==null? "" : System.Uri.EscapeDataString(payoutId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve payments for a payout
		/// Retrieve payments for a payout
		/// GetPaymentsForPayoutV3 v3/payouts/{payoutId}/payments
		/// </summary>
		/// <param name="payoutId">Id of the payout</param>
		/// <param name="status">Payment Status
		///* ACCEPTED: any payment which was accepted at submission time (status may have changed since)
		///* REJECTED: any payment rejected by initial submission processing
		///* WITHDRAWN: any payment which has been withdrawn
		///* WITHDRAWABLE: any payment eligible for withdrawal
		///</param>
		/// <param name="remoteId">The remote id of the payees.</param>
		/// <param name="payorPaymentId">Payor's Id of the Payment</param>
		/// <param name="sourceAccountName">Physical Account Name</param>
		/// <param name="transmissionType">Transmission Type
		///* ACH
		///* SAME_DAY_ACH
		///* WIRE
		///</param>
		/// <param name="paymentMemo">Payment Memo of the Payment</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <returns>Payments for payout</returns>
		public async Task<PagedPaymentsResponseV3> GetPaymentsForPayoutV3Async(string payoutId, GetPaymentsForPayoutV3Status status, string remoteId, string payorPaymentId, string sourceAccountName, GetPaymentsForPayoutV3TransmissionType transmissionType, string paymentMemo, int pageSize, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payouts/"+ (payoutId==null? "" : System.Uri.EscapeDataString(payoutId))+"/payments&status=" + status+"&remoteId=" + (remoteId==null? "" : System.Uri.EscapeDataString(remoteId))+"&payorPaymentId=" + (payorPaymentId==null? "" : System.Uri.EscapeDataString(payorPaymentId))+"&sourceAccountName=" + (sourceAccountName==null? "" : System.Uri.EscapeDataString(sourceAccountName))+"&transmissionType=" + transmissionType+"&paymentMemo=" + (paymentMemo==null? "" : System.Uri.EscapeDataString(paymentMemo))+"&pageSize="+pageSize+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PagedPaymentsResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a quote for the payout
		/// Create quote for a payout
		/// CreateQuoteForPayoutV3 v3/payouts/{payoutId}/quote
		/// </summary>
		/// <param name="payoutId">Id of the payout</param>
		/// <returns>Quote for payout</returns>
		public async Task<QuoteResponseV3> CreateQuoteForPayoutV3Async(string payoutId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payouts/"+ (payoutId==null? "" : System.Uri.EscapeDataString(payoutId))+"/quote";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QuoteResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deschedule a payout
		/// Remove the schedule for a scheduled payout
		/// DeschedulePayout v3/payouts/{payoutId}/schedule
		/// </summary>
		/// <param name="payoutId">Id of the payout</param>
		public async Task DeschedulePayoutAsync(string payoutId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payouts/"+ (payoutId==null? "" : System.Uri.EscapeDataString(payoutId))+"/schedule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Schedule a payout
		/// <p>Schedule a payout for auto-instruction in the future
		/// or update existing payout schedule if the payout has been scheduled before.</p>
		/// 
		/// ScheduleForPayout v3/payouts/{payoutId}/schedule
		/// </summary>
		/// <param name="payoutId">Id of the payout</param>
		/// <param name="requestBody">schedule payout parameters</param>
		public async Task ScheduleForPayoutAsync(string payoutId, SchedulePayoutRequestV3 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/payouts/"+ (payoutId==null? "" : System.Uri.EscapeDataString(payoutId))+"/schedule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get list of source accounts
		/// List source accounts.
		/// GetSourceAccountsV3 v3/sourceAccounts
		/// </summary>
		/// <param name="physicalAccountName">Physical Account Name</param>
		/// <param name="physicalAccountId">The physical account ID</param>
		/// <param name="payorId">The account owner Payor ID</param>
		/// <param name="fundingAccountId">The funding account ID</param>
		/// <param name="includeUserDeleted">A filter for retrieving both active accounts and user deleted ones</param>
		/// <param name="type">The type of source account.</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="sort">List of sort fields e.g. ?sort=name:asc
		///Default is name:asc
		///The supported sort fields are - fundingRef, name, balance
		///</param>
		/// <returns>List Source Account response</returns>
		public async Task<ListSourceAccountResponseV3> GetSourceAccountsV3Async(string physicalAccountName, string physicalAccountId, string payorId, string fundingAccountId, string includeUserDeleted, string type, int page, int pageSize, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/sourceAccounts?physicalAccountName=" + (physicalAccountName==null? "" : System.Uri.EscapeDataString(physicalAccountName))+"&physicalAccountId=" + (physicalAccountId==null? "" : System.Uri.EscapeDataString(physicalAccountId))+"&payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&fundingAccountId=" + (fundingAccountId==null? "" : System.Uri.EscapeDataString(fundingAccountId))+"&includeUserDeleted=" + (includeUserDeleted==null? "" : System.Uri.EscapeDataString(includeUserDeleted))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSourceAccountResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a source account by ID
		/// Mark a source account as deleted by ID
		/// DeleteSourceAccountV3 v3/sourceAccounts/{sourceAccountId}
		/// </summary>
		/// <param name="sourceAccountId">Source account id</param>
		public async Task DeleteSourceAccountV3Async(string sourceAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/sourceAccounts/"+ (sourceAccountId==null? "" : System.Uri.EscapeDataString(sourceAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details about given source account.
		/// Get details about given source account.
		/// GetSourceAccountV3 v3/sourceAccounts/{sourceAccountId}
		/// </summary>
		/// <param name="sourceAccountId">Source account id</param>
		/// <returns>Source account response</returns>
		public async Task<SourceAccountResponseV3> GetSourceAccountV3Async(string sourceAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/sourceAccounts/"+ (sourceAccountId==null? "" : System.Uri.EscapeDataString(sourceAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SourceAccountResponseV3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Funding Request
		/// <p>Instruct a funding request to transfer funds from the payor’s funding bank to the payor’s balance held within Velo</p>
		/// 
		/// CreateFundingRequestV3 v3/sourceAccounts/{sourceAccountId}/fundingRequest
		/// </summary>
		/// <param name="sourceAccountId">Source account id</param>
		/// <param name="requestBody">Body to included amount to be funded</param>
		public async Task CreateFundingRequestV3Async(string sourceAccountId, FundingRequestV3 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/sourceAccounts/"+ (sourceAccountId==null? "" : System.Uri.EscapeDataString(sourceAccountId))+"/fundingRequest";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Set notifications
		/// <p>Set notifications for a given source account</p>
		/// <p>If the balance falls below the amount set in the request an email notification will be sent to the email address registered in the payor profile</p>
		/// 
		/// SetNotificationsRequestV3 v3/sourceAccounts/{sourceAccountId}/notifications
		/// </summary>
		/// <param name="sourceAccountId">Source account id</param>
		/// <param name="requestBody">Body to included minimum balance to set</param>
		public async Task SetNotificationsRequestV3Async(string sourceAccountId, SetNotificationsRequest_2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/sourceAccounts/"+ (sourceAccountId==null? "" : System.Uri.EscapeDataString(sourceAccountId))+"/notifications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Transfer Funds between source accounts
		/// Transfer funds between source accounts for a Payor. The 'from' source account is identified in the URL, and is the account which will be debited. The 'to' (destination) source account is in the body, and is the account which will be credited. Both source accounts must belong to the same Payor. There must be sufficient balance in the 'from' source account, otherwise the transfer attempt will fail.
		/// TransferFundsV3 v3/sourceAccounts/{sourceAccountId}/transfers
		/// </summary>
		/// <param name="sourceAccountId">The 'from' source account id, which will be debited</param>
		/// <param name="requestBody">Body</param>
		public async Task TransferFundsV3Async(string sourceAccountId, TransferRequestV3 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/sourceAccounts/"+ (sourceAccountId==null? "" : System.Uri.EscapeDataString(sourceAccountId))+"/transfers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Payees
		/// Get a paginated response listing the payees for a payor.
		/// ListPayeesV4 v4/payees
		/// </summary>
		/// <param name="payorId">The account owner Payor ID</param>
		/// <param name="watchlistStatus">The watchlistStatus of the payees.</param>
		/// <param name="disabled">Payee disabled</param>
		/// <param name="onboardedStatus">The onboarded status of the payees.</param>
		/// <param name="email">Email address</param>
		/// <param name="displayName">The display name of the payees.</param>
		/// <param name="remoteId">The remote id of the payees.</param>
		/// <param name="payeeType">The onboarded status of the payees.</param>
		/// <param name="payeeCountry">The country of the payee - 2 letter ISO 3166-1 country code (upper case)</param>
		/// <param name="ofacStatus">The ofacStatus of the payees.</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">Page size. Default is 25. Max allowable is 100.</param>
		/// <param name="sort">List of sort fields (e.g. ?sort=onboardedStatus:asc,name:asc) Default is name:asc 'name' is treated as company name for companies - last name + ',' + firstName for individuals The supported sort fields are - payeeId, displayName, payoutStatus, onboardedStatus.
		///</param>
		/// <returns>Details of Payee</returns>
		public async Task<PagedPayeeResponseV4> ListPayeesV4Async(string payorId, string watchlistStatus, bool disabled, string onboardedStatus, string email, string displayName, string remoteId, string payeeType, string payeeCountry, string ofacStatus, int page, int pageSize, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/payees?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&watchlistStatus=" + (watchlistStatus==null? "" : System.Uri.EscapeDataString(watchlistStatus))+"&disabled="+disabled+"&onboardedStatus=" + (onboardedStatus==null? "" : System.Uri.EscapeDataString(onboardedStatus))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&displayName=" + (displayName==null? "" : System.Uri.EscapeDataString(displayName))+"&remoteId=" + (remoteId==null? "" : System.Uri.EscapeDataString(remoteId))+"&payeeType=" + (payeeType==null? "" : System.Uri.EscapeDataString(payeeType))+"&payeeCountry=" + (payeeCountry==null? "" : System.Uri.EscapeDataString(payeeCountry))+"&ofacStatus=" + (ofacStatus==null? "" : System.Uri.EscapeDataString(ofacStatus))+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PagedPayeeResponseV4>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiate Payee Creation
		/// <p>Initiate the process of creating 1 to 2000 payees in a batch</p>
		/// <p>Use the batchId in the response to query for status.</p>
		/// <p>In addition to standard semantic validations, a 400 will also result if: </p>
		/// <ul>
		/// <li>there is a duplicate remote id within the batch</li>
		/// <li>there is a duplicate email within the batch, i.e. if there is a conflict between the data provided for one payee within the batch and
		/// that provided for another payee within the same batch).</li>
		/// </ul>
		/// <p>The validation at this stage is intra-batch only.</p>
		/// <p>Validation against payees who have already been invited occurs subsequently during processing of the batch.</p>
		/// 
		/// V4CreatePayee v4/payees
		/// </summary>
		/// <param name="requestBody">Post payees to create.</param>
		public async Task V4CreatePayeeAsync(CreatePayeesRequestV4 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/payees";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Query Batch Status
		/// Fetch the status of a specific batch of payees. The batch is fully processed when status is ACCEPTED and pendingCount is 0 ( 200 - OK, 404 - batch not found ).
		/// 
		/// QueryBatchStatusV4 v4/payees/batch/{batchId}
		/// </summary>
		/// <param name="batchId">Batch Id</param>
		/// <returns>Get Batch Status</returns>
		public async Task<QueryBatchResponseV4> QueryBatchStatusV4Async(string batchId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/payees/batch/"+ (batchId==null? "" : System.Uri.EscapeDataString(batchId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<QueryBatchResponseV4>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Payee Changes
		/// Get a paginated response listing payee changes (updated since a particular time) to a limited set of fields:
		/// - dbaName
		/// - displayName
		/// - email
		/// - onboardedStatus
		/// - payeeCountry
		/// - payeeId
		/// - remoteId
		/// 
		/// ListPayeeChangesV4 v4/payees/deltas
		/// </summary>
		/// <param name="payorId">The Payor ID to find associated Payees</param>
		/// <param name="updatedSince">The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">Page size. Default is 100. Max allowable is 1000.</param>
		/// <returns>Details of Payee Changes</returns>
		public async Task<PayeeDeltaResponseV4> ListPayeeChangesV4Async(string payorId, System.DateTimeOffset updatedSince, int page, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/payees/deltas?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&updatedSince=" + updatedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&page="+page+"&pageSize="+pageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayeeDeltaResponseV4>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payee Invitation Status
		/// Returns a filtered, paginated list of payees associated with a payor, along with invitation status and grace period end date.
		/// 
		/// GetPayeesInvitationStatusV4 v4/payees/payors/{payorId}/invitationStatus
		/// </summary>
		/// <param name="payorId">The account owner Payor ID</param>
		/// <param name="payeeId">The UUID of the payee.</param>
		/// <param name="invitationStatus">The invitation status of the payees.</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">Page size. Default is 25. Max allowable is 100.</param>
		/// <returns>Get Payees with Invitaion status - filters of payeeId and invitationStatus</returns>
		public async Task<PagedPayeeInvitationStatusResponseV4> GetPayeesInvitationStatusV4Async(string payorId, string payeeId, string invitationStatus, int page, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/payees/payors/"+ (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"/invitationStatus&payeeId=" + (payeeId==null? "" : System.Uri.EscapeDataString(payeeId))+"&invitationStatus=" + (invitationStatus==null? "" : System.Uri.EscapeDataString(invitationStatus))+"&page="+page+"&pageSize="+pageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PagedPayeeInvitationStatusResponseV4>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Payee by Id
		/// <p>This API will delete Payee by Id (UUID). Deletion by ID is not allowed if:</p>
		/// <p>* Payee ID is not found</p>
		/// <p>* If Payee has not been on-boarded</p>
		/// <p>* If Payee is in grace period</p>
		/// <p>* If Payee has existing payments</p>
		/// 
		/// DeletePayeeByIdV4 v4/payees/{payeeId}
		/// </summary>
		/// <param name="payeeId">The UUID of the payee.</param>
		public async Task DeletePayeeByIdV4Async(string payeeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/payees/"+ (payeeId==null? "" : System.Uri.EscapeDataString(payeeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payee by Id
		/// Get Payee by Id
		/// GetPayeeByIdV4 v4/payees/{payeeId}
		/// </summary>
		/// <param name="payeeId">The UUID of the payee.</param>
		/// <param name="sensitive">Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked.
		///If set to true, and you have permission, the PII values will be returned as their original unmasked values.
		///</param>
		/// <returns>Success response, request completed okay</returns>
		public async Task<PayeeDetailResponseV4> GetPayeeByIdV4Async(string payeeId, bool sensitive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/payees/"+ (payeeId==null? "" : System.Uri.EscapeDataString(payeeId))+"&sensitive="+sensitive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PayeeDetailResponseV4>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resend Payee Invite
		/// <p>Resend an invite to the Payee The payee must have already been invited by the payor and not yet accepted or declined</p>
		/// <p>Any previous invites to the payee by this Payor will be invalidated</p>
		/// 
		/// ResendPayeeInviteV4 v4/payees/{payeeId}/invite
		/// </summary>
		/// <param name="payeeId">The UUID of the payee.</param>
		/// <param name="requestBody">Provide Payor Id in body of request</param>
		/// <returns>the request was accepted</returns>
		public async Task ResendPayeeInviteV4Async(string payeeId, InvitePayeeRequestV4 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/payees/"+ (payeeId==null? "" : System.Uri.EscapeDataString(payeeId))+"/invite";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Payee Details
		/// <p>Update payee details for the given Payee Id.</p>
		/// <p>Payors may only update the payee details if the payee has not yet onboarded</p>
		/// 
		/// PayeeDetailsUpdateV4 v4/payees/{payeeId}/payeeDetailsUpdate
		/// </summary>
		/// <param name="payeeId">The UUID of the payee.</param>
		/// <param name="requestBody">Request to update payee details</param>
		public async Task PayeeDetailsUpdateV4Async(string payeeId, UpdatePayeeDetailsRequestV4 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/payees/"+ (payeeId==null? "" : System.Uri.EscapeDataString(payeeId))+"/payeeDetailsUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Payee Remote Id
		/// <p>Update the remote Id for the given Payee Id.</p>
		/// 
		/// PayeesPostByPayeeId v4/payees/{payeeId}/remoteIdUpdate
		/// </summary>
		/// <param name="payeeId">The UUID of the payee.</param>
		/// <param name="requestBody">Request to update payee remote id v4</param>
		public async Task PayeesPostByPayeeIdAsync(string payeeId, UpdateRemoteIdRequestV4 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/payees/"+ (payeeId==null? "" : System.Uri.EscapeDataString(payeeId))+"/remoteIdUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Fundings for Payor
		/// <p>Get a list of Fundings for a payor.</p>
		/// 
		/// GetFundingsV4 v4/paymentaudit/fundings
		/// </summary>
		/// <param name="payorId">The account owner Payor ID</param>
		/// <param name="sourceAccountName">The source account name</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="sort">List of sort fields. Example: ```?sort=destinationCurrency:asc,destinationAmount:asc```
		///Default is no sort. The supported sort fields are: dateTime and amount.
		///</param>
		/// <returns>Get Fundings normal response</returns>
		public async Task<GetFundingsResponse> GetFundingsV4Async(string payorId, string sourceAccountName, int page, int pageSize, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/paymentaudit/fundings?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&sourceAccountName=" + (sourceAccountName==null? "" : System.Uri.EscapeDataString(sourceAccountName))+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetFundingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get List of Payments
		/// Get payments for the given payor Id
		/// ListPaymentsAuditV4 v4/paymentaudit/payments
		/// </summary>
		/// <param name="payeeId">The UUID of the payee.</param>
		/// <param name="payorId">The account owner Payor Id. Required for external users.</param>
		/// <param name="payorName">The payor’s name. This filters via a case insensitive substring match.</param>
		/// <param name="remoteId">The remote id of the payees.</param>
		/// <param name="remoteSystemId">The id of the remote system that is orchestrating payments</param>
		/// <param name="status">Payment Status</param>
		/// <param name="transmissionType">Transmission Type
		///* ACH
		///* SAME_DAY_ACH
		///* WIRE
		///* GACHO
		///</param>
		/// <param name="sourceAccountName">The source account name filter. This filters via a case insensitive substring match.</param>
		/// <param name="sourceAmountFrom">The source amount from range filter. Filters for sourceAmount >= sourceAmountFrom</param>
		/// <param name="sourceAmountTo">The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo</param>
		/// <param name="sourceCurrency">The source currency filter. Filters based on an exact match on the currency.</param>
		/// <param name="paymentAmountFrom">The payment amount from range filter. Filters for paymentAmount >= paymentAmountFrom</param>
		/// <param name="paymentAmountTo">The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo</param>
		/// <param name="paymentCurrency">The payment currency filter. Filters based on an exact match on the currency.</param>
		/// <param name="submittedDateFrom">The submitted date from range filter. Format is yyyy-MM-dd.</param>
		/// <param name="submittedDateTo">The submitted date to range filter. Format is yyyy-MM-dd.</param>
		/// <param name="paymentMemo">The payment memo filter. This filters via a case insensitive substring match.</param>
		/// <param name="railsId">Payout Rails ID filter - case insensitive match.
		///Any value is allowed, but you should use one of the supported railsId values.
		///To get this list of values, you should call the 'Get Supported Rails' endpoint.
		///</param>
		/// <param name="scheduledForDateFrom">Filter payouts scheduled to run on or after the given date. Format is yyyy-MM-dd.</param>
		/// <param name="scheduledForDateTo">Filter payouts scheduled to run on or before the given date. Format is yyyy-MM-dd.</param>
		/// <param name="scheduleStatus">Payout Schedule Status</param>
		/// <param name="postInstructFxStatus">The status of the post instruct FX step if one was required for the payment</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="sort">List of sort fields (e.g. ?sort=submittedDateTime:asc,status:asc). Default is sort by submittedDateTime:desc,paymentId:asc
		///The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency,
		///routingNumber, accountNumber, remoteId, submittedDateTime, status and paymentId
		///</param>
		/// <param name="sensitive">Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked.
		///If set to true, and you have permission, the PII values will be returned as their original unmasked values.
		///</param>
		/// <returns>Paginated list of payments</returns>
		public async Task<ListPaymentsResponseV4> ListPaymentsAuditV4Async(
					string payeeId, 
					string payorId, 
					string payorName, 
					string remoteId, 
					string remoteSystemId, 
					ListPaymentsAuditV3Status status, 
					ListPaymentsAuditV4TransmissionType transmissionType, 
					string sourceAccountName, 
					int sourceAmountFrom, 
					int sourceAmountTo, 
					string sourceCurrency, 
					int paymentAmountFrom, 
					int paymentAmountTo, 
					string paymentCurrency, 
					System.DateOnly submittedDateFrom, 
					System.DateOnly submittedDateTo, 
					string paymentMemo, 
					string railsId, 
					System.DateOnly scheduledForDateFrom, 
					System.DateOnly scheduledForDateTo, 
					ListPaymentsAuditV4ScheduleStatus scheduleStatus, 
					ListPaymentsAuditV4PostInstructFxStatus postInstructFxStatus, 
					int page, 
					int pageSize, 
					string sort, 
					bool sensitive, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/paymentaudit/payments?payeeId=" + (payeeId==null? "" : System.Uri.EscapeDataString(payeeId))+"&payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&payorName=" + (payorName==null? "" : System.Uri.EscapeDataString(payorName))+"&remoteId=" + (remoteId==null? "" : System.Uri.EscapeDataString(remoteId))+"&remoteSystemId=" + (remoteSystemId==null? "" : System.Uri.EscapeDataString(remoteSystemId))+"&status=" + status+"&transmissionType=" + transmissionType+"&sourceAccountName=" + (sourceAccountName==null? "" : System.Uri.EscapeDataString(sourceAccountName))+"&sourceAmountFrom="+sourceAmountFrom+"&sourceAmountTo="+sourceAmountTo+"&sourceCurrency=" + (sourceCurrency==null? "" : System.Uri.EscapeDataString(sourceCurrency))+"&paymentAmountFrom="+paymentAmountFrom+"&paymentAmountTo="+paymentAmountTo+"&paymentCurrency=" + (paymentCurrency==null? "" : System.Uri.EscapeDataString(paymentCurrency))+"&submittedDateFrom="+submittedDateFrom+"&submittedDateTo="+submittedDateTo+"&paymentMemo=" + (paymentMemo==null? "" : System.Uri.EscapeDataString(paymentMemo))+"&railsId=" + (railsId==null? "" : System.Uri.EscapeDataString(railsId))+"&scheduledForDateFrom="+scheduledForDateFrom+"&scheduledForDateTo="+scheduledForDateTo+"&scheduleStatus=" + scheduleStatus+"&postInstructFxStatus=" + postInstructFxStatus+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sensitive="+sensitive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPaymentsResponseV4>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payment
		/// Get the payment with the given id. This contains the payment history.
		/// 
		/// GetPaymentDetailsV4 v4/paymentaudit/payments/{paymentId}
		/// </summary>
		/// <param name="paymentId">Payment Id</param>
		/// <param name="sensitive">Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked.
		///If set to true, and you have permission, the PII values will be returned as their original unmasked values.
		///</param>
		/// <returns>200 response, request completed okay</returns>
		public async Task<PaymentResponseV4> GetPaymentDetailsV4Async(string paymentId, bool sensitive, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/paymentaudit/payments/"+ (paymentId==null? "" : System.Uri.EscapeDataString(paymentId))+"&sensitive="+sensitive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentResponseV4>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payout Statistics
		/// <p>Get payout statistics for a payor.</p>
		/// 
		/// GetPayoutStatsV4 v4/paymentaudit/payoutStatistics
		/// </summary>
		/// <param name="payorId">The account owner Payor ID. Required for external users.</param>
		/// <returns>Payout Statistics response</returns>
		public async Task<GetPayoutStatistics> GetPayoutStatsV4Async(string payorId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/paymentaudit/payoutStatistics?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPayoutStatistics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payouts for Payor
		/// Get List of payouts for payor
		/// 
		/// GetPayoutsForPayorV4 v4/paymentaudit/payouts
		/// </summary>
		/// <param name="payorId">The id (UUID) of the payor funding the payout or the payor whose payees are being paid.</param>
		/// <param name="payoutMemo">Payout Memo filter - case insensitive sub-string match</param>
		/// <param name="status">Payout Status</param>
		/// <param name="submittedDateFrom">The submitted date from range filter. Format is yyyy-MM-dd.</param>
		/// <param name="submittedDateTo">The submitted date to range filter. Format is yyyy-MM-dd.</param>
		/// <param name="fromPayorName">The name of the payor whose payees are being paid. This filters via a case insensitive substring match.</param>
		/// <param name="scheduledForDateFrom">Filter payouts scheduled to run on or after the given date. Format is yyyy-MM-dd.</param>
		/// <param name="scheduledForDateTo">Filter payouts scheduled to run on or before the given date. Format is yyyy-MM-dd.</param>
		/// <param name="scheduleStatus">Payout Schedule Status</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="sort">List of sort fields (e.g. ?sort=submittedDateTime:asc,instructedDateTime:asc,status:asc)
		///Default is submittedDateTime:asc
		///The supported sort fields are: submittedDateTime, instructedDateTime, status, totalPayments, payoutId, scheduledFor
		///</param>
		/// <returns>Payor data found</returns>
		public async Task<GetPayoutsResponse> GetPayoutsForPayorV4Async(string payorId, string payoutMemo, GetPayoutsForPayorV3Status status, System.DateOnly submittedDateFrom, System.DateOnly submittedDateTo, string fromPayorName, System.DateOnly scheduledForDateFrom, System.DateOnly scheduledForDateTo, ListPaymentsAuditV4ScheduleStatus scheduleStatus, int page, int pageSize, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/paymentaudit/payouts?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&payoutMemo=" + (payoutMemo==null? "" : System.Uri.EscapeDataString(payoutMemo))+"&status=" + status+"&submittedDateFrom="+submittedDateFrom+"&submittedDateTo="+submittedDateTo+"&fromPayorName=" + (fromPayorName==null? "" : System.Uri.EscapeDataString(fromPayorName))+"&scheduledForDateFrom="+scheduledForDateFrom+"&scheduledForDateTo="+scheduledForDateTo+"&scheduleStatus=" + scheduleStatus+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPayoutsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payments for Payout
		/// Get List of payments for Payout, allowing for RETURNED status
		/// 
		/// GetPaymentsForPayoutV4 v4/paymentaudit/payouts/{payoutId}
		/// </summary>
		/// <param name="railsId">Payout Rails ID filter - case insensitive match.
		///Any value is allowed, but you should use one of the supported railsId values.
		///To get this list of values, you should call the 'Get Supported Rails' endpoint.
		///</param>
		/// <param name="payoutId">The id (UUID) of the payout.</param>
		/// <param name="remoteId">The remote id of the payees.</param>
		/// <param name="remoteSystemId">The id of the remote system that is orchestrating payments</param>
		/// <param name="status">Payment Status</param>
		/// <param name="sourceAmountFrom">The source amount from range filter. Filters for sourceAmount >= sourceAmountFrom</param>
		/// <param name="sourceAmountTo">The source amount to range filter. Filters for sourceAmount ⇐ sourceAmountTo</param>
		/// <param name="paymentAmountFrom">The payment amount from range filter. Filters for paymentAmount >= paymentAmountFrom</param>
		/// <param name="paymentAmountTo">The payment amount to range filter. Filters for paymentAmount ⇐ paymentAmountTo</param>
		/// <param name="submittedDateFrom">The submitted date from range filter. Format is yyyy-MM-dd.</param>
		/// <param name="submittedDateTo">The submitted date to range filter. Format is yyyy-MM-dd.</param>
		/// <param name="transmissionType">Transmission Type
		///* ACH
		///* SAME_DAY_ACH
		///* WIRE
		///* GACHO
		///</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <param name="sort">List of sort fields (e.g. ?sort=submittedDateTime:asc,status:asc). Default is sort by remoteId
		///The supported sort fields are: sourceAmount, sourceCurrency, paymentAmount, paymentCurrency,
		///routingNumber, accountNumber, remoteId, submittedDateTime and status
		///</param>
		/// <param name="sensitive">Optional. If omitted or set to false, any Personal Identifiable Information (PII) values are returned masked.
		///If set to true, and you have permission, the PII values will be returned as their original unmasked values.
		///</param>
		/// <returns>200 response, data found okay</returns>
		public async Task<GetPaymentsForPayoutResponseV4> GetPaymentsForPayoutV4Async(
					string railsId, 
					string payoutId, 
					string remoteId, 
					string remoteSystemId, 
					ListPaymentsAuditV3Status status, 
					int sourceAmountFrom, 
					int sourceAmountTo, 
					int paymentAmountFrom, 
					int paymentAmountTo, 
					System.DateOnly submittedDateFrom, 
					System.DateOnly submittedDateTo, 
					ListPaymentsAuditV4TransmissionType transmissionType, 
					int page, 
					int pageSize, 
					string sort, 
					bool sensitive, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/paymentaudit/payouts/"+ (payoutId==null? "" : System.Uri.EscapeDataString(payoutId))+"?railsId=" + (railsId==null? "" : System.Uri.EscapeDataString(railsId))+"&remoteId=" + (remoteId==null? "" : System.Uri.EscapeDataString(remoteId))+"&remoteSystemId=" + (remoteSystemId==null? "" : System.Uri.EscapeDataString(remoteSystemId))+"&status=" + status+"&sourceAmountFrom="+sourceAmountFrom+"&sourceAmountTo="+sourceAmountTo+"&paymentAmountFrom="+paymentAmountFrom+"&paymentAmountTo="+paymentAmountTo+"&submittedDateFrom="+submittedDateFrom+"&submittedDateTo="+submittedDateTo+"&transmissionType=" + transmissionType+"&page="+page+"&pageSize="+pageSize+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&sensitive="+sensitive;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPaymentsForPayoutResponseV4>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Export Transactions
		/// Download a CSV file containing payments in a date range. Uses Transfer-Encoding - chunked to stream to the client. Date range is inclusive of both the start and end dates.
		/// ExportTransactionsCSVV4 v4/paymentaudit/transactions
		/// </summary>
		/// <param name="payorId"><p>The Payor ID for whom you wish to run the report.</p>
		///<p>For a Payor requesting the report, this could be their exact Payor, or it could be a child/descendant Payor.</p>
		///</param>
		/// <param name="startDate">Start date, inclusive. Format is YYYY-MM-DD</param>
		/// <param name="endDate">End date, inclusive. Format is YYYY-MM-DD</param>
		/// <param name="include"><p>Mode to determine whether to include other Payor's data in the results.</p>
		///<p>May only be used if payorId is specified.</p>
		///<p>Can be omitted or set to 'payorOnly' or 'payorAndDescendants'.</p>
		///<p>payorOnly: Only include results for the specified Payor. This is the default if 'include' is omitted.</p>
		///<p>payorAndDescendants: Aggregate results for all descendant Payors of the specified Payor. Should only be used if the Payor with the specified payorId has at least one child Payor.</p>
		///<p>Note when a Payor requests the report and include=payorAndDescendants is used, the following additional columns are included in the CSV: Payor Name, Payor Id</p>
		///</param>
		/// <returns>Export Transactions response</returns>
		public async Task ExportTransactionsCSVV4Async(string payorId, System.DateOnly startDate, System.DateOnly endDate, ExportTransactionsCSVV4Include include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/paymentaudit/transactions?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&startDate="+startDate+"&endDate="+endDate+"&include=" + include;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Payment Changes
		/// Get a paginated response listing payment changes.
		/// ListPaymentChangesV4 v4/payments/deltas
		/// </summary>
		/// <param name="payorId">The Payor ID to find associated Payments</param>
		/// <param name="updatedSince">The updatedSince filter in the format YYYY-MM-DDThh:mm:ss+hh:mm</param>
		/// <param name="page">Page number. Default is 1.</param>
		/// <param name="pageSize">The number of results to return in a page</param>
		/// <returns>Details of Payment Changes</returns>
		public async Task<PaymentDeltaResponse> ListPaymentChangesV4Async(string payorId, System.DateTimeOffset updatedSince, int page, int pageSize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/payments/deltas?payorId=" + (payorId==null? "" : System.Uri.EscapeDataString(payorId))+"&updatedSince=" + updatedSince.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&page="+page+"&pageSize="+pageSize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PaymentDeltaResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ListPaymentsAuditV3Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWAITING_FUNDS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FUNDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNFUNDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_PAYMENT_REQUESTED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED_BY_RAILS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRMED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURNED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITHDRAWN = 10,
	}
	
	public enum GetPayoutsForPayorV3Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUOTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUCTED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOMPLETE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFIRMED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITHDRAWN = 8,
	}
	
	public enum GetPaymentsForPayoutV3Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITHDRAWN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITHDRAWABLE = 3,
	}
	
	public enum GetPaymentsForPayoutV3TransmissionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAME_DAY_ACH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WIRE = 2,
	}
	
	public enum ListPaymentsAuditV4TransmissionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAME_DAY_ACH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WIRE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GACHO = 4,
	}
	
	public enum ListPaymentsAuditV4ScheduleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	public enum ListPaymentsAuditV4PostInstructFxStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURNED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESUBMITTED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUNDED = 7,
	}
	
	public enum ExportTransactionsCSVV4Include
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		payorOnly = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		payorAndDescendants = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
