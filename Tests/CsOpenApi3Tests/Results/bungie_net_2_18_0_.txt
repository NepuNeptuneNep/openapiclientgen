//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationsApiUsage
	{
		
		/// <summary>
		/// Counts for on API calls made for the time range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiCalls")]
		public ApplicationsSeries[] ApiCalls { get; set; }
		
		/// <summary>
		/// Instances of blocked requests or requests that crossed the warn threshold during the time range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="throttledRequests")]
		public ApplicationsSeries[] ThrottledRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationsSeries
	{
		
		/// <summary>
		/// Collection of samples with time and value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datapoints")]
		public ApplicationsDatapoint[] Datapoints { get; set; }
		
		/// <summary>
		/// Target to which to datapoints apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationsDatapoint
	{
		
		/// <summary>
		/// Count associated with timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Double> Count { get; set; }
		
		/// <summary>
		/// Timestamp for the related count.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationsApplication
	{
		
		/// <summary>
		/// Unique ID assigned to the application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public System.Nullable<System.Int32> ApplicationId { get; set; }
		
		/// <summary>
		/// Date the application was first added to our database.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Date the first time the application status entered the 'Public' status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPublished")]
		public System.Nullable<System.DateTimeOffset> FirstPublished { get; set; }
		
		/// <summary>
		/// Link to website for the application where a user can learn more about the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// Name of the application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Value of the Origin header sent in requests generated by this application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// An optional override for the Authorize view name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideAuthorizeViewName")]
		public string OverrideAuthorizeViewName { get; set; }
		
		/// <summary>
		/// URL used to pass the user's authorization code to the application
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectUrl")]
		public string RedirectUrl { get; set; }
		
		/// <summary>
		/// Permissions the application needs to work
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<System.Int64> Scope { get; set; }
		
		/// <summary>
		/// Current status of the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// Date the application status last changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusChanged")]
		public System.Nullable<System.DateTimeOffset> StatusChanged { get; set; }
		
		/// <summary>
		/// List of team members who manage this application on Bungie.net. Will always consist of at least the application owner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="team")]
		public ApplicationsApplicationDeveloper[] Team { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationsApplicationDeveloper
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiEulaVersion")]
		public System.Nullable<System.Int32> ApiEulaVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<System.Int32> Role { get; set; }
		
		/// <summary>
		/// This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserUserInfoCard User { get; set; }
	}
	
	/// <summary>
	/// This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserUserInfoCard
	{
		
		/// <summary>
		/// The list of Membership Types indicating the platforms on which this Membership can be used.
		/// Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableMembershipTypes")]
		public int[] ApplicableMembershipTypes { get; set; }
		
		/// <summary>
		/// The bungie global display name, if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayName")]
		public string BungieGlobalDisplayName { get; set; }
		
		/// <summary>
		/// The bungie global display name code, if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayNameCode")]
		public string BungieGlobalDisplayNameCode { get; set; }
		
		/// <summary>
		/// If there is a cross save override in effect, this value will tell you the type that is overridding this one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossSaveOverride")]
		public System.Nullable<System.Int32> CrossSaveOverride { get; set; }
		
		/// <summary>
		/// Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// URL the Icon if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconPath")]
		public string IconPath { get; set; }
		
		/// <summary>
		/// If True, this is a public user membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		/// <summary>
		/// Membership ID as they user is known in the Accounts service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipId")]
		public System.Nullable<System.Int64> MembershipId { get; set; }
		
		/// <summary>
		/// Type of the membership. Not necessarily the native type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		/// <summary>
		/// A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplementalDisplayName")]
		public string SupplementalDisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationsApplicationScopes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="256")]
		_256 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="512")]
		_512 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1024")]
		_1024 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2048")]
		_2048 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4096")]
		_4096 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8192")]
		_8192 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16384")]
		_16384 = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationsApplicationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationsDeveloperRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// The types of credentials the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.CredentialType.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BungieCredentialType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 13,
	}
	
	/// <summary>
	/// The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BungieMembershipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="254")]
		_254 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-1")]
		_Minus1 = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommonModelsCoreSetting
	{
		
		[System.Runtime.Serialization.DataMember(Name="childSettings")]
		public CommonModelsCoreSetting[] ChildSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imagePath")]
		public string ImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommonModelsCoreSettingsConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="clanBannerDecalColors")]
		public CommonModelsCoreSetting[] ClanBannerDecalColors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clanBannerDecals")]
		public CommonModelsCoreSetting[] ClanBannerDecals { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clanBannerGonfalonColors")]
		public CommonModelsCoreSetting[] ClanBannerGonfalonColors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clanBannerGonfalonDetailColors")]
		public CommonModelsCoreSetting[] ClanBannerGonfalonDetailColors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clanBannerGonfalonDetails")]
		public CommonModelsCoreSetting[] ClanBannerGonfalonDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clanBannerGonfalons")]
		public CommonModelsCoreSetting[] ClanBannerGonfalons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clanBannerStandards")]
		public CommonModelsCoreSetting[] ClanBannerStandards { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultGroupTheme")]
		public CommonModelsCoreSetting DefaultGroupTheme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destiny2CoreSettings")]
		public CommonModelsDestiny2CoreSettings Destiny2CoreSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinyMembershipTypes")]
		public CommonModelsCoreSetting[] DestinyMembershipTypes { get; set; }
		
		/// <summary>
		/// The set of all email subscription/opt-in settings and definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailSettings")]
		public UserEmailSettings EmailSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fireteamActivities")]
		public CommonModelsCoreSetting[] FireteamActivities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forumCategories")]
		public CommonModelsCoreSetting[] ForumCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupAvatars")]
		public CommonModelsCoreSetting[] GroupAvatars { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignoreReasons")]
		public CommonModelsCoreSetting[] IgnoreReasons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recruitmentActivities")]
		public CommonModelsCoreSetting[] RecruitmentActivities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recruitmentMiscTags")]
		public CommonModelsCoreSetting[] RecruitmentMiscTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recruitmentPlatformTags")]
		public CommonModelsCoreSetting[] RecruitmentPlatformTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systemContentLocales")]
		public CommonModelsCoreSetting[] SystemContentLocales { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systems")]
		public System.Collections.Generic.Dictionary<string, CommonModelsCoreSystem> Systems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userContentLocales")]
		public CommonModelsCoreSetting[] UserContentLocales { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommonModelsDestiny2CoreSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="activeSealsRootNodeHash")]
		public System.Nullable<System.UInt32> ActiveSealsRootNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeTriumphsRootNodeHash")]
		public System.Nullable<System.UInt32> ActiveTriumphsRootNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ammoTypeHeavyIcon")]
		public string AmmoTypeHeavyIcon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ammoTypePrimaryIcon")]
		public string AmmoTypePrimaryIcon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ammoTypeSpecialIcon")]
		public string AmmoTypeSpecialIcon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="badgesRootNode")]
		public System.Nullable<System.UInt32> BadgesRootNode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collectionRootNode")]
		public System.Nullable<System.UInt32> CollectionRootNode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="craftingRootNodeHash")]
		public System.Nullable<System.UInt32> CraftingRootNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentRankProgressionHashes")]
		public int[] CurrentRankProgressionHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentSeasonHash")]
		public System.Nullable<System.UInt32> CurrentSeasonHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentSeasonalArtifactHash")]
		public System.Nullable<System.UInt32> CurrentSeasonalArtifactHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exoticCatalystsRootNodeHash")]
		public System.Nullable<System.UInt32> ExoticCatalystsRootNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="futureSeasonHashes")]
		public int[] FutureSeasonHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guardianRankConstantsHash")]
		public System.Nullable<System.UInt32> GuardianRankConstantsHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guardianRanksRootNodeHash")]
		public System.Nullable<System.UInt32> GuardianRanksRootNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="insertPlugFreeBlockedSocketTypeHashes")]
		public int[] InsertPlugFreeBlockedSocketTypeHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="insertPlugFreeProtectedPlugItemHashes")]
		public int[] InsertPlugFreeProtectedPlugItemHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legacySealsRootNodeHash")]
		public System.Nullable<System.UInt32> LegacySealsRootNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legacyTriumphsRootNodeHash")]
		public System.Nullable<System.UInt32> LegacyTriumphsRootNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loadoutConstantsHash")]
		public System.Nullable<System.UInt32> LoadoutConstantsHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loreRootNodeHash")]
		public System.Nullable<System.UInt32> LoreRootNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medalsRootNode")]
		public System.Nullable<System.UInt32> MedalsRootNode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="medalsRootNodeHash")]
		public System.Nullable<System.UInt32> MedalsRootNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricsRootNode")]
		public System.Nullable<System.UInt32> MetricsRootNode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pastSeasonHashes")]
		public int[] PastSeasonHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recordsRootNode")]
		public System.Nullable<System.UInt32> RecordsRootNode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seasonalChallengesPresentationNodeHash")]
		public System.Nullable<System.UInt32> SeasonalChallengesPresentationNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="undiscoveredCollectibleImage")]
		public string UndiscoveredCollectibleImage { get; set; }
	}
	
	/// <summary>
	/// The set of all email subscription/opt-in settings and definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserEmailSettings
	{
		
		/// <summary>
		/// Keyed by the name identifier of the opt-in definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optInDefinitions")]
		public System.Collections.Generic.Dictionary<string, UserEmailOptInDefinition> OptInDefinitions { get; set; }
		
		/// <summary>
		/// Keyed by the name identifier of the Subscription definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionDefinitions")]
		public System.Collections.Generic.Dictionary<string, UserEmailSubscriptionDefinition> SubscriptionDefinitions { get; set; }
		
		/// <summary>
		/// Keyed by the name identifier of the View definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="views")]
		public System.Collections.Generic.Dictionary<string, UserEmailViewDefinition> Views { get; set; }
	}
	
	/// <summary>
	/// Defines a single opt-in category: a wide-scoped permission to send emails for the subject related to the opt-in.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserEmailOptInDefinition
	{
		
		/// <summary>
		/// Information about the dependent subscriptions for this opt-in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependentSubscriptions")]
		public UserEmailSubscriptionDefinition[] DependentSubscriptions { get; set; }
		
		/// <summary>
		/// The unique identifier for this opt-in category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If true, this opt-in setting should be set by default in situations where accounts are created without explicit choices about what they're opting into.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setByDefault")]
		public System.Nullable<System.Boolean> SetByDefault { get; set; }
		
		/// <summary>
		/// The flag value for this opt-in category. For historical reasons, this is defined as a flags enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int64> Value { get; set; }
	}
	
	/// <summary>
	/// Defines a single subscription: permission to send emails for a specific, focused subject (generally timeboxed, such as for a specific release of a product or feature).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserEmailSubscriptionDefinition
	{
		
		/// <summary>
		/// A dictionary of localized text for the EMail Opt-in setting, keyed by the locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localization")]
		public System.Collections.Generic.Dictionary<string, UserEMailSettingSubscriptionLocalization> Localization { get; set; }
		
		/// <summary>
		/// The unique identifier for this subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The bitflag value for this subscription. Should be a unique power of two value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int64> Value { get; set; }
	}
	
	/// <summary>
	/// Localized text relevant to a given EMail setting in a given localization. Extra settings specifically for subscriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserEMailSettingSubscriptionLocalization
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="knownUserActionText")]
		public string KnownUserActionText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registeredUserDescription")]
		public string RegisteredUserDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unknownUserActionText")]
		public string UnknownUserActionText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unknownUserDescription")]
		public string UnknownUserDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unregisteredUserDescription")]
		public string UnregisteredUserDescription { get; set; }
	}
	
	/// <summary>
	/// Represents a data-driven view for Email settings. Web/Mobile UI can use this data to show new EMail settings consistently without further manual work.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserEmailViewDefinition
	{
		
		/// <summary>
		/// The identifier for this view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ordered list of settings to show in this view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewSettings")]
		public UserEmailViewDefinitionSetting[] ViewSettings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserEmailViewDefinitionSetting
	{
		
		/// <summary>
		/// A dictionary of localized text for the EMail setting, keyed by the locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localization")]
		public System.Collections.Generic.Dictionary<string, UserEMailSettingLocalization> Localization { get; set; }
		
		/// <summary>
		/// The identifier for this UI Setting, which can be used to relate it to custom strings or other data as desired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The OptInFlags value to set or clear if this setting is set or cleared in the UI. It is the aggregate of all underlying opt-in flags related to this setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optInAggregateValue")]
		public System.Nullable<System.Int64> OptInAggregateValue { get; set; }
		
		/// <summary>
		/// If true, this setting should be set by default if the user hasn't chosen whether it's set or cleared yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setByDefault")]
		public System.Nullable<System.Boolean> SetByDefault { get; set; }
		
		/// <summary>
		/// The subscriptions to show as children of this setting, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptions")]
		public UserEmailSubscriptionDefinition[] Subscriptions { get; set; }
	}
	
	/// <summary>
	/// Localized text relevant to a given EMail setting in a given localization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserEMailSettingLocalization
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommonModelsCoreSystem
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string> Parameters { get; set; }
	}
	
	/// <summary>
	/// A set of flags for reason(s) why the component populated in the way that it did. Inspect the individual flags for the reasons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ComponentsComponentPrivacySetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// The base class for any component-returning object that may need to indicate information about the state of the component being returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComponentsComponentResponse
	{
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigClanBannerClanBannerDecal
	{
		
		[System.Runtime.Serialization.DataMember(Name="backgroundPath")]
		public string BackgroundPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foregroundPath")]
		public string ForegroundPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigClanBannerClanBannerSource
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigGroupTheme
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="folder")]
		public string Folder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigUserTheme
	{
		
		[System.Runtime.Serialization.DataMember(Name="userThemeDescription")]
		public string UserThemeDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userThemeId")]
		public System.Nullable<System.Int32> UserThemeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userThemeName")]
		public string UserThemeName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentCommentSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="commentCount")]
		public System.Nullable<System.Int32> CommentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topicId")]
		public System.Nullable<System.Int64> TopicId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentContentItemPublicContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowComments")]
		public System.Nullable<System.Boolean> AllowComments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public UserGeneralUser Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoEnglishPropertyFallback")]
		public System.Nullable<System.Boolean> AutoEnglishPropertyFallback { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cType")]
		public string CType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cmsPath")]
		public string CmsPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commentSummary")]
		public ContentCommentSummary CommentSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentId")]
		public System.Nullable<System.Int64> ContentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasAgeGate")]
		public System.Nullable<System.Boolean> HasAgeGate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumAge")]
		public System.Nullable<System.Int32> MinimumAge { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifyDate")]
		public System.Nullable<System.DateTimeOffset> ModifyDate { get; set; }
		
		/// <summary>
		/// Firehose content is really a collection of metadata and "properties", which are the potentially-but-not-strictly localizable data that comprises the meat of whatever content is being shown.
		///As Cole Porter would have crooned, "Anything Goes" with Firehose properties. They are most often strings, but they can theoretically be anything. They are JSON encoded, and could be JSON structures, simple strings, numbers etc... The Content Type of the item (cType) will describe the properties, and thus how they ought to be deserialized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, object> Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ratingImagePath")]
		public string RatingImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="representations")]
		public ContentContentRepresentation[] Representations { get; set; }
		
		/// <summary>
		/// NOTE: Tags will always be lower case.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserGeneralUser
	{
		
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blizzardDisplayName")]
		public string BlizzardDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cachedBungieGlobalDisplayName")]
		public string CachedBungieGlobalDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cachedBungieGlobalDisplayNameCode")]
		public string CachedBungieGlobalDisplayNameCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="context")]
		public UserUserToUserContext Context { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="egsDisplayName")]
		public string EgsDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fbDisplayName")]
		public string FbDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstAccess")]
		public System.Nullable<System.DateTimeOffset> FirstAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastBanReportId")]
		public System.Nullable<System.Int64> LastBanReportId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdate")]
		public System.Nullable<System.DateTimeOffset> LastUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legacyPortalUID")]
		public System.Nullable<System.Int64> LegacyPortalUID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeInheritDefault")]
		public System.Nullable<System.Boolean> LocaleInheritDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipId")]
		public System.Nullable<System.Int64> MembershipId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="normalizedName")]
		public string NormalizedName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileBanExpire")]
		public System.Nullable<System.DateTimeOffset> ProfileBanExpire { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profilePicture")]
		public System.Nullable<System.Int32> ProfilePicture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profilePicturePath")]
		public string ProfilePicturePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profilePictureWidePath")]
		public string ProfilePictureWidePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileTheme")]
		public System.Nullable<System.Int32> ProfileTheme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileThemeName")]
		public string ProfileThemeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="psnDisplayName")]
		public string PsnDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showActivity")]
		public System.Nullable<System.Boolean> ShowActivity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showGroupMessaging")]
		public System.Nullable<System.Boolean> ShowGroupMessaging { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stadiaDisplayName")]
		public string StadiaDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusDate")]
		public System.Nullable<System.DateTimeOffset> StatusDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusText")]
		public string StatusText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="steamDisplayName")]
		public string SteamDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="successMessageFlags")]
		public System.Nullable<System.Int64> SuccessMessageFlags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twitchDisplayName")]
		public string TwitchDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uniqueName")]
		public string UniqueName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userTitle")]
		public System.Nullable<System.Int32> UserTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userTitleDisplay")]
		public string UserTitleDisplay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xboxDisplayName")]
		public string XboxDisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserUserToUserContext
	{
		
		[System.Runtime.Serialization.DataMember(Name="globalIgnoreEndDate")]
		public System.Nullable<System.DateTimeOffset> GlobalIgnoreEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignoreStatus")]
		public IgnoresIgnoreResponse IgnoreStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFollowing")]
		public System.Nullable<System.Boolean> IsFollowing { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IgnoresIgnoreResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="ignoreFlags")]
		public System.Nullable<System.Int32> IgnoreFlags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isIgnored")]
		public System.Nullable<System.Boolean> IsIgnored { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentContentRepresentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validationString")]
		public string ValidationString { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentModelsContentPreview
	{
		
		[System.Runtime.Serialization.DataMember(Name="itemInSet")]
		public System.Nullable<System.Boolean> ItemInSet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setNesting")]
		public System.Nullable<System.Int32> SetNesting { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setTag")]
		public string SetTag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useSetId")]
		public System.Nullable<System.Int32> UseSetId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContentModelsContentPropertyDataTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentModelsContentTypeDefaultValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="whenClause")]
		public string WhenClause { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="whenValue")]
		public string WhenValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentModelsContentTypeDescription
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowComments")]
		public System.Nullable<System.Boolean> AllowComments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoEnglishPropertyFallback")]
		public System.Nullable<System.Boolean> AutoEnglishPropertyFallback { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindIdentifierToProperty")]
		public string BindIdentifierToProperty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="boundRegex")]
		public string BoundRegex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bulkUploadable")]
		public System.Nullable<System.Boolean> BulkUploadable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cType")]
		public string CType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentDescription")]
		public string ContentDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forceIdentifierBinding")]
		public System.Nullable<System.Boolean> ForceIdentifierBinding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previewImage")]
		public string PreviewImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previews")]
		public ContentModelsContentPreview[] Previews { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ContentModelsContentTypeProperty[] Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertySections")]
		public ContentModelsContentTypePropertySection[] PropertySections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reminder")]
		public string Reminder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showInContentEditor")]
		public System.Nullable<System.Boolean> ShowInContentEditor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suppressCmsPath")]
		public System.Nullable<System.Boolean> SuppressCmsPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagMetadata")]
		public ContentModelsTagMetadataDefinition[] TagMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagMetadataItems")]
		public System.Collections.Generic.Dictionary<string, ContentModelsTagMetadataItem> TagMetadataItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeOf")]
		public string TypeOf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usageExamples")]
		public string[] UsageExamples { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentModelsContentTypeProperty
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, string> Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bindToProperty")]
		public string BindToProperty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="boundRegex")]
		public string BoundRegex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childProperties")]
		public ContentModelsContentTypeProperty[] ChildProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentTypeAllowed")]
		public string ContentTypeAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datatype")]
		public System.Nullable<System.Int32> Datatype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultValues")]
		public ContentModelsContentTypeDefaultValue[] DefaultValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entitytype")]
		public string Entitytype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fallback")]
		public System.Nullable<System.Boolean> Fallback { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCombo")]
		public System.Nullable<System.Boolean> IsCombo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isExternalAllowed")]
		public System.Nullable<System.Boolean> IsExternalAllowed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isImage")]
		public System.Nullable<System.Boolean> IsImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTitle")]
		public System.Nullable<System.Boolean> IsTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isVideo")]
		public System.Nullable<System.Boolean> IsVideo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legalContentTypes")]
		public string[] LegalContentTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localizable")]
		public System.Nullable<System.Boolean> Localizable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxByteLength")]
		public System.Nullable<System.Int32> MaxByteLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxFileSize")]
		public System.Nullable<System.Int32> MaxFileSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxHeight")]
		public System.Nullable<System.Int32> MaxHeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxLength")]
		public System.Nullable<System.Int32> MaxLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxWidth")]
		public System.Nullable<System.Int32> MaxWidth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minHeight")]
		public System.Nullable<System.Int32> MinHeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minWidth")]
		public System.Nullable<System.Int32> MinWidth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertyDescription")]
		public string PropertyDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="propertySection")]
		public string PropertySection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readableName")]
		public string ReadableName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regexp")]
		public string Regexp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="representationSelection")]
		public System.Collections.Generic.Dictionary<string, string> RepresentationSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="representationValidationString")]
		public string RepresentationValidationString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rootPropertyName")]
		public string RootPropertyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rssAttribute")]
		public string RssAttribute { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suppressProperty")]
		public System.Nullable<System.Boolean> SuppressProperty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validateAs")]
		public string ValidateAs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public System.Nullable<System.Boolean> Visible { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visibleDependency")]
		public string VisibleDependency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visibleOn")]
		public string VisibleOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentModelsContentTypePropertySection
	{
		
		[System.Runtime.Serialization.DataMember(Name="collapsed")]
		public System.Nullable<System.Boolean> Collapsed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="readableName")]
		public string ReadableName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentModelsTagMetadataDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="datatype")]
		public string Datatype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isRequired")]
		public System.Nullable<System.Boolean> IsRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ContentModelsTagMetadataItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentModelsTagMetadataItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public string[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagText")]
		public string TagText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentNewsArticleRssItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HtmlContent { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Link { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OptionalMobileImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PubDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UniqueIdentifier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContentNewsArticleRssResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CategoryFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CurrentPaginationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContentNewsArticleRssItem[] NewsArticles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NextPaginationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ResultCountThisPage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DatesDateRange
	{
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
	}
	
	/// <summary>
	/// Represents the public-facing status of an activity: any data about what is currently active in the Activity, regardless of an individual character's progress in it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyActivitiesDestinyPublicActivityStatus
	{
		
		/// <summary>
		/// Active Challenges for the activity, if any - represented as hashes for DestinyObjectiveDefinitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challengeObjectiveHashes")]
		public int[] ChallengeObjectiveHashes { get; set; }
		
		/// <summary>
		/// The active modifiers on this activity, if any - represented as hashes for DestinyActivityModifierDefinitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifierHashes")]
		public int[] ModifierHashes { get; set; }
		
		/// <summary>
		/// If the activity itself provides any specific "mock" rewards, this will be the items and their quantity.
		///Why "mock", you ask? Because these are the rewards as they are represented in the tooltip of the Activity.
		///These are often pointers to fake items that look good in a tooltip, but represent an abstract concept of what you will get for a reward rather than the specific items you may obtain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardTooltipItems")]
		public DestinyDestinyItemQuantity[] RewardTooltipItems { get; set; }
	}
	
	/// <summary>
	/// Used in a number of Destiny contracts to return data about an item stack and its quantity. Can optionally return an itemInstanceId if the item is instanced - in which case, the quantity returned will be 1. If it's not... uh, let me know okay? Thanks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDestinyItemQuantity
	{
		
		/// <summary>
		/// Indicates that this item quantity may be conditionally shown or hidden, based on various sources of state. For example: server flags, account state, or character progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasConditionalVisibility")]
		public System.Nullable<System.Boolean> HasConditionalVisibility { get; set; }
		
		/// <summary>
		/// The hash identifier for the item in question. Use it to look up the item's DestinyInventoryItemDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// If this quantity is referring to a specific instance of an item, this will have the item's instance ID. Normally, this will be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemInstanceId")]
		public System.Nullable<System.Int64> ItemInstanceId { get; set; }
		
		/// <summary>
		/// The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
	}
	
	/// <summary>
	/// The various known UI styles in which an item can be highlighted. It'll be up to you to determine what you want to show based on this highlighting, BNet doesn't have any assets that correspond to these states. And yeah, RiseOfIron and Comet have their own special highlight states. Don't ask me, I can't imagine they're still used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyActivityGraphNodeHighlightType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyAdvancedAwaAuthorizationResult
	{
		
		/// <summary>
		/// Credential used to prove the user authorized an advanced write action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionToken")]
		public string ActionToken { get; set; }
		
		/// <summary>
		/// Message to the app developer to help understand the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerNote")]
		public string DeveloperNote { get; set; }
		
		/// <summary>
		/// This token may be used to perform the requested action this number of times, at a maximum. If this value is 0, then there is no limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumNumberOfUses")]
		public System.Nullable<System.Int32> MaximumNumberOfUses { get; set; }
		
		/// <summary>
		/// MembershipType from the permission request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseReason")]
		public System.Nullable<System.Int32> ResponseReason { get; set; }
		
		/// <summary>
		/// Advanced Write Action Type from the permission request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<System.Int32> Type { get; set; }
		
		/// <summary>
		/// Indication of how the user responded to the request. If the value is "Approved" the actionToken will contain the token that can be presented when performing the advanced write action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userSelection")]
		public System.Nullable<System.Int32> UserSelection { get; set; }
		
		/// <summary>
		/// Time, UTC, when token expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validUntil")]
		public System.Nullable<System.DateTimeOffset> ValidUntil { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyAdvancedAwaInitializeResponse
	{
		
		/// <summary>
		/// ID used to get the token. Present this ID to the user as it will identify this specific request on their device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// True if the PUSH message will only be sent to the device that made this request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentToSelf")]
		public System.Nullable<System.Boolean> SentToSelf { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyAdvancedAwaPermissionRequested
	{
		
		/// <summary>
		/// Item instance ID the action shall be applied to. This is optional for all but a new AwaType values. Rule of thumb is to provide the item instance ID if one is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedItemId")]
		public System.Nullable<System.Int64> AffectedItemId { get; set; }
		
		/// <summary>
		/// Destiny character ID, if applicable, that will be affected by the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		/// <summary>
		/// Destiny membership type of the account to modify.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		/// <summary>
		/// Type of advanced write action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<System.Int32> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyAdvancedAwaResponseReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyAdvancedAwaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyAdvancedAwaUserResponse
	{
		
		/// <summary>
		/// Correlation ID of the request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// Secret nonce received via the PUSH notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		public string[] Nonce { get; set; }
		
		/// <summary>
		/// Indication of the selection the user has made (Approving or rejecting the action)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selection")]
		public System.Nullable<System.Int32> Selection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyAdvancedAwaUserSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyArtifactsDestinyArtifactCharacterScoped
	{
		
		[System.Runtime.Serialization.DataMember(Name="artifactHash")]
		public System.Nullable<System.UInt32> ArtifactHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pointsUsed")]
		public System.Nullable<System.Int32> PointsUsed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resetCount")]
		public System.Nullable<System.Int32> ResetCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tiers")]
		public DestinyArtifactsDestinyArtifactTier[] Tiers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyArtifactsDestinyArtifactTier
	{
		
		[System.Runtime.Serialization.DataMember(Name="isUnlocked")]
		public System.Nullable<System.Boolean> IsUnlocked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DestinyArtifactsDestinyArtifactTierItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pointsToUnlock")]
		public System.Nullable<System.Int32> PointsToUnlock { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tierHash")]
		public System.Nullable<System.UInt32> TierHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyArtifactsDestinyArtifactTierItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
	}
	
	/// <summary>
	/// Represents a Seasonal Artifact and all data related to it for the requested Account.
	///It can be combined with Character-scoped data for a full picture of what a character has available/has chosen, or just these settings can be used for overview information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyArtifactsDestinyArtifactProfileScoped
	{
		
		[System.Runtime.Serialization.DataMember(Name="artifactHash")]
		public System.Nullable<System.UInt32> ArtifactHash { get; set; }
		
		/// <summary>
		/// Information about a current character's status with a Progression. A progression is a value that can increase with activity and has levels. Think Character Level and Reputation Levels. Combine this "live" data with the related DestinyProgressionDefinition for a full picture of the Progression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointProgression")]
		public DestinyDestinyProgression PointProgression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pointsAcquired")]
		public System.Nullable<System.Int32> PointsAcquired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="powerBonus")]
		public System.Nullable<System.Int32> PowerBonus { get; set; }
		
		/// <summary>
		/// Information about a current character's status with a Progression. A progression is a value that can increase with activity and has levels. Think Character Level and Reputation Levels. Combine this "live" data with the related DestinyProgressionDefinition for a full picture of the Progression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="powerBonusProgression")]
		public DestinyDestinyProgression PowerBonusProgression { get; set; }
	}
	
	/// <summary>
	/// Information about a current character's status with a Progression. A progression is a value that can increase with activity and has levels. Think Character Level and Reputation Levels. Combine this "live" data with the related DestinyProgressionDefinition for a full picture of the Progression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDestinyProgression
	{
		
		/// <summary>
		/// This is the total amount of progress obtained overall for this progression (for instance, the total amount of Character Level experience earned)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentProgress")]
		public System.Nullable<System.Int32> CurrentProgress { get; set; }
		
		/// <summary>
		/// The number of resets of this progression you've executed this season, if applicable to this progression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentResetCount")]
		public System.Nullable<System.Int32> CurrentResetCount { get; set; }
		
		/// <summary>
		/// If this progression has a daily limit, this is that limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyLimit")]
		public System.Nullable<System.Int32> DailyLimit { get; set; }
		
		/// <summary>
		/// The amount of progress earned today for this progression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyProgress")]
		public System.Nullable<System.Int32> DailyProgress { get; set; }
		
		/// <summary>
		/// This is the level of the progression (for instance, the Character Level).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<System.Int32> Level { get; set; }
		
		/// <summary>
		/// This is the maximum possible level you can achieve for this progression (for example, the maximum character level obtainable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="levelCap")]
		public System.Nullable<System.Int32> LevelCap { get; set; }
		
		/// <summary>
		/// The total amount of progression (i.e. "Experience") needed in order to reach the next level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLevelAt")]
		public System.Nullable<System.Int32> NextLevelAt { get; set; }
		
		/// <summary>
		/// The amount of progression (i.e. "Experience") needed to reach the next level of this Progression. Jeez, progression is such an overloaded word.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressToNextLevel")]
		public System.Nullable<System.Int32> ProgressToNextLevel { get; set; }
		
		/// <summary>
		/// The hash identifier of the Progression in question. Use it to look up the DestinyProgressionDefinition in static data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressionHash")]
		public System.Nullable<System.UInt32> ProgressionHash { get; set; }
		
		/// <summary>
		/// Information about historical rewards for this progression, if there is any data for it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardItemStates")]
		public int[] RewardItemStates { get; set; }
		
		/// <summary>
		/// Information about historical resets of this progression, if there is any data for it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seasonResets")]
		public DestinyDestinyProgressionResetEntry[] SeasonResets { get; set; }
		
		/// <summary>
		/// Progressions define their levels in "steps". Since the last step may be repeatable, the user may be at a higher level than the actual Step achieved in the progression. Not necessarily useful, but potentially interesting for those cruising the API. Relate this to the "steps" property of the DestinyProgression to see which step the user is on, if you care about that. (Note that this is Content Version dependent since it refers to indexes.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepIndex")]
		public System.Nullable<System.Int32> StepIndex { get; set; }
		
		/// <summary>
		/// If this progression has a weekly limit, this is that limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklyLimit")]
		public System.Nullable<System.Int32> WeeklyLimit { get; set; }
		
		/// <summary>
		/// The amount of progress earned toward this progression in the current week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklyProgress")]
		public System.Nullable<System.Int32> WeeklyProgress { get; set; }
	}
	
	/// <summary>
	/// Represents a season and the number of resets you had in that season.
	/// We do not necessarily - even for progressions with resets - track it over all seasons. So be careful and check the season numbers being returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDestinyProgressionResetEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="resets")]
		public System.Nullable<System.Int32> Resets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="season")]
		public System.Nullable<System.Int32> Season { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyBucketCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyBucketScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	/// <summary>
	/// Represents the status and other related information for a challenge that is - or was - available to a player. 
	///A challenge is a bonus objective, generally tacked onto Quests or Activities, that provide additional variations on play.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyChallengesDestinyChallengeStatus
	{
		
		/// <summary>
		/// The progress - including completion status - of the active challenge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objective")]
		public string Objective { get; set; }
	}
	
	/// <summary>
	/// Raw data about the customization options chosen for a character's face and appearance.
	///You can look up the relevant class/race/gender combo in DestinyCharacterCustomizationOptionDefinition for the character, and then look up these values within the CustomizationOptions found to pull some data about their choices. Warning: not all of that data is meaningful. Some data has useful icons. Others have nothing, and are only meant for 3D rendering purposes (which we sadly do not expose yet)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyCharacterDestinyCharacterCustomization
	{
		
		[System.Runtime.Serialization.DataMember(Name="decalColor")]
		public System.Nullable<System.UInt32> DecalColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="decalIndex")]
		public System.Nullable<System.Int32> DecalIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eyeColor")]
		public System.Nullable<System.UInt32> EyeColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="face")]
		public System.Nullable<System.UInt32> Face { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featureColors")]
		public int[] FeatureColors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featureIndex")]
		public System.Nullable<System.Int32> FeatureIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hairColors")]
		public int[] HairColors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hairIndex")]
		public System.Nullable<System.Int32> HairIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lipColor")]
		public System.Nullable<System.UInt32> LipColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="personality")]
		public System.Nullable<System.UInt32> Personality { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skinColor")]
		public System.Nullable<System.UInt32> SkinColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wearHelmet")]
		public System.Nullable<System.Boolean> WearHelmet { get; set; }
	}
	
	/// <summary>
	/// A minimal view of a character's equipped items, for the purpose of rendering a summary screen or showing the character in 3D.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyCharacterDestinyCharacterPeerView
	{
		
		[System.Runtime.Serialization.DataMember(Name="equipment")]
		public DestinyCharacterDestinyItemPeerView[] Equipment { get; set; }
	}
	
	/// <summary>
	/// Bare minimum summary information for an item, for the sake of 3D rendering the item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyCharacterDestinyItemPeerView
	{
		
		/// <summary>
		/// The list of dyes that have been applied to this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dyes")]
		public DestinyDyeReference[] Dyes { get; set; }
		
		/// <summary>
		/// The hash identifier of the item in question. Use it to look up the DestinyInventoryItemDefinition of the item for static rendering data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDyeReference
	{
		
		[System.Runtime.Serialization.DataMember(Name="channelHash")]
		public System.Nullable<System.UInt32> ChannelHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dyeHash")]
		public System.Nullable<System.UInt32> DyeHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsCollectiblesDestinyCollectibleComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<System.Int32> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsCollectiblesDestinyCollectiblesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="collectibles")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsCollectiblesDestinyCollectibleComponent> Collectibles { get; set; }
		
		/// <summary>
		/// The hash for the root presentation node definition of Collection Badges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionBadgesRootNodeHash")]
		public System.Nullable<System.UInt32> CollectionBadgesRootNodeHash { get; set; }
		
		/// <summary>
		/// The hash for the root presentation node definition of Collection categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionCategoriesRootNodeHash")]
		public System.Nullable<System.UInt32> CollectionCategoriesRootNodeHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="collectibles")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsCollectiblesDestinyCollectibleComponent> Collectibles { get; set; }
		
		/// <summary>
		/// The hash for the root presentation node definition of Collection Badges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionBadgesRootNodeHash")]
		public System.Nullable<System.UInt32> CollectionBadgesRootNodeHash { get; set; }
		
		/// <summary>
		/// The hash for the root presentation node definition of Collection categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectionCategoriesRootNodeHash")]
		public System.Nullable<System.UInt32> CollectionCategoriesRootNodeHash { get; set; }
		
		/// <summary>
		/// The list of collectibles determined by the game as having been "recently" acquired.
		///The game client itself actually controls this data, so I personally question whether anyone will get much use out of this: because we can't edit this value through the API. But in case anyone finds it useful, here it is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newnessFlaggedCollectibleHashes")]
		public int[] NewnessFlaggedCollectibleHashes { get; set; }
		
		/// <summary>
		/// The list of collectibles determined by the game as having been "recently" acquired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentCollectibleHashes")]
		public int[] RecentCollectibleHashes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsCraftablesDestinyCraftableComponent
	{
		
		/// <summary>
		/// If the requirements are not met for crafting this item, these will index into the list of failure strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedRequirementIndexes")]
		public int[] FailedRequirementIndexes { get; set; }
		
		/// <summary>
		/// Plug item state for the crafting sockets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sockets")]
		public DestinyComponentsCraftablesDestinyCraftableSocketComponent[] Sockets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsCraftablesDestinyCraftableSocketComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="plugSetHash")]
		public System.Nullable<System.UInt32> PlugSetHash { get; set; }
		
		/// <summary>
		/// Unlock state for plugs in the socket plug set definition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugs")]
		public DestinyComponentsCraftablesDestinyCraftableSocketPlugComponent[] Plugs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsCraftablesDestinyCraftableSocketPlugComponent
	{
		
		/// <summary>
		/// Index into the unlock requirements to display failure descriptions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedRequirementIndexes")]
		public int[] FailedRequirementIndexes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plugItemHash")]
		public System.Nullable<System.UInt32> PlugItemHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsCraftablesDestinyCraftablesComponent
	{
		
		/// <summary>
		/// A map of craftable item hashes to craftable item state components.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="craftables")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsCraftablesDestinyCraftableComponent> Craftables { get; set; }
		
		/// <summary>
		/// The hash for the root presentation node definition of craftable item categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="craftingRootNodeHash")]
		public System.Nullable<System.UInt32> CraftingRootNodeHash { get; set; }
	}
	
	/// <summary>
	/// This component provides a quick lookup of every item the requested character has and how much of that item they have.
	///Requesting this component will allow you to circumvent manually putting together the list of which currencies you have for the purpose of testing currency requirements on an item being purchased, or operations that have costs.
	///You *could* figure this out yourself by doing a GetCharacter or GetProfile request and forming your own lookup table, but that is inconvenient enough that this feels like a worthwhile (and optional) redundency. Don't bother requesting it if you have already created your own lookup from prior GetCharacter/GetProfile calls.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsInventoryDestinyCurrenciesComponent
	{
		
		/// <summary>
		/// A dictionary - keyed by the item's hash identifier (DestinyInventoryItemDefinition), and whose value is the amount of that item you have across all available inventory buckets for purchasing.
		///This allows you to see whether the requesting character can afford any given purchase/action without having to re-create this list itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemQuantities")]
		public System.Collections.Generic.Dictionary<string, int> ItemQuantities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsInventoryDestinyPlatformSilverComponent
	{
		
		/// <summary>
		/// If a Profile is played on multiple platforms, this is the silver they have for each platform, keyed by Membership Type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformSilver")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemComponent> PlatformSilver { get; set; }
	}
	
	/// <summary>
	/// The base item component, filled with properties that are generally useful to know in any item request or that don't feel worthwhile to put in their own component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesItemsDestinyItemComponent
	{
		
		/// <summary>
		/// If the item is bound to a location, it will be specified in this enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindStatus")]
		public System.Nullable<System.Int32> BindStatus { get; set; }
		
		/// <summary>
		/// The hash identifier for the specific inventory bucket in which the item is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketHash")]
		public System.Nullable<System.UInt32> BucketHash { get; set; }
		
		/// <summary>
		/// If the item can expire, this is the date at which it will/did expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public System.Nullable<System.DateTimeOffset> ExpirationDate { get; set; }
		
		/// <summary>
		/// If this is true, the object is actually a "wrapper" of the object it's representing. This means that it's not the actual item itself, but rather an item that must be "opened" in game before you have and can use the item.
		/// Wrappers are an evolution of "bundles", which give an easy way to let you preview the contents of what you purchased while still letting you get a refund before you "open" it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isWrapper")]
		public System.Nullable<System.Boolean> IsWrapper { get; set; }
		
		/// <summary>
		/// The identifier for the item's definition, which is where most of the useful static information for the item can be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// If the item is instanced, it will have an instance ID. Lack of an instance ID implies that the item has no distinct local qualities aside from stack size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemInstanceId")]
		public System.Nullable<System.Int64> ItemInstanceId { get; set; }
		
		/// <summary>
		/// If available, a list that describes which item values (rewards) should be shown (true) or hidden (false).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemValueVisibility")]
		public bool[] ItemValueVisibility { get; set; }
		
		/// <summary>
		/// An easy reference for where the item is located. Redundant if you got the item from an Inventory, but useful when making detail calls on specific items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public System.Nullable<System.Int32> Location { get; set; }
		
		/// <summary>
		/// If the item can be locked, this will indicate that state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockable")]
		public System.Nullable<System.Boolean> Lockable { get; set; }
		
		/// <summary>
		/// The identifier for the currently-selected metric definition, to be displayed on the emblem nameplate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricHash")]
		public System.Nullable<System.UInt32> MetricHash { get; set; }
		
		/// <summary>
		/// The objective progress for the currently-selected metric definition, to be displayed on the emblem nameplate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricObjective")]
		public string MetricObjective { get; set; }
		
		/// <summary>
		/// If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.
		///If you don't do this, certain items whose styles are being overridden by socketed items - such as the "Recycle Shader" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideStyleItemHash")]
		public System.Nullable<System.UInt32> OverrideStyleItemHash { get; set; }
		
		/// <summary>
		/// The quantity of the item in this stack. Note that Instanced items cannot stack. If an instanced item, this value will always be 1 (as the stack has exactly one item in it)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// A flags enumeration indicating the transient/custom states of the item that affect how it is rendered: whether it's tracked or locked for example, or whether it has a masterwork plug inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<System.Int32> State { get; set; }
		
		/// <summary>
		/// If this is populated, it is a list of indexes into DestinyInventoryItemDefinition.tooltipNotifications for any special tooltip messages that need to be shown for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tooltipNotificationIndexes")]
		public int[] TooltipNotificationIndexes { get; set; }
		
		/// <summary>
		/// If there is a known error state that would cause this item to not be transferable, this Flags enum will indicate all of those error states. Otherwise, it will be 0 (CanTransfer).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transferStatus")]
		public System.Nullable<System.Int32> TransferStatus { get; set; }
		
		/// <summary>
		/// The version of this item, used to index into the versions list in the item definition quality block.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionNumber")]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
	}
	
	/// <summary>
	/// Plugs are non-instanced items that can provide Stat and Perk benefits when socketed into an instanced item. Items have Sockets, and Plugs are inserted into Sockets.
	///This component finds all items that are considered "Plugs" in your inventory, and return information about the plug aside from any specific Socket into which it could be inserted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsItemsDestinyItemPlugComponent
	{
		
		/// <summary>
		/// If true, this plug has met all of its insertion requirements. Big if true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canInsert")]
		public System.Nullable<System.Boolean> CanInsert { get; set; }
		
		/// <summary>
		/// If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.
		///This list will be empty if the plug is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableFailIndexes")]
		public int[] EnableFailIndexes { get; set; }
		
		/// <summary>
		/// If true, this plug will provide its benefits while inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.
		///This list will be empty if the plug can be inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertFailIndexes")]
		public int[] InsertFailIndexes { get; set; }
		
		/// <summary>
		/// The hash identifier of the DestinyInventoryItemDefinition that represents this plug.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugItemHash")]
		public System.Nullable<System.UInt32> PlugItemHash { get; set; }
		
		/// <summary>
		/// Sometimes, Plugs may have objectives: these are often used for flavor and display purposes, but they can be used for any arbitrary purpose (both fortunately and unfortunately). Recently (with Season 2) they were expanded in use to be used as the "gating" for whether the plug can be inserted at all. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugObjectives")]
		public DestinyQuestsDestinyObjectiveProgress[] PlugObjectives { get; set; }
	}
	
	/// <summary>
	/// Returns data about a character's status with a given Objective. Combine with DestinyObjectiveDefinition static data for display purposes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyQuestsDestinyObjectiveProgress
	{
		
		/// <summary>
		/// If the Objective has an Activity associated with it, this is the unique identifier of the Activity being referred to. Use to look up the DestinyActivityDefinition in static data. This will give localized data about *what* you should be playing for the objective to be achieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// Whether or not the Objective is completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complete")]
		public System.Nullable<System.Boolean> Complete { get; set; }
		
		/// <summary>
		/// As of Forsaken, objectives' completion value is determined dynamically at runtime.
		///This value represents the threshold of progress you need to surpass in order for this objective to be considered "complete".
		///If you were using objective data, switch from using the DestinyObjectiveDefinition's "completionValue" to this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionValue")]
		public System.Nullable<System.Int32> CompletionValue { get; set; }
		
		/// <summary>
		/// If the Objective has a Destination associated with it, this is the unique identifier of the Destination being referred to. Use to look up the DestinyDestinationDefinition in static data. This will give localized data about *where* in the universe the objective should be achieved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationHash")]
		public System.Nullable<System.UInt32> DestinationHash { get; set; }
		
		/// <summary>
		/// The unique identifier of the Objective being referred to. Use to look up the DestinyObjectiveDefinition in static data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectiveHash")]
		public System.Nullable<System.UInt32> ObjectiveHash { get; set; }
		
		/// <summary>
		/// If progress has been made, and the progress can be measured numerically, this will be the value of that progress. You can compare it to the DestinyObjectiveDefinition.completionValue property for current vs. upper bounds, and use DestinyObjectiveDefinition.inProgressValueStyle or completedValueStyle to determine how this should be rendered. Note that progress, in Destiny 2, need not be a literal numeric progression. It could be one of a number of possible values, even a Timestamp. Always examine DestinyObjectiveDefinition.inProgressValueStyle or completedValueStyle before rendering progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progress")]
		public System.Nullable<System.Int32> Progress { get; set; }
		
		/// <summary>
		/// If this is true, the objective is visible in-game. Otherwise, it's not yet visible to the player. Up to you if you want to honor this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsItemsDestinyItemPlugObjectivesComponent
	{
		
		/// <summary>
		/// This set of data is keyed by the Item Hash (DestinyInventoryItemDefinition) of the plug whose objectives are being returned, with the value being the list of those objectives.
		/// What if two plugs with the same hash are returned for an item, you ask?
		/// Good question! They share the same item-scoped state, and as such would have identical objective state as a result. How's that for convenient.
		/// Sometimes, Plugs may have objectives: generally, these are used for flavor and display purposes. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectivesPerPlug")]
		public System.Collections.Generic.Dictionary<string, DestinyQuestsDestinyObjectiveProgress[]> ObjectivesPerPlug { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsItemsDestinyItemReusablePlugsComponent
	{
		
		/// <summary>
		/// If the item supports reusable plugs, this is the list of plugs that are allowed to be used for the socket, and any relevant information about whether they are "enabled", whether they are allowed to be inserted, and any other information such as objectives.
		/// A Reusable Plug is a plug that you can always insert into this socket as long as its insertion rules are passed, regardless of whether or not you have the plug in your inventory. An example of it failing an insertion rule would be if it has an Objective that needs to be completed before it can be inserted, and that objective hasn't been completed yet.
		/// In practice, a socket will *either* have reusable plugs *or* it will allow for plugs in your inventory to be inserted. See DestinyInventoryItemDefinition.socket for more info.
		/// KEY = The INDEX into the item's list of sockets. VALUE = The set of plugs for that socket.
		/// If a socket doesn't have any reusable plugs defined at the item scope, there will be no entry for that socket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugs")]
		public System.Collections.Generic.Dictionary<string, DestinySocketsDestinyItemPlugBase[]> Plugs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinySocketsDestinyItemPlugBase
	{
		
		/// <summary>
		/// If true, this plug has met all of its insertion requirements. Big if true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canInsert")]
		public System.Nullable<System.Boolean> CanInsert { get; set; }
		
		/// <summary>
		/// If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.
		///This list will be empty if the plug is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableFailIndexes")]
		public int[] EnableFailIndexes { get; set; }
		
		/// <summary>
		/// If true, this plug will provide its benefits while inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.
		///This list will be empty if the plug can be inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertFailIndexes")]
		public int[] InsertFailIndexes { get; set; }
		
		/// <summary>
		/// The hash identifier of the DestinyInventoryItemDefinition that represents this plug.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugItemHash")]
		public System.Nullable<System.UInt32> PlugItemHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsKiosksDestinyKioskItem
	{
		
		/// <summary>
		/// If true, the user can not only see the item, but they can acquire it. It is possible that a user can see a kiosk item and not be able to acquire it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canAcquire")]
		public System.Nullable<System.Boolean> CanAcquire { get; set; }
		
		/// <summary>
		/// Indexes into failureStrings for the Vendor, indicating the reasons why it failed if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureIndexes")]
		public int[] FailureIndexes { get; set; }
		
		/// <summary>
		/// I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for "flavor" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flavorObjective")]
		public string FlavorObjective { get; set; }
		
		/// <summary>
		/// The index of the item in the related DestinyVendorDefintion's itemList property, representing the sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
	}
	
	/// <summary>
	/// A Kiosk is a Vendor (DestinyVendorDefinition) that sells items based on whether you have already acquired that item before.
	///This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the individual character's DestinyCharacterKiosksComponent.
	///Note that, because this component returns vendorItemIndexes (that is to say, indexes into the Kiosk Vendor's itemList property), these results are necessarily content version dependent. Make sure that you have the latest version of the content manifest databases before using this data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsKiosksDestinyKiosksComponent
	{
		
		/// <summary>
		/// A dictionary keyed by the Kiosk Vendor's hash identifier (use it to look up the DestinyVendorDefinition for the relevant kiosk vendor), and whose value is a list of all the items that the user can "see" in the Kiosk, and any other interesting metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kioskItems")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsKiosksDestinyKioskItem[]> KioskItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsLoadoutsDestinyLoadoutComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorHash")]
		public System.Nullable<System.UInt32> ColorHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconHash")]
		public System.Nullable<System.UInt32> IconHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DestinyComponentsLoadoutsDestinyLoadoutItemComponent[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameHash")]
		public System.Nullable<System.UInt32> NameHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsLoadoutsDestinyLoadoutItemComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="itemInstanceId")]
		public System.Nullable<System.Int64> ItemInstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plugItemHashes")]
		public int[] PlugItemHashes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsLoadoutsDestinyLoadoutsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="loadouts")]
		public DestinyComponentsLoadoutsDestinyLoadoutComponent[] Loadouts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsMetricsDestinyMetricComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="invisible")]
		public System.Nullable<System.Boolean> Invisible { get; set; }
		
		/// <summary>
		/// Returns data about a character's status with a given Objective. Combine with DestinyObjectiveDefinition static data for display purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectiveProgress")]
		public DestinyQuestsDestinyObjectiveProgress ObjectiveProgress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsMetricsDestinyMetricsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsMetricsDestinyMetricComponent> Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metricsRootNodeHash")]
		public System.Nullable<System.UInt32> MetricsRootNodeHash { get; set; }
	}
	
	/// <summary>
	/// Sockets may refer to a "Plug Set": a set of reusable plugs that may be shared across multiple sockets (or even, in theory, multiple sockets over multiple items).
	///This is the set of those plugs that we came across in the users' inventory, along with the values for plugs in the set. Any given set in this component may be represented in Character and Profile-level, as some plugs may be Profile-level restricted, and some character-level restricted. (note that the ones that are even more specific will remain on the actual socket component itself, as they cannot be reused)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsPlugSetsDestinyPlugSetsComponent
	{
		
		/// <summary>
		/// The shared list of plugs for each relevant PlugSet, keyed by the hash identifier of the PlugSet (DestinyPlugSetDefinition).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugs")]
		public System.Collections.Generic.Dictionary<string, DestinySocketsDestinyItemPlug[]> Plugs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinySocketsDestinyItemPlug
	{
		
		/// <summary>
		/// If true, this plug has met all of its insertion requirements. Big if true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canInsert")]
		public System.Nullable<System.Boolean> CanInsert { get; set; }
		
		/// <summary>
		/// If a plug is not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.
		///This list will be empty if the plug is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableFailIndexes")]
		public int[] EnableFailIndexes { get; set; }
		
		/// <summary>
		/// If true, this plug will provide its benefits while inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// If the plug cannot be inserted for some reason, this will have the indexes into the plug item definition's plug.insertionRules property, so you can show the reasons why it can't be inserted.
		///This list will be empty if the plug can be inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertFailIndexes")]
		public int[] InsertFailIndexes { get; set; }
		
		/// <summary>
		/// The hash identifier of the DestinyInventoryItemDefinition that represents this plug.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugItemHash")]
		public System.Nullable<System.UInt32> PlugItemHash { get; set; }
		
		/// <summary>
		/// Sometimes, Plugs may have objectives: these are often used for flavor and display purposes, but they can be used for any arbitrary purpose (both fortunately and unfortunately). Recently (with Season 2) they were expanded in use to be used as the "gating" for whether the plug can be inserted at all. For instance, a Plug might be tracking the number of PVP kills you have made. It will use the parent item's data about that tracking status to determine what to show, and will generally show it using the DestinyObjectiveDefinition's progressDescription property. Refer to the plug's itemHash and objective property for more information if you would like to display even more data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugObjectives")]
		public DestinyQuestsDestinyObjectiveProgress[] PlugObjectives { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsPresentationDestinyPresentationNodeComponent
	{
		
		/// <summary>
		/// The value at which the presentation node is considered to be completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionValue")]
		public System.Nullable<System.Int32> CompletionValue { get; set; }
		
		/// <summary>
		/// An optional property: presentation nodes MAY have objectives, which can be used to infer more human readable data about the progress. However, progressValue and completionValue ought to be considered the canonical values for progress on Progression Nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objective")]
		public string Objective { get; set; }
		
		/// <summary>
		/// How much of the presentation node is considered to be completed so far by the given character/profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressValue")]
		public System.Nullable<System.Int32> ProgressValue { get; set; }
		
		/// <summary>
		/// If available, this is the current score for the record category that this node represents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordCategoryScore")]
		public System.Nullable<System.Int32> RecordCategoryScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<System.Int32> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsPresentationDestinyPresentationNodesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsPresentationDestinyPresentationNodeComponent> Nodes { get; set; }
	}
	
	/// <summary>
	/// The set of progression-related information that applies at a Profile-wide level for your Destiny experience. This differs from the Jimi Hendrix Experience because there's less guitars on fire. Yet. #spoileralert?
	///This will include information such as Checklist info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsProfilesDestinyProfileProgressionComponent
	{
		
		/// <summary>
		/// The set of checklists that can be examined on a profile-wide basis, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)
		///For each checklist returned, its value is itself a Dictionary keyed by the checklist's hash identifier with the value being a boolean indicating if it's been discovered yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checklists")]
		public System.Collections.Generic.Dictionary<string, object> Checklists { get; set; }
		
		/// <summary>
		/// Data related to your progress on the current season's artifact that is the same across characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seasonalArtifact")]
		public string SeasonalArtifact { get; set; }
	}
	
	/// <summary>
	/// This is an experimental set of data that Bungie considers to be "transitory" - information that may be useful for API users, but that is coming from a non-authoritative data source about information that could potentially change at a more frequent pace than Bungie.net will receive updates about it.
	///This information is provided exclusively for convenience should any of it be useful to users: we provide no guarantees to the accuracy or timeliness of data that comes from this source. Know that this data can potentially be out-of-date or even wrong entirely if the user disconnected from the game or suddenly changed their status before we can receive refreshed data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsProfilesDestinyProfileTransitoryComponent
	{
		
		/// <summary>
		/// If you are in an activity, this is some transitory info about the activity currently being played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentActivity")]
		public string CurrentActivity { get; set; }
		
		/// <summary>
		/// Information about whether and what might prevent you from joining this person on a fireteam.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joinability")]
		public string Joinability { get; set; }
		
		/// <summary>
		/// The hash identifier for the DestinyDestinationDefinition of the last location you were orbiting when in orbit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastOrbitedDestinationHash")]
		public System.Nullable<System.UInt32> LastOrbitedDestinationHash { get; set; }
		
		/// <summary>
		/// If you have any members currently in your party, this is some (very) bare-bones information about those members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partyMembers")]
		public DestinyComponentsProfilesDestinyProfileTransitoryPartyMember[] PartyMembers { get; set; }
		
		/// <summary>
		/// Information about tracked entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracking")]
		public DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry[] Tracking { get; set; }
	}
	
	/// <summary>
	/// This is some bare minimum information about a party member in a Fireteam. Unfortunately, without great computational expense on our side we can only get at the data contained here. I'd like to give you a character ID for example, but we don't have it. But we do have these three pieces of information. May they help you on your quest to show meaningful data about current Fireteams.
	///Notably, we don't and can't feasibly return info on characters. If you can, try to use just the data below for your UI and purposes. Only hit us with further queries if you absolutely must know the character ID of the currently playing character. Pretty please with sugar on top.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsProfilesDestinyProfileTransitoryPartyMember
	{
		
		/// <summary>
		/// The player's last known display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The identifier for the DestinyInventoryItemDefinition of the player's emblem.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emblemHash")]
		public System.Nullable<System.UInt32> EmblemHash { get; set; }
		
		/// <summary>
		/// The Membership ID that matches the party member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipId")]
		public System.Nullable<System.Int64> MembershipId { get; set; }
		
		/// <summary>
		/// A Flags Enumeration value indicating the states that the player is in relevant to being on a fireteam.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	/// <summary>
	/// This represents a single "thing" being tracked by the player.
	///This can point to many types of entities, but only a subset of them will actually have a valid hash identifier for whatever it is being pointed to.
	///It's up to you to interpret what it means when various combinations of these entries have values being tracked.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsProfilesDestinyProfileTransitoryTrackingEntry
	{
		
		/// <summary>
		/// OPTIONAL - If this is tracking the status of a DestinyActivityDefinition, this is the identifier for that activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// OPTIONAL - If this is tracking the status of a DestinyInventoryItemDefinition, this is the identifier for that item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// OPTIONAL - If this is tracking a DestinyLocationDefinition, this is the identifier for that location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationHash")]
		public System.Nullable<System.UInt32> LocationHash { get; set; }
		
		/// <summary>
		/// OPTIONAL - If this is tracking the status of a DestinyObjectiveDefinition, this is the identifier for that objective.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectiveHash")]
		public System.Nullable<System.UInt32> ObjectiveHash { get; set; }
		
		/// <summary>
		/// OPTIONAL - If this is tracking the status of a quest, this is the identifier for the DestinyInventoryItemDefinition that containst that questline data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questlineItemHash")]
		public System.Nullable<System.UInt32> QuestlineItemHash { get; set; }
		
		/// <summary>
		/// OPTIONAL - I've got to level with you, I don't really know what this is. Is it when you started tracking it? Is it only populated for tracked items that have time limits?
		///I don't know, but we can get at it - when I get time to actually test what it is, I'll update this. In the meantime, bask in the mysterious data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackedDate")]
		public System.Nullable<System.DateTimeOffset> TrackedDate { get; set; }
	}
	
	/// <summary>
	/// If you are playing in an activity, this is some information about it.
	///Note that we cannot guarantee any of this resembles what ends up in the PGCR in any way. They are sourced by two entirely separate systems with their own logic, and the one we source this data from should be considered non-authoritative in comparison.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsProfilesDestinyProfileTransitoryCurrentActivity
	{
		
		/// <summary>
		/// If you're still in it but it "ended" (like when folks are dancing around the loot after they beat a boss), this is when the activity ended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// If you have human opponents, this is the highest opposing team's score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highestOpposingFactionScore")]
		public System.Nullable<System.Single> HighestOpposingFactionScore { get; set; }
		
		/// <summary>
		/// This is how many human or poorly crafted aimbot opponents you have.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfOpponents")]
		public System.Nullable<System.Int32> NumberOfOpponents { get; set; }
		
		/// <summary>
		/// This is how many human or poorly crafted aimbots are on your team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberOfPlayers")]
		public System.Nullable<System.Int32> NumberOfPlayers { get; set; }
		
		/// <summary>
		/// This is what our non-authoritative source thought the score was.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Single> Score { get; set; }
		
		/// <summary>
		/// When the activity started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
	}
	
	/// <summary>
	/// Some basic information about whether you can be joined, how many slots are left etc. Note that this can change quickly, so it may not actually be useful. But perhaps it will be in some use cases?
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsProfilesDestinyProfileTransitoryJoinability
	{
		
		/// <summary>
		/// Reasons why a person can't join this person's fireteam.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closedReasons")]
		public System.Nullable<System.Int32> ClosedReasons { get; set; }
		
		/// <summary>
		/// The number of slots still available on this person's fireteam.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openSlots")]
		public System.Nullable<System.Int32> OpenSlots { get; set; }
		
		/// <summary>
		/// Who the person is currently allowing invites from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacySetting")]
		public System.Nullable<System.Int32> PrivacySetting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsRecordsDestinyCharacterRecordsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="featuredRecordHashes")]
		public int[] FeaturedRecordHashes { get; set; }
		
		/// <summary>
		/// The hash for the root presentation node definition of Triumph categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordCategoriesRootNodeHash")]
		public System.Nullable<System.UInt32> RecordCategoriesRootNodeHash { get; set; }
		
		/// <summary>
		/// The hash for the root presentation node definition of Triumph Seals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordSealsRootNodeHash")]
		public System.Nullable<System.UInt32> RecordSealsRootNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="records")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsRecordsDestinyRecordComponent> Records { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsRecordsDestinyRecordComponent
	{
		
		/// <summary>
		/// If available, this is the number of times this record has been completed. For example, the number of times a seal title has been gilded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completedCount")]
		public System.Nullable<System.Int32> CompletedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intervalObjectives")]
		public DestinyQuestsDestinyObjectiveProgress[] IntervalObjectives { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intervalsRedeemedCount")]
		public System.Nullable<System.Int32> IntervalsRedeemedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectives")]
		public DestinyQuestsDestinyObjectiveProgress[] Objectives { get; set; }
		
		/// <summary>
		/// If available, a list that describes which reward rewards should be shown (true) or hidden (false). This property is for regular record rewards, and not for interval objective rewards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardVisibilty")]
		public bool[] RewardVisibilty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<System.Int32> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsRecordsDestinyProfileRecordsComponent
	{
		
		/// <summary>
		/// Your 'active' Triumphs score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeScore")]
		public System.Nullable<System.Int32> ActiveScore { get; set; }
		
		/// <summary>
		/// Your 'legacy' Triumphs score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legacyScore")]
		public System.Nullable<System.Int32> LegacyScore { get; set; }
		
		/// <summary>
		/// Your 'lifetime' Triumphs score.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifetimeScore")]
		public System.Nullable<System.Int32> LifetimeScore { get; set; }
		
		/// <summary>
		/// The hash for the root presentation node definition of Triumph categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordCategoriesRootNodeHash")]
		public System.Nullable<System.UInt32> RecordCategoriesRootNodeHash { get; set; }
		
		/// <summary>
		/// The hash for the root presentation node definition of Triumph Seals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordSealsRootNodeHash")]
		public System.Nullable<System.UInt32> RecordSealsRootNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="records")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsRecordsDestinyRecordComponent> Records { get; set; }
		
		/// <summary>
		/// Your 'active' Triumphs score, maintained for backwards compatibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Int32> Score { get; set; }
		
		/// <summary>
		/// If this profile is tracking a record, this is the hash identifier of the record it is tracking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackedRecordHash")]
		public System.Nullable<System.UInt32> TrackedRecordHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsRecordsDestinyRecordsComponent
	{
		
		/// <summary>
		/// The hash for the root presentation node definition of Triumph categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordCategoriesRootNodeHash")]
		public System.Nullable<System.UInt32> RecordCategoriesRootNodeHash { get; set; }
		
		/// <summary>
		/// The hash for the root presentation node definition of Triumph Seals.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recordSealsRootNodeHash")]
		public System.Nullable<System.UInt32> RecordSealsRootNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="records")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsRecordsDestinyRecordComponent> Records { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsSocialDestinySocialCommendationsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="commendationNodeScoresByHash")]
		public System.Collections.Generic.Dictionary<string, int> CommendationNodeScoresByHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commendationScoresByHash")]
		public System.Collections.Generic.Dictionary<string, int> CommendationScoresByHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scoreDetailValues")]
		public int[] ScoreDetailValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalScore")]
		public System.Nullable<System.Int32> TotalScore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsStringVariablesDestinyStringVariablesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="integerValuesByHash")]
		public System.Collections.Generic.Dictionary<string, int> IntegerValuesByHash { get; set; }
	}
	
	/// <summary>
	/// This component contains essential/summary information about the vendor from the perspective of a character-agnostic view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsVendorsDestinyPublicVendorComponent
	{
		
		/// <summary>
		/// If True, the Vendor is currently accessible. 
		///If False, they may not actually be visible in the world at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The date when this vendor's inventory will next rotate/refresh.
		///Note that this is distinct from the date ranges that the vendor is visible/available in-game: this field indicates the specific time when the vendor's available items refresh and rotate, regardless of whether the vendor is actually available at that time. Unfortunately, these two values may be (and are, for the case of important vendors like Xur) different.
		///Issue https://github.com/Bungie-net/api/issues/353 is tracking a fix to start providing visibility date ranges where possible in addition to this refresh date, so that all important dates for vendors are available for use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextRefreshDate")]
		public System.Nullable<System.DateTimeOffset> NextRefreshDate { get; set; }
		
		/// <summary>
		/// The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHash")]
		public System.Nullable<System.UInt32> VendorHash { get; set; }
	}
	
	/// <summary>
	/// Has character-agnostic information about an item being sold by a vendor.
	///Note that if you want instance, stats, etc... data for the item, you'll have to request additional components such as ItemInstances, ItemPerks etc... and acquire them from the DestinyVendorResponse's "items" property. For most of these, however, you'll have to ask for it in context of a specific character.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsVendorsDestinyPublicVendorSaleItemComponent
	{
		
		/// <summary>
		/// If true, this item can be purchased through the Bungie.net API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiPurchasable")]
		public System.Nullable<System.Boolean> ApiPurchasable { get; set; }
		
		/// <summary>
		/// A summary of the current costs of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costs")]
		public DestinyDestinyItemQuantity[] Costs { get; set; }
		
		/// <summary>
		/// The hash of the item being sold, as a quick shortcut for looking up the DestinyInventoryItemDefinition of the sale item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// If this item has its own custom date where it may be removed from the Vendor's rotation, this is that date.
		///Note that there's not actually any guarantee that it will go away: it could be chosen again and end up still being in the Vendor's sale items! But this is the next date where that test will occur, and is also the date that the game shows for availability on things like Bounties being sold. So it's the best we can give.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideNextRefreshDate")]
		public System.Nullable<System.DateTimeOffset> OverrideNextRefreshDate { get; set; }
		
		/// <summary>
		/// If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.
		///If you don't do this, certain items whose styles are being overridden by socketed items - such as the "Recycle Shader" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideStyleItemHash")]
		public System.Nullable<System.UInt32> OverrideStyleItemHash { get; set; }
		
		/// <summary>
		/// How much of the item you'll be getting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// The index into the DestinyVendorDefinition.itemList property. Note that this means Vendor data *is* Content Version dependent: make sure you have the latest content before you use Vendor data, or these indexes may mismatch. 
		///Most systems avoid this problem, but Vendors is one area where we are unable to reasonably avoid content dependency at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorItemIndex")]
		public System.Nullable<System.Int32> VendorItemIndex { get; set; }
	}
	
	/// <summary>
	/// This component contains essential/summary information about the vendor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsVendorsDestinyVendorBaseComponent
	{
		
		/// <summary>
		/// If True, the Vendor is currently accessible. 
		///If False, they may not actually be visible in the world at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The date when this vendor's inventory will next rotate/refresh.
		///Note that this is distinct from the date ranges that the vendor is visible/available in-game: this field indicates the specific time when the vendor's available items refresh and rotate, regardless of whether the vendor is actually available at that time. Unfortunately, these two values may be (and are, for the case of important vendors like Xur) different.
		///Issue https://github.com/Bungie-net/api/issues/353 is tracking a fix to start providing visibility date ranges where possible in addition to this refresh date, so that all important dates for vendors are available for use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextRefreshDate")]
		public System.Nullable<System.DateTimeOffset> NextRefreshDate { get; set; }
		
		/// <summary>
		/// The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHash")]
		public System.Nullable<System.UInt32> VendorHash { get; set; }
	}
	
	/// <summary>
	/// Represents a specific group of vendors that can be rendered in the recommended order.
	///How do we figure out this order? It's a long story, and will likely get more complicated over time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsVendorsDestinyVendorGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="vendorGroupHash")]
		public System.Nullable<System.UInt32> VendorGroupHash { get; set; }
		
		/// <summary>
		/// The ordered list of vendors within a particular group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHashes")]
		public int[] VendorHashes { get; set; }
	}
	
	/// <summary>
	/// This component returns references to all of the Vendors in the response, grouped by categorizations that Bungie has deemed to be interesting, in the order in which both the groups and the vendors within that group should be rendered.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsVendorsDestinyVendorGroupComponent
	{
		
		/// <summary>
		/// The ordered list of groups being returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public DestinyComponentsVendorsDestinyVendorGroup[] Groups { get; set; }
	}
	
	/// <summary>
	/// The base class for Vendor Sale Item data. Has a bunch of character-agnostic state about the item being sold.
	///Note that if you want instance, stats, etc... data for the item, you'll have to request additional components such as ItemInstances, ItemPerks etc... and acquire them from the DestinyVendorResponse's "items" property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyComponentsVendorsDestinyVendorSaleItemBaseComponent
	{
		
		/// <summary>
		/// If true, this item can be purchased through the Bungie.net API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiPurchasable")]
		public System.Nullable<System.Boolean> ApiPurchasable { get; set; }
		
		/// <summary>
		/// A summary of the current costs of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costs")]
		public DestinyDestinyItemQuantity[] Costs { get; set; }
		
		/// <summary>
		/// The hash of the item being sold, as a quick shortcut for looking up the DestinyInventoryItemDefinition of the sale item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// If this item has its own custom date where it may be removed from the Vendor's rotation, this is that date.
		///Note that there's not actually any guarantee that it will go away: it could be chosen again and end up still being in the Vendor's sale items! But this is the next date where that test will occur, and is also the date that the game shows for availability on things like Bounties being sold. So it's the best we can give.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideNextRefreshDate")]
		public System.Nullable<System.DateTimeOffset> OverrideNextRefreshDate { get; set; }
		
		/// <summary>
		/// If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.
		///If you don't do this, certain items whose styles are being overridden by socketed items - such as the "Recycle Shader" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideStyleItemHash")]
		public System.Nullable<System.UInt32> OverrideStyleItemHash { get; set; }
		
		/// <summary>
		/// How much of the item you'll be getting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// The index into the DestinyVendorDefinition.itemList property. Note that this means Vendor data *is* Content Version dependent: make sure you have the latest content before you use Vendor data, or these indexes may mismatch. 
		///Most systems avoid this problem, but Vendors is one area where we are unable to reasonably avoid content dependency at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorItemIndex")]
		public System.Nullable<System.Int32> VendorItemIndex { get; set; }
	}
	
	/// <summary>
	/// DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyConfigDestinyManifest
	{
		
		/// <summary>
		/// Information about the "Image Pyramid" for Destiny icons. Where possible, we create smaller versions of Destiny icons. These are found as subfolders under the location of the "original/full size" Destiny images, with the same file name and extension as the original image itself. (this lets us avoid sending largely redundant path info with every entity, at the expense of the smaller versions of the image being less discoverable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconImagePyramidInfo")]
		public DestinyConfigImagePyramidEntry[] IconImagePyramidInfo { get; set; }
		
		/// <summary>
		/// This points to the generated JSON that contains all the Definitions. Each key is a locale. The value is a dictionary, where the key is a definition type by name, and the value is the path to the file for that definition. WARNING: This is unsafe and subject to change - do not depend on data in these files staying around long-term.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonWorldComponentContentPaths")]
		public System.Collections.Generic.Dictionary<string, object> JsonWorldComponentContentPaths { get; set; }
		
		/// <summary>
		/// This points to the generated JSON that contains all the Definitions. Each key is a locale. The value is a path to the aggregated world definitions (warning: large file!)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsonWorldContentPaths")]
		public System.Collections.Generic.Dictionary<string, string> JsonWorldContentPaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileAssetContentPath")]
		public string MobileAssetContentPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileClanBannerDatabasePath")]
		public string MobileClanBannerDatabasePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileGearAssetDataBases")]
		public DestinyConfigGearAssetDataBaseDefinition[] MobileGearAssetDataBases { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileGearCDN")]
		public System.Collections.Generic.Dictionary<string, string> MobileGearCDN { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileWorldContentPaths")]
		public System.Collections.Generic.Dictionary<string, string> MobileWorldContentPaths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyConfigImagePyramidEntry
	{
		
		/// <summary>
		/// The factor by which the original image size has been reduced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factor")]
		public System.Nullable<System.Single> Factor { get; set; }
		
		/// <summary>
		/// The name of the subfolder where these images are located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyConfigGearAssetDataBaseDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyConstantsDestinyEnvironmentLocationMapping
	{
		
		/// <summary>
		/// A hint that the UI uses to figure out how this location is activated by the player.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationSource")]
		public string ActivationSource { get; set; }
		
		/// <summary>
		/// If this is populated, this is the activity you have to be playing in order to see this location appear because of this mapping. (theoretically, a location can have multiple mappings, and some might require you to be in a specific activity when others don't)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// If this is populated, it is the item that you must possess for this location to be active because of this mapping. (theoretically, a location can have multiple mappings, and some might require an item while others don't)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// The location that is revealed on the director by this mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationHash")]
		public System.Nullable<System.UInt32> LocationHash { get; set; }
		
		/// <summary>
		/// If this is populated, this is an objective related to the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectiveHash")]
		public System.Nullable<System.UInt32> ObjectiveHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDamageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
	}
	
	/// <summary>
	/// Modifiers - in Destiny 1, these were referred to as "Skulls" - are changes that can be applied to an Activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsActivityModifiersDestinyActivityModifierDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayInActivitySelection")]
		public System.Nullable<System.Boolean> DisplayInActivitySelection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayInNavMode")]
		public System.Nullable<System.Boolean> DisplayInNavMode { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasIcon")]
		public System.Nullable<System.Boolean> HasIcon { get; set; }
		
		/// <summary>
		/// If this item has a high-res icon (at least for now, many things won't), then the path to that icon will be here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highResIcon")]
		public string HighResIcon { get; set; }
		
		/// <summary>
		/// Note that "icon" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.
		///But usually, it will be a small square image that you can use as... well, an icon.
		///They are currently represented as 96px x 96px images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconSequences")]
		public DestinyDefinitionsCommonDestinyIconSequenceDefinition[] IconSequences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsCommonDestinyIconSequenceDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="frames")]
		public string[] Frames { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsAnimationsDestinyAnimationReference
	{
		
		[System.Runtime.Serialization.DataMember(Name="animIdentifier")]
		public string AnimIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="animName")]
		public string AnimName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Represents known info about a Destiny Artifact.
	///We cannot guarantee that artifact definitions will be immutable between seasons - in fact, we've been told that they will be replaced between seasons. But this definition is built both to minimize the amount of lookups for related data that have to occur, and is built in hope that, if this plan changes, we will be able to accommodate it more easily.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsArtifactsDestinyArtifactDefinition
	{
		
		/// <summary>
		/// Any basic display info we know about the Artifact. Currently sourced from a related inventory item, but the source of this data is subject to change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// Any Tier/Rank data related to this artifact, listed in display order.  Currently sourced from a Vendor, but this source is subject to change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tiers")]
		public DestinyDefinitionsArtifactsDestinyArtifactTierDefinition[] Tiers { get; set; }
		
		/// <summary>
		/// Any Geometry/3D info we know about the Artifact. Currently sourced from a related inventory item's gearset information, but the source of this data is subject to change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translationBlock")]
		public string TranslationBlock { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsArtifactsDestinyArtifactTierDefinition
	{
		
		/// <summary>
		/// The human readable title of this tier, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayTitle")]
		public string DisplayTitle { get; set; }
		
		/// <summary>
		/// The items that can be earned within this tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DestinyDefinitionsArtifactsDestinyArtifactTierItemDefinition[] Items { get; set; }
		
		/// <summary>
		/// The minimum number of "unlock points" that you must have used before you can unlock items from this tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumUnlockPointsUsedRequirement")]
		public System.Nullable<System.Int32> MinimumUnlockPointsUsedRequirement { get; set; }
		
		/// <summary>
		/// A string representing the localized minimum requirement text for this Tier, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressRequirementMessage")]
		public string ProgressRequirementMessage { get; set; }
		
		/// <summary>
		/// An identifier, unique within the Artifact, for this specific tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tierHash")]
		public System.Nullable<System.UInt32> TierHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsArtifactsDestinyArtifactTierItemDefinition
	{
		
		/// <summary>
		/// The identifier of the Plug Item unlocked by activating this item in the Artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsBreakerTypesDestinyBreakerTypeDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// We have an enumeration for Breaker types for quick reference. This is the current definition's breaker type enum value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enumValue")]
		public System.Nullable<System.Int32> EnumValue { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// By public demand, Checklists are loose sets of "things to do/things you have done" in Destiny that we were actually able to track. They include easter eggs you find in the world, unique chests you unlock, and other such data where the first time you do it is significant enough to be tracked, and you have the potential to "get them all".
	///These may be account-wide, or may be per character. The status of these will be returned in related "Checklist" data coming down from API requests such as GetProfile or GetCharacter.
	///Generally speaking, the items in a checklist can be completed in any order: we return an ordered list which only implies the way we are showing them in our own UI, and you can feel free to alter it as you wish.
	///Note that, in the future, there will be something resembling the old D1 Record Books in at least some vague form. When that is created, it may be that it will supercede much or all of this Checklist data. It remains to be seen if that will be the case, so for now assume that the Checklists will still exist even after the release of D2: Forsaken.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsChecklistsDestinyChecklistDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The individual checklist items. Gotta catch 'em all.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DestinyDefinitionsChecklistsDestinyChecklistEntryDefinition[] Entries { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// Indicates whether you will find this checklist on the Profile or Character components.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<System.Int32> Scope { get; set; }
		
		/// <summary>
		/// A localized string prompting you to view the checklist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewActionString")]
		public string ViewActionString { get; set; }
	}
	
	/// <summary>
	/// The properties of an individual checklist item. Note that almost everything is optional: it is *highly* variable what kind of data we'll actually be able to return: at times we may have no other relationships to entities at all.
	///Whatever UI you build, do it with the knowledge that any given entry might not actually be able to be associated with some other Destiny entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsChecklistsDestinyChecklistEntryDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// Note that a Bubble's hash doesn't uniquely identify a "top level" entity in Destiny. Only the combination of location and bubble can uniquely identify a place in the world of Destiny: so if bubbleHash is populated, locationHash must too be populated for it to have any meaning.
		///You can use this property if it is populated to look up the DestinyLocationDefinition's associated .locationReleases[].activityBubbleName property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bubbleHash")]
		public System.Nullable<System.UInt32> BubbleHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationHash")]
		public System.Nullable<System.UInt32> DestinationHash { get; set; }
		
		/// <summary>
		/// Even if no other associations exist, we will give you *something* for display properties. In cases where we have no associated entities, it may be as simple as a numerical identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// The identifier for this Checklist entry. Guaranteed unique only within this Checklist Definition, and not globally/for all checklists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationHash")]
		public System.Nullable<System.UInt32> LocationHash { get; set; }
		
		/// <summary>
		/// The scope at which this specific entry can be computed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<System.Int32> Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendorHash")]
		public System.Nullable<System.UInt32> VendorHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendorInteractionIndex")]
		public System.Nullable<System.Int32> VendorInteractionIndex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock
	{
		
		[System.Runtime.Serialization.DataMember(Name="acquireMaterialRequirementHash")]
		public System.Nullable<System.UInt32> AcquireMaterialRequirementHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acquireTimestampUnlockValueHash")]
		public System.Nullable<System.UInt32> AcquireTimestampUnlockValueHash { get; set; }
	}
	
	/// <summary>
	/// Defines a
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsCollectiblesDestinyCollectibleDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="acquisitionInfo")]
		public DestinyDefinitionsCollectiblesDestinyCollectibleAcquisitionBlock AcquisitionInfo { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentNodeHashes")]
		public int[] ParentNodeHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentationInfo")]
		public DestinyDefinitionsPresentationDestinyPresentationChildBlock PresentationInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentationNodeType")]
		public System.Nullable<System.Int32> PresentationNodeType { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// Indicates whether the state of this Collectible is determined on a per-character or on an account-wide basis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<System.Int32> Scope { get; set; }
		
		/// <summary>
		/// This is a hash identifier we are building on the BNet side in an attempt to let people group collectibles by similar sources.
		///I can't promise that it's going to be 100% accurate, but if the designers were consistent in assigning the same source strings to items with the same sources, it *ought to* be. No promises though.
		///This hash also doesn't relate to an actual definition, just to note: we've got nothing useful other than the source string for this data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceHash")]
		public System.Nullable<System.UInt32> SourceHash { get; set; }
		
		/// <summary>
		/// A human readable string for a hint about how to acquire the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceString")]
		public string SourceString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateInfo")]
		public DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock StateInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="traitHashes")]
		public int[] TraitHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="traitIds")]
		public string[] TraitIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsPresentationDestinyPresentationChildBlock
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayStyle")]
		public System.Nullable<System.Int32> DisplayStyle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentPresentationNodeHashes")]
		public int[] ParentPresentationNodeHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentationNodeType")]
		public System.Nullable<System.Int32> PresentationNodeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsCollectiblesDestinyCollectibleStateBlock
	{
		
		[System.Runtime.Serialization.DataMember(Name="obscuredOverrideItemHash")]
		public System.Nullable<System.UInt32> ObscuredOverrideItemHash { get; set; }
		
		/// <summary>
		/// Presentation nodes can be restricted by various requirements. This defines the rules of those requirements, and the message(s) to be shown if these requirements aren't met.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirements")]
		public DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock Requirements { get; set; }
	}
	
	/// <summary>
	/// Presentation nodes can be restricted by various requirements. This defines the rules of those requirements, and the message(s) to be shown if these requirements aren't met.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock
	{
		
		/// <summary>
		/// If this node is not accessible due to Entitlements (for instance, you don't own the required game expansion), this is the message to show.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entitlementUnavailableMessage")]
		public string EntitlementUnavailableMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsCommonDestinyPositionDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="x")]
		public System.Nullable<System.Int32> X { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="y")]
		public System.Nullable<System.Int32> Y { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="z")]
		public System.Nullable<System.Int32> Z { get; set; }
	}
	
	/// <summary>
	/// Represents a reference to a Challenge, which for now is just an Objective.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityChallengeDefinition
	{
		
		/// <summary>
		/// The rewards as they're represented in the UI. Note that they generally link to "dummy" items that give a summary of rewards rather than direct, real items themselves.
		///If the quantity is 0, don't show the quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dummyRewards")]
		public DestinyDestinyItemQuantity[] DummyRewards { get; set; }
		
		/// <summary>
		/// The hash for the Objective that matches this challenge. Use it to look up the DestinyObjectiveDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectiveHash")]
		public System.Nullable<System.UInt32> ObjectiveHash { get; set; }
	}
	
	/// <summary>
	/// The static data about Activities in Destiny 2.
	///Note that an Activity must be combined with an ActivityMode to know - from a Gameplay perspective - what the user is "Playing".
	///In most PvE activities, this is fairly straightforward. A Story Activity can only be played in the Story Activity Mode.
	///However, in PvP activities, the Activity alone only tells you the map being played, or the Playlist that the user chose to enter. You'll need to know the Activity Mode they're playing to know that they're playing Mode X on Map Y.
	///Activity Definitions tell a great deal of information about what *could* be relevant to a user: what rewards they can earn, what challenges could be performed, what modifiers could be applied. To figure out which of these properties is actually live, you'll need to combine the definition with "Live" data from one of the Destiny endpoints.
	///Activities also have Activity Types, but unfortunately in Destiny 2 these are even less reliable of a source of information than they were in Destiny 1. I will be looking into ways to provide more reliable sources for type information as time goes on, but for now we're going to have to deal with the limitations. See DestinyActivityTypeDefinition for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityDefinition
	{
		
		/// <summary>
		/// Unfortunately, in practice this is almost never populated. In theory, this is supposed to tell which Activity Graph to show if you bring up the director while in this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityGraphList")]
		public DestinyDefinitionsDestinyActivityGraphListEntryDefinition[] ActivityGraphList { get; set; }
		
		/// <summary>
		/// The recommended light level for this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityLightLevel")]
		public System.Nullable<System.Int32> ActivityLightLevel { get; set; }
		
		/// <summary>
		/// A list of location mappings that are affected by this activity. Pulled out of DestinyLocationDefinitions for our/your lookup convenience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityLocationMappings")]
		public DestinyConstantsDestinyEnvironmentLocationMapping[] ActivityLocationMappings { get; set; }
		
		/// <summary>
		/// The hash identifiers for Activity Modes relevant to this activity.  Note that if this is a playlist, the specific playlist entry chosen will determine the actual activity modes that end up being relevant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeHashes")]
		public int[] ActivityModeHashes { get; set; }
		
		/// <summary>
		/// The activity modes - if any - in enum form. Because we can't seem to escape the enums.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeTypes")]
		public int[] ActivityModeTypes { get; set; }
		
		/// <summary>
		/// The hash identifier for the Activity Type of this Activity. You may use it to look up the DestinyActivityTypeDefinition for human readable info, but be forewarned: Playlists and many PVP Map Activities will map to generic Activity Types. You'll have to use your knowledge of the Activity Mode being played to get more specific information about what the user is playing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityTypeHash")]
		public System.Nullable<System.UInt32> ActivityTypeHash { get; set; }
		
		/// <summary>
		/// An activity can have many Challenges, of which any subset of them may be active for play at any given period of time. This gives the information about the challenges and data that we use to understand when they're active and what rewards they provide. Sadly, at the moment there's no central definition for challenges: much like "Skulls" were in Destiny 1, these are defined on individual activities and there can be many duplicates/near duplicates across the Destiny 2 ecosystem. I have it in mind to centralize these in a future revision of the API, but we are out of time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challenges")]
		public DestinyDefinitionsDestinyActivityChallengeDefinition[] Challenges { get; set; }
		
		/// <summary>
		/// The hash identifier for the Destination on which this Activity is played. Use it to look up the DestinyDestinationDefinition for human readable info about the destination. A Destination can be thought of as a more specific location than a "Place". For instance, if the "Place" is Earth, the "Destination" would be a specific city or region on Earth.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationHash")]
		public System.Nullable<System.UInt32> DestinationHash { get; set; }
		
		/// <summary>
		/// If this activity had an activity mode directly defined on it, this will be the hash of that mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directActivityModeHash")]
		public System.Nullable<System.UInt32> DirectActivityModeHash { get; set; }
		
		/// <summary>
		/// If the activity had an activity mode directly defined on it, this will be the enum value of that mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directActivityModeType")]
		public System.Nullable<DestinyDefinitionsDestinyActivityDefinitionDirectActivityModeType> DirectActivityModeType { get; set; }
		
		/// <summary>
		/// The title, subtitle, and icon for the activity. We do a little post-processing on this to try and account for Activities where the designers have left this data too minimal to determine what activity is actually being played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// This block of data, if it exists, provides information about the guided game experience and restrictions for this activity. If it doesn't exist, the game is not able to be played as a guided game.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guidedGame")]
		public string GuidedGame { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The list of phases or points of entry into an activity, along with information we can use to determine their gating and availability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertionPoints")]
		public DestinyDefinitionsDestinyActivityInsertionPointDefinition[] InsertionPoints { get; set; }
		
		/// <summary>
		/// If True, this Activity is actually a Playlist that refers to multiple possible specific Activities and Activity Modes. For instance, a Crucible Playlist may have references to multiple Activities (Maps) with multiple Activity Modes (specific PvP gameplay modes). If this is true, refer to the playlistItems property for the specific entries in the playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPlaylist")]
		public System.Nullable<System.Boolean> IsPlaylist { get; set; }
		
		/// <summary>
		/// If true, this activity is a PVP activity or playlist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPvP")]
		public System.Nullable<System.Boolean> IsPvP { get; set; }
		
		/// <summary>
		/// The set of all possible loadout requirements that could be active for this activity. Only one will be active at any given time, and you can discover which one through activity-associated data such as Milestones that have activity info on them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadouts")]
		public DestinyDefinitionsDestinyActivityLoadoutRequirementSet[] Loadouts { get; set; }
		
		/// <summary>
		/// This block of data provides information about the Activity's matchmaking attributes: how many people can join and such.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchmaking")]
		public string Matchmaking { get; set; }
		
		/// <summary>
		/// Activities can have Modifiers, as defined in DestinyActivityModifierDefinition. These are references to the modifiers that *can* be applied to that activity, along with data that we use to determine if that modifier is actually active at any given point in time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiers")]
		public DestinyDefinitionsDestinyActivityModifierReferenceDefinition[] Modifiers { get; set; }
		
		/// <summary>
		/// If there are status strings related to the activity and based on internal state of the game, account, or character, then this will be the definition of those strings and the states needed in order for the strings to be shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optionalUnlockStrings")]
		public DestinyDefinitionsDestinyActivityUnlockStringDefinition[] OptionalUnlockStrings { get; set; }
		
		/// <summary>
		/// The unadulterated form of the display properties, as they ought to be shown in the Director (if the activity appears in the director).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalDisplayProperties")]
		public string OriginalDisplayProperties { get; set; }
		
		/// <summary>
		/// When Activities are completed, we generate a "Post-Game Carnage Report", or PGCR, with details about what happened in that activity (how many kills someone got, which team won, etc...) We use this image as the background when displaying PGCR information, and often use it when we refer to the Activity in general.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pgcrImage")]
		public string PgcrImage { get; set; }
		
		/// <summary>
		/// The hash identifier for the "Place" on which this Activity is played. Use it to look up the DestinyPlaceDefinition for human readable info about the Place. A Place is the largest-scoped concept for location information. For instance, if the "Place" is Earth, the "Destination" would be a specific city or region on Earth.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeHash")]
		public System.Nullable<System.UInt32> PlaceHash { get; set; }
		
		/// <summary>
		/// Represents all of the possible activities that could be played in the Playlist, along with information that we can use to determine if they are active at the present time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playlistItems")]
		public DestinyDefinitionsDestinyActivityPlaylistItemDefinition[] PlaylistItems { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// If the activity has an icon associated with a specific release (such as a DLC), this is the path to that release's icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseIcon")]
		public string ReleaseIcon { get; set; }
		
		/// <summary>
		/// If the activity will not be visible until a specific and known time, this will be the seconds since the Epoch when it will become visible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseTime")]
		public System.Nullable<System.Int32> ReleaseTime { get; set; }
		
		/// <summary>
		/// The expected possible rewards for the activity. These rewards may or may not be accessible for an individual player based on their character state, the account state, and even the game's state overall. But it is a useful reference for possible rewards you can earn in the activity. These match up to rewards displayed when you hover over the Activity in the in-game Director, and often refer to Placeholder or "Dummy" items: items that tell you what you can earn in vague terms rather than what you'll specifically be earning (partly because the game doesn't even know what you'll earn specifically until you roll for it at the end)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewards")]
		public DestinyDefinitionsDestinyActivityRewardDefinition[] Rewards { get; set; }
		
		/// <summary>
		/// The title, subtitle, and icon for the activity as determined by Selection Screen data, if there is any for this activity. There won't be data in this field if the activity is never shown in a selection/options screen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectionScreenDisplayProperties")]
		public string SelectionScreenDisplayProperties { get; set; }
		
		/// <summary>
		/// The difficulty tier of the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tier")]
		public System.Nullable<System.Int32> Tier { get; set; }
	}
	
	/// <summary>
	/// Destinations and Activities may have default Activity Graphs that should be shown when you bring up the Director and are playing in either.
	///This contract defines the graph referred to and the gating for when it is relevant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityGraphListEntryDefinition
	{
		
		/// <summary>
		/// The hash identifier of the DestinyActivityGraphDefinition that should be shown when opening the director.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityGraphHash")]
		public System.Nullable<System.UInt32> ActivityGraphHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDefinitionsDestinyActivityDefinitionDirectActivityModeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
		_31 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
		_37 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
		_38 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
		_39 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
		_40 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
		_41 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
		_42 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
		_43 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
		_44 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
		_45 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
		_46 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
		_47 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
		_48 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
		_49 = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
		_50 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
		_51 = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
		_52 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
		_53 = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
		_54 = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
		_55 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
		_56 = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
		_57 = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
		_58 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
		_59 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
		_60 = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
		_61 = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
		_62 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
		_63 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
		_65 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
		_66 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
		_67 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
		_68 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
		_69 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
		_70 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
		_71 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
		_72 = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
		_73 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
		_74 = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
		_75 = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
		_76 = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
		_77 = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
		_78 = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
		_79 = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
		_80 = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
		_81 = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
		_82 = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
		_83 = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
		_84 = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
		_85 = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
		_86 = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
		_87 = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
		_88 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
		_89 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
		_90 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
		_91 = 83,
	}
	
	/// <summary>
	/// A point of entry into an activity, gated by an unlock flag and with some more-or-less useless (for our purposes) phase information. I'm including it in case we end up being able to bolt more useful information onto it in the future.
	///UPDATE: Turns out this information isn't actually useless, and is in fact actually useful for people. Who would have thought? We still don't have localized info for it, but at least this will help people when they're looking at phase indexes in stats data, or when they want to know what phases have been completed on a weekly achievement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityInsertionPointDefinition
	{
		
		/// <summary>
		/// A unique hash value representing the phase. This can be useful for, for example, comparing how different instances of Raids have phases in different orders!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phaseHash")]
		public System.Nullable<System.UInt32> PhaseHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityLoadoutRequirementSet
	{
		
		/// <summary>
		/// The set of requirements that will be applied on the activity if this requirement set is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirements")]
		public DestinyDefinitionsDestinyActivityLoadoutRequirement[] Requirements { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityLoadoutRequirement
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowedEquippedItemHashes")]
		public int[] AllowedEquippedItemHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowedWeaponSubTypes")]
		public int[] AllowedWeaponSubTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="equipmentSlotHash")]
		public System.Nullable<System.UInt32> EquipmentSlotHash { get; set; }
	}
	
	/// <summary>
	/// A reference to an Activity Modifier from another entity, such as an Activity (for now, just Activities).
	///This defines some
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityModifierReferenceDefinition
	{
		
		/// <summary>
		/// The hash identifier for the DestinyActivityModifierDefinition referenced by this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModifierHash")]
		public System.Nullable<System.UInt32> ActivityModifierHash { get; set; }
	}
	
	/// <summary>
	/// Represents a status string that could be conditionally displayed about an activity. Note that externally, you can only see the strings themselves. Internally we combine this information with server state to determine which strings should be shown.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityUnlockStringDefinition
	{
		
		/// <summary>
		/// The string to be displayed if the conditions are met.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayString")]
		public string DisplayString { get; set; }
	}
	
	/// <summary>
	/// If the activity is a playlist, this is the definition for a specific entry in the playlist: a single possible combination of Activity and Activity Mode that can be chosen.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityPlaylistItemDefinition
	{
		
		/// <summary>
		/// The hash identifier of the Activity that can be played. Use it to look up the DestinyActivityDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// The hash identifiers for Activity Modes relevant to this entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeHashes")]
		public int[] ActivityModeHashes { get; set; }
		
		/// <summary>
		/// The activity modes - if any - in enum form. Because we can't seem to escape the enums.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeTypes")]
		public int[] ActivityModeTypes { get; set; }
		
		/// <summary>
		/// If this playlist entry had an activity mode directly defined on it, this will be the hash of that mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directActivityModeHash")]
		public System.Nullable<System.UInt32> DirectActivityModeHash { get; set; }
		
		/// <summary>
		/// If the playlist entry had an activity mode directly defined on it, this will be the enum value of that mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directActivityModeType")]
		public System.Nullable<DestinyDefinitionsDestinyActivityPlaylistItemDefinitionDirectActivityModeType> DirectActivityModeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDefinitionsDestinyActivityPlaylistItemDefinitionDirectActivityModeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
		_31 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
		_37 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
		_38 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
		_39 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
		_40 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
		_41 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
		_42 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
		_43 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
		_44 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
		_45 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
		_46 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
		_47 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
		_48 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
		_49 = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
		_50 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
		_51 = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
		_52 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
		_53 = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
		_54 = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
		_55 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
		_56 = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
		_57 = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
		_58 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
		_59 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
		_60 = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
		_61 = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
		_62 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
		_63 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
		_65 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
		_66 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
		_67 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
		_68 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
		_69 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
		_70 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
		_71 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
		_72 = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
		_73 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
		_74 = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
		_75 = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
		_76 = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
		_77 = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
		_78 = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
		_79 = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
		_80 = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
		_81 = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
		_82 = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
		_83 = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
		_84 = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
		_85 = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
		_86 = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
		_87 = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
		_88 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
		_89 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
		_90 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
		_91 = 83,
	}
	
	/// <summary>
	/// Activities can refer to one or more sets of tooltip-friendly reward data. These are the definitions for those tooltip friendly rewards.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityRewardDefinition
	{
		
		/// <summary>
		/// The "Items provided" in the reward. This is almost always a pointer to a DestinyInventoryItemDefintion for an item that you can't actually earn in-game, but that has name/description/icon information for the vague concept of the rewards you will receive. This is because the actual reward generation is non-deterministic and extremely complicated, so the best the game can do is tell you what you'll get in vague terms. And so too shall we.
		///Interesting trivia: you actually *do* earn these items when you complete the activity. They go into a single-slot bucket on your profile, which is how you see the pop-ups of these rewards when you complete an activity that match these "dummy" items. You can even see them if you look at the last one you earned in your profile-level inventory through the BNet API! Who said reading documentation is a waste of time?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardItems")]
		public DestinyDestinyItemQuantity[] RewardItems { get; set; }
		
		/// <summary>
		/// The header for the reward set, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardText")]
		public string RewardText { get; set; }
	}
	
	/// <summary>
	/// Guided Game information for this activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityGuidedBlockDefinition
	{
		
		/// <summary>
		/// If -1, the guided group cannot be disbanded. Otherwise, take the total # of players in the activity and subtract this number: that is the total # of votes needed for the guided group to disband.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guidedDisbandCount")]
		public System.Nullable<System.Int32> GuidedDisbandCount { get; set; }
		
		/// <summary>
		/// The maximum amount of people that can be in the waiting lobby.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guidedMaxLobbySize")]
		public System.Nullable<System.Int32> GuidedMaxLobbySize { get; set; }
		
		/// <summary>
		/// The minimum amount of people that can be in the waiting lobby.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guidedMinLobbySize")]
		public System.Nullable<System.Int32> GuidedMinLobbySize { get; set; }
	}
	
	/// <summary>
	/// Information about matchmaking and party size for the activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityMatchmakingBlockDefinition
	{
		
		/// <summary>
		/// If TRUE, the activity is matchmade. Otherwise, it requires explicit forming of a party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isMatchmade")]
		public System.Nullable<System.Boolean> IsMatchmade { get; set; }
		
		/// <summary>
		/// The maximum # of people allowed in a Fireteam.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxParty")]
		public System.Nullable<System.Int32> MaxParty { get; set; }
		
		/// <summary>
		/// The maximum # of people allowed across all teams in the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxPlayers")]
		public System.Nullable<System.Int32> MaxPlayers { get; set; }
		
		/// <summary>
		/// The minimum # of people in the fireteam for the activity to launch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minParty")]
		public System.Nullable<System.Int32> MinParty { get; set; }
		
		/// <summary>
		/// If true, you have to Solemnly Swear to be up to Nothing But Good(tm) to play.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresGuardianOath")]
		public System.Nullable<System.Boolean> RequiresGuardianOath { get; set; }
	}
	
	/// <summary>
	/// This definition represents an "Activity Mode" as it exists in the Historical Stats endpoints. An individual Activity Mode represents a collection of activities that are played in a certain way. For example, Nightfall Strikes are part of a "Nightfall" activity mode, and any activities played as the PVP mode "Clash" are part of the "Clash activity mode.
	///Activity modes are nested under each other in a hierarchy, so that if you ask for - for example - "AllPvP", you will get any PVP activities that the user has played, regardless of what specific PVP mode was being played.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityModeDefinition
	{
		
		/// <summary>
		/// The type of play being performed in broad terms (PVP, PVE)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeCategory")]
		public System.Nullable<System.Int32> ActivityModeCategory { get; set; }
		
		/// <summary>
		/// If this exists, the mode has specific Activities (referred to by the Key) that should instead map to other Activity Modes when they are played. This was useful in D1 for Private Matches, where we wanted to have Private Matches as an activity mode while still referring to the specific mode being played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeMappings")]
		public System.Collections.Generic.Dictionary<string, int> ActivityModeMappings { get; set; }
		
		/// <summary>
		/// If FALSE, we want to ignore this type when we're showing activity modes in BNet UI. It will still be returned in case 3rd parties want to use it for any purpose.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display")]
		public System.Nullable<System.Boolean> Display { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// A Friendly identifier you can use for referring to this Activity Mode. We really only used this in our URLs, so... you know, take that for whatever it's worth.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If true, this mode is an aggregation of other, more specific modes rather than being a mode in itself. This includes modes that group Features/Events rather than Gameplay, such as Trials of The Nine: Trials of the Nine being an Event that is interesting to see aggregate data for, but when you play the activities within Trials of the Nine they are more specific activity modes such as Clash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAggregateMode")]
		public System.Nullable<System.Boolean> IsAggregateMode { get; set; }
		
		/// <summary>
		/// If True, this mode has oppositional teams fighting against each other rather than "Free-For-All" or Co-operative modes of play.
		///Note that Aggregate modes are never marked as team based, even if they happen to be team based at the moment. At any time, an aggregate whose subordinates are only team based could be changed so that one or more aren't team based, and then this boolean won't make much sense (the aggregation would become "sometimes team based"). Let's not deal with that right now.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isTeamBased")]
		public System.Nullable<System.Boolean> IsTeamBased { get; set; }
		
		/// <summary>
		/// The Enumeration value for this Activity Mode. Pass this identifier into Stats endpoints to get aggregate stats for this mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modeType")]
		public System.Nullable<System.Int32> ModeType { get; set; }
		
		/// <summary>
		/// The relative ordering of activity modes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// The hash identifiers of the DestinyActivityModeDefinitions that represent all of the "parent" modes for this mode. For instance, the Nightfall Mode is also a member of AllStrikes and AllPvE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentHashes")]
		public int[] ParentHashes { get; set; }
		
		/// <summary>
		/// If this activity mode has a related PGCR image, this will be the path to said image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pgcrImage")]
		public string PgcrImage { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// The definition for an Activity Type.
	///In Destiny 2, an Activity Type represents a conceptual categorization of Activities.
	///These are most commonly used in the game for the subtitle under Activities, but BNet uses them extensively to identify and group activities by their common properties.
	///Unfortunately, there has been a movement away from providing the richer data in Destiny 2 that we used to get in Destiny 1 for Activity Types. For instance, Nightfalls are grouped under the same Activity Type as regular Strikes. 
	///For this reason, BNet will eventually migrate toward Activity Modes as a better indicator of activity category. But for the time being, it is still referred to in many places across our codebase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyActivityTypeDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyArrangementRegionFilterDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="arrangementIndexByStatValue")]
		public System.Collections.Generic.Dictionary<string, int> ArrangementIndexByStatValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artArrangementRegionHash")]
		public System.Nullable<System.UInt32> ArtArrangementRegionHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artArrangementRegionIndex")]
		public System.Nullable<System.Int32> ArtArrangementRegionIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statHash")]
		public System.Nullable<System.UInt32> StatHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyArtDyeReference
	{
		
		[System.Runtime.Serialization.DataMember(Name="artDyeChannelHash")]
		public System.Nullable<System.UInt32> ArtDyeChannelHash { get; set; }
	}
	
	/// <summary>
	/// Basic identifying data about the bubble. Combine with DestinyDestinationBubbleSettingDefinition - see DestinyDestinationDefinition.bubbleSettings for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyBubbleDefinition
	{
		
		/// <summary>
		/// The display properties of this bubble, so you don't have to look them up in a separate list anymore.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// The identifier for the bubble: only guaranteed to be unique within the Destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
	}
	
	/// <summary>
	/// Defines a Character Class in Destiny 2. These are types of characters you can play, like Titan, Warlock, and Hunter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyClassDefinition
	{
		
		/// <summary>
		/// In Destiny 1, we added a convenience Enumeration for referring to classes. We've kept it, though mostly for posterity. This is the enum value for this definition's class.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classType")]
		public System.Nullable<System.Int32> ClassType { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// A localized string referring to the singular form of the Class's name when referred to in gendered form. Keyed by the DestinyGender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genderedClassNames")]
		public System.Collections.Generic.Dictionary<string, string> GenderedClassNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genderedClassNamesByGenderHash")]
		public System.Collections.Generic.Dictionary<string, string> GenderedClassNamesByGenderHash { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Mentors don't really mean anything anymore. Don't expect this to be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mentorVendorHash")]
		public System.Nullable<System.UInt32> MentorVendorHash { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// All damage types that are possible in the game are defined here, along with localized info and icons as needed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyDamageTypeDefinition
	{
		
		/// <summary>
		/// A color associated with the damage type. The displayProperties icon is tinted with a color close to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// The description of the damage type, icon etc...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// We have an enumeration for damage types for quick reference. This is the current definition's damage type enum value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enumValue")]
		public System.Nullable<System.Int32> EnumValue { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// If TRUE, the game shows this damage type's icon. Otherwise, it doesn't. Whether you show it or not is up to you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showIcon")]
		public System.Nullable<System.Boolean> ShowIcon { get; set; }
		
		/// <summary>
		/// A variant of the icon that is transparent and colorless.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transparentIconPath")]
		public string TransparentIconPath { get; set; }
	}
	
	/// <summary>
	/// Provides common properties for destiny definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyDefinition
	{
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// Human readable data about the bubble. Combine with DestinyBubbleDefinition - see DestinyDestinationDefinition.bubbleSettings for more information.
	///DEPRECATED - Just use bubbles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyDestinationBubbleSettingDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
	}
	
	/// <summary>
	/// On to one of the more confusing subjects of the API. What is a Destination, and what is the relationship between it, Activities, Locations, and Places?
	///A "Destination" is a specific region/city/area of a larger "Place". For instance, a Place might be Earth where a Destination might be Bellevue, Washington. (Please, pick a more interesting destination if you come to visit Earth).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyDestinationDefinition
	{
		
		/// <summary>
		/// If the Destination has default Activity Graphs (i.e. "Map") that should be shown in the director, this is the list of those Graphs. At most, only one should be active at any given time for a Destination: these would represent, for example, different variants on a Map if the Destination is changing on a macro level based on game state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityGraphEntries")]
		public DestinyDefinitionsDestinyActivityGraphListEntryDefinition[] ActivityGraphEntries { get; set; }
		
		/// <summary>
		/// A Destination may have many "Bubbles" zones with human readable properties.
		///We don't get as much info as I'd like about them - I'd love to return info like where on the map they are located - but at least this gives you the name of those bubbles. bubbleSettings and bubbles both have the identical number of entries, and you should match up their indexes to provide matching bubble and bubbleSettings data.
		///DEPRECATED - Just use bubbles, it now has this data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bubbleSettings")]
		public DestinyDefinitionsDestinyDestinationBubbleSettingDefinition[] BubbleSettings { get; set; }
		
		/// <summary>
		/// This provides the unique identifiers for every bubble in the destination (only guaranteed unique within the destination), and any intrinsic properties of the bubble.
		///bubbleSettings and bubbles both have the identical number of entries, and you should match up their indexes to provide matching bubble and bubbleSettings data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bubbles")]
		public DestinyDefinitionsDestinyBubbleDefinition[] Bubbles { get; set; }
		
		/// <summary>
		/// If this Destination has a default Free-Roam activity, this is the hash for that Activity. Use it to look up the DestinyActivityDefintion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultFreeroamActivityHash")]
		public System.Nullable<System.UInt32> DefaultFreeroamActivityHash { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The place that "owns" this Destination. Use this hash to look up the DestinyPlaceDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placeHash")]
		public System.Nullable<System.UInt32> PlaceHash { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// Display Categories are different from "categories" in that these are specifically for visual grouping and display of categories in Vendor UI. The "categories" structure is for validation of the contained items, and can be categorized entirely separately from "Display Categories", there need be and often will be no meaningful relationship between the two.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyDisplayCategoryDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayCategoryHash")]
		public System.Nullable<System.UInt32> DisplayCategoryHash { get; set; }
		
		/// <summary>
		/// If true, this category should be displayed in the "Banner" section of the vendor's UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayInBanner")]
		public System.Nullable<System.Boolean> DisplayInBanner { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// An indicator of how the category will be displayed in the UI. It's up to you to do something cool or interesting in response to this, or just to treat it as a normal category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayStyleHash")]
		public System.Nullable<System.UInt32> DisplayStyleHash { get; set; }
		
		/// <summary>
		/// An indicator of how the category will be displayed in the UI. It's up to you to do something cool or interesting in response to this, or just to treat it as a normal category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayStyleIdentifier")]
		public string DisplayStyleIdentifier { get; set; }
		
		/// <summary>
		/// A string identifier for the display category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If it exists, this is the hash identifier of a DestinyProgressionDefinition that represents the progression to show on this display category.
		///Specific categories can now have thier own distinct progression, apparently. So that's cool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressionHash")]
		public System.Nullable<System.UInt32> ProgressionHash { get; set; }
		
		/// <summary>
		/// If this category sorts items in a nonstandard way, this will be the way we sort.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	/// <summary>
	/// The results of a search for Destiny content. This will be improved on over time, I've been doing some experimenting to see what might be useful.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyEntitySearchResult
	{
		
		/// <summary>
		/// The items found that are matches/near matches for the searched-for term, sorted by something vaguely resembling "relevance". Hopefully this will get better in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public string Results { get; set; }
		
		/// <summary>
		/// A list of suggested words that might make for better search results, based on the text searched for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedWords")]
		public string[] SuggestedWords { get; set; }
	}
	
	/// <summary>
	/// An individual Destiny Entity returned from the entity search.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyEntitySearchResultItem
	{
		
		/// <summary>
		/// Basic display properties on the entity, so you don't have to look up the definition to show basic results for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// The type of entity, returned as a string matching the DestinyDefinition's contract class name. You'll have to have your own mapping from class names to actually looking up those definitions in the manifest databases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		public string EntityType { get; set; }
		
		/// <summary>
		/// The hash identifier of the entity. You will use this to look up the DestinyDefinition relevant for the entity found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The ranking value for sorting that we calculated using our relevance formula. This will hopefully get better with time and iteration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Double> Weight { get; set; }
	}
	
	/// <summary>
	/// Characters can not only have Inventory buckets (containers of items that are generally matched by their type or functionality), they can also have Equipment Slots.
	///The Equipment Slot is an indicator that the related bucket can have instanced items equipped on the character. For instance, the Primary Weapon bucket has an Equipment Slot that determines whether you can equip primary weapons, and holds the association between its slot and the inventory bucket from which it can have items equipped.
	///An Equipment Slot must have a related Inventory Bucket, but not all inventory buckets must have Equipment Slots.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyEquipmentSlotDefinition
	{
		
		/// <summary>
		/// If True, equipped items should have their custom art dyes applied when rendering the item. Otherwise, custom art dyes on an item should be ignored if the item is equipped in this slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applyCustomArtDyes")]
		public System.Nullable<System.Boolean> ApplyCustomArtDyes { get; set; }
		
		/// <summary>
		/// The Art Dye Channels that apply to this equipment slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artDyeChannels")]
		public DestinyDefinitionsDestinyArtDyeReference[] ArtDyeChannels { get; set; }
		
		/// <summary>
		/// The inventory bucket that owns this equipment slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketTypeHash")]
		public System.Nullable<System.UInt32> BucketTypeHash { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// These technically point to "Equipment Category Definitions". But don't get excited. There's nothing of significant value in those definitions, so I didn't bother to expose them. You can use the hash here to group equipment slots by common functionality, which serves the same purpose as if we had the Equipment Category definitions exposed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equipmentCategoryHash")]
		public System.Nullable<System.UInt32> EquipmentCategoryHash { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// Items that can be equipped define this block. It contains information we need to understand how and when the item can be equipped.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyEquippingBlockDefinition
	{
		
		/// <summary>
		/// Ammo type used by a weapon is no longer determined by the bucket in which it is contained. If the item has an ammo type - i.e. if it is a weapon - this will be the type of ammunition expected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ammoType")]
		public System.Nullable<System.Int32> AmmoType { get; set; }
		
		/// <summary>
		/// These are custom attributes on the equippability of the item.
		///For now, this can only be "equip on acquire", which would mean that the item will be automatically equipped as soon as you pick it up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Nullable<System.Int32> Attributes { get; set; }
		
		/// <summary>
		/// These are strings that represent the possible Game/Account/Character state failure conditions that can occur when trying to equip the item. They match up one-to-one with requiredUnlockExpressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayStrings")]
		public string[] DisplayStrings { get; set; }
		
		/// <summary>
		/// An equipped item *must* be equipped in an Equipment Slot. This is the hash identifier of the DestinyEquipmentSlotDefinition into which it must be equipped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equipmentSlotTypeHash")]
		public System.Nullable<System.UInt32> EquipmentSlotTypeHash { get; set; }
		
		/// <summary>
		/// If the item is part of a gearset, this is a reference to that gearset item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gearsetItemHash")]
		public System.Nullable<System.UInt32> GearsetItemHash { get; set; }
		
		/// <summary>
		/// If defined, this is the label used to check if the item has other items of matching types already equipped. 
		///For instance, when you aren't allowed to equip more than one Exotic Weapon, that's because all exotic weapons have identical uniqueLabels and the game checks the to-be-equipped item's uniqueLabel vs. all other already equipped items (other than the item in the slot that's about to be occupied).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueLabel")]
		public string UniqueLabel { get; set; }
		
		/// <summary>
		/// The hash of that unique label. Does not point to a specific definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uniqueLabelHash")]
		public System.Nullable<System.UInt32> UniqueLabelHash { get; set; }
	}
	
	/// <summary>
	/// These definitions represent Factions in the game. Factions have ended up unilaterally being related to Vendors that represent them, but that need not necessarily be the case.
	///A Faction is really just an entity that has a related progression for which a character can gain experience. In Destiny 1, Dead Orbit was an example of a Faction: there happens to be a Vendor that represents Dead Orbit (and indeed, DestinyVendorDefinition.factionHash defines to this relationship), but Dead Orbit could theoretically exist without the Vendor that provides rewards.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyFactionDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The hash identifier for the DestinyProgressionDefinition that indicates the character's relationship with this faction in terms of experience and levels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressionHash")]
		public System.Nullable<System.UInt32> ProgressionHash { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// The faction reward item hash, usually an engram.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardItemHash")]
		public System.Nullable<System.UInt32> RewardItemHash { get; set; }
		
		/// <summary>
		/// The faction reward vendor hash, used for faction engram previews.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardVendorHash")]
		public System.Nullable<System.UInt32> RewardVendorHash { get; set; }
		
		/// <summary>
		/// The faction token item hashes, and their respective progression values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenValues")]
		public System.Collections.Generic.Dictionary<string, uint> TokenValues { get; set; }
		
		/// <summary>
		/// List of vendors that are associated with this faction. The last vendor that passes the unlock flag checks is the one that should be shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendors")]
		public DestinyDefinitionsDestinyFactionVendorDefinition[] Vendors { get; set; }
	}
	
	/// <summary>
	/// These definitions represent faction vendors at different points in the game.
	///A single faction may contain multiple vendors, or the same vendor available at two different locations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyFactionVendorDefinition
	{
		
		/// <summary>
		/// The relative path to the background image representing this Vendor at this location, for use in a banner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImagePath")]
		public string BackgroundImagePath { get; set; }
		
		/// <summary>
		/// The hash identifier for a Destination at which this vendor may be located. Each destination where a Vendor may exist will only ever have a single entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationHash")]
		public System.Nullable<System.UInt32> DestinationHash { get; set; }
		
		/// <summary>
		/// The faction vendor hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHash")]
		public System.Nullable<System.UInt32> VendorHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyGearArtArrangementReference
	{
		
		[System.Runtime.Serialization.DataMember(Name="artArrangementHash")]
		public System.Nullable<System.UInt32> ArtArrangementHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classHash")]
		public System.Nullable<System.UInt32> ClassHash { get; set; }
	}
	
	/// <summary>
	/// Gender is a social construct, and as such we have definitions for Genders. Right now there happens to only be two, but we'll see what the future holds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyGenderDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// This is a quick reference enumeration for all of the currently defined Genders. We use the enumeration for quicker lookups in related data, like DestinyClassDefinition.genderedClassNames.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genderType")]
		public System.Nullable<System.Int32> GenderType { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// An Inventory (be it Character or Profile level) is comprised of many Buckets. An example of a bucket is "Primary Weapons", where all of the primary weapons on a character are gathered together into a single visual element in the UI: a subset of the inventory that has a limited number of slots, and in this case also has an associated Equipment Slot for equipping an item in the bucket.
	///Item definitions declare what their "default" bucket is (DestinyInventoryItemDefinition.inventory.bucketTypeHash), and Item instances will tell you which bucket they are currently residing in (DestinyItemComponent.bucketHash). You can use this information along with the DestinyInventoryBucketDefinition to show these items grouped by bucket.
	///You cannot transfer an item to a bucket that is not its Default without going through a Vendor's "accepted items" (DestinyVendorDefinition.acceptedItems). This is how transfer functionality like the Vault is implemented, as a feature of a Vendor. See the vendor's acceptedItems property for more details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyInventoryBucketDefinition
	{
		
		/// <summary>
		/// Use this property to provide a quick-and-dirty recommended ordering for buckets in the UI. Most UIs will likely want to forsake this for something more custom and manual.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketOrder")]
		public System.Nullable<System.Int32> BucketOrder { get; set; }
		
		/// <summary>
		/// An enum value for what items can be found in the bucket. See the BucketCategory enum for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<System.Int32> Category { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// If True, this bucket is enabled. Disabled buckets may include buckets that were included for test purposes, or that were going to be used but then were abandoned but never removed from content *cough*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// if a FIFO bucket fills up, it will delete the oldest item from said bucket when a new item tries to be added to it. If this is FALSE, the bucket will not allow new items to be placed in it until room is made by the user manually deleting items from it. You can see an example of this with the Postmaster's bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fifo")]
		public System.Nullable<System.Boolean> Fifo { get; set; }
		
		/// <summary>
		/// If TRUE, there is at least one Vendor that can transfer items to/from this bucket. See the DestinyVendorDefinition's acceptedItems property for more information on how transferring works.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasTransferDestination")]
		public System.Nullable<System.Boolean> HasTransferDestination { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The maximum # of item "slots" in a bucket. A slot is a given combination of item + quantity.
		///For instance, a Weapon will always take up a single slot, and always have a quantity of 1. But a material could take up only a single slot with hundreds of quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemCount")]
		public System.Nullable<System.Int32> ItemCount { get; set; }
		
		/// <summary>
		/// Sometimes, inventory buckets represent conceptual "locations" in the game that might not be expected. This value indicates the conceptual location of the bucket, regardless of where it is actually contained on the character/account. 
		///See ItemLocation for details. 
		///Note that location includes the Vault and the Postmaster (both of whom being just inventory buckets with additional actions that can be performed on them through a Vendor)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public System.Nullable<System.Int32> Location { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// Where the bucket is found. 0 = Character, 1 = Account
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<System.Int32> Scope { get; set; }
	}
	
	/// <summary>
	/// So much of what you see in Destiny is actually an Item used in a new and creative way. This is the definition for Items in Destiny, which started off as just entities that could exist in your Inventory but ended up being the backing data for so much more: quests, reward previews, slots, and subclasses.
	///In practice, you will want to associate this data with "live" item data from a Bungie.Net Platform call: these definitions describe the item in generic, non-instanced terms: but an actual instance of an item can vary widely from these generic definitions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyInventoryItemDefinition
	{
		
		/// <summary>
		/// If the item can be "used", this block will be non-null, and will have data related to the action performed when using the item. (Guess what? 99% of the time, this action is "dismantle". Shocker)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// BNet may forbid the execution of actions on this item via the API. If that is occurring, allowActions will be set to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowActions")]
		public System.Nullable<System.Boolean> AllowActions { get; set; }
		
		/// <summary>
		/// If any animations were extracted from game content for this item, these will be the definitions of those animations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="animations")]
		public DestinyDefinitionsAnimationsDestinyAnimationReference[] Animations { get; set; }
		
		/// <summary>
		/// Sometimes, an item will have a background color. Most notably this occurs with Emblems, who use the Background Color for small character nameplates such as the "friends" view you see in-game. There are almost certainly other items that have background color as well, though I have not bothered to investigate what items have it nor what purposes they serve: use it as you will.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public string BackgroundColor { get; set; }
		
		/// <summary>
		/// Some weapons and plugs can have a "Breaker Type": a special ability that works sort of like damage type vulnerabilities. This is (almost?) always set on items by plugs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakerType")]
		public System.Nullable<System.Int32> BreakerType { get; set; }
		
		/// <summary>
		/// Since we also have a breaker type definition, this is the hash for that breaker type for your convenience. Whether you use the enum or hash and look up the definition depends on what's cleanest for your code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakerTypeHash")]
		public System.Nullable<System.UInt32> BreakerTypeHash { get; set; }
		
		/// <summary>
		/// We run a similarly weak-sauce algorithm to try and determine whether an item is restricted to a specific class. If we find it to be restricted in such a way, we set this classType property to match the class' enumeration value so that users can easily identify class restricted items.
		///If you see a mis-classed item, please inform the developers in the Bungie API forum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classType")]
		public System.Nullable<System.Int32> ClassType { get; set; }
		
		/// <summary>
		/// If this item has a collectible related to it, this is the hash identifier of that collectible entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectibleHash")]
		public System.Nullable<System.UInt32> CollectibleHash { get; set; }
		
		/// <summary>
		/// Recipe items will have relevant crafting information available here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crafting")]
		public string Crafting { get; set; }
		
		/// <summary>
		/// Theoretically, an item can have many possible damage types. In *practice*, this is not true, but just in case weapons start being made that have multiple (for instance, an item where a socket has reusable plugs for every possible damage type that you can choose from freely), this field will return all of the possible damage types that are available to the weapon by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="damageTypeHashes")]
		public int[] DamageTypeHashes { get; set; }
		
		/// <summary>
		/// This is the list of all damage types that we know ahead of time the item can take on. Unfortunately, this does not preclude the possibility of something funky happening to give the item a damage type that cannot be predicted beforehand: for example, if some designer decides to create arbitrary non-reusable plugs that cause damage type to change.
		///This damage type prediction will only use the following to determine potential damage types:
		///- Intrinsic perks
		///- Talent Node perks
		///- Known, reusable plugs for sockets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="damageTypes")]
		public int[] DamageTypes { get; set; }
		
		/// <summary>
		/// If the item has a damage type that could be considered to be default, it will be populated here.
		///For various upsetting reasons, it's surprisingly cumbersome to figure this out. I hope you're happy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultDamageType")]
		public System.Nullable<System.Int32> DefaultDamageType { get; set; }
		
		/// <summary>
		/// Similar to defaultDamageType, but represented as the hash identifier for a DestinyDamageTypeDefinition.
		///I will likely regret leaving in the enumeration versions of these properties, but for now they're very convenient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultDamageTypeHash")]
		public System.Nullable<System.UInt32> DefaultDamageTypeHash { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// In theory, it is a localized string telling you about how you can find the item. I really wish this was more consistent. Many times, it has nothing. Sometimes, it's instead a more narrative-forward description of the item. Which is cool, and I wish all properties had that data, but it should really be its own property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displaySource")]
		public string DisplaySource { get; set; }
		
		/// <summary>
		/// The boolean will indicate to us (and you!) whether something *could* happen when you transfer this item from the Postmaster that might be considered a "destructive" action.
		///It is not feasible currently to tell you (or ourelves!) in a consistent way whether this *will* actually cause a destructive action, so we are playing it safe: if it has the potential to do so, we will not allow it to be transferred from the Postmaster by default. You will need to check for this flag before transferring an item from the Postmaster, or else you'll end up receiving an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doesPostmasterPullHaveSideEffects")]
		public System.Nullable<System.Boolean> DoesPostmasterPullHaveSideEffects { get; set; }
		
		/// <summary>
		/// If the item is an emblem that has a special Objective attached to it - for instance, if the emblem tracks PVP Kills, or what-have-you. This is a bit different from, for example, the Vanguard Kill Tracker mod, which pipes data into the "art channel". When I get some time, I would like to standardize these so you can get at the values they expose without having to care about what they're being used for and how they are wired up, but for now here's the raw data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emblemObjectiveHash")]
		public System.Nullable<System.UInt32> EmblemObjectiveHash { get; set; }
		
		/// <summary>
		/// If true, then you will be allowed to equip the item if you pass its other requirements.
		///This being false means that you cannot equip the item under any circumstances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equippable")]
		public System.Nullable<System.Boolean> Equippable { get; set; }
		
		/// <summary>
		/// If this item can be equipped, this block will be non-null and will be populated with the conditions under which it can be equipped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equippingBlock")]
		public string EquippingBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flavorText")]
		public string FlavorText { get; set; }
		
		/// <summary>
		/// If this item has related items in a "Gear Set", this will be non-null and the relationships defined herein.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gearset")]
		public string Gearset { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// If available, this is the original 'active' release watermark overlay for the icon. If the item has different versions, this can be overridden by the 'display version watermark icon' from the 'quality' block. Alternatively, if there is no watermark for the version, and the item version has a power cap below the current season power cap, this can be overridden by the iconWatermarkShelved property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconWatermark")]
		public string IconWatermark { get; set; }
		
		/// <summary>
		/// If available, this is the 'shelved' release watermark overlay for the icon. If the item version has a power cap below the current season power cap, it can be treated as 'shelved', and should be shown with this 'shelved' watermark overlay.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconWatermarkShelved")]
		public string IconWatermarkShelved { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this item can exist in an inventory, this block will be non-null. In practice, every item that currently exists has one of these blocks. But note that it is not necessarily guaranteed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory")]
		public string Inventory { get; set; }
		
		/// <summary>
		/// If the item has stats, this block will be defined. It has the "raw" investment stats for the item. These investment stats don't take into account the ways that the items can spawn, nor do they take into account any Stat Group transformations. I have retained them for debugging purposes, but I do not know how useful people will find them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="investmentStats")]
		public DestinyDefinitionsDestinyItemInvestmentStatDefinition[] InvestmentStats { get; set; }
		
		/// <summary>
		/// If true, this is a dummy vendor-wrapped item template. Items purchased from Eververse will be "wrapped" by one of these items so that we can safely provide refund capabilities before the item is "unwrapped".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isWrapper")]
		public System.Nullable<System.Boolean> IsWrapper { get; set; }
		
		/// <summary>
		/// BNet attempts to make a more formal definition of item "Categories", as defined by DestinyItemCategoryDefinition. This is a list of all Categories that we were able to algorithmically determine that this item is a member of. (for instance, that it's a "Weapon", that it's an "Auto Rifle", etc...)
		///The algorithm for these is, unfortunately, volatile. If you believe you see a miscategorized item, please let us know on the Bungie API forums.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemCategoryHashes")]
		public int[] ItemCategoryHashes { get; set; }
		
		/// <summary>
		/// A value indicating the "sub-type" of the item. For instance, where an item might have an itemType value "Weapon", this will be something more specific like "Auto Rifle".
		///itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemSubType")]
		public System.Nullable<System.Int32> ItemSubType { get; set; }
		
		/// <summary>
		/// A value indicating the "base" the of the item. This enum is a useful but dramatic oversimplification of what it means for an item to have a "Type". Still, it's handy in many situations.
		///itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemType")]
		public System.Nullable<System.Int32> ItemType { get; set; }
		
		/// <summary>
		/// It became a common enough pattern in our UI to show Item Type and Tier combined into a single localized string that I'm just going to go ahead and start pre-creating these for items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemTypeAndTierDisplayName")]
		public string ItemTypeAndTierDisplayName { get; set; }
		
		/// <summary>
		/// The localized title/name of the item's type. This can be whatever the designers want, and has no guarantee of consistency between items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemTypeDisplayName")]
		public string ItemTypeDisplayName { get; set; }
		
		/// <summary>
		/// If we added any help or informational URLs about this item, these will be those links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public LinksHyperlinkReference[] Links { get; set; }
		
		/// <summary>
		/// If the item has any related Lore (DestinyLoreDefinition), this will be the hash identifier you can use to look up the lore definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loreHash")]
		public System.Nullable<System.UInt32> LoreHash { get; set; }
		
		/// <summary>
		/// If this item has available metrics to be shown, this block will be non-null have the appropriate hashes defined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string Metrics { get; set; }
		
		/// <summary>
		/// The intrinsic transferability of an item.
		///I hate that this boolean is negative - but there's a reason.
		///Just because an item is intrinsically transferrable doesn't mean that it can be transferred, and we don't want to imply that this is the only source of that transferability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonTransferrable")]
		public System.Nullable<System.Boolean> NonTransferrable { get; set; }
		
		/// <summary>
		/// If this item has Objectives (extra tasks that can be accomplished related to the item... most frequently when the item is a Quest Step and the Objectives need to be completed to move on to the next Quest Step), this block will be non-null and the objectives defined herein.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectives")]
		public string Objectives { get; set; }
		
		/// <summary>
		/// If the item has any *intrinsic* Perks (Perks that it will provide regardless of Sockets, Talent Grid, and other transitory state), they will be defined here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perks")]
		public DestinyDefinitionsDestinyItemPerkEntryDefinition[] Perks { get; set; }
		
		/// <summary>
		/// If this item *is* a Plug, this will be non-null and the info defined herein. See DestinyItemPlugDefinition for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plug")]
		public string Plug { get; set; }
		
		/// <summary>
		/// If this item can be Used or Acquired to gain other items (for instance, how Eververse Boxes can be consumed to get items from the box), this block will be non-null and will give summary information for the items that can be acquired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview")]
		public string Preview { get; set; }
		
		/// <summary>
		/// If this item can have a level or stats, this block will be non-null and will be populated with default quality (item level, "quality", and infusion) data. See the block for more details, there's often less upfront information in D2 so you'll want to be aware of how you use quality and item level on the definition level now.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quality")]
		public string Quality { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// If this item is a "reward sack" that can be opened to provide other items, this will be non-null and the properties of the sack contained herein.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sack")]
		public string Sack { get; set; }
		
		/// <summary>
		/// If we were able to acquire an in-game screenshot for the item, the path to that screenshot will be returned here. Note that not all items have screenshots: particularly not any non-equippable items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenshot")]
		public string Screenshot { get; set; }
		
		/// <summary>
		/// If this item is related directly to a Season of Destiny, this is the hash identifier for that season.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seasonHash")]
		public System.Nullable<System.UInt32> SeasonHash { get; set; }
		
		/// <summary>
		/// A secondary icon associated with the item. Currently this is used in very context specific applications, such as Emblem Nameplates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryIcon")]
		public string SecondaryIcon { get; set; }
		
		/// <summary>
		/// Pulled from the secondary icon, this is the "secondary background" of the secondary icon. Confusing? Sure, that's why I call it "overlay" here: because as far as it's been used thus far, it has been for an optional overlay image. We'll see if that holds up, but at least for now it explains what this image is a bit better.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryOverlay")]
		public string SecondaryOverlay { get; set; }
		
		/// <summary>
		/// Pulled from the Secondary Icon, this is the "special" background for the item. For Emblems, this is the background image used on the Details view: but it need not be limited to that for other types of items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondarySpecial")]
		public string SecondarySpecial { get; set; }
		
		/// <summary>
		/// If this item is a quest, this block will be non-null. In practice, I wish I had called this the Quest block, but at the time it wasn't clear to me whether it would end up being used for purposes other than quests. It will contain data about the steps in the quest, and mechanics we can use for displaying and tracking the quest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setData")]
		public string SetData { get; set; }
		
		/// <summary>
		/// If this item has any Sockets, this will be non-null and the individual sockets on the item will be defined herein.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sockets")]
		public string Sockets { get; set; }
		
		/// <summary>
		/// If this item has a known source, this block will be non-null and populated with source information. Unfortunately, at this time we are not generating sources: that is some aggressively manual work which we didn't have time for, and I'm hoping to get back to at some point in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceData")]
		public string SourceData { get; set; }
		
		/// <summary>
		/// In Destiny 1, we identified some items as having particular categories that we'd like to know about for various internal logic purposes. These are defined in SpecialItemType, and while these days the itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specialItemType")]
		public System.Nullable<System.Int32> SpecialItemType { get; set; }
		
		/// <summary>
		/// If this item can have stats (such as a weapon, armor, or vehicle), this block will be non-null and populated with the stats found on the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public string Stats { get; set; }
		
		/// <summary>
		/// Summary data about the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// There are times when the game will show you a "summary/vague" version of an item - such as a description of its type represented as a DestinyInventoryItemDefinition - rather than display the item itself.
		///This happens sometimes when summarizing possible rewards in a tooltip. This is the item displayed instead, if it exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summaryItemHash")]
		public System.Nullable<System.UInt32> SummaryItemHash { get; set; }
		
		/// <summary>
		/// If the item has a Talent Grid, this will be non-null and the properties of the grid defined herein. Note that, while many items still have talent grids, the only ones with meaningful Nodes still on them will be Subclass/"Build" items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="talentGrid")]
		public string TalentGrid { get; set; }
		
		/// <summary>
		/// Tooltips that only come up conditionally for the item. Check the live data DestinyItemComponent.tooltipNotificationIndexes property for which of these should be shown at runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tooltipNotifications")]
		public DestinyDefinitionsDestinyItemTooltipNotification[] TooltipNotifications { get; set; }
		
		/// <summary>
		/// An identifier that the game UI uses to determine what type of tooltip to show for the item. These have no corresponding definitions that BNet can link to: so it'll be up to you to interpret and display your UI differently according to these styles (or ignore it).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tooltipStyle")]
		public string TooltipStyle { get; set; }
		
		/// <summary>
		/// These are the corresponding trait definition hashes for the entries in traitIds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traitHashes")]
		public int[] TraitHashes { get; set; }
		
		/// <summary>
		/// Traits are metadata tags applied to this item. For example: armor slot, weapon type, foundry, faction, etc. These IDs come from the game and don't map to any content, but should still be useful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traitIds")]
		public string[] TraitIds { get; set; }
		
		/// <summary>
		/// If this item can be rendered, this block will be non-null and will be populated with rendering information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translationBlock")]
		public string TranslationBlock { get; set; }
		
		/// <summary>
		/// A string identifier that the game's UI uses to determine how the item should be rendered in inventory screens and the like. This could really be anything - at the moment, we don't have the time to really breakdown and maintain all the possible strings this could be, partly because new ones could be added ad hoc. But if you want to use it to dictate your own UI, or look for items with a certain display style, go for it!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uiItemDisplayStyle")]
		public string UiItemDisplayStyle { get; set; }
		
		/// <summary>
		/// The conceptual "Value" of an item, if any was defined. See the DestinyItemValueBlockDefinition for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents a "raw" investment stat, before calculated stats are calculated and before any DestinyStatGroupDefinition is applied to transform the stat into something closer to what you see in-game.
	///Because these won't match what you see in-game, consider carefully whether you really want to use these stats. I have left them in case someone can do something useful or interesting with the pre-processed statistics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemInvestmentStatDefinition
	{
		
		/// <summary>
		/// If this is true, the stat will only be applied on the item in certain game state conditions, and we can't know statically whether or not this stat will be applied. Check the "live" API data instead for whether this value is being applied on a specific instance of the item in question, and you can use this to decide whether you want to show the stat on the generic view of the item, or whether you want to show some kind of caveat or warning about the stat value being conditional on game state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isConditionallyActive")]
		public System.Nullable<System.Boolean> IsConditionallyActive { get; set; }
		
		/// <summary>
		/// The hash identifier for the DestinyStatDefinition defining this stat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statTypeHash")]
		public System.Nullable<System.UInt32> StatTypeHash { get; set; }
		
		/// <summary>
		/// The raw "Investment" value for the stat, before transformations are performed to turn this raw stat into stats that are displayed in the game UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinksHyperlinkReference
	{
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// An intrinsic perk on an item, and the requirements for it to be activated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemPerkEntryDefinition
	{
		
		/// <summary>
		/// A hash identifier for the DestinySandboxPerkDefinition being provided on the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perkHash")]
		public System.Nullable<System.UInt32> PerkHash { get; set; }
		
		/// <summary>
		/// Indicates whether this perk should be shown, or if it should be shown disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perkVisibility")]
		public System.Nullable<System.Int32> PerkVisibility { get; set; }
		
		/// <summary>
		/// If this perk is not active, this is the string to show for why it's not providing its benefits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirementDisplayString")]
		public string RequirementDisplayString { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemTooltipNotification
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayString")]
		public string DisplayString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayStyle")]
		public string DisplayStyle { get; set; }
	}
	
	/// <summary>
	/// Defines a specific stat value on an item, and the minimum/maximum range that we could compute for the item based on our heuristics for how the item might be generated.
	///Not guaranteed to match real-world instances of the item, but should hopefully at least be close. If it's not close, let us know on the Bungie API forums.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyInventoryItemStatDefinition
	{
		
		/// <summary>
		/// The maximum possible value for the stat as shown in the UI, if it is being shown somewhere that reveals maximum in the UI (such as a bar chart-style view).
		///This is pulled directly from the item's DestinyStatGroupDefinition, and placed here for convenience.
		///If not returned, there is no maximum to use (and thus the stat should not be shown in a way that assumes there is a limit to the stat)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayMaximum")]
		public System.Nullable<System.Int32> DisplayMaximum { get; set; }
		
		/// <summary>
		/// The maximum possible value for this stat that we think the item can roll.
		///WARNING: In Destiny 1, this field was calculated using the potential stat rolls on the item's talent grid. In Destiny 2, items no longer have meaningful talent grids and instead have sockets: but the calculation of this field was never altered to adapt to this change. As such, this field should be considered deprecated until we can address this oversight.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximum")]
		public System.Nullable<System.Int32> Maximum { get; set; }
		
		/// <summary>
		/// The minimum possible value for this stat that we think the item can roll.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimum")]
		public System.Nullable<System.Int32> Minimum { get; set; }
		
		/// <summary>
		/// The hash for the DestinyStatDefinition representing this stat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statHash")]
		public System.Nullable<System.UInt32> StatHash { get; set; }
		
		/// <summary>
		/// This value represents the stat value assuming the minimum possible roll but accounting for any mandatory bonuses that should be applied to the stat on item creation.
		///In Destiny 1, this was different from the "minimum" value because there were certain conditions where an item could be theoretically lower level/value than the initial roll. 
		///In Destiny 2, this is not possible unless Talent Grids begin to be used again for these purposes or some other system change occurs... thus in practice, value and minimum should be the same in Destiny 2. Good riddance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	/// <summary>
	/// If an item can have an action performed on it (like "Dismantle"), it will be defined here if you care.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemActionBlockDefinition
	{
		
		/// <summary>
		/// The internal identifier for the action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionTypeLabel")]
		public string ActionTypeLabel { get; set; }
		
		/// <summary>
		/// If true, the entire stack is deleted when the action completes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumeEntireStack")]
		public System.Nullable<System.Boolean> ConsumeEntireStack { get; set; }
		
		/// <summary>
		/// If true, the item is deleted when the action completes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteOnAction")]
		public System.Nullable<System.Boolean> DeleteOnAction { get; set; }
		
		/// <summary>
		/// The content has this property, however it's not entirely clear how it is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPositive")]
		public System.Nullable<System.Boolean> IsPositive { get; set; }
		
		/// <summary>
		/// The icon associated with the overlay screen for the action, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overlayIcon")]
		public string OverlayIcon { get; set; }
		
		/// <summary>
		/// If the action has an overlay screen associated with it, this is the name of that screen. Unfortunately, we cannot return the screen's data itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overlayScreenName")]
		public string OverlayScreenName { get; set; }
		
		/// <summary>
		/// If performing this action earns you Progression, this is the list of progressions and values granted for those progressions by performing this action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressionRewards")]
		public DestinyDefinitionsDestinyProgressionRewardDefinition[] ProgressionRewards { get; set; }
		
		/// <summary>
		/// The identifier hash for the Cooldown associated with this action. We have not pulled this data yet for you to have more data to use for cooldowns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredCooldownHash")]
		public System.Nullable<System.UInt32> RequiredCooldownHash { get; set; }
		
		/// <summary>
		/// The number of seconds to delay before allowing this action to be performed again.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredCooldownSeconds")]
		public System.Nullable<System.Int32> RequiredCooldownSeconds { get; set; }
		
		/// <summary>
		/// If the action requires other items to exist or be destroyed, this is the list of those items and requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredItems")]
		public DestinyDefinitionsDestinyItemActionRequiredItemDefinition[] RequiredItems { get; set; }
		
		/// <summary>
		/// Theoretically, an item could have a localized string for a hint about the location in which the action should be performed. In practice, no items yet have this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredLocation")]
		public string RequiredLocation { get; set; }
		
		/// <summary>
		/// If true, this action will be performed as soon as you earn this item. Some rewards work this way, providing you a single item to pick up from a reward-granting vendor in-game and then immediately consuming itself to provide you multiple items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useOnAcquire")]
		public System.Nullable<System.Boolean> UseOnAcquire { get; set; }
		
		/// <summary>
		/// Localized text describing the action being performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verbDescription")]
		public string VerbDescription { get; set; }
		
		/// <summary>
		/// Localized text for the verb of the action being performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verbName")]
		public string VerbName { get; set; }
	}
	
	/// <summary>
	/// Inventory Items can reward progression when actions are performed on them. A common example of this in Destiny 1 was Bounties, which would reward Experience on your Character and the like when you completed the bounty.
	///Note that this maps to a DestinyProgressionMappingDefinition, and *not* a DestinyProgressionDefinition directly. This is apparently so that multiple progressions can be granted progression points/experience at the same time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyProgressionRewardDefinition
	{
		
		/// <summary>
		/// The amount of experience to give to each of the mapped progressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Int32> Amount { get; set; }
		
		/// <summary>
		/// If true, the game's internal mechanisms to throttle progression should be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applyThrottles")]
		public System.Nullable<System.Boolean> ApplyThrottles { get; set; }
		
		/// <summary>
		/// The hash identifier of the DestinyProgressionMappingDefinition that contains the progressions for which experience should be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressionMappingHash")]
		public System.Nullable<System.UInt32> ProgressionMappingHash { get; set; }
	}
	
	/// <summary>
	/// The definition of an item and quantity required in a character's inventory in order to perform an action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemActionRequiredItemDefinition
	{
		
		/// <summary>
		/// The minimum quantity of the item you have to have.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// If true, the item/quantity will be deleted from your inventory when the action is performed. Otherwise, you'll retain these required items after the action is complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteOnAction")]
		public System.Nullable<System.Boolean> DeleteOnAction { get; set; }
		
		/// <summary>
		/// The hash identifier of the item you need to have. Use it to look up the DestinyInventoryItemDefinition for more info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
	}
	
	/// <summary>
	/// In an attempt to categorize items by type, usage, and other interesting properties, we created DestinyItemCategoryDefinition: information about types that is assembled using a set of heuristics that examine the properties of an item such as what inventory bucket it's in, its item type name, and whether it has or is missing certain blocks of data.
	///This heuristic is imperfect, however. If you find an item miscategorized, let us know on the Bungie API forums!
	///We then populate all of the categories that we think an item belongs to in its DestinyInventoryItemDefinition.itemCategoryHashes property. You can use that to provide your own custom item filtering, sorting, aggregating... go nuts on it! And let us know if you see more categories that you wish would be added!
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemCategoryDefinition
	{
		
		/// <summary>
		/// If True, this category has been deprecated: it may have no items left, or there may be only legacy items that remain in it which are no longer relevant to the game.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecated")]
		public System.Nullable<System.Boolean> Deprecated { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// If the item in question has this category, it also should have this breaker type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grantDestinyBreakerType")]
		public System.Nullable<System.Int32> GrantDestinyBreakerType { get; set; }
		
		/// <summary>
		/// If an item belongs to this category, it will also get this class restriction enum value.
		///See the other "grant"-prefixed properties on this definition for my color commentary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grantDestinyClass")]
		public System.Nullable<System.Int32> GrantDestinyClass { get; set; }
		
		/// <summary>
		/// If an item belongs to this category, it will also receive this item type. This is now how DestinyItemType is populated for items: it used to be an even jankier process, but that's a story that requires more alcohol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grantDestinyItemType")]
		public System.Nullable<System.Int32> GrantDestinyItemType { get; set; }
		
		/// <summary>
		/// If an item belongs to this category, it will also receive this subtype enum value.
		///I know what you're thinking - what if it belongs to multiple categories that provide sub-types?
		///The last one processed wins, as is the case with all of these "grant" enums. Now you can see one reason why we moved away from these enums... but they're so convenient when they work, aren't they?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grantDestinySubType")]
		public System.Nullable<System.Int32> GrantDestinySubType { get; set; }
		
		/// <summary>
		/// If true, this category is only used for grouping, and should not be evaluated with its own checks. Rather, the item only has this category if it has one of its child categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupCategoryOnly")]
		public System.Nullable<System.Boolean> GroupCategoryOnly { get; set; }
		
		/// <summary>
		/// If this category is a "parent" category of other categories, those children will have their hashes listed in rendering order here, and can be looked up using these hashes against DestinyItemCategoryDefinition.
		///In this way, you can build up a visual hierarchy of item categories. That's what we did, and you can do it too. I believe in you. Yes, you, Carl.
		///(I hope someone named Carl reads this someday)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupedCategoryHashes")]
		public int[] GroupedCategoryHashes { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The janky regular expression we used against the item type to try and discern whether the item belongs to this category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemTypeRegex")]
		public string ItemTypeRegex { get; set; }
		
		/// <summary>
		/// If the item type matches this janky regex, it does *not* belong to this category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemTypeRegexNot")]
		public string ItemTypeRegexNot { get; set; }
		
		/// <summary>
		/// If the item belongs to this bucket, it does belong to this category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originBucketIdentifier")]
		public string OriginBucketIdentifier { get; set; }
		
		/// <summary>
		/// All item category hashes of "parent" categories: categories that contain this as a child through the hierarchy of groupedCategoryHashes. It's a bit redundant, but having this child-centric list speeds up some calculations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentCategoryHashes")]
		public int[] ParentCategoryHashes { get; set; }
		
		/// <summary>
		/// If the item is a plug, this is the identifier we expect to find associated with it if it is in this category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugCategoryIdentifier")]
		public string PlugCategoryIdentifier { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// A shortened version of the title. The reason why we have this is because the Armory in German had titles that were too long to display in our UI, so these were localized abbreviated versions of those categories. The property still exists today, even though the Armory doesn't exist for D2... yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortTitle")]
		public string ShortTitle { get; set; }
		
		/// <summary>
		/// The traitId that can be found on items that belong to this category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traitId")]
		public string TraitId { get; set; }
		
		/// <summary>
		/// If True, this category should be visible in UI. Sometimes we make categories that we don't think are interesting externally. It's up to you if you want to skip on showing them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="plugItemHash")]
		public System.Nullable<System.UInt32> PlugItemHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="socketTypeHash")]
		public System.Nullable<System.UInt32> SocketTypeHash { get; set; }
	}
	
	/// <summary>
	/// If an item can have an action performed on it (like "Dismantle"), it will be defined here if you care.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemCraftingBlockDefinition
	{
		
		/// <summary>
		/// A reference to the base material requirements for crafting with this recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseMaterialRequirements")]
		public System.Nullable<System.UInt32> BaseMaterialRequirements { get; set; }
		
		/// <summary>
		/// A list of 'bonus' socket plugs that may be available if certain requirements are met.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bonusPlugs")]
		public DestinyDefinitionsDestinyItemCraftingBlockBonusPlugDefinition[] BonusPlugs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failedRequirementStrings")]
		public string[] FailedRequirementStrings { get; set; }
		
		/// <summary>
		/// A reference to the item definition that is created when crafting with this 'recipe' item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputItemHash")]
		public System.Nullable<System.UInt32> OutputItemHash { get; set; }
		
		/// <summary>
		/// A list of socket type hashes that describes which sockets are required for crafting with this recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredSocketTypeHashes")]
		public int[] RequiredSocketTypeHashes { get; set; }
	}
	
	/// <summary>
	/// An overly complicated wrapper for the item level at which the item should spawn.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemCreationEntryLevelDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<System.Int32> Level { get; set; }
	}
	
	/// <summary>
	/// If an item has a related gearset, this is the list of items in that set, and an unlock expression that evaluates to a number representing the progress toward gearset completion (a very rare use for unlock expressions!)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemGearsetBlockDefinition
	{
		
		/// <summary>
		/// The list of hashes for items in the gearset. Use them to look up DestinyInventoryItemDefinition entries for the items in the set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemList")]
		public int[] ItemList { get; set; }
		
		/// <summary>
		/// The maximum possible number of items that can be collected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingValueMax")]
		public System.Nullable<System.Int32> TrackingValueMax { get; set; }
	}
	
	/// <summary>
	/// Represents a socket that has a plug associated with it intrinsically. This is useful for situations where the weapon needs to have a visual plug/Mod on it, but that plug/Mod should never change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition
	{
		
		/// <summary>
		/// If true, then this socket is visible in the item's "default" state. If you have an instance, you should always check the runtime state, as that can override this visibility setting: but if you're looking at the item on a conceptual level, this property can be useful for hiding data such as legacy sockets - which remain defined on items for infrastructure purposes, but can be confusing for users to see.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultVisible")]
		public System.Nullable<System.Boolean> DefaultVisible { get; set; }
		
		/// <summary>
		/// Indicates the plug that is intrinsically inserted into this socket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugItemHash")]
		public System.Nullable<System.UInt32> PlugItemHash { get; set; }
		
		/// <summary>
		/// Indicates the type of this intrinsic socket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socketTypeHash")]
		public System.Nullable<System.UInt32> SocketTypeHash { get; set; }
	}
	
	/// <summary>
	/// If the item can exist in an inventory - the overwhelming majority of them can and do - then this is the basic properties regarding the item's relationship with the inventory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemInventoryBlockDefinition
	{
		
		/// <summary>
		/// The hash identifier for the DestinyInventoryBucketDefinition to which this item belongs. I should have named this "bucketHash", but too many things refer to it now. Sigh.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketTypeHash")]
		public System.Nullable<System.UInt32> BucketTypeHash { get; set; }
		
		/// <summary>
		/// The tooltip message to show, if any, when the item expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTooltip")]
		public string ExpirationTooltip { get; set; }
		
		/// <summary>
		/// If the item expires while playing in an activity, we show a different message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiredInActivityMessage")]
		public string ExpiredInActivityMessage { get; set; }
		
		/// <summary>
		/// If the item expires in orbit, we show a... more different message. ("Consummate V's, consummate!")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiredInOrbitMessage")]
		public string ExpiredInOrbitMessage { get; set; }
		
		/// <summary>
		/// If TRUE, this item is instanced. Otherwise, it is a generic item that merely has a quantity in a stack (like Glimmer).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isInstanceItem")]
		public System.Nullable<System.Boolean> IsInstanceItem { get; set; }
		
		/// <summary>
		/// The maximum quantity of this item that can exist in a stack.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxStackSize")]
		public System.Nullable<System.Int32> MaxStackSize { get; set; }
		
		/// <summary>
		/// A reference to the associated crafting 'recipe' item definition, if this item can be crafted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipeItemHash")]
		public System.Nullable<System.UInt32> RecipeItemHash { get; set; }
		
		/// <summary>
		/// If the item is picked up by the lost loot queue, this is the hash identifier for the DestinyInventoryBucketDefinition into which it will be placed. Again, I should have named this recoveryBucketHash instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoveryBucketTypeHash")]
		public System.Nullable<System.UInt32> RecoveryBucketTypeHash { get; set; }
		
		/// <summary>
		/// If this string is populated, you can't have more than one stack with this label in a given inventory. Note that this is different from the equipping block's unique label, which is used for equipping uniqueness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackUniqueLabel")]
		public string StackUniqueLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suppressExpirationWhenObjectivesComplete")]
		public System.Nullable<System.Boolean> SuppressExpirationWhenObjectivesComplete { get; set; }
		
		/// <summary>
		/// The enumeration matching the tier type of the item to known values, again for convenience sake.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tierType")]
		public System.Nullable<System.Int32> TierType { get; set; }
		
		/// <summary>
		/// The hash identifier for the Tier Type of the item, use to look up its DestinyItemTierTypeDefinition if you need to show localized data for the item's tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tierTypeHash")]
		public System.Nullable<System.UInt32> TierTypeHash { get; set; }
		
		/// <summary>
		/// The localized name of the tier type, which is a useful shortcut so you don't have to look up the definition every time. However, it's mostly a holdover from days before we had a DestinyItemTierTypeDefinition to refer to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tierTypeName")]
		public string TierTypeName { get; set; }
	}
	
	/// <summary>
	/// The metrics available for display and selection on an item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemMetricBlockDefinition
	{
		
		/// <summary>
		/// Hash identifiers for any DestinyPresentationNodeDefinition entry that can be used to list available metrics. Any metric listed directly below these nodes, or in any of these nodes' children will be made available for selection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableMetricCategoryNodeHashes")]
		public int[] AvailableMetricCategoryNodeHashes { get; set; }
	}
	
	/// <summary>
	/// An item can have objectives on it. In practice, these are the exclusive purview of "Quest Step" items: DestinyInventoryItemDefinitions that represent a specific step in a Quest.
	///Quest steps have 1:M objectives that we end up processing and returning in live data as DestinyQuestStatus data, and other useful information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemObjectiveBlockDefinition
	{
		
		/// <summary>
		/// For every entry in objectiveHashes, there is a corresponding entry in this array at the same index. If the objective is meant to be associated with a specific DestinyActivityDefinition, there will be a valid hash at that index. Otherwise, it will be invalid (0).
		///Rendered somewhat obsolete by perObjectiveDisplayProperties, which currently has much the same information but may end up with more info in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayActivityHashes")]
		public int[] DisplayActivityHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayAsStatTracker")]
		public System.Nullable<System.Boolean> DisplayAsStatTracker { get; set; }
		
		/// <summary>
		/// The localized string for narrative text related to this quest step, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="narrative")]
		public string Narrative { get; set; }
		
		/// <summary>
		/// The hashes to Objectives (DestinyObjectiveDefinition) that are part of this Quest Step, in the order that they should be rendered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectiveHashes")]
		public int[] ObjectiveHashes { get; set; }
		
		/// <summary>
		/// The localized string describing an action to be performed associated with the objectives, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectiveVerbName")]
		public string ObjectiveVerbName { get; set; }
		
		/// <summary>
		/// One entry per Objective on the item, it will have related display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perObjectiveDisplayProperties")]
		public DestinyDefinitionsDestinyObjectiveDisplayProperties[] PerObjectiveDisplayProperties { get; set; }
		
		/// <summary>
		/// A hashed value for the questTypeIdentifier, because apparently I like to be redundant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questTypeHash")]
		public System.Nullable<System.UInt32> QuestTypeHash { get; set; }
		
		/// <summary>
		/// The identifier for the type of quest being performed, if any. Not associated with any fixed definition, yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questTypeIdentifier")]
		public string QuestTypeIdentifier { get; set; }
		
		/// <summary>
		/// The hash for the DestinyInventoryItemDefinition representing the Quest to which this Quest Step belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questlineItemHash")]
		public System.Nullable<System.UInt32> QuestlineItemHash { get; set; }
		
		/// <summary>
		/// If True, all objectives must be completed for the step to be completed. If False, any one objective can be completed for the step to be completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireFullObjectiveCompletion")]
		public System.Nullable<System.Boolean> RequireFullObjectiveCompletion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyObjectiveDisplayProperties
	{
		
		/// <summary>
		/// The activity associated with this objective in the context of this item, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// If true, the game shows this objective on item preview screens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayOnItemPreviewScreen")]
		public System.Nullable<System.Boolean> DisplayOnItemPreviewScreen { get; set; }
	}
	
	/// <summary>
	/// Items like Sacks or Boxes can have items that it shows in-game when you view details that represent the items you can obtain if you use or acquire the item.
	///This defines those categories, and gives some insights into that data's source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemPreviewBlockDefinition
	{
		
		/// <summary>
		/// If this item should show you Artifact information when you preview it, this is the hash identifier of the DestinyArtifactDefinition for the artifact whose data should be shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactHash")]
		public System.Nullable<System.UInt32> ArtifactHash { get; set; }
		
		/// <summary>
		/// This is a list of the items being previewed, categorized in the same way as they are in the preview UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="derivedItemCategories")]
		public DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition[] DerivedItemCategories { get; set; }
		
		/// <summary>
		/// If the preview has an associated action (like "Open"), this will be the localized string for that action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previewActionString")]
		public string PreviewActionString { get; set; }
		
		/// <summary>
		/// If the preview data is derived from a fake "Preview" Vendor, this will be the hash identifier for the DestinyVendorDefinition of that fake vendor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previewVendorHash")]
		public System.Nullable<System.UInt32> PreviewVendorHash { get; set; }
		
		/// <summary>
		/// A string that the game UI uses as a hint for which detail screen to show for the item. You, too, can leverage this for your own custom screen detail views. Note, however, that these are arbitrarily defined by designers: there's no guarantees of a fixed, known number of these - so fall back to something reasonable if you don't recognize it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenStyle")]
		public string ScreenStyle { get; set; }
	}
	
	/// <summary>
	/// A shortcut for the fact that some items have a "Preview Vendor" - See DestinyInventoryItemDefinition.preview.previewVendorHash - that is intended to be used to show what items you can get as a result of acquiring or using this item.
	///A common example of this in Destiny 1 was Eververse "Boxes," which could have many possible items. This "Preview Vendor" is not a vendor you can actually see in the game, but it defines categories and sale items for all of the possible items you could get from the Box so that the game can show them to you. We summarize that info here so that you don't have to do that Vendor lookup and aggregation manually.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsItemsDestinyDerivedItemCategoryDefinition
	{
		
		/// <summary>
		/// The localized string for the category title. This will be something describing the items you can get as a group, or your likelihood/the quantity you'll get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryDescription")]
		public string CategoryDescription { get; set; }
		
		/// <summary>
		/// This is the list of all of the items for this category and the basic properties we'll know about them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DestinyDefinitionsItemsDestinyDerivedItemDefinition[] Items { get; set; }
	}
	
	/// <summary>
	/// This is a reference to, and summary data for, a specific item that you can get as a result of Using or Acquiring some other Item (For example, this could be summary information for an Emote that you can get by opening an an Eververse Box) See DestinyDerivedItemCategoryDefinition for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsItemsDestinyDerivedItemDefinition
	{
		
		/// <summary>
		/// An icon for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconPath")]
		public string IconPath { get; set; }
		
		/// <summary>
		/// A brief description of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemDescription")]
		public string ItemDescription { get; set; }
		
		/// <summary>
		/// Additional details about the derived item, in addition to the description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemDetail")]
		public string ItemDetail { get; set; }
		
		/// <summary>
		/// The hash for the DestinyInventoryItemDefinition of this derived item, if there is one. Sometimes we are given this information as a manual override, in which case there won't be an actual DestinyInventoryItemDefinition for what we display, but you can still show the strings from this object itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// The name of the derived item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemName")]
		public string ItemName { get; set; }
		
		/// <summary>
		/// If the item was derived from a "Preview Vendor", this will be an index into the DestinyVendorDefinition's itemList property. Otherwise, -1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorItemIndex")]
		public System.Nullable<System.Int32> VendorItemIndex { get; set; }
	}
	
	/// <summary>
	/// An item's "Quality" determines its calculated stats. The Level at which the item spawns is combined with its "qualityLevel" along with some additional calculations to determine the value of those stats.
	///In Destiny 2, most items don't have default item levels and quality, making this property less useful: these apparently are almost always determined by the complex mechanisms of the Reward system rather than statically. They are still provided here in case they are still useful for people. This also contains some information about Infusion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemQualityBlockDefinition
	{
		
		/// <summary>
		/// The latest version available for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentVersion")]
		public System.Nullable<System.UInt32> CurrentVersion { get; set; }
		
		/// <summary>
		/// Icon overlays to denote the item version and power cap status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayVersionWatermarkIcons")]
		public string[] DisplayVersionWatermarkIcons { get; set; }
		
		/// <summary>
		/// The hash identifier for the infusion. It does not map to a Definition entity.
		///DEPRECATED: Items can now have multiple infusion categories. Please use infusionCategoryHashes instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="infusionCategoryHash")]
		public System.Nullable<System.UInt32> InfusionCategoryHash { get; set; }
		
		/// <summary>
		/// If any one of these hashes matches any value in another item's infusionCategoryHashes, the two can infuse with each other.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="infusionCategoryHashes")]
		public int[] InfusionCategoryHashes { get; set; }
		
		/// <summary>
		/// The string identifier for this item's "infusability", if any. 
		///Items that match the same infusionCategoryName are allowed to infuse with each other.
		///DEPRECATED: Items can now have multiple infusion categories. Please use infusionCategoryHashes instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="infusionCategoryName")]
		public string InfusionCategoryName { get; set; }
		
		/// <summary>
		/// The "base" defined level of an item. This is a list because, in theory, each Expansion could define its own base level for an item.
		///In practice, not only was that never done in Destiny 1, but now this isn't even populated at all. When it's not populated, the level at which it spawns has to be inferred by Reward information, of which BNet receives an imperfect view and will only be reliable on instanced data as a result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemLevels")]
		public int[] ItemLevels { get; set; }
		
		/// <summary>
		/// An item can refer to pre-set level requirements. They are defined in DestinyProgressionLevelRequirementDefinition, and you can use this hash to find the appropriate definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressionLevelRequirementHash")]
		public System.Nullable<System.UInt32> ProgressionLevelRequirementHash { get; set; }
		
		/// <summary>
		/// qualityLevel is used in combination with the item's level to calculate stats like Attack and Defense. It plays a role in that calculation, but not nearly as large as itemLevel does.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="qualityLevel")]
		public System.Nullable<System.Int32> QualityLevel { get; set; }
		
		/// <summary>
		/// The list of versions available for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public DestinyDefinitionsDestinyItemVersionDefinition[] Versions { get; set; }
	}
	
	/// <summary>
	/// The version definition currently just holds a reference to the power cap.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemVersionDefinition
	{
		
		/// <summary>
		/// A reference to the power cap for this item version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="powerCapHash")]
		public System.Nullable<System.UInt32> PowerCapHash { get; set; }
	}
	
	/// <summary>
	/// Some items are "sacks" - they can be "opened" to produce other items. This is information related to its sack status, mostly UI strings. Engrams are an example of items that are considered to be "Sacks".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemSackBlockDefinition
	{
		
		/// <summary>
		/// A description of what will happen when you open the sack. As far as I can tell, this is blank currently. Unknown whether it will eventually be populated with useful info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailAction")]
		public string DetailAction { get; set; }
		
		/// <summary>
		/// The localized name of the action being performed when you open the sack.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openAction")]
		public string OpenAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openOnAcquire")]
		public System.Nullable<System.Boolean> OpenOnAcquire { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selectItemCount")]
		public System.Nullable<System.Int32> SelectItemCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendorSackType")]
		public string VendorSackType { get; set; }
	}
	
	/// <summary>
	/// Primarily for Quests, this is the definition of properties related to the item if it is a quest and its various quest steps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemSetBlockDefinition
	{
		
		/// <summary>
		/// A collection of hashes of set items, for items such as Quest Metadata items that possess this data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemList")]
		public DestinyDefinitionsDestinyItemSetBlockEntryDefinition[] ItemList { get; set; }
		
		/// <summary>
		/// The description of the quest line that this quest step is a part of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questLineDescription")]
		public string QuestLineDescription { get; set; }
		
		/// <summary>
		/// The name of the quest line that this quest step is a part of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questLineName")]
		public string QuestLineName { get; set; }
		
		/// <summary>
		/// An additional summary of this step in the quest line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questStepSummary")]
		public string QuestStepSummary { get; set; }
		
		/// <summary>
		/// If true, items in the set can only be added in increasing order, and adding an item will remove any previous item. For Quests, this is by necessity true. Only one quest step is present at a time, and previous steps are removed as you advance in the quest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireOrderedSetItemAdd")]
		public System.Nullable<System.Boolean> RequireOrderedSetItemAdd { get; set; }
		
		/// <summary>
		/// If true, the UI should treat this quest as "featured"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setIsFeatured")]
		public System.Nullable<System.Boolean> SetIsFeatured { get; set; }
		
		/// <summary>
		/// A string identifier we can use to attempt to identify the category of the Quest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setType")]
		public string SetType { get; set; }
	}
	
	/// <summary>
	/// Defines a particular entry in an ItemSet (AKA a particular Quest Step in a Quest)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemSetBlockEntryDefinition
	{
		
		/// <summary>
		/// This is the hash identifier for a DestinyInventoryItemDefinition representing this quest step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// Used for tracking which step a user reached. These values will be populated in the user's internal state, which we expose externally as a more usable DestinyQuestStatus object. If this item has been obtained, this value will be set in trackingUnlockValueHash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackingValue")]
		public System.Nullable<System.Int32> TrackingValue { get; set; }
	}
	
	/// <summary>
	/// If defined, the item has at least one socket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemSocketBlockDefinition
	{
		
		/// <summary>
		/// This was supposed to be a string that would give per-item details about sockets. In practice, it turns out that all this ever has is the localized word "details". ... that's lame, but perhaps it will become something cool in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Each intrinsic (or immutable/permanent) socket on an item is defined here, along with the plug that is permanently affixed to the socket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intrinsicSockets")]
		public DestinyDefinitionsDestinyItemIntrinsicSocketEntryDefinition[] IntrinsicSockets { get; set; }
		
		/// <summary>
		/// A convenience property, that refers to the sockets in the "sockets" property, pre-grouped by category and ordered in the manner that they should be grouped in the UI. You could form this yourself with the existing data, but why would you want to? Enjoy life man.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socketCategories")]
		public DestinyDefinitionsDestinyItemSocketCategoryDefinition[] SocketCategories { get; set; }
		
		/// <summary>
		/// Each non-intrinsic (or mutable) socket on an item is defined here. Check inside for more info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socketEntries")]
		public DestinyDefinitionsDestinyItemSocketEntryDefinition[] SocketEntries { get; set; }
	}
	
	/// <summary>
	/// Sockets are grouped into categories in the UI. These define which category and which sockets are under that category.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemSocketCategoryDefinition
	{
		
		/// <summary>
		/// The hash for the Socket Category: a quick way to go get the header display information for the category. Use it to look up DestinySocketCategoryDefinition info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socketCategoryHash")]
		public System.Nullable<System.UInt32> SocketCategoryHash { get; set; }
		
		/// <summary>
		/// Use these indexes to look up the sockets in the "sockets.socketEntries" property on the item definition. These are the indexes under the category, in game-rendered order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socketIndexes")]
		public int[] SocketIndexes { get; set; }
	}
	
	/// <summary>
	/// The definition information for a specific socket on an item. This will determine how the socket behaves in-game.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemSocketEntryDefinition
	{
		
		/// <summary>
		/// If true, then this socket is visible in the item's "default" state. If you have an instance, you should always check the runtime state, as that can override this visibility setting: but if you're looking at the item on a conceptual level, this property can be useful for hiding data such as legacy sockets - which remain defined on items for infrastructure purposes, but can be confusing for users to see.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultVisible")]
		public System.Nullable<System.Boolean> DefaultVisible { get; set; }
		
		/// <summary>
		/// If this is true, the perks provided by this socket shouldn't be shown in the item's tooltip. This might be useful if it's providing a hidden bonus, or if the bonus is less important than other benefits on the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hidePerksInItemTooltip")]
		public System.Nullable<System.Boolean> HidePerksInItemTooltip { get; set; }
		
		/// <summary>
		/// Indicates where you should go to get plugs for this socket. This will affect how you populate your UI, as well as what plugs are valid for this socket. It's an alternative to having to check for the existence of certain properties (reusablePlugItems for example) to infer where plugs should come from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugSources")]
		public System.Nullable<System.Int32> PlugSources { get; set; }
		
		/// <summary>
		/// If this is true, then the socket will not be initialized with a plug if the item is purchased from a Vendor.
		///Remember that Vendors are much more than conceptual vendors: they include "Collection Kiosks" and other entities. See DestinyVendorDefinition for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preventInitializationOnVendorPurchase")]
		public System.Nullable<System.Boolean> PreventInitializationOnVendorPurchase { get; set; }
		
		/// <summary>
		/// This field replaces "randomizedPlugItems" as of Shadowkeep launch. If a socket has randomized plugs, this is a pointer to the set of plugs that could be used, as defined in DestinyPlugSetDefinition.
		/// If null, the item has no randomized plugs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="randomizedPlugSetHash")]
		public System.Nullable<System.UInt32> RandomizedPlugSetHash { get; set; }
		
		/// <summary>
		/// This is a list of pre-determined plugs that can *always* be plugged into this socket, without the character having the plug in their inventory.
		///If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reusablePlugItems")]
		public DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition[] ReusablePlugItems { get; set; }
		
		/// <summary>
		/// If this socket's plugs come from a reusable DestinyPlugSetDefinition, this is the identifier for that set. We added this concept to reduce some major duplication that's going to come from sockets as replacements for what was once implemented as large sets of items and kiosks (like Emotes).
		/// As of Shadowkeep, these will come up much more frequently and be driven by game content rather than custom curation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reusablePlugSetHash")]
		public System.Nullable<System.UInt32> ReusablePlugSetHash { get; set; }
		
		/// <summary>
		/// If a valid hash, this is the hash identifier for the DestinyInventoryItemDefinition representing the Plug that will be initially inserted into the item on item creation. Otherwise, this Socket will either start without a plug inserted, or will have one randomly inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleInitialItemHash")]
		public System.Nullable<System.UInt32> SingleInitialItemHash { get; set; }
		
		/// <summary>
		/// All sockets have a type, and this is the hash identifier for this particular type. Use it to look up the DestinySocketTypeDefinition: read there for more information on how socket types affect the behavior of the socket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socketTypeHash")]
		public System.Nullable<System.UInt32> SocketTypeHash { get; set; }
	}
	
	/// <summary>
	/// The definition of a known, reusable plug that can be applied to a socket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemSocketEntryPlugItemDefinition
	{
		
		/// <summary>
		/// The hash identifier of a DestinyInventoryItemDefinition representing the plug that can be inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugItemHash")]
		public System.Nullable<System.UInt32> PlugItemHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="craftingRequirements")]
		public DestinyDefinitionsDestinyPlugItemCraftingRequirements CraftingRequirements { get; set; }
		
		/// <summary>
		/// Indicates if the plug can be rolled on the current version of the item. For example, older versions of weapons may have plug rolls that are no longer possible on the current versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentlyCanRoll")]
		public System.Nullable<System.Boolean> CurrentlyCanRoll { get; set; }
		
		/// <summary>
		/// The hash identifier of a DestinyInventoryItemDefinition representing the plug that can be inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugItemHash")]
		public System.Nullable<System.UInt32> PlugItemHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyPlugItemCraftingRequirements
	{
		
		[System.Runtime.Serialization.DataMember(Name="materialRequirementHashes")]
		public int[] MaterialRequirementHashes { get; set; }
		
		/// <summary>
		/// If the plug has a known level requirement, it'll be available here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredLevel")]
		public System.Nullable<System.Int32> RequiredLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unlockRequirements")]
		public DestinyDefinitionsDestinyPlugItemCraftingUnlockRequirement[] UnlockRequirements { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyPlugItemCraftingUnlockRequirement
	{
		
		[System.Runtime.Serialization.DataMember(Name="failureDescription")]
		public string FailureDescription { get; set; }
	}
	
	/// <summary>
	/// Data about an item's "sources": ways that the item can be obtained.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemSourceBlockDefinition
	{
		
		/// <summary>
		/// If we found that this item is exclusive to a specific platform, this will be set to the BungieMembershipType enumeration that matches that platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclusive")]
		public System.Nullable<System.Int32> Exclusive { get; set; }
		
		/// <summary>
		/// The list of hash identifiers for Reward Sources that hint where the item can be found (DestinyRewardSourceDefinition).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceHashes")]
		public int[] SourceHashes { get; set; }
		
		/// <summary>
		/// A collection of details about the stats that were computed for the ways we found that the item could be spawned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public DestinyDefinitionsSourcesDestinyItemSourceDefinition[] Sources { get; set; }
		
		/// <summary>
		/// A denormalized reference back to vendors that potentially sell this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorSources")]
		public DestinyDefinitionsDestinyItemVendorSourceReference[] VendorSources { get; set; }
	}
	
	/// <summary>
	/// Properties of a DestinyInventoryItemDefinition that store all of the information we were able to discern about how the item spawns, and where you can find the item.
	///Items will have many of these sources, one per level at which it spawns, to try and give more granular data about where items spawn for specific level ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSourcesDestinyItemSourceDefinition
	{
		
		/// <summary>
		/// The stats computed for this level/quality range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="computedStats")]
		public System.Collections.Generic.Dictionary<string, DestinyDefinitionsDestinyInventoryItemStatDefinition> ComputedStats { get; set; }
		
		/// <summary>
		/// The level at which the item spawns. Essentially the Primary Key for this source data: there will be multiple of these source entries per item that has source data, grouped by the level at which the item spawns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<System.Int32> Level { get; set; }
		
		/// <summary>
		/// The maximum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxLevelRequired")]
		public System.Nullable<System.Int32> MaxLevelRequired { get; set; }
		
		/// <summary>
		/// The maximum quality at which the item spawns for this level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxQuality")]
		public System.Nullable<System.Int32> MaxQuality { get; set; }
		
		/// <summary>
		/// The minimum Character Level required for equipping the item when the item spawns at the item level defined on this DestinyItemSourceDefinition, as far as we saw in our processing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minLevelRequired")]
		public System.Nullable<System.Int32> MinLevelRequired { get; set; }
		
		/// <summary>
		/// The minimum Quality at which the item spawns for this level. Examine DestinyInventoryItemDefinition for more information about what Quality means. Just don't ask Phaedrus about it, he'll never stop talking and you'll have to write a book about it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minQuality")]
		public System.Nullable<System.Int32> MinQuality { get; set; }
		
		/// <summary>
		/// The DestinyRewardSourceDefinitions found that can spawn the item at this level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceHashes")]
		public int[] SourceHashes { get; set; }
	}
	
	/// <summary>
	/// Represents that a vendor could sell this item, and provides a quick link to that vendor and sale item.
	/// Note that we do not and cannot make a guarantee that the vendor will ever *actually* sell this item, only that the Vendor has a definition that indicates it *could* be sold.
	/// Note also that a vendor may sell the same item in multiple "ways", which means there may be multiple vendorItemIndexes for a single Vendor hash.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemVendorSourceReference
	{
		
		/// <summary>
		/// The identifier for the vendor that may sell this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHash")]
		public System.Nullable<System.UInt32> VendorHash { get; set; }
		
		/// <summary>
		/// The Vendor sale item indexes that represent the sale information for this item. The same vendor may sell an item in multiple "ways", hence why this is a list. (for instance, a weapon may be "sold" as a reward in a quest, for Glimmer, and for Masterwork Cores: each of those ways would be represented by a different vendor sale item with a different index)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorItemIndexes")]
		public int[] VendorItemIndexes { get; set; }
	}
	
	/// <summary>
	/// Information about the item's calculated stats, with as much data as we can find for the stats without having an actual instance of the item.
	///Note that this means the entire concept of providing these stats is fundamentally insufficient: we cannot predict with 100% accuracy the conditions under which an item can spawn, so we use various heuristics to attempt to simulate the conditions as accurately as possible. Actual stats for items in-game can and will vary, but these should at least be useful base points for comparison and display.
	///It is also worth noting that some stats, like Magazine size, have further calculations performed on them by scripts in-game and on the game servers that BNet does not have access to. We cannot know how those stats are further transformed, and thus some stats will be inaccurate even on instances of items in BNet vs. how they appear in-game. This is a known limitation of our item statistics, without any planned fix.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemStatBlockDefinition
	{
		
		/// <summary>
		/// If true, the game won't show the "primary" stat on this item when you inspect it.
		///NOTE: This is being manually mapped, because I happen to want it in a block that isn't going to directly create this derivative block.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disablePrimaryStatDisplay")]
		public System.Nullable<System.Boolean> DisablePrimaryStatDisplay { get; set; }
		
		/// <summary>
		/// A quick and lazy way to determine whether any stat other than the "primary" stat is actually visible on the item. Items often have stats that we return in case people find them useful, but they're not part of the "Stat Group" and thus we wouldn't display them in our UI. If this is False, then we're not going to display any of these stats other than the primary one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasDisplayableStats")]
		public System.Nullable<System.Boolean> HasDisplayableStats { get; set; }
		
		/// <summary>
		/// This stat is determined to be the "primary" stat, and can be looked up in the stats or any other stat collection related to the item.
		///Use this hash to look up the stat's value using DestinyInventoryItemDefinition.stats.stats, and the renderable data for the primary stat in the related DestinyStatDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryBaseStatHash")]
		public System.Nullable<System.UInt32> PrimaryBaseStatHash { get; set; }
		
		/// <summary>
		/// If the item's stats are meant to be modified by a DestinyStatGroupDefinition, this will be the identifier for that definition.
		///If you are using live data or precomputed stats data on the DestinyInventoryItemDefinition.stats.stats property, you don't have to worry about statGroupHash and how it alters stats: the already altered stats are provided to you. But if you want to see how the sausage gets made, or perform computations yourself, this is valuable information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statGroupHash")]
		public System.Nullable<System.UInt32> StatGroupHash { get; set; }
		
		/// <summary>
		/// If you are looking for precomputed values for the stats on a weapon, this is where they are stored. Technically these are the "Display" stat values. Please see DestinyStatsDefinition for what Display Stat Values means, it's a very long story... but essentially these are the closest values BNet can get to the item stats that you see in-game.
		///These stats are keyed by the DestinyStatDefinition's hash identifier for the stat that's found on the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public System.Collections.Generic.Dictionary<string, DestinyDefinitionsDestinyInventoryItemStatDefinition> Stats { get; set; }
	}
	
	/// <summary>
	/// This appears to be information used when rendering rewards. We don't currently use it on BNet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemSummaryBlockDefinition
	{
		
		/// <summary>
		/// Apparently when rendering an item in a reward, this should be used as a sort priority. We're not doing it presently.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortPriority")]
		public System.Nullable<System.Int32> SortPriority { get; set; }
	}
	
	/// <summary>
	/// This defines information that can only come from a talent grid on an item. Items mostly have negligible talent grid data these days, but instanced items still retain grids as a source for some of this common information.
	///Builds/Subclasses are the only items left that still have talent grids with meaningful Nodes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemTalentGridBlockDefinition
	{
		
		/// <summary>
		/// A shortcut string identifier for the "build" in question, if this talent grid has an associated build. Doesn't map to anything we can expose at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildName")]
		public string BuildName { get; set; }
		
		/// <summary>
		/// If the talent grid implies a damage type, this is the enum value for that damage type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hudDamageType")]
		public System.Nullable<System.Int32> HudDamageType { get; set; }
		
		/// <summary>
		/// If the talent grid has a special icon that's shown in the game UI (like builds, funny that), this is the identifier for that icon. Sadly, we don't actually get that icon right now. I'll be looking to replace this with a path to the actual icon itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hudIcon")]
		public string HudIcon { get; set; }
		
		/// <summary>
		/// This is meant to be a subtitle for looking at the talent grid. In practice, somewhat frustratingly, this always merely says the localized word for "Details". Great. Maybe it'll have more if talent grids ever get used for more than builds and subclasses again.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemDetailString")]
		public string ItemDetailString { get; set; }
		
		/// <summary>
		/// The hash identifier of the DestinyTalentGridDefinition attached to this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="talentGridHash")]
		public System.Nullable<System.UInt32> TalentGridHash { get; set; }
	}
	
	/// <summary>
	/// This Block defines the rendering data associated with the item, if any.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemTranslationBlockDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="arrangements")]
		public DestinyDefinitionsDestinyGearArtArrangementReference[] Arrangements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customDyes")]
		public DestinyDyeReference[] CustomDyes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultDyes")]
		public DestinyDyeReference[] DefaultDyes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasGeometry")]
		public System.Nullable<System.Boolean> HasGeometry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lockedDyes")]
		public DestinyDyeReference[] LockedDyes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weaponPatternHash")]
		public System.Nullable<System.UInt32> WeaponPatternHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weaponPatternIdentifier")]
		public string WeaponPatternIdentifier { get; set; }
	}
	
	/// <summary>
	/// This defines an item's "Value". Unfortunately, this appears to be used in different ways depending on the way that the item itself is used.
	///For items being sold at a Vendor, this is the default "sale price" of the item. These days, the vendor itself almost always sets the price, but it still possible for the price to fall back to this value. For quests, it is a preview of rewards you can gain by completing the quest. For dummy items, if the itemValue refers to an Emblem, it is the emblem that should be shown as the reward. (jeez louise)
	///It will likely be used in a number of other ways in the future, it appears to be a bucket where they put arbitrary items and quantities into the item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyItemValueBlockDefinition
	{
		
		/// <summary>
		/// References to the items that make up this item's "value", and the quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemValue")]
		public DestinyDestinyItemQuantity[] ItemValue { get; set; }
		
		/// <summary>
		/// If there's a localized text description of the value provided, this will be said description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueDescription")]
		public string ValueDescription { get; set; }
	}
	
	/// <summary>
	/// A "Location" is a sort of shortcut for referring to a specific combination of Activity, Destination, Place, and even Bubble or NavPoint within a space.
	///Most of this data isn't intrinsically useful to us, but Objectives refer to locations, and through that we can at least infer the Activity, Destination, and Place being referred to by the Objective.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyLocationDefinition
	{
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// A Location may refer to different specific spots in the world based on the world's current state. This is a list of those potential spots, and the data we can use at runtime to determine which one of the spots is the currently valid one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationReleases")]
		public DestinyDefinitionsDestinyLocationReleaseDefinition[] LocationReleases { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// If the location has a Vendor on it, this is the hash identifier for that Vendor. Look them up with DestinyVendorDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHash")]
		public System.Nullable<System.UInt32> VendorHash { get; set; }
	}
	
	/// <summary>
	/// A specific "spot" referred to by a location. Only one of these can be active at a time for a given Location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyLocationReleaseDefinition
	{
		
		/// <summary>
		/// The Activity Bubble within the Destination. Look this up in the DestinyDestinationDefinition's bubbles and bubbleSettings properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityBubbleName")]
		public System.Nullable<System.UInt32> ActivityBubbleName { get; set; }
		
		/// <summary>
		/// The Activity Graph being pointed to by this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityGraphHash")]
		public System.Nullable<System.UInt32> ActivityGraphHash { get; set; }
		
		/// <summary>
		/// The Activity Graph Node being pointed to by this location. (Remember that Activity Graph Node hashes are only unique within an Activity Graph: so use the combination to find the node being spoken of)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityGraphNodeHash")]
		public System.Nullable<System.UInt32> ActivityGraphNodeHash { get; set; }
		
		/// <summary>
		/// The Activity being pointed to by this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// If we had map information, this would tell us something cool about the path this location wants you to take. I wish we had map information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityPathBundle")]
		public System.Nullable<System.UInt32> ActivityPathBundle { get; set; }
		
		/// <summary>
		/// If we had map information, this would tell us about path information related to destination on the map. Sad. Maybe you can do something cool with it. Go to town man.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityPathDestination")]
		public System.Nullable<System.UInt32> ActivityPathDestination { get; set; }
		
		/// <summary>
		/// The Destination being pointed to by this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationHash")]
		public System.Nullable<System.UInt32> DestinationHash { get; set; }
		
		/// <summary>
		/// Sadly, these don't appear to be populated anymore (ever?)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="largeTransparentIcon")]
		public string LargeTransparentIcon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapIcon")]
		public string MapIcon { get; set; }
		
		/// <summary>
		/// The type of Nav Point that this represents. See the enumeration for more info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="navPointType")]
		public System.Nullable<System.Int32> NavPointType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smallTransparentIcon")]
		public string SmallTransparentIcon { get; set; }
		
		/// <summary>
		/// If we had map information, this spawnPoint would be interesting. But sadly, we don't have that info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spawnPoint")]
		public System.Nullable<System.UInt32> SpawnPoint { get; set; }
		
		/// <summary>
		/// Looks like it should be the position on the map, but sadly it does not look populated... yet?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="worldPosition")]
		public int[] WorldPosition { get; set; }
	}
	
	/// <summary>
	/// Many actions relating to items require you to expend materials: - Activating a talent node - Inserting a plug into a socket The items will refer to material requirements by a materialRequirementsHash in these cases, and this is the definition for those requirements in terms of the item required, how much of it is required and other interesting info. This is one of the rare/strange times where a single contract class is used both in definitions *and* in live data response contracts. I'm not sure yet whether I regret that.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyMaterialRequirement
	{
		
		/// <summary>
		/// The amount of the material required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// If true, the material requirement count value is constant. Since The Witch Queen expansion, some material requirement counts can be dynamic and will need to be returned with an API call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countIsConstant")]
		public System.Nullable<System.Boolean> CountIsConstant { get; set; }
		
		/// <summary>
		/// If True, the material will be removed from the character's inventory when the action is performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteOnAction")]
		public System.Nullable<System.Boolean> DeleteOnAction { get; set; }
		
		/// <summary>
		/// The hash identifier of the material required. Use it to look up the material's DestinyInventoryItemDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// If True, this requirement is "silent": don't bother showing it in a material requirements display. I mean, I'm not your mom: I'm not going to tell you you *can't* show it. But we won't show it in our UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="omitFromRequirements")]
		public System.Nullable<System.Boolean> OmitFromRequirements { get; set; }
	}
	
	/// <summary>
	/// Represent a set of material requirements: Items that either need to be owned or need to be consumed in order to perform an action.
	///A variety of other entities refer to these as gatekeepers and payments for actions that can be performed in game.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyMaterialRequirementSetDefinition
	{
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The list of all materials that are required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public DestinyDefinitionsDestinyMaterialRequirement[] Materials { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// An artificial construct of our own creation, to try and put some order on top of Medals and keep them from being one giant, unmanageable and unsorted blob of stats.
	///Unfortunately, we haven't had time to do this evaluation yet in Destiny 2, so we're short on Medal Tiers. This will hopefully be updated over time, if Medals continue to exist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyMedalTierDefinition
	{
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If you're rendering medals by tier, render them in this order (ascending)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// The name of the tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tierName")]
		public string TierName { get; set; }
	}
	
	/// <summary>
	/// Talent nodes have requirements that must be met before they can be activated.
	///This describes the material costs, the Level of the Talent Grid's progression required, and other conditional information that limits whether a talent node can be activated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyNodeActivationRequirement
	{
		
		/// <summary>
		/// The Progression level on the Talent Grid required to activate this node.
		///See DestinyTalentGridDefinition.progressionHash for the related Progression, and read DestinyProgressionDefinition's documentation to learn more about Progressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gridLevel")]
		public System.Nullable<System.Int32> GridLevel { get; set; }
		
		/// <summary>
		/// The list of hash identifiers for material requirement sets: materials that are required for the node to be activated. See DestinyMaterialRequirementSetDefinition for more information about material requirements.
		///In this case, only a single DestinyMaterialRequirementSetDefinition will be chosen from this list, and we won't know which one will be chosen until an instance of the item is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materialRequirementHashes")]
		public int[] MaterialRequirementHashes { get; set; }
	}
	
	/// <summary>
	/// This is a bit of an odd duck. Apparently, if talent nodes steps have this data, the game will go through on step activation and alter the first Socket it finds on the item that has a type matching the given socket type, inserting the indicated plug item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyNodeSocketReplaceResponse
	{
		
		/// <summary>
		/// The hash identifier of the plug item that will be inserted into the socket found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugItemHash")]
		public System.Nullable<System.UInt32> PlugItemHash { get; set; }
		
		/// <summary>
		/// The hash identifier of the socket type to find amidst the item's sockets (the item to which this talent grid is attached). See DestinyInventoryItemDefinition.sockets.socketEntries to find the socket type of sockets on the item in question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socketTypeHash")]
		public System.Nullable<System.UInt32> SocketTypeHash { get; set; }
	}
	
	/// <summary>
	/// This defines the properties of a "Talent Node Step". When you see a talent node in game, the actual visible properties that you see (its icon, description, the perks and stats it provides) are not provided by the Node itself, but rather by the currently active Step on the node.
	///When a Talent Node is activated, the currently active step's benefits are conferred upon the item and character.
	///The currently active step on talent nodes are determined when an item is first instantiated. Sometimes it is random, sometimes it is more deterministic (particularly when a node has only a single step).
	///Note that, when dealing with Talent Node Steps, you must ensure that you have the latest version of content. stepIndex and nodeStepHash - two ways of identifying the step within a node - are both content version dependent, and thus are subject to change between content updates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyNodeStepDefinition
	{
		
		/// <summary>
		/// If the step has requirements for activation (they almost always do, if nothing else than for the Talent Grid's Progression to have reached a certain level), they will be defined here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationRequirement")]
		public string ActivationRequirement { get; set; }
		
		/// <summary>
		/// If true, this step can affect the level of the item. See DestinyInventoryItemDefintion for more information about item levels and their effect on stats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectsLevel")]
		public System.Nullable<System.Boolean> AffectsLevel { get; set; }
		
		/// <summary>
		/// If this is true, the step affects the item's Quality in some way. See DestinyInventoryItemDefinition for more information about the meaning of Quality. I already made a joke about Zen and the Art of Motorcycle Maintenance elsewhere in the documentation, so I will avoid doing it again. Oops too late
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectsQuality")]
		public System.Nullable<System.Boolean> AffectsQuality { get; set; }
		
		/// <summary>
		/// There was a time when talent nodes could be activated multiple times, and the effects of subsequent Steps would be compounded on each other, essentially "upgrading" the node. We have moved away from this, but theoretically the capability still exists.
		///I continue to return this in case it is used in the future: if true and this step is the current step in the node, you are allowed to activate the node a second time to receive the benefits of the next step in the node, which will then become the active step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canActivateNextStep")]
		public System.Nullable<System.Boolean> CanActivateNextStep { get; set; }
		
		/// <summary>
		/// An enum representing a damage type granted by activating this step, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="damageType")]
		public System.Nullable<System.Int32> DamageType { get; set; }
		
		/// <summary>
		/// If the step provides a damage type, this will be the hash identifier used to look up the damage type's DestinyDamageTypeDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="damageTypeHash")]
		public System.Nullable<System.UInt32> DamageTypeHash { get; set; }
		
		/// <summary>
		/// These are the display properties actually used to render the Talent Node. The currently active step's displayProperties are shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// If you can interact with this node in some way, this is the localized description of that interaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interactionDescription")]
		public string InteractionDescription { get; set; }
		
		/// <summary>
		/// If true, the next step to be chosen is random, and if you're allowed to activate the next step. (if canActivateNextStep = true)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isNextStepRandom")]
		public System.Nullable<System.Boolean> IsNextStepRandom { get; set; }
		
		/// <summary>
		/// The stepIndex of the next step in the talent node, or -1 if this is the last step or if the next step to be chosen is random.
		///This doesn't really matter anymore unless canActivateNextStep begins to be used again.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextStepIndex")]
		public System.Nullable<System.Int32> NextStepIndex { get; set; }
		
		/// <summary>
		/// The hash of this node step. Unfortunately, while it can be used to uniquely identify the step within a node, it is also content version dependent and should not be relied on without ensuring you have the latest vesion of content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeStepHash")]
		public System.Nullable<System.UInt32> NodeStepHash { get; set; }
		
		/// <summary>
		/// The list of hash identifiers for Perks (DestinySandboxPerkDefinition) that are applied when this step is active. Perks provide a variety of benefits and modifications - examine DestinySandboxPerkDefinition to learn more.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perkHashes")]
		public int[] PerkHashes { get; set; }
		
		/// <summary>
		/// If this step is activated, this will be a list of information used to replace socket items with new Plugs. See DestinyInventoryItemDefinition for more information about sockets and plugs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socketReplacements")]
		public DestinyDefinitionsDestinyNodeSocketReplaceResponse[] SocketReplacements { get; set; }
		
		/// <summary>
		/// When the Talent Grid's progression reaches this value, the circular "progress bar" that surrounds the talent node should be shown.
		///This also indicates the lower bound of said progress bar, with the upper bound being the progress required to reach activationRequirement.gridLevel. (at some point I should precalculate the upper bound and put it in the definition to save people time)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startProgressionBarAtProgress")]
		public System.Nullable<System.Int32> StartProgressionBarAtProgress { get; set; }
		
		/// <summary>
		/// When the step provides stat benefits on the item or character, this is the list of hash identifiers for stats (DestinyStatDefinition) that are provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statHashes")]
		public int[] StatHashes { get; set; }
		
		/// <summary>
		/// In Destiny 1, the Armory's Perk Filtering was driven by a concept of TalentNodeStepGroups: categorizations of talent nodes based on their functionality. While the Armory isn't a BNet-facing thing for now, and the new Armory will need to account for Sockets rather than Talent Nodes, this categorization capability feels useful enough to still keep around.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepGroups")]
		public string StepGroups { get; set; }
		
		/// <summary>
		/// The index of this step in the list of Steps on the Talent Node.
		///Unfortunately, this is the closest thing we have to an identifier for the Step: steps are not provided a content version agnostic identifier. This means that, when you are dealing with talent nodes, you will need to first ensure that you have the latest version of content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepIndex")]
		public System.Nullable<System.Int32> StepIndex { get; set; }
	}
	
	/// <summary>
	/// Defines an "Objective".
	///An objective is a specific task you should accomplish in the game. These are referred to by:
	///- Quest Steps (which are DestinyInventoryItemDefinition entities with Objectives)
	///- Challenges (which are Objectives defined on an DestinyActivityDefintion)
	///- Milestones (which refer to Objectives that are defined on both Quest Steps and Activities)
	///- Anything else that the designers decide to do later.
	///Objectives have progress, a notion of having been Completed, human readable data describing the task to be accomplished, and a lot of optional tack-on data that can enhance the information provided about the task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyObjectiveDefinition
	{
		
		/// <summary>
		/// If true, the value is allowed to go negative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowNegativeValue")]
		public System.Nullable<System.Boolean> AllowNegativeValue { get; set; }
		
		/// <summary>
		/// If True, the progress will continue even beyond the point where the objective met its minimum completion requirements. Your UI will have to accommodate it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowOvercompletion")]
		public System.Nullable<System.Boolean> AllowOvercompletion { get; set; }
		
		/// <summary>
		/// If true, you can effectively "un-complete" this objective if you lose progress after crossing the completion threshold. 
		///If False, once you complete the task it will remain completed forever by locking the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowValueChangeWhenCompleted")]
		public System.Nullable<System.Boolean> AllowValueChangeWhenCompleted { get; set; }
		
		/// <summary>
		/// The style to use when the objective is completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completedValueStyle")]
		public System.Nullable<System.Int32> CompletedValueStyle { get; set; }
		
		/// <summary>
		/// The value that the unlock value defined in unlockValueHash must reach in order for the objective to be considered Completed. Used in calculating progress and completion status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionValue")]
		public System.Nullable<System.Int32> CompletionValue { get; set; }
		
		/// <summary>
		/// Ideally, this should tell you what your task is. I'm not going to lie to you though. Sometimes this doesn't have useful information at all. Which sucks, but there's nothing either of us can do about it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The style to use when the objective is still in progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inProgressValueStyle")]
		public System.Nullable<System.Int32> InProgressValueStyle { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If true, completion means having an unlock value less than or equal to the completionValue.
		///If False, completion means having an unlock value greater than or equal to the completionValue.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCountingDownward")]
		public System.Nullable<System.Boolean> IsCountingDownward { get; set; }
		
		/// <summary>
		/// OPTIONAL: a hash identifier for the location at which this objective must be accomplished, if there is a location defined. Look up the DestinyLocationDefinition for this hash for that additional location info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationHash")]
		public System.Nullable<System.UInt32> LocationHash { get; set; }
		
		/// <summary>
		/// If nonzero, this is the minimum value at which the objective's progression should be shown. Otherwise, don't show it yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumVisibilityThreshold")]
		public System.Nullable<System.Int32> MinimumVisibilityThreshold { get; set; }
		
		/// <summary>
		/// If this objective enables Perks intrinsically, the conditions for that enabling are defined here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perks")]
		public string Perks { get; set; }
		
		/// <summary>
		/// Text to describe the progress bar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressDescription")]
		public string ProgressDescription { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// A shortcut for determining the most restrictive gating that this Objective is set to use. This includes both the dynamic determination of progress and of completion values. See the DestinyGatingScope enum's documentation for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<System.Int32> Scope { get; set; }
		
		/// <summary>
		/// If True, you should continue showing the progression value in the UI after it's complete. I mean, we already do that in BNet anyways, but if you want to be better behaved than us you could honor this flag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showValueOnComplete")]
		public System.Nullable<System.Boolean> ShowValueOnComplete { get; set; }
		
		/// <summary>
		/// If this objective enables modifications on a player's stats intrinsically, the conditions are defined here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public string Stats { get; set; }
		
		/// <summary>
		/// Objectives can have arbitrary UI-defined identifiers that define the style applied to objectives. For convenience, known UI labels will be defined in the uiStyle enum value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uiLabel")]
		public string UiLabel { get; set; }
		
		/// <summary>
		/// If the objective has a known UI label value, this property will represent it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uiStyle")]
		public System.Nullable<System.Int32> UiStyle { get; set; }
		
		/// <summary>
		/// The UI style applied to the objective. It's an enum, take a look at DestinyUnlockValueUIStyle for details of the possible styles. Use this info as you wish to customize your UI.
		///DEPRECATED: This is no longer populated by Destiny 2 game content. Please use inProgressValueStyle and completedValueStyle instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueStyle")]
		public System.Nullable<System.Int32> ValueStyle { get; set; }
	}
	
	/// <summary>
	/// Defines the conditions under which an intrinsic perk is applied while participating in an Objective.
	///These perks will generally not be benefit-granting perks, but rather a perk that modifies gameplay in some interesting way.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyObjectivePerkEntryDefinition
	{
		
		/// <summary>
		/// The hash identifier of the DestinySandboxPerkDefinition that will be applied to the character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perkHash")]
		public System.Nullable<System.UInt32> PerkHash { get; set; }
		
		/// <summary>
		/// An enumeration indicating whether it will be applied as long as the Objective is active, when it's completed, or until it's completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public System.Nullable<System.Int32> Style { get; set; }
	}
	
	/// <summary>
	/// Defines the conditions under which stat modifications will be applied to a Character while participating in an objective.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyObjectiveStatEntryDefinition
	{
		
		/// <summary>
		/// The stat being modified, and the value used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
		
		/// <summary>
		/// Whether it will be applied as long as the objective is active, when it's completed, or until it's completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public System.Nullable<System.Int32> Style { get; set; }
	}
	
	/// <summary>
	/// Okay, so Activities (DestinyActivityDefinition) take place in Destinations (DestinyDestinationDefinition). Destinations are part of larger locations known as Places (you're reading its documentation right now).
	///Places are more on the planetary scale, like "Earth" and "Your Mom."
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyPlaceDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// A "Progression" in Destiny is best explained by an example.
	///A Character's "Level" is a progression: it has Experience that can be earned, levels that can be gained, and is evaluated and displayed at various points in the game. A Character's "Faction Reputation" is also a progression for much the same reason.
	///Progression is used by a variety of systems, and the definition of a Progression will generally only be useful if combining with live data (such as a character's DestinyCharacterProgressionComponent.progressions property, which holds that character's live Progression states).
	///Fundamentally, a Progression measures your "Level" by evaluating the thresholds in its Steps (one step per level, except for the last step which can be repeated indefinitely for "Levels" that have no ceiling) against the total earned "progression points"/experience. (for simplicity purposes, we will henceforth refer to earned progression points as experience, though it need not be a mechanic that in any way resembles Experience in a traditional sense).
	///Earned experience is calculated in a variety of ways, determined by the Progression's scope. These go from looking up a stored value to performing exceedingly obtuse calculations. This is why we provide live data in DestinyCharacterProgressionComponent.progressions, so you don't have to worry about those.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyProgressionDefinition
	{
		
		/// <summary>
		/// The #RGB string value for the color related to this progression, if there is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// If the value exists, this is the hash identifier for the Faction that owns this Progression.
		///This is purely for convenience, if you're looking at a progression and want to know if and who it's related to in terms of Faction Reputation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factionHash")]
		public System.Nullable<System.UInt32> FactionHash { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// For progressions that have it, this is the rank icon we use in the Companion, displayed above the progressions' rank value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rankIcon")]
		public string RankIcon { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// If this is True, then the progression doesn't have a maximum level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatLastStep")]
		public System.Nullable<System.Boolean> RepeatLastStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rewardItems")]
		public DestinyDefinitionsDestinyProgressionRewardItemQuantity[] RewardItems { get; set; }
		
		/// <summary>
		/// The "Scope" of the progression indicates the source of the progression's live data.
		///See the DestinyProgressionScope enum for more info: but essentially, a Progression can either be backed by a stored value, or it can be a calculated derivative of other values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<System.Int32> Scope { get; set; }
		
		/// <summary>
		/// If there's a description of how to earn this progression in the local config, this will be that localized description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Progressions are divided into Steps, which roughly equate to "Levels" in the traditional sense of a Progression. Notably, the last step can be repeated indefinitely if repeatLastStep is true, meaning that the calculation for your level is not as simple as comparing your current progress to the max progress of the steps. 
		///These and more calculations are done for you if you grab live character progression data, such as in the DestinyCharacterProgressionComponent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public DestinyDefinitionsDestinyProgressionStepDefinition[] Steps { get; set; }
		
		/// <summary>
		/// If true, the Progression is something worth showing to users.
		///If false, BNet isn't going to show it. But that doesn't mean you can't. We're all friends here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyProgressionDisplayPropertiesDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// When progressions show your "experience" gained, that bar has units (i.e. "Experience", "Bad Dudes Snuffed Out", whatever). This is the localized string for that unit of measurement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayUnitsName")]
		public string DisplayUnitsName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasIcon")]
		public System.Nullable<System.Boolean> HasIcon { get; set; }
		
		/// <summary>
		/// If this item has a high-res icon (at least for now, many things won't), then the path to that icon will be here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highResIcon")]
		public string HighResIcon { get; set; }
		
		/// <summary>
		/// Note that "icon" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.
		///But usually, it will be a small square image that you can use as... well, an icon.
		///They are currently represented as 96px x 96px images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconSequences")]
		public DestinyDefinitionsCommonDestinyIconSequenceDefinition[] IconSequences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyProgressionRewardItemQuantity
	{
		
		[System.Runtime.Serialization.DataMember(Name="acquisitionBehavior")]
		public System.Nullable<System.Int32> AcquisitionBehavior { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="claimUnlockDisplayStrings")]
		public string[] ClaimUnlockDisplayStrings { get; set; }
		
		/// <summary>
		/// Indicates that this item quantity may be conditionally shown or hidden, based on various sources of state. For example: server flags, account state, or character progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasConditionalVisibility")]
		public System.Nullable<System.Boolean> HasConditionalVisibility { get; set; }
		
		/// <summary>
		/// The hash identifier for the item in question. Use it to look up the item's DestinyInventoryItemDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// If this quantity is referring to a specific instance of an item, this will have the item's instance ID. Normally, this will be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemInstanceId")]
		public System.Nullable<System.Int64> ItemInstanceId { get; set; }
		
		/// <summary>
		/// The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rewardedAtProgressionLevel")]
		public System.Nullable<System.Int32> RewardedAtProgressionLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uiDisplayStyle")]
		public string UiDisplayStyle { get; set; }
	}
	
	/// <summary>
	/// This defines a single Step in a progression (which roughly equates to a level. See DestinyProgressionDefinition for caveats).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyProgressionStepDefinition
	{
		
		/// <summary>
		/// This appears to be, when you "level up", whether a visual effect will display and on what entity. See DestinyProgressionStepDisplayEffect for slightly more info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayEffectType")]
		public System.Nullable<System.Int32> DisplayEffectType { get; set; }
		
		/// <summary>
		/// If this progression step has a specific icon related to it, this is the icon to show.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		/// <summary>
		/// The total amount of progression points/"experience" you will need to initially reach this step. If this is the last step and the progression is repeating indefinitely (DestinyProgressionDefinition.repeatLastStep), this will also be the progress needed to level it up further by repeating this step again.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressTotal")]
		public System.Nullable<System.Int32> ProgressTotal { get; set; }
		
		/// <summary>
		/// A listing of items rewarded as a result of reaching this level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardItems")]
		public DestinyDestinyItemQuantity[] RewardItems { get; set; }
		
		/// <summary>
		/// Very rarely, Progressions will have localized text describing the Level of the progression. This will be that localized text, if it exists. Otherwise, the standard appears to be to simply show the level numerically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepName")]
		public string StepName { get; set; }
	}
	
	/// <summary>
	/// Aggregations of multiple progressions.
	///These are used to apply rewards to multiple progressions at once. They can sometimes have human readable data as well, but only extremely sporadically.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyProgressionMappingDefinition
	{
		
		/// <summary>
		/// Infrequently defined in practice. Defer to the individual progressions' display properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// The localized unit of measurement for progression across the progressions defined in this mapping. Unfortunately, this is very infrequently defined. Defer to the individual progressions' display units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayUnits")]
		public string DisplayUnits { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// In Destiny, "Races" are really more like "Species". Sort of. I mean, are the Awoken a separate species from humans? I'm not sure. But either way, they're defined here. You'll see Exo, Awoken, and Human as examples of these Species. Players will choose one for their character.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyRaceDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// A localized string referring to the singular form of the Race's name when referred to in gendered form. Keyed by the DestinyGender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genderedRaceNames")]
		public System.Collections.Generic.Dictionary<string, string> GenderedRaceNames { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genderedRaceNamesByGenderHash")]
		public System.Collections.Generic.Dictionary<string, string> GenderedRaceNamesByGenderHash { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// An enumeration defining the existing, known Races/Species for player characters. This value will be the enum value matching this definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="raceType")]
		public System.Nullable<System.Int32> RaceType { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// BNet's custom categorization of reward sources. We took a look at the existing ways that items could be spawned, and tried to make high-level categorizations of them. This needs to be re-evaluated for Destiny 2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDefinitionsDestinyRewardSourceCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	/// <summary>
	/// Represents a heuristically-determined "item source" according to Bungie.net. These item sources are non-canonical: we apply a combination of special configuration and often-fragile heuristics to attempt to discern whether an item should be part of a given "source," but we have known cases of false positives and negatives due to our imperfect heuristics.
	///Still, they provide a decent approximation for people trying to figure out how an item can be obtained. DestinyInventoryItemDefinition refers to sources in the sourceDatas.sourceHashes property for all sources we determined the item could spawn from.
	///An example in Destiny 1 of a Source would be "Nightfall". If an item has the "Nightfall" source associated with it, it's extremely likely that you can earn that item while playing Nightfall, either during play or as an after-completion reward.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyRewardSourceDefinition
	{
		
		/// <summary>
		/// Sources are grouped into categories: common ways that items are provided. I hope to see this expand in Destiny 2 once we have time to generate accurate reward source data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<System.Int32> Category { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinySandboxPatternDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public DestinyDefinitionsDestinyArrangementRegionFilterDefinition[] Filters { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="patternGlobalTagIdHash")]
		public System.Nullable<System.UInt32> PatternGlobalTagIdHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="patternHash")]
		public System.Nullable<System.UInt32> PatternHash { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weaponContentGroupHash")]
		public System.Nullable<System.UInt32> WeaponContentGroupHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weaponTranslationGroupHash")]
		public System.Nullable<System.UInt32> WeaponTranslationGroupHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weaponType")]
		public System.Nullable<System.Int32> WeaponType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weaponTypeHash")]
		public System.Nullable<System.UInt32> WeaponTypeHash { get; set; }
	}
	
	/// <summary>
	/// Perks are modifiers to a character or item that can be applied situationally.
	///- Perks determine a weapons' damage type.
	///- Perks put the Mods in Modifiers (they are literally the entity that bestows the Sandbox benefit for whatever fluff text about the modifier in the Socket, Plug or Talent Node)
	///- Perks are applied for unique alterations of state in Objectives
	///Anyways, I'm sure you can see why perks are so interesting.
	///What Perks often don't have is human readable information, so we attempt to reverse engineer that by pulling that data from places that uniquely refer to these perks: namely, Talent Nodes and Plugs. That only gives us a subset of perks that are human readable, but those perks are the ones people generally care about anyways. The others are left as a mystery, their true purpose mostly unknown and undocumented.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinySandboxPerkDefinition
	{
		
		/// <summary>
		/// If this perk grants a damage type to a weapon, the damage type will be defined here.
		///Unless you have a compelling reason to use this enum value, use the damageTypeHash instead to look up the actual DestinyDamageTypeDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="damageType")]
		public System.Nullable<System.Int32> DamageType { get; set; }
		
		/// <summary>
		/// The hash identifier for looking up the DestinyDamageTypeDefinition, if this perk has a damage type.
		///This is preferred over using the damageType enumeration value, which has been left purely because it is occasionally convenient.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="damageTypeHash")]
		public System.Nullable<System.UInt32> DamageTypeHash { get; set; }
		
		/// <summary>
		/// These display properties are by no means guaranteed to be populated. Usually when it is, it's only because we back-filled them with the displayProperties of some Talent Node or Plug item that happened to be uniquely providing that perk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If true, you can actually show the perk in the UI. Otherwise, it doesn't have useful player-facing information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisplayable")]
		public System.Nullable<System.Boolean> IsDisplayable { get; set; }
		
		/// <summary>
		/// An old holdover from the original Armory, this was an attempt to group perks by functionality.
		///It is as yet unpopulated, and there will be quite a bit of work needed to restore it to its former working order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perkGroups")]
		public string PerkGroups { get; set; }
		
		/// <summary>
		/// The string identifier for the perk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perkIdentifier")]
		public string PerkIdentifier { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// This represents a stat that's applied to a character or an item (such as a weapon, piece of armor, or a vehicle).
	///An example of a stat might be Attack Power on a weapon.
	///Stats go through a complex set of transformations before they end up being shown to the user as a number or a progress bar, and those transformations are fundamentally intertwined with the concept of a "Stat Group" (DestinyStatGroupDefinition). Items have both Stats and a reference to a Stat Group, and it is the Stat Group that takes the raw stat information and gives it both rendering metadata (such as whether to show it as a number or a progress bar) and the final transformation data (interpolation tables to turn the raw investment stat into a display stat). Please see DestinyStatGroupDefinition for more information on that transformational process.
	///Stats are segregated from Stat Groups because different items and types of items can refer to the same stat, but have different "scales" for the stat while still having the same underlying value. For example, both a Shotgun and an Auto Rifle may have a "raw" impact stat of 50, but the Auto Rifle's Stat Group will scale that 50 down so that, when it is displayed, it is a smaller value relative to the shotgun. (this is a totally made up example, don't assume shotguns have naturally higher impact than auto rifles because of this)
	///A final caveat is that some stats, even after this "final" transformation, go through yet another set of transformations directly in the game as a result of dynamic, stateful scripts that get run. BNet has no access to these scripts, nor any way to know which scripts get executed. As a result, the stats for an item that you see in-game - particularly for stats that are often impacted by Perks, like Magazine Size - can change dramatically from what we return on Bungie.Net. This is a known issue with no fix coming down the pipeline. Take these stats with a grain of salt.
	///Stats actually go through four transformations, for those interested:
	///1) "Sandbox" stat, the "most raw" form. These are pretty much useless without transformations applied, and thus are not currently returned in the API. If you really want these, we can provide them. Maybe someone could do something cool with it?
	///2) "Investment" stat (the stat's value after DestinyStatDefinition's interpolation tables and aggregation logic is applied to the "Sandbox" stat value)
	///3) "Display" stat (the stat's base UI-visible value after DestinyStatGroupDefinition's interpolation tables are applied to the Investment Stat value. For most stats, this is what is displayed.)
	///4) Underlying in-game stat (the stat's actual value according to the game, after the game runs dynamic scripts based on the game and character's state. This is the final transformation that BNet does not have access to. For most stats, this is not actually displayed to the user, with the exception of Magazine Size which is then piped back to the UI for display in-game, but not to BNet.)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyStatDefinition
	{
		
		/// <summary>
		/// Stats can exist on a character or an item, and they may potentially be aggregated in different ways. The DestinyStatAggregationType enum value indicates the way that this stat is being aggregated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public System.Nullable<System.Int32> AggregationType { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// True if the stat is computed rather than being delivered as a raw value on items.
		///For instance, the Light stat in Destiny 1 was a computed stat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasComputedBlock")]
		public System.Nullable<System.Boolean> HasComputedBlock { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// The category of the stat, according to the game.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statCategory")]
		public System.Nullable<System.Int32> StatCategory { get; set; }
	}
	
	/// <summary>
	/// Describes the way that an Item Stat (see DestinyStatDefinition) is transformed using the DestinyStatGroupDefinition related to that item. See both of the aforementioned definitions for more information about the stages of stat transformation.
	///This represents the transformation of a stat into a "Display" stat (the closest value that BNet can get to the in-game display value of the stat)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyStatDisplayDefinition
	{
		
		/// <summary>
		/// If this is true, the stat should be displayed as a number. Otherwise, display it as a progress bar. Or, you know, do whatever you want. There's no displayAsNumeric police.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayAsNumeric")]
		public System.Nullable<System.Boolean> DisplayAsNumeric { get; set; }
		
		/// <summary>
		/// The interpolation table representing how the Investment Stat is transformed into a Display Stat. 
		///See DestinyStatDefinition for a description of the stages of stat transformation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayInterpolation")]
		public InterpolationInterpolationPoint[] DisplayInterpolation { get; set; }
		
		/// <summary>
		/// Regardless of the output of interpolation, this is the maximum possible value that the stat can be. It should also be used as the upper bound for displaying the stat as a progress bar (the minimum always being 0)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumValue")]
		public System.Nullable<System.Int32> MaximumValue { get; set; }
		
		/// <summary>
		/// The hash identifier for the stat being transformed into a Display stat.
		///Use it to look up the DestinyStatDefinition, or key into a DestinyInventoryItemDefinition's stats property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statHash")]
		public System.Nullable<System.UInt32> StatHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InterpolationInterpolationPoint
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// When an inventory item (DestinyInventoryItemDefinition) has Stats (such as Attack Power), the item will refer to a Stat Group. This definition enumerates the properties used to transform the item's "Investment" stats into "Display" stats.
	///See DestinyStatDefinition's documentation for information about the transformation of Stats, and the meaning of an Investment vs. a Display stat.
	///If you don't want to do these calculations on your own, fear not: pulling live data from the BNet endpoints will return display stat values pre-computed and ready for you to use. I highly recommend this approach, saves a lot of time and also accounts for certain stat modifiers that can't easily be accounted for without live data (such as stat modifiers on Talent Grids and Socket Plugs)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyStatGroupDefinition
	{
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The maximum possible value that any stat in this group can be transformed into.
		///This is used by stats that *don't* have scaledStats entries below, but that still need to be displayed as a progress bar, in which case this is used as the upper bound for said progress bar. (the lower bound is always 0)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumValue")]
		public System.Nullable<System.Int32> MaximumValue { get; set; }
		
		/// <summary>
		/// The game has the ability to override, based on the stat group, what the localized text is that is displayed for Stats being shown on the item.
		///Mercifully, no Stat Groups use this feature currently. If they start using them, we'll all need to start using them (and those of you who are more prudent than I am can go ahead and start pre-checking for this.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public System.Collections.Generic.Dictionary<string, DestinyDefinitionsDestinyStatOverrideDefinition> Overrides { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// Any stat that requires scaling to be transformed from an "Investment" stat to a "Display" stat will have an entry in this list. For more information on what those types of stats mean and the transformation process, see DestinyStatDefinition.
		///In retrospect, I wouldn't mind if this was a dictionary keyed by the stat hash instead. But I'm going to leave it be because [[After Apple Picking]].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaledStats")]
		public DestinyDefinitionsDestinyStatDisplayDefinition[] ScaledStats { get; set; }
		
		/// <summary>
		/// This apparently indicates the position of the stats in the UI? I've returned it in case anyone can use it, but it's not of any use to us on BNet. Something's being lost in translation with this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uiPosition")]
		public System.Nullable<System.Int32> UiPosition { get; set; }
	}
	
	/// <summary>
	/// Stat Groups (DestinyStatGroupDefinition) has the ability to override the localized text associated with stats that are to be shown on the items with which they are associated.
	///This defines a specific overridden stat. You could theoretically check these before rendering your stat UI, and for each stat that has an override show these displayProperties instead of those on the DestinyStatDefinition.
	///Or you could be like us, and skip that for now because the game has yet to actually use this feature. But know that it's here, waiting for a resilliant young designer to take up the mantle and make us all look foolish by showing the wrong name for stats.
	///Note that, if this gets used, the override will apply only to items using the overriding Stat Group. Other items will still show the default stat's name/description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyStatOverrideDefinition
	{
		
		/// <summary>
		/// The display properties to show instead of the base DestinyStatDefinition display properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// The hash identifier of the stat whose display properties are being overridden.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statHash")]
		public System.Nullable<System.UInt32> StatHash { get; set; }
	}
	
	/// <summary>
	/// As of Destiny 2, nodes can exist as part of "Exclusive Groups". These differ from exclusive sets in that, within the group, many nodes can be activated. But the act of activating any node in the group will cause "opposing" nodes (nodes in groups that are not allowed to be activated at the same time as this group) to deactivate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyTalentExclusiveGroup
	{
		
		/// <summary>
		/// The identifier for this exclusive group. Only guaranteed unique within the talent grid, not globally.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupHash")]
		public System.Nullable<System.UInt32> GroupHash { get; set; }
		
		/// <summary>
		/// If this group has an associated piece of lore to show next to it, this will be the identifier for that DestinyLoreDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loreHash")]
		public System.Nullable<System.UInt32> LoreHash { get; set; }
		
		/// <summary>
		/// A quick reference of the talent nodes that are part of this group, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeHashes")]
		public int[] NodeHashes { get; set; }
		
		/// <summary>
		/// A quick reference of Groups whose nodes will be deactivated if any node in this group is activated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opposingGroupHashes")]
		public int[] OpposingGroupHashes { get; set; }
		
		/// <summary>
		/// A quick reference of Nodes that will be deactivated if any node in this group is activated, by their Talent Node hashes. (See DestinyTalentNodeDefinition.nodeHash)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opposingNodeHashes")]
		public int[] OpposingNodeHashes { get; set; }
	}
	
	/// <summary>
	/// The time has unfortunately come to talk about Talent Grids.
	///Talent Grids are the most complex and unintuitive part of the Destiny Definition data. Grab a cup of coffee before we begin, I can wait.
	///Talent Grids were the primary way that items could be customized in Destiny 1. In Destiny 2, for now, talent grids have become exclusively used by Subclass/Build items: but the system is still in place for it to be used by items should the direction change back toward talent grids.
	///Talent Grids have Nodes: the visual circles on the talent grid detail screen that have icons and can be activated if you meet certain requirements and pay costs. The actual visual data and effects, however, are driven by the "Steps" on Talent Nodes. Any given node will have 1:M of these steps, and the specific step that will be considered the "current" step (and thus the dictator of all benefits, visual state, and activation requirements on the Node) will almost always not be determined until an instance of the item is created. This is how, in Destiny 1, items were able to have such a wide variety of what users saw as "Perks": they were actually Talent Grids with nodes that had a wide variety of Steps, randomly chosen at the time of item creation.
	///Now that Talent Grids are used exclusively by subclasses and builds, all of the properties within still apply: but there are additional visual elements on the Subclass/Build screens that are superimposed on top of the talent nodes. Unfortunately, BNet doesn't have this data: if you want to build a subclass screen, you will have to provide your own "decorative" assets, such as the visual connectors between nodes and the fancy colored-fire-bathed character standing behind the nodes.
	///DestinyInventoryItem.talentGrid.talentGridHash defines an item's linked Talent Grid, which brings you to this definition that contains enough satic data about talent grids to make your head spin. These *must* be combined with instanced data - found when live data returns DestinyItemTalentGridComponent - in order to derive meaning. The instanced data will reference nodes and steps within these definitions, which you will then have to look up in the definition and combine with the instanced data to give the user the visual representation of their item's talent grid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyTalentGridDefinition
	{
		
		/// <summary>
		/// Talent Nodes can exist in "exclusive sets": these are sets of nodes in which only a single node in the set can be activated at any given time. Activating a node in this set will automatically deactivate the other nodes in the set (referred to as a "Swap").
		///If a node in the exclusive set has already been activated, the game will not charge you materials to activate another node in the set, even if you have never activated it before, because you already paid the cost to activate one node in the set.
		///Not to be confused with Exclusive Groups. (how the heck do we NOT get confused by that? Jeez) See the groups property for information about that only-tangentially-related concept.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclusiveSets")]
		public DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition[] ExclusiveSets { get; set; }
		
		/// <summary>
		/// The meaning of this has been lost in the sands of time: it still exists as a property, but appears to be unused in the modern UI of talent grids. It used to imply that each visual "column" of talent nodes required identical progression levels in order to be activated. Returning this value in case it is still useful to someone? Perhaps it's just a bit of interesting history.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gridLevelPerColumn")]
		public System.Nullable<System.Int32> GridLevelPerColumn { get; set; }
		
		/// <summary>
		/// Talent Nodes can have "Exclusive Groups". These are not to be confused with Exclusive Sets (see exclusiveSets property).
		///Look at the definition of DestinyTalentExclusiveGroup for more information and how they work. These groups are keyed by the "groupHash" from DestinyTalentExclusiveGroup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public System.Collections.Generic.Dictionary<string, DestinyDefinitionsDestinyTalentExclusiveGroup> Groups { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// This is a quick reference to the indexes of nodes that are not part of exclusive sets. Handy for knowing which talent nodes can only be activated directly, rather than via swapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="independentNodeIndexes")]
		public int[] IndependentNodeIndexes { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The maximum possible level of the Talent Grid: at this level, any nodes are allowed to be activated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxGridLevel")]
		public System.Nullable<System.Int32> MaxGridLevel { get; set; }
		
		/// <summary>
		/// BNet wants to show talent nodes grouped by similar purpose with localized titles. This is the ordered list of those categories: if you want to show nodes by category, you can iterate over this list, render the displayProperties for the category as the title, and then iterate over the talent nodes referenced by the category to show the related nodes.
		///Note that this is different from Exclusive Groups or Sets, because these categories also incorporate "Independent" nodes that belong to neither sets nor groups. These are purely for visual grouping of nodes rather than functional grouping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeCategories")]
		public DestinyDefinitionsDestinyTalentNodeCategory[] NodeCategories { get; set; }
		
		/// <summary>
		/// The list of Talent Nodes on the Grid (recall that Nodes themselves are really just locations in the UI to show whatever their current Step is. You will only know the current step for a node by retrieving instanced data through platform calls to the API that return DestinyItemTalentGridComponent).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public DestinyDefinitionsDestinyTalentNodeDefinition[] Nodes { get; set; }
		
		/// <summary>
		/// The hash identifier of the Progression (DestinyProgressionDefinition) that drives whether and when Talent Nodes can be activated on the Grid. Items will have instances of this Progression, and will gain experience that will eventually cause the grid to increase in level. As the grid's level increases, it will cross the threshold where nodes can be activated. See DestinyTalentGridStepDefinition's activation requirements for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressionHash")]
		public System.Nullable<System.UInt32> ProgressionHash { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// The list of indexes into the Talent Grid's "nodes" property for nodes in this exclusive set. (See DestinyTalentNodeDefinition.nodeIndex)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyTalentNodeExclusiveSetDefinition
	{
		
		/// <summary>
		/// The list of node indexes for the exclusive set. Historically, these were indexes. I would have liked to replace this with nodeHashes for consistency, but it's way too late for that. (9:09 PM, he's right!)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIndexes")]
		public int[] NodeIndexes { get; set; }
	}
	
	/// <summary>
	/// An artificial construct provided by Bungie.Net, where we attempt to group talent nodes by functionality.
	///This is a single set of references to Talent Nodes that share a common trait or purpose.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyTalentNodeCategory
	{
		
		/// <summary>
		/// Will contain at least the "name", which will be the title of the category. We will likely not have description and an icon yet, but I'm going to keep my options open.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// Mostly just for debug purposes, but if you find it useful you can have it. This is BNet's manually created identifier for this category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// If true, we found the localized content in a related DestinyLoreDefinition instead of local BNet localization files. This is mostly for ease of my own future investigations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLoreDriven")]
		public System.Nullable<System.Boolean> IsLoreDriven { get; set; }
		
		/// <summary>
		/// The set of all hash identifiers for Talent Nodes (DestinyTalentNodeDefinition) in this Talent Grid that are part of this Category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeHashes")]
		public int[] NodeHashes { get; set; }
	}
	
	/// <summary>
	/// Talent Grids on items have Nodes. These nodes have positions in the talent grid's UI, and contain "Steps" (DestinyTalentNodeStepDefinition), one of whom will be the "Current" step.
	///The Current Step determines the visual properties of the node, as well as what the node grants when it is activated.
	///See DestinyTalentGridDefinition for a more complete overview of how Talent Grids work, and how they are used in Destiny 2 (and how they were used in Destiny 1).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyTalentNodeDefinition
	{
		
		/// <summary>
		/// If true, this node will automatically unlock when the Talent Grid's level reaches the required level of the current step of this node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoUnlocks")]
		public System.Nullable<System.Boolean> AutoUnlocks { get; set; }
		
		/// <summary>
		/// At one point, Talent Nodes supported the idea of "Binary Pairs": nodes that overlapped each other visually, and where activating one deactivated the other. They ended up not being used, mostly because Exclusive Sets are *almost* a superset of this concept, but the potential for it to be used still exists in theory.
		///If this is ever used, this will be the index into the DestinyTalentGridDefinition.nodes property for the node that is the binary pair match to this node. Activating one deactivates the other.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binaryPairNodeIndex")]
		public System.Nullable<System.Int32> BinaryPairNodeIndex { get; set; }
		
		/// <summary>
		/// The visual "column" where the node should be shown in the UI. If negative, the node is hidden.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="column")]
		public System.Nullable<System.Int32> Column { get; set; }
		
		/// <summary>
		/// The nodeHash values for nodes that are in an Exclusive Set with this node.
		///See DestinyTalentGridDefinition.exclusiveSets for more info about exclusive sets.
		///Again, note that these are nodeHashes and *not* nodeIndexes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclusiveWithNodeHashes")]
		public int[] ExclusiveWithNodeHashes { get; set; }
		
		/// <summary>
		/// As of Destiny 2, nodes can exist as part of "Exclusive Groups". These differ from exclusive sets in that, within the group, many nodes can be activated. But the act of activating any node in the group will cause "opposing" nodes (nodes in groups that are not allowed to be activated at the same time as this group) to deactivate.
		///See DestinyTalentExclusiveGroup for more information on the details. This is an identifier for this node's group, if it is part of one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupHash")]
		public System.Nullable<System.UInt32> GroupHash { get; set; }
		
		/// <summary>
		/// Comes from the talent grid node style: if true, then this node should be ignored for determining whether the grid is complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreForCompletion")]
		public System.Nullable<System.Boolean> IgnoreForCompletion { get; set; }
		
		/// <summary>
		/// If this is true, the node's step is determined randomly rather than the first step being chosen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRandom")]
		public System.Nullable<System.Boolean> IsRandom { get; set; }
		
		/// <summary>
		/// If this is true, the node can be "re-rolled" to acquire a different random current step. This is not used, but still exists for a theoretical future of talent grids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRandomRepurchasable")]
		public System.Nullable<System.Boolean> IsRandomRepurchasable { get; set; }
		
		/// <summary>
		/// At one point, Nodes were going to be able to be activated multiple times, changing the current step and potentially piling on multiple effects from the previously activated steps. This property would indicate if the last step could be activated multiple times. 
		///This is not currently used, but it isn't out of the question that this could end up being used again in a theoretical future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastStepRepeats")]
		public System.Nullable<System.Boolean> LastStepRepeats { get; set; }
		
		/// <summary>
		/// A string identifier for a custom visual layout to apply to this talent node. Unfortunately, we do not have any data for rendering these custom layouts. It will be up to you to interpret these strings and change your UI if you want to have custom UI matching these layouts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layoutIdentifier")]
		public string LayoutIdentifier { get; set; }
		
		/// <summary>
		/// Talent nodes can be associated with a piece of Lore, generally rendered in a tooltip. This is the hash identifier of the lore element to show, if there is one to be show.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loreHash")]
		public System.Nullable<System.UInt32> LoreHash { get; set; }
		
		/// <summary>
		/// The hash identifier for the node, which unfortunately is also content version dependent but can be (and ideally, should be) used instead of the nodeIndex to uniquely identify the node.
		///The two exist side-by-side for backcompat reasons due to the Great Talent Node Restructuring of Destiny 1, and I ran out of time to remove one of them and standardize on the other. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeHash")]
		public System.Nullable<System.UInt32> NodeHash { get; set; }
		
		/// <summary>
		/// The index into the DestinyTalentGridDefinition's "nodes" property where this node is located. Used to uniquely identify the node within the Talent Grid. Note that this is content version dependent: make sure you have the latest version of content before trying to use these properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIndex")]
		public System.Nullable<System.Int32> NodeIndex { get; set; }
		
		/// <summary>
		/// Comes from the talent grid node style: this identifier should be used to determine how to render the node in the UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeStyleIdentifier")]
		public string NodeStyleIdentifier { get; set; }
		
		/// <summary>
		/// Indexes into the DestinyTalentGridDefinition.nodes property for any nodes that must be activated before this one is allowed to be activated.
		///I would have liked to change this to hashes for Destiny 2, but we have run out of time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prerequisiteNodeIndexes")]
		public int[] PrerequisiteNodeIndexes { get; set; }
		
		/// <summary>
		/// At one point, you were going to be able to repurchase talent nodes that had random steps, to "re-roll" the current step of the node (and thus change the properties of your item). This was to be the activation requirement for performing that re-roll.
		///The system still exists to do this, as far as I know, so it may yet come back around!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="randomActivationRequirement")]
		public string RandomActivationRequirement { get; set; }
		
		/// <summary>
		/// If the node's step is randomly selected, this is the amount of the Talent Grid's progression experience at which the progression bar for the node should be shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="randomStartProgressionBarAtProgression")]
		public System.Nullable<System.Int32> RandomStartProgressionBarAtProgression { get; set; }
		
		/// <summary>
		/// The visual "row" where the node should be shown in the UI. If negative, then the node is hidden.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="row")]
		public System.Nullable<System.Int32> Row { get; set; }
		
		/// <summary>
		/// At this point, "steps" have been obfuscated into conceptual entities, aggregating the underlying notions of "properties" and "true steps".
		///If you need to know a step as it truly exists - such as when recreating Node logic when processing Vendor data - you'll have to use the "realSteps" property below.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public DestinyDefinitionsDestinyNodeStepDefinition[] Steps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDefinitionsDestinyTalentNodeStepDamageTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 5,
	}
	
	/// <summary>
	/// These properties are an attempt to categorize talent node steps by certain common properties. See the related enumerations for the type of properties being categorized.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyTalentNodeStepGroups
	{
		
		[System.Runtime.Serialization.DataMember(Name="damageTypes")]
		public System.Nullable<System.Int32> DamageTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guardianAttributes")]
		public System.Nullable<System.Int32> GuardianAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="impactEffects")]
		public System.Nullable<System.Int32> ImpactEffects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lightAbilities")]
		public System.Nullable<System.Int32> LightAbilities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weaponPerformance")]
		public System.Nullable<System.Int32> WeaponPerformance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDefinitionsDestinyTalentNodeStepGuardianAttributes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="255")]
		_255 = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDefinitionsDestinyTalentNodeStepImpactEffects
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
		_63 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDefinitionsDestinyTalentNodeStepLightAbilities
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
		_63 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDefinitionsDestinyTalentNodeStepWeaponPerformances
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="256")]
		_256 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="512")]
		_512 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1024")]
		_1024 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2048")]
		_2048 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4096")]
		_4096 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8191")]
		_8191 = 14,
	}
	
	/// <summary>
	/// Unlock Flags are small bits (literally, a bit, as in a boolean value) that the game server uses for an extremely wide range of state checks, progress storage, and other interesting tidbits of information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyUnlockDefinition
	{
		
		/// <summary>
		/// Sometimes, but not frequently, these unlock flags also have human readable information: usually when they are being directly tested for some requirement, in which case the string is a localized description of why the requirement check failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// Where the sausage gets made. Unlock Expressions are the foundation of the game's gating mechanics and investment-related restrictions. They can test Unlock Flags and Unlock Values for certain states, using a sufficient amount of logical operators such that unlock expressions are effectively Turing complete.
	///Use UnlockExpressionParser to evaluate expressions using an IUnlockContext parsed from Babel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyUnlockExpressionDefinition
	{
		
		/// <summary>
		/// A shortcut for determining the most restrictive gating that this expression performs. See the DestinyGatingScope enum's documentation for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<System.Int32> Scope { get; set; }
	}
	
	/// <summary>
	/// An Unlock Value is an internal integer value, stored on the server and used in a variety of ways, most frequently for the gating/requirement checks that the game performs across all of its main features. They can also be used as the storage data for mapped Progressions, Objectives, and other features that require storage of variable numeric values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyUnlockValueDefinition
	{
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// If you ever wondered how the Vault works, here it is.
	///The Vault is merely a set of inventory buckets that exist on your Profile/Account level. When you transfer items in the Vault, the game is using the Vault Vendor's DestinyVendorAcceptedItemDefinitions to see where the appropriate destination bucket is for the source bucket from whence your item is moving. If it finds such an entry, it transfers the item to the other bucket.
	///The mechanics for Postmaster works similarly, which is also a vendor. All driven by Accepted Items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorAcceptedItemDefinition
	{
		
		/// <summary>
		/// The "source" bucket for a transfer. When a user wants to transfer an item, the appropriate DestinyVendorDefinition's acceptedItems property is evaluated, looking for an entry where acceptedInventoryBucketHash matches the bucket that the item being transferred is currently located. If it exists, the item will be transferred into whatever bucket is defined by destinationInventoryBucketHash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptedInventoryBucketHash")]
		public System.Nullable<System.UInt32> AcceptedInventoryBucketHash { get; set; }
		
		/// <summary>
		/// This is the bucket where the item being transferred will be put, given that it was being transferred *from* the bucket defined in acceptedInventoryBucketHash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationInventoryBucketHash")]
		public System.Nullable<System.UInt32> DestinationInventoryBucketHash { get; set; }
	}
	
	/// <summary>
	/// If a vendor can ever end up performing actions, these are the properties that will be related to those actions. I'm not going to bother documenting this yet, as it is unused and unclear if it will ever be used... but in case it is ever populated and someone finds it useful, it is defined here.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorActionDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionHash")]
		public System.Nullable<System.UInt32> ActionHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public string ActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoPerformAction")]
		public System.Nullable<System.Boolean> AutoPerformAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executeSeconds")]
		public System.Nullable<System.Int32> ExecuteSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPositive")]
		public System.Nullable<System.Boolean> IsPositive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// This is the definition for a single Vendor Category, into which Sale Items are grouped.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorCategoryEntryDefinition
	{
		
		/// <summary>
		/// The localized string for making purchases from this category, if it is different from the vendor's string for purchasing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyStringOverride")]
		public string BuyStringOverride { get; set; }
		
		/// <summary>
		/// The hashed identifier for the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryHash")]
		public System.Nullable<System.UInt32> CategoryHash { get; set; }
		
		/// <summary>
		/// The index of the category in the original category definitions for the vendor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryIndex")]
		public System.Nullable<System.Int32> CategoryIndex { get; set; }
		
		/// <summary>
		/// If the category is disabled, this is the localized description to show.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabledDescription")]
		public string DisabledDescription { get; set; }
		
		/// <summary>
		/// The localized title of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayTitle")]
		public string DisplayTitle { get; set; }
		
		/// <summary>
		/// True if this category doesn't allow purchases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideFromRegularPurchase")]
		public System.Nullable<System.Boolean> HideFromRegularPurchase { get; set; }
		
		/// <summary>
		/// If you don't have the currency required to buy items from this category, should the items be hidden?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideIfNoCurrency")]
		public System.Nullable<System.Boolean> HideIfNoCurrency { get; set; }
		
		/// <summary>
		/// If true, this category only displays items: you can't purchase anything in them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDisplayOnly")]
		public System.Nullable<System.Boolean> IsDisplayOnly { get; set; }
		
		/// <summary>
		/// Sometimes a category isn't actually used to sell items, but rather to preview them. This implies different UI (and manual placement of the category in the UI) in the game, and special treatment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPreview")]
		public System.Nullable<System.Boolean> IsPreview { get; set; }
		
		/// <summary>
		/// If this category has an overlay prompt that should appear, this contains the details of that prompt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overlay")]
		public string Overlay { get; set; }
		
		/// <summary>
		/// The amount of items that will be available when this category is shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantityAvailable")]
		public System.Nullable<System.Int32> QuantityAvailable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resetIntervalMinutesOverride")]
		public System.Nullable<System.Int32> ResetIntervalMinutesOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resetOffsetMinutesOverride")]
		public System.Nullable<System.Int32> ResetOffsetMinutesOverride { get; set; }
		
		/// <summary>
		/// If items aren't up for sale in this category, should we still show them (greyed out)?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showUnavailableItems")]
		public System.Nullable<System.Boolean> ShowUnavailableItems { get; set; }
		
		/// <summary>
		/// Used in sorting items in vendors... but there's a lot more to it. Just go with the order provided in the itemIndexes property on the DestinyVendorCategoryComponent instead, it should be more reliable than trying to recalculate it yourself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortValue")]
		public System.Nullable<System.Int32> SortValue { get; set; }
		
		/// <summary>
		/// A shortcut for the vendor item indexes sold under this category. Saves us from some expensive reorganization at runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorItemIndexes")]
		public int[] VendorItemIndexes { get; set; }
	}
	
	/// <summary>
	/// The details of an overlay prompt to show to a user. They are all fairly self-explanatory localized strings that can be shown.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorCategoryOverlayDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="choiceDescription")]
		public string ChoiceDescription { get; set; }
		
		/// <summary>
		/// If this overlay has a currency item that it features, this is said featured item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyItemHash")]
		public System.Nullable<System.UInt32> CurrencyItemHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// These are the definitions for Vendors.
	///In Destiny, a Vendor can be a lot of things - some things that you wouldn't expect, and some things that you don't even see directly in the game. Vendors are the Dolly Levi of the Destiny universe.
	///- Traditional Vendors as you see in game: people who you come up to and who give you quests, rewards, or who you can buy things from.
	///- Kiosks/Collections, which are really just Vendors that don't charge currency (or charge some pittance of a currency) and whose gating for purchases revolves more around your character's state.
	///- Previews for rewards or the contents of sacks. These are implemented as Vendors, where you can't actually purchase from them but the items that they have for sale and the categories of sale items reflect the rewards or contents of the sack. This is so that the game could reuse the existing Vendor display UI for rewards and save a bunch of wheel reinvention.
	///- Item Transfer capabilities, like the Vault and Postmaster. Vendors can have "acceptedItem" buckets that determine the source and destination buckets for transfers. When you interact with such a vendor, these buckets are what gets shown in the UI instead of any items that the Vendor would have for sale. Yep, the Vault is a vendor.
	///It is pretty much guaranteed that they'll be used for even more features in the future. They have come to be seen more as generic categorized containers for items than "vendors" in a traditional sense, for better or worse.
	///Where possible and time allows, we'll attempt to split those out into their own more digestible derived "Definitions": but often time does not allow that, as you can see from the above ways that vendors are used which we never split off from Vendor Definitions externally.
	///Since Vendors are so many things to so many parts of the game, the definition is understandably complex. You will want to combine this data with live Vendor information from the API when it is available.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorDefinition
	{
		
		/// <summary>
		/// If the Vendor is actually a vehicle for the transferring of items (like the Vault and Postmaster vendors), this defines the list of source->destination buckets for transferring.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acceptedItems")]
		public DestinyDefinitionsDestinyVendorAcceptedItemDefinition[] AcceptedItems { get; set; }
		
		/// <summary>
		/// Describes "actions" that can be performed on a vendor. Currently, none of these exist. But theoretically a Vendor could let you interact with it by performing actions. We'll see what these end up looking like if they ever get used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public DestinyDefinitionsDestinyVendorActionDefinition[] Actions { get; set; }
		
		/// <summary>
		/// If the vendor has a custom localized string describing the "buy" action, that is returned here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buyString")]
		public string BuyString { get; set; }
		
		/// <summary>
		/// These are the headers for sections of items that the vendor is selling. When you see items organized by category in the header, it is these categories that it is showing.
		///Well, technically not *exactly* these. On BNet, it doesn't make sense to have categories be "paged" as we do in Destiny, so we run some heuristics to attempt to aggregate pages of categories together. 
		///These are the categories post-concatenation, if the vendor had concatenation applied. If you want the pre-aggregated category data, use originalCategories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public DestinyDefinitionsDestinyVendorCategoryEntryDefinition[] Categories { get; set; }
		
		/// <summary>
		/// If TRUE, consolidate categories that only differ by trivial properties (such as having minor differences in name)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consolidateCategories")]
		public System.Nullable<System.Boolean> ConsolidateCategories { get; set; }
		
		/// <summary>
		/// Display Categories are different from "categories" in that these are specifically for visual grouping and display of categories in Vendor UI. 
		///The "categories" structure is for validation of the contained items, and can be categorized entirely separately from "Display Categories", there need be and often will be no meaningful relationship between the two.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayCategories")]
		public DestinyDefinitionsDestinyDisplayCategoryDefinition[] DisplayCategories { get; set; }
		
		/// <summary>
		/// If the vendor has an item that should be displayed as the "featured" item, this is the hash identifier for that DestinyVendorItemDefinition.
		///Apparently this is usually a related currency, like a reputation token. But it need not be restricted to that.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayItemHash")]
		public System.Nullable<System.UInt32> DisplayItemHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// If a vendor is not enabled, we won't even save the vendor's definition, and we won't return any items or info about them. It's as if they don't exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// If the Vendor has a faction, this hash will be valid and point to a DestinyFactionDefinition.
		///The game UI and BNet often mine the faction definition for additional elements and details to place on the screen, such as the faction's Progression status (aka "Reputation").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factionHash")]
		public System.Nullable<System.UInt32> FactionHash { get; set; }
		
		/// <summary>
		/// If an item can't be purchased from the vendor, there may be many "custom"/game state specific reasons why not.
		///This is a list of localized strings with messages for those custom failures. The live BNet data will return a failureIndexes property for items that can't be purchased: using those values to index into this array, you can show the user the appropriate failure message for the item that can't be bought.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureStrings")]
		public string[] FailureStrings { get; set; }
		
		/// <summary>
		/// A vendor can be a part of 0 or 1 "groups" at a time: a group being a collection of Vendors related by either location or function/purpose. It's used for our our Companion Vendor UI. Only one of these can be active for a Vendor at a time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public DestinyDefinitionsDestinyVendorGroupReference[] Groups { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// Some items don't make sense to return in the API, for example because they represent an action to be performed rather than an item being sold. I'd rather we not do this, but at least in the short term this is a workable workaround.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreSaleItemHashes")]
		public int[] IgnoreSaleItemHashes { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, you aren't allowed to buy whatever the vendor is selling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inhibitBuying")]
		public System.Nullable<System.Boolean> InhibitBuying { get; set; }
		
		/// <summary>
		/// If this is true, you're not allowed to sell whatever the vendor is buying.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inhibitSelling")]
		public System.Nullable<System.Boolean> InhibitSelling { get; set; }
		
		/// <summary>
		/// In addition to selling items, vendors can have "interactions": UI where you "talk" with the vendor and they offer you a reward, some item, or merely acknowledge via dialog that you did something cool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interactions")]
		public DestinyDefinitionsDestinyVendorInteractionDefinition[] Interactions { get; set; }
		
		/// <summary>
		/// If the vendor shows you items from your own inventory - such as the Vault vendor does - this data describes the UI around showing those inventory buckets and which ones get shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryFlyouts")]
		public DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition[] InventoryFlyouts { get; set; }
		
		/// <summary>
		/// If the vendor sells items (or merely has a list of items to show like the "Sack" vendors do), this is the list of those items that the vendor can sell. From this list, only a subset will be available from the vendor at any given time, selected randomly and reset on the vendor's refresh interval.
		///Note that a vendor can sell the same item multiple ways: for instance, nothing stops a vendor from selling you some specific weapon but using two different currencies, or the same weapon at multiple "item levels".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemList")]
		public DestinyDefinitionsDestinyVendorItemDefinition[] ItemList { get; set; }
		
		/// <summary>
		/// A vendor can be at different places in the world depending on the game/character/account state. This is the list of possible locations for the vendor, along with conditions we use to determine which one is currently active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public DestinyDefinitionsVendorsDestinyVendorLocationDefinition[] Locations { get; set; }
		
		/// <summary>
		/// See the categories property for a description of categories and why originalCategories exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalCategories")]
		public DestinyDefinitionsDestinyVendorCategoryEntryDefinition[] OriginalCategories { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// A number used for calculating the frequency of a vendor's inventory resetting/refreshing.
		///Don't worry about calculating this - we do it on the server side and send you the next refresh date with the live data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetIntervalMinutes")]
		public System.Nullable<System.Int32> ResetIntervalMinutes { get; set; }
		
		/// <summary>
		/// Again, used for reset/refreshing of inventory. Don't worry too much about it. Unless you want to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetOffsetMinutes")]
		public System.Nullable<System.Int32> ResetOffsetMinutes { get; set; }
		
		/// <summary>
		/// As many of you know, Vendor data has historically been pretty brutal on the BNet servers. In an effort to reduce this workload, only Vendors with this flag set will be returned on Vendor requests. This allows us to filter out Vendors that don't dynamic data that's particularly useful: things like "Preview/Sack" vendors, for example, that you can usually suss out the details for using just the definitions themselves.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnWithVendorRequest")]
		public System.Nullable<System.Boolean> ReturnWithVendorRequest { get; set; }
		
		/// <summary>
		/// Ditto for selling. Not that you can sell items to a vendor anymore. Will it come back? Who knows. The string's still there.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellString")]
		public string SellString { get; set; }
		
		/// <summary>
		/// BNet doesn't use this data yet, but it appears to be an optional list of flavor text about services that the Vendor can provide.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public DestinyDefinitionsDestinyVendorServiceDefinition[] Services { get; set; }
		
		/// <summary>
		/// If we were able to predict the dates when this Vendor will be visible/available, this will be the list of those date ranges. Sadly, we're not able to predict this very frequently, so this will often be useless data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlockRanges")]
		public DatesDateRange[] UnlockRanges { get; set; }
		
		/// <summary>
		/// If the vendor has a custom banner image, that can be found here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorBanner")]
		public string VendorBanner { get; set; }
		
		/// <summary>
		/// The internal identifier for the Vendor. A holdover from the old days of Vendors, but we don't have time to refactor it away.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorIdentifier")]
		public string VendorIdentifier { get; set; }
		
		/// <summary>
		/// A portrait of the Vendor's smiling mug. Or frothing tentacles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorPortrait")]
		public string VendorPortrait { get; set; }
		
		/// <summary>
		/// The type of reward progression that this vendor has. Default - The original rank progression from token redemption. Ritual - Progression from ranks in ritual content. For example: Crucible (Shaxx), Gambit (Drifter), and Battlegrounds (War Table).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorProgressionType")]
		public System.Nullable<System.Int32> VendorProgressionType { get; set; }
		
		/// <summary>
		/// The identifier of the VendorCategoryDefinition for this vendor's subcategory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorSubcategoryIdentifier")]
		public string VendorSubcategoryIdentifier { get; set; }
		
		/// <summary>
		/// If a vendor is not visible, we still have and will give vendor definition info, but we won't use them for things like Advisors or UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasIcon")]
		public System.Nullable<System.Boolean> HasIcon { get; set; }
		
		/// <summary>
		/// If this item has a high-res icon (at least for now, many things won't), then the path to that icon will be here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highResIcon")]
		public string HighResIcon { get; set; }
		
		/// <summary>
		/// Note that "icon" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.
		///But usually, it will be a small square image that you can use as... well, an icon.
		///They are currently represented as 96px x 96px images.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconSequences")]
		public DestinyDefinitionsCommonDestinyIconSequenceDefinition[] IconSequences { get; set; }
		
		/// <summary>
		/// I regret calling this a "large icon". It's more like a medium-sized image with a picture of the vendor's mug on it, trying their best to look cool. Not what one would call an icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="largeIcon")]
		public string LargeIcon { get; set; }
		
		/// <summary>
		/// This is apparently the "Watermark". I am not certain offhand where this is actually used in the Game UI, but some people may find it useful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="largeTransparentIcon")]
		public string LargeTransparentIcon { get; set; }
		
		/// <summary>
		/// This is the icon used in the map overview, when the vendor is located on the map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mapIcon")]
		public string MapIcon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If we replaced the icon with something more glitzy, this is the original icon that the vendor had according to the game's content. It may be more lame and/or have less razzle-dazzle. But who am I to tell you which icon to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalIcon")]
		public string OriginalIcon { get; set; }
		
		/// <summary>
		/// Vendors, in addition to expected display property data, may also show some "common requirements" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirementsDisplay")]
		public DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition[] RequirementsDisplay { get; set; }
		
		/// <summary>
		/// This is the icon used in parts of the game UI such as the vendor's waypoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smallTransparentIcon")]
		public string SmallTransparentIcon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
	}
	
	/// <summary>
	/// The localized properties of the requirementsDisplay, allowing information about the requirement or item being featured to be seen.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorGroupReference
	{
		
		/// <summary>
		/// The DestinyVendorGroupDefinition to which this Vendor can belong.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorGroupHash")]
		public System.Nullable<System.UInt32> VendorGroupHash { get; set; }
	}
	
	/// <summary>
	/// A Vendor Interaction is a dialog shown by the vendor other than sale items or transfer screens. The vendor is showing you something, and asking you to reply to it by choosing an option or reward.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorInteractionDefinition
	{
		
		/// <summary>
		/// If the vendor interaction has flavor text, this is some of it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flavorLineOne")]
		public string FlavorLineOne { get; set; }
		
		/// <summary>
		/// If the vendor interaction has flavor text, this is the rest of it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flavorLineTwo")]
		public string FlavorLineTwo { get; set; }
		
		/// <summary>
		/// The header for the interaction dialog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headerDisplayProperties")]
		public string HeaderDisplayProperties { get; set; }
		
		/// <summary>
		/// The localized text telling the player what to do when they see this dialog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instructions")]
		public string Instructions { get; set; }
		
		/// <summary>
		/// The position of this interaction in its parent array. Note that this is NOT content agnostic, and should not be used as such.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interactionIndex")]
		public System.Nullable<System.Int32> InteractionIndex { get; set; }
		
		/// <summary>
		/// The enumerated version of the possible UI hints for vendor interactions, which is a little easier to grok than the hash found in uiInteractionType.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interactionType")]
		public System.Nullable<System.Int32> InteractionType { get; set; }
		
		/// <summary>
		/// If this interaction dialog is about a quest, this is the questline related to the interaction. You can use this to show the quest overview, or even the character's status with the quest if you use it to find the character's current Quest Step by checking their inventory against this questlineItemHash's DestinyInventoryItemDefinition.setData.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questlineItemHash")]
		public System.Nullable<System.UInt32> QuestlineItemHash { get; set; }
		
		/// <summary>
		/// The potential replies that the user can make to the interaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public DestinyDefinitionsDestinyVendorInteractionReplyDefinition[] Replies { get; set; }
		
		/// <summary>
		/// If this interaction is displaying rewards, this is the text to use for the header of the reward-displaying section of the interaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardBlockLabel")]
		public string RewardBlockLabel { get; set; }
		
		/// <summary>
		/// If the vendor's reward list is sourced from one of his categories, this is the index into the category array of items to show.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardVendorCategoryIndex")]
		public System.Nullable<System.Int32> RewardVendorCategoryIndex { get; set; }
		
		/// <summary>
		/// If this interaction is meant to show you sacks, this is the list of types of sacks to be shown. If empty, the interaction is not meant to show sacks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sackInteractionList")]
		public DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition[] SackInteractionList { get; set; }
		
		/// <summary>
		/// A UI hint for the behavior of the interaction screen. This is useful to determine what type of interaction is occurring, such as a prompt to receive a rank up reward or a prompt to choose a reward for completing a quest. The hash isn't as useful as the Enum in retrospect, well what can you do. Try using interactionType instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uiInteractionType")]
		public System.Nullable<System.UInt32> UiInteractionType { get; set; }
		
		/// <summary>
		/// If >= 0, this is the category of sale items to show along with this interaction dialog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorCategoryIndex")]
		public System.Nullable<System.Int32> VendorCategoryIndex { get; set; }
	}
	
	/// <summary>
	/// When the interaction is replied to, Reward sites will fire and items potentially selected based on whether the given unlock expression is TRUE.
	///You can potentially choose one from multiple replies when replying to an interaction: this is how you get either/or rewards from vendors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorInteractionReplyDefinition
	{
		
		/// <summary>
		/// The rewards granted upon responding to the vendor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemRewardsSelection")]
		public System.Nullable<System.Int32> ItemRewardsSelection { get; set; }
		
		/// <summary>
		/// The localized text for the reply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reply")]
		public string Reply { get; set; }
		
		/// <summary>
		/// An enum indicating the type of reply being made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyType")]
		public System.Nullable<System.Int32> ReplyType { get; set; }
	}
	
	/// <summary>
	/// Compare this sackType to the sack identifier in the DestinyInventoryItemDefinition.vendorSackType property of items. If they match, show this sack with this interaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorInteractionSackEntryDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="sackType")]
		public System.Nullable<System.UInt32> SackType { get; set; }
	}
	
	/// <summary>
	/// The definition for an "inventory flyout": a UI screen where we show you part of an otherwise hidden vendor inventory: like the Vault inventory buckets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorInventoryFlyoutDefinition
	{
		
		/// <summary>
		/// A list of inventory buckets and other metadata to show on the screen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition[] Buckets { get; set; }
		
		/// <summary>
		/// The title and other common properties of the flyout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// If this flyout is meant to show you the contents of the player's equipment slot, this is the slot to show.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equipmentSlotHash")]
		public System.Nullable<System.UInt32> EquipmentSlotHash { get; set; }
		
		/// <summary>
		/// An identifier for the flyout, in case anything else needs to refer to them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flyoutId")]
		public System.Nullable<System.UInt32> FlyoutId { get; set; }
		
		/// <summary>
		/// If the flyout is locked, this is the reason why.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lockedDescription")]
		public string LockedDescription { get; set; }
		
		/// <summary>
		/// If this is true, don't show any of the glistening "this is a new item" UI elements, like we show on the inventory items themselves in in-game UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suppressNewness")]
		public System.Nullable<System.Boolean> SuppressNewness { get; set; }
	}
	
	/// <summary>
	/// Information about a single inventory bucket in a vendor flyout UI and how it is shown.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorInventoryFlyoutBucketDefinition
	{
		
		/// <summary>
		/// If true, the inventory bucket should be able to be collapsed visually.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collapsible")]
		public System.Nullable<System.Boolean> Collapsible { get; set; }
		
		/// <summary>
		/// The inventory bucket whose contents should be shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryBucketHash")]
		public System.Nullable<System.UInt32> InventoryBucketHash { get; set; }
		
		/// <summary>
		/// The methodology to use for sorting items from the flyout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortItemsBy")]
		public System.Nullable<System.Int32> SortItemsBy { get; set; }
	}
	
	/// <summary>
	/// This represents an item being sold by the vendor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorItemDefinition
	{
		
		/// <summary>
		/// The action to be performed when purchasing the item, if it's not just "buy".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// The index into the DestinyVendorDefinition.categories array, so you can find the category associated with this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryIndex")]
		public System.Nullable<System.Int32> CategoryIndex { get; set; }
		
		/// <summary>
		/// The Default level at which the item will spawn. Almost always driven by an adjusto these days. Ideally should be singular. It's a long story how this ended up as a list, but there is always either going to be 0:1 of these entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationLevels")]
		public DestinyDefinitionsDestinyItemCreationEntryLevelDefinition[] CreationLevels { get; set; }
		
		/// <summary>
		/// This is a pre-compiled aggregation of item value and priceOverrideList, so that we have one place to check for what the purchaser must pay for the item. Use this instead of trying to piece together the price separately.
		///The somewhat crappy part about this is that, now that item quantity overrides have dynamic modifiers, this will not necessarily be statically true. If you were using this instead of live data, switch to using live data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencies")]
		public DestinyDefinitionsDestinyVendorItemQuantity[] Currencies { get; set; }
		
		/// <summary>
		/// The string identifier for the category selling this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayCategory")]
		public string DisplayCategory { get; set; }
		
		/// <summary>
		/// This is an index specifically into the display category, as opposed to the server-side Categories (which do not need to match or pair with each other in any way: server side categories are really just structures for common validation. Display Category will let us more easily categorize items visually)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayCategoryIndex")]
		public System.Nullable<System.Int32> DisplayCategoryIndex { get; set; }
		
		/// <summary>
		/// If this item can only be purchased by a given platform, this indicates the platform to which it is restricted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclusivity")]
		public System.Nullable<System.Int32> Exclusivity { get; set; }
		
		/// <summary>
		/// If this item can expire, this is the tooltip message to show with its expiration info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationTooltip")]
		public string ExpirationTooltip { get; set; }
		
		/// <summary>
		/// An list of indexes into the DestinyVendorDefinition.failureStrings array, indicating the possible failure strings that can be relevant for this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureIndexes")]
		public int[] FailureIndexes { get; set; }
		
		/// <summary>
		/// The inventory bucket into which this item will be placed upon purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventoryBucketHash")]
		public System.Nullable<System.UInt32> InventoryBucketHash { get; set; }
		
		/// <summary>
		/// If this sale can only be performed as the result of receiving a CRM offer, this is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCrm")]
		public System.Nullable<System.Boolean> IsCrm { get; set; }
		
		/// <summary>
		/// If this sale can only be performed as the result of an offer check, this is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isOffer")]
		public System.Nullable<System.Boolean> IsOffer { get; set; }
		
		/// <summary>
		/// The hash identifier of the item being sold (DestinyInventoryItemDefinition).
		///Note that a vendor can sell the same item in multiple ways, so don't assume that itemHash is a unique identifier for this entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// The maximum character level at which this item is available for sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumLevel")]
		public System.Nullable<System.Int32> MaximumLevel { get; set; }
		
		/// <summary>
		/// The minimum character level at which this item is available for sale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumLevel")]
		public System.Nullable<System.Int32> MinimumLevel { get; set; }
		
		/// <summary>
		/// Same as above, but for the original category indexes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalCategoryIndex")]
		public System.Nullable<System.Int32> OriginalCategoryIndex { get; set; }
		
		/// <summary>
		/// Similar to visibilityScope, it represents the most restrictive scope that determines whether the item can be purchased. It will at least be as restrictive as visibilityScope, but could be more restrictive if the item has additional purchase requirements beyond whether it is merely visible or not.
		///See DestinyGatingScope's documentation for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchasableScope")]
		public System.Nullable<System.Int32> PurchasableScope { get; set; }
		
		/// <summary>
		/// The amount you will recieve of the item described in itemHash if you make the purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// If this is populated, the purchase of this item should redirect to purchasing these other items instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirectToSaleIndexes")]
		public int[] RedirectToSaleIndexes { get; set; }
		
		/// <summary>
		/// If this item can be refunded, this is the policy for what will be refundd, how, and in what time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refundPolicy")]
		public System.Nullable<System.Int32> RefundPolicy { get; set; }
		
		/// <summary>
		/// The amount of time before refundability of the newly purchased item will expire.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refundTimeLimit")]
		public System.Nullable<System.Int32> RefundTimeLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="socketOverrides")]
		public DestinyDefinitionsDestinyVendorItemSocketOverride[] SocketOverrides { get; set; }
		
		/// <summary>
		/// *if* the category this item is in supports non-default sorting, this value should represent the sorting value to use, pre-processed and ready to go.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortValue")]
		public System.Nullable<System.Int32> SortValue { get; set; }
		
		/// <summary>
		/// If true, this item is some sort of dummy sale item that cannot actually be purchased. It may be a display only item, or some fluff left by a content designer for testing purposes, or something that got disabled because it was a terrible idea. You get the picture. We won't know *why* it can't be purchased, only that it can't be. Sorry.
		///This is also only whether it's unpurchasable as a static property according to game content. There are other reasons why an item may or may not be purchasable at runtime, so even if this isn't set to True you should trust the runtime value for this sale item over the static definition if this is unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unpurchasable")]
		public System.Nullable<System.Boolean> Unpurchasable { get; set; }
		
		/// <summary>
		/// The index into the DestinyVendorDefinition.saleList. This is what we use to refer to items being sold throughout live and definition data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorItemIndex")]
		public System.Nullable<System.Int32> VendorItemIndex { get; set; }
		
		/// <summary>
		/// The most restrictive scope that determines whether the item is available in the Vendor's inventory. See DestinyGatingScope's documentation for more information.
		///This can be determined by Unlock gating, or by whether or not the item has purchase level requirements (minimumLevel and maximumLevel properties).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibilityScope")]
		public System.Nullable<System.Int32> VisibilityScope { get; set; }
	}
	
	/// <summary>
	/// In addition to item quantity information for vendor prices, this also has any optional information that may exist about how the item's quantity can be modified. (unfortunately not information that is able to be read outside of the BNet servers, but it's there)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorItemQuantity
	{
		
		/// <summary>
		/// Indicates that this item quantity may be conditionally shown or hidden, based on various sources of state. For example: server flags, account state, or character progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasConditionalVisibility")]
		public System.Nullable<System.Boolean> HasConditionalVisibility { get; set; }
		
		/// <summary>
		/// The hash identifier for the item in question. Use it to look up the item's DestinyInventoryItemDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// If this quantity is referring to a specific instance of an item, this will have the item's instance ID. Normally, this will be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemInstanceId")]
		public System.Nullable<System.Int64> ItemInstanceId { get; set; }
		
		/// <summary>
		/// The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
	}
	
	/// <summary>
	/// The information for how the vendor purchase should override a given socket with custom plug data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorItemSocketOverride
	{
		
		/// <summary>
		/// If this is greater than -1, the number of randomized plugs on this socket will be set to this quantity instead of whatever it's set to by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="randomizedOptionsCount")]
		public System.Nullable<System.Int32> RandomizedOptionsCount { get; set; }
		
		/// <summary>
		/// If this is populated, the socket will be overridden with a specific plug.
		///If this isn't populated, it's being overridden by something more complicated that is only known by the Game Server and God, which means we can't tell you in advance what it'll be.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="singleItemHash")]
		public System.Nullable<System.UInt32> SingleItemHash { get; set; }
		
		/// <summary>
		/// This appears to be used to select which socket ultimately gets the override defined here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socketTypeHash")]
		public System.Nullable<System.UInt32> SocketTypeHash { get; set; }
	}
	
	/// <summary>
	/// These definitions represent vendors' locations and relevant display information at different times in the game.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsVendorsDestinyVendorLocationDefinition
	{
		
		/// <summary>
		/// The relative path to the background image representing this Vendor at this location, for use in a banner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundImagePath")]
		public string BackgroundImagePath { get; set; }
		
		/// <summary>
		/// The hash identifier for a Destination at which this vendor may be located. Each destination where a Vendor may exist will only ever have a single entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationHash")]
		public System.Nullable<System.UInt32> DestinationHash { get; set; }
	}
	
	/// <summary>
	/// When a vendor provides services, this is the localized name of those services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorServiceDefinition
	{
		
		/// <summary>
		/// The localized name of a service provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// BNet attempts to group vendors into similar collections. These groups aren't technically game canonical, but they are helpful for filtering vendors or showing them organized into a clean view on a webpage or app.
	///These definitions represent the groups we've built. Unlike in Destiny 1, a Vendors' group may change dynamically as the game state changes: thus, you will want to check DestinyVendorComponent responses to find a vendor's currently active Group (if you care).
	///Using this will let you group your vendors in your UI in a similar manner to how we will do grouping in the Companion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorGroupDefinition
	{
		
		/// <summary>
		/// For now, a group just has a name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryName")]
		public string CategoryName { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The recommended order in which to render the groups, Ascending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// Not terribly useful, some basic cooldown interaction info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDestinyVendorSaleItemActionBlockDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="executeSeconds")]
		public System.Nullable<System.Single> ExecuteSeconds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPositive")]
		public System.Nullable<System.Boolean> IsPositive { get; set; }
	}
	
	/// <summary>
	/// These Art Elements are meant to represent one-off visual effects overlaid on the map. Currently, we do not have a pipeline to import the assets for these overlays, so this info exists as a placeholder for when such a pipeline exists (if it ever will)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition
	{
		
		/// <summary>
		/// The position on the map of the art element.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public string Position { get; set; }
	}
	
	/// <summary>
	/// Nodes on a graph can be visually connected: this appears to be the information about which nodes to link. It appears to lack more detailed information, such as the path for that linking.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="destNodeHash")]
		public System.Nullable<System.UInt32> DestNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceNodeHash")]
		public System.Nullable<System.UInt32> SourceNodeHash { get; set; }
	}
	
	/// <summary>
	/// Represents a Map View in the director: be them overview views, destination views, or other.
	///They have nodes which map to activities, and other various visual elements that we (or others) may or may not be able to use.
	///Activity graphs, most importantly, have nodes which can have activities in various states of playability.
	///Unfortunately, activity graphs are combined at runtime with Game UI-only assets such as fragments of map images, various in-game special effects, decals etc... that we don't get in these definitions.
	///If we end up having time, we may end up trying to manually populate those here: but the last time we tried that, before the lead-up to D1, it proved to be unmaintainable as the game's content changed. So don't bet the farm on us providing that content in this definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDirectorDestinyActivityGraphDefinition
	{
		
		/// <summary>
		/// Represents one-off/special UI elements that appear on the map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artElements")]
		public DestinyDefinitionsDirectorDestinyActivityGraphArtElementDefinition[] ArtElements { get; set; }
		
		/// <summary>
		/// Represents connections between graph nodes. However, it lacks context that we'd need to make good use of it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public DestinyDefinitionsDirectorDestinyActivityGraphConnectionDefinition[] Connections { get; set; }
		
		/// <summary>
		/// Objectives can display on maps, and this is supposedly metadata for that. I have not had the time to analyze the details of what is useful within however: we could be missing important data to make this work. Expect this property to be expanded on later if possible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayObjectives")]
		public DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition[] DisplayObjectives { get; set; }
		
		/// <summary>
		/// Progressions can also display on maps, but similarly to displayObjectives we appear to lack some required information and context right now. We will have to look into it later and add more data if possible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProgressions")]
		public DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition[] DisplayProgressions { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Represents links between this Activity Graph and other ones.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedGraphs")]
		public DestinyDefinitionsDirectorDestinyLinkedGraphDefinition[] LinkedGraphs { get; set; }
		
		/// <summary>
		/// These represent the visual "nodes" on the map's view. These are the activities you can click on in the map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition[] Nodes { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// When a Graph needs to show active Objectives, this defines those objectives as well as an identifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDirectorDestinyActivityGraphDisplayObjectiveDefinition
	{
		
		/// <summary>
		/// $NOTE $amola 2017-01-19 This field is apparently something that CUI uses to manually wire up objectives to display info. I am unsure how it works.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.UInt32> Id { get; set; }
		
		/// <summary>
		/// The objective being shown on the map.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectiveHash")]
		public System.Nullable<System.UInt32> ObjectiveHash { get; set; }
	}
	
	/// <summary>
	/// When a Graph needs to show active Progressions, this defines those objectives as well as an identifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDirectorDestinyActivityGraphDisplayProgressionDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.UInt32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="progressionHash")]
		public System.Nullable<System.UInt32> ProgressionHash { get; set; }
	}
	
	/// <summary>
	/// This describes links between the current graph and others, as well as when that link is relevant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDirectorDestinyLinkedGraphDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkedGraphId")]
		public System.Nullable<System.UInt32> LinkedGraphId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkedGraphs")]
		public DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition[] LinkedGraphs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overview")]
		public string Overview { get; set; }
		
		/// <summary>
		/// Where the sausage gets made. Unlock Expressions are the foundation of the game's gating mechanics and investment-related restrictions. They can test Unlock Flags and Unlock Values for certain states, using a sufficient amount of logical operators such that unlock expressions are effectively Turing complete.
		///Use UnlockExpressionParser to evaluate expressions using an IUnlockContext parsed from Babel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlockExpression")]
		public DestinyDefinitionsDestinyUnlockExpressionDefinition UnlockExpression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDirectorDestinyLinkedGraphEntryDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="activityGraphHash")]
		public System.Nullable<System.UInt32> ActivityGraphHash { get; set; }
	}
	
	/// <summary>
	/// This is the position and other data related to nodes in the activity graph that you can click to launch activities. An Activity Graph node will only have one active Activity at a time, which will determine the activity to be launched (and, unless overrideDisplay information is provided, will also determine the tooltip and other UI related to the node)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDirectorDestinyActivityGraphNodeDefinition
	{
		
		/// <summary>
		/// The node may have various possible activities that could be active for it, however only one may be active at a time. See the DestinyActivityGraphNodeActivityDefinition for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition[] Activities { get; set; }
		
		/// <summary>
		/// The node may have various visual accents placed on it, or styles applied. These are the list of possible styles that the Node can have. The game iterates through each, looking for the first one that passes a check of the required game/character/account state in order to show that style, and then renders the node in that style.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featuringStates")]
		public DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition[] FeaturingStates { get; set; }
		
		/// <summary>
		/// An identifier for the Activity Graph Node, only guaranteed to be unique within its parent Activity Graph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeId")]
		public System.Nullable<System.UInt32> NodeId { get; set; }
		
		/// <summary>
		/// The node *may* have display properties that override the active Activity's display properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideDisplay")]
		public string OverrideDisplay { get; set; }
		
		/// <summary>
		/// The position on the map for this node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public string Position { get; set; }
		
		/// <summary>
		/// Represents possible states that the graph node can be in. These are combined with some checking that happens in the game client and server to determine which state is actually active at any given time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="states")]
		public DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry[] States { get; set; }
	}
	
	/// <summary>
	/// The actual activity to be redirected to when you click on the node. Note that a node can have many Activities attached to it: but only one will be active at any given time. The list of Node Activities will be traversed, and the first one found to be active will be displayed. This way, a node can layer multiple variants of an activity on top of each other. For instance, one node can control the weekly Crucible Playlist. There are multiple possible playlists, but only one is active for the week.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDirectorDestinyActivityGraphNodeActivityDefinition
	{
		
		/// <summary>
		/// The activity that will be activated if the user clicks on this node. Controls all activity-related information displayed on the node if it is active (the text shown in the tooltip etc)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// An identifier for this node activity. It is only guaranteed to be unique within the Activity Graph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeActivityId")]
		public System.Nullable<System.UInt32> NodeActivityId { get; set; }
	}
	
	/// <summary>
	/// Nodes can have different visual states. This object represents a single visual state ("highlight type") that a node can be in, and the unlock expression condition to determine whether it should be set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDirectorDestinyActivityGraphNodeFeaturingStateDefinition
	{
		
		/// <summary>
		/// The node can be highlighted in a variety of ways - the game iterates through these and finds the first FeaturingState that is valid at the present moment given the Game, Account, and Character state, and renders the node in that state. See the ActivityGraphNodeHighlightType enum for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highlightType")]
		public System.Nullable<System.Int32> HighlightType { get; set; }
	}
	
	/// <summary>
	/// Represents a single state that a graph node might end up in. Depending on what's going on in the game, graph nodes could be shown in different ways or even excluded from view entirely.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsDirectorDestinyActivityGraphNodeStateEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<System.Int32> State { get; set; }
	}
	
	/// <summary>
	/// Represents types of Energy that can be used for costs and payments related to Armor 2.0 mods.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsEnergyTypesDestinyEnergyTypeDefinition
	{
		
		/// <summary>
		/// If this Energy Type can be used for determining the Type of Energy that an item can consume, this is the hash for the DestinyInvestmentStatDefinition that represents the stat which holds the Capacity for that energy type. (Note that this is optional because "Any" is a valid cost, but not valid for Capacity - an Armor must have a specific Energy Type for determining the energy type that the Armor is restricted to use)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacityStatHash")]
		public System.Nullable<System.UInt32> CapacityStatHash { get; set; }
		
		/// <summary>
		/// If this Energy Type can be used as a cost to pay for socketing Armor 2.0 items, this is the hash for the DestinyInvestmentStatDefinition that stores the plug's raw cost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costStatHash")]
		public System.Nullable<System.UInt32> CostStatHash { get; set; }
		
		/// <summary>
		/// The description of the energy type, icon etc...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// We have an enumeration for Energy types for quick reference. This is the current definition's Energy type enum value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enumValue")]
		public System.Nullable<System.Int32> EnumValue { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// If TRUE, the game shows this Energy type's icon. Otherwise, it doesn't. Whether you show it or not is up to you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showIcon")]
		public System.Nullable<System.Boolean> ShowIcon { get; set; }
		
		/// <summary>
		/// A variant of the icon that is transparent and colorless.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transparentIconPath")]
		public string TransparentIconPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsGuardianRanksDestinyGuardianRankConstantsDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconBackgrounds")]
		public DestinyDefinitionsGuardianRanksDestinyGuardianRankIconBackgroundsDefinition IconBackgrounds { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rankCount")]
		public System.Nullable<System.Int32> RankCount { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rootNodeHash")]
		public System.Nullable<System.UInt32> RootNodeHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsGuardianRanksDestinyGuardianRankIconBackgroundsDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="backgroundEmptyBlueGradientBorderedImagePath")]
		public string BackgroundEmptyBlueGradientBorderedImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundEmptyBorderedImagePath")]
		public string BackgroundEmptyBorderedImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundFilledBlueBorderedImagePath")]
		public string BackgroundFilledBlueBorderedImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundFilledBlueGradientBorderedImagePath")]
		public string BackgroundFilledBlueGradientBorderedImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundFilledBlueLowAlphaImagePath")]
		public string BackgroundFilledBlueLowAlphaImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundFilledBlueMediumAlphaImagePath")]
		public string BackgroundFilledBlueMediumAlphaImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundFilledGrayHeavyAlphaBorderedImagePath")]
		public string BackgroundFilledGrayHeavyAlphaBorderedImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundFilledGrayMediumAlphaBorderedImagePath")]
		public string BackgroundFilledGrayMediumAlphaBorderedImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundFilledWhiteImagePath")]
		public string BackgroundFilledWhiteImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundFilledWhiteMediumAlphaImagePath")]
		public string BackgroundFilledWhiteMediumAlphaImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundPlateBlackAlphaImagePath")]
		public string BackgroundPlateBlackAlphaImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundPlateBlackImagePath")]
		public string BackgroundPlateBlackImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundPlateWhiteImagePath")]
		public string BackgroundPlateWhiteImagePath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsGuardianRanksDestinyGuardianRankDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="foregroundImagePath")]
		public string ForegroundImagePath { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overlayImagePath")]
		public string OverlayImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overlayMaskImagePath")]
		public string OverlayMaskImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentationNodeHash")]
		public System.Nullable<System.UInt32> PresentationNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rankNumber")]
		public System.Nullable<System.Int32> RankNumber { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// Items can have Energy Capacity, and plugs can provide that capacity such as on a piece of Armor in Armor 2.0. This is how much "Energy" can be spent on activating plugs for this item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsItemsDestinyEnergyCapacityEntry
	{
		
		/// <summary>
		/// How much energy capacity this plug provides.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacityValue")]
		public System.Nullable<System.Int32> CapacityValue { get; set; }
		
		/// <summary>
		/// The Energy Type for this energy capacity, in enum form for easy use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyType")]
		public System.Nullable<System.Int32> EnergyType { get; set; }
		
		/// <summary>
		/// Energy provided by a plug is always of a specific type - this is the hash identifier for the energy type for which it provides Capacity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyTypeHash")]
		public System.Nullable<System.UInt32> EnergyTypeHash { get; set; }
	}
	
	/// <summary>
	/// Some plugs cost Energy, which is a stat on the item that can be increased by other plugs (that, at least in Armor 2.0, have a "masterworks-like" mechanic for upgrading). If a plug has costs, the details of that cost are defined here.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsItemsDestinyEnergyCostEntry
	{
		
		/// <summary>
		/// The Energy cost for inserting this plug.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyCost")]
		public System.Nullable<System.Int32> EnergyCost { get; set; }
		
		/// <summary>
		/// The type of energy that this plug costs, in enum form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyType")]
		public System.Nullable<System.Int32> EnergyType { get; set; }
		
		/// <summary>
		/// The type of energy that this plug costs, as a reference to the DestinyEnergyTypeDefinition of the energy type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyTypeHash")]
		public System.Nullable<System.UInt32> EnergyTypeHash { get; set; }
	}
	
	/// <summary>
	/// If an item is a Plug, its DestinyInventoryItemDefinition.plug property will be populated with an instance of one of these bad boys.
	///This gives information about when it can be inserted, what the plug's category is (and thus whether it is compatible with a socket... see DestinySocketTypeDefinition for information about Plug Categories and socket compatibility), whether it is enabled and other Plug info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsItemsDestinyItemPlugDefinition
	{
		
		/// <summary>
		/// The alternate plug of the plug: only applies when the item is in states that only the server can know about and control, unfortunately. See AlternateUiPlugLabel for the related label info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternatePlugStyle")]
		public System.Nullable<System.Int32> AlternatePlugStyle { get; set; }
		
		/// <summary>
		/// If the plug meets certain state requirements, it may have an alternative label applied to it. This is the alternative label that will be applied in such a situation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alternateUiPlugLabel")]
		public string AlternateUiPlugLabel { get; set; }
		
		/// <summary>
		/// It's not enough for the plug to be inserted. It has to be enabled as well. For it to be enabled, it may require materials. This is the hash identifier for the DestinyMaterialRequirementSetDefinition for those requirements, if there is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledMaterialRequirementHash")]
		public System.Nullable<System.UInt32> EnabledMaterialRequirementHash { get; set; }
		
		/// <summary>
		/// The rules around whether the plug, once inserted, is enabled and providing its benefits.
		///The live data DestinyItemPlugComponent.enableFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledRules")]
		public DestinyDefinitionsItemsDestinyPlugRuleDefinition[] EnabledRules { get; set; }
		
		/// <summary>
		/// IF not null, this plug provides Energy capacity to the item in which it is socketed. In Armor 2.0 for example, is implemented in a similar way to Masterworks, where visually it's a single area of the UI being clicked on to "Upgrade" to higher energy levels, but it's actually socketing new plugs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyCapacity")]
		public string EnergyCapacity { get; set; }
		
		/// <summary>
		/// IF not null, this plug has an energy cost. This contains the details of that cost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyCost")]
		public string EnergyCost { get; set; }
		
		/// <summary>
		/// If inserting this plug requires materials, this is the hash identifier for looking up the DestinyMaterialRequirementSetDefinition for those requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertionMaterialRequirementHash")]
		public System.Nullable<System.UInt32> InsertionMaterialRequirementHash { get; set; }
		
		/// <summary>
		/// The rules around when this plug can be inserted into a socket, aside from the socket's individual restrictions.
		///The live data DestinyItemPlugComponent.insertFailIndexes will be an index into this array, so you can pull out the failure strings appropriate for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertionRules")]
		public DestinyDefinitionsItemsDestinyPlugRuleDefinition[] InsertionRules { get; set; }
		
		/// <summary>
		/// If TRUE, this plug is used for UI display purposes only, and doesn't have any interesting effects of its own.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDummyPlug")]
		public System.Nullable<System.Boolean> IsDummyPlug { get; set; }
		
		/// <summary>
		/// If you successfully socket the item, this will determine whether or not you get "refunded" on the plug.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onActionRecreateSelf")]
		public System.Nullable<System.Boolean> OnActionRecreateSelf { get; set; }
		
		/// <summary>
		/// Do you ever get the feeling that a system has become so overburdened by edge cases that it probably should have become some other system entirely? So do I!
		///In totally unrelated news, Plugs can now override properties of their parent items. This is some of the relevant definition data for those overrides.
		///If this is populated, it will have the override data to be applied when this plug is applied to an item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentItemOverride")]
		public string ParentItemOverride { get; set; }
		
		/// <summary>
		/// Indicates the rules about when this plug can be used. See the PlugAvailabilityMode enumeration for more information!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugAvailability")]
		public System.Nullable<System.Int32> PlugAvailability { get; set; }
		
		/// <summary>
		/// The hash for the plugCategoryIdentifier. You can use this instead if you wish: I put both in the definition for debugging purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugCategoryHash")]
		public System.Nullable<System.UInt32> PlugCategoryHash { get; set; }
		
		/// <summary>
		/// The string identifier for the plug's category. Use the socket's DestinySocketTypeDefinition.plugWhitelist to determine whether this plug can be inserted into the socket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugCategoryIdentifier")]
		public string PlugCategoryIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plugStyle")]
		public System.Nullable<System.Int32> PlugStyle { get; set; }
		
		/// <summary>
		/// In the game, if you're inspecting a plug item directly, this will be the item shown with the plug attached. Look up the DestinyInventoryItemDefinition for this hash for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previewItemOverrideHash")]
		public System.Nullable<System.UInt32> PreviewItemOverrideHash { get; set; }
		
		/// <summary>
		/// Plugs can have arbitrary, UI-defined identifiers that the UI designers use to determine the style applied to plugs. Unfortunately, we have neither a definitive list of these labels nor advance warning of when new labels might be applied or how that relates to how they get rendered. If you want to, you can refer to known labels to change your own styles: but know that new ones can be created arbitrarily, and we have no way of associating the labels with any specific UI style guidance... you'll have to piece that together on your end. Or do what we do, and just show plugs more generically, without specialized styles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uiPlugLabel")]
		public string UiPlugLabel { get; set; }
	}
	
	/// <summary>
	/// Dictates a rule around whether the plug is enabled or insertable.
	///In practice, the live Destiny data will refer to these entries by index. You can then look up that index in the appropriate property (enabledRules or insertionRules) to get the localized string for the failure message if it failed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsItemsDestinyPlugRuleDefinition
	{
		
		/// <summary>
		/// The localized string to show if this rule fails.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureMessage")]
		public string FailureMessage { get; set; }
	}
	
	/// <summary>
	/// Defines the tier type of an item. Mostly this provides human readable properties for types like Common, Rare, etc...
	///It also provides some base data for infusion that could be useful.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsItemsDestinyItemTierTypeDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this tier defines infusion properties, they will be contained here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="infusionProcess")]
		public string InfusionProcess { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsItemsDestinyItemTierTypeInfusionBlock
	{
		
		/// <summary>
		/// The default portion of quality that will transfer from the infuser to the infusee item. (InfuserQuality - InfuseeQuality) * baseQualityTransferRatio = base quality transferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseQualityTransferRatio")]
		public System.Nullable<System.Single> BaseQualityTransferRatio { get; set; }
		
		/// <summary>
		/// As long as InfuserQuality > InfuseeQuality, the amount of quality bestowed is guaranteed to be at least this value, even if the transferRatio would dictate that it should be less. The total amount of quality that ends up in the Infusee cannot exceed the Infuser's quality however (for instance, if you infuse a 300 item with a 301 item and the minimum quality increment is 10, the infused item will not end up with 310 quality)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumQualityIncrement")]
		public System.Nullable<System.Int32> MinimumQualityIncrement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsItemsDestinyParentItemOverride
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalEquipRequirementsDisplayStrings")]
		public string[] AdditionalEquipRequirementsDisplayStrings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipIcon")]
		public string PipIcon { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsLoadoutsDestinyLoadoutColorDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorImagePath")]
		public string ColorImagePath { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsLoadoutsDestinyLoadoutConstantsDefinition
	{
		
		/// <summary>
		/// This is a color-inverted version of the whiteIconImagePath.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blackIconImagePath")]
		public string BlackIconImagePath { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// A list of the loadout color hashes in index order, for convenience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadoutColorHashes")]
		public int[] LoadoutColorHashes { get; set; }
		
		/// <summary>
		/// The maximum number of loadouts available to each character. The loadouts component API response can return fewer loadouts than this, as more loadouts are unlocked by reaching higher Guardian Ranks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadoutCountPerCharacter")]
		public System.Nullable<System.Int32> LoadoutCountPerCharacter { get; set; }
		
		/// <summary>
		/// A list of the loadout icon hashes in index order, for convenience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadoutIconHashes")]
		public int[] LoadoutIconHashes { get; set; }
		
		/// <summary>
		/// A list of the loadout name hashes in index order, for convenience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadoutNameHashes")]
		public int[] LoadoutNameHashes { get; set; }
		
		/// <summary>
		/// A list of the socket category hashes to be filtered out of loadout item preview displays.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadoutPreviewFilterOutSocketCategoryHashes")]
		public int[] LoadoutPreviewFilterOutSocketCategoryHashes { get; set; }
		
		/// <summary>
		/// A list of the socket type hashes to be filtered out of loadout item preview displays.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadoutPreviewFilterOutSocketTypeHashes")]
		public int[] LoadoutPreviewFilterOutSocketTypeHashes { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// This is the same icon as the one in the display properties, offered here as well with a more descriptive name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whiteIconImagePath")]
		public string WhiteIconImagePath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsLoadoutsDestinyLoadoutIconDefinition
	{
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconImagePath")]
		public string IconImagePath { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsLoadoutsDestinyLoadoutNameDefinition
	{
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// These are definitions for in-game "Lore," meant to be narrative enhancements of the game experience.
	///DestinyInventoryItemDefinitions for interesting items point to these definitions, but nothing's stopping you from scraping all of these and doing something cool with them. If they end up having cool data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsLoreDestinyLoreDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMetricsDestinyMetricDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowerValueIsBetter")]
		public System.Nullable<System.Boolean> LowerValueIsBetter { get; set; }
		
		/// <summary>
		/// A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentNodeHashes")]
		public int[] ParentNodeHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentationNodeType")]
		public System.Nullable<System.Int32> PresentationNodeType { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trackingObjectiveHash")]
		public System.Nullable<System.UInt32> TrackingObjectiveHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="traitHashes")]
		public int[] TraitHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="traitIds")]
		public string[] TraitIds { get; set; }
	}
	
	/// <summary>
	/// Milestones can have associated activities which provide additional information about the context, challenges, modifiers, state etc... related to this Milestone. 
	///Information we need to be able to return that data is defined here, along with Tier data to establish a relationship between a conceptual Activity and its difficulty levels and variants.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition
	{
		
		/// <summary>
		/// The "Conceptual" activity hash. Basically, we picked the lowest level activity and are treating it as the canonical definition of the activity for rendering purposes.
		///If you care about the specific difficulty modes and variations, use the activities under "Variants".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conceptualActivityHash")]
		public System.Nullable<System.UInt32> ConceptualActivityHash { get; set; }
		
		/// <summary>
		/// A milestone-referenced activity can have many variants, such as Tiers or alternative modes of play.
		///Even if there is only a single variant, the details for these are represented within as a variant definition.
		///It is assumed that, if this DestinyMilestoneActivityDefinition is active, then all variants should be active.
		///If a Milestone could ever split the variants' active status conditionally, they should all have their own DestinyMilestoneActivityDefinition instead! The potential duplication will be worth it for the obviousness of processing and use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public System.Collections.Generic.Dictionary<string, DestinyDefinitionsMilestonesDestinyMilestoneActivityVariantDefinition> Variants { get; set; }
	}
	
	/// <summary>
	/// Represents a variant on an activity for a Milestone: a specific difficulty tier, or a specific activity variant for example.
	///These will often have more specific details, such as an associated Guided Game, progression steps, tier-specific rewards, and custom values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneActivityVariantDefinition
	{
		
		/// <summary>
		/// The hash to use for looking up the variant Activity's definition (DestinyActivityDefinition), where you can find its distinguishing characteristics such as difficulty level and recommended light level. 
		///Frequently, that will be the only distinguishing characteristics in practice, which is somewhat of a bummer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// If you care to do so, render the variants in the order prescribed by this value.
		///When you combine live Milestone data with the definition, the order becomes more useful because you'll be cross-referencing between the definition and live data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition
	{
		
		/// <summary>
		/// If the activity and its challenge is visible on any of these nodes, it will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityGraphNodes")]
		public DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityGraphNodeEntry[] ActivityGraphNodes { get; set; }
		
		/// <summary>
		/// The activity for which this challenge is active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="challenges")]
		public DestinyDefinitionsMilestonesDestinyMilestoneChallengeDefinition[] Challenges { get; set; }
		
		/// <summary>
		/// Phases related to this activity, if there are any.
		///These will be listed in the order in which they will appear in the actual activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phases")]
		public DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityPhase[] Phases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityGraphNodeEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="activityGraphHash")]
		public System.Nullable<System.UInt32> ActivityGraphHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activityGraphNodeHash")]
		public System.Nullable<System.UInt32> ActivityGraphNodeHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneChallengeDefinition
	{
		
		/// <summary>
		/// The challenge related to this milestone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challengeObjectiveHash")]
		public System.Nullable<System.UInt32> ChallengeObjectiveHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityPhase
	{
		
		/// <summary>
		/// The hash identifier of the activity's phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phaseHash")]
		public System.Nullable<System.UInt32> PhaseHash { get; set; }
	}
	
	/// <summary>
	/// Milestones are an in-game concept where they're attempting to tell you what you can do next in-game.
	///If that sounds a lot like Advisors in Destiny 1, it is! So we threw out Advisors in the Destiny 2 API and tacked all of the data we would have put on Advisors onto Milestones instead.
	///Each Milestone represents something going on in the game right now:
	///- A "ritual activity" you can perform, like nightfall
	///- A "special event" that may have activities related to it, like Taco Tuesday (there's no Taco Tuesday in Destiny 2)
	///- A checklist you can fulfill, like helping your Clan complete all of its weekly objectives
	///- A tutorial quest you can play through, like the introduction to the Crucible.
	///Most of these milestones appear in game as well. Some of them are BNet only, because we're so extra. You're welcome.
	///There are some important caveats to understand about how we currently render Milestones and their deficiencies. The game currently doesn't have any content that actually tells you oughtright *what* the Milestone is: that is to say, what you'll be doing. The best we get is either a description of the overall Milestone, or of the Quest that the Milestone is having you partake in: which is usually something that assumes you already know what it's talking about, like "Complete 5 Challenges". 5 Challenges for what? What's a challenge? These are not questions that the Milestone data will answer for you unfortunately.
	///This isn't great, and in the future I'd like to add some custom text to give you more contextual information to pass on to your users. But for now, you can do what we do to render what little display info we do have:
	///Start by looking at the currently active quest (ideally, you've fetched DestinyMilestone or DestinyPublicMilestone data from the API, so you know the currently active quest for the Milestone in question). Look up the Quests property in the Milestone Definition, and check if it has display properties. If it does, show that as the description of the Milestone. If it doesn't, fall back on the Milestone's description.
	///This approach will let you avoid, whenever possible, the even less useful (and sometimes nonexistant) milestone-level names and descriptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneDefinition
	{
		
		/// <summary>
		/// A Milestone can now be represented by one or more activities directly (without a backing Quest), and that activity can have many challenges, modifiers, and related to it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public DestinyDefinitionsMilestonesDestinyMilestoneChallengeActivityDefinition[] Activities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultOrder")]
		public System.Nullable<System.Int32> DefaultOrder { get; set; }
		
		/// <summary>
		/// A hint to the UI to indicate what to show as the display properties for this Milestone when showing "Live" milestone data. Feel free to show more than this if desired: this hint is meant to simplify our own UI, but it may prove useful to you as well.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayPreference")]
		public System.Nullable<System.Int32> DisplayPreference { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// If TRUE, "Explore Destiny" (the front page of BNet and the companion app) prioritize using the activity image over any overriding Quest or Milestone image provided. This unfortunate hack is brought to you by Trials of The Nine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="explorePrioritizesActivityImage")]
		public System.Nullable<System.Boolean> ExplorePrioritizesActivityImage { get; set; }
		
		/// <summary>
		/// If the milestone has a friendly identifier for association with other features - such as Recruiting - that identifier can be found here. This is "friendly" in that it looks better in a URL than whatever the identifier for the Milestone actually is.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendlyName")]
		public string FriendlyName { get; set; }
		
		/// <summary>
		/// A shortcut for clients - and the server - to understand whether we can predict the start and end dates for this event. In practice, there are multiple ways that an event could have predictable date ranges, but not all events will be able to be predicted via any mechanism (for instance, events that are manually triggered on and off)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasPredictableDates")]
		public System.Nullable<System.Boolean> HasPredictableDates { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// A custom image someone made just for the milestone. Isn't that special?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Some milestones are explicit objectives that you can see and interact with in the game. Some milestones are more conceptual, built by BNet to help advise you on activities and events that happen in-game but that aren't explicitly shown in game as Milestones. If this is TRUE, you can see this as a milestone in the game. If this is FALSE, it's an event or activity you can participate in, but you won't see it as a Milestone in the game's UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isInGameMilestone")]
		public System.Nullable<System.Boolean> IsInGameMilestone { get; set; }
		
		/// <summary>
		/// An enumeration listing one of the possible types of milestones. Check out the DestinyMilestoneType enum for more info!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="milestoneType")]
		public System.Nullable<System.Int32> MilestoneType { get; set; }
		
		/// <summary>
		/// The full set of possible Quests that give the overview of the Milestone event/activity in question. Only one of these can be active at a time for a given Conceptual Milestone, but many of them may be "available" for the user to choose from. (for instance, with Milestones you can choose from the three available Quests, but only one can be active at a time) Keyed by the quest item.
		///As of Forsaken (~September 2018), Quest-style Milestones are being removed for many types of activities. There will likely be further revisions to the Milestone concept in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quests")]
		public System.Collections.Generic.Dictionary<string, DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition> Quests { get; set; }
		
		/// <summary>
		/// If True, then the Milestone has been integrated with BNet's recruiting feature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recruitable")]
		public System.Nullable<System.Boolean> Recruitable { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// If this milestone can provide rewards, this will define the categories into which the individual reward entries are placed.
		///This is keyed by the Category's hash, which is only guaranteed to be unique within a given Milestone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewards")]
		public System.Collections.Generic.Dictionary<string, DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition> Rewards { get; set; }
		
		/// <summary>
		/// If TRUE, this entry should be returned in the list of milestones for the "Explore Destiny" (i.e. new BNet homepage) features of Bungie.net (as long as the underlying event is active) Note that this is a property specifically used by BNet and the companion app for the "Live Events" feature of the front page/welcome view: it's not a reflection of what you see in-game.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showInExplorer")]
		public System.Nullable<System.Boolean> ShowInExplorer { get; set; }
		
		/// <summary>
		/// Determines whether we'll show this Milestone in the user's personal Milestones list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showInMilestones")]
		public System.Nullable<System.Boolean> ShowInMilestones { get; set; }
		
		/// <summary>
		/// Sometimes, milestones will have arbitrary values associated with them that are of interest to us or to third party developers. This is the collection of those values' definitions, keyed by the identifier of the value and providing useful definition information such as localizable names and descriptions for the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public System.Collections.Generic.Dictionary<string, DestinyDefinitionsMilestonesDestinyMilestoneValueDefinition> Values { get; set; }
		
		/// <summary>
		/// Sometimes, milestones will have rewards provided by Vendors. This definition gives the information needed to understand which vendors are relevant, the order in which they should be returned if order matters, and the conditions under which the Vendor is relevant to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendors")]
		public DestinyDefinitionsMilestonesDestinyMilestoneVendorDefinition[] Vendors { get; set; }
		
		/// <summary>
		/// If you're going to show Vendors for the Milestone, you can use this as a localized "header" for the section where you show that vendor data. It'll provide a more context-relevant clue about what the vendor's role is in the Milestone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorsDisplayTitle")]
		public string VendorsDisplayTitle { get; set; }
	}
	
	/// <summary>
	/// Any data we need to figure out whether this Quest Item is the currently active one for the conceptual Milestone. Even just typing this description, I already regret it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneQuestDefinition
	{
		
		/// <summary>
		/// The full set of all possible "conceptual activities" that are related to this Milestone. Tiers or alternative modes of play within these conceptual activities will be defined as sub-entities. Keyed by the Conceptual Activity Hash. Use the key to look up DestinyActivityDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public System.Collections.Generic.Dictionary<string, DestinyDefinitionsMilestonesDestinyMilestoneActivityDefinition> Activities { get; set; }
		
		/// <summary>
		/// Sometimes, a Milestone's quest is related to an entire Destination rather than a specific activity. In that situation, this will be the hash of that Destination. Hotspots are currently the only Milestones that expose this data, but that does not preclude this data from being returned for other Milestones in the future.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationHash")]
		public System.Nullable<System.UInt32> DestinationHash { get; set; }
		
		/// <summary>
		/// The individual quests may have different definitions from the overall milestone: if there's a specific active quest, use these displayProperties instead of that of the overall DestinyMilestoneDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// If populated, this image can be shown instead of the generic milestone's image when this quest is live, or it can be used to show a background image for the quest itself that differs from that of the Activity or the Milestone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideImage")]
		public string OverrideImage { get; set; }
		
		/// <summary>
		/// The item representing this Milestone quest. Use this hash to look up the DestinyInventoryItemDefinition for the quest to find its steps and human readable data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questItemHash")]
		public System.Nullable<System.UInt32> QuestItemHash { get; set; }
		
		/// <summary>
		/// The rewards you will get for completing this quest, as best as we could extract them from our data. Sometimes, it'll be a decent amount of data. Sometimes, it's going to be sucky. Sorry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questRewards")]
		public string QuestRewards { get; set; }
	}
	
	/// <summary>
	/// The definition of a category of rewards, that contains many individual rewards.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneRewardCategoryDefinition
	{
		
		/// <summary>
		/// Identifies the reward category. Only guaranteed unique within this specific component!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryHash")]
		public System.Nullable<System.UInt32> CategoryHash { get; set; }
		
		/// <summary>
		/// The string identifier for the category, if you want to use it for some end. Guaranteed unique within the specific component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryIdentifier")]
		public string CategoryIdentifier { get; set; }
		
		/// <summary>
		/// Hopefully this is obvious by now.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// If you want to use BNet's recommended order for rendering categories programmatically, use this value and compare it to other categories to determine the order in which they should be rendered. I don't feel great about putting this here, I won't lie.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// If this milestone can provide rewards, this will define the sets of rewards that can be earned, the conditions under which they can be acquired, internal data that we'll use at runtime to determine whether you've already earned or redeemed this set of rewards, and the category that this reward should be placed under.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardEntries")]
		public System.Collections.Generic.Dictionary<string, DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition> RewardEntries { get; set; }
	}
	
	/// <summary>
	/// The definition of a specific reward, which may be contained in a category of rewards and that has optional information about how it is obtained.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneRewardEntryDefinition
	{
		
		/// <summary>
		/// For us to bother returning this info, we should be able to return some kind of information about why these rewards are grouped together. This is ideally that information. Look at how confident I am that this will always remain true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// The items you will get as rewards, and how much of it you'll get.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DestinyDestinyItemQuantity[] Items { get; set; }
		
		/// <summary>
		/// If you want to follow BNet's ordering of these rewards, use this number within a given category to order the rewards. Yeah, I know. I feel dirty too.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// The identifier for this reward entry. Runtime data will refer to reward entries by this hash. Only guaranteed unique within the specific Milestone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardEntryHash")]
		public System.Nullable<System.UInt32> RewardEntryHash { get; set; }
		
		/// <summary>
		/// The string identifier, if you care about it. Only guaranteed unique within the specific Milestone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardEntryIdentifier")]
		public string RewardEntryIdentifier { get; set; }
		
		/// <summary>
		/// If this reward is redeemed at a Vendor, this is the hash of the Vendor to go to in order to redeem the reward. Use this hash to look up the DestinyVendorDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHash")]
		public System.Nullable<System.UInt32> VendorHash { get; set; }
	}
	
	/// <summary>
	/// The definition for information related to a key/value pair that is relevant for a particular Milestone or component within the Milestone. 
	///This lets us more flexibly pass up information that's useful to someone, even if it's not necessarily us.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneValueDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	/// <summary>
	/// If the Milestone or a component has vendors whose inventories could/should be displayed that are relevant to it, this will return the vendor in question. 
	///It also contains information we need to determine whether that vendor is actually relevant at the moment, given the user's current state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneVendorDefinition
	{
		
		/// <summary>
		/// The hash of the vendor whose wares should be shown as associated with the Milestone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHash")]
		public System.Nullable<System.UInt32> VendorHash { get; set; }
	}
	
	/// <summary>
	/// A hint for the UI as to what display information ought to be shown. Defaults to showing the static MilestoneDefinition's display properties.
	/// If for some reason the indicated property is not populated, fall back to the MilestoneDefinition.displayProperties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDefinitionsMilestonesDestinyMilestoneDisplayPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// A subclass of DestinyItemQuantity, that provides not just the item and its quantity but also information that BNet can - at some point - use internally to provide more robust runtime information about the item's qualities.
	///If you want it, please ask! We're just out of time to wire it up right now. Or a clever person just may do it with our existing endpoints.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem
	{
		
		/// <summary>
		/// Indicates that this item quantity may be conditionally shown or hidden, based on various sources of state. For example: server flags, account state, or character progress.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasConditionalVisibility")]
		public System.Nullable<System.Boolean> HasConditionalVisibility { get; set; }
		
		/// <summary>
		/// The hash identifier for the item in question. Use it to look up the item's DestinyInventoryItemDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// If this quantity is referring to a specific instance of an item, this will have the item's instance ID. Normally, this will be null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemInstanceId")]
		public System.Nullable<System.Int64> ItemInstanceId { get; set; }
		
		/// <summary>
		/// The amount of the item needed/available depending on the context of where DestinyItemQuantity is being used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// The quest reward item *may* be associated with a vendor. If so, this is that vendor. Use this hash to look up the DestinyVendorDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHash")]
		public System.Nullable<System.UInt32> VendorHash { get; set; }
		
		/// <summary>
		/// The quest reward item *may* be associated with a vendor. If so, this is the index of the item being sold, which we can use at runtime to find instanced item information for the reward item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorItemIndex")]
		public System.Nullable<System.Int32> VendorItemIndex { get; set; }
	}
	
	/// <summary>
	/// If rewards are given in a quest - as opposed to overall in the entire Milestone - there's way less to track. We're going to simplify this contract as a result. However, this also gives us the opportunity to potentially put more than just item information into the reward data if we're able to mine it out in the future. Remember this if you come back and ask "why are quest reward items nested inside of their own class?"
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardsDefinition
	{
		
		/// <summary>
		/// The items that represent your reward for completing the quest.
		///Be warned, these could be "dummy" items: items that are only used to render a good-looking in-game tooltip, but aren't the actual items themselves.
		///For instance, when experience is given there's often a dummy item representing "experience", with quantity being the amount of experience you got. We don't have a programmatic association between those and whatever Progression is actually getting that experience... yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DestinyDefinitionsMilestonesDestinyMilestoneQuestRewardItem[] Items { get; set; }
	}
	
	/// <summary>
	/// The type of milestone. Milestones can be Tutorials, one-time/triggered/non-repeating but not necessarily tutorials, or Repeating Milestones.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDefinitionsMilestonesDestinyMilestoneType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
	}
	
	/// <summary>
	/// Defines a 'power cap' (limit) for gear items, based on the rarity tier and season of release.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsPowerCapsDestinyPowerCapDefinition
	{
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The raw value for a power cap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="powerCap")]
		public System.Nullable<System.Int32> PowerCap { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// This is the base class for all presentation system children. Presentation Nodes, Records, Collectibles, and Metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsPresentationDestinyPresentationNodeBaseDefinition
	{
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentNodeHashes")]
		public int[] ParentNodeHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentationNodeType")]
		public System.Nullable<System.Int32> PresentationNodeType { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="traitHashes")]
		public int[] TraitHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="traitIds")]
		public string[] TraitIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry
	{
		
		/// <summary>
		/// Use this value to sort the presentation node children in ascending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeDisplayPriority")]
		public System.Nullable<System.UInt32> NodeDisplayPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentationNodeHash")]
		public System.Nullable<System.UInt32> PresentationNodeHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsPresentationDestinyPresentationNodeChildEntryBase
	{
		
		/// <summary>
		/// Use this value to sort the presentation node children in ascending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeDisplayPriority")]
		public System.Nullable<System.UInt32> NodeDisplayPriority { get; set; }
	}
	
	/// <summary>
	/// As/if presentation nodes begin to host more entities as children, these lists will be added to. One list property exists per type of entity that can be treated as a child of this presentation node, and each holds the identifier of the entity and any associated information needed to display the UI for that entity (if anything)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsPresentationDestinyPresentationNodeChildrenBlock
	{
		
		[System.Runtime.Serialization.DataMember(Name="collectibles")]
		public DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry[] Collectibles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="craftables")]
		public DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry[] Craftables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry[] Metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentationNodes")]
		public DestinyDefinitionsPresentationDestinyPresentationNodeChildEntry[] PresentationNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="records")]
		public DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry[] Records { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsPresentationDestinyPresentationNodeCollectibleChildEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="collectibleHash")]
		public System.Nullable<System.UInt32> CollectibleHash { get; set; }
		
		/// <summary>
		/// Use this value to sort the presentation node children in ascending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeDisplayPriority")]
		public System.Nullable<System.UInt32> NodeDisplayPriority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsPresentationDestinyPresentationNodeCraftableChildEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="craftableItemHash")]
		public System.Nullable<System.UInt32> CraftableItemHash { get; set; }
		
		/// <summary>
		/// Use this value to sort the presentation node children in ascending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeDisplayPriority")]
		public System.Nullable<System.UInt32> NodeDisplayPriority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsPresentationDestinyPresentationNodeMetricChildEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="metricHash")]
		public System.Nullable<System.UInt32> MetricHash { get; set; }
		
		/// <summary>
		/// Use this value to sort the presentation node children in ascending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeDisplayPriority")]
		public System.Nullable<System.UInt32> NodeDisplayPriority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsPresentationDestinyPresentationNodeRecordChildEntry
	{
		
		/// <summary>
		/// Use this value to sort the presentation node children in ascending order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeDisplayPriority")]
		public System.Nullable<System.UInt32> NodeDisplayPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recordHash")]
		public System.Nullable<System.UInt32> RecordHash { get; set; }
	}
	
	/// <summary>
	/// A PresentationNode is an entity that represents a logical grouping of other entities visually/organizationally.
	///For now, Presentation Nodes may contain the following... but it may be used for more in the future:
	///- Collectibles - Records (Or, as the public will call them, "Triumphs." Don't ask me why we're overloading the term "Triumph", it still hurts me to think about it) - Metrics (aka Stat Trackers) - Other Presentation Nodes, allowing a tree of Presentation Nodes to be created
	///Part of me wants to break these into conceptual definitions per entity being collected, but the possibility of these different types being mixed in the same UI and the possibility that it could actually be more useful to return the "bare metal" presentation node concept has resulted in me deciding against that for the time being.
	///We'll see if I come to regret this as well.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsPresentationDestinyPresentationNodeDefinition
	{
		
		/// <summary>
		/// The child entities contained by this presentation node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public string Children { get; set; }
		
		/// <summary>
		/// If this presentation node has an associated "Record" that you can accomplish for completing its children, this is the identifier of that Record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionRecordHash")]
		public System.Nullable<System.UInt32> CompletionRecordHash { get; set; }
		
		/// <summary>
		/// If this presentation node has children, but the game doesn't let you inspect the details of those children, that is indicated here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableChildSubscreenNavigation")]
		public System.Nullable<System.Boolean> DisableChildSubscreenNavigation { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// A hint for how to display this presentation node when it's shown in a list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayStyle")]
		public System.Nullable<System.Int32> DisplayStyle { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxCategoryRecordScore")]
		public System.Nullable<System.Int32> MaxCategoryRecordScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nodeType")]
		public System.Nullable<System.Int32> NodeType { get; set; }
		
		/// <summary>
		/// If this presentation node shows a related objective (for instance, if it tracks the progress of its children), the objective being tracked is indicated here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectiveHash")]
		public System.Nullable<System.UInt32> ObjectiveHash { get; set; }
		
		/// <summary>
		/// The original icon for this presentation node, before we futzed with it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalIcon")]
		public string OriginalIcon { get; set; }
		
		/// <summary>
		/// A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentNodeHashes")]
		public int[] ParentNodeHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentationNodeType")]
		public System.Nullable<System.Int32> PresentationNodeType { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// The requirements for being able to interact with this presentation node and its children.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirements")]
		public string Requirements { get; set; }
		
		/// <summary>
		/// Some presentation nodes are meant to be explicitly shown on the "root" or "entry" screens for the feature to which they are related. You should use this icon when showing them on such a view, if you have a similar "entry point" view in your UI. If you don't have a UI, then I guess it doesn't matter either way does it?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rootViewIcon")]
		public string RootViewIcon { get; set; }
		
		/// <summary>
		/// Indicates whether this presentation node's state is determined on a per-character or on an account-wide basis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<System.Int32> Scope { get; set; }
		
		/// <summary>
		/// A hint for how to display this presentation node when it's shown in its own detail screen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenStyle")]
		public System.Nullable<System.Int32> ScreenStyle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="traitHashes")]
		public int[] TraitHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="traitIds")]
		public string[] TraitIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsPresentationDestinyScoredPresentationNodeBaseDefinition
	{
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxCategoryRecordScore")]
		public System.Nullable<System.Int32> MaxCategoryRecordScore { get; set; }
		
		/// <summary>
		/// A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentNodeHashes")]
		public int[] ParentNodeHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentationNodeType")]
		public System.Nullable<System.Int32> PresentationNodeType { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="traitHashes")]
		public int[] TraitHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="traitIds")]
		public string[] TraitIds { get; set; }
	}
	
	/// <summary>
	/// These are pre-constructed collections of data that can be used to determine the Level Requirement for an item given a Progression to be tested (such as the Character's level).
	///For instance, say a character receives a new Auto Rifle, and that Auto Rifle's DestinyInventoryItemDefinition.quality.progressionLevelRequirementHash property is pointing at one of these DestinyProgressionLevelRequirementDefinitions. Let's pretend also that the progressionHash it is pointing at is the Character Level progression. In that situation, the character's level will be used to interpolate a value in the requirementCurve property. The value picked up from that interpolation will be the required level for the item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsProgressionDestinyProgressionLevelRequirementDefinition
	{
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The progression whose level should be used to determine the level requirement.
		///Look up the DestinyProgressionDefinition with this hash for more information about the progression in question.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressionHash")]
		public System.Nullable<System.UInt32> ProgressionHash { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// A curve of level requirements, weighted by the related progressions' level.
		///Interpolate against this curve with the character's progression level to determine what the level requirement of the generated item that is using this data will be.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirementCurve")]
		public InterpolationInterpolationPointFloat[] RequirementCurve { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InterpolationInterpolationPointFloat
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Single> Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Single> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsRecordsDestinyRecordCompletionBlock
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ScoreValue { get; set; }
		
		/// <summary>
		/// The number of objectives that must be completed before the objective is considered "complete"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partialCompletionObjectiveCountThreshold")]
		public System.Nullable<System.Int32> PartialCompletionObjectiveCountThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shouldFireToast")]
		public System.Nullable<System.Boolean> ShouldFireToast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toastStyle")]
		public System.Nullable<System.Int32> ToastStyle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsRecordsDestinyRecordDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="completionInfo")]
		public DestinyDefinitionsRecordsDestinyRecordCompletionBlock CompletionInfo { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// If this record has an expiration after which it cannot be earned, this is some information about that expiration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationInfo")]
		public DestinyDefinitionsRecordsDestinyRecordExpirationBlock ExpirationInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forTitleGilding")]
		public System.Nullable<System.Boolean> ForTitleGilding { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Some records have multiple 'interval' objectives, and the record may be claimed at each completed interval
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalInfo")]
		public string IntervalInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loreHash")]
		public System.Nullable<System.UInt32> LoreHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectiveHashes")]
		public int[] ObjectiveHashes { get; set; }
		
		/// <summary>
		/// A quick reference to presentation nodes that have this node as a child. Presentation nodes can be parented under multiple parents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentNodeHashes")]
		public int[] ParentNodeHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentationInfo")]
		public DestinyDefinitionsPresentationDestinyPresentationChildBlock PresentationInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="presentationNodeType")]
		public System.Nullable<System.Int32> PresentationNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recordValueStyle")]
		public System.Nullable<System.Int32> RecordValueStyle { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// Presentation nodes can be restricted by various requirements. This defines the rules of those requirements, and the message(s) to be shown if these requirements aren't met.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirements")]
		public DestinyDefinitionsPresentationDestinyPresentationNodeRequirementsBlock Requirements { get; set; }
		
		/// <summary>
		/// If there is any publicly available information about rewards earned for achieving this record, this is the list of those items.
		/// However, note that some records intentionally have "hidden" rewards. These will not be returned in this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardItems")]
		public DestinyDestinyItemQuantity[] RewardItems { get; set; }
		
		/// <summary>
		/// Indicates whether this Record's state is determined on a per-character or on an account-wide basis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<System.Int32> Scope { get; set; }
		
		/// <summary>
		/// A hint to show a large icon for a reward
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shouldShowLargeIcons")]
		public System.Nullable<System.Boolean> ShouldShowLargeIcons { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateInfo")]
		public DestinyDefinitionsRecordsSchemaRecordStateBlock StateInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="titleInfo")]
		public DestinyDefinitionsRecordsDestinyRecordTitleBlock TitleInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="traitHashes")]
		public int[] TraitHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="traitIds")]
		public string[] TraitIds { get; set; }
	}
	
	/// <summary>
	/// If this record has an expiration after which it cannot be earned, this is some information about that expiration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsRecordsDestinyRecordExpirationBlock
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasExpiration")]
		public System.Nullable<System.Boolean> HasExpiration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsRecordsSchemaRecordStateBlock
	{
		
		[System.Runtime.Serialization.DataMember(Name="featuredPriority")]
		public System.Nullable<System.Int32> FeaturedPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="obscuredString")]
		public string ObscuredString { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsRecordsDestinyRecordTitleBlock
	{
		
		[System.Runtime.Serialization.DataMember(Name="gildingTrackingRecordHash")]
		public System.Nullable<System.UInt32> GildingTrackingRecordHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasTitle")]
		public System.Nullable<System.Boolean> HasTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="titlesByGender")]
		public System.Collections.Generic.Dictionary<string, string> TitlesByGender { get; set; }
		
		/// <summary>
		/// For those who prefer to use the definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="titlesByGenderHash")]
		public System.Collections.Generic.Dictionary<string, string> TitlesByGenderHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsRecordsDestinyRecordIntervalBlock
	{
		
		[System.Runtime.Serialization.DataMember(Name="intervalObjectives")]
		public DestinyDefinitionsRecordsDestinyRecordIntervalObjective[] IntervalObjectives { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intervalRewards")]
		public DestinyDefinitionsRecordsDestinyRecordIntervalRewards[] IntervalRewards { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalObjectiveArrayInsertionIndex")]
		public System.Nullable<System.Int32> OriginalObjectiveArrayInsertionIndex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsRecordsDestinyRecordIntervalObjective
	{
		
		[System.Runtime.Serialization.DataMember(Name="intervalObjectiveHash")]
		public System.Nullable<System.UInt32> IntervalObjectiveHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intervalScoreValue")]
		public System.Nullable<System.Int32> IntervalScoreValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsRecordsDestinyRecordIntervalRewards
	{
		
		[System.Runtime.Serialization.DataMember(Name="intervalRewardItems")]
		public DestinyDestinyItemQuantity[] IntervalRewardItems { get; set; }
	}
	
	/// <summary>
	/// If you're going to report someone for a Terms of Service violation, you need to choose a category and reason for the report. This definition holds both the categories and the reasons within those categories, for simplicity and my own laziness' sake.
	///Note tha this means that, to refer to a Reason by reasonHash, you need a combination of the reasonHash *and* the associated ReasonCategory's hash: there are some reasons defined under multiple categories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsReportingDestinyReportReasonCategoryDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The specific reasons for the report under this category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasons")]
		public System.Collections.Generic.Dictionary<string, DestinyDefinitionsReportingDestinyReportReasonDefinition> Reasons { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// A specific reason for being banned. Only accessible under the related category (DestinyReportReasonCategoryDefinition) under which it is shown. Note that this means that report reasons' reasonHash are not globally unique: and indeed, entries like "Other" are defined under most categories for example.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsReportingDestinyReportReasonDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The identifier for the reason: they are only guaranteed unique under the Category in which they are found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonHash")]
		public System.Nullable<System.UInt32> ReasonHash { get; set; }
	}
	
	/// <summary>
	/// Defines the properties of an 'Event Card' in Destiny 2, to coincide with a seasonal event for additional challenges, premium rewards, a new seal, and a special title. For example: Solstice of Heroes 2022.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSeasonsDestinyEventCardDefinition
	{
		
		/// <summary>
		/// Represents a color whose RGBA values are all represented as values between 0 and 255.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public DestinyMiscDestinyColor Color { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int64> EndTime { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public DestinyDefinitionsSeasonsDestinyEventCardImages Images { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkRedirectPath")]
		public string LinkRedirectPath { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sealPresentationNodeHash")]
		public System.Nullable<System.UInt32> SealPresentationNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketCurrencyItemHash")]
		public System.Nullable<System.UInt32> TicketCurrencyItemHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketVendorCategoryHash")]
		public System.Nullable<System.UInt32> TicketVendorCategoryHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ticketVendorHash")]
		public System.Nullable<System.UInt32> TicketVendorHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triumphsPresentationNodeHash")]
		public System.Nullable<System.UInt32> TriumphsPresentationNodeHash { get; set; }
	}
	
	/// <summary>
	/// Represents a color whose RGBA values are all represented as values between 0 and 255.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMiscDestinyColor
	{
		
		[System.Runtime.Serialization.DataMember(Name="alpha")]
		public string Alpha { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public string Blue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="green")]
		public string Green { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="red")]
		public string Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSeasonsDestinyEventCardImages
	{
		
		[System.Runtime.Serialization.DataMember(Name="cardCompleteImagePath")]
		public string CardCompleteImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cardCompleteWrapImagePath")]
		public string CardCompleteWrapImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cardIncompleteImagePath")]
		public string CardIncompleteImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="progressIconImagePath")]
		public string ProgressIconImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="themeBackgroundImagePath")]
		public string ThemeBackgroundImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unownedCardSleeveImagePath")]
		public string UnownedCardSleeveImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unownedCardSleeveWrapImagePath")]
		public string UnownedCardSleeveWrapImagePath { get; set; }
	}
	
	/// <summary>
	/// Defines a canonical "Season" of Destiny: a range of a few months where the game highlights certain challenges, provides new loot, has new Clan-related rewards and celebrates various seasonal events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSeasonsDestinySeasonDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="artifactItemHash")]
		public System.Nullable<System.UInt32> ArtifactItemHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backgroundImagePath")]
		public string BackgroundImagePath { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Optional - Defines the promotional text, images, and links to preview this season.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preview")]
		public string Preview { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sealPresentationNodeHash")]
		public System.Nullable<System.UInt32> SealPresentationNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seasonNumber")]
		public System.Nullable<System.Int32> SeasonNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seasonPassHash")]
		public System.Nullable<System.UInt32> SeasonPassHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seasonPassProgressionHash")]
		public System.Nullable<System.UInt32> SeasonPassProgressionHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seasonalChallengesPresentationNodeHash")]
		public System.Nullable<System.UInt32> SeasonalChallengesPresentationNodeHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSeasonsDestinySeasonPassDefinition
	{
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// I know what you're thinking, but I promise we're not going to duplicate and drown you. Instead, we're giving you sweet, sweet power bonuses.
		/// Prestige progression is further progression that you can make on the Season pass after you gain max ranks, that will ultimately increase your power/light level over the theoretical limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prestigeProgressionHash")]
		public System.Nullable<System.UInt32> PrestigeProgressionHash { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// This is the progression definition related to the progression for the initial levels 1-100 that provide item rewards for the Season pass. Further experience after you reach the limit is provided in the "Prestige" progression referred to by prestigeProgressionHash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardProgressionHash")]
		public System.Nullable<System.UInt32> RewardProgressionHash { get; set; }
	}
	
	/// <summary>
	/// Defines the promotional text, images, and links to preview this season.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSeasonsDestinySeasonPreviewDefinition
	{
		
		/// <summary>
		/// A localized description of the season.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of images to preview the seasonal content. Should have at least three to show.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public DestinyDefinitionsSeasonsDestinySeasonPreviewImageDefinition[] Images { get; set; }
		
		/// <summary>
		/// A relative path to learn more about the season. Web browsers should be automatically redirected to the user's Bungie.net locale. For example: "/SeasonOfTheChosen" will redirect to "/7/en/Seasons/SeasonOfTheChosen" for English users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkPath")]
		public string LinkPath { get; set; }
		
		/// <summary>
		/// An optional link to a localized video, probably YouTube.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoLink")]
		public string VideoLink { get; set; }
	}
	
	/// <summary>
	/// Defines the thumbnail icon, high-res image, and video link for promotional images
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSeasonsDestinySeasonPreviewImageDefinition
	{
		
		/// <summary>
		/// An optional path to a high-resolution image, probably 1920x1080.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highResImage")]
		public string HighResImage { get; set; }
		
		/// <summary>
		/// A thumbnail icon path to preview seasonal content, probably 480x270.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbnailImage")]
		public string ThumbnailImage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSocialDestinySocialCommendationDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="activityGivingLimit")]
		public System.Nullable<System.Int32> ActivityGivingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cardImagePath")]
		public string CardImagePath { get; set; }
		
		/// <summary>
		/// Represents a color whose RGBA values are all represented as values between 0 and 255.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public DestinyMiscDestinyColor Color { get; set; }
		
		/// <summary>
		/// The display properties for the the activities that this commendation is available in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayActivities")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition[] DisplayActivities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayPriority")]
		public System.Nullable<System.Int32> DisplayPriority { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentCommendationNodeHash")]
		public System.Nullable<System.UInt32> ParentCommendationNodeHash { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSocialDestinySocialCommendationNodeDefinition
	{
		
		/// <summary>
		/// A list of hashes that map to child commendations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childCommendationHashes")]
		public int[] ChildCommendationHashes { get; set; }
		
		/// <summary>
		/// A list of hashes that map to child commendation nodes. Only the root commendations node is expected to have child nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="childCommendationNodeHashes")]
		public int[] ChildCommendationNodeHashes { get; set; }
		
		/// <summary>
		/// The color associated with this group of commendations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentCommendationNodeHash")]
		public System.Nullable<System.UInt32> ParentCommendationNodeHash { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// Data related to what happens while a plug is being inserted, mostly for UI purposes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSocketsDestinyInsertPlugActionDefinition
	{
		
		/// <summary>
		/// How long it takes for the Plugging of the item to be completed once it is initiated, if you care.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionExecuteSeconds")]
		public System.Nullable<System.Int32> ActionExecuteSeconds { get; set; }
		
		/// <summary>
		/// The type of action being performed when you act on this Socket Type. The most common value is "insert plug", but there are others as well (for instance, a "Masterwork" socket may allow for Re-initialization, and an Infusion socket allows for items to be consumed to upgrade the item)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionType")]
		public System.Nullable<System.Int32> ActionType { get; set; }
	}
	
	/// <summary>
	/// Sometimes, we have large sets of reusable plugs that are defined identically and thus can (and in some cases, are so large that they *must*) be shared across the places where they are used. These are the definitions for those reusable sets of plugs. 
	/// See DestinyItemSocketEntryDefinition.plugSource and reusablePlugSetHash for the relationship between these reusable plug sets and the sockets that leverage them (for starters, Emotes).
	/// As of the release of Shadowkeep (Late 2019), these will begin to be sourced from game content directly - which means there will be many more of them, but it also means we may not get all data that we used to get for them.
	/// DisplayProperties, in particular, will no longer be guaranteed to contain valid information. We will make a best effort to guess what ought to be populated there where possible, but it will be invalid for many/most plug sets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSocketsDestinyPlugSetDefinition
	{
		
		/// <summary>
		/// If you want to show these plugs in isolation, these are the display properties for them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Mostly for our debugging or reporting bugs, BNet is making "fake" plug sets in a desperate effort to reduce socket sizes.
		/// If this is true, the plug set was generated by BNet: if it looks wrong, that's a good indicator that it's bungie.net that fucked this up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFakePlugSet")]
		public System.Nullable<System.Boolean> IsFakePlugSet { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// This is a list of pre-determined plugs that can be plugged into this socket, without the character having the plug in their inventory.
		///If this list is populated, you will not be allowed to plug an arbitrary item in the socket: you will only be able to choose from one of these reusable plugs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reusablePlugItems")]
		public DestinyDefinitionsDestinyItemSocketEntryPlugItemRandomizedDefinition[] ReusablePlugItems { get; set; }
	}
	
	/// <summary>
	/// Defines a plug "Category" that is allowed to be plugged into a socket of this type.
	///This should be compared against a given plug item's DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item's category.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition
	{
		
		/// <summary>
		/// The hash identifier of the Plug Category to compare against the plug item's plug.plugCategoryHash.
		///Note that this does NOT relate to any Definition in itself, it is only used for comparison purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryHash")]
		public System.Nullable<System.UInt32> CategoryHash { get; set; }
		
		/// <summary>
		/// The string identifier for the category, which is here mostly for debug purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryIdentifier")]
		public string CategoryIdentifier { get; set; }
		
		/// <summary>
		/// The list of all plug items (DestinyInventoryItemDefinition) that the socket may randomly be populated with when reinitialized.
		///Which ones you should actually show are determined by the plug being inserted into the socket, and the socket’s type.
		///When you inspect the plug that could go into a Masterwork Socket, look up the socket type of the socket being inspected and find the DestinySocketTypeDefinition.
		///Then, look at the Plugs that can fit in that socket. Find the Whitelist in the DestinySocketTypeDefinition that matches the plug item’s categoryhash.
		///That whitelist entry will potentially have a new “reinitializationPossiblePlugHashes” property.If it does, that means we know what it will roll if you try to insert this plug into this socket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reinitializationPossiblePlugHashes")]
		public int[] ReinitializationPossiblePlugHashes { get; set; }
	}
	
	/// <summary>
	/// Sockets on an item are organized into Categories visually.
	///You can find references to the socket category defined on an item's DestinyInventoryItemDefinition.sockets.socketCategories property.
	///This has the display information for rendering the categories' header, and a hint for how the UI should handle showing this category.
	///The shitty thing about this, however, is that the socket categories' UI style can be overridden by the item's UI style. For instance, the Socket Category used by Emote Sockets says it's "consumable," but that's a lie: they're all reusable, and overridden by the detail UI pages in ways that we can't easily account for in the API.
	///As a result, I will try to compile these rules into the individual sockets on items, and provide the best hint possible there through the plugSources property. In the future, I may attempt to use this information in conjunction with the item to provide a more usable UI hint on the socket layer, but for now improving the consistency of plugSources is the best I have time to provide. (See https://github.com/Bungie-net/api/issues/522 for more info)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSocketsDestinySocketCategoryDefinition
	{
		
		/// <summary>
		/// Same as uiCategoryStyle, but in a more usable enumeration form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryStyle")]
		public System.Nullable<System.Int32> CategoryStyle { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		/// <summary>
		/// A string hinting to the game's UI system about how the sockets in this category should be displayed.
		///BNet doesn't use it: it's up to you to find valid values and make your own special UI if you want to honor this category style.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uiCategoryStyle")]
		public System.Nullable<System.UInt32> UiCategoryStyle { get; set; }
	}
	
	/// <summary>
	/// All Sockets have a "Type": a set of common properties that determine when the socket allows Plugs to be inserted, what Categories of Plugs can be inserted, and whether the socket is even visible at all given the current game/character/account state.
	///See DestinyInventoryItemDefinition for more information about Socketed items and Plugs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSocketsDestinySocketTypeDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="alwaysRandomizeSockets")]
		public System.Nullable<System.Boolean> AlwaysRandomizeSockets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avoidDuplicatesOnInitialization")]
		public System.Nullable<System.Boolean> AvoidDuplicatesOnInitialization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currencyScalars")]
		public DestinyDefinitionsSocketsDestinySocketTypeScalarMaterialRequirementEntry[] CurrencyScalars { get; set; }
		
		/// <summary>
		/// There are fields for this display data, but they appear to be unpopulated as of now. I am not sure where in the UI these would show if they even were populated, but I will continue to return this data in case it becomes useful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public string DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideDuplicateReusablePlugs")]
		public System.Nullable<System.Boolean> HideDuplicateReusablePlugs { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// Defines what happens when a plug is inserted into sockets of this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertAction")]
		public string InsertAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPreviewEnabled")]
		public System.Nullable<System.Boolean> IsPreviewEnabled { get; set; }
		
		/// <summary>
		/// This property indicates if the socket type determines whether Emblem icons and nameplates should be overridden by the inserted plug item's icon and nameplate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overridesUiAppearance")]
		public System.Nullable<System.Boolean> OverridesUiAppearance { get; set; }
		
		/// <summary>
		/// A list of Plug "Categories" that are allowed to be plugged into sockets of this type.
		///These should be compared against a given plug item's DestinyInventoryItemDefinition.plug.plugCategoryHash, which indicates the plug item's category.
		///If the plug's category matches any whitelisted plug, or if the whitelist is empty, it is allowed to be inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugWhitelist")]
		public DestinyDefinitionsSocketsDestinyPlugWhitelistEntryDefinition[] PlugWhitelist { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="socketCategoryHash")]
		public System.Nullable<System.UInt32> SocketCategoryHash { get; set; }
		
		/// <summary>
		/// Sometimes a socket isn't visible. These are some of the conditions under which sockets of this type are not visible. Unfortunately, the truth of visibility is much, much more complex. Best to rely on the live data for whether the socket is visible and enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<System.Int32> Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsSocketsDestinySocketTypeScalarMaterialRequirementEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="currencyItemHash")]
		public System.Nullable<System.UInt32> CurrencyItemHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scalarValue")]
		public System.Nullable<System.Int32> ScalarValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDefinitionsTraitsDestinyTraitDefinition
	{
		
		/// <summary>
		/// An identifier for how this trait can be displayed. For example: a 'keyword' hint to show an explanation for certain related terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayHint")]
		public string DisplayHint { get; set; }
		
		/// <summary>
		/// Many Destiny*Definition contracts - the "first order" entities of Destiny that have their own tables in the Manifest Database - also have displayable information. This is the base class for that display information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProperties")]
		public DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition DisplayProperties { get; set; }
		
		/// <summary>
		/// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.
		///When entities refer to each other in Destiny content, it is this hash that they are referring to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public System.Nullable<System.UInt32> Hash { get; set; }
		
		/// <summary>
		/// The index of the entity as it was found in the investment tables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redacted")]
		public System.Nullable<System.Boolean> Redacted { get; set; }
	}
	
	/// <summary>
	/// Represents the "Live" data that we can obtain about a Character's status with a specific Activity. This will tell you whether the character can participate in the activity, as well as some other basic mutable information. 
	///Meant to be combined with static DestinyActivityDefinition data for a full picture of the Activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDestinyActivity
	{
		
		/// <summary>
		/// The hash identifier of the Activity. Use this to look up the DestinyActivityDefinition of the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).
		///As a concrete example of this data, the hashes you get for Raids will correspond to the currently active "Challenge Mode".
		///We don't have any human readable information for these, but saavy 3rd party app users could manually associate the key (a hash identifier for the "option" that is enabled/disabled) and the value (whether it's enabled or disabled presently)
		///On our side, we don't necessarily even know what these are used for (the game designers know, but we don't), and we have no human readable data for them. In order to use them, you will have to do some experimentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booleanActivityOptions")]
		public System.Collections.Generic.Dictionary<string, bool> BooleanActivityOptions { get; set; }
		
		/// <summary>
		/// If true, the user is allowed to join with another Fireteam in this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canJoin")]
		public System.Nullable<System.Boolean> CanJoin { get; set; }
		
		/// <summary>
		/// If true, the user is allowed to lead a Fireteam into this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canLead")]
		public System.Nullable<System.Boolean> CanLead { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="challenges")]
		public DestinyChallengesDestinyChallengeStatus[] Challenges { get; set; }
		
		/// <summary>
		/// A DestinyActivityDifficultyTier enum value indicating the difficulty of the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="difficultyTier")]
		public System.Nullable<System.Int32> DifficultyTier { get; set; }
		
		/// <summary>
		/// The difficulty level of the activity, if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayLevel")]
		public System.Nullable<System.Int32> DisplayLevel { get; set; }
		
		/// <summary>
		/// If true, we both have the ability to know that the user has completed this activity and they have completed it. Unfortunately, we can't necessarily know this for all activities. As such, this should probably only be used if you already know in advance which specific activities you wish to check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCompleted")]
		public System.Nullable<System.Boolean> IsCompleted { get; set; }
		
		/// <summary>
		/// If true, then the activity should have a "new" indicator in the Director UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isNew")]
		public System.Nullable<System.Boolean> IsNew { get; set; }
		
		/// <summary>
		/// If true, the user should be able to see this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		public System.Nullable<System.Boolean> IsVisible { get; set; }
		
		/// <summary>
		/// If returned, this is the index into the DestinyActivityDefinition's "loadouts" property, indicating the currently active loadout requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadoutRequirementIndex")]
		public System.Nullable<System.Int32> LoadoutRequirementIndex { get; set; }
		
		/// <summary>
		/// If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.
		///Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifierHashes")]
		public int[] ModifierHashes { get; set; }
		
		/// <summary>
		/// The recommended light level for the activity, if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recommendedLight")]
		public System.Nullable<System.Int32> RecommendedLight { get; set; }
	}
	
	/// <summary>
	/// An enumeration representing the potential difficulty levels of an activity. Their names are... more qualitative than quantitative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyActivityDifficultyTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
	}
	
	/// <summary>
	/// Activity Modes are grouped into a few possible broad categories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyActivityModeCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyActivityNavPointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyAmmunitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	/// <summary>
	/// A plug can optionally have a "Breaker Type": a special ability that can affect units in unique ways. Activating this plug can grant one of these types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyBreakerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	/// <summary>
	/// A Flags Enumeration/bitmask where each bit represents a different state that the Collectible can be in. A collectible can be in any number of these states, and you can choose to use or ignore any or all of them when making your own UI that shows Collectible info. Our displays are going to honor them, but we're also the kind of people who only pretend to inhale before quickly passing it to the left. So, you know, do what you got to do.
	///(All joking aside, please note the caveat I mention around the Invisible flag: there are cases where it is in the best interest of your users to honor these flags even if you're a "show all the data" person. Collector-oriented compulsion is a very unfortunate and real thing, and I would hate to instill that compulsion in others through showing them items that they cannot earn. Please consider this when you are making your own apps/sites.)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyCollectibleState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
	}
	
	/// <summary>
	/// Represents the possible components that can be returned from Destiny "Get" calls such as GetProfile, GetCharacter, GetVendor etc...
	///When making one of these requests, you will pass one or more of these components as a comma separated list in the "?components=" querystring parameter. For instance, if you want baseline Profile data, Character Data, and character progressions, you would pass "?components=Profiles,Characters,CharacterProgressions" You may use either the numerical or string values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyComponentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
		_100 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="101")]
		_101 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="102")]
		_102 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="103")]
		_103 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="104")]
		_104 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="105")]
		_105 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="200")]
		_200 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="201")]
		_201 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="202")]
		_202 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="203")]
		_203 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="204")]
		_204 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="205")]
		_205 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="206")]
		_206 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="300")]
		_300 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="301")]
		_301 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="302")]
		_302 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="303")]
		_303 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="304")]
		_304 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="305")]
		_305 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="306")]
		_306 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="307")]
		_307 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="308")]
		_308 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="309")]
		_309 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="310")]
		_310 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="400")]
		_400 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="401")]
		_401 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="402")]
		_402 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="500")]
		_500 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="600")]
		_600 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="700")]
		_700 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="800")]
		_800 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="900")]
		_900 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1000")]
		_1000 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1100")]
		_1100 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1200")]
		_1200 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1300")]
		_1300 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1400")]
		_1400 = 37,
	}
	
	/// <summary>
	/// Represents the socket energy types for Armor 2.0, Ghosts 2.0, and Stasis subclasses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyEnergyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
	}
	
	/// <summary>
	/// The results of an Equipping operation performed through the Destiny API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDestinyEquipItemResult
	{
		
		/// <summary>
		/// A PlatformErrorCodes enum indicating whether it succeeded, and if it failed why.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equipStatus")]
		public System.Nullable<System.Int32> EquipStatus { get; set; }
		
		/// <summary>
		/// The instance ID of the item in question (all items that can be equipped must, but definition, be Instanced and thus have an Instance ID that you can use to refer to them)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemInstanceId")]
		public System.Nullable<System.Int64> ItemInstanceId { get; set; }
	}
	
	/// <summary>
	/// The results of a bulk Equipping operation performed through the Destiny API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDestinyEquipItemResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="equipResults")]
		public DestinyDestinyEquipItemResult[] EquipResults { get; set; }
	}
	
	/// <summary>
	/// A player can choose to restrict requests to join their Fireteam to specific states. These are the possible states a user can choose.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyGamePrivacySetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	/// <summary>
	/// A flags enumeration/bitmask indicating the versions of the game that a given user has purchased.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyGameVersions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="256")]
		_256 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="512")]
		_512 = 10,
	}
	
	/// <summary>
	/// This enumeration represents the most restrictive type of gating that is being performed by an entity. This is useful as a shortcut to avoid a lot of lookups when determining whether the gating on an Entity applies to everyone equally, or to their specific Profile or Character states.
	///None = There is no gating on this item.
	///Global = The gating on this item is based entirely on global game state. It will be gated the same for everyone.
	///Clan = The gating on this item is at the Clan level. For instance, if you're gated by Clan level this will be the case.
	///Profile = The gating includes Profile-specific checks, but not on the Profile's characters. An example of this might be when you acquire an Emblem: the Emblem will be available in your Kiosk for all characters in your Profile from that point onward.
	///Character = The gating includes Character-specific checks, including character level restrictions. An example of this might be an item that you can't purchase from a Vendor until you reach a specific Character Level.
	///Item = The gating includes item-specific checks. For BNet, this generally implies that we'll show this data only on a character level or deeper.
	///AssumedWorstCase = The unlocks and checks being used for this calculation are of an unknown type and are used for unknown purposes. For instance, if some great person decided that an unlock value should be globally scoped, but then the game changes it using character-specific data in a way that BNet doesn't know about. Because of the open-ended potential for this to occur, many unlock checks for "globally" scoped unlock data may be assumed as the worst case unless it has been specifically whitelisted as otherwise. That sucks, but them's the breaks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyGatingScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// Represents a potential state of an Activity Graph node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyGraphNodeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	/// <summary>
	/// Determines how items are sorted in an inventory bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyItemSortType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// This Enumeration further classifies items by more specific categorizations than DestinyItemType. The "Sub-Type" is where we classify and categorize items one step further in specificity: "Auto Rifle" instead of just "Weapon" for example, or "Vanguard Bounty" instead of merely "Bounty".
	///These sub-types are provided for historical compatibility with Destiny 1, but an ideal alternative is to use DestinyItemCategoryDefinitions and the DestinyItemDefinition.itemCategories property instead. Item Categories allow for arbitrary hierarchies of specificity, and for items to belong to multiple categories across multiple hierarchies simultaneously. For this enum, we pick a single type as a "best guess" fit.
	///NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyItemSubType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="23")]
		_23 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
		_31 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="33")]
		_33 = 30,
	}
	
	/// <summary>
	/// An enumeration that indicates the high-level "type" of the item, attempting to iron out the context specific differences for specific instances of an entity. For instance, though a weapon may be of various weapon "Types", in DestinyItemType they are all classified as "Weapon". This allows for better filtering on a higher level of abstraction for the concept of types.
	/// This enum is provided for historical compatibility with Destiny 1, but an ideal alternative is to use DestinyItemCategoryDefinitions and the DestinyItemDefinition.itemCategories property instead. Item Categories allow for arbitrary hierarchies of specificity, and for items to belong to multiple categories across multiple hierarchies simultaneously. For this enum, we pick a single type as a "best guess" fit.
	/// NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.
	/// I keep updating these because they're so damn convenient. I guess I shouldn't fight it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyItemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="23")]
		_23 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 27,
	}
	
	/// <summary>
	/// A Flags enumeration representing the reasons why a person can't join this user's fireteam.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyJoinClosedReasons
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32768")]
		_32768 = 6,
	}
	
	/// <summary>
	/// Some Objectives provide perks, generally as part of providing some kind of interesting modifier for a Challenge or Quest. This indicates when the Perk is granted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyObjectiveGrantStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// If the objective has a known UI label, this enumeration will represent it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyObjectiveUiStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
	}
	
	/// <summary>
	/// A flags enumeration that represents a Fireteam Member's status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyPartyMemberStates
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
	}
	
	/// <summary>
	/// A hint for how the presentation node should be displayed when shown in a list. How you use this is your UI is up to you.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyPresentationDisplayStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
	}
	
	/// <summary>
	/// I know this doesn't look like a Flags Enumeration/bitmask right now, but I assure you it is. This is the possible states that a Presentation Node can be in, and it is almost certain that its potential states will increase in the future. So don't treat it like a straight up enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyPresentationNodeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyPresentationNodeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
	}
	
	/// <summary>
	/// A hint for what screen should be shown when this presentation node is clicked into. How you use this is your UI is up to you.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyPresentationScreenStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// Represents the different kinds of acquisition behavior for progression reward items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyProgressionRewardItemAcquisitionBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	/// <summary>
	/// Represents the different states a progression reward item can be in.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyProgressionRewardItemState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
	}
	
	/// <summary>
	/// There are many Progressions in Destiny (think Character Level, or Reputation). These are the various "Scopes" of Progressions, which affect many things: * Where/if they are stored * How they are calculated * Where they can be used in other game logic
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyProgressionScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
	}
	
	/// <summary>
	/// If progression is earned, this determines whether the progression shows visual effects on the character or its item - or neither.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyProgressionStepDisplayEffect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyRace
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	/// <summary>
	/// A Flags enumeration/bitmask where each bit represents a possible state that a Record/Triumph can be in.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyRecordState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyRecordToastStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyRecordValueStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	/// <summary>
	/// There's a lot of places where we need to know scope on more than just a profile or character level. For everything else, there's this more generic sense of scope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	/// <summary>
	/// Represents the possible and known UI styles used by the game for rendering Socket Categories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinySocketCategoryStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinySocketVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	/// <summary>
	/// Represents a stat on an item *or* Character (NOT a Historical Stat, but a physical attribute stat like Attack, Defense etc...)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDestinyStat
	{
		
		/// <summary>
		/// The hash identifier for the Stat. Use it to look up the DestinyStatDefinition for static data about the stat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statHash")]
		public System.Nullable<System.UInt32> StatHash { get; set; }
		
		/// <summary>
		/// The current value of the Stat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	/// <summary>
	/// When a Stat (DestinyStatDefinition) is aggregated, this is the rules used for determining the level and formula used for aggregation.
	///* CharacterAverage = apply a weighted average using the related DestinyStatGroupDefinition on the DestinyInventoryItemDefinition across the character's equipped items. See both of those definitions for details. * Character = don't aggregate: the stat should be located and used directly on the character. * Item = don't aggregate: the stat should be located and used directly on the item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyStatAggregationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// At last, stats have categories. Use this for whatever purpose you might wish.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyStatCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	/// <summary>
	/// I see you've come to find out more about Talent Nodes. I'm so sorry. Talent Nodes are the conceptual, visual nodes that appear on Talent Grids. Talent Grids, in Destiny 1, were found on almost every instanced item: they had Nodes that could be activated to change the properties of the item. In Destiny 2, Talent Grids only exist for Builds/Subclasses, and while the basic concept is the same (Nodes can be activated once you've gained sufficient Experience on the Item, and provide effects), there are some new concepts from Destiny 1. Examine DestinyTalentGridDefinition and its subordinates for more information. This is the "Live" information for the current status of a Talent Node on a specific item. Talent Nodes have many Steps, but only one can be active at any one time: and it is the Step that determines both the visual and the game state-changing properties that the Node provides. Examine this and DestinyTalentNodeStepDefinition carefully. *IMPORTANT NOTE* Talent Nodes are, unfortunately, Content Version DEPENDENT. Though they refer to hashes for Nodes and Steps, those hashes are not guaranteed to be immutable across content versions. This is a source of great exasperation for me, but as a result anyone using Talent Grid data must ensure that the content version of their static content matches that of the server responses before showing or making decisions based on talent grid data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDestinyTalentNode
	{
		
		/// <summary>
		/// The progression level required on the Talent Grid in order to be able to activate this talent node. Talent Grids have their own Progression - similar to Character Level, but in this case it is experience related to the item itself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationGridLevel")]
		public System.Nullable<System.Int32> ActivationGridLevel { get; set; }
		
		/// <summary>
		/// Whether or not the talent node is actually visible in the game's UI. Whether you want to show it in your own UI is up to you! I'm not gonna tell you who to sock it to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		/// <summary>
		/// If true, the node is activated: it's current step then provides its benefits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActivated")]
		public System.Nullable<System.Boolean> IsActivated { get; set; }
		
		/// <summary>
		/// If the node has material requirements to be activated, this is the list of those requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materialsToUpgrade")]
		public DestinyDefinitionsDestinyMaterialRequirement[] MaterialsToUpgrade { get; set; }
		
		/// <summary>
		/// The hash of the Talent Node being referred to (in DestinyTalentGridDefinition.nodes). Deceptively CONTENT VERSION DEPENDENT. We have no guarantee of the hash's immutability between content versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeHash")]
		public System.Nullable<System.UInt32> NodeHash { get; set; }
		
		/// <summary>
		/// The index of the Talent Node being referred to (an index into DestinyTalentGridDefinition.nodes[]). CONTENT VERSION DEPENDENT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeIndex")]
		public System.Nullable<System.Int32> NodeIndex { get; set; }
		
		/// <summary>
		/// This property has some history. A talent grid can provide stats on both the item it's related to and the character equipping the item. This returns data about those stat bonuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeStatsBlock")]
		public string NodeStatsBlock { get; set; }
		
		/// <summary>
		/// If you want to show a progress bar or circle for how close this talent node is to being activate-able, this is the percentage to show. It follows the node's underlying rules about when the progress bar should first show up, and when it should be filled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressPercent")]
		public System.Nullable<System.Single> ProgressPercent { get; set; }
		
		/// <summary>
		/// An DestinyTalentNodeState enum value indicating the node's state: whether it can be activated or swapped, and why not if neither can be performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<System.Int32> State { get; set; }
		
		/// <summary>
		/// The currently relevant Step for the node. It is this step that has rendering data for the node and the benefits that are provided if the node is activated. (the actual rules for benefits provided are extremely complicated in theory, but with how Talent Grids are being used in Destiny 2 you don't have to worry about a lot of those old Destiny 1 rules.) This is an index into: DestinyTalentGridDefinition.nodes[nodeIndex].steps[stepIndex]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepIndex")]
		public System.Nullable<System.Int32> StepIndex { get; set; }
	}
	
	/// <summary>
	/// This property has some history. A talent grid can provide stats on both the item it's related to and the character equipping the item. This returns data about those stat bonuses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDestinyTalentNodeStatBlock
	{
		
		/// <summary>
		/// The stat benefits conferred when this talent node is activated for the current Step that is active on the node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentStepStats")]
		public DestinyDestinyStat[] CurrentStepStats { get; set; }
		
		/// <summary>
		/// This is a holdover from the old days of Destiny 1, when a node could be activated multiple times, conferring multiple steps worth of benefits: you would use this property to show what activating the "next" step on the node would provide vs. what the current step is providing. While Nodes are currently not being used this way, the underlying system for this functionality still exists. I hesitate to remove this property while the ability for designers to make such a talent grid still exists. Whether you want to show it is up to you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextStepStats")]
		public DestinyDestinyStat[] NextStepStats { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyTalentNodeState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
	}
	
	/// <summary>
	/// Indicates the status of an "Unlock Flag" on a Character or Profile.
	///These are individual bits of state that can be either set or not set, and sometimes provide interesting human-readable information in their related DestinyUnlockDefinition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyDestinyUnlockStatus
	{
		
		/// <summary>
		/// Whether the unlock flag is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSet")]
		public System.Nullable<System.Boolean> IsSet { get; set; }
		
		/// <summary>
		/// The hash identifier for the Unlock Flag. Use to lookup DestinyUnlockDefinition for static data. Not all unlocks have human readable data - in fact, most don't. But when they do, it can be very useful to show. Even if they don't have human readable data, you might be able to infer the meaning of an unlock flag with a bit of experimentation...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlockHash")]
		public System.Nullable<System.UInt32> UnlockHash { get; set; }
	}
	
	/// <summary>
	/// If you're showing an unlock value in the UI, this is the format in which it should be shown. You'll have to build your own algorithms on the client side to determine how best to render these options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyUnlockValueUIStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 14,
	}
	
	/// <summary>
	/// Indicates the type of filter to apply to Vendor results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyVendorFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	/// <summary>
	/// When a Vendor Interaction provides rewards, they'll either let you choose one or let you have all of them. This determines which it will be.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyVendorInteractionRewardSelection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// The action that happens when the user attempts to refund an item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyVendorItemRefundPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// The possible states of Destiny Profile Records. IMPORTANT: Any given item can theoretically have many of these states simultaneously: as a result, this was altered to be a flags enumeration/bitmask for v3.2.0.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyVendorItemState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="256")]
		_256 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="512")]
		_512 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1024")]
		_1024 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2048")]
		_2048 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4096")]
		_4096 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8192")]
		_8192 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16384")]
		_16384 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32768")]
		_32768 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="65536")]
		_65536 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="131072")]
		_131072 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="262144")]
		_262144 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="524288")]
		_524288 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1048576")]
		_1048576 = 21,
	}
	
	/// <summary>
	/// Describes the type of progression that a vendor has.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyVendorProgressionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// This determines the type of reply that a Vendor will have during an Interaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyDestinyVendorReplyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// This component holds activity data for a character. It will tell you about the character's current activity status, as well as activities that are available to the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesCharactersDestinyCharacterActivitiesComponent
	{
		
		/// <summary>
		/// The list of activities that the user can play.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableActivities")]
		public DestinyDestinyActivity[] AvailableActivities { get; set; }
		
		/// <summary>
		/// If the user is in an activity, this will be the hash of the Activity being played. Note that you must combine this info with currentActivityModeHash to get a real picture of what the user is doing right now. For instance, PVP "Activities" are just maps: it's the ActivityMode that determines what type of PVP game they're playing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentActivityHash")]
		public System.Nullable<System.UInt32> CurrentActivityHash { get; set; }
		
		/// <summary>
		/// If the user is in an activity, this will be the hash of the activity mode being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentActivityModeHash")]
		public System.Nullable<System.UInt32> CurrentActivityModeHash { get; set; }
		
		/// <summary>
		/// If the user is in an activity, this will be the hashes of the DestinyActivityModeDefinition being played. Combine with currentActivityHash to give a person a full picture of what they're doing right now.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentActivityModeHashes")]
		public int[] CurrentActivityModeHashes { get; set; }
		
		/// <summary>
		/// And the current activity's most specific mode type, if it can be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentActivityModeType")]
		public System.Nullable<DestinyEntitiesCharactersDestinyCharacterActivitiesComponentCurrentActivityModeType> CurrentActivityModeType { get; set; }
		
		/// <summary>
		/// All Activity Modes that apply to the current activity being played, in enum form.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentActivityModeTypes")]
		public int[] CurrentActivityModeTypes { get; set; }
		
		/// <summary>
		/// If the user is in a playlist, this is the hash identifier for the playlist that they chose.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentPlaylistActivityHash")]
		public System.Nullable<System.UInt32> CurrentPlaylistActivityHash { get; set; }
		
		/// <summary>
		/// The last date that the user started playing an activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateActivityStarted")]
		public System.Nullable<System.DateTimeOffset> DateActivityStarted { get; set; }
		
		/// <summary>
		/// This will have the activity hash of the last completed story/campaign mission, in case you care about that.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCompletedStoryHash")]
		public System.Nullable<System.UInt32> LastCompletedStoryHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyEntitiesCharactersDestinyCharacterActivitiesComponentCurrentActivityModeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
		_31 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
		_37 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
		_38 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
		_39 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
		_40 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
		_41 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
		_42 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
		_43 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
		_44 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
		_45 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
		_46 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
		_47 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
		_48 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
		_49 = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
		_50 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
		_51 = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
		_52 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
		_53 = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
		_54 = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
		_55 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
		_56 = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
		_57 = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
		_58 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
		_59 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
		_60 = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
		_61 = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
		_62 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
		_63 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
		_65 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
		_66 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
		_67 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
		_68 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
		_69 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
		_70 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
		_71 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
		_72 = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
		_73 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
		_74 = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
		_75 = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
		_76 = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
		_77 = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
		_78 = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
		_79 = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
		_80 = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
		_81 = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
		_82 = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
		_83 = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
		_84 = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
		_85 = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
		_86 = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
		_87 = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
		_88 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
		_89 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
		_90 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
		_91 = 83,
	}
	
	/// <summary>
	/// This component contains base properties of the character. You'll probably want to always request this component, but hey you do you.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesCharactersDestinyCharacterComponent
	{
		
		/// <summary>
		/// The "base" level of your character, not accounting for any light level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseCharacterLevel")]
		public System.Nullable<System.Int32> BaseCharacterLevel { get; set; }
		
		/// <summary>
		/// The unique identifier for the character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		/// <summary>
		/// Use this hash to look up the character's DestinyClassDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classHash")]
		public System.Nullable<System.UInt32> ClassHash { get; set; }
		
		/// <summary>
		/// Mostly for historical purposes at this point, this is an enumeration for the character's class.
		///It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classType")]
		public System.Nullable<System.Int32> ClassType { get; set; }
		
		/// <summary>
		/// The last date that the user played Destiny.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateLastPlayed")]
		public System.Nullable<System.DateTimeOffset> DateLastPlayed { get; set; }
		
		/// <summary>
		/// A shortcut path to the user's currently equipped emblem background image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emblemBackgroundPath")]
		public string EmblemBackgroundPath { get; set; }
		
		/// <summary>
		/// A shortcut for getting the background color of the user's currently equipped emblem without having to do a DestinyInventoryItemDefinition lookup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emblemColor")]
		public string EmblemColor { get; set; }
		
		/// <summary>
		/// The hash of the currently equipped emblem for the user. Can be used to look up the DestinyInventoryItemDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emblemHash")]
		public System.Nullable<System.UInt32> EmblemHash { get; set; }
		
		/// <summary>
		/// A shortcut path to the user's currently equipped emblem image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emblemPath")]
		public string EmblemPath { get; set; }
		
		/// <summary>
		/// Use this hash to look up the character's DestinyGenderDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genderHash")]
		public System.Nullable<System.UInt32> GenderHash { get; set; }
		
		/// <summary>
		/// Mostly for historical purposes at this point, this is an enumeration for the character's Gender.
		///It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove. And yeah, it's an enumeration and not a boolean. Fight me.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genderType")]
		public System.Nullable<System.Int32> GenderType { get; set; }
		
		/// <summary>
		/// The progression that indicates your character's level. Not their light level, but their character level: you know, the thing you max out a couple hours in and then ignore for the sake of light level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="levelProgression")]
		public string LevelProgression { get; set; }
		
		/// <summary>
		/// The user's calculated "Light Level". Light level is an indicator of your power that mostly matters in the end game, once you've reached the maximum character level: it's a level that's dependent on the average Attack/Defense power of your items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="light")]
		public System.Nullable<System.Int32> Light { get; set; }
		
		/// <summary>
		/// Every Destiny Profile has a membershipId. This is provided on the character as well for convenience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipId")]
		public System.Nullable<System.Int64> MembershipId { get; set; }
		
		/// <summary>
		/// membershipType tells you the platform on which the character plays. Examine the BungieMembershipType enumeration for possible values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		/// <summary>
		/// If the user is currently playing, this is how long they've been playing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutesPlayedThisSession")]
		public System.Nullable<System.Int64> MinutesPlayedThisSession { get; set; }
		
		/// <summary>
		/// If this value is 525,600, then they played Destiny for a year. Or they're a very dedicated Rent fan. Note that this includes idle time, not just time spent actually in activities shooting things.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutesPlayedTotal")]
		public System.Nullable<System.Int64> MinutesPlayedTotal { get; set; }
		
		/// <summary>
		/// A number between 0 and 100, indicating the whole and fractional % remaining to get to the next character level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentToNextLevel")]
		public System.Nullable<System.Single> PercentToNextLevel { get; set; }
		
		/// <summary>
		/// Use this hash to look up the character's DestinyRaceDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="raceHash")]
		public System.Nullable<System.UInt32> RaceHash { get; set; }
		
		/// <summary>
		/// Mostly for historical purposes at this point, this is an enumeration for the character's race.
		///It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="raceType")]
		public System.Nullable<System.Int32> RaceType { get; set; }
		
		/// <summary>
		/// Your character's stats, such as Agility, Resilience, etc... *not* historical stats.
		///You'll have to call a different endpoint for those.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public System.Collections.Generic.Dictionary<string, int> Stats { get; set; }
		
		/// <summary>
		/// If this Character has a title assigned to it, this is the identifier of the DestinyRecordDefinition that has that title information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="titleRecordHash")]
		public System.Nullable<System.UInt32> TitleRecordHash { get; set; }
	}
	
	/// <summary>
	/// This component returns anything that could be considered "Progression" on a user: data where the user is gaining levels, reputation, completions, rewards, etc...
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesCharactersDestinyCharacterProgressionComponent
	{
		
		/// <summary>
		/// The set of checklists that can be examined for this specific character, keyed by the hash identifier of the Checklist (DestinyChecklistDefinition)
		///For each checklist returned, its value is itself a Dictionary keyed by the checklist's hash identifier with the value being a boolean indicating if it's been discovered yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checklists")]
		public System.Collections.Generic.Dictionary<string, object> Checklists { get; set; }
		
		/// <summary>
		/// A dictionary of all known Factions, keyed by the Faction's hash. It contains data about this character's status with the faction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factions")]
		public System.Collections.Generic.Dictionary<string, DestinyProgressionDestinyFactionProgression> Factions { get; set; }
		
		/// <summary>
		/// Milestones are related to the simple progressions shown in the game, but return additional and hopefully helpful information for users about the specifics of the Milestone's status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="milestones")]
		public System.Collections.Generic.Dictionary<string, DestinyMilestonesDestinyMilestone> Milestones { get; set; }
		
		/// <summary>
		/// A Dictionary of all known progressions for the Character, keyed by the Progression's hash.
		///Not all progressions have user-facing data, but those who do will have that data contained in the DestinyProgressionDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressions")]
		public System.Collections.Generic.Dictionary<string, DestinyDestinyProgression> Progressions { get; set; }
		
		/// <summary>
		/// If the user has any active quests, the quests' statuses will be returned here.
		/// Note that quests have been largely supplanted by Milestones, but that doesn't mean that they won't make a comeback independent of milestones at some point.
		/// (Fun fact: quests came back as I feared they would, but we never looped back to populate this... I'm going to put that in the backlog.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quests")]
		public DestinyQuestsDestinyQuestStatus[] Quests { get; set; }
		
		/// <summary>
		/// Data related to your progress on the current season's artifact that can vary per character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seasonalArtifact")]
		public string SeasonalArtifact { get; set; }
		
		/// <summary>
		/// Sometimes, you have items in your inventory that don't have instances, but still have Objective information. This provides you that objective information for uninstanced items. 
		///This dictionary is keyed by the item's hash: which you can use to look up the name and description for the overall task(s) implied by the objective. The value is the list of objectives for this item, and their statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uninstancedItemObjectives")]
		public System.Collections.Generic.Dictionary<string, DestinyQuestsDestinyObjectiveProgress[]> UninstancedItemObjectives { get; set; }
		
		/// <summary>
		/// Sometimes, you have items in your inventory that don't have instances, but still have perks (for example: Trials passage cards). This gives you the perk information for uninstanced items.
		///This dictionary is keyed by item hash, which you can use to look up the corresponding item definition. The value is the list of perks states for the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uninstancedItemPerks")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemPerksComponent> UninstancedItemPerks { get; set; }
	}
	
	/// <summary>
	/// Mostly for historical purposes, we segregate Faction progressions from other progressions. This is just a DestinyProgression with a shortcut for finding the DestinyFactionDefinition of the faction related to the progression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyProgressionDestinyFactionProgression
	{
		
		/// <summary>
		/// This is the total amount of progress obtained overall for this progression (for instance, the total amount of Character Level experience earned)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentProgress")]
		public System.Nullable<System.Int32> CurrentProgress { get; set; }
		
		/// <summary>
		/// The number of resets of this progression you've executed this season, if applicable to this progression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentResetCount")]
		public System.Nullable<System.Int32> CurrentResetCount { get; set; }
		
		/// <summary>
		/// If this progression has a daily limit, this is that limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyLimit")]
		public System.Nullable<System.Int32> DailyLimit { get; set; }
		
		/// <summary>
		/// The amount of progress earned today for this progression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyProgress")]
		public System.Nullable<System.Int32> DailyProgress { get; set; }
		
		/// <summary>
		/// The hash identifier of the Faction related to this progression. Use it to look up the DestinyFactionDefinition for more rendering info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factionHash")]
		public System.Nullable<System.UInt32> FactionHash { get; set; }
		
		/// <summary>
		/// The index of the Faction vendor that is currently available. Will be set to -1 if no vendors are available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factionVendorIndex")]
		public System.Nullable<System.Int32> FactionVendorIndex { get; set; }
		
		/// <summary>
		/// This is the level of the progression (for instance, the Character Level).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<System.Int32> Level { get; set; }
		
		/// <summary>
		/// This is the maximum possible level you can achieve for this progression (for example, the maximum character level obtainable)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="levelCap")]
		public System.Nullable<System.Int32> LevelCap { get; set; }
		
		/// <summary>
		/// The total amount of progression (i.e. "Experience") needed in order to reach the next level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLevelAt")]
		public System.Nullable<System.Int32> NextLevelAt { get; set; }
		
		/// <summary>
		/// The amount of progression (i.e. "Experience") needed to reach the next level of this Progression. Jeez, progression is such an overloaded word.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressToNextLevel")]
		public System.Nullable<System.Int32> ProgressToNextLevel { get; set; }
		
		/// <summary>
		/// The hash identifier of the Progression in question. Use it to look up the DestinyProgressionDefinition in static data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressionHash")]
		public System.Nullable<System.UInt32> ProgressionHash { get; set; }
		
		/// <summary>
		/// Information about historical rewards for this progression, if there is any data for it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardItemStates")]
		public int[] RewardItemStates { get; set; }
		
		/// <summary>
		/// Information about historical resets of this progression, if there is any data for it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seasonResets")]
		public DestinyDestinyProgressionResetEntry[] SeasonResets { get; set; }
		
		/// <summary>
		/// Progressions define their levels in "steps". Since the last step may be repeatable, the user may be at a higher level than the actual Step achieved in the progression. Not necessarily useful, but potentially interesting for those cruising the API. Relate this to the "steps" property of the DestinyProgression to see which step the user is on, if you care about that. (Note that this is Content Version dependent since it refers to indexes.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepIndex")]
		public System.Nullable<System.Int32> StepIndex { get; set; }
		
		/// <summary>
		/// If this progression has a weekly limit, this is that limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklyLimit")]
		public System.Nullable<System.Int32> WeeklyLimit { get; set; }
		
		/// <summary>
		/// The amount of progress earned toward this progression in the current week.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklyProgress")]
		public System.Nullable<System.Int32> WeeklyProgress { get; set; }
	}
	
	/// <summary>
	/// Represents a runtime instance of a user's milestone status. Live Milestone data should be combined with DestinyMilestoneDefinition data to show the user a picture of what is available for them to do in the game, and their status in regards to said "things to do." Consider it a big, wonky to-do list, or Advisors 3.0 for those who remember the Destiny 1 API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyMilestone
	{
		
		/// <summary>
		/// The currently active Activities in this milestone, when the Milestone is driven by Challenges.
		///Not all Milestones have Challenges, but when they do this will indicate the Activities and Challenges under those Activities related to this Milestone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public DestinyMilestonesDestinyMilestoneChallengeActivity[] Activities { get; set; }
		
		/// <summary>
		/// Indicates what quests are available for this Milestone. Usually this will be only a single Quest, but some quests have multiple available that you can choose from at any given time. All possible quests for a milestone can be found in the DestinyMilestoneDefinition, but they must be combined with this Live data to determine which one(s) are actually active right now. It is possible for Milestones to not have any quests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableQuests")]
		public DestinyMilestonesDestinyMilestoneQuest[] AvailableQuests { get; set; }
		
		/// <summary>
		/// If known, this is the date when the event will next end or repeat. It will only be populated for events with fixed and repeating start and end dates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// The unique identifier for the Milestone. Use it to look up the DestinyMilestoneDefinition, so you can combine the other data in this contract with static definition data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="milestoneHash")]
		public System.Nullable<System.UInt32> MilestoneHash { get; set; }
		
		/// <summary>
		/// Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// If the entity to which this component is attached has known active Rewards for the player, this will detail information about those rewards, keyed by the RewardEntry Hash. (See DestinyMilestoneDefinition for more information about Reward Entries) Note that these rewards are not for the Quests related to the Milestone. Think of these as "overview/checklist" rewards that may be provided for Milestones that may provide rewards for performing a variety of tasks that aren't under a specific Quest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewards")]
		public DestinyMilestonesDestinyMilestoneRewardCategory[] Rewards { get; set; }
		
		/// <summary>
		/// If known, this is the date when the event last began or refreshed. It will only be populated for events with fixed and repeating start and end dates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// Milestones may have arbitrary key/value pairs associated with them, for data that users will want to know about but that doesn't fit neatly into any of the common components such as Quests. A good example of this would be - if this existed in Destiny 1 - the number of wins you currently have on your Trials of Osiris ticket. Looking in the DestinyMilestoneDefinition, you can use the string identifier of this dictionary to look up more info about the value, including localized string content for displaying the value. The value in the dictionary is the floating point number. The definition will tell you how to format this number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public System.Collections.Generic.Dictionary<string, float> Values { get; set; }
		
		/// <summary>
		/// A milestone may have one or more active vendors that are "related" to it (that provide rewards, or that are the initiators of the Milestone). I already regret this, even as I'm typing it. [I told you I'd regret this] You see, sometimes a milestone may be directly correlated with a set of vendors that provide varying tiers of rewards. The player may not be able to interact with one or more of those vendors. This will return the hashes of the Vendors that the player *can* interact with, allowing you to show their current inventory as rewards or related items to the Milestone or its activities.
		///Before we even use it, it's already deprecated! How much of a bummer is that? We need more data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHashes")]
		public int[] VendorHashes { get; set; }
		
		/// <summary>
		/// Replaces vendorHashes, which I knew was going to be trouble the day it walked in the door. This will return not only what Vendors are active and relevant to the activity (in an implied order that you can choose to ignore), but also other data - for example, if the Vendor is featuring a specific item relevant to this event that you should show with them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendors")]
		public DestinyMilestonesDestinyMilestoneVendor[] Vendors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyMilestoneChallengeActivity
	{
		
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).
		///As a concrete example of this data, the hashes you get for Raids will correspond to the currently active "Challenge Mode".
		///We don't have any human readable information for these, but saavy 3rd party app users could manually associate the key (a hash identifier for the "option" that is enabled/disabled) and the value (whether it's enabled or disabled presently)
		///On our side, we don't necessarily even know what these are used for (the game designers know, but we don't), and we have no human readable data for them. In order to use them, you will have to do some experimentation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booleanActivityOptions")]
		public System.Collections.Generic.Dictionary<string, bool> BooleanActivityOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="challenges")]
		public DestinyChallengesDestinyChallengeStatus[] Challenges { get; set; }
		
		/// <summary>
		/// If returned, this is the index into the DestinyActivityDefinition's "loadouts" property, indicating the currently active loadout requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadoutRequirementIndex")]
		public System.Nullable<System.Int32> LoadoutRequirementIndex { get; set; }
		
		/// <summary>
		/// If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.
		///Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifierHashes")]
		public int[] ModifierHashes { get; set; }
		
		/// <summary>
		/// If the Activity has discrete "phases" that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phases")]
		public DestinyMilestonesDestinyMilestoneActivityPhase[] Phases { get; set; }
	}
	
	/// <summary>
	/// Represents whatever information we can return about an explicit phase in an activity. In the future, I hope we'll have more than just "guh, you done gone and did something," but for the forseeable future that's all we've got. I'm making it more than just a list of booleans out of that overly-optimistic hope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyMilestoneActivityPhase
	{
		
		/// <summary>
		/// Indicates if the phase has been completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complete")]
		public System.Nullable<System.Boolean> Complete { get; set; }
		
		/// <summary>
		/// In DestinyActivityDefinition, if the activity has phases, there will be a set of phases defined in the "insertionPoints" property. This is the hash that maps to that phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phaseHash")]
		public System.Nullable<System.UInt32> PhaseHash { get; set; }
	}
	
	/// <summary>
	/// If a Milestone has one or more Quests, this will contain the live information for the character's status with one of those quests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyMilestoneQuest
	{
		
		/// <summary>
		/// *IF* the Milestone has an active Activity that can give you greater details about what you need to do, it will be returned here. Remember to associate this with the DestinyMilestoneDefinition's activities to get details about the activity, including what specific quest it is related to if you have multiple quests to choose from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activity")]
		public string Activity { get; set; }
		
		/// <summary>
		/// The activities referred to by this quest can have many associated challenges. They are all contained here, with activityHashes so that you can associate them with the specific activity variants in which they can be found. In retrospect, I probably should have put these under the specific Activity Variants, but it's too late to change it now. Theoretically, a quest without Activities can still have Challenges, which is why this is on a higher level than activity/variants, but it probably should have been in both places. That may come as a later revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challenges")]
		public DestinyChallengesDestinyChallengeStatus[] Challenges { get; set; }
		
		/// <summary>
		/// Quests are defined as Items in content. As such, this is the hash identifier of the DestinyInventoryItemDefinition that represents this quest. It will have pointers to all of the steps in the quest, and display information for the quest (title, description, icon etc) Individual steps will be referred to in the Quest item's DestinyInventoryItemDefinition.setData property, and themselves are Items with their own renderable data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questItemHash")]
		public System.Nullable<System.UInt32> QuestItemHash { get; set; }
		
		/// <summary>
		/// The current status of the quest for the character making the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Represents a category of "summary" rewards that can be earned for the Milestone regardless of specific quest rewards that can be earned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyMilestoneRewardCategory
	{
		
		/// <summary>
		/// The individual reward entries for this category, and their status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DestinyMilestonesDestinyMilestoneRewardEntry[] Entries { get; set; }
		
		/// <summary>
		/// Look up the relevant DestinyMilestoneDefinition, and then use rewardCategoryHash to look up the category info in DestinyMilestoneDefinition.rewards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardCategoryHash")]
		public System.Nullable<System.UInt32> RewardCategoryHash { get; set; }
	}
	
	/// <summary>
	/// The character-specific data for a milestone's reward entry. See DestinyMilestoneDefinition for more information about Reward Entries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyMilestoneRewardEntry
	{
		
		/// <summary>
		/// If TRUE, the player has earned this reward.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="earned")]
		public System.Nullable<System.Boolean> Earned { get; set; }
		
		/// <summary>
		/// If TRUE, the player has redeemed/picked up/obtained this reward. Feel free to alias this to "gotTheShinyBauble" in your own codebase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redeemed")]
		public System.Nullable<System.Boolean> Redeemed { get; set; }
		
		/// <summary>
		/// The identifier for the reward entry in question. It is important to look up the related DestinyMilestoneRewardEntryDefinition to get the static details about the reward, which you can do by looking up the milestone's DestinyMilestoneDefinition and examining the DestinyMilestoneDefinition.rewards[rewardCategoryHash].rewardEntries[rewardEntryHash] data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardEntryHash")]
		public System.Nullable<System.UInt32> RewardEntryHash { get; set; }
	}
	
	/// <summary>
	/// If a Milestone has one or more Vendors that are relevant to it, this will contain information about that vendor that you can choose to show.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyMilestoneVendor
	{
		
		/// <summary>
		/// If this vendor is featuring a specific item for this event, this will be the hash identifier of that item. I'm taking bets now on how long we go before this needs to be a list or some other, more complex representation instead and I deprecate this too. I'm going to go with 5 months. Calling it now, 2017-09-14 at 9:46pm PST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previewItemHash")]
		public System.Nullable<System.UInt32> PreviewItemHash { get; set; }
		
		/// <summary>
		/// The hash identifier of the Vendor related to this Milestone. You can show useful things from this, such as thier Faction icon or whatever you might care about.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHash")]
		public System.Nullable<System.UInt32> VendorHash { get; set; }
	}
	
	/// <summary>
	/// Data regarding the progress of a Quest for a specific character. Quests are composed of multiple steps, each with potentially multiple objectives: this QuestStatus will return Objective data for the *currently active* step in this quest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyQuestsDestinyQuestStatus
	{
		
		/// <summary>
		/// Whether or not the whole quest has been completed, regardless of whether or not you have redeemed the rewards for the quest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public System.Nullable<System.Boolean> Completed { get; set; }
		
		/// <summary>
		/// The current Quest Step will be an instanced item in the player's inventory. If you care about that, this is the instance ID of that item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemInstanceId")]
		public System.Nullable<System.Int64> ItemInstanceId { get; set; }
		
		/// <summary>
		/// The hash identifier for the Quest Item. (Note: Quests are defined as Items, and thus you would use this to look up the quest's DestinyInventoryItemDefinition). For information on all steps in the quest, you can then examine its DestinyInventoryItemDefinition.setData property for Quest Steps (which are *also* items). You can use the Item Definition to display human readable data about the overall quest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questHash")]
		public System.Nullable<System.UInt32> QuestHash { get; set; }
		
		/// <summary>
		/// Whether or not you have redeemed rewards for this quest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redeemed")]
		public System.Nullable<System.Boolean> Redeemed { get; set; }
		
		/// <summary>
		/// Whether or not you have started this quest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.Nullable<System.Boolean> Started { get; set; }
		
		/// <summary>
		/// The hash identifier of the current Quest Step, which is also a DestinyInventoryItemDefinition. You can use this to get human readable data about the current step and what to do in that step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepHash")]
		public System.Nullable<System.UInt32> StepHash { get; set; }
		
		/// <summary>
		/// A step can have multiple objectives. This will give you the progress for each objective in the current step, in the order in which they are rendered in-game.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stepObjectives")]
		public DestinyQuestsDestinyObjectiveProgress[] StepObjectives { get; set; }
		
		/// <summary>
		/// Whether or not the quest is tracked
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tracked")]
		public System.Nullable<System.Boolean> Tracked { get; set; }
		
		/// <summary>
		/// If the quest has a related Vendor that you should talk to in order to initiate the quest/earn rewards/continue the quest, this will be the hash identifier of that Vendor. Look it up its DestinyVendorDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHash")]
		public System.Nullable<System.UInt32> VendorHash { get; set; }
	}
	
	/// <summary>
	/// Instanced items can have perks: benefits that the item bestows.
	///These are related to DestinySandboxPerkDefinition, and sometimes - but not always - have human readable info. When they do, they are the icons and text that you see in an item's tooltip.
	///Talent Grids, Sockets, and the item itself can apply Perks, which are then summarized here for your convenience.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesItemsDestinyItemPerksComponent
	{
		
		/// <summary>
		/// The list of perks to display in an item tooltip - and whether or not they have been activated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perks")]
		public DestinyPerksDestinyPerkReference[] Perks { get; set; }
	}
	
	/// <summary>
	/// The list of perks to display in an item tooltip - and whether or not they have been activated.
	///Perks apply a variety of effects to a character, and are generally either intrinsic to the item or provided in activated talent nodes or sockets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyPerksDestinyPerkReference
	{
		
		/// <summary>
		/// The icon for the perk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconPath")]
		public string IconPath { get; set; }
		
		/// <summary>
		/// Whether this perk is currently active. (We may return perks that you have not actually activated yet: these represent perks that you should show in the item's tooltip, but that the user has not yet activated.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// The hash identifier for the perk, which can be used to look up DestinySandboxPerkDefinition if it exists. Be warned, perks frequently do not have user-viewable information. You should examine whether you actually found a name/description in the perk's definition before you show it to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perkHash")]
		public System.Nullable<System.UInt32> PerkHash { get; set; }
		
		/// <summary>
		/// Some perks provide benefits, but aren't visible in the UI. This value will let you know if this is perk should be shown in your UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	/// <summary>
	/// Only really useful if you're attempting to render the character's current appearance in 3D, this returns a bare minimum of information, pre-aggregated, that you'll need to perform that rendering. Note that you need to combine this with other 3D assets and data from our servers.
	///Examine the Javascript returned by https://bungie.net/sharedbundle/spasm to see how we use this data, but be warned: the rabbit hole goes pretty deep.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesCharactersDestinyCharacterRenderComponent
	{
		
		/// <summary>
		/// Custom dyes, calculated by iterating over the character's equipped items. Useful for pre-fetching all of the dye data needed from our server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customDyes")]
		public DestinyDyeReference[] CustomDyes { get; set; }
		
		/// <summary>
		/// This is actually something that Spasm.js *doesn't* do right now, and that we don't return assets for yet. This is the data about what character customization options you picked. You can combine this with DestinyCharacterCustomizationOptionDefinition to show some cool info, and hopefully someday to actually render a user's face in 3D. We'll see if we ever end up with time for that.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customization")]
		public string Customization { get; set; }
		
		/// <summary>
		/// A minimal view of:
		///- Equipped items
		///- The rendering-related custom options on those equipped items
		///Combined, that should be enough to render all of the items on the equipped character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peerView")]
		public string PeerView { get; set; }
	}
	
	/// <summary>
	/// A list of minimal information for items in an inventory: be it a character's inventory, or a Profile's inventory. (Note that the Vault is a collection of inventory buckets in the Profile's inventory)
	///Inventory Items returned here are in a flat list, but importantly they have a bucketHash property that indicates the specific inventory bucket that is holding them. These buckets constitute things like the separate sections of the Vault, the user's inventory slots, etc. See DestinyInventoryBucketDefinition for more info.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesInventoryDestinyInventoryComponent
	{
		
		/// <summary>
		/// The items in this inventory. If you care to bucket them, use the item's bucketHash property to group them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public DestinyEntitiesItemsDestinyItemComponent[] Items { get; set; }
	}
	
	/// <summary>
	/// If an item is "instanced", this will contain information about the item's instance that doesn't fit easily into other components. One might say this is the "essential" instance data for the item.
	///Items are instanced if they require information or state that can vary. For instance, weapons are Instanced: they are given a unique identifier, uniquely generated stats, and can have their properties altered. Non-instanced items have none of these things: for instance, Glimmer has no unique properties aside from how much of it you own.
	///You can tell from an item's definition whether it will be instanced or not by looking at the DestinyInventoryItemDefinition's definition.inventory.isInstanceItem property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesItemsDestinyItemInstanceComponent
	{
		
		/// <summary>
		/// If populated, this item has a breaker type corresponding to the given value. See DestinyBreakerTypeDefinition for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakerType")]
		public System.Nullable<DestinyEntitiesItemsDestinyItemInstanceComponentBreakerType> BreakerType { get; set; }
		
		/// <summary>
		/// If populated, this is the hash identifier for the item's breaker type. See DestinyBreakerTypeDefinition for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="breakerTypeHash")]
		public System.Nullable<System.UInt32> BreakerTypeHash { get; set; }
		
		/// <summary>
		/// If this is an equippable item, you can check it here. There are permanent as well as transitory reasons why an item might not be able to be equipped: check cannotEquipReason for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canEquip")]
		public System.Nullable<System.Boolean> CanEquip { get; set; }
		
		/// <summary>
		/// If you cannot equip the item, this is a flags enum that enumerates all of the reasons why you couldn't equip the item. You may need to refine your UI further by using unlockHashesRequiredToEquip and equipRequiredLevel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cannotEquipReason")]
		public System.Nullable<System.Int32> CannotEquipReason { get; set; }
		
		/// <summary>
		/// If the item has a damage type, this is the item's current damage type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="damageType")]
		public System.Nullable<System.Int32> DamageType { get; set; }
		
		/// <summary>
		/// The current damage type's hash, so you can look up localized info and icons for it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="damageTypeHash")]
		public System.Nullable<System.UInt32> DamageTypeHash { get; set; }
		
		/// <summary>
		/// IF populated, this item supports Energy mechanics (i.e. Armor 2.0), and these are the current details of its energy type and available capacity to spend energy points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energy")]
		public string Energy { get; set; }
		
		/// <summary>
		/// If the item cannot be equipped until you reach a certain level, that level will be reflected here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equipRequiredLevel")]
		public System.Nullable<System.Int32> EquipRequiredLevel { get; set; }
		
		/// <summary>
		/// Is the item currently equipped on the given character?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEquipped")]
		public System.Nullable<System.Boolean> IsEquipped { get; set; }
		
		/// <summary>
		/// The Item's "Level" has the most significant bearing on its stats, such as Light and Power.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemLevel")]
		public System.Nullable<System.Int32> ItemLevel { get; set; }
		
		/// <summary>
		/// The item stat that we consider to be "primary" for the item. For instance, this would be "Attack" for Weapons or "Defense" for armor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryStat")]
		public string PrimaryStat { get; set; }
		
		/// <summary>
		/// The "Quality" of the item has a lesser - but still impactful - bearing on stats like Light and Power.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quality")]
		public System.Nullable<System.Int32> Quality { get; set; }
		
		/// <summary>
		/// Sometimes, there are limitations to equipping that are represented by character-level flags called "unlocks".
		///This is a list of flags that they need in order to equip the item that the character has not met. Use these to look up the descriptions to show in your UI by looking up the relevant DestinyUnlockDefinitions for the hashes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlockHashesRequiredToEquip")]
		public int[] UnlockHashesRequiredToEquip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyEntitiesItemsDestinyItemInstanceComponentBreakerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesItemsDestinyItemInstanceEnergy
	{
		
		/// <summary>
		/// The total capacity of Energy that the item currently has, regardless of if it is currently being used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyCapacity")]
		public System.Nullable<System.Int32> EnergyCapacity { get; set; }
		
		/// <summary>
		/// This is the enum version of the Energy Type value, for convenience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyType")]
		public System.Nullable<System.Int32> EnergyType { get; set; }
		
		/// <summary>
		/// The type of energy for this item. Plugs that require Energy can only be inserted if they have the "Any" Energy Type or the matching energy type of this item. This is a reference to the DestinyEnergyTypeDefinition for the energy type, where you can find extended info about it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyTypeHash")]
		public System.Nullable<System.UInt32> EnergyTypeHash { get; set; }
		
		/// <summary>
		/// The amount of energy still available for inserting new plugs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyUnused")]
		public System.Nullable<System.Int32> EnergyUnused { get; set; }
		
		/// <summary>
		/// The amount of Energy currently in use by inserted plugs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energyUsed")]
		public System.Nullable<System.Int32> EnergyUsed { get; set; }
	}
	
	/// <summary>
	/// Items can have objectives and progression. When you request this block, you will obtain information about any Objectives and progression tied to this item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesItemsDestinyItemObjectivesComponent
	{
		
		/// <summary>
		/// If we have any information on when these objectives were completed, this will be the date of that completion. This won't be on many items, but could be interesting for some items that do store this information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateCompleted")]
		public System.Nullable<System.DateTimeOffset> DateCompleted { get; set; }
		
		/// <summary>
		/// I may regret naming it this way - but this represents when an item has an objective that doesn't serve a beneficial purpose, but rather is used for "flavor" or additional information. For instance, when Emblems track specific stats, those stats are represented as Objectives on the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flavorObjective")]
		public string FlavorObjective { get; set; }
		
		/// <summary>
		/// If the item has a hard association with objectives, your progress on them will be defined here. 
		///Objectives are our standard way to describe a series of tasks that have to be completed for a reward.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectives")]
		public DestinyQuestsDestinyObjectiveProgress[] Objectives { get; set; }
	}
	
	/// <summary>
	/// Many items can be rendered in 3D. When you request this block, you will obtain the custom data needed to render this specific instance of the item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesItemsDestinyItemRenderComponent
	{
		
		/// <summary>
		/// A dictionary for rendering gear components, with:
		///key = Art Arrangement Region Index
		///value = The chosen Arrangement Index for the Region, based on the value of a stat on the item used for making the choice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artRegions")]
		public System.Collections.Generic.Dictionary<string, int> ArtRegions { get; set; }
		
		/// <summary>
		/// If you should use custom dyes on this item, it will be indicated here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useCustomDyes")]
		public System.Nullable<System.Boolean> UseCustomDyes { get; set; }
	}
	
	/// <summary>
	/// The status of a given item's socket. (which plug is inserted, if any: whether it is enabled, what "reusable" plugs can be inserted, etc...)
	///If I had it to do over, this would probably have a DestinyItemPlug representing the inserted item instead of most of these properties. :shrug:
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesItemsDestinyItemSocketState
	{
		
		/// <summary>
		/// If a plug is inserted but not enabled, this will be populated with indexes into the plug item definition's plug.enabledRules property, so that you can show the reasons why it is not enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableFailIndexes")]
		public int[] EnableFailIndexes { get; set; }
		
		/// <summary>
		/// Even if a plug is inserted, it doesn't mean it's enabled.
		///This flag indicates whether the plug is active and providing its benefits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEnabled")]
		public System.Nullable<System.Boolean> IsEnabled { get; set; }
		
		/// <summary>
		/// A plug may theoretically provide benefits but not be visible - for instance, some older items use a plug's damage type perk to modify their own damage type. These, though they are not visible, still affect the item. This field indicates that state.
		///An invisible plug, while it provides benefits if it is Enabled, cannot be directly modified by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isVisible")]
		public System.Nullable<System.Boolean> IsVisible { get; set; }
		
		/// <summary>
		/// The currently active plug, if any.
		///Note that, because all plugs are statically defined, its effect on stats and perks can be statically determined using the plug item's definition. The stats and perks can be taken at face value on the plug item as the stats and perks it will provide to the user/item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugHash")]
		public System.Nullable<System.UInt32> PlugHash { get; set; }
	}
	
	/// <summary>
	/// Instanced items can have sockets, which are slots on the item where plugs can be inserted.
	///Sockets are a bit complex: be sure to examine the documentation on the DestinyInventoryItemDefinition's "socket" block and elsewhere on these objects for more details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesItemsDestinyItemSocketsComponent
	{
		
		/// <summary>
		/// The list of all sockets on the item, and their status information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sockets")]
		public DestinyEntitiesItemsDestinyItemSocketState[] Sockets { get; set; }
	}
	
	/// <summary>
	/// If you want the stats on an item's instanced data, get this component.
	///These are stats like Attack, Defense etc... and *not* historical stats.
	///Note that some stats have additional computation in-game at runtime - for instance, Magazine Size - and thus these stats might not be 100% accurate compared to what you see in-game for some stats. I know, it sucks. I hate it too.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesItemsDestinyItemStatsComponent
	{
		
		/// <summary>
		/// If the item has stats that it provides (damage, defense, etc...), it will be given here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public System.Collections.Generic.Dictionary<string, DestinyDestinyStat> Stats { get; set; }
	}
	
	/// <summary>
	/// Well, we're here in Destiny 2, and Talent Grids are unfortunately still around.
	///The good news is that they're pretty much only being used for certain base information on items and for Builds/Subclasses. The bad news is that they still suck. If you really want this information, grab this component.
	///An important note is that talent grids are defined as such:
	///A Grid has 1:M Nodes, which has 1:M Steps.
	///Any given node can only have a single step active at one time, which represents the actual visual contents and effects of the Node (for instance, if you see a "Super Cool Bonus" node, the actual icon and text for the node is coming from the current Step of that node).
	///Nodes can be grouped into exclusivity sets *and* as of D2, exclusivity groups (which are collections of exclusivity sets that affect each other).
	///See DestinyTalentGridDefinition for more information. Brace yourself, the water's cold out there in the deep end.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesItemsDestinyItemTalentGridComponent
	{
		
		/// <summary>
		/// If the item has a progression, it will be detailed here. A progression means that the item can gain experience. Thresholds of experience are what determines whether and when a talent node can be activated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gridProgression")]
		public string GridProgression { get; set; }
		
		/// <summary>
		/// Indicates whether the talent grid on this item is completed, and thus whether it should have a gold border around it.
		///Only will be true if the item actually *has* a talent grid, and only then if it is completed (i.e. every exclusive set has an activated node, and every non-exclusive set node has been activated)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isGridComplete")]
		public System.Nullable<System.Boolean> IsGridComplete { get; set; }
		
		/// <summary>
		/// Detailed information about the individual nodes in the talent grid.
		///A node represents a single visual "pip" in the talent grid or Build detail view, though each node may have multiple "steps" which indicate the actual bonuses and visual representation of that node.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodes")]
		public DestinyDestinyTalentNode[] Nodes { get; set; }
		
		/// <summary>
		/// Most items don't have useful talent grids anymore, but Builds in particular still do.
		///You can use this hash to lookup the DestinyTalentGridDefinition attached to this item, which will be crucial for understanding the node values on the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="talentGridHash")]
		public System.Nullable<System.UInt32> TalentGridHash { get; set; }
	}
	
	/// <summary>
	/// The most essential summary information about a Profile (in Destiny 1, we called these "Accounts").
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesProfilesDestinyProfileComponent
	{
		
		/// <summary>
		/// If populated, this is a reference to the event card that is currently active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeEventCardHash")]
		public System.Nullable<System.UInt32> ActiveEventCardHash { get; set; }
		
		/// <summary>
		/// A list of the character IDs, for further querying on your part.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterIds")]
		public int[] CharacterIds { get; set; }
		
		/// <summary>
		/// The 'current' Guardian Rank value, which starts at rank 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentGuardianRank")]
		public System.Nullable<System.Int32> CurrentGuardianRank { get; set; }
		
		/// <summary>
		/// If populated, this is a reference to the season that is currently active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentSeasonHash")]
		public System.Nullable<System.UInt32> CurrentSeasonHash { get; set; }
		
		/// <summary>
		/// If populated, this is the reward power cap for the current season.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentSeasonRewardPowerCap")]
		public System.Nullable<System.Int32> CurrentSeasonRewardPowerCap { get; set; }
		
		/// <summary>
		/// The last time the user played with any character on this Profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateLastPlayed")]
		public System.Nullable<System.DateTimeOffset> DateLastPlayed { get; set; }
		
		/// <summary>
		/// A list of hashes for event cards that a profile owns. Unlike most values in versionsOwned, these stay with the profile across all platforms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventCardHashesOwned")]
		public int[] EventCardHashesOwned { get; set; }
		
		/// <summary>
		/// The 'lifetime highest' Guardian Rank value, which starts at rank 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifetimeHighestGuardianRank")]
		public System.Nullable<System.Int32> LifetimeHighestGuardianRank { get; set; }
		
		/// <summary>
		/// A list of seasons that this profile owns. Unlike versionsOwned, these stay with the profile across Platforms, and thus will be valid.
		/// It turns out that Stadia Pro subscriptions will give access to seasons but only while playing on Stadia and with an active subscription. So some users (users who have Stadia Pro but choose to play on some other platform) won't see these as available: it will be whatever seasons are available for the platform on which they last played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seasonHashes")]
		public int[] SeasonHashes { get; set; }
		
		/// <summary>
		/// If you need to render the Profile (their platform name, icon, etc...) somewhere, this property contains that information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userInfo")]
		public string UserInfo { get; set; }
		
		/// <summary>
		/// If you want to know what expansions they own, this will contain that data.
		/// IMPORTANT: This field may not return the data you're interested in for Cross-Saved users. It returns the last ownership data we saw for this account - which is to say, what they've purchased on the platform on which they last played, which now could be a different platform.
		/// If you don't care about per-platform ownership and only care about whatever platform it seems they are playing on most recently, then this should be "good enough." Otherwise, this should be considered deprecated. We do not have a good alternative to provide at this time with platform specific ownership data for DLC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionsOwned")]
		public System.Nullable<System.Int32> VersionsOwned { get; set; }
	}
	
	/// <summary>
	/// For now, this isn't used for much: it's a record of the recent refundable purchases that the user has made. In the future, it could be used for providing refunds/buyback via the API. Wouldn't that be fun?
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesProfilesDestinyVendorReceiptsComponent
	{
		
		/// <summary>
		/// The receipts for refundable purchases made at a vendor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receipts")]
		public DestinyVendorsDestinyVendorReceipt[] Receipts { get; set; }
	}
	
	/// <summary>
	/// If a character purchased an item that is refundable, a Vendor Receipt will be created on the user's Destiny Profile. These expire after a configurable period of time, but until then can be used to get refunds on items. BNet does not provide the ability to refund a purchase *yet*, but you know.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyVendorsDestinyVendorReceipt
	{
		
		/// <summary>
		/// The amount paid for the item, in terms of items that were consumed in the purchase and their quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyPaid")]
		public DestinyDestinyItemQuantity[] CurrencyPaid { get; set; }
		
		/// <summary>
		/// The date at which this receipt is rendered invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresOn")]
		public System.Nullable<System.DateTimeOffset> ExpiresOn { get; set; }
		
		/// <summary>
		/// The item that was received, and its quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemReceived")]
		public string ItemReceived { get; set; }
		
		/// <summary>
		/// The unlock flag used to determine whether you still have the purchased item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenseUnlockHash")]
		public System.Nullable<System.UInt32> LicenseUnlockHash { get; set; }
		
		/// <summary>
		/// The ID of the character who made the purchase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchasedByCharacterId")]
		public System.Nullable<System.Int64> PurchasedByCharacterId { get; set; }
		
		/// <summary>
		/// Whether you can get a refund, and what happens in order for the refund to be received. See the DestinyVendorItemRefundPolicy enum for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refundPolicy")]
		public System.Nullable<System.Int32> RefundPolicy { get; set; }
		
		/// <summary>
		/// The identifier of this receipt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sequenceNumber")]
		public System.Nullable<System.Int32> SequenceNumber { get; set; }
		
		/// <summary>
		/// The seconds since epoch at which this receipt is rendered invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeToExpiration")]
		public System.Nullable<System.Int64> TimeToExpiration { get; set; }
	}
	
	/// <summary>
	/// A vendor can have many categories of items that they sell. This component will return the category information for available items, as well as the index into those items in the user's sale item list.
	///Note that, since both the category and items are indexes, this data is Content Version dependent. Be sure to check that your content is up to date before using this data. This is an unfortunate, but permanent, limitation of Vendor data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesVendorsDestinyVendorCategoriesComponent
	{
		
		/// <summary>
		/// The list of categories for items that the vendor sells, in rendering order.
		///These categories each point to a "display category" in the displayCategories property of the DestinyVendorDefinition, as opposed to the other categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public DestinyEntitiesVendorsDestinyVendorCategory[] Categories { get; set; }
	}
	
	/// <summary>
	/// Information about the category and items currently sold in that category.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesVendorsDestinyVendorCategory
	{
		
		/// <summary>
		/// An index into the DestinyVendorDefinition.displayCategories property, so you can grab the display data for this category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayCategoryIndex")]
		public System.Nullable<System.Int32> DisplayCategoryIndex { get; set; }
		
		/// <summary>
		/// An ordered list of indexes into items being sold in this category (DestinyVendorDefinition.itemList) which will contain more information about the items being sold themselves. Can also be used to index into DestinyVendorSaleItemComponent data, if you asked for that data to be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemIndexes")]
		public int[] ItemIndexes { get; set; }
	}
	
	/// <summary>
	/// This component contains essential/summary information about the vendor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesVendorsDestinyVendorComponent
	{
		
		/// <summary>
		/// If True, you can purchase from the Vendor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canPurchase")]
		public System.Nullable<System.Boolean> CanPurchase { get; set; }
		
		/// <summary>
		/// If True, the Vendor is currently accessible. 
		///If False, they may not actually be visible in the world at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// The date when this vendor's inventory will next rotate/refresh.
		///Note that this is distinct from the date ranges that the vendor is visible/available in-game: this field indicates the specific time when the vendor's available items refresh and rotate, regardless of whether the vendor is actually available at that time. Unfortunately, these two values may be (and are, for the case of important vendors like Xur) different.
		///Issue https://github.com/Bungie-net/api/issues/353 is tracking a fix to start providing visibility date ranges where possible in addition to this refresh date, so that all important dates for vendors are available for use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextRefreshDate")]
		public System.Nullable<System.DateTimeOffset> NextRefreshDate { get; set; }
		
		/// <summary>
		/// If the Vendor has a related Reputation, this is the Progression data that represents the character's Reputation level with this Vendor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progression")]
		public string Progression { get; set; }
		
		/// <summary>
		/// If this vendor has a seasonal rank, this will be the calculated value of that rank. How nice is that? I mean, that's pretty sweeet. It's a whole 32 bit integer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seasonalRank")]
		public System.Nullable<System.Int32> SeasonalRank { get; set; }
		
		/// <summary>
		/// The unique identifier for the vendor. Use it to look up their DestinyVendorDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHash")]
		public System.Nullable<System.UInt32> VendorHash { get; set; }
		
		/// <summary>
		/// An index into the vendor definition's "locations" property array, indicating which location they are at currently. If -1, then the vendor has no known location (and you may choose not to show them in your UI as a result. I mean, it's your bag honey)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorLocationIndex")]
		public System.Nullable<System.Int32> VendorLocationIndex { get; set; }
	}
	
	/// <summary>
	/// Request this component if you want the details about an item being sold in relation to the character making the request: whether the character can buy it, whether they can afford it, and other data related to purchasing the item.
	///Note that if you want instance, stats, etc... data for the item, you'll have to request additional components such as ItemInstances, ItemPerks etc... and acquire them from the DestinyVendorResponse's "items" property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyEntitiesVendorsDestinyVendorSaleItemComponent
	{
		
		/// <summary>
		/// If true, this item can be purchased through the Bungie.net API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiPurchasable")]
		public System.Nullable<System.Boolean> ApiPurchasable { get; set; }
		
		/// <summary>
		/// A flags enumeration value representing the current state of any "state modifiers" on the item being sold. These are meant to correspond with some sort of visual indicator as to the augmentation: for instance, if an item is on sale or if you already own the item in question.
		///Determining how you want to represent these in your own app (or if you even want to) is an exercise left for the reader.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="augments")]
		public System.Nullable<System.Int32> Augments { get; set; }
		
		/// <summary>
		/// A summary of the current costs of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costs")]
		public DestinyDestinyItemQuantity[] Costs { get; set; }
		
		/// <summary>
		/// Indexes in to the "failureStrings" lookup table in DestinyVendorDefinition for the given Vendor. Gives some more reliable failure information for why you can't purchase an item.
		///It is preferred to use these over requiredUnlocks and unlockStatuses: the latter are provided mostly in case someone can do something interesting with it that I didn't anticipate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureIndexes")]
		public int[] FailureIndexes { get; set; }
		
		/// <summary>
		/// The hash of the item being sold, as a quick shortcut for looking up the DestinyInventoryItemDefinition of the sale item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
		
		/// <summary>
		/// If available, a list that describes which item values (rewards) should be shown (true) or hidden (false).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemValueVisibility")]
		public bool[] ItemValueVisibility { get; set; }
		
		/// <summary>
		/// If this item has its own custom date where it may be removed from the Vendor's rotation, this is that date.
		///Note that there's not actually any guarantee that it will go away: it could be chosen again and end up still being in the Vendor's sale items! But this is the next date where that test will occur, and is also the date that the game shows for availability on things like Bounties being sold. So it's the best we can give.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideNextRefreshDate")]
		public System.Nullable<System.DateTimeOffset> OverrideNextRefreshDate { get; set; }
		
		/// <summary>
		/// If populated, this is the hash of the item whose icon (and other secondary styles, but *not* the human readable strings) should override whatever icons/styles are on the item being sold.
		///If you don't do this, certain items whose styles are being overridden by socketed items - such as the "Recycle Shader" item - would show whatever their default icon/style is, and it wouldn't be pretty or look accurate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrideStyleItemHash")]
		public System.Nullable<System.UInt32> OverrideStyleItemHash { get; set; }
		
		/// <summary>
		/// How much of the item you'll be getting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// If you can't buy the item due to a complex character state, these will be hashes for DestinyUnlockDefinitions that you can check to see messages regarding the failure (if the unlocks have human readable information: it is not guaranteed that Unlocks will have human readable strings, and your application will have to handle that)
		///Prefer using failureIndexes instead. These are provided for informational purposes, but have largely been supplanted by failureIndexes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredUnlocks")]
		public int[] RequiredUnlocks { get; set; }
		
		/// <summary>
		/// A flag indicating whether the requesting character can buy the item, and if not the reasons why the character can't buy it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="saleStatus")]
		public System.Nullable<System.Int32> SaleStatus { get; set; }
		
		/// <summary>
		/// If any complex unlock states are checked in determining purchasability, these will be returned here along with the status of the unlock check.
		///Prefer using failureIndexes instead. These are provided for informational purposes, but have largely been supplanted by failureIndexes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlockStatuses")]
		public DestinyDestinyUnlockStatus[] UnlockStatuses { get; set; }
		
		/// <summary>
		/// The index into the DestinyVendorDefinition.itemList property. Note that this means Vendor data *is* Content Version dependent: make sure you have the latest content before you use Vendor data, or these indexes may mismatch. 
		///Most systems avoid this problem, but Vendors is one area where we are unable to reasonably avoid content dependency at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorItemIndex")]
		public System.Nullable<System.Int32> VendorItemIndex { get; set; }
	}
	
	/// <summary>
	/// The reasons why an item cannot be equipped, if any. Many flags can be set, or "None" if
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyEquipFailureReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyEquippingItemBlockAttributes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	/// <summary>
	/// For historical reasons, this list will have both D1 and D2-relevant Activity Modes in it. Please don't take this to mean that some D1-only feature is coming back!
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyHistoricalStatsDefinitionsDestinyActivityModeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
		_31 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
		_37 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
		_38 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
		_39 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
		_40 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
		_41 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
		_42 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
		_43 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
		_44 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
		_45 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
		_46 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
		_47 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
		_48 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
		_49 = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
		_50 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
		_51 = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
		_52 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
		_53 = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
		_54 = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
		_55 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
		_56 = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
		_57 = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
		_58 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
		_59 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
		_60 = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
		_61 = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
		_62 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
		_63 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
		_65 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
		_66 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
		_67 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
		_68 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
		_69 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
		_70 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
		_71 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
		_72 = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
		_73 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
		_74 = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
		_75 = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
		_76 = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
		_77 = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
		_78 = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
		_79 = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
		_80 = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
		_81 = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
		_82 = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
		_83 = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
		_84 = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
		_85 = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
		_86 = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
		_87 = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
		_88 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
		_89 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
		_90 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
		_91 = 83,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinition
	{
		
		/// <summary>
		/// Category for the stat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<System.Int32> Category { get; set; }
		
		/// <summary>
		/// Statistic group
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="group")]
		public System.Nullable<System.Int32> Group { get; set; }
		
		/// <summary>
		/// Optional URI to an icon for the statistic
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconImage")]
		public string IconImage { get; set; }
		
		/// <summary>
		/// The tier associated with this medal - be it implicitly or explicitly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="medalTierHash")]
		public System.Nullable<System.UInt32> MedalTierHash { get; set; }
		
		/// <summary>
		/// Optional icon for the statistic
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mergeMethod")]
		public System.Nullable<DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethod> MergeMethod { get; set; }
		
		/// <summary>
		/// Game modes where this statistic can be reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modes")]
		public int[] Modes { get; set; }
		
		/// <summary>
		/// Time periods the statistic covers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periodTypes")]
		public int[] PeriodTypes { get; set; }
		
		/// <summary>
		/// Description of a stat if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statDescription")]
		public string StatDescription { get; set; }
		
		/// <summary>
		/// Unique programmer friendly ID for this stat
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statId")]
		public string StatId { get; set; }
		
		/// <summary>
		/// Display name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statName")]
		public string StatName { get; set; }
		
		/// <summary>
		/// Display name abbreviated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statNameAbbr")]
		public string StatNameAbbr { get; set; }
		
		/// <summary>
		/// Localized Unit Name for the stat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitLabel")]
		public string UnitLabel { get; set; }
		
		/// <summary>
		/// Unit, if any, for the statistic
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitType")]
		public System.Nullable<System.Int32> UnitType { get; set; }
		
		/// <summary>
		/// Weight assigned to this stat indicating its relative impressiveness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyHistoricalStatsDefinitionsDestinyHistoricalStatsDefinitionMergeMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyHistoricalStatsDefinitionsDestinyStatsCategoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 15,
	}
	
	/// <summary>
	/// If the enum value is > 100, it is a "special" group that cannot be queried for directly (special cases apply to when they are returned, and are not relevant in general cases)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyHistoricalStatsDefinitionsDestinyStatsGroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
		_100 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="101")]
		_101 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="102")]
		_102 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="103")]
		_103 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="104")]
		_104 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyHistoricalStatsDefinitionsDestinyStatsMergeMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyHistoricalStatsDefinitionsPeriodType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyHistoricalStatsDefinitionsUnitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyActivityHistoryResults
	{
		
		/// <summary>
		/// List of activities, the most recent activity first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup[] Activities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup
	{
		
		/// <summary>
		/// If the period group is for a specific activity, this property will be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityDetails")]
		public string ActivityDetails { get; set; }
		
		/// <summary>
		/// Period for the group. If the stat periodType is day, then this will have a specific day. If the type is monthly, then this value will be the first day of the applicable month. This value is not set when the periodType is 'all time'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<System.DateTimeOffset> Period { get; set; }
		
		/// <summary>
		/// Collection of stats for the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyHistoricalStatsValue
	{
		
		/// <summary>
		/// When a stat represents the best, most, longest, fastest or some other personal best, the actual activity ID where that personal best was established is available on this property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityId")]
		public System.Nullable<System.Int64> ActivityId { get; set; }
		
		/// <summary>
		/// Basic stat value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basic")]
		public string Basic { get; set; }
		
		/// <summary>
		/// Per game average for the statistic, if applicable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pga")]
		public string Pga { get; set; }
		
		/// <summary>
		/// Unique ID for this stat
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statId")]
		public string StatId { get; set; }
		
		/// <summary>
		/// Weighted value of the stat if a weight greater than 1 has been assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weighted")]
		public string Weighted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyAggregateActivityResults
	{
		
		/// <summary>
		/// List of all activities the player has participated in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public DestinyHistoricalStatsDestinyAggregateActivityStats[] Activities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyAggregateActivityStats
	{
		
		/// <summary>
		/// Hash ID that can be looked up in the DestinyActivityTable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// Collection of stats for the player in this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyClanAggregateStat
	{
		
		/// <summary>
		/// The id of the mode of stats (allPvp, allPvE, etc)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<System.Int32> Mode { get; set; }
		
		/// <summary>
		/// The id of the stat
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statId")]
		public string StatId { get; set; }
		
		/// <summary>
		/// Value of the stat for this player
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyHistoricalStatsAccountResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="characters")]
		public DestinyHistoricalStatsDestinyHistoricalStatsPerCharacter[] Characters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergedAllCharacters")]
		public DestinyHistoricalStatsDestinyHistoricalStatsWithMerged MergedAllCharacters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mergedDeletedCharacters")]
		public DestinyHistoricalStatsDestinyHistoricalStatsWithMerged MergedDeletedCharacters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyHistoricalStatsPerCharacter
	{
		
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merged")]
		public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod Merged { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsByPeriod> Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyHistoricalStatsByPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="allTime")]
		public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> AllTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allTimeTier1")]
		public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> AllTimeTier1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allTimeTier2")]
		public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> AllTimeTier2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allTimeTier3")]
		public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> AllTimeTier3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="daily")]
		public DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup[] Daily { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthly")]
		public DestinyHistoricalStatsDestinyHistoricalStatsPeriodGroup[] Monthly { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyHistoricalStatsWithMerged
	{
		
		[System.Runtime.Serialization.DataMember(Name="merged")]
		public DestinyHistoricalStatsDestinyHistoricalStatsByPeriod Merged { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsByPeriod> Results { get; set; }
	}
	
	/// <summary>
	/// Summary information about the activity that was played.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyHistoricalStatsActivity
	{
		
		/// <summary>
		/// The unique hash identifier of the DestinyActivityDefinition that was played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directorActivityHash")]
		public System.Nullable<System.UInt32> DirectorActivityHash { get; set; }
		
		/// <summary>
		/// The unique identifier for this *specific* match that was played.
		///This value can be used to get additional data about this activity such as who else was playing via the GetPostGameCarnageReport endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public System.Nullable<System.Int64> InstanceId { get; set; }
		
		/// <summary>
		/// Whether or not the match was a private match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPrivate")]
		public System.Nullable<System.Boolean> IsPrivate { get; set; }
		
		/// <summary>
		/// The Membership Type indicating the platform on which this match was played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		/// <summary>
		/// Indicates the most specific game mode of the activity that we could find.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<System.Int32> Mode { get; set; }
		
		/// <summary>
		/// The list of all Activity Modes to which this activity applies, including aggregates. This will let you see, for example, whether the activity was both Clash and part of the Trials of the Nine event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modes")]
		public int[] Modes { get; set; }
		
		/// <summary>
		/// The unique hash identifier of the DestinyActivityDefinition that was played. If I had this to do over, it'd be named activityHash. Too late now.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceId")]
		public System.Nullable<System.UInt32> ReferenceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyHistoricalStatsResults
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyHistoricalStatsValuePair
	{
		
		/// <summary>
		/// Localized formated version of the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayValue")]
		public string DisplayValue { get; set; }
		
		/// <summary>
		/// Raw value of the statistic
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyHistoricalWeaponStats
	{
		
		/// <summary>
		/// The hash ID of the item definition that describes the weapon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceId")]
		public System.Nullable<System.UInt32> ReferenceId { get; set; }
		
		/// <summary>
		/// Collection of stats for the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyHistoricalWeaponStatsData
	{
		
		/// <summary>
		/// List of weapons and their perspective values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weapons")]
		public DestinyHistoricalStatsDestinyHistoricalWeaponStats[] Weapons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyLeaderboard
	{
		
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DestinyHistoricalStatsDestinyLeaderboardEntry[] Entries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statId")]
		public string StatId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyLeaderboardEntry
	{
		
		/// <summary>
		/// ID of the player's best character for the reported stat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		/// <summary>
		/// Identity details of the player
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="player")]
		public string Player { get; set; }
		
		/// <summary>
		/// Where this player ranks on the leaderboard. A value of 1 is the top rank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		/// <summary>
		/// Value of the stat for this player
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyLeaderboardResults
	{
		
		/// <summary>
		/// Indicate the character ID of the character that is the focal point of the provided leaderboards. May be null, in which case any character from the focus membership can appear in the provided leaderboards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="focusCharacterId")]
		public System.Nullable<System.Int64> FocusCharacterId { get; set; }
		
		/// <summary>
		/// Indicate the membership ID of the account that is the focal point of the provided leaderboards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="focusMembershipId")]
		public System.Nullable<System.Int64> FocusMembershipId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyPlayer
	{
		
		/// <summary>
		/// Details about the player as they are known on BungieNet. This will be undefined if the player has marked their credential private, or does not have a BungieNet account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieNetUserInfo")]
		public string BungieNetUserInfo { get; set; }
		
		/// <summary>
		/// Class of the character if applicable and available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterClass")]
		public string CharacterClass { get; set; }
		
		/// <summary>
		/// Level of the character if available. Zero if it is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterLevel")]
		public System.Nullable<System.Int32> CharacterLevel { get; set; }
		
		/// <summary>
		/// Current clan name for the player. This value may be null or an empty string if the user does not have a clan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clanName")]
		public string ClanName { get; set; }
		
		/// <summary>
		/// Current clan tag for the player. This value may be null or an empty string if the user does not have a clan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clanTag")]
		public string ClanTag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="classHash")]
		public System.Nullable<System.UInt32> ClassHash { get; set; }
		
		/// <summary>
		/// Details about the player as they are known in game (platform display name, Destiny emblem)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinyUserInfo")]
		public string DestinyUserInfo { get; set; }
		
		/// <summary>
		/// If we know the emblem's hash, this can be used to look up the player's emblem at the time of a match when receiving PGCR data, or otherwise their currently equipped emblem (if we are able to obtain it).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emblemHash")]
		public System.Nullable<System.UInt32> EmblemHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="genderHash")]
		public System.Nullable<System.UInt32> GenderHash { get; set; }
		
		/// <summary>
		/// Light Level of the character if available. Zero if it is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lightLevel")]
		public System.Nullable<System.Int32> LightLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="raceHash")]
		public System.Nullable<System.UInt32> RaceHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyPostGameCarnageReportData
	{
		
		/// <summary>
		/// Details about the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityDetails")]
		public string ActivityDetails { get; set; }
		
		/// <summary>
		/// True if the activity was started from the beginning, if that information is available and the activity was played post Witch Queen release.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityWasStartedFromBeginning")]
		public System.Nullable<System.Boolean> ActivityWasStartedFromBeginning { get; set; }
		
		/// <summary>
		/// Collection of players and their data for this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public DestinyHistoricalStatsDestinyPostGameCarnageReportEntry[] Entries { get; set; }
		
		/// <summary>
		/// Date and time for the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<System.DateTimeOffset> Period { get; set; }
		
		/// <summary>
		/// If this activity has "phases", this is the phase at which the activity was started. This value is only valid for activities before the Beyond Light expansion shipped. Subsequent activities will not have a valid value here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startingPhaseIndex")]
		public System.Nullable<System.Int32> StartingPhaseIndex { get; set; }
		
		/// <summary>
		/// Collection of stats for the player in this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teams")]
		public DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry[] Teams { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyPostGameCarnageReportEntry
	{
		
		/// <summary>
		/// ID of the player's character used in the activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		/// <summary>
		/// Extended data extracted from the activity blob.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extended")]
		public string Extended { get; set; }
		
		/// <summary>
		/// Identity details of the player
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="player")]
		public string Player { get; set; }
		
		/// <summary>
		/// Score of the player if available
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public string Score { get; set; }
		
		/// <summary>
		/// Standing of the player
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standing")]
		public System.Nullable<System.Int32> Standing { get; set; }
		
		/// <summary>
		/// Collection of stats for the player in this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyPostGameCarnageReportTeamEntry
	{
		
		/// <summary>
		/// Score earned by the team
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public string Score { get; set; }
		
		/// <summary>
		/// Team's standing relative to other teams.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standing")]
		public string Standing { get; set; }
		
		/// <summary>
		/// Integer ID for the team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public System.Nullable<System.Int32> TeamId { get; set; }
		
		/// <summary>
		/// Alpha or Bravo
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="teamName")]
		public string TeamName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyHistoricalStatsDestinyPostGameCarnageReportExtendedData
	{
		
		/// <summary>
		/// Collection of stats for the player in this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public System.Collections.Generic.Dictionary<string, DestinyHistoricalStatsDestinyHistoricalStatsValue> Values { get; set; }
		
		/// <summary>
		/// List of weapons and their perspective values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weapons")]
		public DestinyHistoricalStatsDestinyHistoricalWeaponStats[] Weapons { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyItemBindStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyItemLocation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	/// <summary>
	/// Indicates how a perk should be shown, or if it should be, in the game UI. Maybe useful for those of you trying to filter out internal-use-only perks (or for those of you trying to figure out what they do!)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyItemPerkVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// A flags enumeration/bitmask where each bit represents a different possible state that the item can be in that may effect how the item is displayed to the user and what actions can be performed against it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyItemState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
	}
	
	/// <summary>
	/// Sometimes, we know the specific activity that the Milestone wants you to play. This entity provides additional information about that Activity and all of its variants. (sometimes there's only one variant, but I think you get the point)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyMilestoneActivity
	{
		
		/// <summary>
		/// The hash of an arbitrarily chosen variant of this activity. We'll go ahead and call that the "canonical" activity, because if you're using this value you should only use it for properties that are common across the variants: things like the name of the activity, it's location, etc... Use this hash to look up the DestinyActivityDefinition of this activity for rendering data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeHash")]
		public System.Nullable<System.UInt32> ActivityModeHash { get; set; }
		
		/// <summary>
		/// The enumeration equivalent of the most specific Activity Mode under which this activity is played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeType")]
		public System.Nullable<DestinyMilestonesDestinyMilestoneActivityActivityModeType> ActivityModeType { get; set; }
		
		/// <summary>
		/// If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data. Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifierHashes")]
		public int[] ModifierHashes { get; set; }
		
		/// <summary>
		/// If you want more than just name/location/etc... you're going to have to dig into and show the variants of the conceptual activity. These will differ in seemingly arbitrary ways, like difficulty level and modifiers applied. Show it in whatever way tickles your fancy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public DestinyMilestonesDestinyMilestoneActivityVariant[] Variants { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyMilestonesDestinyMilestoneActivityActivityModeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
		_31 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
		_37 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
		_38 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
		_39 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
		_40 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
		_41 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
		_42 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
		_43 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
		_44 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
		_45 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
		_46 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
		_47 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
		_48 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
		_49 = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
		_50 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
		_51 = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
		_52 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
		_53 = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
		_54 = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
		_55 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
		_56 = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
		_57 = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
		_58 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
		_59 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
		_60 = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
		_61 = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
		_62 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
		_63 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
		_65 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
		_66 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
		_67 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
		_68 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
		_69 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
		_70 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
		_71 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
		_72 = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
		_73 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
		_74 = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
		_75 = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
		_76 = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
		_77 = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
		_78 = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
		_79 = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
		_80 = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
		_81 = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
		_82 = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
		_83 = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
		_84 = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
		_85 = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
		_86 = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
		_87 = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
		_88 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
		_89 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
		_90 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
		_91 = 83,
	}
	
	/// <summary>
	/// Represents custom data that we know about an individual variant of an activity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyMilestoneActivityVariant
	{
		
		/// <summary>
		/// The hash for the specific variant of the activity related to this milestone. You can pull more detailed static info from the DestinyActivityDefinition, such as difficulty level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeHash")]
		public System.Nullable<System.UInt32> ActivityModeHash { get; set; }
		
		/// <summary>
		/// The enumeration equivalent of the most specific Activity Mode under which this activity is played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeType")]
		public System.Nullable<DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType> ActivityModeType { get; set; }
		
		/// <summary>
		/// An OPTIONAL component: if it makes sense to talk about this activity variant in terms of whether or not it has been completed or what progress you have made in it, this will be returned. Otherwise, this will be NULL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completionStatus")]
		public string CompletionStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyMilestonesDestinyMilestoneActivityVariantActivityModeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
		_31 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
		_37 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
		_38 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
		_39 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
		_40 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
		_41 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
		_42 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
		_43 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
		_44 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
		_45 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
		_46 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
		_47 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
		_48 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
		_49 = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
		_50 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
		_51 = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
		_52 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
		_53 = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
		_54 = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
		_55 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
		_56 = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
		_57 = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
		_58 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
		_59 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
		_60 = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
		_61 = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
		_62 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
		_63 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
		_65 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
		_66 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
		_67 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
		_68 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
		_69 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
		_70 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
		_71 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
		_72 = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
		_73 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
		_74 = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
		_75 = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
		_76 = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
		_77 = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
		_78 = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
		_79 = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
		_80 = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
		_81 = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
		_82 = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
		_83 = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
		_84 = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
		_85 = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
		_86 = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
		_87 = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
		_88 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
		_89 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
		_90 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
		_91 = 83,
	}
	
	/// <summary>
	/// Represents this player's personal completion status for the Activity under a Milestone, if the activity has trackable completion and progress information. (most activities won't, or the concept won't apply. For instance, it makes sense to talk about a tier of a raid as being Completed or having progress, but it doesn't make sense to talk about a Crucible Playlist in those terms.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyMilestoneActivityCompletionStatus
	{
		
		/// <summary>
		/// If the activity has been "completed", that information will be returned here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completed")]
		public System.Nullable<System.Boolean> Completed { get; set; }
		
		/// <summary>
		/// If the Activity has discrete "phases" that we can track, that info will be here. Otherwise, this value will be NULL. Note that this is a list and not a dictionary: the order implies the ascending order of phases or progression in this activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phases")]
		public DestinyMilestonesDestinyMilestoneActivityPhase[] Phases { get; set; }
	}
	
	/// <summary>
	/// Represents localized, extended content related to Milestones. This is intentionally returned by a separate endpoint and not with Character-level Milestone data because we do not put localized data into standard Destiny responses, both for brevity of response and for caching purposes. If you really need this data, hit the Milestone Content endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyMilestoneContent
	{
		
		/// <summary>
		/// The "About this Milestone" text from the Firehose.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		/// <summary>
		/// If DPS has defined items related to this Milestone, they can categorize those items in the Firehose. That data will then be returned as item categories here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemCategories")]
		public DestinyMilestonesDestinyMilestoneContentItemCategory[] ItemCategories { get; set; }
		
		/// <summary>
		/// The Current Status of the Milestone, as driven by the Firehose.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// A list of tips, provided by the Firehose.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tips")]
		public string[] Tips { get; set; }
	}
	
	/// <summary>
	/// Part of our dynamic, localized Milestone content is arbitrary categories of items. These are built in our content management system, and thus aren't the same as programmatically generated rewards.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyMilestoneContentItemCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="itemHashes")]
		public int[] ItemHashes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Information about milestones, presented in a character state-agnostic manner. Combine this data with DestinyMilestoneDefinition to get a full picture of the milestone, which is basically a checklist of things to do in the game. Think of this as GetPublicAdvisors 3.0, for those who used the Destiny 1 API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyPublicMilestone
	{
		
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public DestinyMilestonesDestinyPublicMilestoneChallengeActivity[] Activities { get; set; }
		
		/// <summary>
		/// A milestone not need have even a single quest, but if there are active quests they will be returned here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableQuests")]
		public DestinyMilestonesDestinyPublicMilestoneQuest[] AvailableQuests { get; set; }
		
		/// <summary>
		/// If known, this is the date when the Milestone will expire/recycle/end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// The hash identifier for the milestone. Use it to look up the DestinyMilestoneDefinition for static data about the Milestone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="milestoneHash")]
		public System.Nullable<System.UInt32> MilestoneHash { get; set; }
		
		/// <summary>
		/// Used for ordering milestones in a display to match how we order them in BNet. May pull from static data, or possibly in the future from dynamic information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		/// <summary>
		/// If known, this is the date when the Milestone started/became active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// Sometimes milestones - or activities active in milestones - will have relevant vendors. These are the vendors that are currently relevant.
		///Deprecated, already, for the sake of the new "vendors" property that has more data. What was I thinking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHashes")]
		public int[] VendorHashes { get; set; }
		
		/// <summary>
		/// This is why we can't have nice things. This is the ordered list of vendors to be shown that relate to this milestone, potentially along with other interesting data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendors")]
		public DestinyMilestonesDestinyPublicMilestoneVendor[] Vendors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyPublicMilestoneChallengeActivity
	{
		
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// The set of activity options for this activity, keyed by an identifier that's unique for this activity (not guaranteed to be unique between or across all activities, though should be unique for every *variant* of a given *conceptual* activity: for instance, the original D2 Raid has many variant DestinyActivityDefinitions. While other activities could potentially have the same option hashes, for any given D2 base Raid variant the hash will be unique).
		///As a concrete example of this data, the hashes you get for Raids will correspond to the currently active "Challenge Mode".
		///We have no human readable information for this data, so it's up to you if you want to associate it with such info to show it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booleanActivityOptions")]
		public System.Collections.Generic.Dictionary<string, bool> BooleanActivityOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="challengeObjectiveHashes")]
		public int[] ChallengeObjectiveHashes { get; set; }
		
		/// <summary>
		/// If returned, this is the index into the DestinyActivityDefinition's "loadouts" property, indicating the currently active loadout requirements.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadoutRequirementIndex")]
		public System.Nullable<System.Int32> LoadoutRequirementIndex { get; set; }
		
		/// <summary>
		/// If the activity has modifiers, this will be the list of modifiers that all variants have in common. Perform lookups against DestinyActivityModifierDefinition which defines the modifier being applied to get at the modifier data.
		///Note that, in the DestiyActivityDefinition, you will see many more modifiers than this being referred to: those are all *possible* modifiers for the activity, not the active ones. Use only the active ones to match what's really live.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifierHashes")]
		public int[] ModifierHashes { get; set; }
		
		/// <summary>
		/// The ordered list of phases for this activity, if any. Note that we have no human readable info for phases, nor any entities to relate them to: relating these hashes to something human readable is up to you unfortunately.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phaseHashes")]
		public int[] PhaseHashes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyPublicMilestoneQuest
	{
		
		/// <summary>
		/// A milestone need not have an active activity, but if there is one it will be returned here, along with any variant and additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activity")]
		public string Activity { get; set; }
		
		/// <summary>
		/// For the given quest there could be 0-to-Many challenges: mini quests that you can perform in the course of doing this quest, that may grant you rewards and benefits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="challenges")]
		public DestinyMilestonesDestinyPublicMilestoneChallenge[] Challenges { get; set; }
		
		/// <summary>
		/// Quests are defined as Items in content. As such, this is the hash identifier of the DestinyInventoryItemDefinition that represents this quest. It will have pointers to all of the steps in the quest, and display information for the quest (title, description, icon etc) Individual steps will be referred to in the Quest item's DestinyInventoryItemDefinition.setData property, and themselves are Items with their own renderable data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="questItemHash")]
		public System.Nullable<System.UInt32> QuestItemHash { get; set; }
	}
	
	/// <summary>
	/// A Milestone can have many Challenges. Challenges are just extra Objectives that provide a fun way to mix-up play and provide extra rewards.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyPublicMilestoneChallenge
	{
		
		/// <summary>
		/// IF the Objective is related to a specific Activity, this will be that activity's hash. Use it to look up the DestinyActivityDefinition for additional data to show.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// The objective for the Challenge, which should have human-readable data about what needs to be done to accomplish the objective. Use this hash to look up the DestinyObjectiveDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectiveHash")]
		public System.Nullable<System.UInt32> ObjectiveHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyPublicMilestoneVendor
	{
		
		/// <summary>
		/// If this vendor is featuring a specific item for this event, this will be the hash identifier of that item. I'm taking bets now on how long we go before this needs to be a list or some other, more complex representation instead and I deprecate this too. I'm going to go with 5 months. Calling it now, 2017-09-14 at 9:46pm PST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previewItemHash")]
		public System.Nullable<System.UInt32> PreviewItemHash { get; set; }
		
		/// <summary>
		/// The hash identifier of the Vendor related to this Milestone. You can show useful things from this, such as thier Faction icon or whatever you might care about.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorHash")]
		public System.Nullable<System.UInt32> VendorHash { get; set; }
	}
	
	/// <summary>
	/// A milestone may have one or more conceptual Activities associated with it, and each of those conceptual activities could have a variety of variants, modes, tiers, what-have-you. Our attempts to determine what qualifies as a conceptual activity are, unfortunately, janky. So if you see missing modes or modes that don't seem appropriate to you, let us know and I'll buy you a beer if we ever meet up in person.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyPublicMilestoneActivity
	{
		
		/// <summary>
		/// The hash identifier of the activity that's been chosen to be considered the canonical "conceptual" activity definition. This may have many variants, defined herein.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeHash")]
		public System.Nullable<System.UInt32> ActivityModeHash { get; set; }
		
		/// <summary>
		/// The enumeration equivalent of the most specific Activity Mode under which this activity is played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeType")]
		public System.Nullable<DestinyMilestonesDestinyPublicMilestoneActivityActivityModeType> ActivityModeType { get; set; }
		
		/// <summary>
		/// The activity may have 0-to-many modifiers: if it does, this will contain the hashes to the DestinyActivityModifierDefinition that defines the modifier being applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifierHashes")]
		public int[] ModifierHashes { get; set; }
		
		/// <summary>
		/// Every relevant variation of this conceptual activity, including the conceptual activity itself, have variants defined here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public DestinyMilestonesDestinyPublicMilestoneActivityVariant[] Variants { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyMilestonesDestinyPublicMilestoneActivityActivityModeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
		_31 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
		_37 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
		_38 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
		_39 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
		_40 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
		_41 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
		_42 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
		_43 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
		_44 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
		_45 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
		_46 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
		_47 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
		_48 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
		_49 = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
		_50 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
		_51 = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
		_52 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
		_53 = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
		_54 = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
		_55 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
		_56 = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
		_57 = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
		_58 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
		_59 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
		_60 = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
		_61 = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
		_62 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
		_63 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
		_65 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
		_66 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
		_67 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
		_68 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
		_69 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
		_70 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
		_71 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
		_72 = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
		_73 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
		_74 = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
		_75 = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
		_76 = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
		_77 = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
		_78 = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
		_79 = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
		_80 = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
		_81 = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
		_82 = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
		_83 = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
		_84 = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
		_85 = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
		_86 = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
		_87 = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
		_88 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
		_89 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
		_90 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
		_91 = 83,
	}
	
	/// <summary>
	/// Represents a variant of an activity that's relevant to a milestone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyMilestonesDestinyPublicMilestoneActivityVariant
	{
		
		/// <summary>
		/// The hash identifier of this activity variant. Examine the activity's definition in the Manifest database to determine what makes it a distinct variant. Usually it will be difficulty level or whether or not it is a guided game variant of the activity, but theoretically it could be distinguished in any arbitrary way.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeHash")]
		public System.Nullable<System.UInt32> ActivityModeHash { get; set; }
		
		/// <summary>
		/// The enumeration equivalent of the most specific Activity Mode under which this activity is played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityModeType")]
		public System.Nullable<DestinyMilestonesDestinyPublicMilestoneActivityVariantActivityModeType> ActivityModeType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyMilestonesDestinyPublicMilestoneActivityVariantActivityModeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
		_31 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
		_37 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
		_38 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
		_39 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
		_40 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
		_41 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
		_42 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
		_43 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
		_44 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
		_45 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
		_46 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
		_47 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
		_48 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
		_49 = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
		_50 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
		_51 = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
		_52 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
		_53 = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
		_54 = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
		_55 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
		_56 = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
		_57 = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
		_58 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
		_59 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
		_60 = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
		_61 = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
		_62 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
		_63 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
		_65 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
		_66 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
		_67 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
		_68 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
		_69 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
		_70 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
		_71 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
		_72 = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
		_73 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
		_74 = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
		_75 = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
		_76 = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
		_77 = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
		_78 = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
		_79 = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
		_80 = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
		_81 = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
		_82 = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
		_83 = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
		_84 = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
		_85 = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
		_86 = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
		_87 = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
		_88 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
		_89 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
		_90 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
		_91 = 83,
	}
	
	/// <summary>
	/// This enum determines whether the plug is available to be inserted.
	///- Normal means that all existing rules for plug insertion apply.
	///- UnavailableIfSocketContainsMatchingPlugCategory means that the plug is only available if the socket does NOT match the plug category.
	///- AvailableIfSocketContainsMatchingPlugCategory means that the plug is only available if the socket DOES match the plug category.
	///For category matching, use the plug's "plugCategoryIdentifier" property, comparing it to
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyPlugAvailabilityMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// If the plug has a specific custom style, this enumeration will represent that style/those styles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyPlugUiStyles
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	/// <summary>
	/// If you want to report a player causing trouble in a game, this request will let you report that player and the specific PGCR in which the trouble was caused, along with why.
	///Please don't do this just because you dislike the person! I mean, I know people will do it anyways, but can you like take a good walk, or put a curse on them or something? Do me a solid and reconsider.
	///Note that this request object doesn't have the actual PGCR ID nor your Account/Character ID in it. We will infer that information from your authentication information and the PGCR ID that you pass into the URL of the reporting endpoint itself.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyReportingRequestsDestinyReportOffensePgcrRequest
	{
		
		/// <summary>
		/// Within the PGCR provided when calling the Reporting endpoint, this should be the character ID of the user that you thought was violating terms of use. They must exist in the PGCR provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offendingCharacterId")]
		public System.Nullable<System.Int64> OffendingCharacterId { get; set; }
		
		/// <summary>
		/// So you've decided to report someone instead of cursing them and their descendants. Well, okay then. This is the category or categorie(s) of infractions for which you are reporting the user. These are hash identifiers that map to DestinyReportReasonCategoryDefinition entries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonCategoryHashes")]
		public int[] ReasonCategoryHashes { get; set; }
		
		/// <summary>
		/// If applicable, provide a more specific reason(s) within the general category of problems provided by the reasonHash. This is also an identifier for a reason. All reasonHashes provided must be children of at least one the reasonCategoryHashes provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reasonHashes")]
		public int[] ReasonHashes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyRequestsActionsDestinyActionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyRequestsActionsDestinyCharacterActionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyRequestsActionsDestinyInsertPlugsActionRequest
	{
		
		/// <summary>
		/// Action token provided by the AwaGetActionToken API call.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionToken")]
		public string ActionToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		/// <summary>
		/// The instance ID of the item having a plug inserted. Only instanced items can have sockets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemInstanceId")]
		public System.Nullable<System.Int64> ItemInstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		/// <summary>
		/// The plugs being inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plug")]
		public string Plug { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyRequestsActionsDestinyInsertPlugsFreeActionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		/// <summary>
		/// The instance ID of the item for this action request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public System.Nullable<System.Int64> ItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		/// <summary>
		/// The plugs being inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plug")]
		public string Plug { get; set; }
	}
	
	/// <summary>
	/// Represents all of the data related to a single plug to be inserted.
	///Note that, while you *can* point to a socket that represents infusion, you will receive an error if you attempt to do so. Come on guys, let's play nice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyRequestsActionsDestinyInsertPlugsRequestEntry
	{
		
		/// <summary>
		/// Plugs are never instanced (except in infusion). So with the hash alone, we should be able to: 1) Infer whether the player actually needs to have the item, or if it's a reusable plug 2) Perform any operation needed to use the Plug, including removing the plug item and running reward sheets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugItemHash")]
		public System.Nullable<System.UInt32> PlugItemHash { get; set; }
		
		/// <summary>
		/// This property, combined with the socketIndex, tells us which socket we are referring to (since operations can be performed on both Intrinsic and "default" sockets, and they occupy different arrays in the Inventory Item Definition). I know, I know. Don't give me that look.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socketArrayType")]
		public System.Nullable<System.Int32> SocketArrayType { get; set; }
		
		/// <summary>
		/// The index into the socket array, which identifies the specific socket being operated on. We also need to know the socketArrayType in order to uniquely identify the socket.
		///Don't point to or try to insert a plug into an infusion socket. It won't work.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socketIndex")]
		public System.Nullable<System.Int32> SocketIndex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyRequestsActionsDestinyItemActionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		/// <summary>
		/// The instance ID of the item for this action request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public System.Nullable<System.Int64> ItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyRequestsActionsDestinyItemSetActionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemIds")]
		public int[] ItemIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyRequestsActionsDestinyItemStateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		/// <summary>
		/// The instance ID of the item for this action request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public System.Nullable<System.Int64> ItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<System.Boolean> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyRequestsActionsDestinyLoadoutActionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		/// <summary>
		/// The index of the loadout for this action request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadoutIndex")]
		public System.Nullable<System.Int32> LoadoutIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyRequestsActionsDestinyLoadoutUpdateActionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="colorHash")]
		public System.Nullable<System.UInt32> ColorHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconHash")]
		public System.Nullable<System.UInt32> IconHash { get; set; }
		
		/// <summary>
		/// The index of the loadout for this action request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadoutIndex")]
		public System.Nullable<System.Int32> LoadoutIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nameHash")]
		public System.Nullable<System.UInt32> NameHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyRequestsActionsDestinyPostmasterTransferRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		/// <summary>
		/// The instance ID of the item for this action request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public System.Nullable<System.Int64> ItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemReferenceHash")]
		public System.Nullable<System.UInt32> ItemReferenceHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackSize")]
		public System.Nullable<System.Int32> StackSize { get; set; }
	}
	
	/// <summary>
	/// If you look in the DestinyInventoryItemDefinition's "sockets" property, you'll see that there are two types of sockets: intrinsic, and "socketEntry."
	///Unfortunately, because Intrinsic sockets are a whole separate array, it is no longer sufficient to know the index into that array to know which socket we're talking about. You have to know whether it's in the default "socketEntries" or if it's in the "intrinsic" list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyRequestsActionsDestinySocketArrayType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyRequestsDestinyItemTransferRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		/// <summary>
		/// The instance ID of the item for this action request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemId")]
		public System.Nullable<System.Int64> ItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemReferenceHash")]
		public System.Nullable<System.UInt32> ItemReferenceHash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackSize")]
		public System.Nullable<System.Int32> StackSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transferToVault")]
		public System.Nullable<System.Boolean> TransferToVault { get; set; }
	}
	
	/// <summary>
	/// The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesDestinyCharacterResponse
	{
		
		/// <summary>
		/// Activity data - info about current activities available to the player.
		///COMPONENT TYPE: CharacterActivities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activities")]
		public string Activities { get; set; }
		
		/// <summary>
		/// Base information about the character in question.
		///COMPONENT TYPE: Characters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="character")]
		public string Character { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: Collectibles
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectibles")]
		public string Collectibles { get; set; }
		
		/// <summary>
		/// A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
		///COMPONENT TYPE: CurrencyLookups
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyLookups")]
		public string CurrencyLookups { get; set; }
		
		/// <summary>
		/// Equipped items on the character.
		///COMPONENT TYPE: CharacterEquipment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equipment")]
		public string Equipment { get; set; }
		
		/// <summary>
		/// The character-level non-equipped inventory items.
		///COMPONENT TYPE: CharacterInventories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventory")]
		public string Inventory { get; set; }
		
		/// <summary>
		/// The set of components belonging to the player's instanced items.
		///COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemComponents")]
		public string ItemComponents { get; set; }
		
		/// <summary>
		/// Items available from Kiosks that are available to this specific character. 
		///COMPONENT TYPE: Kiosks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kiosks")]
		public string Kiosks { get; set; }
		
		/// <summary>
		/// The loadouts available to the character.
		///COMPONENT TYPE: CharacterLoadouts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadouts")]
		public string Loadouts { get; set; }
		
		/// <summary>
		/// When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are scoped to this character.
		///This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
		///COMPONENT TYPE: ItemSockets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugSets")]
		public string PlugSets { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: PresentationNodes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="presentationNodes")]
		public string PresentationNodes { get; set; }
		
		/// <summary>
		/// Character progression data, including Milestones.
		///COMPONENT TYPE: CharacterProgressions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressions")]
		public string Progressions { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: Records
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="records")]
		public string Records { get; set; }
		
		/// <summary>
		/// Character rendering data - a minimal set of information about equipment and dyes used for rendering.
		///COMPONENT TYPE: CharacterRenderData
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renderData")]
		public string RenderData { get; set; }
		
		/// <summary>
		/// The set of components belonging to the player's UNinstanced items. Because apparently now those too can have information relevant to the character's state.
		///COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uninstancedItemComponents")]
		public string UninstancedItemComponents { get; set; }
	}
	
	/// <summary>
	/// Returns the detailed information about a Collectible Presentation Node and any Collectibles that are direct descendants.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesDestinyCollectibleNodeDetailResponse
	{
		
		/// <summary>
		/// Item components, keyed by the item hash of the items pointed at collectibles found under the requested Presentation Node.
		///NOTE: I had a lot of hemming and hawing about whether these should be keyed by collectible hash or item hash... but ultimately having it be keyed by item hash meant that UI that already uses DestinyItemComponentSet data wouldn't have to have a special override to do the collectible -> item lookup once you delve into an item's details, and it also meant that you didn't have to remember that the Hash being used as the key for plugSets was different from the Hash being used for the other Dictionaries. As a result, using the Item Hash felt like the least crappy solution.
		///We may all come to regret this decision. We will see.
		///COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectibleItemComponents")]
		public string CollectibleItemComponents { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: Collectibles
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collectibles")]
		public string Collectibles { get; set; }
	}
	
	/// <summary>
	/// If a Destiny Profile can't be returned, but we're pretty certain it's a valid Destiny account, this will contain as much info as we can get about the profile for your use.
	///Assume that the most you'll get is the Error Code, the Membership Type and the Membership ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesDestinyErrorProfile
	{
		
		/// <summary>
		/// The error that we encountered. You should be able to look up localized text to show to the user for these failures.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		/// <summary>
		/// Basic info about the account that failed. Don't expect anything other than membership ID, Membership Type, and displayName to be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="infoCard")]
		public string InfoCard { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesDestinyItemChangeResponse
	{
		
		/// <summary>
		/// Items that appeared in the inventory possibly as a result of an action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addedInventoryItems")]
		public DestinyEntitiesItemsDestinyItemComponent[] AddedInventoryItems { get; set; }
		
		/// <summary>
		/// The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item")]
		public DestinyResponsesDestinyItemResponse Item { get; set; }
		
		/// <summary>
		/// Items that disappeared from the inventory possibly as a result of an action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removedInventoryItems")]
		public DestinyEntitiesItemsDestinyItemComponent[] RemovedInventoryItems { get; set; }
	}
	
	/// <summary>
	/// The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesDestinyItemResponse
	{
		
		/// <summary>
		/// If the item is on a character, this will return the ID of the character that is holding the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		/// <summary>
		/// Basic instance data for the item.
		///COMPONENT TYPE: ItemInstances
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Common data for the item relevant to its non-instanced properties.
		///COMPONENT TYPE: ItemCommonData
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item")]
		public string Item { get; set; }
		
		/// <summary>
		/// Information specifically about the item's objectives.
		///COMPONENT TYPE: ItemObjectives
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectives")]
		public string Objectives { get; set; }
		
		/// <summary>
		/// Information specifically about the perks currently active on the item.
		///COMPONENT TYPE: ItemPerks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="perks")]
		public string Perks { get; set; }
		
		/// <summary>
		/// Information about objectives on Plugs for a given item. See the component's documentation for more info.
		///COMPONENT TYPE: ItemPlugObjectives
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plugObjectives")]
		public string PlugObjectives { get; set; }
		
		/// <summary>
		/// Information about how to render the item in 3D.
		///COMPONENT TYPE: ItemRenderData
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="renderData")]
		public string RenderData { get; set; }
		
		/// <summary>
		/// Information about the Reusable Plugs for sockets on an item. These are plugs that you can insert into the given socket regardless of if you actually own an instance of that plug: they are logic-driven plugs rather than inventory-driven.
		/// These may need to be combined with Plug Set component data to get a full picture of available plugs on a given socket.
		/// COMPONENT TYPE: ItemReusablePlugs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reusablePlugs")]
		public string ReusablePlugs { get; set; }
		
		/// <summary>
		/// Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.
		///COMPONENT TYPE: ItemSockets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sockets")]
		public string Sockets { get; set; }
		
		/// <summary>
		/// Information about the computed stats of the item: power, defense, etc...
		///COMPONENT TYPE: ItemStats
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public string Stats { get; set; }
		
		/// <summary>
		/// Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character's "Builds".
		///COMPONENT TYPE: ItemTalentGrids
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="talentGrid")]
		public string TalentGrid { get; set; }
	}
	
	/// <summary>
	/// I know what you seek. You seek linked accounts. Found them, you have.
	///This contract returns a minimal amount of data about Destiny Accounts that are linked through your Bungie.Net account. We will not return accounts in this response whose
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesDestinyLinkedProfilesResponse
	{
		
		/// <summary>
		/// If the requested membership had a linked Bungie.Net membership ID, this is the basic information about that BNet account.
		///I know, Tetron; I know this is mixing UserServices concerns with DestinyServices concerns. But it's so damn convenient! https://www.youtube.com/watch?v=X5R-bB-gKVI
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bnetMembership")]
		public string BnetMembership { get; set; }
		
		/// <summary>
		/// Any Destiny account for whom we could successfully pull characters will be returned here, as the Platform-level summary of user data. (no character data, no Destiny account data other than the Membership ID and Type so you can make further queries)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profiles")]
		public DestinyResponsesDestinyProfileUserInfoCard[] Profiles { get; set; }
		
		/// <summary>
		/// This is brief summary info for profiles that we believe have valid Destiny info, but who failed to return data for some other reason and thus we know that subsequent calls for their info will also fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilesWithErrors")]
		public DestinyResponsesDestinyErrorProfile[] ProfilesWithErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesDestinyProfileUserInfoCard
	{
		
		/// <summary>
		/// The list of Membership Types indicating the platforms on which this Membership can be used.
		/// Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableMembershipTypes")]
		public int[] ApplicableMembershipTypes { get; set; }
		
		/// <summary>
		/// The bungie global display name, if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayName")]
		public string BungieGlobalDisplayName { get; set; }
		
		/// <summary>
		/// The bungie global display name code, if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayNameCode")]
		public string BungieGlobalDisplayNameCode { get; set; }
		
		/// <summary>
		/// If there is a cross save override in effect, this value will tell you the type that is overridding this one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossSaveOverride")]
		public System.Nullable<System.Int32> CrossSaveOverride { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateLastPlayed")]
		public System.Nullable<System.DateTimeOffset> DateLastPlayed { get; set; }
		
		/// <summary>
		/// Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// URL the Icon if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconPath")]
		public string IconPath { get; set; }
		
		/// <summary>
		/// If true, this account is hooked up as the "Primary" cross save account for one or more platforms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isCrossSavePrimary")]
		public System.Nullable<System.Boolean> IsCrossSavePrimary { get; set; }
		
		/// <summary>
		/// If this profile is being overridden/obscured by Cross Save, this will be set to true. We will still return the profile for display purposes where users need to know the info: it is up to any given area of the app/site to determine if this profile should still be shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isOverridden")]
		public System.Nullable<System.Boolean> IsOverridden { get; set; }
		
		/// <summary>
		/// If True, this is a public user membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		/// <summary>
		/// Membership ID as they user is known in the Accounts service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipId")]
		public System.Nullable<System.Int64> MembershipId { get; set; }
		
		/// <summary>
		/// Type of the membership. Not necessarily the native type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		/// <summary>
		/// This is the silver available on this Profile across any platforms on which they have purchased silver.
		/// This is only available if you are requesting yourself.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformSilver")]
		public string PlatformSilver { get; set; }
		
		/// <summary>
		/// A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplementalDisplayName")]
		public string SupplementalDisplayName { get; set; }
		
		/// <summary>
		/// If this profile is not in a cross save pairing, this will return the game versions that we believe this profile has access to.
		/// For the time being, we will not return this information for any membership that is in a cross save pairing. The gist is that, once the pairing occurs, we do not currently have a consistent way to get that information for the profile's original Platform, and thus gameVersions would be too inconsistent (based on the last platform they happened to play on) for the info to be useful.
		/// If we ever can get this data, this field will be deprecated and replaced with data on the DestinyLinkedProfileResponse itself, with game versions per linked Platform. But since we can't get that, we have this as a stop-gap measure for getting the data in the only situation that we currently need it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unpairedGameVersions")]
		public System.Nullable<DestinyResponsesDestinyProfileUserInfoCardUnpairedGameVersions> UnpairedGameVersions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyResponsesDestinyProfileUserInfoCardUnpairedGameVersions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="256")]
		_256 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="512")]
		_512 = 10,
	}
	
	/// <summary>
	/// The response for GetDestinyProfile, with components for character and item-level data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesDestinyProfileResponse
	{
		
		/// <summary>
		/// Character activity data - the activities available to this character and its status, keyed by the Character's Id.
		///COMPONENT TYPE: CharacterActivities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterActivities")]
		public string CharacterActivities { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: Collectibles
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterCollectibles")]
		public string CharacterCollectibles { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: Craftables
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterCraftables")]
		public string CharacterCraftables { get; set; }
		
		/// <summary>
		/// A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
		///COMPONENT TYPE: CurrencyLookups
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterCurrencyLookups")]
		public string CharacterCurrencyLookups { get; set; }
		
		/// <summary>
		/// The character's equipped items, keyed by the Character's Id.
		///COMPONENT TYPE: CharacterEquipment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterEquipment")]
		public string CharacterEquipment { get; set; }
		
		/// <summary>
		/// The character-level non-equipped inventory items, keyed by the Character's Id.
		///COMPONENT TYPE: CharacterInventories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterInventories")]
		public string CharacterInventories { get; set; }
		
		/// <summary>
		/// Items available from Kiosks that are available to a specific character as opposed to the account as a whole. It must be combined with data from the profileKiosks property to get a full picture of the character's available items to check out of a kiosk.
		///This component returns information about what Kiosk items are available to you on a *Character* level. Usually, kiosk items will be earned for the entire Profile (all characters) at once. To find those, look in the profileKiosks property.
		///COMPONENT TYPE: Kiosks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterKiosks")]
		public string CharacterKiosks { get; set; }
		
		/// <summary>
		/// The character loadouts, keyed by the Character's Id.
		///COMPONENT TYPE: CharacterLoadouts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterLoadouts")]
		public string CharacterLoadouts { get; set; }
		
		/// <summary>
		/// When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states, per character, that are character-scoped.
		///This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
		///COMPONENT TYPE: ItemSockets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterPlugSets")]
		public string CharacterPlugSets { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: PresentationNodes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterPresentationNodes")]
		public string CharacterPresentationNodes { get; set; }
		
		/// <summary>
		/// Character-level progression data, keyed by the Character's Id.
		///COMPONENT TYPE: CharacterProgressions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterProgressions")]
		public string CharacterProgressions { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: Records
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterRecords")]
		public string CharacterRecords { get; set; }
		
		/// <summary>
		/// Character rendering data - a minimal set of info needed to render a character in 3D - keyed by the Character's Id.
		///COMPONENT TYPE: CharacterRenderData
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterRenderData")]
		public string CharacterRenderData { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: StringVariables
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterStringVariables")]
		public string CharacterStringVariables { get; set; }
		
		/// <summary>
		/// Do you ever get the feeling that a system was designed *too* flexibly? That it can be used in so many different ways that you end up being unable to provide an easy to use abstraction for the mess that's happening under the surface?
		///Let's talk about character-specific data that might be related to items without instances. These two statements are totally unrelated, I promise.
		///At some point during D2, it was decided that items - such as Bounties - could be given to characters and *not* have instance data, but that *could* display and even use relevant state information on your account and character.
		///Up to now, any item that had meaningful dependencies on character or account state had to be instanced, and thus "itemComponents" was all that you needed: it was keyed by item's instance IDs and provided the stateful information you needed inside.
		///Unfortunately, we don't live in such a magical world anymore. This is information held on a per-character basis about non-instanced items that the characters have in their inventory - or that reference character-specific state information even if it's in Account-level inventory - and the values related to that item's state in relation to the given character.
		///To give a concrete example, look at a Moments of Triumph bounty. They exist in a character's inventory, and show/care about a character's progression toward completing the bounty. But the bounty itself is a non-instanced item, like a mod or a currency. This returns that data for the characters who have the bounty in their inventory.
		///I'm not crying, you're crying Okay we're both crying but it's going to be okay I promise Actually I shouldn't promise that, I don't know if it's going to be okay
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characterUninstancedItemComponents")]
		public System.Collections.Generic.Dictionary<string, DestinyBaseItemComponentSetOfuint32> CharacterUninstancedItemComponents { get; set; }
		
		/// <summary>
		/// Basic information about each character, keyed by the CharacterId.
		///COMPONENT TYPE: Characters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="characters")]
		public string Characters { get; set; }
		
		/// <summary>
		/// Information about instanced items across all returned characters, keyed by the item's instance ID.
		///COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemComponents")]
		public string ItemComponents { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: Metrics
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string Metrics { get; set; }
		
		/// <summary>
		/// Silver quantities for any platform on which this Profile plays destiny.
		/// COMPONENT TYPE: PlatformSilver
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformSilver")]
		public string PlatformSilver { get; set; }
		
		/// <summary>
		/// The basic information about the Destiny Profile (formerly "Account").
		///COMPONENT TYPE: Profiles
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public string Profile { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: Collectibles
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileCollectibles")]
		public string ProfileCollectibles { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: SocialCommendations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileCommendations")]
		public string ProfileCommendations { get; set; }
		
		/// <summary>
		/// The profile-level currencies owned by the Destiny Profile.
		///COMPONENT TYPE: ProfileCurrencies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileCurrencies")]
		public string ProfileCurrencies { get; set; }
		
		/// <summary>
		/// The profile-level inventory of the Destiny Profile.
		///COMPONENT TYPE: ProfileInventories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileInventory")]
		public string ProfileInventory { get; set; }
		
		/// <summary>
		/// Items available from Kiosks that are available Profile-wide (i.e. across all characters)
		///This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the characterKiosks property.
		///COMPONENT TYPE: Kiosks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileKiosks")]
		public string ProfileKiosks { get; set; }
		
		/// <summary>
		/// When sockets refer to reusable Plug Sets (see DestinyPlugSetDefinition for more info), this is the set of plugs and their states that are profile-scoped.
		///This comes back with ItemSockets, as it is needed for a complete picture of the sockets on requested items.
		///COMPONENT TYPE: ItemSockets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilePlugSets")]
		public string ProfilePlugSets { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: PresentationNodes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profilePresentationNodes")]
		public string ProfilePresentationNodes { get; set; }
		
		/// <summary>
		/// When we have progression information - such as Checklists - that may apply profile-wide, it will be returned here rather than in the per-character progression data.
		///COMPONENT TYPE: ProfileProgression
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileProgression")]
		public string ProfileProgression { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: Records
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileRecords")]
		public string ProfileRecords { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: StringVariables
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileStringVariables")]
		public string ProfileStringVariables { get; set; }
		
		/// <summary>
		/// COMPONENT TYPE: Transitory
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileTransitoryData")]
		public string ProfileTransitoryData { get; set; }
		
		/// <summary>
		/// Records the timestamp of when most components were last generated from the world server source. Unless the component type is specified in the documentation for secondaryComponentsMintedTimestamp, this value is sufficient to do data freshness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseMintedTimestamp")]
		public System.Nullable<System.DateTimeOffset> ResponseMintedTimestamp { get; set; }
		
		/// <summary>
		/// Some secondary components are not tracked in the primary response timestamp and have their timestamp tracked here. If your component is any of the following, this field is where you will find your timestamp value:
		/// PresentationNodes, Records, Collectibles, Metrics, StringVariables, Craftables, Transitory
		/// All other component types may use the primary timestamp property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryComponentsMintedTimestamp")]
		public System.Nullable<System.DateTimeOffset> SecondaryComponentsMintedTimestamp { get; set; }
		
		/// <summary>
		/// Recent, refundable purchases you have made from vendors. When will you use it? Couldn't say...
		///COMPONENT TYPE: VendorReceipts
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorReceipts")]
		public string VendorReceipts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyBaseItemComponentSetOfuint32
	{
		
		[System.Runtime.Serialization.DataMember(Name="objectives")]
		public DictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent Objectives { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perks")]
		public DictionaryComponentResponseOfuint32AndDestinyItemPerksComponent Perks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemObjectivesComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndDestinyItemPerksComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemPerksComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	/// <summary>
	/// A response containing all valid components for the public Vendors endpoint.
	/// It is a decisively smaller subset of data compared to what we can get when we know the specific user making the request.
	/// If you want any of the other data - item details, whether or not you can buy it, etc... you'll have to call in the context of a character. I know, sad but true.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesDestinyPublicVendorsResponse
	{
		
		/// <summary>
		/// Categories that the vendor has available, and references to the sales therein. These are keyed by the Vendor Hash, so you will get one Categories Component per vendor returned.
		///COMPONENT TYPE: VendorCategories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string Categories { get; set; }
		
		/// <summary>
		/// Sales, keyed by the vendorItemIndex of the item being sold. These are keyed by the Vendor Hash, so you will get one Sale Item Set Component per vendor returned.
		///Note that within the Sale Item Set component, the sales are themselves keyed by the vendorSaleIndex, so you can relate it to the corrent sale item definition within the Vendor's definition.
		///COMPONENT TYPE: VendorSales
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sales")]
		public string Sales { get; set; }
		
		/// <summary>
		/// A set of string variable values by hash for a public vendors context.
		///COMPONENT TYPE: StringVariables
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringVariables")]
		public string StringVariables { get; set; }
		
		/// <summary>
		/// For Vendors being returned, this will give you the information you need to group them and order them in the same way that the Bungie Companion app performs grouping. It will automatically be returned if you request the Vendors component.
		///COMPONENT TYPE: Vendors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorGroups")]
		public string VendorGroups { get; set; }
		
		/// <summary>
		/// The base properties of the vendor. These are keyed by the Vendor Hash, so you will get one Vendor Component per vendor returned.
		///COMPONENT TYPE: Vendors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendors")]
		public string Vendors { get; set; }
	}
	
	/// <summary>
	/// A response containing all of the components for a vendor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesDestinyVendorResponse
	{
		
		/// <summary>
		/// Categories that the vendor has available, and references to the sales therein.
		///COMPONENT TYPE: VendorCategories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string Categories { get; set; }
		
		/// <summary>
		/// A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
		///COMPONENT TYPE: CurrencyLookups
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyLookups")]
		public string CurrencyLookups { get; set; }
		
		/// <summary>
		/// Item components, keyed by the vendorItemIndex of the active sale items.
		///COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemComponents")]
		public string ItemComponents { get; set; }
		
		/// <summary>
		/// Sales, keyed by the vendorItemIndex of the item being sold.
		///COMPONENT TYPE: VendorSales
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sales")]
		public string Sales { get; set; }
		
		/// <summary>
		/// A map of string variable values by hash for this character context.
		///COMPONENT TYPE: StringVariables
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringVariables")]
		public string StringVariables { get; set; }
		
		/// <summary>
		/// The base properties of the vendor.
		///COMPONENT TYPE: Vendors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public string Vendor { get; set; }
	}
	
	/// <summary>
	/// A response containing all of the components for all requested vendors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesDestinyVendorsResponse
	{
		
		/// <summary>
		/// Categories that the vendor has available, and references to the sales therein. These are keyed by the Vendor Hash, so you will get one Categories Component per vendor returned.
		///COMPONENT TYPE: VendorCategories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public string Categories { get; set; }
		
		/// <summary>
		/// A "lookup" convenience component that can be used to quickly check if the character has access to items that can be used for purchasing.
		///COMPONENT TYPE: CurrencyLookups
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyLookups")]
		public string CurrencyLookups { get; set; }
		
		/// <summary>
		/// The set of item detail components, one set of item components per Vendor. These are keyed by the Vendor Hash, so you will get one Item Component Set per vendor returned.
		///The components contained inside are themselves keyed by the vendorSaleIndex, and will have whatever item-level components you requested (Sockets, Stats, Instance data etc...) per item being sold by the vendor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemComponents")]
		public System.Collections.Generic.Dictionary<string, DestinyItemComponentSetOfint32> ItemComponents { get; set; }
		
		/// <summary>
		/// Sales, keyed by the vendorItemIndex of the item being sold. These are keyed by the Vendor Hash, so you will get one Sale Item Set Component per vendor returned.
		///Note that within the Sale Item Set component, the sales are themselves keyed by the vendorSaleIndex, so you can relate it to the corrent sale item definition within the Vendor's definition.
		///COMPONENT TYPE: VendorSales
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sales")]
		public string Sales { get; set; }
		
		/// <summary>
		/// A map of string variable values by hash for this character context.
		///COMPONENT TYPE: StringVariables
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringVariables")]
		public string StringVariables { get; set; }
		
		/// <summary>
		/// For Vendors being returned, this will give you the information you need to group them and order them in the same way that the Bungie Companion app performs grouping. It will automatically be returned if you request the Vendors component.
		///COMPONENT TYPE: Vendors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendorGroups")]
		public string VendorGroups { get; set; }
		
		/// <summary>
		/// The base properties of the vendor. These are keyed by the Vendor Hash, so you will get one Vendor Component per vendor returned.
		///COMPONENT TYPE: Vendors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendors")]
		public string Vendors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyItemComponentSetOfint32
	{
		
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public DictionaryComponentResponseOfint32AndDestinyItemInstanceComponent Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectives")]
		public DictionaryComponentResponseOfint32AndDestinyItemObjectivesComponent Objectives { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perks")]
		public DictionaryComponentResponseOfint32AndDestinyItemPerksComponent Perks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plugObjectives")]
		public DictionaryComponentResponseOfint32AndDestinyItemPlugObjectivesComponent PlugObjectives { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plugStates")]
		public DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent PlugStates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="renderData")]
		public DictionaryComponentResponseOfint32AndDestinyItemRenderComponent RenderData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reusablePlugs")]
		public DictionaryComponentResponseOfint32AndDestinyItemReusablePlugsComponent ReusablePlugs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sockets")]
		public DictionaryComponentResponseOfint32AndDestinyItemSocketsComponent Sockets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public DictionaryComponentResponseOfint32AndDestinyItemStatsComponent Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="talentGrids")]
		public DictionaryComponentResponseOfint32AndDestinyItemTalentGridComponent TalentGrids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint32AndDestinyItemInstanceComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemInstanceComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint32AndDestinyItemObjectivesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemObjectivesComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint32AndDestinyItemPerksComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemPerksComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint32AndDestinyItemPlugObjectivesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsItemsDestinyItemPlugObjectivesComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsItemsDestinyItemPlugComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint32AndDestinyItemRenderComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemRenderComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint32AndDestinyItemReusablePlugsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsItemsDestinyItemReusablePlugsComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint32AndDestinyItemSocketsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemSocketsComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint32AndDestinyItemStatsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemStatsComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint32AndDestinyItemTalentGridComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemTalentGridComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	/// <summary>
	/// A response containing all of the components for all requested vendors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesInventoryChangedResponse
	{
		
		/// <summary>
		/// Items that appeared in the inventory possibly as a result of an action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addedInventoryItems")]
		public DestinyEntitiesItemsDestinyItemComponent[] AddedInventoryItems { get; set; }
		
		/// <summary>
		/// Items that disappeared from the inventory possibly as a result of an action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removedInventoryItems")]
		public DestinyEntitiesItemsDestinyItemComponent[] RemovedInventoryItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesPersonalDestinyVendorSaleItemSetComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="saleItems")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesVendorsDestinyVendorSaleItemComponent> SaleItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyResponsesPublicDestinyVendorSaleItemSetComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="saleItems")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsVendorsDestinyPublicVendorSaleItemComponent> SaleItems { get; set; }
	}
	
	/// <summary>
	/// Indicates how a socket is populated, and where you should look for valid plug data.
	/// This is a flags enumeration/bitmask field, as you may have to look in multiple sources across multiple components for valid plugs.
	/// For instance, a socket could have plugs that are sourced from its own definition, as well as plugs that are sourced from Character-scoped AND profile-scoped Plug Sets. Only by combining plug data for every indicated source will you be able to know all of the plugs available for a socket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinySocketPlugSources
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
	}
	
	/// <summary>
	/// Indicates the type of actions that can be performed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinySocketTypeActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// As you run into items that need to be classified for Milestone purposes in ways that we cannot infer via direct data, add a new classification here and use a string constant to represent it in the local item config file.
	///NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinySpecialItemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="23")]
		_23 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyTierType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
	}
	
	/// <summary>
	/// Whether you can transfer an item, and why not if you can't.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyTransferStatuses
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
	}
	
	/// <summary>
	/// Display categories can have custom sort orders. These are the possible options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyVendorDisplayCategorySortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	/// <summary>
	/// An enumeration of the known UI interactions for Vendors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyVendorInteractionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DestinyVendorItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="256")]
		_256 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="512")]
		_512 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1024")]
		_1024 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2048")]
		_2048 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4096")]
		_4096 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8192")]
		_8192 = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyBaseItemComponentSetOfint32
	{
		
		[System.Runtime.Serialization.DataMember(Name="objectives")]
		public DictionaryComponentResponseOfint32AndDestinyItemObjectivesComponent Objectives { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perks")]
		public DictionaryComponentResponseOfint32AndDestinyItemPerksComponent Perks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyBaseItemComponentSetOfint64
	{
		
		[System.Runtime.Serialization.DataMember(Name="objectives")]
		public DictionaryComponentResponseOfint64AndDestinyItemObjectivesComponent Objectives { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perks")]
		public DictionaryComponentResponseOfint64AndDestinyItemPerksComponent Perks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyItemObjectivesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemObjectivesComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyItemPerksComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemPerksComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyItemComponentSetOfint64
	{
		
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public DictionaryComponentResponseOfint64AndDestinyItemInstanceComponent Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectives")]
		public DictionaryComponentResponseOfint64AndDestinyItemObjectivesComponent Objectives { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perks")]
		public DictionaryComponentResponseOfint64AndDestinyItemPerksComponent Perks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plugObjectives")]
		public DictionaryComponentResponseOfint64AndDestinyItemPlugObjectivesComponent PlugObjectives { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plugStates")]
		public DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent PlugStates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="renderData")]
		public DictionaryComponentResponseOfint64AndDestinyItemRenderComponent RenderData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reusablePlugs")]
		public DictionaryComponentResponseOfint64AndDestinyItemReusablePlugsComponent ReusablePlugs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sockets")]
		public DictionaryComponentResponseOfint64AndDestinyItemSocketsComponent Sockets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public DictionaryComponentResponseOfint64AndDestinyItemStatsComponent Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="talentGrids")]
		public DictionaryComponentResponseOfint64AndDestinyItemTalentGridComponent TalentGrids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyItemInstanceComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemInstanceComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyItemPlugObjectivesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsItemsDestinyItemPlugObjectivesComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyItemRenderComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemRenderComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyItemReusablePlugsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsItemsDestinyItemReusablePlugsComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyItemSocketsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemSocketsComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyItemStatsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemStatsComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyItemTalentGridComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemTalentGridComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyItemComponentSetOfuint32
	{
		
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public DictionaryComponentResponseOfuint32AndDestinyItemInstanceComponent Instances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectives")]
		public DictionaryComponentResponseOfuint32AndDestinyItemObjectivesComponent Objectives { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perks")]
		public DictionaryComponentResponseOfuint32AndDestinyItemPerksComponent Perks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plugObjectives")]
		public DictionaryComponentResponseOfuint32AndDestinyItemPlugObjectivesComponent PlugObjectives { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plugStates")]
		public DictionaryComponentResponseOfuint32AndDestinyItemPlugComponent PlugStates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="renderData")]
		public DictionaryComponentResponseOfuint32AndDestinyItemRenderComponent RenderData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reusablePlugs")]
		public DictionaryComponentResponseOfuint32AndDestinyItemReusablePlugsComponent ReusablePlugs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sockets")]
		public DictionaryComponentResponseOfuint32AndDestinyItemSocketsComponent Sockets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public DictionaryComponentResponseOfuint32AndDestinyItemStatsComponent Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="talentGrids")]
		public DictionaryComponentResponseOfuint32AndDestinyItemTalentGridComponent TalentGrids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndDestinyItemInstanceComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemInstanceComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndDestinyItemPlugObjectivesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsItemsDestinyItemPlugObjectivesComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndDestinyItemRenderComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemRenderComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndDestinyItemReusablePlugsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsItemsDestinyItemReusablePlugsComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndDestinyItemSocketsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemSocketsComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndDestinyItemStatsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemStatsComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndDestinyItemTalentGridComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesItemsDestinyItemTalentGridComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyVendorSaleItemSetComponentOfDestinyPublicVendorSaleItemComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="saleItems")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsVendorsDestinyPublicVendorSaleItemComponent> SaleItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DestinyVendorSaleItemSetComponentOfDestinyVendorSaleItemComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="saleItems")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesVendorsDestinyVendorSaleItemComponent> SaleItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint32AndDestinyVendorSaleItemComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesVendorsDestinyVendorSaleItemComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyCharacterActivitiesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesCharactersDestinyCharacterActivitiesComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyCharacterComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesCharactersDestinyCharacterComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyCharacterProgressionComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesCharactersDestinyCharacterProgressionComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyCharacterRecordsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsRecordsDestinyCharacterRecordsComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyCharacterRenderComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesCharactersDestinyCharacterRenderComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyCollectiblesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsCollectiblesDestinyCollectiblesComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyCraftablesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsCraftablesDestinyCraftablesComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyCurrenciesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsInventoryDestinyCurrenciesComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyInventoryComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesInventoryDestinyInventoryComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyKiosksComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsKiosksDestinyKiosksComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyLoadoutsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsLoadoutsDestinyLoadoutsComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyPlugSetsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsPlugSetsDestinyPlugSetsComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyPresentationNodesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsPresentationDestinyPresentationNodesComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfint64AndDestinyStringVariablesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsStringVariablesDestinyStringVariablesComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndDestinyPublicVendorComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyComponentsVendorsDestinyPublicVendorComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndDestinyVendorCategoriesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesVendorsDestinyVendorCategoriesComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndDestinyVendorComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyEntitiesVendorsDestinyVendorComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndPersonalDestinyVendorSaleItemSetComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyResponsesPersonalDestinyVendorSaleItemSetComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictionaryComponentResponseOfuint32AndPublicDestinyVendorSaleItemSetComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, DestinyResponsesPublicDestinyVendorSaleItemSetComponent> Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntitiesEntityActionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public System.Nullable<System.Int64> EntityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public System.Nullable<System.Int32> Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ExceptionsPlatformErrorCodes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="23")]
		_23 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
		_31 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="33")]
		_33 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="34")]
		_34 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="35")]
		_35 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="36")]
		_36 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
		_37 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
		_38 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
		_39 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
		_40 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
		_41 = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
		_42 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
		_43 = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
		_44 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
		_45 = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
		_46 = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
		_47 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
		_48 = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
		_49 = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
		_50 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
		_51 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
		_52 = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
		_53 = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
		_54 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
		_55 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
		_56 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
		_57 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
		_58 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
		_59 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
		_89 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
		_90 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
		_91 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="92")]
		_92 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="93")]
		_93 = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="94")]
		_94 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="95")]
		_95 = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="96")]
		_96 = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="97")]
		_97 = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="98")]
		_98 = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="99")]
		_99 = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
		_100 = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="101")]
		_101 = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="102")]
		_102 = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="103")]
		_103 = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="104")]
		_104 = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="105")]
		_105 = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="106")]
		_106 = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="107")]
		_107 = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="108")]
		_108 = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="109")]
		_109 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="110")]
		_110 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="111")]
		_111 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="112")]
		_112 = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="113")]
		_113 = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="115")]
		_115 = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="116")]
		_116 = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="117")]
		_117 = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="118")]
		_118 = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="119")]
		_119 = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="120")]
		_120 = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="121")]
		_121 = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="122")]
		_122 = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="123")]
		_123 = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="124")]
		_124 = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="125")]
		_125 = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="126")]
		_126 = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="127")]
		_127 = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="129")]
		_129 = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="130")]
		_130 = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="131")]
		_131 = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="132")]
		_132 = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="133")]
		_133 = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="134")]
		_134 = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="135")]
		_135 = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="136")]
		_136 = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="137")]
		_137 = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="138")]
		_138 = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="139")]
		_139 = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="140")]
		_140 = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="141")]
		_141 = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="142")]
		_142 = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="143")]
		_143 = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="144")]
		_144 = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="145")]
		_145 = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="146")]
		_146 = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="147")]
		_147 = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="148")]
		_148 = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="149")]
		_149 = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="150")]
		_150 = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="151")]
		_151 = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="152")]
		_152 = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="153")]
		_153 = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="154")]
		_154 = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="155")]
		_155 = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="156")]
		_156 = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="157")]
		_157 = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="158")]
		_158 = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="159")]
		_159 = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="160")]
		_160 = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="161")]
		_161 = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="162")]
		_162 = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="163")]
		_163 = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="164")]
		_164 = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="165")]
		_165 = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="166")]
		_166 = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="167")]
		_167 = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="168")]
		_168 = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="169")]
		_169 = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="170")]
		_170 = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="171")]
		_171 = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="172")]
		_172 = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="173")]
		_173 = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="174")]
		_174 = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="175")]
		_175 = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="176")]
		_176 = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="177")]
		_177 = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="178")]
		_178 = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="179")]
		_179 = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="180")]
		_180 = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="181")]
		_181 = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="200")]
		_200 = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="201")]
		_201 = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="202")]
		_202 = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="203")]
		_203 = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="204")]
		_204 = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="205")]
		_205 = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="206")]
		_206 = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="207")]
		_207 = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="208")]
		_208 = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="209")]
		_209 = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="210")]
		_210 = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="211")]
		_211 = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="212")]
		_212 = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="213")]
		_213 = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="214")]
		_214 = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="215")]
		_215 = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="216")]
		_216 = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="217")]
		_217 = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="218")]
		_218 = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="219")]
		_219 = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="220")]
		_220 = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="221")]
		_221 = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="222")]
		_222 = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="223")]
		_223 = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="224")]
		_224 = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="225")]
		_225 = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="226")]
		_226 = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="227")]
		_227 = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="228")]
		_228 = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="229")]
		_229 = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="230")]
		_230 = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="231")]
		_231 = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="232")]
		_232 = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="233")]
		_233 = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="234")]
		_234 = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="235")]
		_235 = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="236")]
		_236 = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="237")]
		_237 = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="238")]
		_238 = 190,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="239")]
		_239 = 191,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="240")]
		_240 = 192,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="241")]
		_241 = 193,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="242")]
		_242 = 194,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="243")]
		_243 = 195,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="244")]
		_244 = 196,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="300")]
		_300 = 197,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="301")]
		_301 = 198,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="302")]
		_302 = 199,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="303")]
		_303 = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="304")]
		_304 = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="305")]
		_305 = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="306")]
		_306 = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="307")]
		_307 = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="308")]
		_308 = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="309")]
		_309 = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="310")]
		_310 = 207,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="311")]
		_311 = 208,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="312")]
		_312 = 209,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="313")]
		_313 = 210,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="400")]
		_400 = 211,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="500")]
		_500 = 212,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="501")]
		_501 = 213,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="502")]
		_502 = 214,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="503")]
		_503 = 215,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="504")]
		_504 = 216,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="505")]
		_505 = 217,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="506")]
		_506 = 218,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="507")]
		_507 = 219,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="508")]
		_508 = 220,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="509")]
		_509 = 221,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="510")]
		_510 = 222,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="511")]
		_511 = 223,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="512")]
		_512 = 224,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="513")]
		_513 = 225,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="514")]
		_514 = 226,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="515")]
		_515 = 227,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="516")]
		_516 = 228,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="517")]
		_517 = 229,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="518")]
		_518 = 230,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="519")]
		_519 = 231,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="520")]
		_520 = 232,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="521")]
		_521 = 233,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="522")]
		_522 = 234,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="523")]
		_523 = 235,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="524")]
		_524 = 236,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="525")]
		_525 = 237,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="526")]
		_526 = 238,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="527")]
		_527 = 239,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="528")]
		_528 = 240,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="529")]
		_529 = 241,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="530")]
		_530 = 242,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="531")]
		_531 = 243,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="532")]
		_532 = 244,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="533")]
		_533 = 245,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="534")]
		_534 = 246,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="535")]
		_535 = 247,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="536")]
		_536 = 248,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="537")]
		_537 = 249,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="538")]
		_538 = 250,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="539")]
		_539 = 251,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="540")]
		_540 = 252,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="541")]
		_541 = 253,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="542")]
		_542 = 254,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="543")]
		_543 = 255,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="544")]
		_544 = 256,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="555")]
		_555 = 257,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="556")]
		_556 = 258,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="557")]
		_557 = 259,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="558")]
		_558 = 260,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="559")]
		_559 = 261,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="560")]
		_560 = 262,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="561")]
		_561 = 263,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="562")]
		_562 = 264,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="563")]
		_563 = 265,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="564")]
		_564 = 266,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="565")]
		_565 = 267,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="566")]
		_566 = 268,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="567")]
		_567 = 269,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="568")]
		_568 = 270,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="569")]
		_569 = 271,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="570")]
		_570 = 272,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="571")]
		_571 = 273,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="572")]
		_572 = 274,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="573")]
		_573 = 275,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="574")]
		_574 = 276,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="575")]
		_575 = 277,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="576")]
		_576 = 278,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="577")]
		_577 = 279,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="578")]
		_578 = 280,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="579")]
		_579 = 281,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="580")]
		_580 = 282,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="581")]
		_581 = 283,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="582")]
		_582 = 284,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="583")]
		_583 = 285,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="584")]
		_584 = 286,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="585")]
		_585 = 287,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="586")]
		_586 = 288,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="587")]
		_587 = 289,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="588")]
		_588 = 290,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="589")]
		_589 = 291,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="590")]
		_590 = 292,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="591")]
		_591 = 293,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="592")]
		_592 = 294,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="593")]
		_593 = 295,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="594")]
		_594 = 296,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="595")]
		_595 = 297,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="596")]
		_596 = 298,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="601")]
		_601 = 299,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="602")]
		_602 = 300,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="603")]
		_603 = 301,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="604")]
		_604 = 302,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="605")]
		_605 = 303,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="606")]
		_606 = 304,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="607")]
		_607 = 305,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="608")]
		_608 = 306,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="609")]
		_609 = 307,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="610")]
		_610 = 308,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="611")]
		_611 = 309,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="612")]
		_612 = 310,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="613")]
		_613 = 311,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="614")]
		_614 = 312,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="615")]
		_615 = 313,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="616")]
		_616 = 314,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="617")]
		_617 = 315,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="618")]
		_618 = 316,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="619")]
		_619 = 317,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="620")]
		_620 = 318,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="621")]
		_621 = 319,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="622")]
		_622 = 320,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="623")]
		_623 = 321,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="624")]
		_624 = 322,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="625")]
		_625 = 323,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="626")]
		_626 = 324,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="627")]
		_627 = 325,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="628")]
		_628 = 326,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="629")]
		_629 = 327,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="630")]
		_630 = 328,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="631")]
		_631 = 329,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="632")]
		_632 = 330,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="633")]
		_633 = 331,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="634")]
		_634 = 332,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="635")]
		_635 = 333,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="636")]
		_636 = 334,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="637")]
		_637 = 335,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="638")]
		_638 = 336,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="639")]
		_639 = 337,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="641")]
		_641 = 338,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="642")]
		_642 = 339,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="643")]
		_643 = 340,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="644")]
		_644 = 341,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="646")]
		_646 = 342,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="647")]
		_647 = 343,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="648")]
		_648 = 344,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="649")]
		_649 = 345,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="650")]
		_650 = 346,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="651")]
		_651 = 347,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="652")]
		_652 = 348,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="653")]
		_653 = 349,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="654")]
		_654 = 350,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="655")]
		_655 = 351,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="656")]
		_656 = 352,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="657")]
		_657 = 353,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="658")]
		_658 = 354,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="659")]
		_659 = 355,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="660")]
		_660 = 356,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="661")]
		_661 = 357,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="662")]
		_662 = 358,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="663")]
		_663 = 359,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="664")]
		_664 = 360,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="665")]
		_665 = 361,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="666")]
		_666 = 362,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="667")]
		_667 = 363,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="668")]
		_668 = 364,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="669")]
		_669 = 365,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="670")]
		_670 = 366,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="671")]
		_671 = 367,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="672")]
		_672 = 368,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="673")]
		_673 = 369,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="674")]
		_674 = 370,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="675")]
		_675 = 371,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="676")]
		_676 = 372,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="677")]
		_677 = 373,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="678")]
		_678 = 374,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="679")]
		_679 = 375,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="680")]
		_680 = 376,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="681")]
		_681 = 377,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="682")]
		_682 = 378,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="683")]
		_683 = 379,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="684")]
		_684 = 380,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="685")]
		_685 = 381,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="686")]
		_686 = 382,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="687")]
		_687 = 383,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="688")]
		_688 = 384,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="689")]
		_689 = 385,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="690")]
		_690 = 386,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="691")]
		_691 = 387,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="692")]
		_692 = 388,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="693")]
		_693 = 389,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="694")]
		_694 = 390,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="695")]
		_695 = 391,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="696")]
		_696 = 392,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="697")]
		_697 = 393,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="698")]
		_698 = 394,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="699")]
		_699 = 395,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="701")]
		_701 = 396,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="702")]
		_702 = 397,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="703")]
		_703 = 398,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="704")]
		_704 = 399,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="705")]
		_705 = 400,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="706")]
		_706 = 401,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="707")]
		_707 = 402,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="750")]
		_750 = 403,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="751")]
		_751 = 404,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="752")]
		_752 = 405,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="753")]
		_753 = 406,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="754")]
		_754 = 407,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="755")]
		_755 = 408,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="801")]
		_801 = 409,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="802")]
		_802 = 410,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="803")]
		_803 = 411,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="804")]
		_804 = 412,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="805")]
		_805 = 413,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="806")]
		_806 = 414,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="807")]
		_807 = 415,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="900")]
		_900 = 416,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="901")]
		_901 = 417,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="902")]
		_902 = 418,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="903")]
		_903 = 419,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="904")]
		_904 = 420,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="905")]
		_905 = 421,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="906")]
		_906 = 422,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="907")]
		_907 = 423,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="908")]
		_908 = 424,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="909")]
		_909 = 425,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1000")]
		_1000 = 426,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1001")]
		_1001 = 427,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1002")]
		_1002 = 428,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1003")]
		_1003 = 429,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1004")]
		_1004 = 430,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1005")]
		_1005 = 431,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1006")]
		_1006 = 432,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1007")]
		_1007 = 433,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1008")]
		_1008 = 434,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1009")]
		_1009 = 435,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1010")]
		_1010 = 436,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1100")]
		_1100 = 437,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1204")]
		_1204 = 438,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1205")]
		_1205 = 439,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1218")]
		_1218 = 440,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1223")]
		_1223 = 441,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1224")]
		_1224 = 442,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1225")]
		_1225 = 443,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1226")]
		_1226 = 444,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1227")]
		_1227 = 445,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1229")]
		_1229 = 446,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1230")]
		_1230 = 447,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1231")]
		_1231 = 448,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1232")]
		_1232 = 449,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1233")]
		_1233 = 450,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1234")]
		_1234 = 451,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1235")]
		_1235 = 452,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1236")]
		_1236 = 453,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1237")]
		_1237 = 454,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1238")]
		_1238 = 455,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1239")]
		_1239 = 456,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1240")]
		_1240 = 457,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1241")]
		_1241 = 458,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1242")]
		_1242 = 459,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1300")]
		_1300 = 460,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1301")]
		_1301 = 461,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1302")]
		_1302 = 462,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1303")]
		_1303 = 463,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1304")]
		_1304 = 464,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1305")]
		_1305 = 465,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1306")]
		_1306 = 466,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1307")]
		_1307 = 467,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1308")]
		_1308 = 468,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1309")]
		_1309 = 469,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1310")]
		_1310 = 470,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1311")]
		_1311 = 471,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1312")]
		_1312 = 472,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1313")]
		_1313 = 473,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1314")]
		_1314 = 474,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1315")]
		_1315 = 475,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1316")]
		_1316 = 476,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1317")]
		_1317 = 477,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1318")]
		_1318 = 478,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1400")]
		_1400 = 479,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1401")]
		_1401 = 480,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1402")]
		_1402 = 481,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1403")]
		_1403 = 482,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1404")]
		_1404 = 483,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1405")]
		_1405 = 484,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1500")]
		_1500 = 485,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1501")]
		_1501 = 486,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1502")]
		_1502 = 487,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1600")]
		_1600 = 488,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1601")]
		_1601 = 489,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1602")]
		_1602 = 490,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1603")]
		_1603 = 491,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1604")]
		_1604 = 492,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1605")]
		_1605 = 493,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1606")]
		_1606 = 494,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1607")]
		_1607 = 495,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1608")]
		_1608 = 496,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1609")]
		_1609 = 497,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1610")]
		_1610 = 498,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1611")]
		_1611 = 499,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1612")]
		_1612 = 500,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1613")]
		_1613 = 501,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1614")]
		_1614 = 502,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1615")]
		_1615 = 503,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1616")]
		_1616 = 504,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1617")]
		_1617 = 505,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1618")]
		_1618 = 506,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1619")]
		_1619 = 507,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1620")]
		_1620 = 508,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1621")]
		_1621 = 509,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1622")]
		_1622 = 510,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1623")]
		_1623 = 511,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1624")]
		_1624 = 512,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1625")]
		_1625 = 513,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1626")]
		_1626 = 514,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1627")]
		_1627 = 515,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1628")]
		_1628 = 516,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1629")]
		_1629 = 517,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1630")]
		_1630 = 518,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1631")]
		_1631 = 519,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1632")]
		_1632 = 520,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1633")]
		_1633 = 521,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1634")]
		_1634 = 522,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1635")]
		_1635 = 523,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1636")]
		_1636 = 524,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1637")]
		_1637 = 525,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1638")]
		_1638 = 526,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1639")]
		_1639 = 527,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1640")]
		_1640 = 528,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1641")]
		_1641 = 529,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1642")]
		_1642 = 530,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1643")]
		_1643 = 531,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1644")]
		_1644 = 532,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1645")]
		_1645 = 533,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1646")]
		_1646 = 534,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1647")]
		_1647 = 535,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1648")]
		_1648 = 536,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1649")]
		_1649 = 537,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1650")]
		_1650 = 538,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1651")]
		_1651 = 539,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1652")]
		_1652 = 540,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1653")]
		_1653 = 541,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1654")]
		_1654 = 542,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1655")]
		_1655 = 543,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1656")]
		_1656 = 544,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1657")]
		_1657 = 545,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1658")]
		_1658 = 546,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1659")]
		_1659 = 547,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1660")]
		_1660 = 548,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1661")]
		_1661 = 549,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1662")]
		_1662 = 550,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1663")]
		_1663 = 551,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1664")]
		_1664 = 552,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1665")]
		_1665 = 553,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1666")]
		_1666 = 554,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1667")]
		_1667 = 555,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1668")]
		_1668 = 556,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1669")]
		_1669 = 557,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1670")]
		_1670 = 558,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1671")]
		_1671 = 559,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1672")]
		_1672 = 560,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1673")]
		_1673 = 561,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1674")]
		_1674 = 562,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1675")]
		_1675 = 563,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1676")]
		_1676 = 564,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1677")]
		_1677 = 565,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1678")]
		_1678 = 566,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1679")]
		_1679 = 567,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1680")]
		_1680 = 568,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1681")]
		_1681 = 569,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1682")]
		_1682 = 570,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1683")]
		_1683 = 571,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1684")]
		_1684 = 572,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1685")]
		_1685 = 573,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1686")]
		_1686 = 574,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1687")]
		_1687 = 575,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1688")]
		_1688 = 576,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1800")]
		_1800 = 577,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1801")]
		_1801 = 578,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1802")]
		_1802 = 579,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1803")]
		_1803 = 580,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1804")]
		_1804 = 581,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1805")]
		_1805 = 582,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1806")]
		_1806 = 583,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1900")]
		_1900 = 584,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1901")]
		_1901 = 585,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1902")]
		_1902 = 586,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1903")]
		_1903 = 587,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1904")]
		_1904 = 588,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1905")]
		_1905 = 589,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1906")]
		_1906 = 590,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1907")]
		_1907 = 591,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1908")]
		_1908 = 592,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1910")]
		_1910 = 593,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1911")]
		_1911 = 594,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1912")]
		_1912 = 595,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1913")]
		_1913 = 596,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1914")]
		_1914 = 597,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2000")]
		_2000 = 598,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2001")]
		_2001 = 599,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2002")]
		_2002 = 600,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2003")]
		_2003 = 601,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2004")]
		_2004 = 602,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2005")]
		_2005 = 603,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2006")]
		_2006 = 604,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2007")]
		_2007 = 605,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2008")]
		_2008 = 606,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009")]
		_2009 = 607,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010")]
		_2010 = 608,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011")]
		_2011 = 609,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012")]
		_2012 = 610,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013")]
		_2013 = 611,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2014")]
		_2014 = 612,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015")]
		_2015 = 613,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2016")]
		_2016 = 614,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017")]
		_2017 = 615,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018")]
		_2018 = 616,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019")]
		_2019 = 617,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020")]
		_2020 = 618,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2021")]
		_2021 = 619,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2022")]
		_2022 = 620,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2023")]
		_2023 = 621,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2024")]
		_2024 = 622,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2025")]
		_2025 = 623,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2026")]
		_2026 = 624,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2027")]
		_2027 = 625,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2028")]
		_2028 = 626,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2029")]
		_2029 = 627,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2030")]
		_2030 = 628,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2031")]
		_2031 = 629,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2032")]
		_2032 = 630,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2033")]
		_2033 = 631,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2034")]
		_2034 = 632,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2035")]
		_2035 = 633,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2036")]
		_2036 = 634,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2037")]
		_2037 = 635,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2038")]
		_2038 = 636,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2039")]
		_2039 = 637,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2040")]
		_2040 = 638,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2041")]
		_2041 = 639,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2042")]
		_2042 = 640,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2043")]
		_2043 = 641,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2044")]
		_2044 = 642,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2045")]
		_2045 = 643,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2046")]
		_2046 = 644,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2047")]
		_2047 = 645,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2048")]
		_2048 = 646,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2049")]
		_2049 = 647,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2050")]
		_2050 = 648,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2051")]
		_2051 = 649,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2052")]
		_2052 = 650,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2053")]
		_2053 = 651,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2054")]
		_2054 = 652,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2055")]
		_2055 = 653,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2056")]
		_2056 = 654,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2057")]
		_2057 = 655,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2058")]
		_2058 = 656,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2059")]
		_2059 = 657,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2060")]
		_2060 = 658,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2061")]
		_2061 = 659,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2062")]
		_2062 = 660,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2063")]
		_2063 = 661,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2064")]
		_2064 = 662,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2065")]
		_2065 = 663,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2100")]
		_2100 = 664,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2101")]
		_2101 = 665,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2102")]
		_2102 = 666,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2103")]
		_2103 = 667,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2104")]
		_2104 = 668,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2105")]
		_2105 = 669,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2106")]
		_2106 = 670,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2107")]
		_2107 = 671,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2108")]
		_2108 = 672,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2109")]
		_2109 = 673,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2110")]
		_2110 = 674,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2111")]
		_2111 = 675,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2112")]
		_2112 = 676,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2113")]
		_2113 = 677,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2114")]
		_2114 = 678,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2115")]
		_2115 = 679,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2116")]
		_2116 = 680,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2117")]
		_2117 = 681,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2118")]
		_2118 = 682,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2119")]
		_2119 = 683,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2120")]
		_2120 = 684,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2121")]
		_2121 = 685,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2122")]
		_2122 = 686,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2123")]
		_2123 = 687,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2124")]
		_2124 = 688,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2125")]
		_2125 = 689,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2126")]
		_2126 = 690,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2200")]
		_2200 = 691,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2201")]
		_2201 = 692,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2202")]
		_2202 = 693,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2203")]
		_2203 = 694,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2204")]
		_2204 = 695,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2205")]
		_2205 = 696,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2206")]
		_2206 = 697,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2207")]
		_2207 = 698,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2300")]
		_2300 = 699,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2500")]
		_2500 = 700,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2501")]
		_2501 = 701,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2502")]
		_2502 = 702,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2503")]
		_2503 = 703,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2504")]
		_2504 = 704,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2505")]
		_2505 = 705,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2506")]
		_2506 = 706,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2507")]
		_2507 = 707,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2508")]
		_2508 = 708,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2509")]
		_2509 = 709,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2510")]
		_2510 = 710,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2600")]
		_2600 = 711,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2601")]
		_2601 = 712,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2700")]
		_2700 = 713,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2701")]
		_2701 = 714,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2702")]
		_2702 = 715,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2703")]
		_2703 = 716,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2800")]
		_2800 = 717,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2801")]
		_2801 = 718,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2802")]
		_2802 = 719,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2803")]
		_2803 = 720,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2804")]
		_2804 = 721,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2805")]
		_2805 = 722,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2806")]
		_2806 = 723,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2900")]
		_2900 = 724,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2901")]
		_2901 = 725,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2902")]
		_2902 = 726,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2903")]
		_2903 = 727,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3000")]
		_3000 = 728,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3001")]
		_3001 = 729,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3002")]
		_3002 = 730,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3003")]
		_3003 = 731,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3004")]
		_3004 = 732,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3005")]
		_3005 = 733,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3006")]
		_3006 = 734,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3007")]
		_3007 = 735,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3008")]
		_3008 = 736,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3009")]
		_3009 = 737,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3010")]
		_3010 = 738,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3011")]
		_3011 = 739,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3012")]
		_3012 = 740,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3013")]
		_3013 = 741,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3014")]
		_3014 = 742,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3015")]
		_3015 = 743,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3016")]
		_3016 = 744,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3017")]
		_3017 = 745,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3018")]
		_3018 = 746,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3019")]
		_3019 = 747,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3020")]
		_3020 = 748,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3021")]
		_3021 = 749,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3022")]
		_3022 = 750,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3023")]
		_3023 = 751,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3024")]
		_3024 = 752,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3025")]
		_3025 = 753,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3026")]
		_3026 = 754,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3027")]
		_3027 = 755,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3028")]
		_3028 = 756,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3029")]
		_3029 = 757,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3030")]
		_3030 = 758,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3031")]
		_3031 = 759,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3032")]
		_3032 = 760,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3033")]
		_3033 = 761,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3034")]
		_3034 = 762,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3035")]
		_3035 = 763,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3036")]
		_3036 = 764,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3037")]
		_3037 = 765,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3038")]
		_3038 = 766,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3200")]
		_3200 = 767,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3201")]
		_3201 = 768,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3202")]
		_3202 = 769,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3203")]
		_3203 = 770,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3204")]
		_3204 = 771,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3206")]
		_3206 = 772,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3207")]
		_3207 = 773,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3208")]
		_3208 = 774,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3209")]
		_3209 = 775,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3210")]
		_3210 = 776,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3211")]
		_3211 = 777,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3212")]
		_3212 = 778,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3213")]
		_3213 = 779,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3214")]
		_3214 = 780,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3215")]
		_3215 = 781,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3216")]
		_3216 = 782,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3217")]
		_3217 = 783,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3218")]
		_3218 = 784,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3219")]
		_3219 = 785,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3220")]
		_3220 = 786,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3221")]
		_3221 = 787,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3222")]
		_3222 = 788,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3300")]
		_3300 = 789,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3400")]
		_3400 = 790,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3401")]
		_3401 = 791,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3402")]
		_3402 = 792,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3403")]
		_3403 = 793,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3404")]
		_3404 = 794,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3405")]
		_3405 = 795,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3406")]
		_3406 = 796,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3407")]
		_3407 = 797,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3408")]
		_3408 = 798,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3409")]
		_3409 = 799,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3410")]
		_3410 = 800,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3411")]
		_3411 = 801,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3412")]
		_3412 = 802,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3413")]
		_3413 = 803,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3414")]
		_3414 = 804,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3500")]
		_3500 = 805,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3600")]
		_3600 = 806,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3702")]
		_3702 = 807,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3703")]
		_3703 = 808,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3705")]
		_3705 = 809,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3706")]
		_3706 = 810,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3707")]
		_3707 = 811,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3708")]
		_3708 = 812,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3709")]
		_3709 = 813,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3710")]
		_3710 = 814,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3800")]
		_3800 = 815,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3801")]
		_3801 = 816,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3802")]
		_3802 = 817,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3803")]
		_3803 = 818,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3804")]
		_3804 = 819,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3805")]
		_3805 = 820,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3806")]
		_3806 = 821,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3807")]
		_3807 = 822,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3900")]
		_3900 = 823,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3901")]
		_3901 = 824,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3902")]
		_3902 = 825,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3903")]
		_3903 = 826,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3904")]
		_3904 = 827,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3905")]
		_3905 = 828,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3906")]
		_3906 = 829,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3907")]
		_3907 = 830,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3908")]
		_3908 = 831,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3910")]
		_3910 = 832,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3911")]
		_3911 = 833,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4000")]
		_4000 = 834,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4001")]
		_4001 = 835,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4002")]
		_4002 = 836,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4003")]
		_4003 = 837,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4004")]
		_4004 = 838,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4005")]
		_4005 = 839,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4006")]
		_4006 = 840,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4007")]
		_4007 = 841,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4008")]
		_4008 = 842,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4009")]
		_4009 = 843,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FireteamFireteamDateRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FireteamFireteamMember
	{
		
		/// <summary>
		/// This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieNetUserInfo")]
		public UserUserInfoCard BungieNetUserInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="characterId")]
		public System.Nullable<System.Int64> CharacterId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateJoined")]
		public System.Nullable<System.DateTimeOffset> DateJoined { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinyUserInfo")]
		public FireteamFireteamUserInfoCard DestinyUserInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMicrophone")]
		public System.Nullable<System.Boolean> HasMicrophone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastPlatformInviteAttemptDate")]
		public System.Nullable<System.DateTimeOffset> LastPlatformInviteAttemptDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastPlatformInviteAttemptResult")]
		public string LastPlatformInviteAttemptResult { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FireteamFireteamUserInfoCard
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FireteamDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FireteamMembershipType { get; set; }
		
		/// <summary>
		/// The list of Membership Types indicating the platforms on which this Membership can be used.
		/// Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableMembershipTypes")]
		public int[] ApplicableMembershipTypes { get; set; }
		
		/// <summary>
		/// The bungie global display name, if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayName")]
		public string BungieGlobalDisplayName { get; set; }
		
		/// <summary>
		/// The bungie global display name code, if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayNameCode")]
		public string BungieGlobalDisplayNameCode { get; set; }
		
		/// <summary>
		/// If there is a cross save override in effect, this value will tell you the type that is overridding this one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossSaveOverride")]
		public System.Nullable<System.Int32> CrossSaveOverride { get; set; }
		
		/// <summary>
		/// Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// URL the Icon if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconPath")]
		public string IconPath { get; set; }
		
		/// <summary>
		/// If True, this is a public user membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		/// <summary>
		/// Membership ID as they user is known in the Accounts service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipId")]
		public System.Nullable<System.Int64> MembershipId { get; set; }
		
		/// <summary>
		/// Type of the membership. Not necessarily the native type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		/// <summary>
		/// A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplementalDisplayName")]
		public string SupplementalDisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FireteamFireteamPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FireteamFireteamPlatformInviteResult
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FireteamFireteamPublicSearchOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FireteamFireteamResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FireteamFireteamMember[] Alternates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FireteamFireteamMember[] Members { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FireteamFireteamSummary Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FireteamFireteamSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public System.Nullable<System.Int32> ActivityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alternateSlotCount")]
		public System.Nullable<System.Int32> AlternateSlotCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availableAlternateSlotCount")]
		public System.Nullable<System.Int32> AvailableAlternateSlotCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availablePlayerSlotCount")]
		public System.Nullable<System.Int32> AvailablePlayerSlotCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateCreated")]
		public System.Nullable<System.DateTimeOffset> DateCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateModified")]
		public System.Nullable<System.DateTimeOffset> DateModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datePlayerModified")]
		public System.Nullable<System.DateTimeOffset> DatePlayerModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fireteamId")]
		public System.Nullable<System.Int64> FireteamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int64> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isImmediate")]
		public System.Nullable<System.Boolean> IsImmediate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isValid")]
		public System.Nullable<System.Boolean> IsValid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerCurrentGuardianRankSnapshot")]
		public System.Nullable<System.Int32> OwnerCurrentGuardianRankSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerHighestLifetimeGuardianRankSnapshot")]
		public System.Nullable<System.Int32> OwnerHighestLifetimeGuardianRankSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerMembershipId")]
		public System.Nullable<System.Int64> OwnerMembershipId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerTotalCommendationScoreSnapshot")]
		public System.Nullable<System.Int32> OwnerTotalCommendationScoreSnapshot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="playerSlotCount")]
		public System.Nullable<System.Int32> PlayerSlotCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduledTime")]
		public System.Nullable<System.DateTimeOffset> ScheduledTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="titleBeforeModeration")]
		public string TitleBeforeModeration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FireteamFireteamSlotSearch
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForumCommunityContentSortMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForumForumMediaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForumForumPostPopularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForumForumPostSortEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForumForumRecruitmentDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserGeneralUser[] Fireteam { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="approved")]
		public System.Nullable<System.Boolean> Approved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationId")]
		public System.Nullable<System.Int64> ConversationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intensity")]
		public string Intensity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kickedPlayerIds")]
		public int[] KickedPlayerIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="microphoneRequired")]
		public System.Nullable<System.Boolean> MicrophoneRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="playerSlotsRemaining")]
		public System.Nullable<System.Int32> PlayerSlotsRemaining { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="playerSlotsTotal")]
		public System.Nullable<System.Int32> PlayerSlotsTotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tone")]
		public string Tone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topicId")]
		public System.Nullable<System.Int64> TopicId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForumForumRecruitmentIntensityLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForumForumRecruitmentToneLabel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForumForumTopicsCategoryFiltersEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForumForumTopicsQuickDateEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForumForumTopicsSortEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForumPollResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ForumPollResult[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topicId")]
		public System.Nullable<System.Int64> TopicId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVotes")]
		public System.Nullable<System.Int32> TotalVotes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForumPollResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="answerSlot")]
		public System.Nullable<System.Int32> AnswerSlot { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="answerText")]
		public string AnswerText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastVoteDate")]
		public System.Nullable<System.DateTimeOffset> LastVoteDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestingUserVoted")]
		public System.Nullable<System.Boolean> RequestingUserVoted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="votes")]
		public System.Nullable<System.Int32> Votes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForumPostResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPinned { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignoreStatus")]
		public IgnoresIgnoreResponse IgnoreStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAnnouncement")]
		public System.Nullable<System.Boolean> IsAnnouncement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastReplyTimestamp")]
		public System.Nullable<System.DateTimeOffset> LastReplyTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestReplyAuthorId")]
		public System.Nullable<System.Int64> LatestReplyAuthorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestReplyPostId")]
		public System.Nullable<System.Int64> LatestReplyPostId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="popularity")]
		public System.Nullable<System.Int32> Popularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public string Thumbnail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urlMediaType")]
		public System.Nullable<System.Int32> UrlMediaType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userHasMutedPost")]
		public System.Nullable<System.Boolean> UserHasMutedPost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userHasRated")]
		public System.Nullable<System.Boolean> UserHasRated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userRating")]
		public System.Nullable<System.Int32> UserRating { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForumPostSearchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="authors")]
		public UserGeneralUser[] Authors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availablePages")]
		public System.Nullable<System.Int32> AvailablePages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public GroupsV2GroupResponse[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="polls")]
		public ForumPollResponse[] Polls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recruitmentDetails")]
		public ForumForumRecruitmentDetail[] RecruitmentDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relatedPosts")]
		public ForumPostResponse[] RelatedPosts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ForumPostResponse[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchedTags")]
		public TagsModelsContractsTagResponse[] SearchedTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="allianceStatus")]
		public System.Nullable<System.Int32> AllianceStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alliedIds")]
		public int[] AlliedIds { get; set; }
		
		/// <summary>
		/// This property will be populated if the authenticated user is a member of the group. Note that because of account linking, a user can sometimes be part of a clan more than once. As such, this returns the highest member type available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentUserMemberMap")]
		public System.Collections.Generic.Dictionary<string, GroupsV2GroupMember> CurrentUserMemberMap { get; set; }
		
		/// <summary>
		/// A convenience property that indicates if every membership you (the current user) have that is a part of this group are part of an account that is considered inactive - for example, overridden accounts in Cross Save.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentUserMembershipsInactiveForDestiny")]
		public System.Nullable<System.Boolean> CurrentUserMembershipsInactiveForDestiny { get; set; }
		
		/// <summary>
		/// This property will be populated if the authenticated user is an applicant or has an outstanding invitation to join. Note that because of account linking, a user can sometimes be part of a clan more than once.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentUserPotentialMemberMap")]
		public System.Collections.Generic.Dictionary<string, GroupsV2GroupPotentialMember> CurrentUserPotentialMemberMap { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public GroupsV2GroupV2 Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="founder")]
		public GroupsV2GroupMember Founder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupJoinInviteCount")]
		public System.Nullable<System.Int32> GroupJoinInviteCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentGroup")]
		public GroupsV2GroupV2 ParentGroup { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupMember
	{
		
		/// <summary>
		/// This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieNetUserInfo")]
		public UserUserInfoCard BungieNetUserInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinyUserInfo")]
		public GroupsV2GroupUserInfoCard DestinyUserInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int64> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isOnline")]
		public System.Nullable<System.Boolean> IsOnline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="joinDate")]
		public System.Nullable<System.DateTimeOffset> JoinDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastOnlineStatusChange")]
		public System.Nullable<System.Int64> LastOnlineStatusChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberType")]
		public System.Nullable<System.Int32> MemberType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupUserInfoCard
	{
		
		/// <summary>
		/// This will be the display name the clan server last saw the user as. If the account is an active cross save override, this will be the display name to use. Otherwise, this will match the displayName property.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastSeenDisplayName { get; set; }
		
		/// <summary>
		/// The platform of the LastSeenDisplayName
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LastSeenDisplayNameType { get; set; }
		
		/// <summary>
		/// The list of Membership Types indicating the platforms on which this Membership can be used.
		/// Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableMembershipTypes")]
		public int[] ApplicableMembershipTypes { get; set; }
		
		/// <summary>
		/// The bungie global display name, if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayName")]
		public string BungieGlobalDisplayName { get; set; }
		
		/// <summary>
		/// The bungie global display name code, if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayNameCode")]
		public string BungieGlobalDisplayNameCode { get; set; }
		
		/// <summary>
		/// If there is a cross save override in effect, this value will tell you the type that is overridding this one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossSaveOverride")]
		public System.Nullable<System.Int32> CrossSaveOverride { get; set; }
		
		/// <summary>
		/// Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// URL the Icon if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconPath")]
		public string IconPath { get; set; }
		
		/// <summary>
		/// If True, this is a public user membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		/// <summary>
		/// Membership ID as they user is known in the Accounts service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipId")]
		public System.Nullable<System.Int64> MembershipId { get; set; }
		
		/// <summary>
		/// Type of the membership. Not necessarily the native type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
		
		/// <summary>
		/// A platform specific additional display name - ex: psn Real Name, bnet Unique Name, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplementalDisplayName")]
		public string SupplementalDisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupPotentialMember
	{
		
		/// <summary>
		/// This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieNetUserInfo")]
		public UserUserInfoCard BungieNetUserInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinyUserInfo")]
		public GroupsV2GroupUserInfoCard DestinyUserInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int64> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="joinDate")]
		public System.Nullable<System.DateTimeOffset> JoinDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="potentialStatus")]
		public System.Nullable<System.Int32> PotentialStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupV2
	{
		
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowChat")]
		public System.Nullable<System.Boolean> AllowChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avatarImageIndex")]
		public System.Nullable<System.Int32> AvatarImageIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avatarPath")]
		public string AvatarPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="banExpireDate")]
		public System.Nullable<System.DateTimeOffset> BanExpireDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bannerPath")]
		public string BannerPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chatSecurity")]
		public System.Nullable<System.Int32> ChatSecurity { get; set; }
		
		/// <summary>
		/// The same as GroupV2ClanInfo, but includes any investment data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clanInfo")]
		public GroupsV2GroupV2ClanInfoAndInvestment ClanInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationId")]
		public System.Nullable<System.Int64> ConversationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultPublicity")]
		public System.Nullable<System.Int32> DefaultPublicity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableInvitationMessagingForAdmins")]
		public System.Nullable<System.Boolean> EnableInvitationMessagingForAdmins { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="features")]
		public GroupsV2GroupFeatures Features { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int64> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupType")]
		public System.Nullable<System.Int32> GroupType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homepage")]
		public System.Nullable<System.Int32> Homepage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefaultPostPublic")]
		public System.Nullable<System.Boolean> IsDefaultPostPublic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPublicTopicAdminOnly")]
		public System.Nullable<System.Boolean> IsPublicTopicAdminOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberCount")]
		public System.Nullable<System.Int32> MemberCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipIdCreated")]
		public System.Nullable<System.Int64> MembershipIdCreated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipOption")]
		public System.Nullable<System.Int32> MembershipOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modificationDate")]
		public System.Nullable<System.DateTimeOffset> ModificationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="motto")]
		public string Motto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public string Theme { get; set; }
	}
	
	/// <summary>
	/// The same as GroupV2ClanInfo, but includes any investment data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupV2ClanInfoAndInvestment
	{
		
		[System.Runtime.Serialization.DataMember(Name="clanBannerData")]
		public GroupsV2ClanBanner ClanBannerData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clanCallsign")]
		public string ClanCallsign { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="d2ClanProgressions")]
		public System.Collections.Generic.Dictionary<string, DestinyDestinyProgression> D2ClanProgressions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2ClanBanner
	{
		
		[System.Runtime.Serialization.DataMember(Name="decalBackgroundColorId")]
		public System.Nullable<System.UInt32> DecalBackgroundColorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="decalColorId")]
		public System.Nullable<System.UInt32> DecalColorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="decalId")]
		public System.Nullable<System.UInt32> DecalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gonfalonColorId")]
		public System.Nullable<System.UInt32> GonfalonColorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gonfalonDetailColorId")]
		public System.Nullable<System.UInt32> GonfalonDetailColorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gonfalonDetailId")]
		public System.Nullable<System.UInt32> GonfalonDetailId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gonfalonId")]
		public System.Nullable<System.UInt32> GonfalonId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupFeatures
	{
		
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public System.Nullable<System.Int32> Capabilities { get; set; }
		
		/// <summary>
		/// Minimum Member Level allowed to host guided games
		///Always Allowed: Founder, Acting Founder, Admin
		///Allowed Overrides: None, Member, Beginner
		///Default is Member for clans, None for groups, although this means nothing for groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostGuidedGamePermissionOverride")]
		public System.Nullable<System.Int32> HostGuidedGamePermissionOverride { get; set; }
		
		/// <summary>
		/// Minimum Member Level allowed to invite new members to group
		///Always Allowed: Founder, Acting Founder
		///True means admins have this power, false means they don't
		///Default is false for clans, true for groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invitePermissionOverride")]
		public System.Nullable<System.Boolean> InvitePermissionOverride { get; set; }
		
		/// <summary>
		/// Level to join a member at when accepting an invite, application, or joining an open clan
		///Default is Beginner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joinLevel")]
		public System.Nullable<System.Int32> JoinLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumMembers")]
		public System.Nullable<System.Int32> MaximumMembers { get; set; }
		
		/// <summary>
		/// Maximum number of groups of this type a typical membership may join. For example, a user may join about 50 General groups with their Bungie.net account. They may join one clan per Destiny membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumMembershipsOfGroupType")]
		public System.Nullable<System.Int32> MaximumMembershipsOfGroupType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipTypes")]
		public int[] MembershipTypes { get; set; }
		
		/// <summary>
		/// Minimum Member Level allowed to update banner
		///Always Allowed: Founder, Acting Founder
		///True means admins have this power, false means they don't
		///Default is false for clans, true for groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateBannerPermissionOverride")]
		public System.Nullable<System.Boolean> UpdateBannerPermissionOverride { get; set; }
		
		/// <summary>
		/// Minimum Member Level allowed to update group culture
		///Always Allowed: Founder, Acting Founder
		///True means admins have this power, false means they don't
		///Default is false for clans, true for groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateCulturePermissionOverride")]
		public System.Nullable<System.Boolean> UpdateCulturePermissionOverride { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueriesPagedQuery
	{
		
		[System.Runtime.Serialization.DataMember(Name="currentPage")]
		public System.Nullable<System.Int32> CurrentPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestContinuationToken")]
		public string RequestContinuationToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagsModelsContractsTagResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="ignoreStatus")]
		public IgnoresIgnoreResponse IgnoreStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagText")]
		public string TagText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForumsForumFlagsEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ForumsForumPostCategoryEnums
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="256")]
		_256 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="512")]
		_512 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1024")]
		_1024 = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GlobalAlert
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AlertHtml { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlertKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AlertLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlertLink { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> AlertTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AlertType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamInfo StreamInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StreamInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ChannelName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GlobalAlertLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GlobalAlertType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2Capabilities
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2ChatSecuritySetting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GetGroupsForMemberResponse
	{
		
		/// <summary>
		/// A convenience property that indicates if every membership this user has that is a part of this group are part of an account that is considered inactive - for example, overridden accounts in Cross Save.
		/// The key is the Group ID for the group being checked, and the value is true if the users' memberships for that group are all inactive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="areAllMembershipsInactive")]
		public System.Collections.Generic.Dictionary<string, bool> AreAllMembershipsInactive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GroupsV2GroupMembership[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupMembership
	{
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public GroupsV2GroupV2 Group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public GroupsV2GroupMember Member { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupAllianceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupApplicationListRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="memberships")]
		public UserUserMembership[] Memberships { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Very basic info about a user as returned by the Account server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserUserMembership
	{
		
		/// <summary>
		/// The bungie global display name, if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayName")]
		public string BungieGlobalDisplayName { get; set; }
		
		/// <summary>
		/// The bungie global display name code, if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayNameCode")]
		public string BungieGlobalDisplayNameCode { get; set; }
		
		/// <summary>
		/// Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Membership ID as they user is known in the Accounts service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipId")]
		public System.Nullable<System.Int64> MembershipId { get; set; }
		
		/// <summary>
		/// Type of the membership. Not necessarily the native type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupApplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupApplicationResolveState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupApplicationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="resolution")]
		public System.Nullable<System.Int32> Resolution { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupBan
	{
		
		/// <summary>
		/// This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieNetUserInfo")]
		public UserUserInfoCard BungieNetUserInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public UserUserInfoCard CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateBanned")]
		public System.Nullable<System.DateTimeOffset> DateBanned { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateExpires")]
		public System.Nullable<System.DateTimeOffset> DateExpires { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinyUserInfo")]
		public GroupsV2GroupUserInfoCard DestinyUserInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int64> GroupId { get; set; }
		
		/// <summary>
		/// This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedBy")]
		public UserUserInfoCard LastModifiedBy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupBanRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupDateRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupEditAction
	{
		
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowChat")]
		public System.Nullable<System.Boolean> AllowChat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avatarImageIndex")]
		public System.Nullable<System.Int32> AvatarImageIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="callsign")]
		public string Callsign { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chatSecurity")]
		public System.Nullable<GroupsV2GroupEditActionChatSecurity> ChatSecurity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultPublicity")]
		public System.Nullable<GroupsV2GroupEditActionDefaultPublicity> DefaultPublicity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableInvitationMessagingForAdmins")]
		public System.Nullable<System.Boolean> EnableInvitationMessagingForAdmins { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homepage")]
		public System.Nullable<GroupsV2GroupEditActionHomepage> Homepage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPublicTopicAdminOnly")]
		public System.Nullable<System.Boolean> IsPublicTopicAdminOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipOption")]
		public System.Nullable<GroupsV2GroupEditActionMembershipOption> MembershipOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="motto")]
		public string Motto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public string Theme { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupEditActionChatSecurity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupEditActionDefaultPublicity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupEditActionHomepage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupEditActionMembershipOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupHomepage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupMemberApplication
	{
		
		/// <summary>
		/// This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieNetUserInfo")]
		public UserUserInfoCard BungieNetUserInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinyUserInfo")]
		public GroupsV2GroupUserInfoCard DestinyUserInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int64> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestMessage")]
		public string RequestMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolveDate")]
		public System.Nullable<System.DateTimeOffset> ResolveDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolveMessage")]
		public string ResolveMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolveState")]
		public System.Nullable<System.Int32> ResolveState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolvedByMembershipId")]
		public System.Nullable<System.Int64> ResolvedByMembershipId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupMemberCountFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupMemberLeaveResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public GroupsV2GroupV2 Group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupDeleted")]
		public System.Nullable<System.Boolean> GroupDeleted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupMembershipBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public GroupsV2GroupV2 Group { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupMembershipSearchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GroupsV2GroupMembership[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupNameSearchRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupType")]
		public System.Nullable<System.Int32> GroupType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupOptionalConversation
	{
		
		[System.Runtime.Serialization.DataMember(Name="chatEnabled")]
		public System.Nullable<System.Boolean> ChatEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chatName")]
		public string ChatName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chatSecurity")]
		public System.Nullable<System.Int32> ChatSecurity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conversationId")]
		public System.Nullable<System.Int64> ConversationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int64> GroupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupOptionalConversationAddRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="chatName")]
		public string ChatName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chatSecurity")]
		public System.Nullable<System.Int32> ChatSecurity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupOptionalConversationEditRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="chatEnabled")]
		public System.Nullable<System.Boolean> ChatEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chatName")]
		public string ChatName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chatSecurity")]
		public System.Nullable<GroupsV2GroupOptionalConversationEditRequestChatSecurity> ChatSecurity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupOptionalConversationEditRequestChatSecurity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupOptionsEditAction
	{
		
		/// <summary>
		/// Minimum Member Level allowed to host guided games
		///Always Allowed: Founder, Acting Founder, Admin
		///Allowed Overrides: None, Member, Beginner
		///Default is Member for clans, None for groups, although this means nothing for groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<GroupsV2GroupOptionsEditActionHostGuidedGamePermissionOverride> HostGuidedGamePermissionOverride { get; set; }
		
		/// <summary>
		/// Minimum Member Level allowed to invite new members to group
		///Always Allowed: Founder, Acting Founder
		///True means admins have this power, false means they don't
		///Default is false for clans, true for groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> InvitePermissionOverride { get; set; }
		
		/// <summary>
		/// Level to join a member at when accepting an invite, application, or joining an open clan
		///Default is Beginner.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<GroupsV2GroupOptionsEditActionJoinLevel> JoinLevel { get; set; }
		
		/// <summary>
		/// Minimum Member Level allowed to update banner
		///Always Allowed: Founder, Acting Founder
		///True means admins have this power, false means they don't
		///Default is false for clans, true for groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UpdateBannerPermissionOverride { get; set; }
		
		/// <summary>
		/// Minimum Member Level allowed to update group culture
		///Always Allowed: Founder, Acting Founder
		///True means admins have this power, false means they don't
		///Default is false for clans, true for groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UpdateCulturePermissionOverride { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupOptionsEditActionHostGuidedGamePermissionOverride
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupOptionsEditActionJoinLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupPostPublicity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupPotentialMemberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupPotentialMembership
	{
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public GroupsV2GroupV2 Group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public GroupsV2GroupPotentialMember Member { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupPotentialMembershipSearchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GroupsV2GroupPotentialMembership[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	/// <summary>
	/// NOTE: GroupQuery, as of Destiny 2, has essentially two totally different and incompatible "modes".
	///If you are querying for a group, you can pass any of the properties below.
	///If you are querying for a Clan, you MUST NOT pass any of the following properties (they must be null or undefined in your request, not just empty string/default values):
	///- groupMemberCountFilter - localeFilter - tagText
	///If you pass these, you will get a useless InvalidParameters error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupQuery
	{
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.Int32> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentPage")]
		public System.Nullable<System.Int32> CurrentPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupMemberCountFilter")]
		public System.Nullable<GroupsV2GroupQueryGroupMemberCountFilter> GroupMemberCountFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupType")]
		public System.Nullable<System.Int32> GroupType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeFilter")]
		public string LocaleFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestContinuationToken")]
		public string RequestContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public System.Nullable<System.Int32> SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagText")]
		public string TagText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupQueryGroupMemberCountFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupSearchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GroupsV2GroupV2Card[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	/// <summary>
	/// A small infocard of group information, usually used for when a list of groups are returned
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupV2Card
	{
		
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avatarPath")]
		public string AvatarPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public System.Nullable<System.Int32> Capabilities { get; set; }
		
		/// <summary>
		/// This contract contains clan-specific group information. It does not include any investment data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clanInfo")]
		public GroupsV2GroupV2ClanInfo ClanInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int64> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupType")]
		public System.Nullable<System.Int32> GroupType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberCount")]
		public System.Nullable<System.Int32> MemberCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipOption")]
		public System.Nullable<System.Int32> MembershipOption { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="motto")]
		public string Motto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public string Theme { get; set; }
	}
	
	/// <summary>
	/// This contract contains clan-specific group information. It does not include any investment data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupV2ClanInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="clanBannerData")]
		public GroupsV2ClanBanner ClanBannerData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clanCallsign")]
		public string ClanCallsign { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupsV2GroupUserBase
	{
		
		/// <summary>
		/// This contract supplies basic information commonly used to display a minimal amount of information about a user. Take care to not add more properties here unless the property applies in all (or at least the majority) of the situations where UserInfoCard is used. Avoid adding game specific or platform specific details here. In cases where UserInfoCard is a subset of the data needed in a contract, use UserInfoCard as a property of other contracts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieNetUserInfo")]
		public UserUserInfoCard BungieNetUserInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinyUserInfo")]
		public GroupsV2GroupUserInfoCard DestinyUserInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public System.Nullable<System.Int64> GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="joinDate")]
		public System.Nullable<System.DateTimeOffset> JoinDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2GroupsForMemberFilter
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// Used for setting the guided game permission level override (admins and founders can always host guided games).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2HostGuidedGamesPermissionLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2MembershipOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// The member levels used by all V2 Groups API. Individual group types use their own mappings in their native storage (general uses BnetDbGroupMemberType and D2 clans use ClanMemberLevel), but they are all translated to this in the runtime api. These runtime values should NEVER be stored anywhere, so the values can be changed as necessary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupsV2RuntimeGroupMemberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IgnoresIgnoreLength
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IgnoresIgnoreStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueriesSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResultOfContentItemPublicContract
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ContentContentItemPublicContract[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResultOfDestinyEntitySearchResultItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public DestinyDefinitionsDestinyEntitySearchResultItem[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResultOfFireteamResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public FireteamFireteamResponse[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResultOfFireteamSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public FireteamFireteamSummary[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResultOfGroupBan
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GroupsV2GroupBan[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResultOfGroupMember
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GroupsV2GroupMember[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResultOfGroupMemberApplication
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GroupsV2GroupMemberApplication[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResultOfGroupMembership
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GroupsV2GroupMembership[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResultOfGroupPotentialMembership
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GroupsV2GroupPotentialMembership[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResultOfGroupV2Card
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public GroupsV2GroupV2Card[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResultOfPostResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ForumPostResponse[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchResultOfTrendingEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public QueriesPagedQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="replacementContinuationToken")]
		public string ReplacementContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public TrendingTrendingEntry[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
		
		/// <summary>
		/// If useTotalResults is true, then totalResults represents an accurate count.
		///If False, it does not, and may be estimated/only the size of the current page.
		///Either way, you should probably always only trust hasMore.
		///This is a long-held historical throwback to when we used to do paging with known total results. Those queries toasted our database, and we were left to hastily alter our endpoints and create backward- compatible shims, of which useTotalResults is one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useTotalResults")]
		public System.Nullable<System.Boolean> UseTotalResults { get; set; }
	}
	
	/// <summary>
	/// The list entry view for trending items. Returns just enough to show the item on the trending page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendingTrendingEntry
	{
		
		/// <summary>
		/// If the entry has a date at which it was created, this is that date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// The localized "display name/article title/'primary localized identifier'" of the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public System.Nullable<System.DateTimeOffset> EndDate { get; set; }
		
		/// <summary>
		/// An enum - unfortunately - dictating all of the possible kinds of trending items that you might get in your result set, in case you want to do custom rendering or call to get the details of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		public System.Nullable<System.Int32> EntityType { get; set; }
		
		/// <summary>
		/// If isFeatured, this image will be populated with whatever the featured image is. Note that this will likely be a very large image, so don't use it all the time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="featureImage")]
		public string FeatureImage { get; set; }
		
		/// <summary>
		/// We don't know whether the identifier will be a string, a uint, or a long... so we're going to cast it all to a string. But either way, we need any trending item created to have a single unique identifier for its type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFeatured")]
		public System.Nullable<System.Boolean> IsFeatured { get; set; }
		
		/// <summary>
		/// If the item is of entityType TrendingEntryType.Container, it may have items - also Trending Entries - contained within it. This is the ordered list of those to display under the Container's header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public TrendingTrendingEntry[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// If this is populated, the entry has a related MP4 video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mp4Video")]
		public string Mp4Video { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public System.Nullable<System.DateTimeOffset> StartDate { get; set; }
		
		/// <summary>
		/// If the entity has a localized tagline/subtitle/motto/whatever, that is found here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagline")]
		public string Tagline { get; set; }
		
		/// <summary>
		/// If this is populated, the entry has a related WebM video to show. I am 100% certain I am going to regret putting this directly on TrendingEntry, but it will work so yolo
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webmVideo")]
		public string WebmVideo { get; set; }
		
		/// <summary>
		/// The weighted score of this trending item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Double> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyCharacterActivitiesComponent
	{
		
		/// <summary>
		/// This component holds activity data for a character. It will tell you about the character's current activity status, as well as activities that are available to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesCharactersDestinyCharacterActivitiesComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyCharacterComponent
	{
		
		/// <summary>
		/// This component contains base properties of the character. You'll probably want to always request this component, but hey you do you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesCharactersDestinyCharacterComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyCharacterProgressionComponent
	{
		
		/// <summary>
		/// This component returns anything that could be considered "Progression" on a user: data where the user is gaining levels, reputation, completions, rewards, etc...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesCharactersDestinyCharacterProgressionComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyCharacterRecordsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsRecordsDestinyCharacterRecordsComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyCharacterRenderComponent
	{
		
		/// <summary>
		/// Only really useful if you're attempting to render the character's current appearance in 3D, this returns a bare minimum of information, pre-aggregated, that you'll need to perform that rendering. Note that you need to combine this with other 3D assets and data from our servers.
		///Examine the Javascript returned by https://bungie.net/sharedbundle/spasm to see how we use this data, but be warned: the rabbit hole goes pretty deep.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesCharactersDestinyCharacterRenderComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyCollectiblesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsCollectiblesDestinyCollectiblesComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyCurrenciesComponent
	{
		
		/// <summary>
		/// This component provides a quick lookup of every item the requested character has and how much of that item they have.
		///Requesting this component will allow you to circumvent manually putting together the list of which currencies you have for the purpose of testing currency requirements on an item being purchased, or operations that have costs.
		///You *could* figure this out yourself by doing a GetCharacter or GetProfile request and forming your own lookup table, but that is inconvenient enough that this feels like a worthwhile (and optional) redundency. Don't bother requesting it if you have already created your own lookup from prior GetCharacter/GetProfile calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsInventoryDestinyCurrenciesComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyInventoryComponent
	{
		
		/// <summary>
		/// A list of minimal information for items in an inventory: be it a character's inventory, or a Profile's inventory. (Note that the Vault is a collection of inventory buckets in the Profile's inventory)
		///Inventory Items returned here are in a flat list, but importantly they have a bucketHash property that indicates the specific inventory bucket that is holding them. These buckets constitute things like the separate sections of the Vault, the user's inventory slots, etc. See DestinyInventoryBucketDefinition for more info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesInventoryDestinyInventoryComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyItemComponent
	{
		
		/// <summary>
		/// The base item component, filled with properties that are generally useful to know in any item request or that don't feel worthwhile to put in their own component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesItemsDestinyItemComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyItemInstanceComponent
	{
		
		/// <summary>
		/// If an item is "instanced", this will contain information about the item's instance that doesn't fit easily into other components. One might say this is the "essential" instance data for the item.
		///Items are instanced if they require information or state that can vary. For instance, weapons are Instanced: they are given a unique identifier, uniquely generated stats, and can have their properties altered. Non-instanced items have none of these things: for instance, Glimmer has no unique properties aside from how much of it you own.
		///You can tell from an item's definition whether it will be instanced or not by looking at the DestinyInventoryItemDefinition's definition.inventory.isInstanceItem property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesItemsDestinyItemInstanceComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyItemObjectivesComponent
	{
		
		/// <summary>
		/// Items can have objectives and progression. When you request this block, you will obtain information about any Objectives and progression tied to this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesItemsDestinyItemObjectivesComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyItemPerksComponent
	{
		
		/// <summary>
		/// Instanced items can have perks: benefits that the item bestows.
		///These are related to DestinySandboxPerkDefinition, and sometimes - but not always - have human readable info. When they do, they are the icons and text that you see in an item's tooltip.
		///Talent Grids, Sockets, and the item itself can apply Perks, which are then summarized here for your convenience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesItemsDestinyItemPerksComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyItemPlugObjectivesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsItemsDestinyItemPlugObjectivesComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyItemRenderComponent
	{
		
		/// <summary>
		/// Many items can be rendered in 3D. When you request this block, you will obtain the custom data needed to render this specific instance of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesItemsDestinyItemRenderComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyItemReusablePlugsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsItemsDestinyItemReusablePlugsComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyItemSocketsComponent
	{
		
		/// <summary>
		/// Instanced items can have sockets, which are slots on the item where plugs can be inserted.
		///Sockets are a bit complex: be sure to examine the documentation on the DestinyInventoryItemDefinition's "socket" block and elsewhere on these objects for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesItemsDestinyItemSocketsComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyItemStatsComponent
	{
		
		/// <summary>
		/// If you want the stats on an item's instanced data, get this component.
		///These are stats like Attack, Defense etc... and *not* historical stats.
		///Note that some stats have additional computation in-game at runtime - for instance, Magazine Size - and thus these stats might not be 100% accurate compared to what you see in-game for some stats. I know, it sucks. I hate it too.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesItemsDestinyItemStatsComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyItemTalentGridComponent
	{
		
		/// <summary>
		/// Well, we're here in Destiny 2, and Talent Grids are unfortunately still around.
		///The good news is that they're pretty much only being used for certain base information on items and for Builds/Subclasses. The bad news is that they still suck. If you really want this information, grab this component.
		///An important note is that talent grids are defined as such:
		///A Grid has 1:M Nodes, which has 1:M Steps.
		///Any given node can only have a single step active at one time, which represents the actual visual contents and effects of the Node (for instance, if you see a "Super Cool Bonus" node, the actual icon and text for the node is coming from the current Step of that node).
		///Nodes can be grouped into exclusivity sets *and* as of D2, exclusivity groups (which are collections of exclusivity sets that affect each other).
		///See DestinyTalentGridDefinition for more information. Brace yourself, the water's cold out there in the deep end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesItemsDestinyItemTalentGridComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyKiosksComponent
	{
		
		/// <summary>
		/// A Kiosk is a Vendor (DestinyVendorDefinition) that sells items based on whether you have already acquired that item before.
		///This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the individual character's DestinyCharacterKiosksComponent.
		///Note that, because this component returns vendorItemIndexes (that is to say, indexes into the Kiosk Vendor's itemList property), these results are necessarily content version dependent. Make sure that you have the latest version of the content manifest databases before using this data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsKiosksDestinyKiosksComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyLoadoutsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsLoadoutsDestinyLoadoutsComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyMetricsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsMetricsDestinyMetricsComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyPlatformSilverComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsInventoryDestinyPlatformSilverComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyPlugSetsComponent
	{
		
		/// <summary>
		/// Sockets may refer to a "Plug Set": a set of reusable plugs that may be shared across multiple sockets (or even, in theory, multiple sockets over multiple items).
		///This is the set of those plugs that we came across in the users' inventory, along with the values for plugs in the set. Any given set in this component may be represented in Character and Profile-level, as some plugs may be Profile-level restricted, and some character-level restricted. (note that the ones that are even more specific will remain on the actual socket component itself, as they cannot be reused)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsPlugSetsDestinyPlugSetsComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyPresentationNodesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsPresentationDestinyPresentationNodesComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyProfileCollectiblesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsCollectiblesDestinyProfileCollectiblesComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyProfileComponent
	{
		
		/// <summary>
		/// The most essential summary information about a Profile (in Destiny 1, we called these "Accounts").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesProfilesDestinyProfileComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyProfileProgressionComponent
	{
		
		/// <summary>
		/// The set of progression-related information that applies at a Profile-wide level for your Destiny experience. This differs from the Jimi Hendrix Experience because there's less guitars on fire. Yet. #spoileralert?
		///This will include information such as Checklist info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsProfilesDestinyProfileProgressionComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyProfileRecordsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsRecordsDestinyProfileRecordsComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyProfileTransitoryComponent
	{
		
		/// <summary>
		/// This is an experimental set of data that Bungie considers to be "transitory" - information that may be useful for API users, but that is coming from a non-authoritative data source about information that could potentially change at a more frequent pace than Bungie.net will receive updates about it.
		///This information is provided exclusively for convenience should any of it be useful to users: we provide no guarantees to the accuracy or timeliness of data that comes from this source. Know that this data can potentially be out-of-date or even wrong entirely if the user disconnected from the game or suddenly changed their status before we can receive refreshed data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsProfilesDestinyProfileTransitoryComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinySocialCommendationsComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsSocialDestinySocialCommendationsComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyStringVariablesComponent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsStringVariablesDestinyStringVariablesComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyVendorCategoriesComponent
	{
		
		/// <summary>
		/// A vendor can have many categories of items that they sell. This component will return the category information for available items, as well as the index into those items in the user's sale item list.
		///Note that, since both the category and items are indexes, this data is Content Version dependent. Be sure to check that your content is up to date before using this data. This is an unfortunate, but permanent, limitation of Vendor data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesVendorsDestinyVendorCategoriesComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyVendorComponent
	{
		
		/// <summary>
		/// This component contains essential/summary information about the vendor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesVendorsDestinyVendorComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyVendorGroupComponent
	{
		
		/// <summary>
		/// This component returns references to all of the Vendors in the response, grouped by categorizations that Bungie has deemed to be interesting, in the order in which both the groups and the vendors within that group should be rendered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyComponentsVendorsDestinyVendorGroupComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleComponentResponseOfDestinyVendorReceiptsComponent
	{
		
		/// <summary>
		/// For now, this isn't used for much: it's a record of the recent refundable purchases that the user has made. In the future, it could be used for providing refunds/buyback via the API. Wouldn't that be fun?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DestinyEntitiesProfilesDestinyVendorReceiptsComponent Data { get; set; }
		
		/// <summary>
		/// If true, this component is disabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Int32> Privacy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SocialFriendsBungieFriend
	{
		
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayName")]
		public string BungieGlobalDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayNameCode")]
		public string BungieGlobalDisplayNameCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bungieNetUser")]
		public UserGeneralUser BungieNetUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastSeenAsBungieMembershipType")]
		public System.Nullable<System.Int32> LastSeenAsBungieMembershipType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastSeenAsMembershipId")]
		public System.Nullable<System.Int64> LastSeenAsMembershipId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onlineStatus")]
		public System.Nullable<System.Int32> OnlineStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onlineTitle")]
		public System.Nullable<System.Int32> OnlineTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationship")]
		public System.Nullable<System.Int32> Relationship { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SocialFriendsBungieFriendListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="friends")]
		public SocialFriendsBungieFriend[] Friends { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SocialFriendsBungieFriendRequestListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="incomingRequests")]
		public SocialFriendsBungieFriend[] IncomingRequests { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outgoingRequests")]
		public SocialFriendsBungieFriend[] OutgoingRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SocialFriendsFriendRelationshipState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SocialFriendsPlatformFriend
	{
		
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayName")]
		public string BungieGlobalDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayNameCode")]
		public string BungieGlobalDisplayNameCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bungieNetMembershipId")]
		public System.Nullable<System.Int64> BungieNetMembershipId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinyMembershipId")]
		public System.Nullable<System.Int64> DestinyMembershipId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinyMembershipType")]
		public System.Nullable<SocialFriendsPlatformFriendDestinyMembershipType> DestinyMembershipType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="friendPlatform")]
		public System.Nullable<System.Int32> FriendPlatform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platformDisplayName")]
		public string PlatformDisplayName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SocialFriendsPlatformFriendDestinyMembershipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="254")]
		_254 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-1")]
		_Minus1 = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SocialFriendsPlatformFriendResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="currentPage")]
		public System.Nullable<System.Int32> CurrentPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platformFriends")]
		public SocialFriendsPlatformFriend[] PlatformFriends { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SocialFriendsPlatformFriendType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SocialFriendsPresenceOnlineStateFlags
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SocialFriendsPresenceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StreamingDropStateEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokensBungieRewardDisplay
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TokensRewardDisplayProperties ObjectiveDisplayProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TokensRewardDisplayProperties RewardDisplayProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TokensUserRewardAvailabilityModel UserRewardAvailabilityModel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokensRewardDisplayProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImagePath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokensUserRewardAvailabilityModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TokensRewardAvailabilityModel AvailabilityModel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAvailableForUser { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsUnlockedForUser { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokensRewardAvailabilityModel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TokensCollectibleDefinitions[] CollectibleDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DecryptedToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> GameEarnByDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasExistingCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasOffer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsLoyaltyReward { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsOffer { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OfferApplied { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DestinyDefinitionsRecordsDestinyRecordDefinition[] RecordDefinitions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RedemptionEndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ShopifyEndDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokensCollectibleDefinitions
	{
		
		/// <summary>
		/// Defines a
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinyDefinitionsCollectiblesDestinyCollectibleDefinition CollectibleDefinition { get; set; }
		
		/// <summary>
		/// So much of what you see in Destiny is actually an Item used in a new and creative way. This is the definition for Items in Destiny, which started off as just entities that could exist in your Inventory but ended up being the backing data for so much more: quests, reward previews, slots, and subclasses.
		///In practice, you will want to associate this data with "live" item data from a Bungie.Net Platform call: these definitions describe the item in generic, non-instanced terms: but an actual instance of an item can vary widely from these generic definitions.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DestinyDefinitionsDestinyInventoryItemDefinition DestinyInventoryItemDefinition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokensPartnerOfferClaimRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> BungieNetMembershipId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PartnerOfferId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokensPartnerOfferHistoryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ApplyDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsConsumable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> MembershipId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<TokensPartnerOfferHistoryResponseMembershipType> MembershipType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PartnerOfferKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> QuantityApplied { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TokensPartnerOfferHistoryResponseMembershipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="254")]
		_254 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-1")]
		_Minus1 = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokensPartnerOfferSkuHistoryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllOffersApplied { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ClaimDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalizedName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SkuIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TokensPartnerOfferHistoryResponse[] SkuOffers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokensPartnerRewardHistoryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TokensPartnerOfferSkuHistoryResponse[] PartnerOffers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TokensTwitchDropHistoryResponse[] TwitchDrops { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokensTwitchDropHistoryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<TokensTwitchDropHistoryResponseClaimState> ClaimState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TokensTwitchDropHistoryResponseClaimState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendingTrendingCategories
	{
		
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public TrendingTrendingCategory[] Categories { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendingTrendingCategory
	{
		
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryName")]
		public string CategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public SearchResultOfTrendingEntry Entries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendingTrendingDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="creation")]
		public TrendingTrendingEntryCommunityCreation Creation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinyActivity")]
		public TrendingTrendingEntryDestinyActivity DestinyActivity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinyItem")]
		public TrendingTrendingEntryDestinyItem DestinyItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinyRitual")]
		public TrendingTrendingEntryDestinyRitual DestinyRitual { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		public System.Nullable<System.Int32> EntityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="news")]
		public TrendingTrendingEntryNews News { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="support")]
		public TrendingTrendingEntrySupportArticle Support { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendingTrendingEntryCommunityCreation
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorMembershipId")]
		public System.Nullable<System.Int64> AuthorMembershipId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="media")]
		public string Media { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postId")]
		public System.Nullable<System.Int64> PostId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upvotes")]
		public System.Nullable<System.Int32> Upvotes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendingTrendingEntryDestinyActivity
	{
		
		[System.Runtime.Serialization.DataMember(Name="activityHash")]
		public System.Nullable<System.UInt32> ActivityHash { get; set; }
		
		/// <summary>
		/// Represents the public-facing status of an activity: any data about what is currently active in the Activity, regardless of an individual character's progress in it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DestinyActivitiesDestinyPublicActivityStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendingTrendingEntryDestinyItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="itemHash")]
		public System.Nullable<System.UInt32> ItemHash { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendingTrendingEntryDestinyRitual
	{
		
		[System.Runtime.Serialization.DataMember(Name="dateEnd")]
		public System.Nullable<System.DateTimeOffset> DateEnd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateStart")]
		public System.Nullable<System.DateTimeOffset> DateStart { get; set; }
		
		/// <summary>
		/// A destiny event will not necessarily have milestone "custom content", but if it does the details will be here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventContent")]
		public string EventContent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public string Icon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// A destiny event does not necessarily have a related Milestone, but if it does the details will be returned here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="milestoneDetails")]
		public string MilestoneDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendingTrendingEntryNews
	{
		
		[System.Runtime.Serialization.DataMember(Name="article")]
		public ContentContentItemPublicContract Article { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrendingTrendingEntrySupportArticle
	{
		
		[System.Runtime.Serialization.DataMember(Name="article")]
		public ContentContentItemPublicContract Article { get; set; }
	}
	
	/// <summary>
	/// The known entity types that you can have returned from Trending.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TrendingTrendingEntryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
	}
	
	/// <summary>
	/// Very basic info about a user as returned by the Account server, but including CrossSave information. Do NOT use as a request contract.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserCrossSaveUserMembership
	{
		
		/// <summary>
		/// The list of Membership Types indicating the platforms on which this Membership can be used.
		/// Not in Cross Save = its original membership type. Cross Save Primary = Any membership types it is overridding, and its original membership type Cross Save Overridden = Empty list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicableMembershipTypes")]
		public int[] ApplicableMembershipTypes { get; set; }
		
		/// <summary>
		/// The bungie global display name, if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayName")]
		public string BungieGlobalDisplayName { get; set; }
		
		/// <summary>
		/// The bungie global display name code, if set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayNameCode")]
		public string BungieGlobalDisplayNameCode { get; set; }
		
		/// <summary>
		/// If there is a cross save override in effect, this value will tell you the type that is overridding this one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crossSaveOverride")]
		public System.Nullable<System.Int32> CrossSaveOverride { get; set; }
		
		/// <summary>
		/// Display Name the player has chosen for themselves. The display name is optional when the data type is used as input to a platform API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// If True, this is a public user membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		/// <summary>
		/// Membership ID as they user is known in the Accounts service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipId")]
		public System.Nullable<System.Int64> MembershipId { get; set; }
		
		/// <summary>
		/// Type of the membership. Not necessarily the native type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserExactSearchRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayNameCode")]
		public string DisplayNameCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserHardLinkedUserMembership
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> CrossSaveOverriddenMembershipId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CrossSaveOverriddenType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipId")]
		public System.Nullable<System.Int64> MembershipId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membershipType")]
		public System.Nullable<System.Int32> MembershipType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserModelsGetCredentialTypesForAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="credentialAsString")]
		public string CredentialAsString { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentialDisplayName")]
		public string CredentialDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentialType")]
		public string CredentialType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserOptInFlags
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="256")]
		_256 = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserUserMembershipData
	{
		
		[System.Runtime.Serialization.DataMember(Name="bungieNetUser")]
		public UserGeneralUser BungieNetUser { get; set; }
		
		/// <summary>
		/// this allows you to see destiny memberships that are visible and linked to this account (regardless of whether or not they have characters on the world server)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinyMemberships")]
		public GroupsV2GroupUserInfoCard[] DestinyMemberships { get; set; }
		
		/// <summary>
		/// If this property is populated, it will have the membership ID of the account considered to be "primary" in this user's cross save relationship.
		/// If null, this user has no cross save relationship, nor primary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryMembershipId")]
		public System.Nullable<System.Int64> PrimaryMembershipId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserUserSearchPrefixRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayNamePrefix")]
		public string DisplayNamePrefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserUserSearchResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchResults")]
		public UserUserSearchResponseDetail[] SearchResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserUserSearchResponseDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayName")]
		public string BungieGlobalDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bungieGlobalDisplayNameCode")]
		public string BungieGlobalDisplayNameCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bungieNetMembershipId")]
		public System.Nullable<System.Int64> BungieNetMembershipId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinyMemberships")]
		public UserUserInfoCard[] DestinyMemberships { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema1
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="23")]
		_23 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
		_31 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="33")]
		_33 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="34")]
		_34 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="35")]
		_35 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="36")]
		_36 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
		_37 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
		_38 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
		_39 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
		_40 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
		_41 = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
		_42 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
		_43 = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
		_44 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
		_45 = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
		_46 = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
		_47 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
		_48 = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
		_49 = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
		_50 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
		_51 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
		_52 = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
		_53 = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
		_54 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
		_55 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
		_56 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
		_57 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
		_58 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
		_59 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
		_89 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
		_90 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
		_91 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="92")]
		_92 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="93")]
		_93 = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="94")]
		_94 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="95")]
		_95 = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="96")]
		_96 = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="97")]
		_97 = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="98")]
		_98 = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="99")]
		_99 = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
		_100 = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="101")]
		_101 = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="102")]
		_102 = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="103")]
		_103 = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="104")]
		_104 = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="105")]
		_105 = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="106")]
		_106 = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="107")]
		_107 = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="108")]
		_108 = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="109")]
		_109 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="110")]
		_110 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="111")]
		_111 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="112")]
		_112 = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="113")]
		_113 = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="115")]
		_115 = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="116")]
		_116 = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="117")]
		_117 = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="118")]
		_118 = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="119")]
		_119 = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="120")]
		_120 = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="121")]
		_121 = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="122")]
		_122 = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="123")]
		_123 = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="124")]
		_124 = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="125")]
		_125 = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="126")]
		_126 = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="127")]
		_127 = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="129")]
		_129 = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="130")]
		_130 = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="131")]
		_131 = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="132")]
		_132 = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="133")]
		_133 = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="134")]
		_134 = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="135")]
		_135 = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="136")]
		_136 = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="137")]
		_137 = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="138")]
		_138 = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="139")]
		_139 = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="140")]
		_140 = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="141")]
		_141 = 111,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="142")]
		_142 = 112,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="143")]
		_143 = 113,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="144")]
		_144 = 114,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="145")]
		_145 = 115,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="146")]
		_146 = 116,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="147")]
		_147 = 117,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="148")]
		_148 = 118,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="149")]
		_149 = 119,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="150")]
		_150 = 120,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="151")]
		_151 = 121,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="152")]
		_152 = 122,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="153")]
		_153 = 123,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="154")]
		_154 = 124,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="155")]
		_155 = 125,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="156")]
		_156 = 126,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="157")]
		_157 = 127,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="158")]
		_158 = 128,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="159")]
		_159 = 129,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="160")]
		_160 = 130,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="161")]
		_161 = 131,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="162")]
		_162 = 132,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="163")]
		_163 = 133,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="164")]
		_164 = 134,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="165")]
		_165 = 135,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="166")]
		_166 = 136,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="167")]
		_167 = 137,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="168")]
		_168 = 138,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="169")]
		_169 = 139,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="170")]
		_170 = 140,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="171")]
		_171 = 141,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="172")]
		_172 = 142,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="173")]
		_173 = 143,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="174")]
		_174 = 144,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="175")]
		_175 = 145,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="176")]
		_176 = 146,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="177")]
		_177 = 147,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="178")]
		_178 = 148,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="179")]
		_179 = 149,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="180")]
		_180 = 150,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="181")]
		_181 = 151,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="200")]
		_200 = 152,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="201")]
		_201 = 153,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="202")]
		_202 = 154,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="203")]
		_203 = 155,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="204")]
		_204 = 156,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="205")]
		_205 = 157,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="206")]
		_206 = 158,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="207")]
		_207 = 159,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="208")]
		_208 = 160,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="209")]
		_209 = 161,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="210")]
		_210 = 162,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="211")]
		_211 = 163,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="212")]
		_212 = 164,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="213")]
		_213 = 165,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="214")]
		_214 = 166,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="215")]
		_215 = 167,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="216")]
		_216 = 168,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="217")]
		_217 = 169,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="218")]
		_218 = 170,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="219")]
		_219 = 171,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="220")]
		_220 = 172,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="221")]
		_221 = 173,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="222")]
		_222 = 174,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="223")]
		_223 = 175,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="224")]
		_224 = 176,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="225")]
		_225 = 177,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="226")]
		_226 = 178,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="227")]
		_227 = 179,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="228")]
		_228 = 180,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="229")]
		_229 = 181,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="230")]
		_230 = 182,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="231")]
		_231 = 183,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="232")]
		_232 = 184,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="233")]
		_233 = 185,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="234")]
		_234 = 186,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="235")]
		_235 = 187,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="236")]
		_236 = 188,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="237")]
		_237 = 189,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="238")]
		_238 = 190,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="239")]
		_239 = 191,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="240")]
		_240 = 192,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="241")]
		_241 = 193,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="242")]
		_242 = 194,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="243")]
		_243 = 195,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="244")]
		_244 = 196,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="300")]
		_300 = 197,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="301")]
		_301 = 198,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="302")]
		_302 = 199,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="303")]
		_303 = 200,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="304")]
		_304 = 201,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="305")]
		_305 = 202,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="306")]
		_306 = 203,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="307")]
		_307 = 204,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="308")]
		_308 = 205,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="309")]
		_309 = 206,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="310")]
		_310 = 207,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="311")]
		_311 = 208,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="312")]
		_312 = 209,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="313")]
		_313 = 210,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="400")]
		_400 = 211,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="500")]
		_500 = 212,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="501")]
		_501 = 213,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="502")]
		_502 = 214,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="503")]
		_503 = 215,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="504")]
		_504 = 216,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="505")]
		_505 = 217,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="506")]
		_506 = 218,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="507")]
		_507 = 219,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="508")]
		_508 = 220,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="509")]
		_509 = 221,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="510")]
		_510 = 222,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="511")]
		_511 = 223,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="512")]
		_512 = 224,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="513")]
		_513 = 225,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="514")]
		_514 = 226,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="515")]
		_515 = 227,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="516")]
		_516 = 228,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="517")]
		_517 = 229,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="518")]
		_518 = 230,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="519")]
		_519 = 231,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="520")]
		_520 = 232,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="521")]
		_521 = 233,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="522")]
		_522 = 234,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="523")]
		_523 = 235,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="524")]
		_524 = 236,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="525")]
		_525 = 237,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="526")]
		_526 = 238,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="527")]
		_527 = 239,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="528")]
		_528 = 240,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="529")]
		_529 = 241,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="530")]
		_530 = 242,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="531")]
		_531 = 243,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="532")]
		_532 = 244,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="533")]
		_533 = 245,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="534")]
		_534 = 246,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="535")]
		_535 = 247,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="536")]
		_536 = 248,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="537")]
		_537 = 249,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="538")]
		_538 = 250,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="539")]
		_539 = 251,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="540")]
		_540 = 252,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="541")]
		_541 = 253,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="542")]
		_542 = 254,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="543")]
		_543 = 255,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="544")]
		_544 = 256,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="555")]
		_555 = 257,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="556")]
		_556 = 258,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="557")]
		_557 = 259,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="558")]
		_558 = 260,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="559")]
		_559 = 261,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="560")]
		_560 = 262,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="561")]
		_561 = 263,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="562")]
		_562 = 264,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="563")]
		_563 = 265,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="564")]
		_564 = 266,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="565")]
		_565 = 267,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="566")]
		_566 = 268,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="567")]
		_567 = 269,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="568")]
		_568 = 270,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="569")]
		_569 = 271,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="570")]
		_570 = 272,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="571")]
		_571 = 273,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="572")]
		_572 = 274,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="573")]
		_573 = 275,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="574")]
		_574 = 276,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="575")]
		_575 = 277,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="576")]
		_576 = 278,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="577")]
		_577 = 279,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="578")]
		_578 = 280,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="579")]
		_579 = 281,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="580")]
		_580 = 282,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="581")]
		_581 = 283,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="582")]
		_582 = 284,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="583")]
		_583 = 285,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="584")]
		_584 = 286,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="585")]
		_585 = 287,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="586")]
		_586 = 288,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="587")]
		_587 = 289,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="588")]
		_588 = 290,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="589")]
		_589 = 291,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="590")]
		_590 = 292,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="591")]
		_591 = 293,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="592")]
		_592 = 294,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="593")]
		_593 = 295,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="594")]
		_594 = 296,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="595")]
		_595 = 297,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="596")]
		_596 = 298,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="601")]
		_601 = 299,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="602")]
		_602 = 300,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="603")]
		_603 = 301,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="604")]
		_604 = 302,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="605")]
		_605 = 303,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="606")]
		_606 = 304,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="607")]
		_607 = 305,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="608")]
		_608 = 306,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="609")]
		_609 = 307,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="610")]
		_610 = 308,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="611")]
		_611 = 309,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="612")]
		_612 = 310,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="613")]
		_613 = 311,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="614")]
		_614 = 312,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="615")]
		_615 = 313,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="616")]
		_616 = 314,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="617")]
		_617 = 315,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="618")]
		_618 = 316,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="619")]
		_619 = 317,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="620")]
		_620 = 318,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="621")]
		_621 = 319,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="622")]
		_622 = 320,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="623")]
		_623 = 321,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="624")]
		_624 = 322,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="625")]
		_625 = 323,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="626")]
		_626 = 324,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="627")]
		_627 = 325,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="628")]
		_628 = 326,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="629")]
		_629 = 327,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="630")]
		_630 = 328,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="631")]
		_631 = 329,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="632")]
		_632 = 330,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="633")]
		_633 = 331,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="634")]
		_634 = 332,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="635")]
		_635 = 333,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="636")]
		_636 = 334,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="637")]
		_637 = 335,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="638")]
		_638 = 336,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="639")]
		_639 = 337,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="641")]
		_641 = 338,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="642")]
		_642 = 339,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="643")]
		_643 = 340,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="644")]
		_644 = 341,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="646")]
		_646 = 342,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="647")]
		_647 = 343,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="648")]
		_648 = 344,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="649")]
		_649 = 345,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="650")]
		_650 = 346,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="651")]
		_651 = 347,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="652")]
		_652 = 348,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="653")]
		_653 = 349,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="654")]
		_654 = 350,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="655")]
		_655 = 351,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="656")]
		_656 = 352,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="657")]
		_657 = 353,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="658")]
		_658 = 354,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="659")]
		_659 = 355,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="660")]
		_660 = 356,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="661")]
		_661 = 357,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="662")]
		_662 = 358,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="663")]
		_663 = 359,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="664")]
		_664 = 360,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="665")]
		_665 = 361,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="666")]
		_666 = 362,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="667")]
		_667 = 363,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="668")]
		_668 = 364,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="669")]
		_669 = 365,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="670")]
		_670 = 366,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="671")]
		_671 = 367,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="672")]
		_672 = 368,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="673")]
		_673 = 369,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="674")]
		_674 = 370,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="675")]
		_675 = 371,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="676")]
		_676 = 372,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="677")]
		_677 = 373,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="678")]
		_678 = 374,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="679")]
		_679 = 375,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="680")]
		_680 = 376,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="681")]
		_681 = 377,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="682")]
		_682 = 378,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="683")]
		_683 = 379,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="684")]
		_684 = 380,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="685")]
		_685 = 381,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="686")]
		_686 = 382,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="687")]
		_687 = 383,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="688")]
		_688 = 384,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="689")]
		_689 = 385,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="690")]
		_690 = 386,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="691")]
		_691 = 387,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="692")]
		_692 = 388,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="693")]
		_693 = 389,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="694")]
		_694 = 390,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="695")]
		_695 = 391,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="696")]
		_696 = 392,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="697")]
		_697 = 393,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="698")]
		_698 = 394,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="699")]
		_699 = 395,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="701")]
		_701 = 396,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="702")]
		_702 = 397,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="703")]
		_703 = 398,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="704")]
		_704 = 399,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="705")]
		_705 = 400,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="706")]
		_706 = 401,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="707")]
		_707 = 402,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="750")]
		_750 = 403,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="751")]
		_751 = 404,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="752")]
		_752 = 405,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="753")]
		_753 = 406,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="754")]
		_754 = 407,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="755")]
		_755 = 408,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="801")]
		_801 = 409,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="802")]
		_802 = 410,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="803")]
		_803 = 411,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="804")]
		_804 = 412,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="805")]
		_805 = 413,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="806")]
		_806 = 414,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="807")]
		_807 = 415,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="900")]
		_900 = 416,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="901")]
		_901 = 417,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="902")]
		_902 = 418,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="903")]
		_903 = 419,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="904")]
		_904 = 420,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="905")]
		_905 = 421,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="906")]
		_906 = 422,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="907")]
		_907 = 423,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="908")]
		_908 = 424,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="909")]
		_909 = 425,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1000")]
		_1000 = 426,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1001")]
		_1001 = 427,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1002")]
		_1002 = 428,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1003")]
		_1003 = 429,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1004")]
		_1004 = 430,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1005")]
		_1005 = 431,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1006")]
		_1006 = 432,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1007")]
		_1007 = 433,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1008")]
		_1008 = 434,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1009")]
		_1009 = 435,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1010")]
		_1010 = 436,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1100")]
		_1100 = 437,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1204")]
		_1204 = 438,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1205")]
		_1205 = 439,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1218")]
		_1218 = 440,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1223")]
		_1223 = 441,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1224")]
		_1224 = 442,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1225")]
		_1225 = 443,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1226")]
		_1226 = 444,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1227")]
		_1227 = 445,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1229")]
		_1229 = 446,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1230")]
		_1230 = 447,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1231")]
		_1231 = 448,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1232")]
		_1232 = 449,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1233")]
		_1233 = 450,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1234")]
		_1234 = 451,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1235")]
		_1235 = 452,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1236")]
		_1236 = 453,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1237")]
		_1237 = 454,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1238")]
		_1238 = 455,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1239")]
		_1239 = 456,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1240")]
		_1240 = 457,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1241")]
		_1241 = 458,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1242")]
		_1242 = 459,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1300")]
		_1300 = 460,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1301")]
		_1301 = 461,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1302")]
		_1302 = 462,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1303")]
		_1303 = 463,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1304")]
		_1304 = 464,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1305")]
		_1305 = 465,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1306")]
		_1306 = 466,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1307")]
		_1307 = 467,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1308")]
		_1308 = 468,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1309")]
		_1309 = 469,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1310")]
		_1310 = 470,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1311")]
		_1311 = 471,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1312")]
		_1312 = 472,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1313")]
		_1313 = 473,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1314")]
		_1314 = 474,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1315")]
		_1315 = 475,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1316")]
		_1316 = 476,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1317")]
		_1317 = 477,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1318")]
		_1318 = 478,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1400")]
		_1400 = 479,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1401")]
		_1401 = 480,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1402")]
		_1402 = 481,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1403")]
		_1403 = 482,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1404")]
		_1404 = 483,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1405")]
		_1405 = 484,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1500")]
		_1500 = 485,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1501")]
		_1501 = 486,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1502")]
		_1502 = 487,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1600")]
		_1600 = 488,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1601")]
		_1601 = 489,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1602")]
		_1602 = 490,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1603")]
		_1603 = 491,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1604")]
		_1604 = 492,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1605")]
		_1605 = 493,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1606")]
		_1606 = 494,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1607")]
		_1607 = 495,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1608")]
		_1608 = 496,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1609")]
		_1609 = 497,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1610")]
		_1610 = 498,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1611")]
		_1611 = 499,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1612")]
		_1612 = 500,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1613")]
		_1613 = 501,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1614")]
		_1614 = 502,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1615")]
		_1615 = 503,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1616")]
		_1616 = 504,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1617")]
		_1617 = 505,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1618")]
		_1618 = 506,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1619")]
		_1619 = 507,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1620")]
		_1620 = 508,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1621")]
		_1621 = 509,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1622")]
		_1622 = 510,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1623")]
		_1623 = 511,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1624")]
		_1624 = 512,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1625")]
		_1625 = 513,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1626")]
		_1626 = 514,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1627")]
		_1627 = 515,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1628")]
		_1628 = 516,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1629")]
		_1629 = 517,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1630")]
		_1630 = 518,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1631")]
		_1631 = 519,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1632")]
		_1632 = 520,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1633")]
		_1633 = 521,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1634")]
		_1634 = 522,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1635")]
		_1635 = 523,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1636")]
		_1636 = 524,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1637")]
		_1637 = 525,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1638")]
		_1638 = 526,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1639")]
		_1639 = 527,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1640")]
		_1640 = 528,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1641")]
		_1641 = 529,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1642")]
		_1642 = 530,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1643")]
		_1643 = 531,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1644")]
		_1644 = 532,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1645")]
		_1645 = 533,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1646")]
		_1646 = 534,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1647")]
		_1647 = 535,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1648")]
		_1648 = 536,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1649")]
		_1649 = 537,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1650")]
		_1650 = 538,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1651")]
		_1651 = 539,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1652")]
		_1652 = 540,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1653")]
		_1653 = 541,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1654")]
		_1654 = 542,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1655")]
		_1655 = 543,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1656")]
		_1656 = 544,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1657")]
		_1657 = 545,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1658")]
		_1658 = 546,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1659")]
		_1659 = 547,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1660")]
		_1660 = 548,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1661")]
		_1661 = 549,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1662")]
		_1662 = 550,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1663")]
		_1663 = 551,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1664")]
		_1664 = 552,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1665")]
		_1665 = 553,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1666")]
		_1666 = 554,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1667")]
		_1667 = 555,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1668")]
		_1668 = 556,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1669")]
		_1669 = 557,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1670")]
		_1670 = 558,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1671")]
		_1671 = 559,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1672")]
		_1672 = 560,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1673")]
		_1673 = 561,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1674")]
		_1674 = 562,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1675")]
		_1675 = 563,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1676")]
		_1676 = 564,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1677")]
		_1677 = 565,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1678")]
		_1678 = 566,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1679")]
		_1679 = 567,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1680")]
		_1680 = 568,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1681")]
		_1681 = 569,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1682")]
		_1682 = 570,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1683")]
		_1683 = 571,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1684")]
		_1684 = 572,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1685")]
		_1685 = 573,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1686")]
		_1686 = 574,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1687")]
		_1687 = 575,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1688")]
		_1688 = 576,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1800")]
		_1800 = 577,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1801")]
		_1801 = 578,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1802")]
		_1802 = 579,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1803")]
		_1803 = 580,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1804")]
		_1804 = 581,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1805")]
		_1805 = 582,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1806")]
		_1806 = 583,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1900")]
		_1900 = 584,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1901")]
		_1901 = 585,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1902")]
		_1902 = 586,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1903")]
		_1903 = 587,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1904")]
		_1904 = 588,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1905")]
		_1905 = 589,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1906")]
		_1906 = 590,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1907")]
		_1907 = 591,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1908")]
		_1908 = 592,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1910")]
		_1910 = 593,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1911")]
		_1911 = 594,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1912")]
		_1912 = 595,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1913")]
		_1913 = 596,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1914")]
		_1914 = 597,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2000")]
		_2000 = 598,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2001")]
		_2001 = 599,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2002")]
		_2002 = 600,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2003")]
		_2003 = 601,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2004")]
		_2004 = 602,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2005")]
		_2005 = 603,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2006")]
		_2006 = 604,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2007")]
		_2007 = 605,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2008")]
		_2008 = 606,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009")]
		_2009 = 607,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010")]
		_2010 = 608,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2011")]
		_2011 = 609,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2012")]
		_2012 = 610,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2013")]
		_2013 = 611,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2014")]
		_2014 = 612,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2015")]
		_2015 = 613,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2016")]
		_2016 = 614,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2017")]
		_2017 = 615,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2018")]
		_2018 = 616,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2019")]
		_2019 = 617,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2020")]
		_2020 = 618,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2021")]
		_2021 = 619,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2022")]
		_2022 = 620,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2023")]
		_2023 = 621,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2024")]
		_2024 = 622,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2025")]
		_2025 = 623,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2026")]
		_2026 = 624,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2027")]
		_2027 = 625,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2028")]
		_2028 = 626,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2029")]
		_2029 = 627,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2030")]
		_2030 = 628,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2031")]
		_2031 = 629,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2032")]
		_2032 = 630,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2033")]
		_2033 = 631,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2034")]
		_2034 = 632,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2035")]
		_2035 = 633,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2036")]
		_2036 = 634,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2037")]
		_2037 = 635,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2038")]
		_2038 = 636,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2039")]
		_2039 = 637,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2040")]
		_2040 = 638,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2041")]
		_2041 = 639,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2042")]
		_2042 = 640,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2043")]
		_2043 = 641,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2044")]
		_2044 = 642,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2045")]
		_2045 = 643,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2046")]
		_2046 = 644,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2047")]
		_2047 = 645,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2048")]
		_2048 = 646,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2049")]
		_2049 = 647,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2050")]
		_2050 = 648,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2051")]
		_2051 = 649,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2052")]
		_2052 = 650,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2053")]
		_2053 = 651,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2054")]
		_2054 = 652,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2055")]
		_2055 = 653,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2056")]
		_2056 = 654,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2057")]
		_2057 = 655,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2058")]
		_2058 = 656,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2059")]
		_2059 = 657,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2060")]
		_2060 = 658,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2061")]
		_2061 = 659,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2062")]
		_2062 = 660,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2063")]
		_2063 = 661,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2064")]
		_2064 = 662,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2065")]
		_2065 = 663,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2100")]
		_2100 = 664,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2101")]
		_2101 = 665,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2102")]
		_2102 = 666,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2103")]
		_2103 = 667,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2104")]
		_2104 = 668,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2105")]
		_2105 = 669,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2106")]
		_2106 = 670,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2107")]
		_2107 = 671,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2108")]
		_2108 = 672,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2109")]
		_2109 = 673,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2110")]
		_2110 = 674,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2111")]
		_2111 = 675,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2112")]
		_2112 = 676,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2113")]
		_2113 = 677,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2114")]
		_2114 = 678,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2115")]
		_2115 = 679,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2116")]
		_2116 = 680,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2117")]
		_2117 = 681,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2118")]
		_2118 = 682,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2119")]
		_2119 = 683,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2120")]
		_2120 = 684,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2121")]
		_2121 = 685,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2122")]
		_2122 = 686,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2123")]
		_2123 = 687,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2124")]
		_2124 = 688,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2125")]
		_2125 = 689,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2126")]
		_2126 = 690,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2200")]
		_2200 = 691,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2201")]
		_2201 = 692,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2202")]
		_2202 = 693,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2203")]
		_2203 = 694,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2204")]
		_2204 = 695,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2205")]
		_2205 = 696,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2206")]
		_2206 = 697,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2207")]
		_2207 = 698,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2300")]
		_2300 = 699,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2500")]
		_2500 = 700,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2501")]
		_2501 = 701,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2502")]
		_2502 = 702,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2503")]
		_2503 = 703,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2504")]
		_2504 = 704,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2505")]
		_2505 = 705,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2506")]
		_2506 = 706,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2507")]
		_2507 = 707,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2508")]
		_2508 = 708,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2509")]
		_2509 = 709,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2510")]
		_2510 = 710,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2600")]
		_2600 = 711,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2601")]
		_2601 = 712,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2700")]
		_2700 = 713,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2701")]
		_2701 = 714,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2702")]
		_2702 = 715,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2703")]
		_2703 = 716,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2800")]
		_2800 = 717,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2801")]
		_2801 = 718,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2802")]
		_2802 = 719,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2803")]
		_2803 = 720,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2804")]
		_2804 = 721,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2805")]
		_2805 = 722,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2806")]
		_2806 = 723,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2900")]
		_2900 = 724,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2901")]
		_2901 = 725,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2902")]
		_2902 = 726,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2903")]
		_2903 = 727,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3000")]
		_3000 = 728,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3001")]
		_3001 = 729,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3002")]
		_3002 = 730,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3003")]
		_3003 = 731,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3004")]
		_3004 = 732,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3005")]
		_3005 = 733,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3006")]
		_3006 = 734,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3007")]
		_3007 = 735,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3008")]
		_3008 = 736,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3009")]
		_3009 = 737,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3010")]
		_3010 = 738,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3011")]
		_3011 = 739,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3012")]
		_3012 = 740,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3013")]
		_3013 = 741,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3014")]
		_3014 = 742,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3015")]
		_3015 = 743,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3016")]
		_3016 = 744,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3017")]
		_3017 = 745,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3018")]
		_3018 = 746,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3019")]
		_3019 = 747,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3020")]
		_3020 = 748,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3021")]
		_3021 = 749,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3022")]
		_3022 = 750,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3023")]
		_3023 = 751,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3024")]
		_3024 = 752,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3025")]
		_3025 = 753,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3026")]
		_3026 = 754,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3027")]
		_3027 = 755,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3028")]
		_3028 = 756,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3029")]
		_3029 = 757,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3030")]
		_3030 = 758,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3031")]
		_3031 = 759,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3032")]
		_3032 = 760,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3033")]
		_3033 = 761,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3034")]
		_3034 = 762,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3035")]
		_3035 = 763,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3036")]
		_3036 = 764,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3037")]
		_3037 = 765,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3038")]
		_3038 = 766,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3200")]
		_3200 = 767,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3201")]
		_3201 = 768,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3202")]
		_3202 = 769,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3203")]
		_3203 = 770,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3204")]
		_3204 = 771,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3206")]
		_3206 = 772,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3207")]
		_3207 = 773,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3208")]
		_3208 = 774,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3209")]
		_3209 = 775,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3210")]
		_3210 = 776,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3211")]
		_3211 = 777,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3212")]
		_3212 = 778,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3213")]
		_3213 = 779,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3214")]
		_3214 = 780,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3215")]
		_3215 = 781,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3216")]
		_3216 = 782,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3217")]
		_3217 = 783,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3218")]
		_3218 = 784,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3219")]
		_3219 = 785,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3220")]
		_3220 = 786,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3221")]
		_3221 = 787,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3222")]
		_3222 = 788,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3300")]
		_3300 = 789,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3400")]
		_3400 = 790,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3401")]
		_3401 = 791,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3402")]
		_3402 = 792,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3403")]
		_3403 = 793,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3404")]
		_3404 = 794,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3405")]
		_3405 = 795,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3406")]
		_3406 = 796,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3407")]
		_3407 = 797,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3408")]
		_3408 = 798,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3409")]
		_3409 = 799,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3410")]
		_3410 = 800,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3411")]
		_3411 = 801,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3412")]
		_3412 = 802,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3413")]
		_3413 = 803,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3414")]
		_3414 = 804,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3500")]
		_3500 = 805,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3600")]
		_3600 = 806,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3702")]
		_3702 = 807,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3703")]
		_3703 = 808,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3705")]
		_3705 = 809,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3706")]
		_3706 = 810,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3707")]
		_3707 = 811,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3708")]
		_3708 = 812,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3709")]
		_3709 = 813,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3710")]
		_3710 = 814,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3800")]
		_3800 = 815,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3801")]
		_3801 = 816,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3802")]
		_3802 = 817,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3803")]
		_3803 = 818,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3804")]
		_3804 = 819,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3805")]
		_3805 = 820,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3806")]
		_3806 = 821,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3807")]
		_3807 = 822,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3900")]
		_3900 = 823,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3901")]
		_3901 = 824,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3902")]
		_3902 = 825,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3903")]
		_3903 = 826,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3904")]
		_3904 = 827,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3905")]
		_3905 = 828,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3906")]
		_3906 = 829,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3907")]
		_3907 = 830,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3908")]
		_3908 = 831,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3910")]
		_3910 = 832,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3911")]
		_3911 = 833,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4000")]
		_4000 = 834,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4001")]
		_4001 = 835,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4002")]
		_4002 = 836,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4003")]
		_4003 = 837,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4004")]
		_4004 = 838,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4005")]
		_4005 = 839,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4006")]
		_4006 = 840,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4007")]
		_4007 = 841,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4008")]
		_4008 = 842,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4009")]
		_4009 = 843,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema10
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema100
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="256")]
		_256 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="512")]
		_512 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1024")]
		_1024 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2048")]
		_2048 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4096")]
		_4096 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8192")]
		_8192 = 14,
	}
	
	/// <summary>
	/// The possible states of Destiny Profile Records. IMPORTANT: Any given item can theoretically have many of these states simultaneously: as a result, this was altered to be a flags enumeration/bitmask for v3.2.0.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema101
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="256")]
		_256 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="512")]
		_512 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1024")]
		_1024 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2048")]
		_2048 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4096")]
		_4096 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8192")]
		_8192 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16384")]
		_16384 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32768")]
		_32768 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="65536")]
		_65536 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="131072")]
		_131072 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="262144")]
		_262144 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="524288")]
		_524288 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1048576")]
		_1048576 = 21,
	}
	
	/// <summary>
	/// If you look in the DestinyInventoryItemDefinition's "sockets" property, you'll see that there are two types of sockets: intrinsic, and "socketEntry."
	///Unfortunately, because Intrinsic sockets are a whole separate array, it is no longer sufficient to know the index into that array to know which socket we're talking about. You have to know whether it's in the default "socketEntries" or if it's in the "intrinsic" list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema102
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema103
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema104
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema105
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema106
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema107
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema108
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	/// <summary>
	/// The known entity types that you can have returned from Trending.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema109
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema11
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema110
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema111
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema112
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema113
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema114
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema115
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema116
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="256")]
		_256 = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema117
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema118
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema12
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema13
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema14
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema15
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema16
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema17
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema18
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema19
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
	}
	
	/// <summary>
	/// Represents the possible components that can be returned from Destiny "Get" calls such as GetProfile, GetCharacter, GetVendor etc...
	///When making one of these requests, you will pass one or more of these components as a comma separated list in the "?components=" querystring parameter. For instance, if you want baseline Profile data, Character Data, and character progressions, you would pass "?components=Profiles,Characters,CharacterProgressions" You may use either the numerical or string values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema2
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
		_100 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="101")]
		_101 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="102")]
		_102 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="103")]
		_103 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="104")]
		_104 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="105")]
		_105 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="200")]
		_200 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="201")]
		_201 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="202")]
		_202 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="203")]
		_203 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="204")]
		_204 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="205")]
		_205 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="206")]
		_206 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="300")]
		_300 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="301")]
		_301 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="302")]
		_302 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="303")]
		_303 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="304")]
		_304 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="305")]
		_305 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="306")]
		_306 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="307")]
		_307 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="308")]
		_308 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="309")]
		_309 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="310")]
		_310 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="400")]
		_400 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="401")]
		_401 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="402")]
		_402 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="500")]
		_500 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="600")]
		_600 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="700")]
		_700 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="800")]
		_800 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="900")]
		_900 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1000")]
		_1000 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1100")]
		_1100 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1200")]
		_1200 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1300")]
		_1300 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1400")]
		_1400 = 37,
	}
	
	/// <summary>
	/// Used for setting the guided game permission level override (admins and founders can always host guided games).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema20
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// The member levels used by all V2 Groups API. Individual group types use their own mappings in their native storage (general uses BnetDbGroupMemberType and D2 clans use ClanMemberLevel), but they are all translated to this in the runtime api. These runtime values should NEVER be stored anywhere, so the values can be changed as necessary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema21
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
	}
	
	/// <summary>
	/// Represents the different states a progression reward item can be in.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema22
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
	}
	
	/// <summary>
	/// There are many Progressions in Destiny (think Character Level, or Reputation). These are the various "Scopes" of Progressions, which affect many things: * Where/if they are stored * How they are calculated * Where they can be used in other game logic
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema23
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
	}
	
	/// <summary>
	/// If progression is earned, this determines whether the progression shows visual effects on the character or its item - or neither.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema24
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// As you run into items that need to be classified for Milestone purposes in ways that we cannot infer via direct data, add a new classification here and use a string constant to represent it in the local item config file.
	///NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema25
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="23")]
		_23 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 8,
	}
	
	/// <summary>
	/// An enumeration that indicates the high-level "type" of the item, attempting to iron out the context specific differences for specific instances of an entity. For instance, though a weapon may be of various weapon "Types", in DestinyItemType they are all classified as "Weapon". This allows for better filtering on a higher level of abstraction for the concept of types.
	/// This enum is provided for historical compatibility with Destiny 1, but an ideal alternative is to use DestinyItemCategoryDefinitions and the DestinyItemDefinition.itemCategories property instead. Item Categories allow for arbitrary hierarchies of specificity, and for items to belong to multiple categories across multiple hierarchies simultaneously. For this enum, we pick a single type as a "best guess" fit.
	/// NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.
	/// I keep updating these because they're so damn convenient. I guess I shouldn't fight it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema26
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="23")]
		_23 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 27,
	}
	
	/// <summary>
	/// This Enumeration further classifies items by more specific categorizations than DestinyItemType. The "Sub-Type" is where we classify and categorize items one step further in specificity: "Auto Rifle" instead of just "Weapon" for example, or "Vanguard Bounty" instead of merely "Bounty".
	///These sub-types are provided for historical compatibility with Destiny 1, but an ideal alternative is to use DestinyItemCategoryDefinitions and the DestinyItemDefinition.itemCategories property instead. Item Categories allow for arbitrary hierarchies of specificity, and for items to belong to multiple categories across multiple hierarchies simultaneously. For this enum, we pick a single type as a "best guess" fit.
	///NOTE: This is not all of the item types available, and some of these are holdovers from Destiny 1 that may or may not still exist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema27
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="23")]
		_23 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
		_31 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="33")]
		_33 = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema28
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	/// <summary>
	/// A plug can optionally have a "Breaker Type": a special ability that can affect units in unique ways. Activating this plug can grant one of these types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema29
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	/// <summary>
	/// If the enum value is > 100, it is a "special" group that cannot be queried for directly (special cases apply to when they are returned, and are not relevant in general cases)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema3
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="100")]
		_100 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="101")]
		_101 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="102")]
		_102 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="103")]
		_103 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="104")]
		_104 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema30
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema31
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	/// <summary>
	/// Indicates the type of actions that can be performed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema32
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// Represents the possible and known UI styles used by the game for rendering Socket Categories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema33
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema34
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema35
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema36
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema37
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	/// <summary>
	/// When a Stat (DestinyStatDefinition) is aggregated, this is the rules used for determining the level and formula used for aggregation.
	///* CharacterAverage = apply a weighted average using the related DestinyStatGroupDefinition on the DestinyInventoryItemDefinition across the character's equipped items. See both of those definitions for details. * Character = don't aggregate: the stat should be located and used directly on the character. * Item = don't aggregate: the stat should be located and used directly on the item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema38
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// At last, stats have categories. Use this for whatever purpose you might wish.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema39
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	/// <summary>
	/// For historical reasons, this list will have both D1 and D2-relevant Activity Modes in it. Please don't take this to mean that some D1-only feature is coming back!
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema4
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="17")]
		_17 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="19")]
		_19 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="21")]
		_21 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="22")]
		_22 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="24")]
		_24 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="25")]
		_25 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="26")]
		_26 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="27")]
		_27 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="28")]
		_28 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="29")]
		_29 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="30")]
		_30 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="31")]
		_31 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="37")]
		_37 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="38")]
		_38 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="39")]
		_39 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="40")]
		_40 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="41")]
		_41 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="42")]
		_42 = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="43")]
		_43 = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="44")]
		_44 = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="45")]
		_45 = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="46")]
		_46 = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="47")]
		_47 = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="48")]
		_48 = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="49")]
		_49 = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="50")]
		_50 = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="51")]
		_51 = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="52")]
		_52 = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="53")]
		_53 = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="54")]
		_54 = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="55")]
		_55 = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="56")]
		_56 = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="57")]
		_57 = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="58")]
		_58 = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="59")]
		_59 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="60")]
		_60 = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="61")]
		_61 = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="62")]
		_62 = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
		_63 = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="65")]
		_65 = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="66")]
		_66 = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="67")]
		_67 = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="68")]
		_68 = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="69")]
		_69 = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="70")]
		_70 = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="71")]
		_71 = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="72")]
		_72 = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="73")]
		_73 = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="74")]
		_74 = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="75")]
		_75 = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="76")]
		_76 = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="77")]
		_77 = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="78")]
		_78 = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="79")]
		_79 = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="80")]
		_80 = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="81")]
		_81 = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="82")]
		_82 = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="83")]
		_83 = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="84")]
		_84 = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="85")]
		_85 = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="86")]
		_86 = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="87")]
		_87 = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="88")]
		_88 = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="89")]
		_89 = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="90")]
		_90 = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="91")]
		_91 = 83,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema40
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema41
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema42
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// Describes the type of progression that a vendor has.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema43
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// Display categories can have custom sort orders. These are the possible options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema44
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	/// <summary>
	/// An enumeration of the known UI interactions for Vendors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema45
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
	}
	
	/// <summary>
	/// When a Vendor Interaction provides rewards, they'll either let you choose one or let you have all of them. This determines which it will be.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema46
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// This determines the type of reply that a Vendor will have during an Interaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema47
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// Determines how items are sorted in an inventory bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema48
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// The action that happens when the user attempts to refund an item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema49
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema5
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	/// <summary>
	/// This enumeration represents the most restrictive type of gating that is being performed by an entity. This is useful as a shortcut to avoid a lot of lookups when determining whether the gating on an Entity applies to everyone equally, or to their specific Profile or Character states.
	///None = There is no gating on this item.
	///Global = The gating on this item is based entirely on global game state. It will be gated the same for everyone.
	///Clan = The gating on this item is at the Clan level. For instance, if you're gated by Clan level this will be the case.
	///Profile = The gating includes Profile-specific checks, but not on the Profile's characters. An example of this might be when you acquire an Emblem: the Emblem will be available in your Kiosk for all characters in your Profile from that point onward.
	///Character = The gating includes Character-specific checks, including character level restrictions. An example of this might be an item that you can't purchase from a Vendor until you reach a specific Character Level.
	///Item = The gating includes item-specific checks. For BNet, this generally implies that we'll show this data only on a character level or deeper.
	///AssumedWorstCase = The unlocks and checks being used for this calculation are of an unknown type and are used for unknown purposes. For instance, if some great person decided that an unlock value should be globally scoped, but then the game changes it using character-specific data in a way that BNet doesn't know about. Because of the open-ended potential for this to occur, many unlock checks for "globally" scoped unlock data may be assumed as the worst case unless it has been specifically whitelisted as otherwise. That sucks, but them's the breaks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema50
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
	}
	
	/// <summary>
	/// The various known UI styles in which an item can be highlighted. It'll be up to you to determine what you want to show based on this highlighting, BNet doesn't have any assets that correspond to these states. And yeah, RiseOfIron and Comet have their own special highlight states. Don't ask me, I can't imagine they're still used.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema51
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	/// <summary>
	/// If you're showing an unlock value in the UI, this is the format in which it should be shown. You'll have to build your own algorithms on the client side to determine how best to render these options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema52
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 14,
	}
	
	/// <summary>
	/// If the objective has a known UI label, this enumeration will represent it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema53
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
	}
	
	/// <summary>
	/// Some Objectives provide perks, generally as part of providing some kind of interesting modifier for a Challenge or Quest. This indicates when the Perk is granted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema54
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema55
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="256")]
		_256 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="512")]
		_512 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1024")]
		_1024 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2048")]
		_2048 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4096")]
		_4096 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8191")]
		_8191 = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema56
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
		_63 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema57
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="255")]
		_255 = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema58
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="63")]
		_63 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema59
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema6
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema60
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="15")]
		_15 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 16,
	}
	
	/// <summary>
	/// Activity Modes are grouped into a few possible broad categories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema61
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	/// <summary>
	/// Represents a potential state of an Activity Graph node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema62
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	/// <summary>
	/// BNet's custom categorization of reward sources. We took a look at the existing ways that items could be spawned, and tried to make high-level categorizations of them. This needs to be re-evaluated for Destiny 2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema63
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema64
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
	}
	
	/// <summary>
	/// There's a lot of places where we need to know scope on more than just a profile or character level. For everything else, there's this more generic sense of scope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema65
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	/// <summary>
	/// A hint for how the presentation node should be displayed when shown in a list. How you use this is your UI is up to you.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema66
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
	}
	
	/// <summary>
	/// A hint for what screen should be shown when this presentation node is clicked into. How you use this is your UI is up to you.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema67
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema68
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema69
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
	}
	
	/// <summary>
	/// The types of membership the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.MembershipType.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema7
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="254")]
		_254 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-1")]
		_Minus1 = 9,
	}
	
	/// <summary>
	/// If the plug has a specific custom style, this enumeration will represent that style/those styles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema70
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	/// <summary>
	/// This enum determines whether the plug is available to be inserted.
	///- Normal means that all existing rules for plug insertion apply.
	///- UnavailableIfSocketContainsMatchingPlugCategory means that the plug is only available if the socket does NOT match the plug category.
	///- AvailableIfSocketContainsMatchingPlugCategory means that the plug is only available if the socket DOES match the plug category.
	///For category matching, use the plug's "plugCategoryIdentifier" property, comparing it to
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema71
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// Represents the socket energy types for Armor 2.0, Ghosts 2.0, and Stasis subclasses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema72
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
	}
	
	/// <summary>
	/// Indicates how a socket is populated, and where you should look for valid plug data.
	/// This is a flags enumeration/bitmask field, as you may have to look in multiple sources across multiple components for valid plugs.
	/// For instance, a socket could have plugs that are sourced from its own definition, as well as plugs that are sourced from Character-scoped AND profile-scoped Plug Sets. Only by combining plug data for every indicated source will you be able to know all of the plugs available for a socket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema73
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
	}
	
	/// <summary>
	/// Indicates how a perk should be shown, or if it should be, in the game UI. Maybe useful for those of you trying to filter out internal-use-only perks (or for those of you trying to figure out what they do!)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema74
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// Represents the different kinds of acquisition behavior for progression reward items.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema75
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema76
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema77
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema78
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema79
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema8
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema80
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema81
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema82
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema83
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	/// <summary>
	/// Whether you can transfer an item, and why not if you can't.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema84
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
	}
	
	/// <summary>
	/// A flags enumeration/bitmask where each bit represents a different possible state that the item can be in that may effect how the item is displayed to the user and what actions can be performed against it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema85
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
	}
	
	/// <summary>
	/// A set of flags for reason(s) why the component populated in the way that it did. Inspect the individual flags for the reasons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema86
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// A flags enumeration/bitmask indicating the versions of the game that a given user has purchased.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema87
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="256")]
		_256 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="512")]
		_512 = 10,
	}
	
	/// <summary>
	/// I know this doesn't look like a Flags Enumeration/bitmask right now, but I assure you it is. This is the possible states that a Presentation Node can be in, and it is almost certain that its potential states will increase in the future. So don't treat it like a straight up enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema88
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// A Flags enumeration/bitmask where each bit represents a possible state that a Record/Triumph can be in.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema89
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
	}
	
	/// <summary>
	/// The types of credentials the Accounts system supports. This is the external facing enum used in place of the internal-only Bungie.SharedDefinitions.CredentialType.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema9
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="14")]
		_14 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="18")]
		_18 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="20")]
		_20 = 13,
	}
	
	/// <summary>
	/// A Flags Enumeration/bitmask where each bit represents a different state that the Collectible can be in. A collectible can be in any number of these states, and you can choose to use or ignore any or all of them when making your own UI that shows Collectible info. Our displays are going to honor them, but we're also the kind of people who only pretend to inhale before quickly passing it to the left. So, you know, do what you got to do.
	///(All joking aside, please note the caveat I mention around the Invisible flag: there are cases where it is in the best interest of your users to honor these flags even if you're a "show all the data" person. Collector-oriented compulsion is a very unfortunate and real thing, and I would hate to instill that compulsion in others through showing them items that they cannot earn. Please consider this when you are making your own apps/sites.)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema90
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
	}
	
	/// <summary>
	/// A flags enumeration that represents a Fireteam Member's status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema91
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
	}
	
	/// <summary>
	/// A player can choose to restrict requests to join their Fireteam to specific states. These are the possible states a user can choose.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema92
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
	}
	
	/// <summary>
	/// A Flags enumeration representing the reasons why a person can't join this user's fireteam.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema93
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32768")]
		_32768 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema94
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
	}
	
	/// <summary>
	/// A hint for the UI as to what display information ought to be shown. Defaults to showing the static MilestoneDefinition's display properties.
	/// If for some reason the indicated property is not populated, fall back to the MilestoneDefinition.displayProperties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema95
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
	}
	
	/// <summary>
	/// The type of milestone. Milestones can be Tutorials, one-time/triggered/non-repeating but not necessarily tutorials, or Repeating Milestones.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema96
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
	}
	
	/// <summary>
	/// An enumeration representing the potential difficulty levels of an activity. Their names are... more qualitative than quantitative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema97
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
	}
	
	/// <summary>
	/// The reasons why an item cannot be equipped, if any. Many flags can be set, or "None" if
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema98
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="16")]
		_16 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="32")]
		_32 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="64")]
		_64 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="128")]
		_128 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Schema99
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="0")]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="5")]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="6")]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="7")]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="8")]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="9")]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="11")]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="12")]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="13")]
		_13 = 13,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get API usage by application for time frame specified. You can go as far back as 30 days ago, and can ask for up to a 48 hour window of time in a single request. You must be authenticated with at least the ReadUserData permission to access this endpoint.
		/// AppApiUsage_applicationIdGetByEndAndStart App/ApiUsage/{applicationId}/
		/// </summary>
		/// <param name="applicationId">ID of the application to get usage statistics.</param>
		/// <param name="end">End time for query. Goes to now if not specified.</param>
		/// <param name="start">Start time for query. Goes to 24 hours ago if not specified.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task AppApiUsage_applicationIdGetByEndAndStartAsync(int applicationId, System.DateTimeOffset end, System.DateTimeOffset start, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "App/ApiUsage/"+applicationId+"/?end=" + end.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&start=" + start.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of applications created by Bungie.
		/// AppFirstPartyGet App/FirstParty/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task AppFirstPartyGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "App/FirstParty/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns community content.
		/// CommunityContentGet_sort_mediaFilter_pageGet CommunityContent/Get/{sort}/{mediaFilter}/{page}/
		/// </summary>
		/// <param name="mediaFilter">The type of media to get</param>
		/// <param name="page">Zero based page</param>
		/// <param name="sort">The sort mode.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task CommunityContentGet_sort_mediaFilter_pageGetAsync(int mediaFilter, int page, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CommunityContent/Get/"+ (sort==null? "" : System.Uri.EscapeDataString(sort))+"/"+mediaFilter+"/"+page+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a content item referenced by id
		/// ContentGetContentById_id_localeGetByHead Content/GetContentById/{id}/{locale}/
		/// </summary>
		/// <param name="head">false</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ContentGetContentById_id_localeGetByHeadAsync(bool head, long id, string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Content/GetContentById/"+id+"/"+ (locale==null? "" : System.Uri.EscapeDataString(locale))+"/?head="+head;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the newest item that matches a given tag and Content Type.
		/// ContentGetContentByTagAndType_tag_type_localeGetByHead Content/GetContentByTagAndType/{tag}/{type}/{locale}/
		/// </summary>
		/// <param name="head">Not used.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ContentGetContentByTagAndType_tag_type_localeGetByHeadAsync(bool head, string locale, string tag, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Content/GetContentByTagAndType/"+ (tag==null? "" : System.Uri.EscapeDataString(tag))+"/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (locale==null? "" : System.Uri.EscapeDataString(locale))+"/?head="+head;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an object describing a particular variant of content.
		/// ContentGetContentType_typeGet Content/GetContentType/{type}/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ContentGetContentType_typeGetAsync(string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Content/GetContentType/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a JSON string response that is the RSS feed for news articles.
		/// ContentRssNewsArticles_pageTokenGetByCategoryfilterAndIncludebody Content/Rss/NewsArticles/{pageToken}/
		/// </summary>
		/// <param name="categoryfilter">Optionally filter response to only include news items in a certain category.</param>
		/// <param name="includebody">Optionally include full content body for each news item.</param>
		/// <param name="pageToken">Zero-based pagination token for paging through result sets.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ContentRssNewsArticles_pageTokenGetByCategoryfilterAndIncludebodyAsync(string categoryfilter, bool includebody, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Content/Rss/NewsArticles/"+ (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"/?categoryfilter=" + (categoryfilter==null? "" : System.Uri.EscapeDataString(categoryfilter))+"&includebody="+includebody;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
		/// ContentSearch_localeGetByCtypeAndCurrentpageAndHeadAndSearchtextAndSourceAndTag Content/Search/{locale}/
		/// </summary>
		/// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space.</param>
		/// <param name="currentpage">Page number for the search results, starting with page 1.</param>
		/// <param name="head">Not used.</param>
		/// <param name="searchtext">Word or phrase for the search.</param>
		/// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional.</param>
		/// <param name="tag">Tag used on the content to be searched.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ContentSearch_localeGetByCtypeAndCurrentpageAndHeadAndSearchtextAndSourceAndTagAsync(string ctype, int currentpage, bool head, string locale, string searchtext, string source, string tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Content/Search/"+ (locale==null? "" : System.Uri.EscapeDataString(locale))+"/?ctype=" + (ctype==null? "" : System.Uri.EscapeDataString(ctype))+"&currentpage="+currentpage+"&head="+head+"&searchtext=" + (searchtext==null? "" : System.Uri.EscapeDataString(searchtext))+"&source=" + (source==null? "" : System.Uri.EscapeDataString(source))+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches for Content Items that match the given Tag and Content Type.
		/// ContentSearchContentByTagAndType_tag_type_localeGetByCurrentpageAndHeadAndItemsperpage Content/SearchContentByTagAndType/{tag}/{type}/{locale}/
		/// </summary>
		/// <param name="currentpage">Page number for the search results starting with page 1.</param>
		/// <param name="head">Not used.</param>
		/// <param name="itemsperpage">Not used.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ContentSearchContentByTagAndType_tag_type_localeGetByCurrentpageAndHeadAndItemsperpageAsync(int currentpage, bool head, int itemsperpage, string locale, string tag, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Content/SearchContentByTagAndType/"+ (tag==null? "" : System.Uri.EscapeDataString(tag))+"/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (locale==null? "" : System.Uri.EscapeDataString(locale))+"/?currentpage="+currentpage+"&head="+head+"&itemsperpage="+itemsperpage;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for Help Articles.
		/// ContentSearchHelpArticles_searchtext_sizeGet Content/SearchHelpArticles/{searchtext}/{size}/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ContentSearchHelpArticles_searchtext_sizeGetAsync(string searchtext, string size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Content/SearchHelpArticles/"+ (searchtext==null? "" : System.Uri.EscapeDataString(searchtext))+"/"+ (size==null? "" : System.Uri.EscapeDataString(size))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
		/// Destiny2ActionsItemsEquipItemPost Destiny2/Actions/Items/EquipItem/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2ActionsItemsEquipItemPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Actions/Items/EquipItem/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
		/// Destiny2ActionsItemsEquipItemsPost Destiny2/Actions/Items/EquipItems/
		/// </summary>
		/// <returns>The results of a bulk Equipping operation performed through the Destiny API.</returns>
		public async Task Destiny2ActionsItemsEquipItemsPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Actions/Items/EquipItems/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for 'InsertPlugs' from the account owner.
		/// Destiny2ActionsItemsInsertSocketPlugPost Destiny2/Actions/Items/InsertSocketPlug/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2ActionsItemsInsertSocketPlugPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Actions/Items/InsertSocketPlug/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Insert a 'free' plug into an item's socket. This does not require 'Advanced Write Action' authorization and is available to 3rd-party apps, but will only work on 'free and reversible' socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
		/// Destiny2ActionsItemsInsertSocketPlugFreePost Destiny2/Actions/Items/InsertSocketPlugFree/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2ActionsItemsInsertSocketPlugFreePostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Actions/Items/InsertSocketPlugFree/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item.
		/// Destiny2ActionsItemsPullFromPostmasterPost Destiny2/Actions/Items/PullFromPostmaster/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2ActionsItemsPullFromPostmasterPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Actions/Items/PullFromPostmaster/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the Lock State for an instanced item. You must have a valid Destiny Account.
		/// Destiny2ActionsItemsSetLockStatePost Destiny2/Actions/Items/SetLockState/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2ActionsItemsSetLockStatePostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Actions/Items/SetLockState/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it's an item.
		/// Destiny2ActionsItemsSetTrackedStatePost Destiny2/Actions/Items/SetTrackedState/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2ActionsItemsSetTrackedStatePostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Actions/Items/SetTrackedState/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item. itshappening.gif
		/// Destiny2ActionsItemsTransferItemPost Destiny2/Actions/Items/TransferItem/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2ActionsItemsTransferItemPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Actions/Items/TransferItem/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clear the identifiers and items of a loadout.
		/// Destiny2ActionsLoadoutsClearLoadoutPost Destiny2/Actions/Loadouts/ClearLoadout/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2ActionsLoadoutsClearLoadoutPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Actions/Loadouts/ClearLoadout/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
		/// Destiny2ActionsLoadoutsEquipLoadoutPost Destiny2/Actions/Loadouts/EquipLoadout/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2ActionsLoadoutsEquipLoadoutPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Actions/Loadouts/EquipLoadout/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Snapshot a loadout with the currently equipped items.
		/// Destiny2ActionsLoadoutsSnapshotLoadoutPost Destiny2/Actions/Loadouts/SnapshotLoadout/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2ActionsLoadoutsSnapshotLoadoutPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Actions/Loadouts/SnapshotLoadout/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the color, icon, and name of a loadout.
		/// Destiny2ActionsLoadoutsUpdateLoadoutIdentifiersPost Destiny2/Actions/Loadouts/UpdateLoadoutIdentifiers/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2ActionsLoadoutsUpdateLoadoutIdentifiersPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Actions/Loadouts/UpdateLoadoutIdentifiers/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a page list of Destiny items.
		/// Destiny2ArmorySearch_type_searchTermGetByPage Destiny2/Armory/Search/{type}/{searchTerm}/
		/// </summary>
		/// <param name="page">Page number to return, starting with 0.</param>
		/// <param name="searchTerm">The string to use when searching for Destiny entities.</param>
		/// <param name="type">The type of entity for whom you would like results. These correspond to the entity's definition contract name. For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'.</param>
		/// <returns>The results of a search for Destiny content. This will be improved on over time, I've been doing some experimenting to see what might be useful.</returns>
		public async Task Destiny2ArmorySearch_type_searchTermGetByPageAsync(int page, string searchTerm, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Armory/Search/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"/"+ (searchTerm==null? "" : System.Uri.EscapeDataString(searchTerm))+"/?page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
		/// Destiny2AwaAwaProvideAuthorizationResultPost Destiny2/Awa/AwaProvideAuthorizationResult/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2AwaAwaProvideAuthorizationResultPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Awa/AwaProvideAuthorizationResult/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the action token if user approves the request.
		/// Destiny2AwaGetActionToken_correlationIdGet Destiny2/Awa/GetActionToken/{correlationId}/
		/// </summary>
		/// <param name="correlationId">The identifier for the advanced write action request.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2AwaGetActionToken_correlationIdGetAsync(string correlationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Awa/GetActionToken/"+ (correlationId==null? "" : System.Uri.EscapeDataString(correlationId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initialize a request to perform an advanced write action.
		/// Destiny2AwaInitializePost Destiny2/Awa/Initialize/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2AwaInitializePostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Awa/Initialize/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the dictionary of values for the Clan Banner
		/// Destiny2ClanClanBannerDictionaryGet Destiny2/Clan/ClanBannerDictionary/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2ClanClanBannerDictionaryGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Clan/ClanBannerDictionary/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
		/// Destiny2Clan_groupIdWeeklyRewardStateGet Destiny2/Clan/{groupId}/WeeklyRewardState/
		/// </summary>
		/// <param name="groupId">A valid group id of clan.</param>
		/// <returns>Represents a runtime instance of a user's milestone status. Live Milestone data should be combined with DestinyMilestoneDefinition data to show the user a picture of what is available for them to do in the game, and their status in regards to said "things to do." Consider it a big, wonky to-do list, or Advisors 3.0 for those who remember the Destiny 1 API.</returns>
		public async Task Destiny2Clan_groupIdWeeklyRewardStateGetAsync(long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Clan/"+groupId+"/WeeklyRewardState/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the current version of the manifest as a json object.
		/// Destiny2ManifestGet Destiny2/Manifest/
		/// </summary>
		/// <returns>DestinyManifest is the external-facing contract for just the properties needed by those calling the Destiny Platform.</returns>
		public async Task Destiny2ManifestGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Manifest/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don't use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
		/// Destiny2Manifest_entityType_hashIdentifierGet Destiny2/Manifest/{entityType}/{hashIdentifier}/
		/// </summary>
		/// <param name="entityType">The type of entity for whom you would like results. These correspond to the entity's definition contract name. For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation.</param>
		/// <param name="hashIdentifier">The hash identifier for the specific Entity you want returned.</param>
		/// <returns>Provides common properties for destiny definitions.</returns>
		public async Task Destiny2Manifest_entityType_hashIdentifierGetAsync(string entityType, uint hashIdentifier, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Manifest/"+ (entityType==null? "" : System.Uri.EscapeDataString(entityType))+"/"+hashIdentifier+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets public information about currently available Milestones.
		/// Destiny2MilestonesGet Destiny2/Milestones/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2MilestonesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Milestones/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets custom localized content for the milestone of the given hash, if it exists.
		/// Destiny2Milestones_milestoneHashContentGet Destiny2/Milestones/{milestoneHash}/Content/
		/// </summary>
		/// <param name="milestoneHash">The identifier for the milestone to be returned.</param>
		/// <returns>Represents localized, extended content related to Milestones. This is intentionally returned by a separate endpoint and not with Character-level Milestone data because we do not put localized data into standard Destiny responses, both for brevity of response and for caching purposes. If you really need this data, hit the Milestone Content endpoint.</returns>
		public async Task Destiny2Milestones_milestoneHashContentGetAsync(uint milestoneHash, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Milestones/"+milestoneHash+"/Content/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
		/// Destiny2SearchDestinyPlayerByBungieName_membershipTypePost Destiny2/SearchDestinyPlayerByBungieName/{membershipType}/
		/// </summary>
		/// <param name="membershipType">A valid non-BungieNet membership type, or All. Indicates which memberships to return. You probably want this set to All.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2SearchDestinyPlayerByBungieName_membershipTypePostAsync(int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/SearchDestinyPlayerByBungieName/"+membershipType+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
		/// Destiny2StatsAggregateClanStats_groupIdGetByModes Destiny2/Stats/AggregateClanStats/{groupId}/
		/// </summary>
		/// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
		/// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2StatsAggregateClanStats_groupIdGetByModesAsync(long groupId, string modes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Stats/AggregateClanStats/"+groupId+"/?modes=" + (modes==null? "" : System.Uri.EscapeDataString(modes));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets historical stats definitions.
		/// Destiny2StatsDefinitionGet Destiny2/Stats/Definition/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2StatsDefinitionGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Stats/Definition/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
		/// Destiny2StatsLeaderboardsClans_groupIdGetByMaxtopAndModesAndStatid Destiny2/Stats/Leaderboards/Clans/{groupId}/
		/// </summary>
		/// <param name="groupId">Group ID of the clan whose leaderboards you wish to fetch.</param>
		/// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard.</param>
		/// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.</param>
		/// <param name="statid">ID of stat to return rather than returning all Leaderboard stats.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2StatsLeaderboardsClans_groupIdGetByMaxtopAndModesAndStatidAsync(long groupId, int maxtop, string modes, string statid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Stats/Leaderboards/Clans/"+groupId+"/?maxtop="+maxtop+"&modes=" + (modes==null? "" : System.Uri.EscapeDataString(modes))+"&statid=" + (statid==null? "" : System.Uri.EscapeDataString(statid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
		/// Destiny2StatsLeaderboards_membershipType_destinyMembershipId_characterIdGetByMaxtopAndModesAndStatid Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/
		/// </summary>
		/// <param name="characterId">The specific character to build the leaderboard around for the provided Destiny Membership.</param>
		/// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
		/// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard.</param>
		/// <param name="membershipType">A valid non-BungieNet membership type.</param>
		/// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.</param>
		/// <param name="statid">ID of stat to return rather than returning all Leaderboard stats.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2StatsLeaderboards_membershipType_destinyMembershipId_characterIdGetByMaxtopAndModesAndStatidAsync(long characterId, long destinyMembershipId, int maxtop, int membershipType, string modes, string statid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Stats/Leaderboards/"+membershipType+"/"+destinyMembershipId+"/"+characterId+"/?maxtop="+maxtop+"&modes=" + (modes==null? "" : System.Uri.EscapeDataString(modes))+"&statid=" + (statid==null? "" : System.Uri.EscapeDataString(statid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the available post game carnage report for the activity ID.
		/// Destiny2StatsPostGameCarnageReport_activityIdGet Destiny2/Stats/PostGameCarnageReport/{activityId}/
		/// </summary>
		/// <param name="activityId">The ID of the activity whose PGCR is requested.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2StatsPostGameCarnageReport_activityIdGetAsync(long activityId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Stats/PostGameCarnageReport/"+activityId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
		/// Destiny2StatsPostGameCarnageReport_activityIdReportPost Destiny2/Stats/PostGameCarnageReport/{activityId}/Report/
		/// </summary>
		/// <param name="activityId">The ID of the activity where you ran into the brigand that you're reporting.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2StatsPostGameCarnageReport_activityIdReportPostAsync(long activityId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Stats/PostGameCarnageReport/"+activityId+"/Report/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor's available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: 'It's a long story...'
		/// Destiny2VendorsGetByComponents Destiny2/Vendors/
		/// </summary>
		/// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.</param>
		/// <returns>A response containing all valid components for the public Vendors endpoint.
		/// It is a decisively smaller subset of data compared to what we can get when we know the specific user making the request.
		/// If you want any of the other data - item details, whether or not you can buy it, etc... you'll have to call in the context of a character. I know, sad but true.</returns>
		public async Task Destiny2VendorsGetByComponentsAsync(int[] components, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/Vendors/?"+string.Join("&", components.Select(z => $"components={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets historical stats for indicated character.
		/// Destiny2_membershipTypeAccount_destinyMembershipIdCharacter_characterIdStatsGetByDayendAndDaystartAndGroupsAndModesAndPeriodType Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/
		/// </summary>
		/// <param name="characterId">The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters.</param>
		/// <param name="dayend">Last day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request.</param>
		/// <param name="daystart">First day to return when daily stats are requested. Use the format YYYY-MM-DD. Currently, we cannot allow more than 31 days of daily data to be requested in a single request.</param>
		/// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
		/// <param name="groups">Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals</param>
		/// <param name="membershipType">A valid non-BungieNet membership type.</param>
		/// <param name="modes">Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.</param>
		/// <param name="periodType">Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2_membershipTypeAccount_destinyMembershipIdCharacter_characterIdStatsGetByDayendAndDaystartAndGroupsAndModesAndPeriodTypeAsync(long characterId, System.DateTimeOffset dayend, System.DateTimeOffset daystart, long destinyMembershipId, int[] groups, int membershipType, int[] modes, int periodType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/"+membershipType+"/Account/"+destinyMembershipId+"/Character/"+characterId+"/Stats/?dayend=" + dayend.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&daystart=" + daystart.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", groups.Select(z => $"groups={z}"))+"&"+string.Join("&", modes.Select(z => $"modes={z}"))+"&periodType="+periodType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets activity history stats for indicated character.
		/// Destiny2_membershipTypeAccount_destinyMembershipIdCharacter_characterIdStatsActivitiesGetByCountAndModeAndPage Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/
		/// </summary>
		/// <param name="characterId">The id of the character to retrieve.</param>
		/// <param name="count">Number of rows to return</param>
		/// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
		/// <param name="membershipType">A valid non-BungieNet membership type.</param>
		/// <param name="mode">A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation.</param>
		/// <param name="page">Page number to return, starting with 0.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2_membershipTypeAccount_destinyMembershipIdCharacter_characterIdStatsActivitiesGetByCountAndModeAndPageAsync(long characterId, int count, long destinyMembershipId, int membershipType, int mode, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/"+membershipType+"/Account/"+destinyMembershipId+"/Character/"+characterId+"/Stats/Activities/?count="+count+"&mode="+mode+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets all activities the character has participated in together with aggregate statistics for those activities.
		/// Destiny2_membershipTypeAccount_destinyMembershipIdCharacter_characterIdStatsAggregateActivityStatsGet Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/
		/// </summary>
		/// <param name="characterId">The specific character whose activities should be returned.</param>
		/// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
		/// <param name="membershipType">A valid non-BungieNet membership type.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2_membershipTypeAccount_destinyMembershipIdCharacter_characterIdStatsAggregateActivityStatsGetAsync(long characterId, long destinyMembershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/"+membershipType+"/Account/"+destinyMembershipId+"/Character/"+characterId+"/Stats/AggregateActivityStats/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets details about unique weapon usage, including all exotic weapons.
		/// Destiny2_membershipTypeAccount_destinyMembershipIdCharacter_characterIdStatsUniqueWeaponsGet Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/
		/// </summary>
		/// <param name="characterId">The id of the character to retrieve.</param>
		/// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
		/// <param name="membershipType">A valid non-BungieNet membership type.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2_membershipTypeAccount_destinyMembershipIdCharacter_characterIdStatsUniqueWeaponsGetAsync(long characterId, long destinyMembershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/"+membershipType+"/Account/"+destinyMembershipId+"/Character/"+characterId+"/Stats/UniqueWeapons/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets aggregate historical stats organized around each character for a given account.
		/// Destiny2_membershipTypeAccount_destinyMembershipIdStatsGetByGroups Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/
		/// </summary>
		/// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
		/// <param name="groups">Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals.</param>
		/// <param name="membershipType">A valid non-BungieNet membership type.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2_membershipTypeAccount_destinyMembershipIdStatsGetByGroupsAsync(long destinyMembershipId, int[] groups, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/"+membershipType+"/Account/"+destinyMembershipId+"/Stats/?"+string.Join("&", groups.Select(z => $"groups={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
		/// Destiny2_membershipTypeAccount_destinyMembershipIdStatsLeaderboardsGetByMaxtopAndModesAndStatid Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/
		/// </summary>
		/// <param name="destinyMembershipId">The Destiny membershipId of the user to retrieve.</param>
		/// <param name="maxtop">Maximum number of top players to return. Use a large number to get entire leaderboard.</param>
		/// <param name="membershipType">A valid non-BungieNet membership type.</param>
		/// <param name="modes">List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.</param>
		/// <param name="statid">ID of stat to return rather than returning all Leaderboard stats.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task Destiny2_membershipTypeAccount_destinyMembershipIdStatsLeaderboardsGetByMaxtopAndModesAndStatidAsync(long destinyMembershipId, int maxtop, int membershipType, string modes, string statid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/"+membershipType+"/Account/"+destinyMembershipId+"/Stats/Leaderboards/?maxtop="+maxtop+"&modes=" + (modes==null? "" : System.Uri.EscapeDataString(modes))+"&statid=" + (statid==null? "" : System.Uri.EscapeDataString(statid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Destiny Profile information for the supplied membership.
		/// Destiny2_membershipTypeProfile_destinyMembershipIdGetByComponents Destiny2/{membershipType}/Profile/{destinyMembershipId}/
		/// </summary>
		/// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.</param>
		/// <param name="destinyMembershipId">Destiny membership ID.</param>
		/// <param name="membershipType">A valid non-BungieNet membership type.</param>
		/// <returns>The response for GetDestinyProfile, with components for character and item-level data.</returns>
		public async Task Destiny2_membershipTypeProfile_destinyMembershipIdGetByComponentsAsync(int[] components, long destinyMembershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/"+membershipType+"/Profile/"+destinyMembershipId+"/?"+string.Join("&", components.Select(z => $"components={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns character information for the supplied character.
		/// Destiny2_membershipTypeProfile_destinyMembershipIdCharacter_characterIdGetByComponents Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/
		/// </summary>
		/// <param name="characterId">ID of the character.</param>
		/// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.</param>
		/// <param name="destinyMembershipId">Destiny membership ID.</param>
		/// <param name="membershipType">A valid non-BungieNet membership type.</param>
		/// <returns>The response contract for GetDestinyCharacter, with components that can be returned for character and item-level data.</returns>
		public async Task Destiny2_membershipTypeProfile_destinyMembershipIdCharacter_characterIdGetByComponentsAsync(long characterId, int[] components, long destinyMembershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/"+membershipType+"/Profile/"+destinyMembershipId+"/Character/"+characterId+"/?"+string.Join("&", components.Select(z => $"components={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
		/// Destiny2_membershipTypeProfile_destinyMembershipIdCharacter_characterIdCollectibles_collectiblePresentationNodeHashGetByComponents Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Collectibles/{collectiblePresentationNodeHash}/
		/// </summary>
		/// <param name="characterId">The Destiny Character ID of the character for whom we're getting collectible detail info.</param>
		/// <param name="collectiblePresentationNodeHash">The hash identifier of the Presentation Node for whom we should return collectible details. Details will only be returned for collectibles that are direct descendants of this node.</param>
		/// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.</param>
		/// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
		/// <param name="membershipType">A valid non-BungieNet membership type.</param>
		/// <returns>Returns the detailed information about a Collectible Presentation Node and any Collectibles that are direct descendants.</returns>
		public async Task Destiny2_membershipTypeProfile_destinyMembershipIdCharacter_characterIdCollectibles_collectiblePresentationNodeHashGetByComponentsAsync(long characterId, uint collectiblePresentationNodeHash, int[] components, long destinyMembershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/"+membershipType+"/Profile/"+destinyMembershipId+"/Character/"+characterId+"/Collectibles/"+collectiblePresentationNodeHash+"/?"+string.Join("&", components.Select(z => $"components={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
		/// Destiny2_membershipTypeProfile_destinyMembershipIdCharacter_characterIdVendorsGetByComponentsAndFilter Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/
		/// </summary>
		/// <param name="characterId">The Destiny Character ID of the character for whom we're getting vendor info.</param>
		/// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.</param>
		/// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
		/// <param name="filter">The filter of what vendors and items to return, if any.</param>
		/// <param name="membershipType">A valid non-BungieNet membership type.</param>
		/// <returns>A response containing all of the components for all requested vendors.</returns>
		public async Task Destiny2_membershipTypeProfile_destinyMembershipIdCharacter_characterIdVendorsGetByComponentsAndFilterAsync(long characterId, int[] components, long destinyMembershipId, int filter, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/"+membershipType+"/Profile/"+destinyMembershipId+"/Character/"+characterId+"/Vendors/?"+string.Join("&", components.Select(z => $"components={z}"))+"&filter="+filter;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the details of a specific Vendor.
		/// Destiny2_membershipTypeProfile_destinyMembershipIdCharacter_characterIdVendors_vendorHashGetByComponents Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/
		/// </summary>
		/// <param name="characterId">The Destiny Character ID of the character for whom we're getting vendor info.</param>
		/// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.</param>
		/// <param name="destinyMembershipId">Destiny membership ID of another user. You may be denied.</param>
		/// <param name="membershipType">A valid non-BungieNet membership type.</param>
		/// <param name="vendorHash">The Hash identifier of the Vendor to be returned.</param>
		/// <returns>A response containing all of the components for a vendor.</returns>
		public async Task Destiny2_membershipTypeProfile_destinyMembershipIdCharacter_characterIdVendors_vendorHashGetByComponentsAsync(long characterId, int[] components, long destinyMembershipId, int membershipType, uint vendorHash, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/"+membershipType+"/Profile/"+destinyMembershipId+"/Character/"+characterId+"/Vendors/"+vendorHash+"/?"+string.Join("&", components.Select(z => $"components={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
		/// Destiny2_membershipTypeProfile_destinyMembershipIdItem_itemInstanceIdGetByComponents Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/
		/// </summary>
		/// <param name="components">A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.</param>
		/// <param name="destinyMembershipId">The membership ID of the destiny profile.</param>
		/// <param name="itemInstanceId">The Instance ID of the destiny item.</param>
		/// <param name="membershipType">A valid non-BungieNet membership type.</param>
		/// <returns>The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn't have an "itemInstanceId": for those, get your information from the DestinyInventoryDefinition.</returns>
		public async Task Destiny2_membershipTypeProfile_destinyMembershipIdItem_itemInstanceIdGetByComponentsAsync(int[] components, long destinyMembershipId, long itemInstanceId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/"+membershipType+"/Profile/"+destinyMembershipId+"/Item/"+itemInstanceId+"/?"+string.Join("&", components.Select(z => $"components={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
		/// Destiny2_membershipTypeProfile_membershipIdLinkedProfilesGetByGetAllMemberships Destiny2/{membershipType}/Profile/{membershipId}/LinkedProfiles/
		/// </summary>
		/// <param name="getAllMemberships">(optional) if set to 'true', all memberships regardless of whether they're obscured by overrides will be returned. Normal privacy restrictions on account linking will still apply no matter what.</param>
		/// <param name="membershipId">The ID of the membership whose linked Destiny accounts you want returned. Make sure your membership ID matches its Membership Type: don't pass us a PSN membership ID and the XBox membership type, it's not going to work!</param>
		/// <param name="membershipType">The type for the membership whose linked Destiny accounts you want returned.</param>
		/// <returns>I know what you seek. You seek linked accounts. Found them, you have.
		///This contract returns a minimal amount of data about Destiny Accounts that are linked through your Bungie.Net account. We will not return accounts in this response whose</returns>
		public async Task Destiny2_membershipTypeProfile_membershipIdLinkedProfilesGetByGetAllMembershipsAsync(bool getAllMemberships, long membershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Destiny2/"+membershipType+"/Profile/"+membershipId+"/LinkedProfiles/?getAllMemberships="+getAllMemberships;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
		/// FireteamClan_groupIdActiveCountGet Fireteam/Clan/{groupId}/ActiveCount/
		/// </summary>
		/// <param name="groupId">The group id of the clan.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task FireteamClan_groupIdActiveCountGetAsync(long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Fireteam/Clan/"+groupId+"/ActiveCount/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a listing of all of this clan's fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
		/// FireteamClan_groupIdAvailable_platform_activityType_dateRange_slotFilter_publicOnly_pageGetByExcludeImmediateAndLangFilter Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/
		/// </summary>
		/// <param name="activityType">The activity type to filter by.</param>
		/// <param name="dateRange">The date range to grab available fireteams.</param>
		/// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum.</param>
		/// <param name="groupId">The group id of the clan.</param>
		/// <param name="langFilter">An optional language filter.</param>
		/// <param name="page">Zero based page</param>
		/// <param name="platform">The platform filter.</param>
		/// <param name="publicOnly">Determines public/private filtering.</param>
		/// <param name="slotFilter">Filters based on available slots</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task FireteamClan_groupIdAvailable_platform_activityType_dateRange_slotFilter_publicOnly_pageGetByExcludeImmediateAndLangFilterAsync(int activityType, string dateRange, bool excludeImmediate, long groupId, string langFilter, int page, string platform, string publicOnly, string slotFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Fireteam/Clan/"+groupId+"/Available/"+ (platform==null? "" : System.Uri.EscapeDataString(platform))+"/"+activityType+"/"+ (dateRange==null? "" : System.Uri.EscapeDataString(dateRange))+"/"+ (slotFilter==null? "" : System.Uri.EscapeDataString(slotFilter))+"/"+ (publicOnly==null? "" : System.Uri.EscapeDataString(publicOnly))+"/"+page+"/&excludeImmediate="+excludeImmediate+"&langFilter=" + (langFilter==null? "" : System.Uri.EscapeDataString(langFilter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a listing of all fireteams that caller is an applicant, a member, or an alternate of.
		/// FireteamClan_groupIdMy_platform_includeClosed_pageGetByGroupFilterAndLangFilter Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/
		/// </summary>
		/// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user's fireteams.</param>
		/// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
		/// <param name="includeClosed">If true, return fireteams that have been closed.</param>
		/// <param name="langFilter">An optional language filter.</param>
		/// <param name="page">Deprecated parameter, ignored.</param>
		/// <param name="platform">The platform filter.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task FireteamClan_groupIdMy_platform_includeClosed_pageGetByGroupFilterAndLangFilterAsync(bool groupFilter, long groupId, bool includeClosed, string langFilter, int page, string platform, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Fireteam/Clan/"+groupId+"/My/"+ (platform==null? "" : System.Uri.EscapeDataString(platform))+"/"+includeClosed+"/"+page+"/?groupFilter="+groupFilter+"&langFilter=" + (langFilter==null? "" : System.Uri.EscapeDataString(langFilter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a specific fireteam.
		/// FireteamClan_groupIdSummary_fireteamIdGet Fireteam/Clan/{groupId}/Summary/{fireteamId}/
		/// </summary>
		/// <param name="fireteamId">The unique id of the fireteam.</param>
		/// <param name="groupId">The group id of the clan.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task FireteamClan_groupIdSummary_fireteamIdGetAsync(long fireteamId, long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Fireteam/Clan/"+groupId+"/Summary/"+fireteamId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
		/// FireteamSearchAvailable_platform_activityType_dateRange_slotFilter_pageGetByExcludeImmediateAndLangFilter Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/
		/// </summary>
		/// <param name="activityType">The activity type to filter by.</param>
		/// <param name="dateRange">The date range to grab available fireteams.</param>
		/// <param name="excludeImmediate">If you wish the result to exclude immediate fireteams, set this to true. Immediate-only can be forced using the dateRange enum.</param>
		/// <param name="langFilter">An optional language filter.</param>
		/// <param name="page">Zero based page</param>
		/// <param name="platform">The platform filter.</param>
		/// <param name="slotFilter">Filters based on available slots</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task FireteamSearchAvailable_platform_activityType_dateRange_slotFilter_pageGetByExcludeImmediateAndLangFilterAsync(int activityType, string dateRange, bool excludeImmediate, string langFilter, int page, string platform, string slotFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Fireteam/Search/Available/"+ (platform==null? "" : System.Uri.EscapeDataString(platform))+"/"+activityType+"/"+ (dateRange==null? "" : System.Uri.EscapeDataString(dateRange))+"/"+ (slotFilter==null? "" : System.Uri.EscapeDataString(slotFilter))+"/"+page+"/&excludeImmediate="+excludeImmediate+"&langFilter=" + (langFilter==null? "" : System.Uri.EscapeDataString(langFilter));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a listing of all topics marked as part of the core group.
		/// ForumGetCoreTopicsPaged_page_sort_quickDate_categoryFilterGetByLocales Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/
		/// </summary>
		/// <param name="categoryFilter">The category filter.</param>
		/// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default 'en'</param>
		/// <param name="page">Zero base page</param>
		/// <param name="quickDate">The date filter.</param>
		/// <param name="sort">The sort mode.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ForumGetCoreTopicsPaged_page_sort_quickDate_categoryFilterGetByLocalesAsync(int categoryFilter, string locales, int page, int quickDate, string sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Forum/GetCoreTopicsPaged/"+page+"/"+ (sort==null? "" : System.Uri.EscapeDataString(sort))+"/"+quickDate+"/"+categoryFilter+"/?locales=" + (locales==null? "" : System.Uri.EscapeDataString(locales));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
		/// ForumGetForumTagSuggestionsGetByPartialtag Forum/GetForumTagSuggestions/
		/// </summary>
		/// <param name="partialtag">The partial tag input to generate suggestions from.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ForumGetForumTagSuggestionsGetByPartialtagAsync(string partialtag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Forum/GetForumTagSuggestions/?partialtag=" + (partialtag==null? "" : System.Uri.EscapeDataString(partialtag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the post specified and its immediate parent.
		/// ForumGetPostAndParent_childPostIdGetByShowbanned Forum/GetPostAndParent/{childPostId}/
		/// </summary>
		/// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ForumGetPostAndParent_childPostIdGetByShowbannedAsync(long childPostId, string showbanned, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Forum/GetPostAndParent/"+childPostId+"/?showbanned=" + (showbanned==null? "" : System.Uri.EscapeDataString(showbanned));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the post specified and its immediate parent of posts that are awaiting approval.
		/// ForumGetPostAndParentAwaitingApproval_childPostIdGetByShowbanned Forum/GetPostAndParentAwaitingApproval/{childPostId}/
		/// </summary>
		/// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ForumGetPostAndParentAwaitingApproval_childPostIdGetByShowbannedAsync(long childPostId, string showbanned, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Forum/GetPostAndParentAwaitingApproval/"+childPostId+"/?showbanned=" + (showbanned==null? "" : System.Uri.EscapeDataString(showbanned));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
		/// ForumGetPostsThreadedPaged_parentPostId_page_pageSize_replySize_getParentPost_rootThreadMode_sortModeGetByShowbanned Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/
		/// </summary>
		/// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ForumGetPostsThreadedPaged_parentPostId_page_pageSize_replySize_getParentPost_rootThreadMode_sortModeGetByShowbannedAsync(bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, string showbanned, int sortMode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Forum/GetPostsThreadedPaged/"+parentPostId+"/"+page+"/"+pageSize+"/"+replySize+"/"+getParentPost+"/"+rootThreadMode+"/"+sortMode+"/?showbanned=" + (showbanned==null? "" : System.Uri.EscapeDataString(showbanned));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
		/// ForumGetPostsThreadedPagedFromChild_childPostId_page_pageSize_replySize_rootThreadMode_sortModeGetByShowbanned Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/
		/// </summary>
		/// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ForumGetPostsThreadedPagedFromChild_childPostId_page_pageSize_replySize_rootThreadMode_sortModeGetByShowbannedAsync(long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, string showbanned, int sortMode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Forum/GetPostsThreadedPagedFromChild/"+childPostId+"/"+page+"/"+pageSize+"/"+replySize+"/"+rootThreadMode+"/"+sortMode+"/?showbanned=" + (showbanned==null? "" : System.Uri.EscapeDataString(showbanned));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the post Id for the given content item's comments, if it exists.
		/// ForumGetTopicForContent_contentIdGet Forum/GetTopicForContent/{contentId}/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ForumGetTopicForContent_contentIdGetAsync(long contentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Forum/GetTopicForContent/"+contentId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get topics from any forum.
		/// ForumGetTopicsPaged_page_pageSize_group_sort_quickDate_categoryFilterGetByLocalesAndTagstring Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/
		/// </summary>
		/// <param name="categoryFilter">A category filter</param>
		/// <param name="group">The group, if any.</param>
		/// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default 'en'</param>
		/// <param name="page">Zero paged page number</param>
		/// <param name="pageSize">Unused</param>
		/// <param name="quickDate">A date filter.</param>
		/// <param name="sort">The sort mode.</param>
		/// <param name="tagstring">The tags to search, if any.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ForumGetTopicsPaged_page_pageSize_group_sort_quickDate_categoryFilterGetByLocalesAndTagstringAsync(int categoryFilter, long group, string locales, int page, int pageSize, int quickDate, string sort, string tagstring, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Forum/GetTopicsPaged/"+page+"/"+pageSize+"/"+group+"/"+ (sort==null? "" : System.Uri.EscapeDataString(sort))+"/"+quickDate+"/"+categoryFilter+"/?locales=" + (locales==null? "" : System.Uri.EscapeDataString(locales))+"&tagstring=" + (tagstring==null? "" : System.Uri.EscapeDataString(tagstring));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified forum poll.
		/// ForumPoll_topicIdGet Forum/Poll/{topicId}/
		/// </summary>
		/// <param name="topicId">The post id of the topic that has the poll.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ForumPoll_topicIdGetAsync(long topicId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Forum/Poll/"+topicId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows the caller to get a list of to 25 recruitment thread summary information objects.
		/// ForumRecruitSummariesPost Forum/Recruit/Summaries/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task ForumRecruitSummariesPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Forum/Recruit/Summaries/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List of available localization cultures
		/// GetAvailableLocalesGet GetAvailableLocales/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GetAvailableLocalesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GetAvailableLocales/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets any active global alert for display in the forum banners, help pages, etc. Usually used for DOC alerts.
		/// GlobalAlertsGetByIncludestreaming GlobalAlerts/
		/// </summary>
		/// <param name="includestreaming">Determines whether Streaming Alerts are included in results</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GlobalAlertsGetByIncludestreamingAsync(bool includestreaming, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GlobalAlerts/?includestreaming="+includestreaming;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all available group avatars for the signed-in user.
		/// GroupV2GetAvailableAvatarsGet GroupV2/GetAvailableAvatars/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2GetAvailableAvatarsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/GetAvailableAvatars/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all available group themes.
		/// GroupV2GetAvailableThemesGet GroupV2/GetAvailableThemes/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2GetAvailableThemesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/GetAvailableThemes/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the state of the user's clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
		/// GroupV2GetUserClanInviteSetting_mTypeGet GroupV2/GetUserClanInviteSetting/{mType}/
		/// </summary>
		/// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2GetUserClanInviteSetting_mTypeGetAsync(int mType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/GetUserClanInviteSetting/"+mType+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a specific group with the given name and type.
		/// GroupV2Name_groupName_groupTypeGet GroupV2/Name/{groupName}/{groupType}/
		/// </summary>
		/// <param name="groupName">Exact name of the group to find.</param>
		/// <param name="groupType">Type of group to find.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2Name_groupName_groupTypeGetAsync(string groupName, int groupType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/Name/"+ (groupName==null? "" : System.Uri.EscapeDataString(groupName))+"/"+groupType+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a specific group with the given name and type. The POST version.
		/// GroupV2NameV2Post GroupV2/NameV2/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2NameV2PostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/NameV2/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets groups recommended for you based on the groups to whom those you follow belong.
		/// GroupV2Recommended_groupType_createDateRangePost GroupV2/Recommended/{groupType}/{createDateRange}/
		/// </summary>
		/// <param name="createDateRange">Requested range in which to pull recommended groups</param>
		/// <param name="groupType">Type of groups requested</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2Recommended_groupType_createDateRangePostAsync(int createDateRange, int groupType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/Recommended/"+groupType+"/"+createDateRange+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Allows a founder to manually recover a group they can see in game but not on bungie.net
		/// GroupV2Recover_membershipType_membershipId_groupTypeGet GroupV2/Recover/{membershipType}/{membershipId}/{groupType}/
		/// </summary>
		/// <param name="groupType">Type of group the supplied member founded.</param>
		/// <param name="membershipId">Membership ID to for which to find founded groups.</param>
		/// <param name="membershipType">Membership type of the supplied membership ID.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2Recover_membershipType_membershipId_groupTypeGetAsync(int groupType, long membershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/Recover/"+membershipType+"/"+membershipId+"/"+groupType+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for Groups.
		/// GroupV2SearchPost GroupV2/Search/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2SearchPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/Search/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about the groups that a given member has applied to or been invited to.
		/// GroupV2UserPotential_membershipType_membershipId_filter_groupTypeGet GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/
		/// </summary>
		/// <param name="filter">Filter apply to list of potential joined groups.</param>
		/// <param name="groupType">Type of group the supplied member applied.</param>
		/// <param name="membershipId">Membership ID to for which to find applied groups.</param>
		/// <param name="membershipType">Membership type of the supplied membership ID.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2UserPotential_membershipType_membershipId_filter_groupTypeGetAsync(int filter, int groupType, long membershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/User/Potential/"+membershipType+"/"+membershipId+"/"+filter+"/"+groupType+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about the groups that a given member has joined.
		/// GroupV2User_membershipType_membershipId_filter_groupTypeGet GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/
		/// </summary>
		/// <param name="filter">Filter apply to list of joined groups.</param>
		/// <param name="groupType">Type of group the supplied member founded.</param>
		/// <param name="membershipId">Membership ID to for which to find founded groups.</param>
		/// <param name="membershipType">Membership type of the supplied membership ID.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2User_membershipType_membershipId_filter_groupTypeGetAsync(int filter, int groupType, long membershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/User/"+membershipType+"/"+membershipId+"/"+filter+"/"+groupType+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a specific group of the given ID.
		/// GroupV2_groupIdGet GroupV2/{groupId}/
		/// </summary>
		/// <param name="groupId">Requested group's id.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdGetAsync(long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
		/// GroupV2_groupIdAdminAbdicateFoundership_membershipType_founderIdNewPost GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/
		/// </summary>
		/// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
		/// <param name="groupId">The target group id.</param>
		/// <param name="membershipType">Membership type of the provided founderIdNew.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdAdminAbdicateFoundership_membershipType_founderIdNewPostAsync(long founderIdNew, long groupId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Admin/AbdicateFoundership/"+membershipType+"/"+founderIdNew+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of members in a given group who are of admin level or higher.
		/// GroupV2_groupIdAdminsAndFounderGetByCurrentpage GroupV2/{groupId}/AdminsAndFounder/
		/// </summary>
		/// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
		/// <param name="groupId">The ID of the group.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdAdminsAndFounderGetByCurrentpageAsync(int currentpage, long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/AdminsAndFounder/?currentpage="+currentpage;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
		/// GroupV2_groupIdBannedGetByCurrentpage GroupV2/{groupId}/Banned/
		/// </summary>
		/// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
		/// <param name="groupId">Group ID whose banned members you are fetching</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdBannedGetByCurrentpageAsync(int currentpage, long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Banned/?currentpage="+currentpage;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
		/// GroupV2_groupIdEditPost GroupV2/{groupId}/Edit/
		/// </summary>
		/// <param name="groupId">Group ID of the group to edit.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdEditPostAsync(long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Edit/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit an existing group's clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
		/// GroupV2_groupIdEditClanBannerPost GroupV2/{groupId}/EditClanBanner/
		/// </summary>
		/// <param name="groupId">Group ID of the group to edit.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdEditClanBannerPostAsync(long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/EditClanBanner/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
		/// GroupV2_groupIdEditFounderOptionsPost GroupV2/{groupId}/EditFounderOptions/
		/// </summary>
		/// <param name="groupId">Group ID of the group to edit.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdEditFounderOptionsPostAsync(long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/EditFounderOptions/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of members in a given group.
		/// GroupV2_groupIdMembersGetByCurrentpageAndMemberTypeAndNameSearch GroupV2/{groupId}/Members/
		/// </summary>
		/// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
		/// <param name="groupId">The ID of the group.</param>
		/// <param name="memberType">Filter out other member types. Use None for all members.</param>
		/// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembersGetByCurrentpageAndMemberTypeAndNameSearchAsync(int currentpage, long groupId, int memberType, string nameSearch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/?currentpage="+currentpage+"&memberType="+memberType+"&nameSearch=" + (nameSearch==null? "" : System.Uri.EscapeDataString(nameSearch));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Approve the given membershipId to join the group/clan as long as they have applied.
		/// GroupV2_groupIdMembersApprove_membershipType_membershipIdPost GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/
		/// </summary>
		/// <param name="groupId">ID of the group.</param>
		/// <param name="membershipId">The membership id being approved.</param>
		/// <param name="membershipType">Membership type of the supplied membership ID.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembersApprove_membershipType_membershipIdPostAsync(long groupId, long membershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/Approve/"+membershipType+"/"+membershipId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Approve all of the pending users for the given group.
		/// GroupV2_groupIdMembersApproveAllPost GroupV2/{groupId}/Members/ApproveAll/
		/// </summary>
		/// <param name="groupId">ID of the group.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembersApproveAllPostAsync(long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/ApproveAll/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Approve all of the pending users for the given group.
		/// GroupV2_groupIdMembersApproveListPost GroupV2/{groupId}/Members/ApproveList/
		/// </summary>
		/// <param name="groupId">ID of the group.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembersApproveListPostAsync(long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/ApproveList/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deny all of the pending users for the given group.
		/// GroupV2_groupIdMembersDenyAllPost GroupV2/{groupId}/Members/DenyAll/
		/// </summary>
		/// <param name="groupId">ID of the group.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembersDenyAllPostAsync(long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/DenyAll/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deny all of the pending users for the given group that match the passed-in .
		/// GroupV2_groupIdMembersDenyListPost GroupV2/{groupId}/Members/DenyList/
		/// </summary>
		/// <param name="groupId">ID of the group.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembersDenyListPostAsync(long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/DenyList/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invite a user to join this group.
		/// GroupV2_groupIdMembersIndividualInvite_membershipType_membershipIdPost GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/
		/// </summary>
		/// <param name="groupId">ID of the group you would like to join.</param>
		/// <param name="membershipId">Membership id of the account being invited.</param>
		/// <param name="membershipType">MembershipType of the account being invited.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembersIndividualInvite_membershipType_membershipIdPostAsync(long groupId, long membershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/IndividualInvite/"+membershipType+"/"+membershipId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a pending invitation to join a group.
		/// GroupV2_groupIdMembersIndividualInviteCancel_membershipType_membershipIdPost GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/
		/// </summary>
		/// <param name="groupId">ID of the group you would like to join.</param>
		/// <param name="membershipId">Membership id of the account being cancelled.</param>
		/// <param name="membershipType">MembershipType of the account being cancelled.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembersIndividualInviteCancel_membershipType_membershipIdPostAsync(long groupId, long membershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/IndividualInviteCancel/"+membershipType+"/"+membershipId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of users who have been invited into the group.
		/// GroupV2_groupIdMembersInvitedIndividualsGetByCurrentpage GroupV2/{groupId}/Members/InvitedIndividuals/
		/// </summary>
		/// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
		/// <param name="groupId">ID of the group.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembersInvitedIndividualsGetByCurrentpageAsync(int currentpage, long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/InvitedIndividuals/?currentpage="+currentpage;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
		/// GroupV2_groupIdMembersPendingGetByCurrentpage GroupV2/{groupId}/Members/Pending/
		/// </summary>
		/// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
		/// <param name="groupId">ID of the group.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembersPendingGetByCurrentpageAsync(int currentpage, long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/Pending/?currentpage="+currentpage;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Bans the requested member from the requested group for the specified period of time.
		/// GroupV2_groupIdMembers_membershipType_membershipIdBanPost GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/
		/// </summary>
		/// <param name="groupId">Group ID that has the member to ban.</param>
		/// <param name="membershipId">Membership ID of the member to ban from the group.</param>
		/// <param name="membershipType">Membership type of the provided membership ID.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembers_membershipType_membershipIdBanPostAsync(long groupId, long membershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/"+membershipType+"/"+membershipId+"/Ban/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
		/// GroupV2_groupIdMembers_membershipType_membershipIdKickPost GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/
		/// </summary>
		/// <param name="groupId">Group ID to kick the user from.</param>
		/// <param name="membershipId">Membership ID to kick.</param>
		/// <param name="membershipType">Membership type of the provided membership ID.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembers_membershipType_membershipIdKickPostAsync(long groupId, long membershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/"+membershipType+"/"+membershipId+"/Kick/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
		/// GroupV2_groupIdMembers_membershipType_membershipIdSetMembershipType_memberTypePost GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/
		/// </summary>
		/// <param name="groupId">ID of the group to which the member belongs.</param>
		/// <param name="membershipId">Membership ID to modify.</param>
		/// <param name="membershipType">Membership type of the provide membership ID.</param>
		/// <param name="memberType">New membertype for the specified member.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembers_membershipType_membershipIdSetMembershipType_memberTypePostAsync(long groupId, long membershipId, int membershipType, int memberType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/"+membershipType+"/"+membershipId+"/SetMembershipType/"+memberType+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unbans the requested member, allowing them to re-apply for membership.
		/// GroupV2_groupIdMembers_membershipType_membershipIdUnbanPost GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/
		/// </summary>
		/// <param name="membershipId">Membership ID of the member to unban from the group</param>
		/// <param name="membershipType">Membership type of the provided membership ID.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdMembers_membershipType_membershipIdUnbanPostAsync(long groupId, long membershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/Members/"+membershipType+"/"+membershipId+"/Unban/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of available optional conversation channels and their settings.
		/// GroupV2_groupIdOptionalConversationsGet GroupV2/{groupId}/OptionalConversations/
		/// </summary>
		/// <param name="groupId">Requested group's id.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdOptionalConversationsGetAsync(long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/OptionalConversations/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new optional conversation/chat channel. Requires admin permissions to the group.
		/// GroupV2_groupIdOptionalConversationsAddPost GroupV2/{groupId}/OptionalConversations/Add/
		/// </summary>
		/// <param name="groupId">Group ID of the group to edit.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdOptionalConversationsAddPostAsync(long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/OptionalConversations/Add/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
		/// GroupV2_groupIdOptionalConversationsEdit_conversationIdPost GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/
		/// </summary>
		/// <param name="conversationId">Conversation Id of the channel being edited.</param>
		/// <param name="groupId">Group ID of the group to edit.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task GroupV2_groupIdOptionalConversationsEdit_conversationIdPostAsync(long conversationId, long groupId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "GroupV2/"+groupId+"/OptionalConversations/Edit/"+conversationId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the common settings used by the Bungie.Net environment.
		/// SettingsGet Settings/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task SettingsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Settings/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns your Bungie Friend list
		/// SocialFriendsGet Social/Friends/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task SocialFriendsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Social/Friends/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Requests a friend relationship with the target user. Any of the target user's linked membership ids are valid inputs.
		/// SocialFriendsAdd_membershipIdPost Social/Friends/Add/{membershipId}/
		/// </summary>
		/// <param name="membershipId">The membership id of the user you wish to add.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task SocialFriendsAdd_membershipIdPostAsync(string membershipId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Social/Friends/Add/"+ (membershipId==null? "" : System.Uri.EscapeDataString(membershipId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
		/// SocialFriendsRemove_membershipIdPost Social/Friends/Remove/{membershipId}/
		/// </summary>
		/// <param name="membershipId">The membership id of the user you wish to remove.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task SocialFriendsRemove_membershipIdPostAsync(string membershipId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Social/Friends/Remove/"+ (membershipId==null? "" : System.Uri.EscapeDataString(membershipId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns your friend request queue.
		/// SocialFriendsRequestsGet Social/Friends/Requests/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task SocialFriendsRequestsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Social/Friends/Requests/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
		/// SocialFriendsRequestsAccept_membershipIdPost Social/Friends/Requests/Accept/{membershipId}/
		/// </summary>
		/// <param name="membershipId">The membership id of the user you wish to accept.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task SocialFriendsRequestsAccept_membershipIdPostAsync(string membershipId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Social/Friends/Requests/Accept/"+ (membershipId==null? "" : System.Uri.EscapeDataString(membershipId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
		/// SocialFriendsRequestsDecline_membershipIdPost Social/Friends/Requests/Decline/{membershipId}/
		/// </summary>
		/// <param name="membershipId">The membership id of the user you wish to decline.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task SocialFriendsRequestsDecline_membershipIdPostAsync(string membershipId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Social/Friends/Requests/Decline/"+ (membershipId==null? "" : System.Uri.EscapeDataString(membershipId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
		/// SocialFriendsRequestsRemove_membershipIdPost Social/Friends/Requests/Remove/{membershipId}/
		/// </summary>
		/// <param name="membershipId">The membership id of the user you wish to remove.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task SocialFriendsRequestsRemove_membershipIdPostAsync(string membershipId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Social/Friends/Requests/Remove/"+ (membershipId==null? "" : System.Uri.EscapeDataString(membershipId))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
		/// SocialPlatformFriends_friendPlatform_pageGet Social/PlatformFriends/{friendPlatform}/{page}/
		/// </summary>
		/// <param name="friendPlatform">The platform friend type.</param>
		/// <param name="page">The zero based page to return. Page size is 100.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task SocialPlatformFriends_friendPlatform_pageGetAsync(int friendPlatform, string page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Social/PlatformFriends/"+friendPlatform+"/"+ (page==null? "" : System.Uri.EscapeDataString(page))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Apply a partner offer to the targeted user. This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already.
		/// TokensPartnerApplyMissingOffers_partnerApplicationId_targetBnetMembershipIdPost Tokens/Partner/ApplyMissingOffers/{partnerApplicationId}/{targetBnetMembershipId}/
		/// </summary>
		/// <param name="partnerApplicationId">The partner application identifier.</param>
		/// <param name="targetBnetMembershipId">The bungie.net user to apply missing offers to. If not self, elevated permissions are required.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task TokensPartnerApplyMissingOffers_partnerApplicationId_targetBnetMembershipIdPostAsync(int partnerApplicationId, long targetBnetMembershipId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tokens/Partner/ApplyMissingOffers/"+partnerApplicationId+"/"+targetBnetMembershipId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Claim a partner offer as the authenticated user.
		/// TokensPartnerClaimOfferPost Tokens/Partner/ClaimOffer/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task TokensPartnerClaimOfferPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tokens/Partner/ClaimOffer/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Twitch Drops self-repair function - scans twitch for drops not marked as fulfilled and resyncs them.
		/// TokensPartnerForceDropsRepairPost Tokens/Partner/ForceDropsRepair/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task TokensPartnerForceDropsRepairPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tokens/Partner/ForceDropsRepair/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the partner sku and offer history of the targeted user. Elevated permissions are required to see users that are not yourself.
		/// TokensPartnerHistory_partnerApplicationId_targetBnetMembershipIdGet Tokens/Partner/History/{partnerApplicationId}/{targetBnetMembershipId}/
		/// </summary>
		/// <param name="partnerApplicationId">The partner application identifier.</param>
		/// <param name="targetBnetMembershipId">The bungie.net user to apply missing offers to. If not self, elevated permissions are required.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task TokensPartnerHistory_partnerApplicationId_targetBnetMembershipIdGetAsync(int partnerApplicationId, long targetBnetMembershipId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tokens/Partner/History/"+partnerApplicationId+"/"+targetBnetMembershipId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the partner rewards history of the targeted user, both partner offers and Twitch drops.
		/// TokensPartnerHistory_targetBnetMembershipIdApplication_partnerApplicationIdGet Tokens/Partner/History/{targetBnetMembershipId}/Application/{partnerApplicationId}/
		/// </summary>
		/// <param name="partnerApplicationId">The partner application identifier.</param>
		/// <param name="targetBnetMembershipId">The bungie.net user to return reward history for.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task TokensPartnerHistory_targetBnetMembershipIdApplication_partnerApplicationIdGetAsync(int partnerApplicationId, long targetBnetMembershipId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tokens/Partner/History/"+targetBnetMembershipId+"/Application/"+partnerApplicationId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the current bungie rewards
		/// TokensRewardsBungieRewardsGet Tokens/Rewards/BungieRewards/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task TokensRewardsBungieRewardsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tokens/Rewards/BungieRewards/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the bungie rewards for the targeted user when a platform membership Id and Type are used.
		/// TokensRewardsGetRewardsForPlatformUser_membershipId_membershipTypeGet Tokens/Rewards/GetRewardsForPlatformUser/{membershipId}/{membershipType}/
		/// </summary>
		/// <param name="membershipId">users platform membershipId for requested user rewards. If not self, elevated permissions are required.</param>
		/// <param name="membershipType">The target Destiny 2 membership type.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task TokensRewardsGetRewardsForPlatformUser_membershipId_membershipTypeGetAsync(long membershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tokens/Rewards/GetRewardsForPlatformUser/"+membershipId+"/"+membershipType+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the bungie rewards for the targeted user.
		/// TokensRewardsGetRewardsForUser_membershipIdGet Tokens/Rewards/GetRewardsForUser/{membershipId}/
		/// </summary>
		/// <param name="membershipId">bungie.net user membershipId for requested user rewards. If not self, elevated permissions are required.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task TokensRewardsGetRewardsForUser_membershipIdGetAsync(long membershipId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Tokens/Rewards/GetRewardsForUser/"+membershipId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
		/// TrendingCategoriesGet Trending/Categories/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task TrendingCategoriesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Trending/Categories/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns paginated lists of trending items for a category.
		/// TrendingCategories_categoryId_pageNumberGet Trending/Categories/{categoryId}/{pageNumber}/
		/// </summary>
		/// <param name="categoryId">The ID of the category for whom you want additional results.</param>
		/// <param name="pageNumber">The page # of results to return.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task TrendingCategories_categoryId_pageNumberGetAsync(string categoryId, int pageNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Trending/Categories/"+ (categoryId==null? "" : System.Uri.EscapeDataString(categoryId))+"/"+pageNumber+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
		/// TrendingDetails_trendingEntryType_identifierGet Trending/Details/{trendingEntryType}/{identifier}/
		/// </summary>
		/// <param name="identifier">The identifier for the entity to be returned.</param>
		/// <param name="trendingEntryType">The type of entity to be returned.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task TrendingDetails_trendingEntryType_identifierGetAsync(string identifier, int trendingEntryType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Trending/Details/"+trendingEntryType+"/"+ (identifier==null? "" : System.Uri.EscapeDataString(identifier))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all available user themes.
		/// UserGetAvailableThemesGet User/GetAvailableThemes/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task UserGetAvailableThemesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/GetAvailableThemes/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Loads a bungienet user by membership id.
		/// UserGetBungieNetUserById_idGet User/GetBungieNetUserById/{id}/
		/// </summary>
		/// <param name="id">The requested Bungie.net membership id.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task UserGetBungieNetUserById_idGetAsync(long id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/GetBungieNetUserById/"+id+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of credential types attached to the requested account
		/// UserGetCredentialTypesForTargetAccount_membershipIdGet User/GetCredentialTypesForTargetAccount/{membershipId}/
		/// </summary>
		/// <param name="membershipId">The user's membership id</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task UserGetCredentialTypesForTargetAccount_membershipIdGetAsync(long membershipId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/GetCredentialTypesForTargetAccount/"+membershipId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets any hard linked membership given a credential. Only works for credentials that are public (just SteamID64 right now). Cross Save aware.
		/// UserGetMembershipFromHardLinkedCredential_crType_credentialGet User/GetMembershipFromHardLinkedCredential/{crType}/{credential}/
		/// </summary>
		/// <param name="credential">The credential to look up. Must be a valid SteamID64.</param>
		/// <param name="crType">The credential type. 'SteamId' is the only valid value at present.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task UserGetMembershipFromHardLinkedCredential_crType_credentialGetAsync(string credential, string crType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/GetMembershipFromHardLinkedCredential/"+ (crType==null? "" : System.Uri.EscapeDataString(crType))+"/"+ (credential==null? "" : System.Uri.EscapeDataString(credential))+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of accounts associated with the supplied membership ID and membership type. This will include all linked accounts (even when hidden) if supplied credentials permit it.
		/// UserGetMembershipsById_membershipId_membershipTypeGet User/GetMembershipsById/{membershipId}/{membershipType}/
		/// </summary>
		/// <param name="membershipId">The membership ID of the target user.</param>
		/// <param name="membershipType">Type of the supplied membership ID.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task UserGetMembershipsById_membershipId_membershipTypeGetAsync(long membershipId, int membershipType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/GetMembershipsById/"+membershipId+"/"+membershipType+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of accounts associated with signed in user. This is useful for OAuth implementations that do not give you access to the token response.
		/// UserGetMembershipsForCurrentUserGet User/GetMembershipsForCurrentUser/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task UserGetMembershipsForCurrentUserGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/GetMembershipsForCurrentUser/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all display names linked to this membership id but sanitized (profanity filtered). Obeys all visibility rules of calling user and is heavily cached.
		/// UserGetSanitizedPlatformDisplayNames_membershipIdGet User/GetSanitizedPlatformDisplayNames/{membershipId}/
		/// </summary>
		/// <param name="membershipId">The requested membership id to load.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task UserGetSanitizedPlatformDisplayNames_membershipIdGetAsync(long membershipId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/GetSanitizedPlatformDisplayNames/"+membershipId+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Given the prefix of a global display name, returns all users who share that name.
		/// UserSearchGlobalName_pagePost User/Search/GlobalName/{page}/
		/// </summary>
		/// <param name="page">The zero-based page of results you desire.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task UserSearchGlobalName_pagePostAsync(int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/Search/GlobalName/"+page+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// [OBSOLETE] Do not use this to search users, use SearchByGlobalNamePost instead.
		/// UserSearchPrefix_displayNamePrefix_pageGet User/Search/Prefix/{displayNamePrefix}/{page}/
		/// </summary>
		/// <param name="displayNamePrefix">The display name prefix you're looking for.</param>
		/// <param name="page">The zero-based page of results you desire.</param>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task UserSearchPrefix_displayNamePrefix_pageGetAsync(string displayNamePrefix, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "User/Search/Prefix/"+ (displayNamePrefix==null? "" : System.Uri.EscapeDataString(displayNamePrefix))+"/"+page+"/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the user-specific system overrides that should be respected alongside common systems.
		/// UserSystemOverridesGet UserSystemOverrides/
		/// </summary>
		/// <returns>Look at the Response property for more information about the nature of this response</returns>
		public async Task UserSystemOverridesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "UserSystemOverrides/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
