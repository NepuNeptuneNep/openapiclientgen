//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API_Key_Info
	{
		
		/// <summary>
		/// State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_email")]
		public string Customer_email { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customer_name")]
		public string Customer_name { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires")]
		public string Expires { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_id")]
		public string Item_id { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_name")]
		public string Item_name { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public string License { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license_limit")]
		public string License_limit { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price_id")]
		public string Price_id { get; set; }
		
		/// <summary>
		/// State
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="success")]
		public string Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Domains
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] A { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] CNAME { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MX_records[] MX { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NS { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TXT { get; set; }
		
		/// <summary>
		/// Hosting Country
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Domain creation date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="create_date")]
		public System.Nullable<System.DateTimeOffset> Create_date { get; set; }
		
		/// <summary>
		/// Domain name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// If Domain is Dead
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDead")]
		public string IsDead { get; set; }
		
		/// <summary>
		/// Domain last update date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="update_date")]
		public System.Nullable<System.DateTimeOffset> Update_date { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MX_records
	{
		
		/// <summary>
		/// MX domain
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchange")]
		public string Exchange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Response_Parameters
	{
		
		/// <summary>
		/// Next page id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_page")]
		public string Next_page { get; set; }
		
		/// <summary>
		/// Time took
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
		
		/// <summary>
		/// Total days reported
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Search_Results : Response_Parameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public Domains[] Domains { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Update_model
	{
		
		/// <summary>
		/// Updates added list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added")]
		public string Added { get; set; }
		
		/// <summary>
		/// Download link for added
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="added_download")]
		public string Added_download { get; set; }
		
		/// <summary>
		/// Update date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Updates deleted list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public string Deleted { get; set; }
		
		/// <summary>
		/// Download link for deleted
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted_download")]
		public string Deleted_download { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Zone_info
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string[] Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="in_bundles")]
		public string[] In_bundles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public string[] Includes { get; set; }
		
		/// <summary>
		/// TLD type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// TLD name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Zone_statistics
	{
		
		/// <summary>
		/// Report Date
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.DateTimeOffset Date { get; set; }
		
		/// <summary>
		/// Increase
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dec")]
		public int Dec { get; set; }
		
		/// <summary>
		/// Decrease
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inc")]
		public int Inc { get; set; }
		
		/// <summary>
		/// Total number of records
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
		
		/// <summary>
		/// TLD name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Zone_stats : Response_Parameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="statistics")]
		public Zone_statistics[] Statistics { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Domains Database Search
		/// DomainsSearchGetByApi_keyAndDateAndPageAndLimitAndDomainAndZoneAndCountryAndIsDeadAndAAndNSAndCNAMEAndMXAndTXT domains/search
		/// </summary>
		/// <param name="api_key">API key</param>
		/// <param name="date">Request date</param>
		/// <param name="page">Search page to request</param>
		/// <param name="limit">Results per page</param>
		/// <param name="domain">Domain includes</param>
		/// <param name="zone">In Zone</param>
		/// <param name="country">Hosting Country</param>
		/// <param name="isDead">Dead or Not, default not</param>
		/// <param name="A">A record includes</param>
		/// <param name="NS">NS record includes</param>
		/// <param name="CNAME">CNAME record includes</param>
		/// <param name="MX">MX record includes</param>
		/// <param name="TXT">TXT record includes</param>
		/// <returns>Success</returns>
		public async Task<Search_Results> DomainsSearchGetByApi_keyAndDateAndPageAndLimitAndDomainAndZoneAndCountryAndIsDeadAndAAndNSAndCNAMEAndMXAndTXTAsync(string api_key, string date, string page, int limit, string domain, string zone, string country, bool isDead, string A, string NS, string CNAME, string MX, string TXT, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/search?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit+"&domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&zone=" + (zone==null? "" : System.Uri.EscapeDataString(zone))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&isDead="+isDead+"&A=" + (A==null? "" : System.Uri.EscapeDataString(A))+"&NS=" + (NS==null? "" : System.Uri.EscapeDataString(NS))+"&CNAME=" + (CNAME==null? "" : System.Uri.EscapeDataString(CNAME))+"&MX=" + (MX==null? "" : System.Uri.EscapeDataString(MX))+"&TXT=" + (TXT==null? "" : System.Uri.EscapeDataString(TXT));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Search_Results>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get TLD records
		/// DomainsTld_zone_idGetByApi_keyAndDateAndPageAndLimitAndDomainAndCountryAndIsDeadAndAAndNSAndCNAMEAndMXAndTXT domains/tld/{zone_id}
		/// </summary>
		/// <param name="api_key">API key</param>
		/// <param name="date">Request date</param>
		/// <param name="page">Search page to request</param>
		/// <param name="limit">Results per page</param>
		/// <param name="domain">Domain includes</param>
		/// <param name="country">Hosting Country</param>
		/// <param name="isDead">Dead or Not, default not</param>
		/// <param name="A">A record includes</param>
		/// <param name="NS">NS record includes</param>
		/// <param name="CNAME">CNAME record includes</param>
		/// <param name="MX">MX record includes</param>
		/// <param name="TXT">TXT record includes</param>
		/// <returns>Success</returns>
		public async Task<Search_Results> DomainsTld_zone_idGetByApi_keyAndDateAndPageAndLimitAndDomainAndCountryAndIsDeadAndAAndNSAndCNAMEAndMXAndTXTAsync(string api_key, string date, string page, int limit, string domain, string country, bool isDead, string A, string NS, string CNAME, string MX, string TXT, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/tld/{zone_id}?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit+"&domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&isDead="+isDead+"&A=" + (A==null? "" : System.Uri.EscapeDataString(A))+"&NS=" + (NS==null? "" : System.Uri.EscapeDataString(NS))+"&CNAME=" + (CNAME==null? "" : System.Uri.EscapeDataString(CNAME))+"&MX=" + (MX==null? "" : System.Uri.EscapeDataString(MX))+"&TXT=" + (TXT==null? "" : System.Uri.EscapeDataString(TXT));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Search_Results>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download Whole Dataset for TLD
		/// DomainsTld_zone_idDownloadGetByApi_keyAndDate domains/tld/{zone_id}/download
		/// </summary>
		/// <param name="api_key">API key</param>
		/// <param name="date">Request date</param>
		public async Task DomainsTld_zone_idDownloadGetByApi_keyAndDateAsync(string api_key, string date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/tld/{zone_id}/download?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Domains Search for TLD
		/// DomainsTld_zone_idSearchGetByApi_keyAndDateAndPageAndLimitAndDomainAndCountryAndIsDeadAndAAndNSAndCNAMEAndMXAndTXT domains/tld/{zone_id}/search
		/// </summary>
		/// <param name="api_key">API key</param>
		/// <param name="date">Request date</param>
		/// <param name="page">Search page to request</param>
		/// <param name="limit">Results per page</param>
		/// <param name="domain">Domain includes</param>
		/// <param name="country">Hosting Country</param>
		/// <param name="isDead">Dead or Not, default not</param>
		/// <param name="A">A record includes</param>
		/// <param name="NS">NS record includes</param>
		/// <param name="CNAME">CNAME record includes</param>
		/// <param name="MX">MX record includes</param>
		/// <param name="TXT">TXT record includes</param>
		/// <returns>Success</returns>
		public async Task<Search_Results> DomainsTld_zone_idSearchGetByApi_keyAndDateAndPageAndLimitAndDomainAndCountryAndIsDeadAndAAndNSAndCNAMEAndMXAndTXTAsync(string api_key, string date, string page, int limit, string domain, string country, bool isDead, string A, string NS, string CNAME, string MX, string TXT, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/tld/{zone_id}/search?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit+"&domain=" + (domain==null? "" : System.Uri.EscapeDataString(domain))+"&country=" + (country==null? "" : System.Uri.EscapeDataString(country))+"&isDead="+isDead+"&A=" + (A==null? "" : System.Uri.EscapeDataString(A))+"&NS=" + (NS==null? "" : System.Uri.EscapeDataString(NS))+"&CNAME=" + (CNAME==null? "" : System.Uri.EscapeDataString(CNAME))+"&MX=" + (MX==null? "" : System.Uri.EscapeDataString(MX))+"&TXT=" + (TXT==null? "" : System.Uri.EscapeDataString(TXT));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Search_Results>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get added domains, latest if date not specified
		/// DomainsUpdatesAddedGetByApi_keyAndDateAndPageAndLimit domains/updates/added
		/// </summary>
		/// <param name="api_key">API key</param>
		/// <param name="date">Request date</param>
		/// <param name="page">Search page to request</param>
		/// <param name="limit">Results per page</param>
		/// <returns>Success</returns>
		public async Task<Search_Results> DomainsUpdatesAddedGetByApi_keyAndDateAndPageAndLimitAsync(string api_key, string date, string page, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/updates/added?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Search_Results>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download added domains, latest if date not specified
		/// DomainsUpdatesAddedDownloadGetByApi_keyAndDate domains/updates/added/download
		/// </summary>
		/// <param name="api_key">API key</param>
		/// <param name="date">Request date</param>
		public async Task DomainsUpdatesAddedDownloadGetByApi_keyAndDateAsync(string api_key, string date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/updates/added/download?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get deleted domains, latest if date not specified
		/// DomainsUpdatesDeletedGetByApi_keyAndDateAndPageAndLimit domains/updates/deleted
		/// </summary>
		/// <param name="api_key">API key</param>
		/// <param name="date">Request date</param>
		/// <param name="page">Search page to request</param>
		/// <param name="limit">Results per page</param>
		/// <returns>Success</returns>
		public async Task<Search_Results> DomainsUpdatesDeletedGetByApi_keyAndDateAndPageAndLimitAsync(string api_key, string date, string page, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/updates/deleted?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Search_Results>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Download deleted domains, latest if date not specified
		/// DomainsUpdatesDeletedDownloadGetByApi_keyAndDate domains/updates/deleted/download
		/// </summary>
		/// <param name="api_key">API key</param>
		/// <param name="date">Request date</param>
		public async Task DomainsUpdatesDeletedDownloadGetByApi_keyAndDateAsync(string api_key, string date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/updates/deleted/download?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List of updates
		/// DomainsUpdatesListGetByApi_key domains/updates/list
		/// </summary>
		/// <param name="api_key">API key</param>
		/// <returns>Success</returns>
		public async Task<Update_model> DomainsUpdatesListGetByApi_keyAsync(string api_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domains/updates/list?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Update_model>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// InfoApiGetByApi_key info/api
		/// </summary>
		/// <param name="api_key">API key</param>
		/// <returns>Success</returns>
		public async Task<API_Key_Info> InfoApiGetByApi_keyAsync(string api_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "info/api?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<API_Key_Info>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns overall stagtistics
		/// InfoStatGetByPageAndLimit info/stat/
		/// </summary>
		/// <param name="page">Search page to request</param>
		/// <param name="limit">Results per page</param>
		/// <returns>Success</returns>
		public async Task<Zone_stats[]> InfoStatGetByPageAndLimitAsync(string page, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "info/stat/?page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Zone_stats[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns statistics for specific zone
		/// InfoStat_zoneGetByPageAndLimit info/stat/{zone}
		/// </summary>
		/// <param name="page">Search page to request</param>
		/// <param name="limit">Results per page</param>
		/// <returns>Success</returns>
		public async Task<Zone_stats> InfoStat_zoneGetByPageAndLimitAsync(string page, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "info/stat/{zone}?page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Zone_stats>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns overall Tld info
		/// InfoTldGet info/tld/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Zone_info[]> InfoTldGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "info/tld/";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Zone_info[]>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Returns statistics for specific zone
		/// InfoTld_zoneGetByPageAndLimit info/tld/{zone}
		/// </summary>
		/// <param name="page">Search page to request</param>
		/// <param name="limit">Results per page</param>
		/// <returns>Success</returns>
		public async Task<Zone_info> InfoTld_zoneGetByPageAndLimitAsync(string page, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "info/tld/{zone}?page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&limit="+limit;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Zone_info>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
