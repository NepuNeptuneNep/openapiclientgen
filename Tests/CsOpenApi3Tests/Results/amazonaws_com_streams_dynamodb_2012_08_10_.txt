//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents the output of a <code>DescribeStream</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeStreamOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StreamDescription StreamDescription { get; set; }
	}
	
	/// <summary>
	/// Represents all of the data describing a particular stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamStatus StreamStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamViewType StreamViewType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationRequestDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TableName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeySchemaElement[] KeySchema { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Shard[] Shards { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastEvaluatedShardId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StreamViewType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_IMAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OLD_IMAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_AND_OLD_IMAGES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEYS_ONLY = 3,
	}
	
	/// <summary>
	/// <p>Represents <i>a single element</i> of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.</p> <p>A <code>KeySchemaElement</code> represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one <code>KeySchemaElement</code> (for the partition key). A composite primary key would require one <code>KeySchemaElement</code> for the partition key, and another <code>KeySchemaElement</code> for the sort key.</p> <p>A <code>KeySchemaElement</code> must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeySchemaElement
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AttributeName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public KeyType KeyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum KeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HASH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANGE = 1,
	}
	
	/// <summary>
	/// A uniquely identified group of stream records within a stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Shard
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ShardId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SequenceNumberRange SequenceNumberRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParentShardId { get; set; }
	}
	
	/// <summary>
	/// The beginning and ending sequence numbers for the stream records contained within a shard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SequenceNumberRange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StartingSequenceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndingSequenceNumber { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DescribeStream</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeStreamInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StreamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExclusiveStartShardId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerError
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>GetRecords</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRecordsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Record[] Records { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextShardIterator { get; set; }
	}
	
	/// <summary>
	/// A description of a unique event within a stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Record
	{
		
		[System.Runtime.Serialization.DataMember(Name="eventID")]
		public string EventID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public OperationType EventName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventVersion")]
		public string EventVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventSource")]
		public string EventSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="awsRegion")]
		public string AwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dynamodb")]
		public StreamRecord Dynamodb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userIdentity")]
		public Identity UserIdentity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODIFY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVE = 2,
	}
	
	/// <summary>
	/// A description of a single data modification that was performed on an item in a DynamoDB table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StreamRecord
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ApproximateCreationDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeMap Keys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeMap NewImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeMap OldImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SequenceNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SizeBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StreamViewType StreamViewType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeMap
	{
	}
	
	/// <summary>
	/// Contains details about the type of identity that made the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Identity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetRecords</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRecordsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ShardIterator { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExpiredIteratorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrimmedDataAccessException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>GetShardIterator</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetShardIteratorOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ShardIterator { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetShardIterator</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetShardIteratorInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StreamArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ShardId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ShardIteratorType ShardIteratorType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SequenceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ShardIteratorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIM_HORIZON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LATEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AT_SEQUENCE_NUMBER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFTER_SEQUENCE_NUMBER = 3,
	}
	
	/// <summary>
	/// Represents the output of a <code>ListStreams</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStreamsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Stream[] Streams { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastEvaluatedStreamArn { get; set; }
	}
	
	/// <summary>
	/// Represents all of the data describing a particular stream.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Stream
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TableName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StreamLabel { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListStreams</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListStreamsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TableName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ExclusiveStartStreamArn { get; set; }
	}
	
	/// <summary>
	/// <p>Represents the data for an attribute.</p> <p>Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes">Data Types</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string N { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string B { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SS { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NS { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] BS { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MapAttributeValue M { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttributeValue[] L { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> NULL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> BOOL { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MapAttributeValue
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Returns information about a stream, including the current status of the stream, its Amazon Resource Name (ARN), the composition of its shards, and its corresponding DynamoDB table.</p> <note> <p>You can call <code>DescribeStream</code> at a maximum rate of 10 times per second.</p> </note> <p>Each shard in the stream has a <code>SequenceNumberRange</code> associated with it. If the <code>SequenceNumberRange</code> has a <code>StartingSequenceNumber</code> but no <code>EndingSequenceNumber</code>, then the shard is still open (able to receive more stream records). If both <code>StartingSequenceNumber</code> and <code>EndingSequenceNumber</code> are present, then that shard is closed and can no longer receive more data.</p>
		/// DescribeStream #X-Amz-Target=DynamoDBStreams_20120810.DescribeStream
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeStreamOutput> DescribeStreamAsync(DescribeStreamInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DynamoDBStreams_20120810.DescribeStream";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeStreamOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the stream records from a given shard.</p> <p>Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard iterator specifies the position in the shard from which you want to start reading stream records sequentially. If there are no stream records available in the portion of the shard that the iterator points to, <code>GetRecords</code> returns an empty list. Note that it might take multiple calls to get to a portion of the shard that contains stream records.</p> <note> <p> <code>GetRecords</code> can retrieve a maximum of 1 MB of data or 1000 stream records, whichever comes first.</p> </note>
		/// GetRecords #X-Amz-Target=DynamoDBStreams_20120810.GetRecords
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetRecordsOutput> GetRecordsAsync(GetRecordsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DynamoDBStreams_20120810.GetRecords";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetRecordsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a shard iterator. A shard iterator provides information about how to retrieve the stream records from within a shard. Use the shard iterator in a subsequent <code>GetRecords</code> request to read the stream records from the shard.</p> <note> <p>A shard iterator expires 15 minutes after it is returned to the requester.</p> </note>
		/// GetShardIterator #X-Amz-Target=DynamoDBStreams_20120810.GetShardIterator
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetShardIteratorOutput> GetShardIteratorAsync(GetShardIteratorInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DynamoDBStreams_20120810.GetShardIterator";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetShardIteratorOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns an array of stream ARNs associated with the current account and endpoint. If the <code>TableName</code> parameter is present, then <code>ListStreams</code> will return only the streams ARNs for that table.</p> <note> <p>You can call <code>ListStreams</code> at a maximum rate of 5 times per second.</p> </note>
		/// ListStreams #X-Amz-Target=DynamoDBStreams_20120810.ListStreams
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListStreamsOutput> ListStreamsAsync(ListStreamsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DynamoDBStreams_20120810.ListStreams";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListStreamsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum DescribeStreamX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DynamoDBStreams_20120810.DescribeStream")]
		DynamoDBStreams_20120810_DescribeStream = 0,
	}
	
	public enum GetRecordsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DynamoDBStreams_20120810.GetRecords")]
		DynamoDBStreams_20120810_GetRecords = 0,
	}
	
	public enum GetShardIteratorX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DynamoDBStreams_20120810.GetShardIterator")]
		DynamoDBStreams_20120810_GetShardIterator = 0,
	}
	
	public enum ListStreamsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DynamoDBStreams_20120810.ListStreams")]
		DynamoDBStreams_20120810_ListStreams = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
