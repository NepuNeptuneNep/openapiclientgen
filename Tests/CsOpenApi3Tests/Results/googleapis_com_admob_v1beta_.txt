//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Definition of a mediation ad source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdSource
	{
		
		/// <summary>
		/// ID of this ad source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adSourceId")]
		public string AdSourceId { get; set; }
		
		/// <summary>
		/// Resource name of this ad source. Format is: accounts/{publisher_id}/adSources/{ad_source_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Display name of this ad source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Describes an AdMob ad unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdUnit
	{
		
		/// <summary>
		/// AdFormat of the ad unit. Possible values are as follows: "APP_OPEN" - App Open ad format. "BANNER" - Banner ad format. "BANNER_INTERSTITIAL" - Legacy format that can be used as either banner or interstitial. This format can no longer be created but can be targeted by mediation groups. "INTERSTITIAL" - A full screen ad. Supported ad types are "RICH_MEDIA" and "VIDEO". "NATIVE" - Native ad format. "REWARDED" - An ad that, once viewed, gets a callback verifying the view so that a reward can be given to the user. Supported ad types are "RICH_MEDIA" (interactive) and video where video can not be excluded. "REWARDED_INTERSTITIAL" - Rewarded Interstitial ad format. Only supports video ad type. See https://support.google.com/admob/answer/9884467.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adFormat")]
		public string AdFormat { get; set; }
		
		/// <summary>
		/// Ad media type supported by this ad unit. Possible values as follows: "RICH_MEDIA" - Text, image, and other non-video media. "VIDEO" - Video media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adTypes")]
		public string[] AdTypes { get; set; }
		
		/// <summary>
		/// The externally visible ID of the ad unit which can be used to integrate with the AdMob SDK. This is a read only property. Example: ca-app-pub-9876543210987654/0123456789
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adUnitId")]
		public string AdUnitId { get; set; }
		
		/// <summary>
		/// The externally visible ID of the app this ad unit is associated with. Example: ca-app-pub-9876543210987654~0123456789
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// The display name of the ad unit as shown in the AdMob UI, which is provided by the user. The maximum length allowed is 80 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Resource name for this ad unit. Format is accounts/{publisher_id}/adUnits/{ad_unit_id_fragment} Example: accounts/pub-9876543210987654/adUnits/0123456789
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Settings for a rewarded ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardSettings")]
		public AdUnitRewardSettings RewardSettings { get; set; }
	}
	
	/// <summary>
	/// Settings for a rewarded ad unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdUnitRewardSettings
	{
		
		/// <summary>
		/// Reward amount for this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitAmount")]
		public string UnitAmount { get; set; }
		
		/// <summary>
		/// Reward item for this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitType")]
		public string UnitType { get; set; }
	}
	
	/// <summary>
	/// Settings to map an AdMob ad unit to a 3rd party ad unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdUnitMapping
	{
		
		/// <summary>
		/// Settings for the specified ad unit to make an ad request to 3rd party ad network. Key-value pairs with values set by the user for the keys requested by the ad network. Please see https://support.google.com/admob/answer/3245073 for details on how to configure the network settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adUnitConfigurations")]
		public System.Collections.Generic.Dictionary<string, string> AdUnitConfigurations { get; set; }
		
		/// <summary>
		/// The ID of mediation ad source adapter used by this ad unit mapping. The adapter determines the information needed in the ad_network_settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adapterId")]
		public string AdapterId { get; set; }
		
		/// <summary>
		/// Optional. The display name of this ad unit mapping instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Resource name of this ad unit mapping. Format is: accounts/{publisher_id}/adUnits/{ad_unit_id_fragment}/adUnitMappings/{ad_unit_mapping_id} Example: accounts/pub-1234567890123456/adUnits/0123456789/adUnitMappings/987654321
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The status of this ad unit mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<AdUnitMappingState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AdUnitMappingState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
	}
	
	/// <summary>
	/// Describes adapters supported by each mediation ad source. Adapters correspond to a specific SDK implementation of the ad source, and are each associated with a single platform and a list of supported ad unit formats. Adapters may also require setting some configurations to perform ad requests. Configurations can be specified in the AdUnitMapping by setting the [ad_unit_configurations](#AdUnitMapping.ad_unit_configurations) key/value pairs. For example, the ad_unit_configurations can be used to pass various IDs to the adapter's third-party SDK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Adapter
	{
		
		/// <summary>
		/// Output only. Configuration metadata associated with this adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adapterConfigMetadata")]
		public AdapterAdapterConfigMetadata[] AdapterConfigMetadata { get; set; }
		
		/// <summary>
		/// Output only. ID of this adapter. It is used to set [adapter_id](#AdUnitMapping.adapter_id).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adapterId")]
		public string AdapterId { get; set; }
		
		/// <summary>
		/// Output only. Indicates the formats of the ad units supported by this adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formats")]
		public string[] Formats { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the adapter. Format is: accounts/{publisher_id}/adSources/{ad_source_id}/adapters/{adapter_id}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Mobile application platform supported by this adapter. Supported values are: IOS, ANDROID, WINDOWS_PHONE
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		/// <summary>
		/// Output only. The display name of this adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Configuration metadata associated with this adapter. They are used to define the ad_unit_configurations associated with AdUnitMappings for the this adapter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdapterAdapterConfigMetadata
	{
		
		/// <summary>
		/// This is used to fill the key of the [ad_unit_configurations](#AdUnitMapping.ad_unit_configurations).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adapterConfigMetadataId")]
		public string AdapterConfigMetadataId { get; set; }
		
		/// <summary>
		/// Name of the adapter configuration metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adapterConfigMetadataLabel")]
		public string AdapterConfigMetadataLabel { get; set; }
		
		/// <summary>
		/// Whether this metadata is required for configuring the AdUnitMappings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isRequired")]
		public System.Nullable<System.Boolean> IsRequired { get; set; }
	}
	
	/// <summary>
	/// Describes an AdMob app for a specific platform (For example: Android or iOS).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class App
	{
		
		/// <summary>
		/// Output only. The approval state for the app. The field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appApprovalState")]
		public System.Nullable<AppAppApprovalState> AppApprovalState { get; set; }
		
		/// <summary>
		/// The externally visible ID of the app which can be used to integrate with the AdMob SDK. This is a read only property. Example: ca-app-pub-9876543210987654~0123456789
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Information from the app store if the app is linked to an app store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedAppInfo")]
		public AppLinkedAppInfo LinkedAppInfo { get; set; }
		
		/// <summary>
		/// Information provided for manual apps which are not linked to an application store (Example: Google Play, App Store).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualAppInfo")]
		public AppManualAppInfo ManualAppInfo { get; set; }
		
		/// <summary>
		/// Resource name for this app. Format is accounts/{publisher_id}/apps/{app_id_fragment} Example: accounts/pub-9876543210987654/apps/0123456789
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Describes the platform of the app. Limited to "IOS" and "ANDROID".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AppAppApprovalState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_APPROVAL_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_REVIEW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 3,
	}
	
	/// <summary>
	/// Information from the app store if the app is linked to an app store.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppLinkedAppInfo
	{
		
		/// <summary>
		/// Optional. The app store information for published Android apps. This field is only used for apps on the Android platform and will be ignored if the PLATFORM is set to iOS. The default value is the Google Play App store. This field can be updated after app is created. If the app is not published, this field will not be included in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidAppStores")]
		public string[] AndroidAppStores { get; set; }
		
		/// <summary>
		/// The app store ID of the app; present if and only if the app is linked to an app store. If the app is added to the Google Play store, it will be the application ID of the app. For example: "com.example.myapp". See https://developer.android.com/studio/build/application-id. If the app is added to the Apple App Store, it will be app store ID. For example "105169111". Note that setting the app store id is considered an irreversible action. Once an app is linked, it cannot be unlinked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appStoreId")]
		public string AppStoreId { get; set; }
		
		/// <summary>
		/// Output only. Display name of the app as it appears in the app store. This is an output-only field, and may be empty if the app cannot be found in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Information provided for manual apps which are not linked to an application store (Example: Google Play, App Store).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppManualAppInfo
	{
		
		/// <summary>
		/// The display name of the app as shown in the AdMob UI, which is provided by the user. The maximum length allowed is 80 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Request to create a batch of ad unit mappings under the specific AdMob account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateAdUnitMappingsRequest
	{
		
		/// <summary>
		/// Required. The request message specifying the ad unit mappings to create. A maximum of 100 ad unit mappings can be created in a batch. If the number of ad unit mappings in the batch request exceed 100, the entire request will be rejected and no ad unit mappings will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public CreateAdUnitMappingRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request to create an ad unit mapping under the specific AdMob account and ad unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAdUnitMappingRequest
	{
		
		/// <summary>
		/// Settings to map an AdMob ad unit to a 3rd party ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adUnitMapping")]
		public AdUnitMapping AdUnitMapping { get; set; }
		
		/// <summary>
		/// Required. The parent which owns the ad unit mapping. Format: accounts/{publisher_id}/adUnits/{ad_unit_id}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
	}
	
	/// <summary>
	/// Response containing a batch of created ad unit mappings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateAdUnitMappingsResponse
	{
		
		/// <summary>
		/// The Ad units mappings created under the requested account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adUnitMappings")]
		public AdUnitMapping[] AdUnitMappings { get; set; }
	}
	
	/// <summary>
	/// The specification for generating a Campaign report. For example, the specification to get IMPRESSIONS and CLICKS sliced by CAMPAIGN_ID can look like the following example: { "date_range": { "start_date": {"year": 2021, "month": 12, "day": 1}, "end_date": {"year": 2021, "month": 12, "day": 30} }, "dimensions": ["CAMPAIGN_ID"], "metrics": ["IMPRESSIONS", "CLICKS"], }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CampaignReportSpec
	{
		
		/// <summary>
		/// Specification of a single date range. Both dates are inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// List of dimensions of the report. The value combination of these dimensions determines the row of the report. If no dimensions are specified, the report returns a single row of requested metrics for the entire account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public string[] Dimensions { get; set; }
		
		/// <summary>
		/// Language used for any localized text, such as certain applicable dimension values. The language tag is defined in the IETF BCP47. Defaults to 'en-US' if unspecified or invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// List of metrics of the report. A report must specify at least one metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string[] Metrics { get; set; }
	}
	
	/// <summary>
	/// Specification of a single date range. Both dates are inclusive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateRange
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public Date EndDate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public Date StartDate { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// Request to generate campaign report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateCampaignReportRequest
	{
		
		/// <summary>
		/// The specification for generating a Campaign report. For example, the specification to get IMPRESSIONS and CLICKS sliced by CAMPAIGN_ID can look like the following example: { "date_range": { "start_date": {"year": 2021, "month": 12, "day": 1}, "end_date": {"year": 2021, "month": 12, "day": 30} }, "dimensions": ["CAMPAIGN_ID"], "metrics": ["IMPRESSIONS", "CLICKS"], }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportSpec")]
		public CampaignReportSpec ReportSpec { get; set; }
	}
	
	/// <summary>
	/// Campaign Report API response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateCampaignReportResponse
	{
		
		/// <summary>
		/// The campaign report data from the specified publisher. At most 100000 rows will be returned from the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public ReportRow[] Rows { get; set; }
	}
	
	/// <summary>
	/// A row of the returning report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportRow
	{
		
		/// <summary>
		/// Map of dimension values in a row, with keys as enum name of the dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionValues")]
		public System.Collections.Generic.Dictionary<string, ReportRowDimensionValue> DimensionValues { get; set; }
		
		/// <summary>
		/// Map of metric values in a row, with keys as enum name of the metrics. If a metric being requested has no value returned, the map will not include it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metricValues")]
		public System.Collections.Generic.Dictionary<string, ReportRowMetricValue> MetricValues { get; set; }
	}
	
	/// <summary>
	/// Representation of a dimension value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportRowDimensionValue
	{
		
		/// <summary>
		/// The localized string representation of the value. If unspecified, the display label should be derived from the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayLabel")]
		public string DisplayLabel { get; set; }
		
		/// <summary>
		/// Dimension value in the format specified in the report's spec Dimension enum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Representation of a metric value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportRowMetricValue
	{
		
		/// <summary>
		/// Double precision (approximate) decimal values. Rates are from 0 to 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		/// <summary>
		/// Metric integer value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integerValue")]
		public string IntegerValue { get; set; }
		
		/// <summary>
		/// Amount in micros. One million is equivalent to one unit. Currency value is in the unit (USD, EUR or other) specified by the request. For example, $6.50 whould be represented as 6500000 micros.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="microsValue")]
		public string MicrosValue { get; set; }
	}
	
	/// <summary>
	/// Request to generate an AdMob mediation report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateMediationReportRequest
	{
		
		/// <summary>
		/// The specification for generating an AdMob Mediation report. For example, the specification to get observed ECPM sliced by ad source and app for the 'US' and 'CN' countries can look like the following example: { "date_range": { "start_date": {"year": 2021, "month": 9, "day": 1}, "end_date": {"year": 2021, "month": 9, "day": 30} }, "dimensions": ["AD_SOURCE", "APP", "COUNTRY"], "metrics": ["OBSERVED_ECPM"], "dimension_filters": [ { "dimension": "COUNTRY", "matches_any": {"values": [{"value": "US", "value": "CN"}]} } ], "sort_conditions": [ {"dimension":"APP", order: "ASCENDING"} ], "localization_settings": { "currency_code": "USD", "language_code": "en-US" } } For a better understanding, you can treat the preceding specification like the following pseudo SQL: SELECT AD_SOURCE, APP, COUNTRY, OBSERVED_ECPM FROM MEDIATION_REPORT WHERE DATE >= '2021-09-01' AND DATE <= '2021-09-30' AND COUNTRY IN ('US', 'CN') GROUP BY AD_SOURCE, APP, COUNTRY ORDER BY APP ASC;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportSpec")]
		public MediationReportSpec ReportSpec { get; set; }
	}
	
	/// <summary>
	/// The specification for generating an AdMob Mediation report. For example, the specification to get observed ECPM sliced by ad source and app for the 'US' and 'CN' countries can look like the following example: { "date_range": { "start_date": {"year": 2021, "month": 9, "day": 1}, "end_date": {"year": 2021, "month": 9, "day": 30} }, "dimensions": ["AD_SOURCE", "APP", "COUNTRY"], "metrics": ["OBSERVED_ECPM"], "dimension_filters": [ { "dimension": "COUNTRY", "matches_any": {"values": [{"value": "US", "value": "CN"}]} } ], "sort_conditions": [ {"dimension":"APP", order: "ASCENDING"} ], "localization_settings": { "currency_code": "USD", "language_code": "en-US" } } For a better understanding, you can treat the preceding specification like the following pseudo SQL: SELECT AD_SOURCE, APP, COUNTRY, OBSERVED_ECPM FROM MEDIATION_REPORT WHERE DATE >= '2021-09-01' AND DATE <= '2021-09-30' AND COUNTRY IN ('US', 'CN') GROUP BY AD_SOURCE, APP, COUNTRY ORDER BY APP ASC;
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MediationReportSpec
	{
		
		/// <summary>
		/// Specification of a single date range. Both dates are inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// Describes which report rows to match based on their dimension values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilters")]
		public MediationReportSpecDimensionFilter[] DimensionFilters { get; set; }
		
		/// <summary>
		/// List of dimensions of the report. The value combination of these dimensions determines the row of the report. If no dimensions are specified, the report returns a single row of requested metrics for the entire account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public MediationReportSpecDimensionFilterDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Localization settings for reports, such as currency and language. It affects how metrics are calculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizationSettings")]
		public LocalizationSettings LocalizationSettings { get; set; }
		
		/// <summary>
		/// Maximum number of report data rows to return. If the value is not set, the API returns as many rows as possible, up to 100000. Acceptable values are 1-100000, inclusive. Values larger than 100000 return an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxReportRows")]
		public System.Nullable<System.Int32> MaxReportRows { get; set; }
		
		/// <summary>
		/// List of metrics of the report. A report must specify at least one metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string[] Metrics { get; set; }
		
		/// <summary>
		/// Describes the sorting of report rows. The order of the condition in the list defines its precedence; the earlier the condition, the higher its precedence. If no sort conditions are specified, the row ordering is undefined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortConditions")]
		public MediationReportSpecSortCondition[] SortConditions { get; set; }
		
		/// <summary>
		/// A report time zone. Accepts an IANA TZ name values, such as "America/Los_Angeles." If no time zone is defined, the account default takes effect. Check default value by the get account action. **Warning:** The "America/Los_Angeles" is the only supported value at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// Describes which report rows to match based on their dimension values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MediationReportSpecDimensionFilter
	{
		
		/// <summary>
		/// Applies the filter criterion to the specified dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public System.Nullable<MediationReportSpecDimensionFilterDimension> Dimension { get; set; }
		
		/// <summary>
		/// List of string values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchesAny")]
		public StringList MatchesAny { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediationReportSpecDimensionFilterDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIMENSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_SOURCE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_SOURCE_INSTANCE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_UNIT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIATION_GROUP = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTRY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORMAT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE_OS_VERSION = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GMA_SDK_VERSION = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_VERSION_NAME = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVING_RESTRICTION = 15,
	}
	
	/// <summary>
	/// List of string values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StringList
	{
		
		/// <summary>
		/// The string values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Localization settings for reports, such as currency and language. It affects how metrics are calculated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocalizationSettings
	{
		
		/// <summary>
		/// Currency code of the earning related metrics, which is the 3-letter code defined in ISO 4217. The daily average rate is used for the currency conversion. Defaults to the account currency code if unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Language used for any localized text, such as some dimension value display labels. The language tag defined in the IETF BCP47. Defaults to 'en-US' if unspecified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
	}
	
	/// <summary>
	/// Sorting direction to be applied on a dimension or a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MediationReportSpecSortCondition
	{
		
		/// <summary>
		/// Sort by the specified dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public MediationReportSpecDimensionFilterDimension Dimension { get; set; }
		
		/// <summary>
		/// Sort by the specified metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public System.Nullable<MediationReportSpecSortConditionMetric> Metric { get; set; }
		
		/// <summary>
		/// Sorting order of the dimension or metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<MediationReportSpecSortConditionOrder> Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediationReportSpecSortConditionMetric
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_REQUESTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLICKS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ESTIMATED_EARNINGS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPRESSIONS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPRESSION_CTR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATCHED_REQUESTS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATCH_RATE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBSERVED_ECPM = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediationReportSpecSortConditionOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SORT_ORDER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 2,
	}
	
	/// <summary>
	/// The streaming response for the AdMob mediation report where the first response contains the report header, then a stream of row responses, and finally a footer as the last response message. For example: [{ "header": { "date_range": { "start_date": {"year": 2018, "month": 9, "day": 1}, "end_date": {"year": 2018, "month": 9, "day": 1} }, "localization_settings": { "currency_code": "USD", "language_code": "en-US" } } }, { "row": { "dimension_values": { "DATE": {"value": "20180918"}, "APP": { "value": "ca-app-pub-8123415297019784~1001342552", "display_label": "My app name!" } }, "metric_values": { "ESTIMATED_EARNINGS": {"decimal_value": "1324746"} } } }, { "footer": {"matching_row_count": 1} }]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateMediationReportResponse
	{
		
		/// <summary>
		/// Groups data available after report generation, for example, warnings and row counts. Always sent as the last message in the stream response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footer")]
		public ReportFooter Footer { get; set; }
		
		/// <summary>
		/// Groups data helps to treat the generated report. Always sent as a first message in the stream response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ReportHeader Header { get; set; }
		
		/// <summary>
		/// A row of the returning report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="row")]
		public ReportRow Row { get; set; }
	}
	
	/// <summary>
	/// Groups data available after report generation, for example, warnings and row counts. Always sent as the last message in the stream response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportFooter
	{
		
		/// <summary>
		/// Total number of rows that matched the request. Warning: This count does NOT always match the number of rows in the response. Do not make that assumption when processing the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchingRowCount")]
		public string MatchingRowCount { get; set; }
		
		/// <summary>
		/// Warnings associated with generation of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public ReportWarning[] Warnings { get; set; }
	}
	
	/// <summary>
	/// Warnings associated with generation of the report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportWarning
	{
		
		/// <summary>
		/// Describes the details of the warning message, in English.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Type of the warning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ReportWarningType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReportWarningType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_BEFORE_ACCOUNT_TIMEZONE_CHANGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_DELAYED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPORT_CURRENCY_NOT_ACCOUNT_CURRENCY = 4,
	}
	
	/// <summary>
	/// Groups data helps to treat the generated report. Always sent as a first message in the stream response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportHeader
	{
		
		/// <summary>
		/// Specification of a single date range. Both dates are inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// Localization settings for reports, such as currency and language. It affects how metrics are calculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizationSettings")]
		public LocalizationSettings LocalizationSettings { get; set; }
		
		/// <summary>
		/// The report time zone. The value is a time-zone ID as specified by the CLDR project, for example, "America/Los_Angeles".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingTimeZone")]
		public string ReportingTimeZone { get; set; }
	}
	
	/// <summary>
	/// Request to generate an AdMob Network report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateNetworkReportRequest
	{
		
		/// <summary>
		/// The specification for generating an AdMob Network report. For example, the specification to get clicks and estimated earnings for only the 'US' and 'CN' countries can look like the following example: { 'date_range': { 'start_date': {'year': 2021, 'month': 9, 'day': 1}, 'end_date': {'year': 2021, 'month': 9, 'day': 30} }, 'dimensions': ['DATE', 'APP', 'COUNTRY'], 'metrics': ['CLICKS', 'ESTIMATED_EARNINGS'], 'dimension_filters': [ { 'dimension': 'COUNTRY', 'matches_any': {'values': [{'value': 'US', 'value': 'CN'}]} } ], 'sort_conditions': [ {'dimension':'APP', order: 'ASCENDING'}, {'metric':'CLICKS', order: 'DESCENDING'} ], 'localization_settings': { 'currency_code': 'USD', 'language_code': 'en-US' } } For a better understanding, you can treat the preceding specification like the following pseudo SQL: SELECT DATE, APP, COUNTRY, CLICKS, ESTIMATED_EARNINGS FROM NETWORK_REPORT WHERE DATE >= '2021-09-01' AND DATE <= '2021-09-30' AND COUNTRY IN ('US', 'CN') GROUP BY DATE, APP, COUNTRY ORDER BY APP ASC, CLICKS DESC;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportSpec")]
		public NetworkReportSpec ReportSpec { get; set; }
	}
	
	/// <summary>
	/// The specification for generating an AdMob Network report. For example, the specification to get clicks and estimated earnings for only the 'US' and 'CN' countries can look like the following example: { 'date_range': { 'start_date': {'year': 2021, 'month': 9, 'day': 1}, 'end_date': {'year': 2021, 'month': 9, 'day': 30} }, 'dimensions': ['DATE', 'APP', 'COUNTRY'], 'metrics': ['CLICKS', 'ESTIMATED_EARNINGS'], 'dimension_filters': [ { 'dimension': 'COUNTRY', 'matches_any': {'values': [{'value': 'US', 'value': 'CN'}]} } ], 'sort_conditions': [ {'dimension':'APP', order: 'ASCENDING'}, {'metric':'CLICKS', order: 'DESCENDING'} ], 'localization_settings': { 'currency_code': 'USD', 'language_code': 'en-US' } } For a better understanding, you can treat the preceding specification like the following pseudo SQL: SELECT DATE, APP, COUNTRY, CLICKS, ESTIMATED_EARNINGS FROM NETWORK_REPORT WHERE DATE >= '2021-09-01' AND DATE <= '2021-09-30' AND COUNTRY IN ('US', 'CN') GROUP BY DATE, APP, COUNTRY ORDER BY APP ASC, CLICKS DESC;
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkReportSpec
	{
		
		/// <summary>
		/// Specification of a single date range. Both dates are inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// Describes which report rows to match based on their dimension values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilters")]
		public NetworkReportSpecDimensionFilter[] DimensionFilters { get; set; }
		
		/// <summary>
		/// List of dimensions of the report. The value combination of these dimensions determines the row of the report. If no dimensions are specified, the report returns a single row of requested metrics for the entire account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public NetworkReportSpecDimensionFilterDimension[] Dimensions { get; set; }
		
		/// <summary>
		/// Localization settings for reports, such as currency and language. It affects how metrics are calculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localizationSettings")]
		public LocalizationSettings LocalizationSettings { get; set; }
		
		/// <summary>
		/// Maximum number of report data rows to return. If the value is not set, the API returns as many rows as possible, up to 100000. Acceptable values are 1-100000, inclusive. Values larger than 100000 return an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxReportRows")]
		public System.Nullable<System.Int32> MaxReportRows { get; set; }
		
		/// <summary>
		/// List of metrics of the report. A report must specify at least one metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string[] Metrics { get; set; }
		
		/// <summary>
		/// Describes the sorting of report rows. The order of the condition in the list defines its precedence; the earlier the condition, the higher its precedence. If no sort conditions are specified, the row ordering is undefined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortConditions")]
		public NetworkReportSpecSortCondition[] SortConditions { get; set; }
		
		/// <summary>
		/// A report time zone. Accepts an IANA TZ name values, such as "America/Los_Angeles." If no time zone is defined, the account default takes effect. Check default value by the get account action. **Warning:** The "America/Los_Angeles" is the only supported value at the moment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// Describes which report rows to match based on their dimension values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkReportSpecDimensionFilter
	{
		
		/// <summary>
		/// Applies the filter criterion to the specified dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public System.Nullable<NetworkReportSpecDimensionFilterDimension> Dimension { get; set; }
		
		/// <summary>
		/// List of string values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchesAny")]
		public StringList MatchesAny { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkReportSpecDimensionFilterDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIMENSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_UNIT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_TYPE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTRY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORMAT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE_OS_VERSION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GMA_SDK_VERSION = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_VERSION_NAME = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVING_RESTRICTION = 13,
	}
	
	/// <summary>
	/// Sorting direction to be applied on a dimension or a metric.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkReportSpecSortCondition
	{
		
		/// <summary>
		/// Sort by the specified dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public NetworkReportSpecDimensionFilterDimension Dimension { get; set; }
		
		/// <summary>
		/// Sort by the specified metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metric")]
		public System.Nullable<NetworkReportSpecSortConditionMetric> Metric { get; set; }
		
		/// <summary>
		/// Sorting order of the dimension or metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order")]
		public MediationReportSpecSortConditionOrder Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkReportSpecSortConditionMetric
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		METRIC_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_REQUESTS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLICKS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ESTIMATED_EARNINGS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPRESSIONS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPRESSION_CTR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPRESSION_RPM = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATCHED_REQUESTS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATCH_RATE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHOW_RATE = 9,
	}
	
	/// <summary>
	/// The streaming response for the AdMob Network report where the first response contains the report header, then a stream of row responses, and finally a footer as the last response message. For example: [{ "header": { "dateRange": { "startDate": {"year": 2018, "month": 9, "day": 1}, "endDate": {"year": 2018, "month": 9, "day": 1} }, "localizationSettings": { "currencyCode": "USD", "languageCode": "en-US" } } }, { "row": { "dimensionValues": { "DATE": {"value": "20180918"}, "APP": { "value": "ca-app-pub-8123415297019784~1001342552", displayLabel: "My app name!" } }, "metricValues": { "ESTIMATED_EARNINGS": {"microsValue": 6500000} } } }, { "footer": {"matchingRowCount": 1} }]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateNetworkReportResponse
	{
		
		/// <summary>
		/// Groups data available after report generation, for example, warnings and row counts. Always sent as the last message in the stream response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footer")]
		public ReportFooter Footer { get; set; }
		
		/// <summary>
		/// Groups data helps to treat the generated report. Always sent as a first message in the stream response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ReportHeader Header { get; set; }
		
		/// <summary>
		/// A row of the returning report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="row")]
		public ReportRow Row { get; set; }
	}
	
	/// <summary>
	/// Response for the ListAdSourcesRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdSourcesResponse
	{
		
		/// <summary>
		/// The ad sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adSources")]
		public AdSource[] AdSources { get; set; }
		
		/// <summary>
		/// Used to set the `page_token` in the `ListAdSourcesRequest` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response for the ListAdUnitMappingsRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdUnitMappingsResponse
	{
		
		/// <summary>
		/// The ad unit mappings from the specified account and ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adUnitMappings")]
		public AdUnitMapping[] AdUnitMappings { get; set; }
		
		/// <summary>
		/// Used to set the `page_token` in the `ListAdUnitMappingsRequest` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response for the ad units list request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdUnitsResponse
	{
		
		/// <summary>
		/// The resulting ad units for the requested account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adUnits")]
		public AdUnit[] AdUnits { get; set; }
		
		/// <summary>
		/// If not empty, indicates that there may be more ad units for the request; this value should be passed in a new `ListAdUnitsRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response for the ListAdaptersRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdaptersResponse
	{
		
		/// <summary>
		/// The adapter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adapters")]
		public Adapter[] Adapters { get; set; }
		
		/// <summary>
		/// Used to set the `page_token` in the `ListAdapterRequest` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response for the apps list request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAppsResponse
	{
		
		/// <summary>
		/// The resulting apps for the requested account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apps")]
		public App[] Apps { get; set; }
		
		/// <summary>
		/// If not empty, indicates that there may be more apps for the request; this value should be passed in a new `ListAppsRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response for the mediation groups list request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListMediationGroupsResponse
	{
		
		/// <summary>
		/// The resulting mediation groups for the requested account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediationGroups")]
		public MediationGroup[] MediationGroups { get; set; }
		
		/// <summary>
		/// If not empty, indicates that there may be more mediation groups for the request; this value should be passed in a new `ListMediationGroupsRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Describes an AdMob mediation group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MediationGroup
	{
		
		/// <summary>
		/// User provided name for the mediation group. The maximum length allowed is 120 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The state of the mediation a/b experiment that belongs to this mediation group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediationAbExperimentState")]
		public System.Nullable<MediationGroupMediationAbExperimentState> MediationAbExperimentState { get; set; }
		
		/// <summary>
		/// The ID of the mediation group. Example: "0123456789". This is a read only property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediationGroupId")]
		public string MediationGroupId { get; set; }
		
		/// <summary>
		/// The mediation lines used for serving for this mediation group. Key is the ID of the mediation group line. For creation, use distinct negative values as placeholder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediationGroupLines")]
		public System.Collections.Generic.Dictionary<string, MediationGroupMediationGroupLine> MediationGroupLines { get; set; }
		
		/// <summary>
		/// Resource name for this mediation group. Format is: accounts/{publisher_id}/mediationGroups/{mediation_group_id} Example: accounts/pub-9876543210987654/mediationGroups/0123456789
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The status of the mediation group. Only enabled mediation groups will be served.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<MediationGroupState> State { get; set; }
		
		/// <summary>
		/// Set of criteria targeted by this mediation group. For example, a mediation group can target specific ad unit IDs, platform, format and geo location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targeting")]
		public MediationGroupTargeting Targeting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediationGroupMediationAbExperimentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIMENT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_RUNNING = 2,
	}
	
	/// <summary>
	/// Settings for an ad network used by a mediation group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MediationGroupMediationGroupLine
	{
		
		/// <summary>
		/// The ID of the ad source this mediation line is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adSourceId")]
		public string AdSourceId { get; set; }
		
		/// <summary>
		/// References of the ad unit mappings for each ad unit associated with this mediation line. Key is the ad unit ID, value is resource name of the ad unit mapping. For mediation lines where the ad source id is the AdMob Network, ad unit mappings will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adUnitMappings")]
		public System.Collections.Generic.Dictionary<string, string> AdUnitMappings { get; set; }
		
		/// <summary>
		/// The CPM for this allocation line. $0.01 is the minimum allowed amount. For LIVE CPM modes, the default amount is $0.01. This value is ignored if `cpm_mode` is `LIVE`. **Warning:** "USD" is the only supported currency at the moment. The unit is in micros.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpmMicros")]
		public string CpmMicros { get; set; }
		
		/// <summary>
		/// Indicates how the CPM for this mediation line is provided. Note that `MANUAL` and `LIVE` are the only fully-supported mode at the moment. Please use the AdMob UI (https://admob.google.com) if you wish to create or update to other cpm modes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpmMode")]
		public System.Nullable<MediationGroupMediationGroupLineCpmMode> CpmMode { get; set; }
		
		/// <summary>
		/// User-provided label for this mediation line. The maximum length allowed is 255 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The Mediation A/B experiment variant to which the mediation group line belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="experimentVariant")]
		public System.Nullable<MediationGroupMediationGroupLineExperimentVariant> ExperimentVariant { get; set; }
		
		/// <summary>
		/// The 16 digit ID for this mediation line e.g. 0123456789012345. When creating a new mediation group line, use a distinct negative integer as the ID place holder.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The status of the mediation group line. Only enabled mediation group lines will be served.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<MediationGroupMediationGroupLineState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediationGroupMediationGroupLineCpmMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CPM_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANO = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediationGroupMediationGroupLineExperimentVariant
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIANT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIANT_A = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIANT_B = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORIGINAL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediationGroupMediationGroupLineState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMOVED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediationGroupState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 2,
	}
	
	/// <summary>
	/// Set of criteria targeted by this mediation group. For example, a mediation group can target specific ad unit IDs, platform, format and geo location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MediationGroupTargeting
	{
		
		/// <summary>
		/// Ad units targeted by this mediation group. Example: "ca-app-pub-1234/8790".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adUnitIds")]
		public string[] AdUnitIds { get; set; }
		
		/// <summary>
		/// The Unicode country/region code (CLDR) of a location, such as "US". Unset if this mediation group does not exclude any region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedRegionCodes")]
		public string[] ExcludedRegionCodes { get; set; }
		
		/// <summary>
		/// Ad format targeted by this mediation group. Examples: "banner", "native".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		/// <summary>
		/// The parameter can be used to target ad requests based on the availability of the IDFA. If set to ALL, the mediation group applies to all ad requests (with or without IDFA). If set to AVAILABLE, the mediation group applies to ad requests with IDFA. If set to NOT_AVAILABLE, the mediation group applies to ad requests without IDFA. Doesn't need to be specified for an ANDROID device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idfaTargeting")]
		public System.Nullable<MediationGroupTargetingIdfaTargeting> IdfaTargeting { get; set; }
		
		/// <summary>
		/// Describes the platform of the app. Examples: "IOS", "Android".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public string Platform { get; set; }
		
		/// <summary>
		/// The Unicode country/region code (CLDR) of a location, such as "US". Unset if this mediation group targets all available regions. For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetedRegionCodes")]
		public string[] TargetedRegionCodes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediationGroupTargetingIdfaTargeting
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDFA_TARGETING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_AVAILABLE = 3,
	}
	
	/// <summary>
	/// Response for the publisher account list request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPublisherAccountsResponse
	{
		
		/// <summary>
		/// Publisher that the client credentials can access.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account")]
		public PublisherAccount[] Account { get; set; }
		
		/// <summary>
		/// If not empty, indicates that there might be more accounts for the request; you must pass this value in a new `ListPublisherAccountsRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A publisher account contains information relevant to the use of this API, such as the time zone used for the reports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublisherAccount
	{
		
		/// <summary>
		/// Currency code of the earning-related metrics, which is the 3-letter code defined in ISO 4217. The daily average rate is used for the currency conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Resource name of this account. Format is accounts/{publisher_id}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The unique ID by which this publisher account can be identified in the API requests (for example, pub-1234567890).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherId")]
		public string PublisherId { get; set; }
		
		/// <summary>
		/// The time zone that is used in reports that are generated for this account. The value is a time-zone ID as specified by the CLDR project, for example, "America/Los_Angeles".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingTimeZone")]
		public string ReportingTimeZone { get; set; }
	}
	
	/// <summary>
	/// The mediation A/B experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MediationAbExperiment
	{
		
		/// <summary>
		/// Output only. The experiment mediation lines for control. They are inherited from the parent mediation group. It is an output only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="controlMediationLines")]
		public MediationAbExperimentExperimentMediationLine[] ControlMediationLines { get; set; }
		
		/// <summary>
		/// The display name for the mediation A/B experiment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The time at which the experiment was ended or target to end (in UTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. Unique identifier for the mediation A/B experiment. It is an output only property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="experimentId")]
		public string ExperimentId { get; set; }
		
		/// <summary>
		/// Output only. The mediation group id this experiment belongs to. This can be used for filtering the experiments in the list experiments API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediationGroupId")]
		public string MediationGroupId { get; set; }
		
		/// <summary>
		/// Resource name for this experiment. The format is accounts/{publisher_id}/ mediationGroups/{mediation_group_id}/mediationAbExperiment/ {mediation_group_experiment_id}. For example: accounts/pub-9876543210987654/mediationGroups/0123456789/ mediationAbExperiment/12345
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The time at which the experiment was started (in UTC).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Output only. The state of the experiment. It is an output only field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<MediationAbExperimentState> State { get; set; }
		
		/// <summary>
		/// The experiment mediation lines created for the treatment. They will be used for serving when the experiment status is RUNNING.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treatmentMediationLines")]
		public MediationAbExperimentExperimentMediationLine[] TreatmentMediationLines { get; set; }
		
		/// <summary>
		/// The percentage of the mediation A/B experiment traffic that will be send to the treatment (variant B). The remainder is sent to the control (variant A). The percentage is expressed as an integer in the inclusive range of [1,99]. See https://support.google.com/admob/answer/9572326 for details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treatmentTrafficPercentage")]
		public string TreatmentTrafficPercentage { get; set; }
		
		/// <summary>
		/// Output only. The variant leader for the experiment according to some key metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variantLeader")]
		public System.Nullable<MediationAbExperimentVariantLeader> VariantLeader { get; set; }
	}
	
	/// <summary>
	/// The mediation group line for the experiment. It will be used for serving during the run of the experiment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MediationAbExperimentExperimentMediationLine
	{
		
		/// <summary>
		/// Settings for an ad network used by a mediation group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediationGroupLine")]
		public MediationGroupMediationGroupLine MediationGroupLine { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediationAbExperimentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPERIMENT_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MediationAbExperimentVariantLeader
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIANT_LEADER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTROL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TREATMENT = 2,
	}
	
	/// <summary>
	/// Request to end the mediation A/B experiment and choose a winning variant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopMediationAbExperimentRequest
	{
		
		/// <summary>
		/// The choice for the winning variant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variantChoice")]
		public System.Nullable<StopMediationAbExperimentRequestVariantChoice> VariantChoice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StopMediationAbExperimentRequestVariantChoice
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIANT_CHOICE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIANT_CHOICE_A = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIANT_CHOICE_B = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the AdMob publisher account that was most recently signed in to from the AdMob UI. For more information, see https://support.google.com/admob/answer/10243672.
		/// Admob_accounts_list v1beta/accounts
		/// </summary>
		/// <param name="pageSize">Maximum number of accounts to return.</param>
		/// <param name="pageToken">The value returned by the last `ListPublisherAccountsResponse`; indicates that this is a continuation of a prior `ListPublisherAccounts` call, and that the system should return the next page of data.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPublisherAccountsResponse> Admob_accounts_listAsync(int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/accounts?pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListPublisherAccountsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets information about the specified AdMob publisher account.
		/// Admob_accounts_get v1beta/{name}
		/// </summary>
		/// <param name="name">Resource name of the publisher account to retrieve. Example: accounts/pub-9876543210987654</param>
		/// <returns>Successful response</returns>
		public async Task<PublisherAccount> Admob_accounts_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PublisherAccount>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update the specified mediation group under the specified AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
		/// Admob_accounts_mediationGroups_patch v1beta/{name}
		/// </summary>
		/// <param name="name">Resource name for this mediation group. Format is: accounts/{publisher_id}/mediationGroups/{mediation_group_id} Example: accounts/pub-9876543210987654/mediationGroups/0123456789</param>
		/// <param name="updateMask">List of mediation group fields to be updated. Updates to repeated fields such as items in a list will fully replace the existing value(s) with the new value(s). Updates to individual values in a map can be done by indexing by the key. The following field masks are supported for mediation group updates: - "mediation_group_lines[\"{mediation_group_line_id}\"]" clang-format off - "mediation_group_lines[\"{mediation_group_line_id}\"].ad_unit_mappings[\"{ad_unit_id}\"]" clang-format on - "mediation_group_lines[\"{mediation_group_line_id}\"].cpm_micros" - "mediation_group_lines[\"{mediation_group_line_id}\"].cpm_mode" - "mediation_group_lines[\"{mediation_group_line_id}\"].state" - "mediation_group_lines[\"{mediation_group_line_id}\"].display_name" - "targeting.ad_unit_ids" To update a mediation group with a new mediation group line, use a distinct negative number for the "mediation_group_line_id". For Example: update_mask { paths: "mediation_group_lines[\"123456789012345\"].cpm_micros" }</param>
		/// <returns>Successful response</returns>
		public async Task<MediationGroup> Admob_accounts_mediationGroups_patchAsync(string name, string updateMask, MediationGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MediationGroup>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Stop the mediation A/B experiment and choose a variant. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
		/// Admob_accounts_mediationGroups_mediationAbExperiments_stop v1beta/{name}:stop
		/// </summary>
		/// <param name="name">Name of the mediation group, the experiment for which to choose a variant for. Example: accounts/pub-9876543210987654/mediationGroups/0123456789/ mediationAbExperiments</param>
		/// <returns>Successful response</returns>
		public async Task<MediationAbExperiment> Admob_accounts_mediationGroups_mediationAbExperiments_stopAsync(string name, StopMediationAbExperimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":stop";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MediationAbExperiment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List the ad sources.
		/// Admob_accounts_adSources_list v1beta/{parent}/adSources
		/// </summary>
		/// <param name="parent">Required. The parent which owns this collection of ad sources. Format: accounts/{publisher_id}</param>
		/// <param name="pageSize">The maximum number of ad sources to return. If unspecified or 0, at most 10,000 ad sources will be returned. The maximum value is 20,000; values above 10,000 will be coerced to 20,000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListAdSources` call. Provide this to retrieve the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAdSourcesResponse> Admob_accounts_adSources_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adSources&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAdSourcesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List ad unit mappings under the specified AdMob account and ad unit. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
		/// Admob_accounts_adUnits_adUnitMappings_list v1beta/{parent}/adUnitMappings
		/// </summary>
		/// <param name="parent">Required. The parent which owns this collection of ad unit mappings. Format: accounts/{publisher_id}/adUnits/{ad_unit_id}</param>
		/// <param name="filter">The filter string that uses [EBNF grammar syntax](https://google.aip.dev/assets/misc/ebnf-filtering.txt). Possible field to filter by is: - "DISPLAY_NAME" Possible filter function is: - `IN`: Used to filter fields that represent a singleton including "DISPLAY_NAME". The filter functions can be added together using `AND`. `OR` functionality is not supported. Example: filter: IN(DISPLAY_NAME, "Test Ad Unit Mapping 1", "Test Ad Unit Mapping 2")</param>
		/// <param name="pageSize">The maximum number of ad unit mappings to return. If unspecified or 0, at most 10,000 ad unit mappings will be returned. The maximum value is 20,000; values above 20,000 will be coerced to 20,000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListAdUnitMappings` call. Provide this to retrieve the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAdUnitMappingsResponse> Admob_accounts_adUnits_adUnitMappings_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adUnitMappings&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAdUnitMappingsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create an ad unit mapping under the specific AdMob account and ad unit. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
		/// Admob_accounts_adUnits_adUnitMappings_create v1beta/{parent}/adUnitMappings
		/// </summary>
		/// <param name="parent">Required. The parent which owns the ad unit mapping. Format: accounts/{publisher_id}/adUnits/{ad_unit_id}</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnitMapping> Admob_accounts_adUnits_adUnitMappings_createAsync(string parent, AdUnitMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adUnitMappings";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AdUnitMapping>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Batch create the ad unit mappings under the specific AdMob account. The maximum allowed batch size is 100. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
		/// Admob_accounts_adUnitMappings_batchCreate v1beta/{parent}/adUnitMappings:batchCreate
		/// </summary>
		/// <param name="parent">Required. The AdMob account which owns this collection of ad unit mappings. Format: accounts/{publisher_id} See https://support.google.com/admob/answer/2784578 for instructions on how to find your AdMob publisher ID.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchCreateAdUnitMappingsResponse> Admob_accounts_adUnitMappings_batchCreateAsync(string parent, BatchCreateAdUnitMappingsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adUnitMappings:batchCreate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<BatchCreateAdUnitMappingsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List the ad units under the specified AdMob account.
		/// Admob_accounts_adUnits_list v1beta/{parent}/adUnits
		/// </summary>
		/// <param name="parent">Required. Resource name of the account to list ad units for. Example: accounts/pub-9876543210987654</param>
		/// <param name="pageSize">The maximum number of ad units to return. If unspecified or 0, at most 10,000 ad units will be returned. The maximum value is 20,000; values above 20,000 will be coerced to 20,000.</param>
		/// <param name="pageToken">The value returned by the last `ListAdUnitsResponse`; indicates that this is a continuation of a prior `ListAdUnits` call, and that the system should return the next page of data.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAdUnitsResponse> Admob_accounts_adUnits_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adUnits&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAdUnitsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an ad unit under the specified AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
		/// Admob_accounts_adUnits_create v1beta/{parent}/adUnits
		/// </summary>
		/// <param name="parent">Required. Resource name of the account to create the specified ad unit for. Example: accounts/pub-9876543210987654</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnit> Admob_accounts_adUnits_createAsync(string parent, AdUnit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adUnits";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AdUnit>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List the adapters of the ad source.
		/// Admob_accounts_adSources_adapters_list v1beta/{parent}/adapters
		/// </summary>
		/// <param name="parent">Required. The parent which owns this collection of adapters. Format: accounts/{publisher_id}/adSources/{ad_source_id}</param>
		/// <param name="pageSize">The maximum number of adapters to return. If unspecified or 0, at most 10,000 adapters will be returned. The maximum value is 20,000; values above 20,000 will be coerced to 20,000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListAdapters` call. Provide this to retrieve the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAdaptersResponse> Admob_accounts_adSources_adapters_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adapters&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAdaptersResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List the apps under the specified AdMob account.
		/// Admob_accounts_apps_list v1beta/{parent}/apps
		/// </summary>
		/// <param name="parent">Required. Resource name of the account to list apps for. Example: accounts/pub-9876543210987654</param>
		/// <param name="pageSize">The maximum number of apps to return. If unspecified or 0, at most 10,000 apps will be returned. The maximum value is 20,000; values above 20,000 will be coerced to 20,000.</param>
		/// <param name="pageToken">The value returned by the last `ListAppsResponse`; indicates that this is a continuation of a prior `ListApps` call, and that the system should return the next page of data.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAppsResponse> Admob_accounts_apps_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/apps&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListAppsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates an app under the specified AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
		/// Admob_accounts_apps_create v1beta/{parent}/apps
		/// </summary>
		/// <param name="parent">Required. Resource name of the account for which the app is being created. Example: accounts/pub-9876543210987654</param>
		/// <returns>Successful response</returns>
		public async Task<App> Admob_accounts_apps_createAsync(string parent, App requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/apps";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<App>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generates Campaign Report based on provided specifications.
		/// Admob_accounts_campaignReport_generate v1beta/{parent}/campaignReport:generate
		/// </summary>
		/// <param name="parent">Resource name of the account to generate the report for. Example: accounts/pub-9876543210987654</param>
		/// <returns>Successful response</returns>
		public async Task<GenerateCampaignReportResponse> Admob_accounts_campaignReport_generateAsync(string parent, GenerateCampaignReportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/campaignReport:generate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GenerateCampaignReportResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create an A/B testing experiment for a specified AdMob account and a mediation group. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
		/// Admob_accounts_mediationGroups_mediationAbExperiments_create v1beta/{parent}/mediationAbExperiments
		/// </summary>
		/// <param name="parent">Required. The parent which owns the mediation group. Format: accounts/{publisher_id}/mediationGroups/{mediation_group_id}</param>
		/// <returns>Successful response</returns>
		public async Task<MediationAbExperiment> Admob_accounts_mediationGroups_mediationAbExperiments_createAsync(string parent, MediationAbExperiment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/mediationAbExperiments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MediationAbExperiment>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List mediation groups under the specified AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
		/// Admob_accounts_mediationGroups_list v1beta/{parent}/mediationGroups
		/// </summary>
		/// <param name="parent">Required. Resource name of the account to list mediation groups for. Example: accounts/pub-9876543210987654</param>
		/// <param name="filter">The filter string that uses [EBNF grammar syntax](https://google.aip.dev/assets/misc/ebnf-filtering.txt). Possible fields to filter by are: - "AD_SOURCE_IDS" - "AD_UNIT_IDS" - "APP_IDS" - "DISPLAY_NAME" - "FORMAT" - "MEDIATION_GROUP_ID" - "PLATFORM" - "STATE" - "TARGETED_REGION_CODES" Possible filter functions are: - `IN`: Used to filter fields that represent a singleton including "MEDIATION_GROUP_ID", "DISPLAY_NAME", "STATE", "PLATFORM", and "FORMAT". - `CONTAINS_ANY`: Used to filter fields that represent a collection including "AD_SOURCE_IDS", "AD_UNIT_IDS", "APP_IDS", and "TARGETED_REGION_CODES". The filter functions can be added together using `AND`. `OR` functionality is not supported. Example: filter: IN(DISPLAY_NAME, "Test Group 1", "Test Group 2") AND IN(PLATFORM, "ANDROID") AND CONTAINS_ANY(AD_SOURCE_IDS, "5450213213286189855")</param>
		/// <param name="pageSize">The maximum number of mediation groups to return. If unspecified or 0, at most 10,000 mediation groups will be returned. The maximum value is 20,000; values above 20,000 will be coerced to 20,000.</param>
		/// <param name="pageToken">The value returned by the last `ListMediationGroupsResponse`; indicates that this is a continuation of a prior `ListMediationGroups` call, and that the system should return the next page of data.</param>
		/// <returns>Successful response</returns>
		public async Task<ListMediationGroupsResponse> Admob_accounts_mediationGroups_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/mediationGroups&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListMediationGroupsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a mediation group under the specific AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
		/// Admob_accounts_mediationGroups_create v1beta/{parent}/mediationGroups
		/// </summary>
		/// <param name="parent">Required. The parent which owns the mediation group. Format: accounts/{publisher_id}</param>
		/// <returns>Successful response</returns>
		public async Task<MediationGroup> Admob_accounts_mediationGroups_createAsync(string parent, MediationGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/mediationGroups";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<MediationGroup>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generates an AdMob mediation report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses.
		/// Admob_accounts_mediationReport_generate v1beta/{parent}/mediationReport:generate
		/// </summary>
		/// <param name="parent">Resource name of the account to generate the report for. Example: accounts/pub-9876543210987654</param>
		/// <returns>Successful response</returns>
		public async Task<GenerateMediationReportResponse> Admob_accounts_mediationReport_generateAsync(string parent, GenerateMediationReportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/mediationReport:generate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GenerateMediationReportResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Generates an AdMob Network report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses.
		/// Admob_accounts_networkReport_generate v1beta/{parent}/networkReport:generate
		/// </summary>
		/// <param name="parent">Resource name of the account to generate the report for. Example: accounts/pub-9876543210987654</param>
		/// <returns>Successful response</returns>
		public async Task<GenerateNetworkReportResponse> Admob_accounts_networkReport_generateAsync(string parent, GenerateNetworkReportRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/networkReport:generate";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GenerateNetworkReportResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
