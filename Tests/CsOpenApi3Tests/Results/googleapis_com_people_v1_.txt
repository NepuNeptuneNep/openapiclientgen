//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A person's physical address. May be a P.O. box or street address. All fields are optional.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Address
	{
		
		/// <summary>
		/// The city of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// The country of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country code of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// The extended address of the address; for example, the apartment number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extendedAddress")]
		public string ExtendedAddress { get; set; }
		
		/// <summary>
		/// Output only. The type of the address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedType")]
		public string FormattedType { get; set; }
		
		/// <summary>
		/// The unstructured value of the address. If this is not set by the user it will be automatically constructed from structured values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedValue")]
		public string FormattedValue { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The P.O. box of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poBox")]
		public string PoBox { get; set; }
		
		/// <summary>
		/// The postal code of the address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// The region of the address; for example, the state or province.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// The street address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetAddress")]
		public string StreetAddress { get; set; }
		
		/// <summary>
		/// The type of the address. The type can be custom or one of these predefined values: * `home` * `work` * `other`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Metadata about a field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FieldMetadata
	{
		
		/// <summary>
		/// Output only. True if the field is the primary field for all sources in the person. Each person will have at most one field with `primary` set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public System.Nullable<System.Boolean> Primary { get; set; }
		
		/// <summary>
		/// The source of a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
		
		/// <summary>
		/// True if the field is the primary field for the source. Each source must have at most one field with `source_primary` set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourcePrimary")]
		public System.Nullable<System.Boolean> SourcePrimary { get; set; }
		
		/// <summary>
		/// Output only. True if the field is verified; false if the field is unverified. A verified field is typically a name, email address, phone number, or website that has been confirmed to be owned by the person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public System.Nullable<System.Boolean> Verified { get; set; }
	}
	
	/// <summary>
	/// The source of a field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Source
	{
		
		/// <summary>
		/// **Only populated in `person.metadata.sources`.** The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the source. Used for web cache validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The unique identifier within the source type generated by the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The metadata about a profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileMetadata")]
		public ProfileMetadata ProfileMetadata { get; set; }
		
		/// <summary>
		/// The source type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SourceType> Type { get; set; }
		
		/// <summary>
		/// Output only. **Only populated in `person.metadata.sources`.** Last update timestamp of this source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// The metadata about a profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProfileMetadata
	{
		
		/// <summary>
		/// Output only. The profile object type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public System.Nullable<ProfileMetadataObjectType> ObjectType { get; set; }
		
		/// <summary>
		/// Output only. The user types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userTypes")]
		public string[] UserTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProfileMetadataObjectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAGE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROFILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_PROFILE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_CONTACT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN_CONTACT = 6,
	}
	
	/// <summary>
	/// A person's age range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgeRangeType
	{
		
		/// <summary>
		/// The age range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ageRange")]
		public System.Nullable<AgeRangeTypeAgeRange> AgeRange { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AgeRangeTypeAgeRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE_RANGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LESS_THAN_EIGHTEEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EIGHTEEN_TO_TWENTY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TWENTY_ONE_OR_OLDER = 3,
	}
	
	/// <summary>
	/// A request to create a batch of contacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateContactsRequest
	{
		
		/// <summary>
		/// Required. The contact to create. Allows up to 200 contacts in a single request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public ContactToCreate[] Contacts { get; set; }
		
		/// <summary>
		/// Required. A field mask to restrict which fields on each person are returned in the response. Multiple fields can be specified by separating them with commas. If read mask is left empty, the post-mutate-get is skipped and no data will be returned in the response. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readMask")]
		public string ReadMask { get; set; }
		
		/// <summary>
		/// Optional. A mask of what source types to return in the post mutate read. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public string[] Sources { get; set; }
	}
	
	/// <summary>
	/// A wrapper that contains the person data to populate a newly created source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactToCreate
	{
		
		/// <summary>
		/// Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactPerson")]
		public Person ContactPerson { get; set; }
	}
	
	/// <summary>
	/// Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Person
	{
		
		/// <summary>
		/// The person's street addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addresses")]
		public Address[] Addresses { get; set; }
		
		/// <summary>
		/// Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ageRange")]
		public AgeRangeTypeAgeRange AgeRange { get; set; }
		
		/// <summary>
		/// Output only. The person's age ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ageRanges")]
		public AgeRangeType[] AgeRanges { get; set; }
		
		/// <summary>
		/// The person's biographies. This field is a singleton for contact sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="biographies")]
		public Biography[] Biographies { get; set; }
		
		/// <summary>
		/// The person's birthdays. This field is a singleton for contact sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthdays")]
		public Birthday[] Birthdays { get; set; }
		
		/// <summary>
		/// **DEPRECATED**: No data will be returned The person's bragging rights.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="braggingRights")]
		public BraggingRights[] BraggingRights { get; set; }
		
		/// <summary>
		/// The person's calendar URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calendarUrls")]
		public CalendarUrl[] CalendarUrls { get; set; }
		
		/// <summary>
		/// The person's client data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientData")]
		public ClientData[] ClientData { get; set; }
		
		/// <summary>
		/// Output only. The person's cover photos.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverPhotos")]
		public CoverPhoto[] CoverPhotos { get; set; }
		
		/// <summary>
		/// The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddresses")]
		public EmailAddress[] EmailAddresses { get; set; }
		
		/// <summary>
		/// The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The person's events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public Event[] Events { get; set; }
		
		/// <summary>
		/// The person's external IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalIds")]
		public ExternalId[] ExternalIds { get; set; }
		
		/// <summary>
		/// The person's file-ases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileAses")]
		public FileAs[] FileAses { get; set; }
		
		/// <summary>
		/// The person's genders. This field is a singleton for contact sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genders")]
		public Gender[] Genders { get; set; }
		
		/// <summary>
		/// The person's instant messaging clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imClients")]
		public ImClient[] ImClients { get; set; }
		
		/// <summary>
		/// The person's interests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interests")]
		public Interest[] Interests { get; set; }
		
		/// <summary>
		/// The person's locale preferences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locales")]
		public Locale[] Locales { get; set; }
		
		/// <summary>
		/// The person's locations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The person's group memberships.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberships")]
		public Membership[] Memberships { get; set; }
		
		/// <summary>
		/// The metadata about a person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public PersonMetadata Metadata { get; set; }
		
		/// <summary>
		/// The person's miscellaneous keywords.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="miscKeywords")]
		public MiscKeyword[] MiscKeywords { get; set; }
		
		/// <summary>
		/// The person's names. This field is a singleton for contact sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="names")]
		public Name[] Names { get; set; }
		
		/// <summary>
		/// The person's nicknames.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nicknames")]
		public Nickname[] Nicknames { get; set; }
		
		/// <summary>
		/// The person's occupations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occupations")]
		public Occupation[] Occupations { get; set; }
		
		/// <summary>
		/// The person's past or current organizations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organizations")]
		public Organization[] Organizations { get; set; }
		
		/// <summary>
		/// The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumbers")]
		public PhoneNumber[] PhoneNumbers { get; set; }
		
		/// <summary>
		/// Output only. The person's photos.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public Photo[] Photos { get; set; }
		
		/// <summary>
		/// The person's relations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relations")]
		public Relation[] Relations { get; set; }
		
		/// <summary>
		/// Output only. **DEPRECATED**: No data will be returned The person's relationship interests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationshipInterests")]
		public RelationshipInterest[] RelationshipInterests { get; set; }
		
		/// <summary>
		/// Output only. **DEPRECATED**: No data will be returned The person's relationship statuses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relationshipStatuses")]
		public RelationshipStatus[] RelationshipStatuses { get; set; }
		
		/// <summary>
		/// **DEPRECATED**: (Please use `person.locations` instead) The person's residences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="residences")]
		public Residence[] Residences { get; set; }
		
		/// <summary>
		/// The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// The person's SIP addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sipAddresses")]
		public SipAddress[] SipAddresses { get; set; }
		
		/// <summary>
		/// The person's skills.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skills")]
		public Skill[] Skills { get; set; }
		
		/// <summary>
		/// Output only. **DEPRECATED**: No data will be returned The person's taglines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taglines")]
		public Tagline[] Taglines { get; set; }
		
		/// <summary>
		/// The person's associated URLs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public Url[] Urls { get; set; }
		
		/// <summary>
		/// The person's user defined data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userDefined")]
		public UserDefined[] UserDefined { get; set; }
	}
	
	/// <summary>
	/// A person's short biography.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Biography
	{
		
		/// <summary>
		/// The content type of the biography.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public System.Nullable<BiographyContentType> ContentType { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The short biography.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BiographyContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_PLAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_HTML = 2,
	}
	
	/// <summary>
	/// A person's birthday. At least one of the `date` and `text` fields are specified. The `date` and `text` fields typically represent the same date, but are not guaranteed to. Clients should always set the `date` field when mutating birthdays.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Birthday
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// Prefer to use the `date` field if set. A free-form string representing the user's birthday. This value is not validated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// **DEPRECATED**: No data will be returned A person's bragging rights.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BraggingRights
	{
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The bragging rights; for example, `climbed mount everest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A person's calendar URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CalendarUrl
	{
		
		/// <summary>
		/// Output only. The type of the calendar URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedType")]
		public string FormattedType { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The type of the calendar URL. The type can be custom or one of these predefined values: * `home` * `freeBusy` * `work`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The calendar URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Arbitrary client data that is populated by clients. Duplicate keys and values are allowed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientData
	{
		
		/// <summary>
		/// The client specified key of the client data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The client specified value of the client data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A person's cover photo. A large image shown on the person's profile page that represents who they are or what they care about.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CoverPhoto
	{
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The URL of the cover photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A person's email address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmailAddress
	{
		
		/// <summary>
		/// The display name of the email.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The type of the email address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedType")]
		public string FormattedType { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The type of the email address. The type can be custom or one of these predefined values: * `home` * `work` * `other`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An event related to the person.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public Date Date { get; set; }
		
		/// <summary>
		/// Output only. The type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedType")]
		public string FormattedType { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The type of the event. The type can be custom or one of these predefined values: * `anniversary` * `other`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An identifier from an external entity related to the person.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalId
	{
		
		/// <summary>
		/// Output only. The type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedType")]
		public string FormattedType { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The type of the external ID. The type can be custom or one of these predefined values: * `account` * `customer` * `loginId` * `network` * `organization`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The value of the external ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The name that should be used to sort the person in a list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileAs
	{
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The file-as value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A person's gender.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Gender
	{
		
		/// <summary>
		/// Free form text field for pronouns that should be used to address the person. Common values are: * `he`/`him` * `she`/`her` * `they`/`them`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addressMeAs")]
		public string AddressMeAs { get; set; }
		
		/// <summary>
		/// Output only. The value of the gender translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale. Unspecified or custom value are not localized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedValue")]
		public string FormattedValue { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The gender for the person. The gender can be custom or one of these predefined values: * `male` * `female` * `unspecified`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A person's instant messaging client.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImClient
	{
		
		/// <summary>
		/// Output only. The protocol of the IM client formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedProtocol")]
		public string FormattedProtocol { get; set; }
		
		/// <summary>
		/// Output only. The type of the IM client translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedType")]
		public string FormattedType { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The protocol of the IM client. The protocol can be custom or one of these predefined values: * `aim` * `msn` * `yahoo` * `skype` * `qq` * `googleTalk` * `icq` * `jabber` * `netMeeting`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
		
		/// <summary>
		/// The type of the IM client. The type can be custom or one of these predefined values: * `home` * `work` * `other`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The user name used in the IM client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// One of the person's interests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Interest
	{
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The interest; for example, `stargazing`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A person's locale preference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Locale
	{
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language tag representing the locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A person's location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The building identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildingId")]
		public string BuildingId { get; set; }
		
		/// <summary>
		/// Whether the location is the current location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current")]
		public System.Nullable<System.Boolean> Current { get; set; }
		
		/// <summary>
		/// The individual desk location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deskCode")]
		public string DeskCode { get; set; }
		
		/// <summary>
		/// The floor name or number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floor")]
		public string Floor { get; set; }
		
		/// <summary>
		/// The floor section in `floor_name`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floorSection")]
		public string FloorSection { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The type of the location. The type can be custom or one of these predefined values: * `desk` * `grewUp`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The free-form value of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A person's membership in a group. Only contact group memberships can be modified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Membership
	{
		
		/// <summary>
		/// A Google contact group membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactGroupMembership")]
		public ContactGroupMembership ContactGroupMembership { get; set; }
		
		/// <summary>
		/// A Google Workspace Domain membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainMembership")]
		public DomainMembership DomainMembership { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// A Google contact group membership.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactGroupMembership
	{
		
		/// <summary>
		/// Output only. The contact group ID for the contact group membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactGroupId")]
		public string ContactGroupId { get; set; }
		
		/// <summary>
		/// The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`. Only contact_group_resource_name can be used for modifying memberships. Any contact group membership can be removed, but only user group or "myContacts" or "starred" system groups memberships can be added. A contact must always have at least one contact group membership.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactGroupResourceName")]
		public string ContactGroupResourceName { get; set; }
	}
	
	/// <summary>
	/// A Google Workspace Domain membership.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainMembership
	{
		
		/// <summary>
		/// True if the person is in the viewer's Google Workspace domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inViewerDomain")]
		public System.Nullable<System.Boolean> InViewerDomain { get; set; }
	}
	
	/// <summary>
	/// The metadata about a person.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PersonMetadata
	{
		
		/// <summary>
		/// Output only. True if the person resource has been deleted. Populated only for `people.connections.list` and `otherContacts.list` sync requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// Output only. Resource names of people linked to this resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedPeopleResourceNames")]
		public string[] LinkedPeopleResourceNames { get; set; }
		
		/// <summary>
		/// Output only. **DEPRECATED** (Please use `person.metadata.sources.profileMetadata.objectType` instead) The type of the person object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectType")]
		public ProfileMetadataObjectType ObjectType { get; set; }
		
		/// <summary>
		/// Output only. Any former resource names this person has had. Populated only for `people.connections.list` requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousResourceNames")]
		public string[] PreviousResourceNames { get; set; }
		
		/// <summary>
		/// The sources of data for the person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public Source[] Sources { get; set; }
	}
	
	/// <summary>
	/// A person's miscellaneous keyword.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MiscKeyword
	{
		
		/// <summary>
		/// Output only. The type of the miscellaneous keyword translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedType")]
		public string FormattedType { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The miscellaneous keyword type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<MiscKeywordType> Type { get; set; }
		
		/// <summary>
		/// The value of the miscellaneous keyword.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MiscKeywordType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTLOOK_BILLING_INFORMATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTLOOK_DIRECTORY_SERVER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTLOOK_KEYWORD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTLOOK_MILEAGE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTLOOK_PRIORITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTLOOK_SENSITIVITY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTLOOK_SUBJECT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTLOOK_USER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOME = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORK = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 11,
	}
	
	/// <summary>
	/// A person's name. If the name is a mononym, the family name is empty.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Name
	{
		
		/// <summary>
		/// Output only. The display name formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The display name with the last name first formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayNameLastFirst")]
		public string DisplayNameLastFirst { get; set; }
		
		/// <summary>
		/// The family name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		/// <summary>
		/// The given name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="givenName")]
		public string GivenName { get; set; }
		
		/// <summary>
		/// The honorific prefixes, such as `Mrs.` or `Dr.`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="honorificPrefix")]
		public string HonorificPrefix { get; set; }
		
		/// <summary>
		/// The honorific suffixes, such as `Jr.`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="honorificSuffix")]
		public string HonorificSuffix { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The middle name(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="middleName")]
		public string MiddleName { get; set; }
		
		/// <summary>
		/// The family name spelled as it sounds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneticFamilyName")]
		public string PhoneticFamilyName { get; set; }
		
		/// <summary>
		/// The full name spelled as it sounds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneticFullName")]
		public string PhoneticFullName { get; set; }
		
		/// <summary>
		/// The given name spelled as it sounds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneticGivenName")]
		public string PhoneticGivenName { get; set; }
		
		/// <summary>
		/// The honorific prefixes spelled as they sound.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneticHonorificPrefix")]
		public string PhoneticHonorificPrefix { get; set; }
		
		/// <summary>
		/// The honorific suffixes spelled as they sound.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneticHonorificSuffix")]
		public string PhoneticHonorificSuffix { get; set; }
		
		/// <summary>
		/// The middle name(s) spelled as they sound.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneticMiddleName")]
		public string PhoneticMiddleName { get; set; }
		
		/// <summary>
		/// The free form name value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unstructuredName")]
		public string UnstructuredName { get; set; }
	}
	
	/// <summary>
	/// A person's nickname.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Nickname
	{
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The type of the nickname.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<NicknameType> Type { get; set; }
		
		/// <summary>
		/// The nickname.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NicknameType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAIDEN_NAME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIALS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GPLUS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_NAME = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALTERNATE_NAME = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHORT_NAME = 6,
	}
	
	/// <summary>
	/// A person's occupation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Occupation
	{
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The occupation; for example, `carpenter`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A person's past or current organization. Overlapping date ranges are permitted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Organization
	{
		
		/// <summary>
		/// The person's cost center at the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costCenter")]
		public string CostCenter { get; set; }
		
		/// <summary>
		/// True if the organization is the person's current organization; false if the organization is a past organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current")]
		public System.Nullable<System.Boolean> Current { get; set; }
		
		/// <summary>
		/// The person's department at the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="department")]
		public string Department { get; set; }
		
		/// <summary>
		/// The domain name associated with the organization; for example, `google.com`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public Date EndDate { get; set; }
		
		/// <summary>
		/// Output only. The type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedType")]
		public string FormattedType { get; set; }
		
		/// <summary>
		/// The person's full-time equivalent millipercent within the organization (100000 = 100%).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullTimeEquivalentMillipercent")]
		public System.Nullable<System.Int32> FullTimeEquivalentMillipercent { get; set; }
		
		/// <summary>
		/// The person's job description at the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobDescription")]
		public string JobDescription { get; set; }
		
		/// <summary>
		/// The location of the organization office the person works at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The name of the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The phonetic name of the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneticName")]
		public string PhoneticName { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public Date StartDate { get; set; }
		
		/// <summary>
		/// The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// The person's job title at the organization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of the organization. The type can be custom or one of these predefined values: * `work` * `school`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A person's phone number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhoneNumber
	{
		
		/// <summary>
		/// Output only. The canonicalized [ITU-T E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf) form of the phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canonicalForm")]
		public string CanonicalForm { get; set; }
		
		/// <summary>
		/// Output only. The type of the phone number translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedType")]
		public string FormattedType { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The type of the phone number. The type can be custom or one of these predefined values: * `home` * `work` * `mobile` * `homeFax` * `workFax` * `otherFax` * `pager` * `workMobile` * `workPager` * `main` * `googleVoice` * `other`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The phone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A person's photo. A picture shown next to the person's name to help others recognize the person.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Photo
	{
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The URL of the photo. You can change the desired size by appending a query parameter `sz={size}` at the end of the url, where {size} is the size in pixels. Example: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A person's relation to another person.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Relation
	{
		
		/// <summary>
		/// Output only. The type of the relation translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedType")]
		public string FormattedType { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The name of the other person this relation refers to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="person")]
		public string Person { get; set; }
		
		/// <summary>
		/// The person's relation to the other person. The type can be custom or one of these predefined values: * `spouse` * `child` * `mother` * `father` * `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner` * `manager` * `assistant` * `referredBy` * `partner`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// **DEPRECATED**: No data will be returned A person's relationship interest .
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelationshipInterest
	{
		
		/// <summary>
		/// Output only. The value of the relationship interest translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedValue")]
		public string FormattedValue { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The kind of relationship the person is looking for. The value can be custom or one of these predefined values: * `friend` * `date` * `relationship` * `networking`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// **DEPRECATED**: No data will be returned A person's relationship status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelationshipStatus
	{
		
		/// <summary>
		/// Output only. The value of the relationship status translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedValue")]
		public string FormattedValue { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The relationship status. The value can be custom or one of these predefined values: * `single` * `inARelationship` * `engaged` * `married` * `itsComplicated` * `openRelationship` * `widowed` * `inDomesticPartnership` * `inCivilUnion`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// **DEPRECATED**: Please use `person.locations` instead. A person's past or current residence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Residence
	{
		
		/// <summary>
		/// True if the residence is the person's current residence; false if the residence is a past residence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current")]
		public System.Nullable<System.Boolean> Current { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The address of the residence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A person's SIP address. Session Initial Protocol addresses are used for VoIP communications to make voice or video calls over the internet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SipAddress
	{
		
		/// <summary>
		/// Output only. The type of the SIP address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedType")]
		public string FormattedType { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The type of the SIP address. The type can be custom or or one of these predefined values: * `home` * `work` * `mobile` * `other`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The SIP address in the [RFC 3261 19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A skill that the person has.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Skill
	{
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The skill; for example, `underwater basket weaving`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// **DEPRECATED**: No data will be returned A brief one-line description of the person.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tagline
	{
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The tagline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A person's associated URLs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Url
	{
		
		/// <summary>
		/// Output only. The type of the URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedType")]
		public string FormattedType { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The type of the URL. The type can be custom or one of these predefined values: * `home` * `work` * `blog` * `profile` * `homePage` * `ftp` * `reservations` * `appInstallPage`: website for a Currents application. * `other`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Arbitrary user data that is populated by the end users.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserDefined
	{
		
		/// <summary>
		/// The end user specified key of the user defined data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Metadata about a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public FieldMetadata Metadata { get; set; }
		
		/// <summary>
		/// The end user specified value of the user defined data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// If not successful, returns BatchCreateContactsErrorDetails which contains a list of errors for each invalid contact. The response to a request to create a batch of contacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateContactsResponse
	{
		
		/// <summary>
		/// The contacts that were created, unless the request `read_mask` is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdPeople")]
		public PersonResponse[] CreatedPeople { get; set; }
	}
	
	/// <summary>
	/// The response for a single person
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PersonResponse
	{
		
		/// <summary>
		/// **DEPRECATED** (Please use status instead) [HTTP 1.1 status code] (http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="httpStatusCode")]
		public System.Nullable<System.Int32> HttpStatusCode { get; set; }
		
		/// <summary>
		/// Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="person")]
		public Person Person { get; set; }
		
		/// <summary>
		/// The original requested resource name. May be different than the resource name on the returned person. The resource name can change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or a profile URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedResourceName")]
		public string RequestedResourceName { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A request to delete a batch of existing contacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteContactsRequest
	{
		
		/// <summary>
		/// Required. The resource names of the contact to delete. It's repeatable. Allows up to 500 resource names in a single request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceNames")]
		public string[] ResourceNames { get; set; }
	}
	
	/// <summary>
	/// The response to a batch get contact groups request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetContactGroupsResponse
	{
		
		/// <summary>
		/// The list of responses for each requested contact group resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public ContactGroupResponse[] Responses { get; set; }
	}
	
	/// <summary>
	/// The response for a specific contact group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactGroupResponse
	{
		
		/// <summary>
		/// A contact group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactGroup")]
		public ContactGroup ContactGroup { get; set; }
		
		/// <summary>
		/// The original requested resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedResourceName")]
		public string RequestedResourceName { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// A contact group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactGroup
	{
		
		/// <summary>
		/// The group's client data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientData")]
		public GroupClientData[] ClientData { get; set; }
		
		/// <summary>
		/// The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Output only. The name translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale for system groups names. Group names set by the owner are the same as name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedName")]
		public string FormattedName { get; set; }
		
		/// <summary>
		/// Output only. The contact group type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupType")]
		public System.Nullable<ContactGroupGroupType> GroupType { get; set; }
		
		/// <summary>
		/// Output only. The total number of contacts in the group irrespective of max members in specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberCount")]
		public System.Nullable<System.Int32> MemberCount { get; set; }
		
		/// <summary>
		/// Output only. The list of contact person resource names that are members of the contact group. The field is only populated for GET requests and will only return as many members as `maxMembers` in the get request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memberResourceNames")]
		public string[] MemberResourceNames { get; set; }
		
		/// <summary>
		/// The metadata about a contact group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ContactGroupMetadata Metadata { get; set; }
		
		/// <summary>
		/// The contact group name set by the group owner or a system provided name for system groups. For [`contactGroups.create`](/people/api/rest/v1/contactGroups/create) or [`contactGroups.update`](/people/api/rest/v1/contactGroups/update) the name must be unique to the users contact groups. Attempting to create a group with a duplicate name will return a HTTP 409 error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// Arbitrary client data that is populated by clients. Duplicate keys and values are allowed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupClientData
	{
		
		/// <summary>
		/// The client specified key of the client data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// The client specified value of the client data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ContactGroupGroupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GROUP_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_CONTACT_GROUP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM_CONTACT_GROUP = 2,
	}
	
	/// <summary>
	/// The metadata about a contact group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactGroupMetadata
	{
		
		/// <summary>
		/// Output only. True if the contact group resource has been deleted. Populated only for [`ListContactGroups`](/people/api/rest/v1/contactgroups/list) requests that include a sync token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
		
		/// <summary>
		/// Output only. The time the group was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// A request to update a batch of contacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateContactsRequest
	{
		
		/// <summary>
		/// Required. A map of resource names to the person data to be updated. Allows up to 200 contacts in a single request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public System.Collections.Generic.Dictionary<string, Person> Contacts { get; set; }
		
		/// <summary>
		/// Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. If read mask is left empty, the post-mutate-get is skipped and no data will be returned in the response. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readMask")]
		public string ReadMask { get; set; }
		
		/// <summary>
		/// Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public string[] Sources { get; set; }
		
		/// <summary>
		/// Required. A field mask to restrict which fields on the person are updated. Multiple fields can be specified by separating them with commas. All specified fields will be replaced, or cleared if left empty for each person. Valid values are: * addresses * biographies * birthdays * calendarUrls * clientData * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * relations * sipAddresses * urls * userDefined
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// If not successful, returns BatchUpdateContactsErrorDetails, a list of errors corresponding to each contact. The response to a request to update a batch of contacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateContactsResponse
	{
		
		/// <summary>
		/// A map of resource names to the contacts that were updated, unless the request `read_mask` is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateResult")]
		public System.Collections.Generic.Dictionary<string, PersonResponse> UpdateResult { get; set; }
	}
	
	/// <summary>
	/// A request to copy an "Other contact" to my contacts group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyOtherContactToMyContactsGroupRequest
	{
		
		/// <summary>
		/// Required. A field mask to restrict which fields are copied into the new contact. Valid values are: * emailAddresses * names * phoneNumbers
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyMask")]
		public string CopyMask { get; set; }
		
		/// <summary>
		/// Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to the copy mask with metadata and membership fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readMask")]
		public string ReadMask { get; set; }
		
		/// <summary>
		/// Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public string[] Sources { get; set; }
	}
	
	/// <summary>
	/// A request to create a new contact group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateContactGroupRequest
	{
		
		/// <summary>
		/// A contact group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactGroup")]
		public ContactGroup ContactGroup { get; set; }
		
		/// <summary>
		/// Optional. A field mask to restrict which fields on the group are returned. Defaults to `metadata`, `groupType`, and `name` if not set or set to empty. Valid fields are: * clientData * groupType * metadata * name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readGroupFields")]
		public string ReadGroupFields { get; set; }
	}
	
	/// <summary>
	/// The response for deleting a contact's photo.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteContactPhotoResponse
	{
		
		/// <summary>
		/// Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="person")]
		public Person Person { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// The response to a get request for a list of people by resource name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPeopleResponse
	{
		
		/// <summary>
		/// The response for each requested resource name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public PersonResponse[] Responses { get; set; }
	}
	
	/// <summary>
	/// The response to a request for the authenticated user's connections.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListConnectionsResponse
	{
		
		/// <summary>
		/// The list of people that the requestor is connected to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connections")]
		public Person[] Connections { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token. When the response is paginated, only the last page will contain `nextSyncToken`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextSyncToken")]
		public string NextSyncToken { get; set; }
		
		/// <summary>
		/// The total number of items in the list without pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public System.Nullable<System.Int32> TotalItems { get; set; }
		
		/// <summary>
		/// **DEPRECATED** (Please use totalItems) The total number of people in the list without pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalPeople")]
		public System.Nullable<System.Int32> TotalPeople { get; set; }
	}
	
	/// <summary>
	/// The response to a list contact groups request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListContactGroupsResponse
	{
		
		/// <summary>
		/// The list of contact groups. Members of the contact groups are not populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactGroups")]
		public ContactGroup[] ContactGroups { get; set; }
		
		/// <summary>
		/// The token that can be used to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The token that can be used to retrieve changes since the last request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextSyncToken")]
		public string NextSyncToken { get; set; }
		
		/// <summary>
		/// The total number of items in the list without pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalItems")]
		public System.Nullable<System.Int32> TotalItems { get; set; }
	}
	
	/// <summary>
	/// The response to a request for the authenticated user's domain directory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDirectoryPeopleResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextSyncToken")]
		public string NextSyncToken { get; set; }
		
		/// <summary>
		/// The list of people in the domain directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="people")]
		public Person[] People { get; set; }
	}
	
	/// <summary>
	/// The response to a request for the authenticated user's "Other contacts".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOtherContactsResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextSyncToken")]
		public string NextSyncToken { get; set; }
		
		/// <summary>
		/// The list of "Other contacts" returned as Person resources. "Other contacts" support a limited subset of fields. See ListOtherContactsRequest.request_mask for more detailed information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherContacts")]
		public Person[] OtherContacts { get; set; }
		
		/// <summary>
		/// The total number of other contacts in the list without pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// A request to modify an existing contact group's members. Contacts can be removed from any group but they can only be added to a user group or "myContacts" or "starred" system groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModifyContactGroupMembersRequest
	{
		
		/// <summary>
		/// Optional. The resource names of the contact people to add in the form of `people/{person_id}`. The total number of resource names in `resource_names_to_add` and `resource_names_to_remove` must be less than or equal to 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceNamesToAdd")]
		public string[] ResourceNamesToAdd { get; set; }
		
		/// <summary>
		/// Optional. The resource names of the contact people to remove in the form of `people/{person_id}`. The total number of resource names in `resource_names_to_add` and `resource_names_to_remove` must be less than or equal to 1000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceNamesToRemove")]
		public string[] ResourceNamesToRemove { get; set; }
	}
	
	/// <summary>
	/// The response to a modify contact group members request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ModifyContactGroupMembersResponse
	{
		
		/// <summary>
		/// The contact people resource names that cannot be removed from their last contact group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="canNotRemoveLastContactGroupResourceNames")]
		public string[] CanNotRemoveLastContactGroupResourceNames { get; set; }
		
		/// <summary>
		/// The contact people resource names that were not found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notFoundResourceNames")]
		public string[] NotFoundResourceNames { get; set; }
	}
	
	/// <summary>
	/// The response to a request for people in the authenticated user's domain directory that match the specified query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchDirectoryPeopleResponse
	{
		
		/// <summary>
		/// A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of people in the domain directory that match the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="people")]
		public Person[] People { get; set; }
		
		/// <summary>
		/// The total number of items in the list without pagination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSize")]
		public System.Nullable<System.Int32> TotalSize { get; set; }
	}
	
	/// <summary>
	/// The response to a search request for the authenticated user, given a query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchResponse
	{
		
		/// <summary>
		/// The results of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public SearchResult[] Results { get; set; }
	}
	
	/// <summary>
	/// A result of a search query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchResult
	{
		
		/// <summary>
		/// Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="person")]
		public Person Person { get; set; }
	}
	
	/// <summary>
	/// A request to update an existing user contact group. All updated fields will be replaced.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateContactGroupRequest
	{
		
		/// <summary>
		/// A contact group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactGroup")]
		public ContactGroup ContactGroup { get; set; }
		
		/// <summary>
		/// Optional. A field mask to restrict which fields on the group are returned. Defaults to `metadata`, `groupType`, and `name` if not set or set to empty. Valid fields are: * clientData * groupType * memberCount * metadata * name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readGroupFields")]
		public string ReadGroupFields { get; set; }
		
		/// <summary>
		/// Optional. A field mask to restrict which fields on the group are updated. Multiple fields can be specified by separating them with commas. Defaults to `name` if not set or set to empty. Updated fields are replaced. Valid values are: * clientData * name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateGroupFields")]
		public string UpdateGroupFields { get; set; }
	}
	
	/// <summary>
	/// A request to update an existing contact's photo. All requests must have a valid photo format: JPEG or PNG.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateContactPhotoRequest
	{
		
		/// <summary>
		/// Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to empty if not set, which will skip the post mutate get. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personFields")]
		public string PersonFields { get; set; }
		
		/// <summary>
		/// Required. Raw photo bytes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoBytes")]
		public string PhotoBytes { get; set; }
		
		/// <summary>
		/// Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public string[] Sources { get; set; }
	}
	
	/// <summary>
	/// The response for updating a contact's photo.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateContactPhotoResponse
	{
		
		/// <summary>
		/// Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="person")]
		public Person Person { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all contact groups owned by the authenticated user. Members of the contact groups are not populated.
		/// People_contactGroups_list v1/contactGroups
		/// </summary>
		/// <param name="groupFields">Optional. A field mask to restrict which fields on the group are returned. Defaults to `metadata`, `groupType`, `memberCount`, and `name` if not set or set to empty. Valid fields are: * clientData * groupType * memberCount * metadata * name</param>
		/// <param name="pageSize">Optional. The maximum number of resources to return. Valid values are between 1 and 1000, inclusive. Defaults to 30 if not set or set to 0.</param>
		/// <param name="pageToken">Optional. The next_page_token value returned from a previous call to [ListContactGroups](/people/api/rest/v1/contactgroups/list). Requests the next page of resources.</param>
		/// <param name="syncToken">Optional. A sync token, returned by a previous call to `contactgroups.list`. Only resources changed since the sync token was created will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListContactGroupsResponse> People_contactGroups_listAsync(string groupFields, int pageSize, string pageToken, string syncToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactGroups?groupFields=" + (groupFields==null? "" : System.Uri.EscapeDataString(groupFields))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&syncToken=" + (syncToken==null? "" : System.Uri.EscapeDataString(syncToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListContactGroupsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new contact group owned by the authenticated user. Created contact group names must be unique to the users contact groups. Attempting to create a group with a duplicate name will return a HTTP 409 error. Mutate requests for the same user should be sent sequentially to avoid increased latency and failures.
		/// People_contactGroups_create v1/contactGroups
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ContactGroup> People_contactGroups_createAsync(CreateContactGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactGroups";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContactGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of contact groups owned by the authenticated user by specifying a list of contact group resource names.
		/// People_contactGroups_batchGet v1/contactGroups:batchGet
		/// </summary>
		/// <param name="groupFields">Optional. A field mask to restrict which fields on the group are returned. Defaults to `metadata`, `groupType`, `memberCount`, and `name` if not set or set to empty. Valid fields are: * clientData * groupType * memberCount * metadata * name</param>
		/// <param name="maxMembers">Optional. Specifies the maximum number of members to return for each group. Defaults to 0 if not set, which will return zero members.</param>
		/// <param name="resourceNames">Required. The resource names of the contact groups to get. There is a maximum of 200 resource names.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchGetContactGroupsResponse> People_contactGroups_batchGetAsync(string groupFields, int maxMembers, string[] resourceNames, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/contactGroups:batchGet?groupFields=" + (groupFields==null? "" : System.Uri.EscapeDataString(groupFields))+"&maxMembers="+maxMembers+"&"+string.Join("&", resourceNames.Select(z => $"resourceNames={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchGetContactGroupsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all "Other contacts", that is contacts that are not in a contact group. "Other contacts" are typically auto created contacts from interactions. Sync tokens expire 7 days after the full sync. A request with an expired sync token will get an error with an [google.rpc.ErrorInfo](https://cloud.google.com/apis/design/errors#error_info) with reason "EXPIRED_SYNC_TOKEN". In the case of such an error clients should make a full sync request without a `sync_token`. The first page of a full sync request has an additional quota. If the quota is exceeded, a 429 error will be returned. This quota is fixed and can not be increased. When the `sync_token` is specified, resources deleted since the last sync will be returned as a person with `PersonMetadata.deleted` set to true. When the `page_token` or `sync_token` is specified, all other request parameters must match the first call. Writes may have a propagation delay of several minutes for sync requests. Incremental syncs are not intended for read-after-write use cases. See example usage at [List the user's other contacts that have changed](/people/v1/other-contacts#list_the_users_other_contacts_that_have_changed).
		/// People_otherContacts_list v1/otherContacts
		/// </summary>
		/// <param name="pageSize">Optional. The number of "Other contacts" to include in the response. Valid values are between 1 and 1000, inclusive. Defaults to 100 if not set or set to 0.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous response `next_page_token`. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `otherContacts.list` must match the first call that provided the page token.</param>
		/// <param name="readMask">Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. What values are valid depend on what ReadSourceType is used. If READ_SOURCE_TYPE_CONTACT is used, valid values are: * emailAddresses * metadata * names * phoneNumbers * photos If READ_SOURCE_TYPE_PROFILE is used, valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined</param>
		/// <param name="requestSyncToken">Optional. Whether the response should return `next_sync_token` on the last page of results. It can be used to get incremental changes since the last request by setting it on the request `sync_token`. More details about sync behavior at `otherContacts.list`.</param>
		/// <param name="sources">Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT if not set. Possible values for this field are: * READ_SOURCE_TYPE_CONTACT * READ_SOURCE_TYPE_CONTACT,READ_SOURCE_TYPE_PROFILE Specifying READ_SOURCE_TYPE_PROFILE without specifying READ_SOURCE_TYPE_CONTACT is not permitted.</param>
		/// <param name="syncToken">Optional. A sync token, received from a previous response `next_sync_token` Provide this to retrieve only the resources changed since the last request. When syncing, all other parameters provided to `otherContacts.list` must match the first call that provided the sync token. More details about sync behavior at `otherContacts.list`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOtherContactsResponse> People_otherContacts_listAsync(int pageSize, string pageToken, string readMask, bool requestSyncToken, string[] sources, string syncToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/otherContacts?pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask))+"&requestSyncToken="+requestSyncToken+"&"+string.Join("&", sources.Select(z => $"sources={System.Uri.EscapeDataString(z.ToString())}"))+"&syncToken=" + (syncToken==null? "" : System.Uri.EscapeDataString(syncToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOtherContactsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides a list of contacts in the authenticated user's other contacts that matches the search query. The query matches on a contact's `names`, `emailAddresses`, and `phoneNumbers` fields that are from the OTHER_CONTACT source. **IMPORTANT**: Before searching, clients should send a warmup request with an empty query to update the cache. See https://developers.google.com/people/v1/other-contacts#search_the_users_other_contacts
		/// People_otherContacts_search v1/otherContacts:search
		/// </summary>
		/// <param name="pageSize">Optional. The number of results to return. Defaults to 10 if field is not set, or set to 0. Values greater than 30 will be capped to 30.</param>
		/// <param name="query">Required. The plain-text query for the request. The query is used to match prefix phrases of the fields on a person. For example, a person with name "foo name" matches queries such as "f", "fo", "foo", "foo n", "nam", etc., but not "oo n".</param>
		/// <param name="readMask">Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * emailAddresses * metadata * names * phoneNumbers</param>
		/// <returns>Successful response</returns>
		public async Task<SearchResponse> People_otherContacts_searchAsync(int pageSize, string query, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/otherContacts:search?pageSize="+pageSize+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a batch of new contacts and return the PersonResponses for the newly Mutate requests for the same user should be sent sequentially to avoid increased latency and failures.
		/// People_people_batchCreateContacts v1/people:batchCreateContacts
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<BatchCreateContactsResponse> People_people_batchCreateContactsAsync(BatchCreateContactsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/people:batchCreateContacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchCreateContactsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a batch of contacts. Any non-contact data will not be deleted. Mutate requests for the same user should be sent sequentially to avoid increased latency and failures.
		/// People_people_batchDeleteContacts v1/people:batchDeleteContacts
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Empty> People_people_batchDeleteContactsAsync(BatchDeleteContactsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/people:batchDeleteContacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides information about a list of specific people by specifying a list of requested resource names. Use `people/me` to indicate the authenticated user. The request returns a 400 error if 'personFields' is not specified.
		/// People_people_getBatchGet v1/people:batchGet
		/// </summary>
		/// <param name="personFields">Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined</param>
		/// <param name="requestMask_includeField">Required. Comma-separated list of person fields to be included in the response. Each path should start with `person.`: for example, `person.names` or `person.photos`.</param>
		/// <param name="resourceNames">Required. The resource names of the people to provide information about. It's repeatable. The URL query parameter should be resourceNames=<name1>&resourceNames=<name2>&... - To get information about the authenticated user, specify `people/me`. - To get information about a google account, specify `people/{account_id}`. - To get information about a contact, specify the resource name that identifies the contact as returned by `people.connections.list`. There is a maximum of 200 resource names.</param>
		/// <param name="sources">Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.</param>
		/// <returns>Successful response</returns>
		public async Task<GetPeopleResponse> People_people_getBatchGetAsync(string personFields, string requestMask_includeField, string[] resourceNames, string[] sources, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/people:batchGet?personFields=" + (personFields==null? "" : System.Uri.EscapeDataString(personFields))+"&requestMask.includeField=" + (requestMask_includeField==null? "" : System.Uri.EscapeDataString(requestMask_includeField))+"&"+string.Join("&", resourceNames.Select(z => $"resourceNames={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", sources.Select(z => $"sources={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPeopleResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a batch of contacts and return a map of resource names to PersonResponses for the updated contacts. Mutate requests for the same user should be sent sequentially to avoid increased latency and failures.
		/// People_people_batchUpdateContacts v1/people:batchUpdateContacts
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdateContactsResponse> People_people_batchUpdateContactsAsync(BatchUpdateContactsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/people:batchUpdateContacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchUpdateContactsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new contact and return the person resource for that contact. The request returns a 400 error if more than one field is specified on a field that is a singleton for contact sources: * biographies * birthdays * genders * names Mutate requests for the same user should be sent sequentially to avoid increased latency and failures.
		/// People_people_createContact v1/people:createContact
		/// </summary>
		/// <param name="personFields">Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Defaults to all fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined</param>
		/// <param name="sources">Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.</param>
		/// <returns>Successful response</returns>
		public async Task<Person> People_people_createContactAsync(string personFields, string[] sources, Person requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/people:createContact?personFields=" + (personFields==null? "" : System.Uri.EscapeDataString(personFields))+"&"+string.Join("&", sources.Select(z => $"sources={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Person>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides a list of domain profiles and domain contacts in the authenticated user's domain directory. When the `sync_token` is specified, resources deleted since the last sync will be returned as a person with `PersonMetadata.deleted` set to true. When the `page_token` or `sync_token` is specified, all other request parameters must match the first call. Writes may have a propagation delay of several minutes for sync requests. Incremental syncs are not intended for read-after-write use cases. See example usage at [List the directory people that have changed](/people/v1/directory#list_the_directory_people_that_have_changed).
		/// People_people_listDirectoryPeople v1/people:listDirectoryPeople
		/// </summary>
		/// <param name="mergeSources">Optional. Additional data to merge into the directory sources if they are connected through verified join keys such as email addresses or phone numbers.</param>
		/// <param name="pageSize">Optional. The number of people to include in the response. Valid values are between 1 and 1000, inclusive. Defaults to 100 if not set or set to 0.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous response `next_page_token`. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `people.listDirectoryPeople` must match the first call that provided the page token.</param>
		/// <param name="readMask">Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined</param>
		/// <param name="requestSyncToken">Optional. Whether the response should return `next_sync_token`. It can be used to get incremental changes since the last request by setting it on the request `sync_token`. More details about sync behavior at `people.listDirectoryPeople`.</param>
		/// <param name="sources">Required. Directory sources to return.</param>
		/// <param name="syncToken">Optional. A sync token, received from a previous response `next_sync_token` Provide this to retrieve only the resources changed since the last request. When syncing, all other parameters provided to `people.listDirectoryPeople` must match the first call that provided the sync token. More details about sync behavior at `people.listDirectoryPeople`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDirectoryPeopleResponse> People_people_listDirectoryPeopleAsync(string[] mergeSources, int pageSize, string pageToken, string readMask, bool requestSyncToken, string[] sources, string syncToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/people:listDirectoryPeople?"+string.Join("&", mergeSources.Select(z => $"mergeSources={System.Uri.EscapeDataString(z.ToString())}"))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask))+"&requestSyncToken="+requestSyncToken+"&"+string.Join("&", sources.Select(z => $"sources={System.Uri.EscapeDataString(z.ToString())}"))+"&syncToken=" + (syncToken==null? "" : System.Uri.EscapeDataString(syncToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDirectoryPeopleResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides a list of contacts in the authenticated user's grouped contacts that matches the search query. The query matches on a contact's `names`, `nickNames`, `emailAddresses`, `phoneNumbers`, and `organizations` fields that are from the CONTACT source. **IMPORTANT**: Before searching, clients should send a warmup request with an empty query to update the cache. See https://developers.google.com/people/v1/contacts#search_the_users_contacts
		/// People_people_searchContacts v1/people:searchContacts
		/// </summary>
		/// <param name="pageSize">Optional. The number of results to return. Defaults to 10 if field is not set, or set to 0. Values greater than 30 will be capped to 30.</param>
		/// <param name="query">Required. The plain-text query for the request. The query is used to match prefix phrases of the fields on a person. For example, a person with name "foo name" matches queries such as "f", "fo", "foo", "foo n", "nam", etc., but not "oo n".</param>
		/// <param name="readMask">Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined</param>
		/// <param name="sources">Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT if not set.</param>
		/// <returns>Successful response</returns>
		public async Task<SearchResponse> People_people_searchContactsAsync(int pageSize, string query, string readMask, string[] sources, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/people:searchContacts?pageSize="+pageSize+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask))+"&"+string.Join("&", sources.Select(z => $"sources={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides a list of domain profiles and domain contacts in the authenticated user's domain directory that match the search query.
		/// People_people_searchDirectoryPeople v1/people:searchDirectoryPeople
		/// </summary>
		/// <param name="mergeSources">Optional. Additional data to merge into the directory sources if they are connected through verified join keys such as email addresses or phone numbers.</param>
		/// <param name="pageSize">Optional. The number of people to include in the response. Valid values are between 1 and 500, inclusive. Defaults to 100 if not set or set to 0.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous response `next_page_token`. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchDirectoryPeople` must match the first call that provided the page token.</param>
		/// <param name="query">Required. Prefix query that matches fields in the person. Does NOT use the read_mask for determining what fields to match.</param>
		/// <param name="readMask">Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined</param>
		/// <param name="sources">Required. Directory sources to return.</param>
		/// <returns>Successful response</returns>
		public async Task<SearchDirectoryPeopleResponse> People_people_searchDirectoryPeopleAsync(string[] mergeSources, int pageSize, string pageToken, string query, string readMask, string[] sources, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/people:searchDirectoryPeople?"+string.Join("&", mergeSources.Select(z => $"mergeSources={System.Uri.EscapeDataString(z.ToString())}"))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask))+"&"+string.Join("&", sources.Select(z => $"sources={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchDirectoryPeopleResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an existing contact group owned by the authenticated user by specifying a contact group resource name. Mutate requests for the same user should be sent sequentially to avoid increased latency and failures.
		/// People_contactGroups_delete v1/{resourceName}
		/// </summary>
		/// <param name="resourceName">Required. The resource name of the contact group to delete.</param>
		/// <param name="deleteContacts">Optional. Set to true to also delete the contacts in the specified group.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> People_contactGroups_deleteAsync(string resourceName, bool deleteContacts, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&deleteContacts="+deleteContacts;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides information about a person by specifying a resource name. Use `people/me` to indicate the authenticated user. The request returns a 400 error if 'personFields' is not specified.
		/// People_people_get v1/{resourceName}
		/// </summary>
		/// <param name="resourceName">Required. The resource name of the person to provide information about. - To get information about the authenticated user, specify `people/me`. - To get information about a google account, specify `people/{account_id}`. - To get information about a contact, specify the resource name that identifies the contact as returned by `people.connections.list`.</param>
		/// <param name="personFields">Required. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined</param>
		/// <param name="requestMask_includeField">Required. Comma-separated list of person fields to be included in the response. Each path should start with `person.`: for example, `person.names` or `person.photos`.</param>
		/// <param name="sources">Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_PROFILE and READ_SOURCE_TYPE_CONTACT if not set.</param>
		/// <returns>Successful response</returns>
		public async Task<Person> People_people_getAsync(string resourceName, string personFields, string requestMask_includeField, string[] sources, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&personFields=" + (personFields==null? "" : System.Uri.EscapeDataString(personFields))+"&requestMask.includeField=" + (requestMask_includeField==null? "" : System.Uri.EscapeDataString(requestMask_includeField))+"&"+string.Join("&", sources.Select(z => $"sources={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Person>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the name of an existing contact group owned by the authenticated user. Updated contact group names must be unique to the users contact groups. Attempting to create a group with a duplicate name will return a HTTP 409 error. Mutate requests for the same user should be sent sequentially to avoid increased latency and failures.
		/// People_contactGroups_update v1/{resourceName}
		/// </summary>
		/// <param name="resourceName">The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<ContactGroup> People_contactGroups_updateAsync(string resourceName, UpdateContactGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ContactGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides a list of the authenticated user's contacts. Sync tokens expire 7 days after the full sync. A request with an expired sync token will get an error with an [google.rpc.ErrorInfo](https://cloud.google.com/apis/design/errors#error_info) with reason "EXPIRED_SYNC_TOKEN". In the case of such an error clients should make a full sync request without a `sync_token`. The first page of a full sync request has an additional quota. If the quota is exceeded, a 429 error will be returned. This quota is fixed and can not be increased. When the `sync_token` is specified, resources deleted since the last sync will be returned as a person with `PersonMetadata.deleted` set to true. When the `page_token` or `sync_token` is specified, all other request parameters must match the first call. Writes may have a propagation delay of several minutes for sync requests. Incremental syncs are not intended for read-after-write use cases. See example usage at [List the user's contacts that have changed](/people/v1/contacts#list_the_users_contacts_that_have_changed).
		/// People_people_connections_list v1/{resourceName}/connections
		/// </summary>
		/// <param name="resourceName">Required. The resource name to return connections for. Only `people/me` is valid.</param>
		/// <param name="pageSize">Optional. The number of connections to include in the response. Valid values are between 1 and 1000, inclusive. Defaults to 100 if not set or set to 0.</param>
		/// <param name="pageToken">Optional. A page token, received from a previous response `next_page_token`. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `people.connections.list` must match the first call that provided the page token.</param>
		/// <param name="personFields">Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined</param>
		/// <param name="requestMask_includeField">Required. Comma-separated list of person fields to be included in the response. Each path should start with `person.`: for example, `person.names` or `person.photos`.</param>
		/// <param name="requestSyncToken">Optional. Whether the response should return `next_sync_token` on the last page of results. It can be used to get incremental changes since the last request by setting it on the request `sync_token`. More details about sync behavior at `people.connections.list`.</param>
		/// <param name="sortOrder">Optional. The order in which the connections should be sorted. Defaults to `LAST_MODIFIED_ASCENDING`.</param>
		/// <param name="sources">Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.</param>
		/// <param name="syncToken">Optional. A sync token, received from a previous response `next_sync_token` Provide this to retrieve only the resources changed since the last request. When syncing, all other parameters provided to `people.connections.list` must match the first call that provided the sync token. More details about sync behavior at `people.connections.list`.</param>
		/// <returns>Successful response</returns>
		public async Task<ListConnectionsResponse> People_people_connections_listAsync(string resourceName, int pageSize, string pageToken, string personFields, string requestMask_includeField, bool requestSyncToken, People_people_connections_listSortOrder sortOrder, string[] sources, string syncToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/connections&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&personFields=" + (personFields==null? "" : System.Uri.EscapeDataString(personFields))+"&requestMask.includeField=" + (requestMask_includeField==null? "" : System.Uri.EscapeDataString(requestMask_includeField))+"&requestSyncToken="+requestSyncToken+"&sortOrder=" + sortOrder+"&"+string.Join("&", sources.Select(z => $"sources={System.Uri.EscapeDataString(z.ToString())}"))+"&syncToken=" + (syncToken==null? "" : System.Uri.EscapeDataString(syncToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListConnectionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Modify the members of a contact group owned by the authenticated user. The only system contact groups that can have members added are `contactGroups/myContacts` and `contactGroups/starred`. Other system contact groups are deprecated and can only have contacts removed.
		/// People_contactGroups_members_modify v1/{resourceName}/members:modify
		/// </summary>
		/// <param name="resourceName">Required. The resource name of the contact group to modify.</param>
		/// <returns>Successful response</returns>
		public async Task<ModifyContactGroupMembersResponse> People_contactGroups_members_modifyAsync(string resourceName, ModifyContactGroupMembersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"/members:modify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ModifyContactGroupMembersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Copies an "Other contact" to a new contact in the user's "myContacts" group Mutate requests for the same user should be sent sequentially to avoid increased latency and failures.
		/// People_otherContacts_copyOtherContactToMyContactsGroup v1/{resourceName}:copyOtherContactToMyContactsGroup
		/// </summary>
		/// <param name="resourceName">Required. The resource name of the "Other contact" to copy.</param>
		/// <returns>Successful response</returns>
		public async Task<Person> People_otherContacts_copyOtherContactToMyContactsGroupAsync(string resourceName, CopyOtherContactToMyContactsGroupRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+":copyOtherContactToMyContactsGroup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Person>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a contact person. Any non-contact data will not be deleted. Mutate requests for the same user should be sent sequentially to avoid increased latency and failures.
		/// People_people_deleteContact v1/{resourceName}:deleteContact
		/// </summary>
		/// <param name="resourceName">Required. The resource name of the contact to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> People_people_deleteContactAsync(string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+":deleteContact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a contact's photo. Mutate requests for the same user should be done sequentially to avoid // lock contention.
		/// People_people_deleteContactPhoto v1/{resourceName}:deleteContactPhoto
		/// </summary>
		/// <param name="resourceName">Required. The resource name of the contact whose photo will be deleted.</param>
		/// <param name="personFields">Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to empty if not set, which will skip the post mutate get. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined</param>
		/// <param name="sources">Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.</param>
		/// <returns>Successful response</returns>
		public async Task<DeleteContactPhotoResponse> People_people_deleteContactPhotoAsync(string resourceName, string personFields, string[] sources, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+":deleteContactPhoto&personFields=" + (personFields==null? "" : System.Uri.EscapeDataString(personFields))+"&"+string.Join("&", sources.Select(z => $"sources={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeleteContactPhotoResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update contact data for an existing contact person. Any non-contact data will not be modified. Any non-contact data in the person to update will be ignored. All fields specified in the `update_mask` will be replaced. The server returns a 400 error if `person.metadata.sources` is not specified for the contact to be updated or if there is no contact source. The server returns a 400 error with reason `"failedPrecondition"` if `person.metadata.sources.etag` is different than the contact's etag, which indicates the contact has changed since its data was read. Clients should get the latest person and merge their updates into the latest person. The server returns a 400 error if `memberships` are being updated and there are no contact group memberships specified on the person. The server returns a 400 error if more than one field is specified on a field that is a singleton for contact sources: * biographies * birthdays * genders * names Mutate requests for the same user should be sent sequentially to avoid increased latency and failures.
		/// People_people_updateContact v1/{resourceName}:updateContact
		/// </summary>
		/// <param name="resourceName">The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.</param>
		/// <param name="personFields">Optional. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Defaults to all fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined</param>
		/// <param name="sources">Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.</param>
		/// <param name="updatePersonFields">Required. A field mask to restrict which fields on the person are updated. Multiple fields can be specified by separating them with commas. All updated fields will be replaced. Valid values are: * addresses * biographies * birthdays * calendarUrls * clientData * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * relations * sipAddresses * urls * userDefined</param>
		/// <returns>Successful response</returns>
		public async Task<Person> People_people_updateContactAsync(string resourceName, string personFields, string[] sources, string updatePersonFields, Person requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+":updateContact&personFields=" + (personFields==null? "" : System.Uri.EscapeDataString(personFields))+"&"+string.Join("&", sources.Select(z => $"sources={System.Uri.EscapeDataString(z.ToString())}"))+"&updatePersonFields=" + (updatePersonFields==null? "" : System.Uri.EscapeDataString(updatePersonFields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Person>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a contact's photo. Mutate requests for the same user should be sent sequentially to avoid increased latency and failures.
		/// People_people_updateContactPhoto v1/{resourceName}:updateContactPhoto
		/// </summary>
		/// <param name="resourceName">Required. Person resource name</param>
		/// <returns>Successful response</returns>
		public async Task<UpdateContactPhotoResponse> People_people_updateContactPhotoAsync(string resourceName, UpdateContactPhotoRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+":updateContactPhoto";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UpdateContactPhotoResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum People_people_connections_listSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_MODIFIED_DESCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST_NAME_ASCENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_NAME_ASCENDING = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
