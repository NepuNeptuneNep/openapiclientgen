//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Clip_response_object
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Clip_response_object_data Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links_object_data Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Clip_response_object_data
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Clip_response_object_dataAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public Clip_response_object_dataRelationships Relationships { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class Clip_response_object_dataAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_char")]
		public System.Nullable<System.Int32> End_char { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.Double> End_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_processing")]
		public System.Nullable<System.Boolean> Is_processing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="media_file_content_duration")]
		public string Media_file_content_duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="media_file_content_type")]
		public string Media_file_content_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="media_file_height")]
		public string Media_file_height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="media_file_preview_image_url")]
		public string Media_file_preview_image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="media_file_url")]
		public string Media_file_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="media_file_width")]
		public string Media_file_width { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processing_started_at")]
		public string Processing_started_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rank")]
		public System.Nullable<System.Int32> Rank { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_char")]
		public System.Nullable<System.Int32> Start_char { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.Double> Start_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	public class Clip_response_object_dataRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="media")]
		public Clip_response_object_dataRelationshipsMedia Media { get; set; }
	}
	
	public class Clip_response_object_dataRelationshipsMedia
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Clip_response_object_dataRelationshipsMediaData Data { get; set; }
	}
	
	public class Clip_response_object_dataRelationshipsMediaData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Links_object_data
	{
		
		[System.Runtime.Serialization.DataMember(Name="current")]
		public string Current { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="first")]
		public string First { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last")]
		public string Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Clips_response_object
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Clip_response_object_data[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links_object_data Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Direct_upload_response_object
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Direct_upload_response_objectData Data { get; set; }
	}
	
	public class Direct_upload_response_objectData
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Direct_upload_response_objectDataAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class Direct_upload_response_objectDataAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="upload_id")]
		public string Upload_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upload_url")]
		public string Upload_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Media_response_object
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Media_response_object_data Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links_object_data Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Media_response_object_data
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Media_response_object_dataAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public Media_response_object_dataRelationships Relationships { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class Media_response_object_dataAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="has_fetch_error")]
		public System.Nullable<System.Boolean> Has_fetch_error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_processing")]
		public System.Nullable<System.Boolean> Is_processing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="original_created_at")]
		public string Original_created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="processing_started_at")]
		public string Processing_started_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_created_at")]
		public string Source_created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_file_content_type")]
		public string Source_file_content_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_file_duration")]
		public System.Nullable<System.Double> Source_file_duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_file_height")]
		public System.Nullable<System.Double> Source_file_height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_file_preview_image_url")]
		public string Source_file_preview_image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_file_width")]
		public System.Nullable<System.Double> Source_file_width { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_url")]
		public string Source_url { get; set; }
	}
	
	public class Media_response_object_dataRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="clips")]
		public Media_response_object_dataRelationshipsClips Clips { get; set; }
	}
	
	public class Media_response_object_dataRelationshipsClips
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Media_response_object_dataRelationshipsClipsData[] Media_response_object_dataRelationshipsClipsData { get; set; }
	}
	
	public class Media_response_object_dataRelationshipsClipsData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Medias_response_object
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Media_response_object_data[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links_object_data Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Payment_required_error_response_object
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Payment_required_error_response_objectErrors[] Payment_required_error_response_objectErrors { get; set; }
	}
	
	public class Payment_required_error_response_objectErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Payment_required_error_response_objectErrorsSource Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class Payment_required_error_response_objectErrorsSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="pointer")]
		public string Pointer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Too_many_requests_error_response_object
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Too_many_requests_error_response_objectErrors[] Too_many_requests_error_response_objectErrors { get; set; }
	}
	
	public class Too_many_requests_error_response_objectErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Unauthorized_error_response_object
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public Unauthorized_error_response_objectErrors[] Unauthorized_error_response_objectErrors { get; set; }
	}
	
	public class Unauthorized_error_response_objectErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_subscription_response_object
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Webhook_subscription_response_object_data Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links_object_data Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_subscription_response_object_data
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Webhook_subscription_response_object_dataAttributes Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relationships")]
		public Webhook_subscription_response_object_dataRelationships Relationships { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class Webhook_subscription_response_object_dataAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscribed_events")]
		public string[] Subscribed_events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class Webhook_subscription_response_object_dataRelationships
	{
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public Webhook_subscription_response_object_dataRelationshipsUser User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhook_events")]
		public Webhook_subscription_response_object_dataRelationshipsWebhook_events Webhook_events { get; set; }
	}
	
	public class Webhook_subscription_response_object_dataRelationshipsUser
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Webhook_subscription_response_object_dataRelationshipsUserData Data { get; set; }
	}
	
	public class Webhook_subscription_response_object_dataRelationshipsUserData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class Webhook_subscription_response_object_dataRelationshipsWebhook_events
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Webhook_subscription_response_object_dataRelationshipsWebhook_eventsData[] Webhook_subscription_response_object_dataRelationshipsWebhook_eventsData { get; set; }
	}
	
	public class Webhook_subscription_response_object_dataRelationshipsWebhook_eventsData
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Webhook_subscriptions_response_object
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Webhook_subscription_response_object_data[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links_object_data Links { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// list clips
		/// GetClips clips
		/// </summary>
		/// <param name="filter">Filters to be applied to the query.
		///
		///Query params in the url must look like this: "filter[attributeName_*matcher*]"
		///
		///(i.e. filter[name_eq]=chimp%20into%20space)
		///
		///Available matchers can be found here: https://activerecord-hackery.github.io/ransack/getting-started/search-matches/
		///
		///</param>
		/// <param name="page">Specify page number and page size for the query</param>
		/// <param name="sort">Sorting to be applied to the query. For more info: https://jsonapi.org/format/#fetching-sorting</param>
		/// <returns>successful</returns>
		public async Task<Clips_response_object> GetClipsAsync(string filter, string page, GetClipsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clips?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Clips_response_object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create clip
		/// CreateClip clips
		/// </summary>
		/// <returns>successful</returns>
		public async Task<Clip_response_object> CreateClipAsync(CreateClipPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clips";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Clip_response_object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// delete clip
		/// DeleteClipById clips/{id}
		/// </summary>
		public async Task DeleteClipByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clips/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// show clip
		/// GetClipById clips/{id}
		/// </summary>
		/// <returns>successful</returns>
		public async Task<Clip_response_object> GetClipByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clips/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Clip_response_object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// update clip
		/// UpdateClipById clips/{id}
		/// </summary>
		/// <returns>successful</returns>
		public async Task<Clip_response_object> UpdateClipByIdAsync(UpdateClipByIdPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "clips/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Clip_response_object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// prepare presigned upload url
		/// GetUploadUrl direct_uploads
		/// </summary>
		/// <returns>successful</returns>
		public async Task<Direct_upload_response_object> GetUploadUrlAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "direct_uploads";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Direct_upload_response_object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// list medias
		/// GetMedias medias
		/// </summary>
		/// <param name="filter">Filters to be applied to the query.
		///
		///Query params in the url must look like this: "filter[attributeName_*matcher*]"
		///
		///(i.e. filter[name_eq]=chimp%20into%20space)
		///
		///Available matchers can be found here: https://activerecord-hackery.github.io/ransack/getting-started/search-matches/
		///
		///</param>
		/// <param name="page">Specify page number and page size for the query</param>
		/// <param name="sort">Sorting to be applied to the query. For more info: https://jsonapi.org/format/#fetching-sorting</param>
		/// <returns>successful</returns>
		public async Task<Medias_response_object> GetMediasAsync(string filter, string page, GetMediasSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "medias?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&page=" + (page==null? "" : System.Uri.EscapeDataString(page))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Medias_response_object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create media
		/// CreateMedia medias
		/// </summary>
		/// <returns>successful</returns>
		public async Task<Media_response_object> CreateMediaAsync(CreateMediaPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "medias";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Media_response_object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// delete media
		/// DeleteMediaById medias/{id}
		/// </summary>
		public async Task DeleteMediaByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "medias/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// show media
		/// GetMediaById medias/{id}
		/// </summary>
		/// <returns>successful</returns>
		public async Task<Media_response_object> GetMediaByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "medias/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Media_response_object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// update media
		/// UpdateMediaById medias/{id}
		/// </summary>
		/// <returns>successful</returns>
		public async Task<Media_response_object> UpdateMediaByIdAsync(UpdateMediaByIdPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "medias/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Media_response_object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// list webhook subscriptions
		/// GetWebhookSubscriptions webhook_subscriptions
		/// </summary>
		/// <param name="filter">Filters to be applied to the query.
		///
		///Query params in the url must look like this: "filter[attributeName_*matcher*]"
		///
		///(i.e. filter[name_eq]=chimp%20into%20space)
		///
		///Available matchers can be found here: https://activerecord-hackery.github.io/ransack/getting-started/search-matches/
		///
		///</param>
		/// <param name="sort">Sorting to be applied to the query. For more info: https://jsonapi.org/format/#fetching-sorting</param>
		/// <returns>successful</returns>
		public async Task<Webhook_subscriptions_response_object> GetWebhookSubscriptionsAsync(string filter, GetWebhookSubscriptionsSort sort, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhook_subscriptions?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&sort=" + sort;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Webhook_subscriptions_response_object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// create webhook subscription
		/// CreateWebhookSubscription webhook_subscriptions
		/// </summary>
		/// <returns>successful</returns>
		public async Task<Webhook_subscription_response_object> CreateWebhookSubscriptionAsync(CreateWebhookSubscriptionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhook_subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Webhook_subscription_response_object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// delete webhook subscription
		/// DeleteWebhookSubscriptionById webhook_subscriptions/{id}
		/// </summary>
		public async Task DeleteWebhookSubscriptionByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhook_subscriptions/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// show webhook subscription
		/// GetWebhookSubscriptionById webhook_subscriptions/{id}
		/// </summary>
		/// <returns>successful</returns>
		public async Task<Webhook_subscription_response_object> GetWebhookSubscriptionByIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhook_subscriptions/{id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Webhook_subscription_response_object>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetClipsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		created_at = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-created_at")]
		Minuscreated_at = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		original_created_at = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-original_created_at")]
		Minusoriginal_created_at = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-name")]
		Minusname = 5,
	}
	
	public class CreateClipPostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateClipPostBodyData Data { get; set; }
	}
	
	public class CreateClipPostBodyData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CreateClipPostBodyDataAttributes Attributes { get; set; }
	}
	
	public class CreateClipPostBodyDataAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public double End_time { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media_id")]
		public string Media_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public double Start_time { get; set; }
	}
	
	public class UpdateClipByIdPutBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UpdateClipByIdPutBodyData Data { get; set; }
	}
	
	public class UpdateClipByIdPutBodyData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public UpdateClipByIdPutBodyDataAttributes Attributes { get; set; }
	}
	
	public class UpdateClipByIdPutBodyDataAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.Double> End_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.Double> Start_time { get; set; }
	}
	
	public enum GetMediasSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		created_at = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-created_at")]
		Minuscreated_at = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		original_created_at = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-original_created_at")]
		Minusoriginal_created_at = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-name")]
		Minusname = 5,
	}
	
	public class CreateMediaPostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateMediaPostBodyData Data { get; set; }
	}
	
	public class CreateMediaPostBodyData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CreateMediaPostBodyDataAttributes Attributes { get; set; }
	}
	
	public class CreateMediaPostBodyDataAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_url")]
		public string Source_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upload_id")]
		public string Upload_id { get; set; }
	}
	
	public class UpdateMediaByIdPutBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UpdateMediaByIdPutBodyData Data { get; set; }
	}
	
	public class UpdateMediaByIdPutBodyData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public UpdateMediaByIdPutBodyDataAttributes Attributes { get; set; }
	}
	
	public class UpdateMediaByIdPutBodyDataAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public enum GetWebhookSubscriptionsSort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		created_at = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-created_at")]
		Minuscreated_at = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		original_created_at = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-original_created_at")]
		Minusoriginal_created_at = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="-name")]
		Minusname = 5,
	}
	
	public class CreateWebhookSubscriptionPostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateWebhookSubscriptionPostBodyData Data { get; set; }
	}
	
	public class CreateWebhookSubscriptionPostBodyData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public CreateWebhookSubscriptionPostBodyDataAttributes Attributes { get; set; }
	}
	
	public class CreateWebhookSubscriptionPostBodyDataAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="subscribed_events")]
		public string[] Subscribed_events { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
