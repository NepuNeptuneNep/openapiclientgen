//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retreive a generated document from a render ID.
		/// Documentation: https://carbone.io/api-reference.html#download-rendered-reports
		/// RenderGetByRenderId render/{renderId}
		/// </summary>
		/// <param name="renderId">Unique identifier of the report</param>
		/// <returns>Stream of the generated document</returns>
		public async Task RenderGetByRenderIdAsync(string renderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "render/"+ (renderId==null? "" : System.Uri.EscapeDataString(renderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate a document from a template ID, and a JSON data-set
		/// Documentation: https://carbone.io/api-reference.html#render-reports
		/// RenderPostByTemplateId render/{templateId}
		/// </summary>
		/// <param name="templateId">Unique identifier of the template</param>
		/// <returns>On success, a `render ID` is returned, a unique identifier for the generated document.</returns>
		public async Task<RenderPostByTemplateIdReturn> RenderPostByTemplateIdAsync(string templateId, RenderPostByTemplateIdPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "render/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RenderPostByTemplateIdReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetch the API status and version
		/// StatusGet status
		/// </summary>
		/// <returns>Check the API status and version</returns>
		public async Task<StatusGetReturn> StatusGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "status";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StatusGetReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload a template.
		/// Documentation: https://carbone.io/api-reference.html#add-templates
		/// TemplatePost template
		/// </summary>
		/// <param name="requestBody">Template File to upload, supported formats: DOCX, XLSX, PPTX, ODT, ODS, ODP, ODG, XHTML, IDML, HTML or an XML file</param>
		/// <returns>On success, the `template ID` is returned.</returns>
		public async Task<TemplatePostReturn> TemplatePostAsync(TemplatePostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "template";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TemplatePostReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a template from a template ID
		/// Documentation: https://carbone.io/api-reference.html#delete-templates
		/// TemplateDeleteByTemplateId template/{templateId}
		/// </summary>
		/// <param name="templateId">Unique identifier of the template</param>
		/// <returns>The template is deleted</returns>
		public async Task<TemplateDeleteByTemplateIdReturn> TemplateDeleteByTemplateIdAsync(string templateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "template/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TemplateDeleteByTemplateIdReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a template from a template ID
		/// Documentation: https://carbone.io/api-reference.html#get-templates
		/// TemplateGetByTemplateId template/{templateId}
		/// </summary>
		/// <param name="templateId">Unique identifier of the template</param>
		/// <returns>stream of the file content</returns>
		public async Task TemplateGetByTemplateIdAsync(string templateId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "template/"+ (templateId==null? "" : System.Uri.EscapeDataString(templateId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class RenderPostByTemplateIdPostBody
	{
		
		/// <summary>
		/// Optional - Object|Array, extra data accessible in the template with {c.} instead of {d.}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="complement")]
		public string Complement { get; set; }
		
		/// <summary>
		/// Optional - Convert the document into another format. Accepted values: ods xlsx xls csv pdf txt odp ppt pptx jpg png odt doc docx txt jpg png epub html xml idml. List of supported formats: https://carbone.io/documentation.html#supported-files-and-features-list
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convertTo")]
		public string ConvertTo { get; set; }
		
		/// <summary>
		/// Optional - Currency exchange rates for conversions from `currencySource` to `currencyTarget`. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyRates")]
		public string CurrencyRates { get; set; }
		
		/// <summary>
		/// Optional - Currency source coming from your JSON data. The option is used by `formatC` to convert the currency based on the `currencyTarget` and `currencyRates`. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencySource")]
		public string CurrencySource { get; set; }
		
		/// <summary>
		/// Optional - Target currency when the document is generated. The option is used by `formatC` to convert the currency based on the `currencySource` and `currencyRates`. Learn more: https://carbone.io/documentation.html#formatc-precisionorformat-
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyTarget")]
		public string CurrencyTarget { get; set; }
		
		/// <summary>
		/// Required - ️JSON data-set merged into the template to generate a document
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Optional - List of enumerations, use it in reports with `convEnum` formatters, documentation: https://carbone.io/documentation.html#convenum-type-
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enum")]
		public string Enum { get; set; }
		
		/// <summary>
		/// Optional - If true, the report content is refreshed at the end of the rendering process. To use this option, `convertTo` has to be defined. It is mostly used to refresh a table of content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hardRefresh")]
		public System.Nullable<System.Boolean> HardRefresh { get; set; }
		
		/// <summary>
		/// Optional - Locale of the generated doocument, it will used for translation `{t()}`, formatting numbers with `:formatN`, and currencies `:formatC`. List of supported locales: https://github.com/carboneio/carbone/blob/master/formatters/_locale.js
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
		
		/// <summary>
		/// Optional - Static or dynamic file name returned on the `content-disposition` header when the generated report is fetched with `GET /report/:renderI`. Multiple Carbone tags are accepted, such as `{d.type}-{d.date}.pdf`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportName")]
		public string ReportName { get; set; }
		
		/// <summary>
		/// Optional - Convert document dates to a timezone. The default timezone is `Europe/Paris`. The date must be chained with the `:formatD` formatter, for instance `{d.date:formatD(YYYY-MM-DD HH:MM)}`. List of accepted timezones (Column TZ identifier): https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// Optional - When the report is generated, all text between `{t( )}` is replaced with the corresponding translation. The `lang` option is required to select the correct translation. Learn more: https://carbone.io/documentation.html#translations
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translations")]
		public string Translations { get; set; }
		
		/// <summary>
		/// Optional - Predefine alias, related documenation: https://carbone.io/documentation.html#alias
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variableStr")]
		public string VariableStr { get; set; }
	}
	
	public class RenderPostByTemplateIdReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public RenderPostByTemplateIdReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public class RenderPostByTemplateIdReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="renderId")]
		public string RenderId { get; set; }
	}
	
	public class StatusGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Double> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public class TemplatePostPostBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
	}
	
	public class TemplatePostReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TemplatePostReturnData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public class TemplatePostReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="templateId")]
		public string TemplateId { get; set; }
	}
	
	public class TemplateDeleteByTemplateIdReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
