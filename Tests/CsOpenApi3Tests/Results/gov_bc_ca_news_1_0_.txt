//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Article
	{
		
		[System.Runtime.Serialization.DataMember(Name="editionName")]
		public string EditionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="htmlBody")]
		public string HtmlBody { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Asset
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int64> Length { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Category
	{
		
		[System.Runtime.Serialization.DataMember(Name="audioUri")]
		public string AudioUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featurePostKey")]
		public string FeaturePostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flickrUri")]
		public string FlickrUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topPostKey")]
		public string TopPostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twitterFeedUsername")]
		public string TwitterFeedUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="youtubeUri")]
		public string YoutubeUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Contact
	{
		
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileNumber")]
		public string MobileNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public string PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataIndex
	{
		
		[System.Runtime.Serialization.DataMember(Name="featurePostKey")]
		public string FeaturePostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topPostKey")]
		public string TopPostKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Document
	{
		
		[System.Runtime.Serialization.DataMember(Name="byline")]
		public string Byline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public DocumentContact[] Contacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="detailsHtml")]
		public string DetailsHtml { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headline")]
		public string Headline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="languageId")]
		public System.Nullable<System.Int32> LanguageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageTitle")]
		public string PageTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subheadline")]
		public string Subheadline { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentContact
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Edition
	{
		
		[System.Runtime.Serialization.DataMember(Name="htmlBody")]
		public string HtmlBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EditionImage
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileName")]
		public string FileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageBytes")]
		public string ImageBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageType")]
		public string ImageType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FacebookPost
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facebookObjectId")]
		public System.Nullable<System.Int32> FacebookObjectId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pictureUri")]
		public string PictureUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postComments")]
		public System.Nullable<System.Int32> PostComments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postLikes")]
		public System.Nullable<System.Int32> PostLikes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postShares")]
		public System.Nullable<System.Int32> PostShares { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="poster")]
		public string Poster { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posterLikes")]
		public System.Nullable<System.Int32> PosterLikes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posterLogo")]
		public string PosterLogo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posterSubtitle")]
		public string PosterSubtitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Home
	{
		
		[System.Runtime.Serialization.DataMember(Name="featurePostKey")]
		public string FeaturePostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="liveWebcastFlashMediaManifestUrl")]
		public string LiveWebcastFlashMediaManifestUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="liveWebcastM3uPlaylist")]
		public string LiveWebcastM3uPlaylist { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topPostKey")]
		public string TopPostKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyValuePair_2
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Minister
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailHtml")]
		public string EmailHtml { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headline")]
		public string Headline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="photo")]
		public string Photo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="post")]
		public string Post { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ministry
	{
		
		[System.Runtime.Serialization.DataMember(Name="audioUri")]
		public string AudioUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childMinistryKey")]
		public string ChildMinistryKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactUser")]
		public Contact ContactUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayAdditionalName")]
		public string DisplayAdditionalName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featurePostKey")]
		public string FeaturePostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flickrUri")]
		public string FlickrUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ministerName")]
		public string MinisterName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ministryUrl")]
		public string MinistryUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newsletterLinks")]
		public ResourceLink[] NewsletterLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentMinistryKey")]
		public string ParentMinistryKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secondContactUser")]
		public Contact SecondContactUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceLinks")]
		public ResourceLink[] ServiceLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topPostKey")]
		public string TopPostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topicLinks")]
		public ResourceLink[] TopicLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twitterFeedUsername")]
		public string TwitterFeedUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekendContactNumber")]
		public string WeekendContactNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="youtubeUri")]
		public string YoutubeUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceLink
	{
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Newsletter
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editions")]
		public KeyValuePair_2[] Editions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ministryName")]
		public string MinistryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Post
	{
		
		[System.Runtime.Serialization.DataMember(Name="assetUrl")]
		public string AssetUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="atomId")]
		public string AtomId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="azureAssets")]
		public Asset[] AzureAssets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public Document[] Documents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facebookPictureUri")]
		public string FacebookPictureUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMediaAssets")]
		public System.Nullable<System.Boolean> HasMediaAssets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isNewsOnDemand")]
		public System.Nullable<System.Boolean> IsNewsOnDemand { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leadMinistryKey")]
		public string LeadMinistryKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ministryKeys")]
		public string[] MinistryKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publishDate")]
		public System.Nullable<System.DateTimeOffset> PublishDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="redirectUri")]
		public string RedirectUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sectorKeys")]
		public string[] SectorKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceKeys")]
		public string[] ServiceKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="socialMediaHeadline")]
		public string SocialMediaHeadline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="socialMediaSummary")]
		public string SocialMediaSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sector
	{
		
		[System.Runtime.Serialization.DataMember(Name="audioUri")]
		public string AudioUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featurePostKey")]
		public string FeaturePostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flickrUri")]
		public string FlickrUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topPostKey")]
		public string TopPostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twitterFeedUsername")]
		public string TwitterFeedUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="youtubeUri")]
		public string YoutubeUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Service
	{
		
		[System.Runtime.Serialization.DataMember(Name="audioUri")]
		public string AudioUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featurePostKey")]
		public string FeaturePostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flickrUri")]
		public string FlickrUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topPostKey")]
		public string TopPostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twitterFeedUsername")]
		public string TwitterFeedUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="youtubeUri")]
		public string YoutubeUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Slide
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionLabel")]
		public string ActionLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionUri")]
		public string ActionUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="facebookPostUri")]
		public string FacebookPostUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headline")]
		public string Headline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageType")]
		public string ImageType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="justify")]
		public string Justify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slideId")]
		public string SlideId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember(Name="audioUri")]
		public string AudioUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featurePostKey")]
		public string FeaturePostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flickrUri")]
		public string FlickrUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topPostKey")]
		public string TopPostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twitterFeedUsername")]
		public string TwitterFeedUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="youtubeUri")]
		public string YoutubeUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Theme
	{
		
		[System.Runtime.Serialization.DataMember(Name="audioUri")]
		public string AudioUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="featurePostKey")]
		public string FeaturePostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flickrUri")]
		public string FlickrUri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topPostKey")]
		public string TopPostKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="twitterFeedUsername")]
		public string TwitterFeedUsername { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="youtubeUri")]
		public string YoutubeUri { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get a Facebook post based on a Uri
		/// ApiFacebookPostsByUriGetByUriAndApi_version api/FacebookPosts/ByUri
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<FacebookPost> ApiFacebookPostsByUriGetByUriAndApi_versionAsync(string uri, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/FacebookPosts/ByUri?uri=" + (uri==null? "" : System.Uri.EscapeDataString(uri))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FacebookPost>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the top level content for the home page
		/// ApiHomeGetByApi_version api/Home
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Home> ApiHomeGetByApi_versionAsync(string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Home?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Home>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all ministries
		/// ApiMinistriesGetByApi_version api/Ministries
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Ministry[]> ApiMinistriesGetByApi_versionAsync(string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Ministries?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ministry[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Ministry associated with the ministry key
		/// ApiMinistries_keyGetByApi_version api/Ministries/{key}
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Ministry> ApiMinistries_keyGetByApi_versionAsync(string key, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Ministries/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ministry>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Minister associated with the ministry key
		/// ApiMinistries_keyMinisterGetByApi_version api/Ministries/{key}/Minister
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Minister> ApiMinistries_keyMinisterGetByApi_versionAsync(string key, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Ministries/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"/Minister&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Minister>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all newsletters
		/// ApiNewslettersGetByApi_version api/Newsletters
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Newsletter[]> ApiNewslettersGetByApi_versionAsync(string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Newsletters?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Newsletter[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the image object reference by of a Newsletter Edition associated with the image guid
		/// ApiNewslettersImages_guidGetByApi_version api/Newsletters/Images/{guid}
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<EditionImage> ApiNewslettersImages_guidGetByApi_versionAsync(string guid, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Newsletters/Images/"+ (guid==null? "" : System.Uri.EscapeDataString(guid))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EditionImage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific newsletter
		/// ApiNewsletters_newsletterKeyGetByApi_version api/Newsletters/{newsletterKey}
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Newsletter> ApiNewsletters_newsletterKeyGetByApi_versionAsync(string newsletterKey, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Newsletters/"+ (newsletterKey==null? "" : System.Uri.EscapeDataString(newsletterKey))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Newsletter>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a specific edition of a newsletter
		/// ApiNewsletters_newsletterKeyEditions_editionKeyGetByApi_version api/Newsletters/{newsletterKey}/Editions/{editionKey}
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Edition> ApiNewsletters_newsletterKeyEditions_editionKeyGetByApi_versionAsync(string newsletterKey, string editionKey, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Newsletters/"+ (newsletterKey==null? "" : System.Uri.EscapeDataString(newsletterKey))+"/Editions/"+ (editionKey==null? "" : System.Uri.EscapeDataString(editionKey))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Edition>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an article belonging to a Newsletter edition
		/// ApiNewsletters_newsletterKeyEditions_editionKeyArticles_articleKeyGetByApi_version api/Newsletters/{newsletterKey}/Editions/{editionKey}/Articles/{articleKey}
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Article> ApiNewsletters_newsletterKeyEditions_editionKeyArticles_articleKeyGetByApi_versionAsync(string newsletterKey, string editionKey, string articleKey, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Newsletters/"+ (newsletterKey==null? "" : System.Uri.EscapeDataString(newsletterKey))+"/Editions/"+ (editionKey==null? "" : System.Uri.EscapeDataString(editionKey))+"/Articles/"+ (articleKey==null? "" : System.Uri.EscapeDataString(articleKey))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Article>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the posts associated with the keys in the list passed in.
		/// ApiPostsGetByPostKeysAndApi_version api/Posts
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Post[]> ApiPostsGetByPostKeysAndApi_versionAsync(string[] postKeys, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Posts?"+string.Join("&", postKeys.Select(z => $"postKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Post[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all keys for the specified index (newsroom or category)
		/// ApiPostsKeys_indexKind_indexKeyGetByPostKindAndCountAndSkipAndApi_version api/Posts/Keys/{indexKind}/{indexKey}
		/// </summary>
		/// <param name="indexKind">home or one of categories</param>
		/// <param name="indexKey">default or one key of the categories (ministries, sectors, services, tags, themes)</param>
		/// <param name="postKind">One of: releases, stories, factsheets, updates or default (releases+stories+factsheets)</param>
		/// <param name="count">number of posts to return</param>
		/// <param name="skip">number of posts to skip</param>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<KeyValuePair_2[]> ApiPostsKeys_indexKind_indexKeyGetByPostKindAndCountAndSkipAndApi_versionAsync(string indexKind, string indexKey, string postKind, int count, int skip, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Posts/Keys/"+ (indexKind==null? "" : System.Uri.EscapeDataString(indexKind))+"/"+ (indexKey==null? "" : System.Uri.EscapeDataString(indexKey))+"&postKind=" + (postKind==null? "" : System.Uri.EscapeDataString(postKind))+"&count="+count+"&skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeyValuePair_2[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the post key associated with the reference.
		/// ApiPostsKeys_referenceGetByApi_version api/Posts/Keys/{reference}
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<KeyValuePair_2> ApiPostsKeys_referenceGetByApi_versionAsync(string reference, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Posts/Keys/"+ (reference==null? "" : System.Uri.EscapeDataString(reference))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<KeyValuePair_2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the latest posts of postKind for the specified index (default or category)
		/// ApiPostsLatest_indexKind_indexKeyGetByPostKindAndCountAndSkipAndApi_version api/Posts/Latest/{indexKind}/{indexKey}
		/// </summary>
		/// <param name="indexKind">home or one of categories</param>
		/// <param name="indexKey">default or one key of the categories (ministries, sectors, services, tags, themes)</param>
		/// <param name="postKind">One of: releases, stories, factsheets, updates or default (releases+stories except top/feature)</param>
		/// <param name="count">number of posts to return</param>
		/// <param name="skip">number of posts to skip</param>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Post[]> ApiPostsLatest_indexKind_indexKeyGetByPostKindAndCountAndSkipAndApi_versionAsync(string indexKind, string indexKey, string postKind, int count, int skip, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Posts/Latest/"+ (indexKind==null? "" : System.Uri.EscapeDataString(indexKind))+"/"+ (indexKey==null? "" : System.Uri.EscapeDataString(indexKey))+"&postKind=" + (postKind==null? "" : System.Uri.EscapeDataString(postKind))+"&count="+count+"&skip="+skip+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Post[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest Social Media post for the social media type passed in.
		/// ApiPostsLatestMediaUri_mediaTypeGetByApi_version api/Posts/LatestMediaUri/{mediaType}
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<string> ApiPostsLatestMediaUri_mediaTypeGetByApi_versionAsync(string mediaType, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Posts/LatestMediaUri/"+ (mediaType==null? "" : System.Uri.EscapeDataString(mediaType))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the post associated with the key
		/// ApiPosts_keyGetByApi_version api/Posts/{key}
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Post> ApiPosts_keyGetByApi_versionAsync(string key, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Posts/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Post>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all resource links
		/// ApiResourceLinksGetByApi_version api/ResourceLinks
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<ResourceLink[]> ApiResourceLinksGetByApi_versionAsync(string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/ResourceLinks?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceLink[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Sectors
		/// ApiSectorsGetByApi_version api/Sectors
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Sector[]> ApiSectorsGetByApi_versionAsync(string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Sectors?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Sector[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the sector associated with the key
		/// ApiSectors_keyGetByApi_version api/Sectors/{key}
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Sector> ApiSectors_keyGetByApi_versionAsync(string key, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Sectors/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Sector>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Services
		/// ApiServicesGetByApi_version api/Services
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Service[]> ApiServicesGetByApi_versionAsync(string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Services?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Service[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the service associated with the passed key
		/// ApiServices_keyGetByApi_version api/Services/{key}
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Service> ApiServices_keyGetByApi_versionAsync(string key, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Services/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Service>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Slides
		/// ApiSlidesGetByApi_version api/Slides
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Slide[]> ApiSlidesGetByApi_versionAsync(string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Slides?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Slide[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the slide associated to the id
		/// ApiSlides_idGetByApi_version api/Slides/{id}
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Slide> ApiSlides_idGetByApi_versionAsync(string id, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Slides/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Slide>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Tags
		/// ApiTagsGetByApi_version api/Tags
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Tag[]> ApiTagsGetByApi_versionAsync(string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Tags?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tag[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Tag associated with the key
		/// ApiTags_keyGetByApi_version api/Tags/{key}
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Tag> ApiTags_keyGetByApi_versionAsync(string key, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Tags/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tag>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Themes
		/// ApiThemesGetByApi_version api/Themes
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Theme[]> ApiThemesGetByApi_versionAsync(string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Themes?api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Theme[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the Theme associated with the key
		/// ApiThemes_keyGetByApi_version api/Themes/{key}
		/// </summary>
		/// <param name="api_version">The requested API version</param>
		/// <returns>Success</returns>
		public async Task<Theme> ApiThemes_keyGetByApi_versionAsync(string key, string api_version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/Themes/"+ (key==null? "" : System.Uri.EscapeDataString(key))+"&api-version=" + (api_version==null? "" : System.Uri.EscapeDataString(api_version));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Theme>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
