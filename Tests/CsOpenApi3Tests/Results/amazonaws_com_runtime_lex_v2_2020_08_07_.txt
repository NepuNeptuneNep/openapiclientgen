//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSessionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botAliasId")]
		public string BotAliasId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="localeId")]
		public string LocaleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSessionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interpretations")]
		public Interpretation[] Interpretations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionState")]
		public SessionState SessionState { get; set; }
	}
	
	/// <summary>
	/// Container for text that is returned to the customer..
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Message
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public MessageContentType ContentType { get; set; }
		
		/// <summary>
		/// <p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p> <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageResponseCard")]
		public ImageResponseCard ImageResponseCard { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MessageContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CustomPayload = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ImageResponseCard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PlainText = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSML = 3,
	}
	
	/// <summary>
	/// <p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p> <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageResponseCard
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buttons")]
		public Button[] Buttons { get; set; }
	}
	
	/// <summary>
	/// A button that appears on a response card show to the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Button
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An intent that Amazon Lex V2 determined might satisfy the user's utterance. The intents are ordered by the confidence score. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Interpretation
	{
		
		[System.Runtime.Serialization.DataMember(Name="nluConfidence")]
		public ConfidenceScore NluConfidence { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sentimentResponse")]
		public SentimentResponse SentimentResponse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intent")]
		public Intent Intent { get; set; }
	}
	
	/// <summary>
	/// Provides a score that indicates the confidence that Amazon Lex V2 has that an intent is the one that satisfies the user's intent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfidenceScore
	{
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Double> Score { get; set; }
	}
	
	/// <summary>
	/// <p>Provides information about the sentiment expressed in a user's response in a conversation. Sentiments are determined using Amazon Comprehend. Sentiments are only returned if they are enabled for the bot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-sentiment.html"> Determine Sentiment </a> in the <i>Amazon Comprehend developer guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SentimentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="sentiment")]
		public SentimentType Sentiment { get; set; }
		
		/// <summary>
		/// The individual sentiment responses for the utterance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sentimentScore")]
		public SentimentScore SentimentScore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SentimentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIXED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEUTRAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSITIVE = 3,
	}
	
	/// <summary>
	/// The individual sentiment responses for the utterance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SentimentScore
	{
		
		[System.Runtime.Serialization.DataMember(Name="positive")]
		public System.Nullable<System.Double> Positive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Double> Negative { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="neutral")]
		public System.Nullable<System.Double> Neutral { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mixed")]
		public System.Nullable<System.Double> Mixed { get; set; }
	}
	
	/// <summary>
	/// The current intent that Amazon Lex V2 is attempting to fulfill.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Intent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slots")]
		public Slots Slots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public IntentState State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationState")]
		public ConfirmationState ConfirmationState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Slots
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum IntentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fulfilled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ReadyForFulfillment = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Waiting = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FulfillmentInProgress = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ConfirmationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Confirmed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Denied = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 2,
	}
	
	/// <summary>
	/// The state of the user's session with Amazon Lex V2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SessionState
	{
		
		[System.Runtime.Serialization.DataMember(Name="dialogAction")]
		public DialogAction DialogAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intent")]
		public Intent Intent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeContexts")]
		public ActiveContext[] ActiveContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionAttributes")]
		public StringMap SessionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originatingRequestId")]
		public string OriginatingRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtimeHints")]
		public RuntimeHints RuntimeHints { get; set; }
	}
	
	/// <summary>
	/// The next action that Amazon Lex V2 should take.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DialogAction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DialogActionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotToElicit")]
		public string SlotToElicit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slotElicitationStyle")]
		public StyleType SlotElicitationStyle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subSlotToElicit")]
		public ElicitSubSlot SubSlotToElicit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DialogActionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Close = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfirmIntent = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Delegate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElicitIntent = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ElicitSlot = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		None = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StyleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Default = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SpellByLetter = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SpellByWord = 2,
	}
	
	/// <summary>
	/// The specific constituent sub slot of the composite slot to elicit in dialog action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElicitSubSlot
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subSlotToElicit")]
		public ElicitSubSlot SubSlotToElicit { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about the contexts that a user is using in a session. You can configure Amazon Lex V2 to set a context when an intent is fulfilled, or you can set a context using the , , or operations.</p> <p>Use a context to indicate to Amazon Lex V2 intents that should be used as follow-up intents. For example, if the active context is <code>order-fulfilled</code>, only intents that have <code>order-fulfilled</code> configured as a trigger are considered for follow up.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActiveContext
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeToLive")]
		public ActiveContextTimeToLive TimeToLive { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="contextAttributes")]
		public ActiveContextParametersMap ContextAttributes { get; set; }
	}
	
	/// <summary>
	/// The time that a context is active. You can specify the time to live in seconds or in conversation turns.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActiveContextTimeToLive
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeToLiveInSeconds")]
		public int TimeToLiveInSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="turnsToLive")]
		public int TurnsToLive { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActiveContextParametersMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StringMap
	{
	}
	
	/// <summary>
	/// <p>You can provide Amazon Lex V2 with hints to the phrases that a customer is likely to use for a slot. When a slot with hints is resolved, the phrases in the runtime hints are preferred in the resolution. You can provide hints for a maximum of 100 intents. You can provide a maximum of 100 slots.</p> <p>Before you can use runtime hints with an existing bot, you must first rebuild the bot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/using-hints.html">Using runtime hints to improve recognition of slot values</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuntimeHints
	{
		
		[System.Runtime.Serialization.DataMember(Name="slotHints")]
		public SlotHintsIntentMap SlotHints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlotHintsIntentMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutSessionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="audioStream")]
		public string AudioStream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DependencyFailedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadGatewayException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecognizeTextResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionState")]
		public SessionState SessionState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interpretations")]
		public Interpretation[] Interpretations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestAttributes")]
		public StringMap RequestAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recognizedBotMember")]
		public RecognizedBotMember RecognizedBotMember { get; set; }
	}
	
	/// <summary>
	/// The bot member that processes the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecognizedBotMember
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="botId")]
		public string BotId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="botName")]
		public string BotName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecognizeUtteranceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="audioStream")]
		public string AudioStream { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSessionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSessionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutSessionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sessionState")]
		public SessionState SessionState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestAttributes")]
		public StringMap RequestAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecognizeTextRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionState")]
		public SessionState SessionState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestAttributes")]
		public StringMap RequestAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecognizeUtteranceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="inputStream")]
		public string InputStream { get; set; }
	}
	
	/// <summary>
	/// Provides the phrase that Amazon Lex V2 should look for in the user's input to the bot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuntimeHintValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phrase")]
		public string Phrase { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlotHintsSlotMap
	{
	}
	
	/// <summary>
	/// Provides an array of phrases that should be given preference when resolving values for a slot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuntimeHintDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="runtimeHintValues")]
		public RuntimeHintValue[] RuntimeHintValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subSlotHints")]
		public SlotHintsSlotMap SubSlotHints { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Shape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scalar = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		List = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Composite = 2,
	}
	
	/// <summary>
	/// The value of a slot.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Value
	{
		
		[System.Runtime.Serialization.DataMember(Name="originalValue")]
		public string OriginalValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interpretedValue")]
		public string InterpretedValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolvedValues")]
		public string[] ResolvedValues { get; set; }
	}
	
	/// <summary>
	/// A value that Amazon Lex V2 uses to fulfill an intent. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Slot
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Value Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public Slot[] Values { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subSlots")]
		public Slots SubSlots { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Removes session information for a specified bot, alias, and user ID. </p> <p>You can use this operation to restart a conversation with a bot. When you remove a session, the entire history of the session is removed so that you can start again.</p> <p>You don't need to delete a session. Sessions have a time limit and will expire. Set the session time limit when you create the bot. The default is 5 minutes, but you can specify anything between 1 minute and 24 hours.</p> <p>If you specify a bot or alias ID that doesn't exist, you receive a <code>BadRequestException.</code> </p> <p>If the locale doesn't exist in the bot, or if the locale hasn't been enables for the alias, you receive a <code>BadRequestException</code>.</p>
		/// DeleteSession bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}
		/// </summary>
		/// <param name="botId">The identifier of the bot that contains the session data.</param>
		/// <param name="botAliasId">The alias identifier in use for the bot that contains the session data.</param>
		/// <param name="localeId">The locale where the session is in use.</param>
		/// <param name="sessionId">The identifier of the session to delete.</param>
		/// <returns>Success</returns>
		public async Task<DeleteSessionResponse> DeleteSessionAsync(string botId, string botAliasId, string localeId, string sessionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botAliases/"+ (botAliasId==null? "" : System.Uri.EscapeDataString(botAliasId))+"/botLocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/sessions/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns session information for a specified bot, alias, and user.</p> <p>For example, you can use this operation to retrieve session information for a user that has left a long-running session in use.</p> <p>If the bot, alias, or session identifier doesn't exist, Amazon Lex V2 returns a <code>BadRequestException</code>. If the locale doesn't exist or is not enabled for the alias, you receive a <code>BadRequestException</code>.</p>
		/// GetSession bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}
		/// </summary>
		/// <param name="botId">The identifier of the bot that contains the session data.</param>
		/// <param name="botAliasId">The alias identifier in use for the bot that contains the session data.</param>
		/// <param name="localeId">The locale where the session is in use.</param>
		/// <param name="sessionId">The identifier of the session to return.</param>
		/// <returns>Success</returns>
		public async Task<GetSessionResponse> GetSessionAsync(string botId, string botAliasId, string localeId, string sessionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botAliases/"+ (botAliasId==null? "" : System.Uri.EscapeDataString(botAliasId))+"/botLocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/sessions/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new session or modifies an existing session with an Amazon Lex V2 bot. Use this operation to enable your application to set the state of the bot.
		/// PutSession bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}
		/// </summary>
		/// <param name="botId">The identifier of the bot that receives the session data.</param>
		/// <param name="botAliasId">The alias identifier of the bot that receives the session data.</param>
		/// <param name="localeId">The locale where the session is in use.</param>
		/// <param name="sessionId">The identifier of the session that receives the session data.</param>
		/// <returns>Success</returns>
		public async Task<PutSessionResponse> PutSessionAsync(string botId, string botAliasId, string localeId, string sessionId, PutSessionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botAliases/"+ (botAliasId==null? "" : System.Uri.EscapeDataString(botAliasId))+"/botLocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/sessions/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutSessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sends user input to Amazon Lex V2. Client applications use this API to send requests to Amazon Lex V2 at runtime. Amazon Lex V2 then interprets the user input using the machine learning model that it build for the bot.</p> <p>In response, Amazon Lex V2 returns the next message to convey to the user and an optional response card to display.</p> <p>If the optional post-fulfillment response is specified, the messages are returned as follows. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_PostFulfillmentStatusSpecification.html">PostFulfillmentStatusSpecification</a>.</p> <ul> <li> <p> <b>Success message</b> - Returned if the Lambda function completes successfully and the intent state is fulfilled or ready fulfillment if the message is present.</p> </li> <li> <p> <b>Failed message</b> - The failed message is returned if the Lambda function throws an exception or if the Lambda function returns a failed intent state without a message.</p> </li> <li> <p> <b>Timeout message</b> - If you don't configure a timeout message and a timeout, and the Lambda function doesn't return within 30 seconds, the timeout message is returned. If you configure a timeout, the timeout message is returned when the period times out. </p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/streaming-progress.html#progress-complete.html">Completion message</a>.</p>
		/// RecognizeText bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/text
		/// </summary>
		/// <param name="botId">The identifier of the bot that processes the request.</param>
		/// <param name="botAliasId">The alias identifier in use for the bot that processes the request.</param>
		/// <param name="localeId">The locale where the session is in use.</param>
		/// <param name="sessionId">The identifier of the user session that is having the conversation.</param>
		/// <returns>Success</returns>
		public async Task<RecognizeTextResponse> RecognizeTextAsync(string botId, string botAliasId, string localeId, string sessionId, RecognizeTextPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botAliases/"+ (botAliasId==null? "" : System.Uri.EscapeDataString(botAliasId))+"/botLocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/sessions/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId))+"/text";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecognizeTextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Sends user input to Amazon Lex V2. You can send text or speech. Clients use this API to send text and audio requests to Amazon Lex V2 at runtime. Amazon Lex V2 interprets the user input using the machine learning model built for the bot.</p> <p>The following request fields must be compressed with gzip and then base64 encoded before you send them to Amazon Lex V2. </p> <ul> <li> <p>requestAttributes</p> </li> <li> <p>sessionState</p> </li> </ul> <p>The following response fields are compressed using gzip and then base64 encoded by Amazon Lex V2. Before you can use these fields, you must decode and decompress them. </p> <ul> <li> <p>inputTranscript</p> </li> <li> <p>interpretations</p> </li> <li> <p>messages</p> </li> <li> <p>requestAttributes</p> </li> <li> <p>sessionState</p> </li> </ul> <p>The example contains a Java application that compresses and encodes a Java object to send to Amazon Lex V2, and a second that decodes and decompresses a response from Amazon Lex V2.</p> <p>If the optional post-fulfillment response is specified, the messages are returned as follows. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/API_PostFulfillmentStatusSpecification.html">PostFulfillmentStatusSpecification</a>.</p> <ul> <li> <p> <b>Success message</b> - Returned if the Lambda function completes successfully and the intent state is fulfilled or ready fulfillment if the message is present.</p> </li> <li> <p> <b>Failed message</b> - The failed message is returned if the Lambda function throws an exception or if the Lambda function returns a failed intent state without a message.</p> </li> <li> <p> <b>Timeout message</b> - If you don't configure a timeout message and a timeout, and the Lambda function doesn't return within 30 seconds, the timeout message is returned. If you configure a timeout, the timeout message is returned when the period times out. </p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/streaming-progress.html#progress-complete.html">Completion message</a>.</p>
		/// RecognizeUtterance bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/utterance#Content-Type
		/// </summary>
		/// <param name="botId">The identifier of the bot that should receive the request.</param>
		/// <param name="botAliasId">The alias identifier in use for the bot that should receive the request.</param>
		/// <param name="localeId">The locale where the session is in use.</param>
		/// <param name="sessionId">The identifier of the session in use.</param>
		/// <returns>Success</returns>
		public async Task<RecognizeUtteranceResponse> RecognizeUtteranceAsync(string botId, string botAliasId, string localeId, string sessionId, RecognizeUtterancePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "bots/"+ (botId==null? "" : System.Uri.EscapeDataString(botId))+"/botAliases/"+ (botAliasId==null? "" : System.Uri.EscapeDataString(botAliasId))+"/botLocales/"+ (localeId==null? "" : System.Uri.EscapeDataString(localeId))+"/sessions/"+ (sessionId==null? "" : System.Uri.EscapeDataString(sessionId))+"/utterance#Content-Type";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RecognizeUtteranceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class PutSessionPostBody
	{
		
		/// <summary>
		/// A list of messages to send to the user. Messages are sent in the order that they are defined in the list.
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public Message[] Messages { get; set; }
		
		/// <summary>
		/// The state of the user's session with Amazon Lex V2.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sessionState")]
		public PutSessionPostBodySessionState SessionState { get; set; }
		
		/// <summary>
		/// <p>Request-specific information passed between Amazon Lex V2 and the client application.</p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAttributes")]
		public System.Collections.Generic.Dictionary<string, string> RequestAttributes { get; set; }
	}
	
	public class PutSessionPostBodySessionState
	{
		
		[System.Runtime.Serialization.DataMember(Name="dialogAction")]
		public DialogAction DialogAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intent")]
		public Intent Intent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeContexts")]
		public ActiveContext[] ActiveContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionAttributes")]
		public StringMap SessionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originatingRequestId")]
		public string OriginatingRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtimeHints")]
		public RuntimeHints RuntimeHints { get; set; }
	}
	
	public class RecognizeTextPostBody
	{
		
		/// <summary>
		/// The text that the user entered. Amazon Lex V2 interprets this text.
		/// Required
		/// Max length: 1024
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Text { get; set; }
		
		/// <summary>
		/// The state of the user's session with Amazon Lex V2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionState")]
		public RecognizeTextPostBodySessionState SessionState { get; set; }
		
		/// <summary>
		/// <p>Request-specific information passed between the client application and Amazon Lex V2 </p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestAttributes")]
		public System.Collections.Generic.Dictionary<string, string> RequestAttributes { get; set; }
	}
	
	public class RecognizeTextPostBodySessionState
	{
		
		[System.Runtime.Serialization.DataMember(Name="dialogAction")]
		public DialogAction DialogAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intent")]
		public Intent Intent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activeContexts")]
		public ActiveContext[] ActiveContexts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionAttributes")]
		public StringMap SessionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originatingRequestId")]
		public string OriginatingRequestId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtimeHints")]
		public RuntimeHints RuntimeHints { get; set; }
	}
	
	public class RecognizeUtterancePostBody
	{
		
		/// <summary>
		/// User input in PCM or Opus audio format or text format as described in the <code>requestContentType</code> parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputStream")]
		public string InputStream { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
