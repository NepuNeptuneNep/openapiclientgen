//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Account
	{
		
		/// <summary>
		/// When the account was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The currency code for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// The current balance of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_balance")]
		public System.Nullable<System.Double> Current_balance { get; set; }
		
		/// <summary>
		/// The date of the current balance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_balance_date")]
		public string Current_balance_date { get; set; }
		
		/// <summary>
		/// The exchange rate between the account's currency and the user's base currency, when different. If the currencies are the same, null is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_balance_exchange_rate")]
		public System.Nullable<System.Double> Current_balance_exchange_rate { get; set; }
		
		/// <summary>
		/// The current balance of the account in the user's base currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_balance_in_base_currency")]
		public System.Nullable<System.Double> Current_balance_in_base_currency { get; set; }
		
		/// <summary>
		/// The unique identifier of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Whether the account is a net worth asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_net_worth")]
		public System.Nullable<System.Boolean> Is_net_worth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_scenario")]
		public Scenario Primary_scenario { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_transaction_account")]
		public TransactionAccount Primary_transaction_account { get; set; }
		
		/// <summary>
		/// The current safe balance, if safe balance is activated on the account. If safe balance is not activated, then null is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safe_balance")]
		public System.Nullable<System.Double> Safe_balance { get; set; }
		
		/// <summary>
		/// The current safe balance in the user's base currency, if safe balance is activated on the account. If safe balance is not activated, then null is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safe_balance_in_base_currency")]
		public System.Nullable<System.Double> Safe_balance_in_base_currency { get; set; }
		
		/// <summary>
		/// All scenarios that compose the account, including the primary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scenarios")]
		public Scenario[] Scenarios { get; set; }
		
		/// <summary>
		/// The title of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// All transaction accounts that compose the account, including the primary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transaction_accounts")]
		public TransactionAccount[] Transaction_accounts { get; set; }
		
		/// <summary>
		/// The type of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TransactionAccountType Type { get; set; }
		
		/// <summary>
		/// When the account was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Scenario
	{
		
		/// <summary>
		/// For goals, the date that they should be achieved by.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="achieve_date")]
		public string Achieve_date { get; set; }
		
		/// <summary>
		/// The closing balance of the scenario.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closing_balance")]
		public System.Nullable<System.Double> Closing_balance { get; set; }
		
		/// <summary>
		/// The date of the closing balance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closing_balance_date")]
		public string Closing_balance_date { get; set; }
		
		/// <summary>
		/// When the scenario was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The current balance of the scenario.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_balance")]
		public System.Nullable<System.Double> Current_balance { get; set; }
		
		/// <summary>
		/// The date of the current balance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_balance_date")]
		public string Current_balance_date { get; set; }
		
		/// <summary>
		/// The exchange rate between the scenario's currency and the user's base currency, when different. If the currencies are the same, null is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_balance_exchange_rate")]
		public System.Nullable<System.Double> Current_balance_exchange_rate { get; set; }
		
		/// <summary>
		/// The current balance of the scenario in the user's base currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_balance_in_base_currency")]
		public System.Nullable<System.Double> Current_balance_in_base_currency { get; set; }
		
		/// <summary>
		/// A short description of what the scenario is modelling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The unique identifier of the scenario.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The amount of interest to apply to the balance. Will apply periodically depending on what `interest_rate_repeat_id` is set to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interest_rate")]
		public System.Nullable<System.Double> Interest_rate { get; set; }
		
		/// <summary>
		/// A number representing how often the interest should be applied. 0 is used for no interest, 2 is weekly, 3 is fortnightly, 4 is monthly, 5 is yearly and 7 for quarterly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interest_rate_repeat_id")]
		public System.Nullable<System.Int32> Interest_rate_repeat_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximum-value")]
		public System.Nullable<System.Double> Maximum_value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimum-value")]
		public System.Nullable<System.Double> Minimum_value { get; set; }
		
		/// <summary>
		/// The current safe balance in the user's base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not activated, then null is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safe_balance")]
		public System.Nullable<System.Double> Safe_balance { get; set; }
		
		/// <summary>
		/// The current safe balance in the user's base currency, if safe balance is activated on the account associated with the scenario. If safe balance is not available, then null is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safe_balance_in_base_currency")]
		public System.Nullable<System.Double> Safe_balance_in_base_currency { get; set; }
		
		/// <summary>
		/// The starting balance of the scenario.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starting_balance")]
		public System.Nullable<System.Double> Starting_balance { get; set; }
		
		/// <summary>
		/// The date of the starting balance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starting_balance_date")]
		public string Starting_balance_date { get; set; }
		
		/// <summary>
		/// The title of the scenario.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of the scenario.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ScenarioType> Type { get; set; }
		
		/// <summary>
		/// When the scenario was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScenarioType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="no-interest")]
		noMinusinterest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="savings")]
		savings = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="debt")]
		debt = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransactionAccount
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The currency that the account is in. This is determined by the account that the transaction account belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="current_balance")]
		public System.Nullable<System.Double> Current_balance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="current_balance_date")]
		public string Current_balance_date { get; set; }
		
		/// <summary>
		/// The exchange rate between the transaction account's currency and the user's base currency, when different. If the currencies are the same, null is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_balance_exchange_rate")]
		public System.Nullable<System.Double> Current_balance_exchange_rate { get; set; }
		
		/// <summary>
		/// The current balance of the transaction account in the user's base currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current_balance_in_base_currency")]
		public System.Nullable<System.Double> Current_balance_in_base_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="institution")]
		public Institution Institution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// The current safe balance, if safe balance is activated and available for the transaction account. If safe balance is not available, then null is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safe_balance")]
		public System.Nullable<System.Double> Safe_balance { get; set; }
		
		/// <summary>
		/// The current safe balance in the user's base currency, if safe balance is activated and available for the transaction account. If safe balance is not available, then null is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="safe_balance_in_base_currency")]
		public System.Nullable<System.Double> Safe_balance_in_base_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="starting_balance")]
		public System.Nullable<System.Double> Starting_balance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="starting_balance_date")]
		public string Starting_balance_date { get; set; }
		
		/// <summary>
		/// The type of the transaction account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TransactionAccountType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Institution
	{
		
		/// <summary>
		/// When the institution was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The currency code of the institution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// The unique identifier of the institution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The title of the institution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// When the institution was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransactionAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bank")]
		bank = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credits")]
		credits = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cash")]
		cash = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stocks")]
		stocks = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mortgage")]
		mortgage = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="loans")]
		loans = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vehicle")]
		vehicle = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="property")]
		property = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="insurance")]
		insurance = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other_asset")]
		other_asset = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other_liability")]
		other_liability = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attachment
	{
		
		/// <summary>
		/// The content type of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content_type")]
		public string Content_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content_type_meta")]
		public AttachmentContent_type_meta Content_type_meta { get; set; }
		
		/// <summary>
		/// When the attachment was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The file name of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_name")]
		public string File_name { get; set; }
		
		/// <summary>
		/// The unique identifier of the attachment
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The url of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original_url")]
		public string Original_url { get; set; }
		
		/// <summary>
		/// The title of the attachment. If blank or not provided, the title will be derived from the file name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// When the attachment was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public AttachmentVariants Variants { get; set; }
	}
	
	public class AttachmentContent_type_meta
	{
		
		/// <summary>
		/// The content type description of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The extension type of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extension")]
		public string Extension { get; set; }
		
		/// <summary>
		/// The content type title of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class AttachmentVariants
	{
		
		/// <summary>
		/// The url of the large version of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="large_url")]
		public string Large_url { get; set; }
		
		/// <summary>
		/// The url of the thumb version of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumb_url")]
		public string Thumb_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BudgetAnalysis
	{
		
		/// <summary>
		/// The average actual (transactions) amount across all periods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="average_actual_amount")]
		public System.Nullable<System.Double> Average_actual_amount { get; set; }
		
		/// <summary>
		/// The average budgeted amount across all periods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="average_forecast_amount")]
		public System.Nullable<System.Double> Average_forecast_amount { get; set; }
		
		/// <summary>
		/// The currency of the budget analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// The end date of the budget analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public string End_date { get; set; }
		
		/// <summary>
		/// The period analyses that this budget analysis comprises.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="periods")]
		public Period[] Periods { get; set; }
		
		/// <summary>
		/// The start date of the budget analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public string Start_date { get; set; }
		
		/// <summary>
		/// The total actual (transactions) amount across all periods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_actual_amount")]
		public System.Nullable<System.Double> Total_actual_amount { get; set; }
		
		/// <summary>
		/// The total budgeted amount across all periods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_forecast_amount")]
		public System.Nullable<System.Double> Total_forecast_amount { get; set; }
		
		/// <summary>
		/// The total amount the budget was exceeded across all periods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_over_by")]
		public System.Nullable<System.Double> Total_over_by { get; set; }
		
		/// <summary>
		/// The total amount the budget was under by across all periods.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_under_by")]
		public System.Nullable<System.Double> Total_under_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Period
	{
		
		/// <summary>
		/// The sum of all actuals (transactions) in the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actual_amount")]
		public System.Nullable<System.Double> Actual_amount { get; set; }
		
		/// <summary>
		/// The currency of the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Whether this period is current, such that the current date (in the user's time zone) falls within the date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="current")]
		public System.Nullable<System.Boolean> Current { get; set; }
		
		/// <summary>
		/// The end date of the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end_date")]
		public string End_date { get; set; }
		
		/// <summary>
		/// The sum of all forecast sources (budget events) in the period, for comparison against the actual amount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forecast_amount")]
		public System.Nullable<System.Double> Forecast_amount { get; set; }
		
		/// <summary>
		/// Whether the budget has been exceeded in the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="over_budget")]
		public System.Nullable<System.Boolean> Over_budget { get; set; }
		
		/// <summary>
		/// How much the budget has been exceeded by in the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="over_by")]
		public System.Nullable<System.Double> Over_by { get; set; }
		
		/// <summary>
		/// The percentage of the budget that has been used in the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage_used")]
		public System.Nullable<System.Double> Percentage_used { get; set; }
		
		/// <summary>
		/// This attribute tracks the amount that has been refunded or deducted to the actual amount. When a category is set to "always expense", any credit transactions are treated as refunds and when set to "always income", any debit transactions are treated as deductions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_amount")]
		public System.Nullable<System.Double> Refund_amount { get; set; }
		
		/// <summary>
		/// The start date of the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start_date")]
		public string Start_date { get; set; }
		
		/// <summary>
		/// Whether the budget has not been exceeded in the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="under_budget")]
		public System.Nullable<System.Boolean> Under_budget { get; set; }
		
		/// <summary>
		/// How much there is left in the budget for the period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="under_by")]
		public System.Nullable<System.Double> Under_by { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BudgetAnalysisPackage
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Category Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expense")]
		public BudgetAnalysis Expense { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="income")]
		public BudgetAnalysis Income { get; set; }
		
		/// <summary>
		/// Whether the expense budget analysis looks like a transfer to the income budget analysis, based on a number of heuristics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_transfer")]
		public System.Nullable<System.Boolean> Is_transfer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Category
	{
		
		/// <summary>
		/// The category's child categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public Category[] Children { get; set; }
		
		/// <summary>
		/// The colour for the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colour")]
		public string Colour { get; set; }
		
		/// <summary>
		/// When the category was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The unique identifier of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Whether the category is a bill category. A bill category is when budgeted amounts are normally spent at once, instead of spread across a budgeting period. This category will be included in the bill reminder email when set to true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_bill")]
		public System.Nullable<System.Boolean> Is_bill { get; set; }
		
		/// <summary>
		/// Whether this category has been marked as a transfer category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_transfer")]
		public System.Nullable<System.Boolean> Is_transfer { get; set; }
		
		/// <summary>
		/// The unique identifier of the parent category of this category, or null if this category has no parent (i.e. is a top-level category)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public System.Nullable<System.Int32> Parent_id { get; set; }
		
		/// <summary>
		/// How the category's refunds or deductions should be reported on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_behaviour")]
		public System.Nullable<CategoryRefund_behaviour> Refund_behaviour { get; set; }
		
		/// <summary>
		/// Whether the category's budget is rolled up into its parent category, if a parent category is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roll_up")]
		public System.Nullable<System.Boolean> Roll_up { get; set; }
		
		/// <summary>
		/// The title of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// When the category was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CategoryRefund_behaviour
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="debits_are_deductions")]
		debits_are_deductions = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credits_are_refunds")]
		credits_are_refunds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Category Category { get; set; }
		
		/// <summary>
		/// When the category rule was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The unique identifier of the category rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The keyword/s to match the transactions payees.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payee_matches")]
		public string Payee_matches { get; set; }
		
		/// <summary>
		/// When the category rule was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Currency
	{
		
		/// <summary>
		/// The ISO 4217 or unofficial currency code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The number of digits after the minor unit separator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minor_unit")]
		public System.Nullable<System.Int32> Minor_unit { get; set; }
		
		/// <summary>
		/// The name of the currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="separators")]
		public CurrencySeparators Separators { get; set; }
		
		/// <summary>
		/// The symbol of the currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CurrencySeparators
	{
		
		/// <summary>
		/// The separator used in the major unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="major")]
		public string Major { get; set; }
		
		/// <summary>
		/// The seperator used for the minor unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minor")]
		public string Minor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// A message describing the error that occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Event
	{
		
		/// <summary>
		/// The amount of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// The amount of the event in the user's base currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_in_base_currency")]
		public System.Nullable<System.Double> Amount_in_base_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Category Category { get; set; }
		
		/// <summary>
		/// The CSS hex-style colour of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colour")]
		public string Colour { get; set; }
		
		/// <summary>
		/// The currency code of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// The date of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// The unique identifier of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether the event repeats and does not have an end date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="infinite_series")]
		public System.Nullable<System.Boolean> Infinite_series { get; set; }
		
		/// <summary>
		/// The note of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The repeat interval of how often the event takes place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeat_interval")]
		public System.Nullable<System.Int32> Repeat_interval { get; set; }
		
		/// <summary>
		/// The repeat type of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeat_type")]
		public System.Nullable<EventRepeat_type> Repeat_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scenario")]
		public Scenario Scenario { get; set; }
		
		/// <summary>
		/// The unique identifier of the series that the event belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="series_id")]
		public System.Nullable<System.Int32> Series_id { get; set; }
		
		/// <summary>
		/// The unique identifier of the series followed by the series's start date.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="series_start_id")]
		public string Series_start_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventRepeat_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="once")]
		once = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="daily")]
		daily = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="weekly")]
		weekly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fortnightly")]
		fortnightly = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="monthly")]
		monthly = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yearly")]
		yearly = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="each weekday")]
		each_weekday = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SavedSearch
	{
		
		/// <summary>
		/// When the saved search was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The unique identifier of the saved search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// The title of the saved search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// When the saved search was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TimeZone
	{
		
		/// <summary>
		/// The abbreviation of the time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		/// <summary>
		/// The formatted name of the time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formatted_name")]
		public string Formatted_name { get; set; }
		
		/// <summary>
		/// The formatted offset of the time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formatted_offset")]
		public string Formatted_offset { get; set; }
		
		/// <summary>
		/// The tz database name of the time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// The name of the time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The time zone's UTC offset in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="utc_offset")]
		public System.Nullable<System.Int32> Utc_offset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Transaction
	{
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// The amount of the transaction in the user's base currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount_in_base_currency")]
		public System.Nullable<System.Double> Amount_in_base_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Category Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cheque_number")]
		public string Cheque_number { get; set; }
		
		/// <summary>
		/// The closing balance of the account at the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closing_balance")]
		public System.Nullable<System.Double> Closing_balance { get; set; }
		
		/// <summary>
		/// When the transaction was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The date the transaction took place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// The unique identifier of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Whether the transaction is a transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_transfer")]
		public System.Nullable<System.Boolean> Is_transfer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo")]
		public string Memo { get; set; }
		
		/// <summary>
		/// Whether the transaction needs to be reviewed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="needs_review")]
		public System.Nullable<System.Boolean> Needs_review { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The payee the transaction was created with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original_payee")]
		public string Original_payee { get; set; }
		
		/// <summary>
		/// The payee/merchant of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payee")]
		public string Payee { get; set; }
		
		/// <summary>
		/// The status of the transaction. Pending transactions are temporary and may be superseded later by their posted counterparts, which are permanent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TransactionStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction_account")]
		public TransactionAccount Transaction_account { get; set; }
		
		/// <summary>
		/// Whether the transaction is a debit or a credit
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TransactionType> Type { get; set; }
		
		/// <summary>
		/// When the transaction was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// Where the transaction came from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upload_source")]
		public string Upload_source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransactionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pending")]
		pending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="posted")]
		posted = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransactionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="debit")]
		debit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credit")]
		credit = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// Whether the user wants to see all accounts in their base currency instead of the native account currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="always_show_base_currency")]
		public System.Nullable<System.Boolean> Always_show_base_currency { get; set; }
		
		/// <summary>
		/// The user's total number of available accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_accounts")]
		public System.Nullable<System.Int32> Available_accounts { get; set; }
		
		/// <summary>
		/// The user's total number of available budgets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="available_budgets")]
		public System.Nullable<System.Int32> Available_budgets { get; set; }
		
		/// <summary>
		/// The URL to the user's avatar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avatar_url")]
		public string Avatar_url { get; set; }
		
		/// <summary>
		/// The user's base currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base_currency_code")]
		public string Base_currency_code { get; set; }
		
		/// <summary>
		/// Whether the user has opted in to beta features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beta_user")]
		public System.Nullable<System.Boolean> Beta_user { get; set; }
		
		/// <summary>
		/// When the user signed up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public string Created_at { get; set; }
		
		/// <summary>
		/// The user's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Whether the user's forecast recalculation should be deferred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forecast_defer_recalculate")]
		public System.Nullable<System.Boolean> Forecast_defer_recalculate { get; set; }
		
		/// <summary>
		/// The date that the user's forecast ends.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forecast_end_date")]
		public string Forecast_end_date { get; set; }
		
		/// <summary>
		/// When the user's forecast was last accessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forecast_last_accessed_at")]
		public string Forecast_last_accessed_at { get; set; }
		
		/// <summary>
		/// When the user's forecast was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forecast_last_updated_at")]
		public string Forecast_last_updated_at { get; set; }
		
		/// <summary>
		/// Whether the user's forecast needs to be recalculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forecast_needs_recalculate")]
		public System.Nullable<System.Boolean> Forecast_needs_recalculate { get; set; }
		
		/// <summary>
		/// The date that the user's forecast starts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forecast_start_date")]
		public string Forecast_start_date { get; set; }
		
		/// <summary>
		/// The unique identifier of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// Whether the user wants to review new transactions, transfer transactions or categorisation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_reviewing_transactions")]
		public System.Nullable<System.Boolean> Is_reviewing_transactions { get; set; }
		
		/// <summary>
		/// When the user last interacted with PocketSmith, via any application or the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_activity_at")]
		public string Last_activity_at { get; set; }
		
		/// <summary>
		/// When the user last logged into PocketSmith.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_logged_in_at")]
		public string Last_logged_in_at { get; set; }
		
		/// <summary>
		/// The user's username.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="login")]
		public string Login { get; set; }
		
		/// <summary>
		/// The full name of the user, although not all users will have a name set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The user's time zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_zone")]
		public string Time_zone { get; set; }
		
		/// <summary>
		/// When the user was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public string Updated_at { get; set; }
		
		/// <summary>
		/// Whether the user has multiple currencies in use across their account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="using_multiple_currencies")]
		public System.Nullable<System.Boolean> Using_multiple_currencies { get; set; }
		
		/// <summary>
		/// The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="week_start_day")]
		public System.Nullable<System.Int32> Week_start_day { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete account
		/// Deletes an account and all its data by ID, optionally merge scenarios into another account.
		/// Accounts_idDelete accounts/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the account.</param>
		public async Task Accounts_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get account
		/// Gets an account by its ID.
		/// Accounts_idGet accounts/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the account.</param>
		/// <returns>Success</returns>
		public async Task<Account> Accounts_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update account
		/// Updates and returns an account by its ID.
		/// Accounts_idPut accounts/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the account.</param>
		/// <returns>Success</returns>
		public async Task<Account> Accounts_idPutAsync(int id, Accounts_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List transactions in account
		/// Lists transactions belonging to an account by its ID.
		/// Accounts_idTransactionsGetByStart_dateAndEnd_dateAndUpdated_sinceAndUncategorisedAndTypeAndNeeds_reviewAndSearchAndPage accounts/{id}/transactions
		/// </summary>
		/// <param name="id">The unique identifier of the account.</param>
		/// <param name="start_date">Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user's subscription.</param>
		/// <param name="end_date">Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today's date.</param>
		/// <param name="updated_since">Limit to transactions updated since an ISO 8601 timestamp.</param>
		/// <param name="uncategorised">Limit to uncategorised transactions.</param>
		/// <param name="type">Limit to transactions of this type.</param>
		/// <param name="needs_review">Limit to transactions that need to be reviewed.</param>
		/// <param name="search">Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.</param>
		/// <param name="page">Choose a particular page of the results.</param>
		/// <returns>Success</returns>
		public async Task<Transaction[]> Accounts_idTransactionsGetByStart_dateAndEnd_dateAndUpdated_sinceAndUncategorisedAndTypeAndNeeds_reviewAndSearchAndPageAsync(int id, string start_date, string end_date, string updated_since, int uncategorised, TransactionType type, int needs_review, string search, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+id+"/transactions?start_date=" + (start_date==null? "" : System.Uri.EscapeDataString(start_date))+"&end_date=" + (end_date==null? "" : System.Uri.EscapeDataString(end_date))+"&updated_since=" + (updated_since==null? "" : System.Uri.EscapeDataString(updated_since))+"&uncategorised="+uncategorised+"&type=" + type+"&needs_review="+needs_review+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete attachment
		/// Deletes a particular attachment by its ID.
		/// Attachments_idDelete attachments/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the attachment.</param>
		public async Task Attachments_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attachments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get attachment
		/// Gets a particular attachment by its ID.
		/// Attachments_idGet attachments/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the attachment.</param>
		/// <returns>Success</returns>
		public async Task<Attachment> Attachments_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attachments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update attachment
		/// Updates the title of the attachment.
		/// Attachments_idPut attachments/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the attachment.</param>
		/// <returns>Success</returns>
		public async Task<Attachment> Attachments_idPutAsync(int id, Attachments_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attachments/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete category
		/// Deletes a particular category by its ID. This will delete all budgets within the category, and uncategorize all transactions assigned to the category.
		/// Categories_idDelete categories/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the category.</param>
		public async Task Categories_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get category
		/// Gets a particular category by its ID.
		/// Categories_idGet categories/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the category.</param>
		/// <returns>Success</returns>
		public async Task<Category> Categories_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Category>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update category
		/// Updates a category by its ID.
		/// Categories_idPut categories/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the category.</param>
		/// <returns>Success</returns>
		public async Task<Category> Categories_idPutAsync(int id, Categories_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Category>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create category rule in category
		/// Creates a rule to allocate a category to transactions.
		/// Categories_idCategory_rulesPost categories/{id}/category_rules
		/// </summary>
		/// <param name="id">The unique identifier of the category.</param>
		/// <returns>Success</returns>
		public async Task<CategoryRule> Categories_idCategory_rulesPostAsync(int id, Categories_idCategory_rulesPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+id+"/category_rules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategoryRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List transactions in categories
		/// Lists transactions belonging to one or more categories by their IDs.
		/// Categories_idTransactionsGetByStart_dateAndEnd_dateAndUpdated_sinceAndUncategorisedAndTypeAndNeeds_reviewAndSearchAndPage categories/{id}/transactions
		/// </summary>
		/// <param name="id">A comma-separated list of category IDs.</param>
		/// <param name="start_date">Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user's subscription.</param>
		/// <param name="end_date">Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today's date.</param>
		/// <param name="updated_since">Limit to transactions updated since an ISO 8601 timestamp.</param>
		/// <param name="uncategorised">Limit to uncategorised transactions.</param>
		/// <param name="type">Limit to transactions of this type.</param>
		/// <param name="needs_review">Limit to transactions that need to be reviewed.</param>
		/// <param name="search">Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.</param>
		/// <param name="page">Choose a particular page of the results.</param>
		/// <returns>Success</returns>
		public async Task<Transaction[]> Categories_idTransactionsGetByStart_dateAndEnd_dateAndUpdated_sinceAndUncategorisedAndTypeAndNeeds_reviewAndSearchAndPageAsync(string id, string start_date, string end_date, string updated_since, int uncategorised, TransactionType type, int needs_review, string search, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/transactions&start_date=" + (start_date==null? "" : System.Uri.EscapeDataString(start_date))+"&end_date=" + (end_date==null? "" : System.Uri.EscapeDataString(end_date))+"&updated_since=" + (updated_since==null? "" : System.Uri.EscapeDataString(updated_since))+"&uncategorised="+uncategorised+"&type=" + type+"&needs_review="+needs_review+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List currencies
		/// Lists currencies supported by PocketSmith.
		/// CurrenciesGet currencies
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Currency[]> CurrenciesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "currencies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Currency[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get currency
		/// Gets a particular currency by its ID.
		/// Currencies_idGet currencies/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the currency.</param>
		/// <returns>Success</returns>
		public async Task<Currency> Currencies_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "currencies/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Currency>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete event
		/// Deletes an event by its ID.
		/// Events_idDeleteByBehaviour events/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the event.</param>
		/// <param name="behaviour">Whether the delete applies only to this event, to all events within the series from this event or to all events within the series.</param>
		public async Task Events_idDeleteByBehaviourAsync(string id, Events_idDeleteByBehaviourBehaviour behaviour, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&behaviour=" + behaviour;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get event
		/// Gets a particular event by its ID.
		/// Events_idGet events/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the event.</param>
		/// <returns>Success</returns>
		public async Task<Event> Events_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update event
		/// Updates an event by its ID.
		/// Events_idPut events/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the event.</param>
		/// <returns>Success</returns>
		public async Task<Event> Events_idPutAsync(string id, Events_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete institution
		/// Deletes an institution and all data within. Alternatively, another institution can be provided to merge the data into to avoid losing it.
		/// Institutions_idDeleteByMerge_into_institution_id institutions/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the institution.</param>
		/// <param name="merge_into_institution_id">The unique identifier of the institution to merge into.</param>
		public async Task Institutions_idDeleteByMerge_into_institution_idAsync(int id, int merge_into_institution_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "institutions/"+id+"?merge_into_institution_id="+merge_into_institution_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get institution
		/// Gets an institution by its ID.
		/// Institutions_idGet institutions/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the institution.</param>
		/// <returns>Success</returns>
		public async Task<Institution> Institutions_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "institutions/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Institution>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update institution
		/// Updates the title and currency code for an institution.
		/// Institutions_idPut institutions/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the institution.</param>
		/// <returns>Success</returns>
		public async Task<Institution> Institutions_idPutAsync(int id, Institutions_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "institutions/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Institution>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List accounts in institution
		/// Lists accounts belonging to an institution by its ID.
		/// Institutions_idAccountsGet institutions/{id}/accounts
		/// </summary>
		/// <param name="id">The unique identifier of the institution.</param>
		/// <returns>Success</returns>
		public async Task<Account[]> Institutions_idAccountsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "institutions/"+id+"/accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the authorised user
		/// Gets the user that corresponds to the access token used in the request.
		/// MeGet me
		/// </summary>
		/// <returns>Success</returns>
		public async Task<User> MeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List events in scenario.
		/// Lists events belonging to a scenario by their ID.
		/// Scenarios_idEventsGetByStart_dateAndEnd_date scenarios/{id}/events
		/// </summary>
		/// <param name="id">The unique identifier of the scenario.</param>
		/// <param name="start_date">Return the events from and including this date.</param>
		/// <param name="end_date">Return the events until and including this date.</param>
		/// <returns>Success</returns>
		public async Task<Event[]> Scenarios_idEventsGetByStart_dateAndEnd_dateAsync(int id, string start_date, string end_date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scenarios/"+id+"/events?start_date=" + (start_date==null? "" : System.Uri.EscapeDataString(start_date))+"&end_date=" + (end_date==null? "" : System.Uri.EscapeDataString(end_date));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create event in scenario
		/// Creates an event in a scenario by its ID.
		/// Scenarios_idEventsPost scenarios/{id}/events
		/// </summary>
		/// <param name="id">The unique identifier of the scenario.</param>
		public async Task Scenarios_idEventsPostAsync(int id, Scenarios_idEventsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scenarios/"+id+"/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List time zones
		/// Lists time zones.
		/// Time_zonesGet time_zones
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TimeZone[]> Time_zonesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "time_zones";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TimeZone[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get transaction account
		/// Gets a transaction account by its ID.
		/// Transaction_accounts_idGet transaction_accounts/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the transaction account.</param>
		/// <returns>Success</returns>
		public async Task<TransactionAccount> Transaction_accounts_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transaction_accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransactionAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update transaction account
		/// Updates the transaction account by its ID.
		/// Transaction_accounts_idPut transaction_accounts/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the transaction account.</param>
		/// <returns>Success</returns>
		public async Task<TransactionAccount> Transaction_accounts_idPutAsync(int id, Transaction_accounts_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transaction_accounts/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransactionAccount>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List transactions in transaction account
		/// Lists transactions belonging to a transaction account by its ID.
		/// Transaction_accounts_idTransactionsGetByStart_dateAndEnd_dateAndUpdated_sinceAndUncategorisedAndTypeAndNeeds_reviewAndSearchAndPage transaction_accounts/{id}/transactions
		/// </summary>
		/// <param name="id">The unique identifier of the transaction account.</param>
		/// <param name="start_date">Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user's subscription.</param>
		/// <param name="end_date">Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today's date.</param>
		/// <param name="updated_since">Limit to transactions updated since an ISO 8601 timestamp.</param>
		/// <param name="uncategorised">Limit to uncategorised transactions.</param>
		/// <param name="type">Limit to transactions of this type.</param>
		/// <param name="needs_review">Limit to transactions that need to be reviewed.</param>
		/// <param name="search">Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.</param>
		/// <param name="page">Choose a particular page of the results.</param>
		/// <returns>Success</returns>
		public async Task<Transaction[]> Transaction_accounts_idTransactionsGetByStart_dateAndEnd_dateAndUpdated_sinceAndUncategorisedAndTypeAndNeeds_reviewAndSearchAndPageAsync(int id, string start_date, string end_date, string updated_since, int uncategorised, TransactionType type, int needs_review, string search, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transaction_accounts/"+id+"/transactions?start_date=" + (start_date==null? "" : System.Uri.EscapeDataString(start_date))+"&end_date=" + (end_date==null? "" : System.Uri.EscapeDataString(end_date))+"&updated_since=" + (updated_since==null? "" : System.Uri.EscapeDataString(updated_since))+"&uncategorised="+uncategorised+"&type=" + type+"&needs_review="+needs_review+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a transaction in transaction account
		/// Creates a transaction in a transaction account by its ID.
		/// Transaction_accounts_idTransactionsPost transaction_accounts/{id}/transactions
		/// </summary>
		/// <param name="id">The unique identifier of the transaction account.</param>
		public async Task Transaction_accounts_idTransactionsPostAsync(int id, Transaction_accounts_idTransactionsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transaction_accounts/"+id+"/transactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete transaction
		/// Deletes a transaction and all its data by ID.
		/// Transactions_idDelete transactions/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the transaction.</param>
		public async Task Transactions_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a transaction
		/// Gets a transaction by its ID.
		/// Transactions_idGet transactions/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the transaction.</param>
		/// <returns>Success</returns>
		public async Task<Transaction> Transactions_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a transaction
		/// Updates a transaction by its ID.
		/// Transactions_idPut transactions/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the transaction.</param>
		/// <returns>Success</returns>
		public async Task<Transaction> Transactions_idPutAsync(int id, Transactions_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List attachments in transaction
		/// Lists attachments belonging to a transaction by their ID.
		/// Transactions_idAttachmentsGet transactions/{id}/attachments
		/// </summary>
		/// <param name="id">The unique identifier of the transaction.</param>
		/// <returns>Success</returns>
		public async Task<Attachment[]> Transactions_idAttachmentsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+id+"/attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assigns attachment to transaction
		/// Assigns an attachment to the transaction by their ID.
		/// Transactions_idAttachmentsPost transactions/{id}/attachments
		/// </summary>
		/// <param name="id">The unique identifier of the transaction.</param>
		public async Task Transactions_idAttachmentsPostAsync(int id, Transactions_idAttachmentsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+id+"/attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unassigns attachment in transaction
		/// Unassigns a particular attachment by its ID from the transaction ID. This does not delete the attachment, it only removes its association from the transaction.
		/// Transactions_transaction_idAttachments_attachment_idDelete transactions/{transaction_id}/attachments/{attachment_id}
		/// </summary>
		/// <param name="transaction_id">The unique identifier of the transaction.</param>
		/// <param name="attachment_id">The unique identifier of the attachment.</param>
		public async Task Transactions_transaction_idAttachments_attachment_idDeleteAsync(int transaction_id, int attachment_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+transaction_id+"/attachments/"+attachment_id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get user
		/// Gets a user by ID. You must be authorised as the target user in order to make this request.
		/// Users_idGet users/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <returns>Success</returns>
		public async Task<User> Users_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update user
		/// Updates the user by their ID. You must be authorised as the target user in order to make this request.
		/// Users_idPut users/{id}
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <returns>Success</returns>
		public async Task<User> Users_idPutAsync(int id, Users_idPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<User>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List accounts in user
		/// Lists all accounts belonging to the user by their ID.
		/// Users_idAccountsGet users/{id}/accounts
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <returns>Success</returns>
		public async Task<Account[]> Users_idAccountsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an account in user
		/// Creates and returns an account belonging to the user by their ID.
		/// Users_idAccountsPost users/{id}/accounts
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		public async Task Users_idAccountsPostAsync(int id, Users_idAccountsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the display order of accounts in user
		/// Updates the display order of accounts belonging to the user, by accepting an array of accounts in their new display order.
		/// Users_idAccountsPut users/{id}/accounts
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <returns>Success</returns>
		public async Task<Account[]> Users_idAccountsPutAsync(int id, Users_idAccountsPutPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Account[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists attachments in user
		/// Lists attachments belonging to a user by their ID.
		/// Users_idAttachmentsGetByUnassigned users/{id}/attachments
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <param name="unassigned">If set, returns unassigned attachments, that are available for assigning to a transaction.</param>
		/// <returns>Success</returns>
		public async Task<Attachment[]> Users_idAttachmentsGetByUnassignedAsync(int id, int unassigned, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/attachments?unassigned="+unassigned;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create attachment in user
		/// Creates an attachment belonging to the user by their ID.
		/// Users_idAttachmentsPost users/{id}/attachments
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <returns>Success</returns>
		public async Task<Attachment> Users_idAttachmentsPostAsync(int id, Users_idAttachmentsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Attachment>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List budget for user
		/// Lists the user's budget, consisting of one or more budget analysis packages, one per category. Akin to the list on the Budget page in PocketSmith.
		/// Users_idBudgetGetByRoll_up users/{id}/budget
		/// </summary>
		/// <param name="id">The unique identifier of the account.</param>
		/// <param name="roll_up">Whether parent categories should have their children rolled up into them. When used, the children will still appear in the collection on their own, but their actual and forecast figures will be rolled up to the root parent.</param>
		/// <returns>Success</returns>
		public async Task<BudgetAnalysisPackage[]> Users_idBudgetGetByRoll_upAsync(int id, bool roll_up, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/budget?roll_up="+roll_up;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BudgetAnalysisPackage[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get budget summary for user
		/// Get the user's budget summary, containing an expense and income analysis for all categories (excluding transfer categories) for the given period and date range. Akin to the overall budget shown on the Budget page in PocketSmith.
		/// Users_idBudget_summaryGetByPeriodAndIntervalAndStart_dateAndEnd_date users/{id}/budget_summary
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <param name="period">The period to analyse in, one of `weeks`, `months` or `years`. Also supported is `event`, although event period analysis is only possible when the budget events gathered align, so in this case where all categories are analysed together, it's highly unlikely that event period analysis will be possible.</param>
		/// <param name="interval">The period interval, e.g. if the interval is 2 and the period is weeks, the budget will be analysed fortnightly.</param>
		/// <param name="start_date">The date to start analysing the budget from. This will be bumped out to make full periods as necessary.</param>
		/// <param name="end_date">The date to stop analysing the budget from. This will be bumped out to make full periods as necessary.</param>
		/// <returns>Success</returns>
		public async Task<BudgetAnalysisPackage[]> Users_idBudget_summaryGetByPeriodAndIntervalAndStart_dateAndEnd_dateAsync(int id, Users_idBudget_summaryGetByPeriodAndIntervalAndStart_dateAndEnd_datePeriod period, int interval, string start_date, string end_date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/budget_summary?period=" + period+"&interval="+interval+"&start_date=" + (start_date==null? "" : System.Uri.EscapeDataString(start_date))+"&end_date=" + (end_date==null? "" : System.Uri.EscapeDataString(end_date));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BudgetAnalysisPackage[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List categories in user
		/// Lists all categories belonging to a user by their ID.
		/// Users_idCategoriesGet users/{id}/categories
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <returns>Success</returns>
		public async Task<Category[]> Users_idCategoriesGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Category[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create category in user
		/// Creates a category belonging to the user by their ID.
		/// Users_idCategoriesPost users/{id}/categories
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		public async Task Users_idCategoriesPostAsync(int id, Users_idCategoriesPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List category rules in user
		/// Lists all category rules belonging to a user by their ID.
		/// Users_idCategory_rulesGet users/{id}/category_rules
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <returns>Success</returns>
		public async Task<CategoryRule[]> Users_idCategory_rulesGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/category_rules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategoryRule[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List events in user.
		/// Lists events belonging to a user by their ID.
		/// Users_idEventsGetByStart_dateAndEnd_date users/{id}/events
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <param name="start_date">Return the events from and including this date.</param>
		/// <param name="end_date">Return the events until and including this date.</param>
		/// <returns>Success</returns>
		public async Task<Event[]> Users_idEventsGetByStart_dateAndEnd_dateAsync(int id, string start_date, string end_date, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/events?start_date=" + (start_date==null? "" : System.Uri.EscapeDataString(start_date))+"&end_date=" + (end_date==null? "" : System.Uri.EscapeDataString(end_date));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Event[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete forecast cache for user
		/// Delete the user's cached forecast by recalculating the forecast.
		/// Users_idForecast_cacheDelete users/{id}/forecast_cache
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		public async Task Users_idForecast_cacheDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/forecast_cache";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List institutions in user
		/// Lists all the institutions belonging to the user.
		/// Users_idInstitutionsGet users/{id}/institutions
		/// </summary>
		/// <param name="id">The unique identifier of the user</param>
		/// <returns>Success</returns>
		public async Task<Institution[]> Users_idInstitutionsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/institutions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Institution[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create institution in user
		/// Creates an institution belonging to a user.
		/// Users_idInstitutionsPost users/{id}/institutions
		/// </summary>
		/// <param name="id">The unique identifier of the user</param>
		public async Task Users_idInstitutionsPostAsync(int id, Users_idInstitutionsPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/institutions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List labels in user
		/// Lists labels belonging to a user by their ID.
		/// Users_idLabelsGet users/{id}/labels
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <returns>Success</returns>
		public async Task<string[]> Users_idLabelsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List saved searches in user
		/// Lists saved searches belonging to a user by their ID.
		/// Users_idSaved_searchesGet users/{id}/saved_searches
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <returns>Success</returns>
		public async Task<SavedSearch[]> Users_idSaved_searchesGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/saved_searches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SavedSearch[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List transaction accounts in user
		/// List all transaction accounts belonging to a user.
		/// Users_idTransaction_accountsGet users/{id}/transaction_accounts
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <returns>Success</returns>
		public async Task<TransactionAccount[]> Users_idTransaction_accountsGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/transaction_accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TransactionAccount[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List transactions in user
		/// Lists transactions belonging to a user by their ID.
		/// Users_idTransactionsGetByStart_dateAndEnd_dateAndUpdated_sinceAndUncategorisedAndTypeAndNeeds_reviewAndSearchAndPage users/{id}/transactions
		/// </summary>
		/// <param name="id">The unique identifier of the account.</param>
		/// <param name="start_date">Limit to transactions on or after this date. Required if end_date is provided. If not provided, defaults to the furtherest date allowed by the user's subscription.</param>
		/// <param name="end_date">Limit to transactions on or before this date. Required if start_date is provided. If not provided, defaults to today's date.</param>
		/// <param name="updated_since">Limit to transactions updated since an ISO 8601 timestamp.</param>
		/// <param name="uncategorised">Limit to uncategorised transactions.</param>
		/// <param name="type">Limit to transactions of this type.</param>
		/// <param name="needs_review">Limit to transactions that need to be reviewed.</param>
		/// <param name="search">Limit to transactions matching a keyword search string. The provided string is matched against the transaction amount, account name, payee, category title, note, labels, and the date in ISO 8601 format.</param>
		/// <param name="page">Choose a particular page of the results.</param>
		/// <returns>Success</returns>
		public async Task<Transaction[]> Users_idTransactionsGetByStart_dateAndEnd_dateAndUpdated_sinceAndUncategorisedAndTypeAndNeeds_reviewAndSearchAndPageAsync(int id, string start_date, string end_date, string updated_since, int uncategorised, TransactionType type, int needs_review, string search, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/transactions?start_date=" + (start_date==null? "" : System.Uri.EscapeDataString(start_date))+"&end_date=" + (end_date==null? "" : System.Uri.EscapeDataString(end_date))+"&updated_since=" + (updated_since==null? "" : System.Uri.EscapeDataString(updated_since))+"&uncategorised="+uncategorised+"&type=" + type+"&needs_review="+needs_review+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Transaction[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get trend analysis for user
		/// Get an income and/or expense budget analysis for the given date range and period across any number of categories and scenarios. Akin to the Trends page in PocketSmith.
		/// Users_idTrend_analysisGetByPeriodAndIntervalAndStart_dateAndEnd_dateAndCategoriesAndScenarios users/{id}/trend_analysis
		/// </summary>
		/// <param name="id">The unique identifier of the user.</param>
		/// <param name="period">The period to analyse in, one of `weeks`, `months` or `years`. Also supported is `event`, although event period analysis is only possible when the budget events gathered align, so in this case where all categories are analysed together, it's highly unlikely that event period analysis will be possible.</param>
		/// <param name="interval">The period interval, e.g. if the interval is 2 and the period is weeks, the budget will be analysed fortnightly.</param>
		/// <param name="start_date">The date to start analysing the budget from. This will be bumped out to make full periods as necessary.</param>
		/// <param name="end_date">The date to stop analysing the budget from. This will be bumped out to make full periods as necessary.</param>
		/// <param name="categories">A comma-separated list of category IDs to analyse.</param>
		/// <param name="scenarios">A comma-separated list of scenario IDs to analyse. You're likely going to want to include all a user's scenarios here, unless you have reason to only analyse for a subset of scenarios. Regardless of what scenarios are analysed, all actuals (transactions) across all accounts will be included.</param>
		/// <returns>Success</returns>
		public async Task<BudgetAnalysisPackage[]> Users_idTrend_analysisGetByPeriodAndIntervalAndStart_dateAndEnd_dateAndCategoriesAndScenariosAsync(int id, Users_idTrend_analysisGetByPeriodAndIntervalAndStart_dateAndEnd_dateAndCategoriesAndScenariosPeriod period, int interval, string start_date, string end_date, string categories, string scenarios, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+id+"/trend_analysis?period=" + period+"&interval="+interval+"&start_date=" + (start_date==null? "" : System.Uri.EscapeDataString(start_date))+"&end_date=" + (end_date==null? "" : System.Uri.EscapeDataString(end_date))+"&categories=" + (categories==null? "" : System.Uri.EscapeDataString(categories))+"&scenarios=" + (scenarios==null? "" : System.Uri.EscapeDataString(scenarios));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BudgetAnalysisPackage[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class Accounts_idPutPutBody
	{
		
		/// <summary>
		/// A new currency code for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// Whether the account is a net worth account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_net_worth")]
		public System.Nullable<System.Boolean> Is_net_worth { get; set; }
		
		/// <summary>
		/// A new title for the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<Accounts_idPutPutBodyType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Accounts_idPutPutBodyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bank")]
		bank = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credits")]
		credits = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="cash")]
		cash = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="loans")]
		loans = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mortgage")]
		mortgage = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stocks")]
		stocks = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="vehicle")]
		vehicle = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="property")]
		property = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="insurance")]
		insurance = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other_asset")]
		other_asset = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other_liability")]
		other_liability = 10,
	}
	
	public class Attachments_idPutPutBody
	{
		
		/// <summary>
		/// The new title of the attachment. If the title is blank or not provided, the server will derive a title from the file name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class Categories_idPutPutBody
	{
		
		/// <summary>
		/// A new CSS-style hex colour for the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colour")]
		public string Colour { get; set; }
		
		/// <summary>
		/// Set the category as a bill category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_bill")]
		public System.Nullable<System.Boolean> Is_bill { get; set; }
		
		/// <summary>
		/// Set the category as a transfer category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_transfer")]
		public System.Nullable<System.Boolean> Is_transfer { get; set; }
		
		/// <summary>
		/// The unique identifier of a parent category for the category, making this category a child of that category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public System.Nullable<System.Int32> Parent_id { get; set; }
		
		/// <summary>
		/// Set the refund behaviour of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_behaviour")]
		public System.Nullable<Categories_idPutPutBodyRefund_behaviour> Refund_behaviour { get; set; }
		
		/// <summary>
		/// Set the category to be rolled up into its parent category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roll_up")]
		public System.Nullable<System.Boolean> Roll_up { get; set; }
		
		/// <summary>
		/// A new title for the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Categories_idPutPutBodyRefund_behaviour
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="debits_are_deductions")]
		debits_are_deductions = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credits_are_refunds")]
		credits_are_refunds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 2,
	}
	
	public class Categories_idCategory_rulesPostPostBody
	{
		
		/// <summary>
		/// Apply the created category rule to all transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apply_to_all")]
		public System.Nullable<System.Boolean> Apply_to_all { get; set; }
		
		/// <summary>
		/// Apply the created category rule to all uncategorised transactions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apply_to_uncategorised")]
		public System.Nullable<System.Boolean> Apply_to_uncategorised { get; set; }
		
		/// <summary>
		/// The keyword/s to match the transaction payees.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payee_matches")]
		public string Payee_matches { get; set; }
	}
	
	public enum Events_idDeleteByBehaviourBehaviour
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="one")]
		one = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="forward")]
		forward = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 2,
	}
	
	public class Events_idPutPutBody
	{
		
		/// <summary>
		/// The amount of the event. A positive amount is a credit, and a negative amount is a debit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// Whether the update applies only to this event, to all events within the series from this event or to all events within the series.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="behaviour")]
		public Events_idDeleteByBehaviourBehaviour Behaviour { get; set; }
		
		/// <summary>
		/// A note for the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The repeat interval of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeat_interval")]
		public System.Nullable<System.Int32> Repeat_interval { get; set; }
		
		/// <summary>
		/// The repeat type of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeat_type")]
		public System.Nullable<Events_idPutPutBodyRepeat_type> Repeat_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Events_idPutPutBodyRepeat_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="once")]
		once = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="daily")]
		daily = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="weekly")]
		weekly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fortnightly")]
		fortnightly = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="monthly")]
		monthly = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yearly")]
		yearly = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="each weekday")]
		each_weekday = 6,
	}
	
	public class Institutions_idPutPutBody
	{
		
		/// <summary>
		/// A new currency code for the institution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// A new title for the institution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class Scenarios_idEventsPostPostBody
	{
		
		/// <summary>
		/// The amount of the event. A positive amount is a credit, and a negative amount is a debit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unique identifier of the category for the event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category_id")]
		public int Category_id { get; set; }
		
		/// <summary>
		/// The starting date of the event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// A note for the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The repeat interval of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeat_interval")]
		public System.Nullable<System.Int32> Repeat_interval { get; set; }
		
		/// <summary>
		/// The repeat type of the event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repeat_type")]
		public Scenarios_idEventsPostPostBodyRepeat_type Repeat_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Scenarios_idEventsPostPostBodyRepeat_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="once")]
		once = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="daily")]
		daily = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="weekly")]
		weekly = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fortnightly")]
		fortnightly = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="monthly")]
		monthly = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="yearly")]
		yearly = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="each weekday")]
		each_weekday = 6,
	}
	
	public class Transaction_accounts_idPutPutBody
	{
		
		/// <summary>
		/// The unique identifier of a new institution for the transaction account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		public System.Nullable<System.Int32> Institution_id { get; set; }
		
		/// <summary>
		/// The starting balance amount of the transaction account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starting_balance")]
		public System.Nullable<System.Double> Starting_balance { get; set; }
		
		/// <summary>
		/// The starting balance date of the transaction account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starting_balance_date")]
		public string Starting_balance_date { get; set; }
	}
	
	public class Transaction_accounts_idTransactionsPostPostBody
	{
		
		/// <summary>
		/// The amount of the transaction. A positive amount is a credit, and a negative amount is a debit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// The unique identifier of a category for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_id")]
		public System.Nullable<System.Int32> Category_id { get; set; }
		
		/// <summary>
		/// A cheque number for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cheque_number")]
		public string Cheque_number { get; set; }
		
		/// <summary>
		/// The date when the transaction occurred.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Whether the transaction should be indicated as a transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_transfer")]
		public System.Nullable<System.Boolean> Is_transfer { get; set; }
		
		/// <summary>
		/// A set of comma-separated labels for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string Labels { get; set; }
		
		/// <summary>
		/// A memo for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo")]
		public string Memo { get; set; }
		
		/// <summary>
		/// Whether the transaction needs to be reviewed or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="needs_review")]
		public System.Nullable<System.Boolean> Needs_review { get; set; }
		
		/// <summary>
		/// A note for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// The payee/merchant of the transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payee")]
		public string Payee { get; set; }
	}
	
	public class Transactions_idPutPutBody
	{
		
		/// <summary>
		/// A new amount for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public System.Nullable<System.Double> Amount { get; set; }
		
		/// <summary>
		/// The unique identifier of a new category for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_id")]
		public System.Nullable<System.Int32> Category_id { get; set; }
		
		/// <summary>
		/// A new cheque number for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cheque_number")]
		public string Cheque_number { get; set; }
		
		/// <summary>
		/// A new date for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Whether the transaction is a transfer or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_transfer")]
		public System.Nullable<System.Boolean> Is_transfer { get; set; }
		
		/// <summary>
		/// A new comma-separated set of labels for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string Labels { get; set; }
		
		/// <summary>
		/// A new memo for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo")]
		public string Memo { get; set; }
		
		/// <summary>
		/// Whether the transaction needs to be reviewed or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="needs_review")]
		public System.Nullable<System.Boolean> Needs_review { get; set; }
		
		/// <summary>
		/// A new note for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// A new payee for the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payee")]
		public string Payee { get; set; }
	}
	
	public class Transactions_idAttachmentsPostPostBody
	{
		
		/// <summary>
		/// The unique identifier of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachment_id")]
		public System.Nullable<System.Int32> Attachment_id { get; set; }
	}
	
	public class Users_idPutPutBody
	{
		
		/// <summary>
		/// Whether the user wishes to have all monetary values converted to their base currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="always_show_base_currency")]
		public System.Nullable<System.Boolean> Always_show_base_currency { get; set; }
		
		/// <summary>
		/// A new base currency code for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base_currency_code")]
		public string Base_currency_code { get; set; }
		
		/// <summary>
		/// Whether the user is a beta user, and wishes to try out new features.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="beta_user")]
		public System.Nullable<System.Boolean> Beta_user { get; set; }
		
		/// <summary>
		/// A new email address for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// A new name for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A new time zone for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time_zone")]
		public string Time_zone { get; set; }
		
		/// <summary>
		/// The day of the week the user wishes their calendars to start on. A number between 0 and 6, where 0 is Sunday and 6 is Saturday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="week_start_day")]
		public System.Nullable<System.Int32> Week_start_day { get; set; }
	}
	
	public class Users_idAccountsPostPostBody
	{
		
		/// <summary>
		/// A currency code for the account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// The ID of the institution to create this account in.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="institution_id")]
		public int Institution_id { get; set; }
		
		/// <summary>
		/// A title for the account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of the account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Accounts_idPutPutBodyType Type { get; set; }
	}
	
	public class Users_idAccountsPutPutBody
	{
		
		/// <summary>
		/// List the account objects in their new display order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accounts")]
		public Account[] Accounts { get; set; }
	}
	
	public class Users_idAttachmentsPostPostBody
	{
		
		/// <summary>
		/// The base64-encoded contents of the source file. The supported file types are png, jpg, pdf, xls, xlsx, doc, docx.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_data")]
		public string File_data { get; set; }
		
		/// <summary>
		/// The file name of the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_name")]
		public string File_name { get; set; }
		
		/// <summary>
		/// The title of the attachment. If the title is blank or not provided, the title will derived from the file name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public enum Users_idBudget_summaryGetByPeriodAndIntervalAndStart_dateAndEnd_datePeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="weeks")]
		weeks = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="months")]
		months = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="years")]
		years = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event")]
		_event = 3,
	}
	
	public class Users_idCategoriesPostPostBody
	{
		
		/// <summary>
		/// A CSS-style hex colour for the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colour")]
		public string Colour { get; set; }
		
		/// <summary>
		/// Set the category as a bill category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_bill")]
		public System.Nullable<System.Boolean> Is_bill { get; set; }
		
		/// <summary>
		/// Set the category as a transfer category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_transfer")]
		public System.Nullable<System.Boolean> Is_transfer { get; set; }
		
		/// <summary>
		/// The unique identifier of a category to be the parent of this category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent_id")]
		public System.Nullable<System.Int32> Parent_id { get; set; }
		
		/// <summary>
		/// Set the refund behaviour of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refund_behaviour")]
		public System.Nullable<Users_idCategoriesPostPostBodyRefund_behaviour> Refund_behaviour { get; set; }
		
		/// <summary>
		/// Set the category to be rolled up into its parent category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roll_up")]
		public System.Nullable<System.Boolean> Roll_up { get; set; }
		
		/// <summary>
		/// A title for the category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Users_idCategoriesPostPostBodyRefund_behaviour
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="debits_are_deductions")]
		debits_are_deductions = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="credits_are_refunds")]
		credits_are_refunds = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_null = 2,
	}
	
	public class Users_idInstitutionsPostPostBody
	{
		
		/// <summary>
		/// A currency code for the institution.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		/// <summary>
		/// A title for the institution.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public enum Users_idTrend_analysisGetByPeriodAndIntervalAndStart_dateAndEnd_dateAndCategoriesAndScenariosPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="weeks")]
		weeks = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="months")]
		months = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="years")]
		years = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="event")]
		_event = 3,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
