//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// gdata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GdataBlobstore2Info
	{
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobGeneration")]
		public string BlobGeneration { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobId")]
		public string BlobId { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadReadHandle")]
		public string DownloadReadHandle { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readToken")]
		public string ReadToken { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uploadMetadataContainer")]
		public string UploadMetadataContainer { get; set; }
	}
	
	/// <summary>
	/// gdata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GdataCompositeMedia
	{
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobRef")]
		public string BlobRef { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobstore2Info")]
		public GdataBlobstore2Info Blobstore2Info { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cosmoBinaryReference")]
		public string CosmoBinaryReference { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crc32cHash")]
		public System.Nullable<System.UInt32> Crc32cHash { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inline")]
		public string Inline { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public string Length { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5Hash")]
		public string Md5Hash { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public GdataObjectId ObjectId { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceType")]
		public System.Nullable<GdataCompositeMediaReferenceType> ReferenceType { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1Hash")]
		public string Sha1Hash { get; set; }
	}
	
	/// <summary>
	/// gdata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GdataObjectId
	{
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public string Generation { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectName")]
		public string ObjectName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GdataCompositeMediaReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOB_REF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INLINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIGSTORE_REF = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COSMO_BINARY_REFERENCE = 4,
	}
	
	/// <summary>
	/// gdata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GdataContentTypeInfo
	{
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bestGuess")]
		public string BestGuess { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromBytes")]
		public string FromBytes { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromFileName")]
		public string FromFileName { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromHeader")]
		public string FromHeader { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromUrlPath")]
		public string FromUrlPath { get; set; }
	}
	
	/// <summary>
	/// gdata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GdataDiffChecksumsResponse
	{
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksumsLocation")]
		public GdataCompositeMedia ChecksumsLocation { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chunkSizeBytes")]
		public string ChunkSizeBytes { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectLocation")]
		public GdataCompositeMedia ObjectLocation { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectSizeBytes")]
		public string ObjectSizeBytes { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectVersion")]
		public string ObjectVersion { get; set; }
	}
	
	/// <summary>
	/// gdata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GdataDiffDownloadResponse
	{
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectLocation")]
		public GdataCompositeMedia ObjectLocation { get; set; }
	}
	
	/// <summary>
	/// gdata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GdataDiffUploadRequest
	{
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksumsInfo")]
		public GdataCompositeMedia ChecksumsInfo { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectInfo")]
		public GdataCompositeMedia ObjectInfo { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectVersion")]
		public string ObjectVersion { get; set; }
	}
	
	/// <summary>
	/// gdata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GdataDiffUploadResponse
	{
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectVersion")]
		public string ObjectVersion { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalObject")]
		public GdataCompositeMedia OriginalObject { get; set; }
	}
	
	/// <summary>
	/// gdata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GdataDiffVersionResponse
	{
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectSizeBytes")]
		public string ObjectSizeBytes { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectVersion")]
		public string ObjectVersion { get; set; }
	}
	
	/// <summary>
	/// gdata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GdataDownloadParameters
	{
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowGzipCompression")]
		public System.Nullable<System.Boolean> AllowGzipCompression { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreRange")]
		public System.Nullable<System.Boolean> IgnoreRange { get; set; }
	}
	
	/// <summary>
	/// gdata
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GdataMedia
	{
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public string Algorithm { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigstoreObjectRef")]
		public string BigstoreObjectRef { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobRef")]
		public string BlobRef { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blobstore2Info")]
		public GdataBlobstore2Info Blobstore2Info { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compositeMedia")]
		public GdataCompositeMedia[] CompositeMedia { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentTypeInfo")]
		public GdataContentTypeInfo ContentTypeInfo { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cosmoBinaryReference")]
		public string CosmoBinaryReference { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="crc32cHash")]
		public System.Nullable<System.UInt32> Crc32cHash { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffChecksumsResponse")]
		public GdataDiffChecksumsResponse DiffChecksumsResponse { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffDownloadResponse")]
		public GdataDiffDownloadResponse DiffDownloadResponse { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffUploadRequest")]
		public GdataDiffUploadRequest DiffUploadRequest { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffUploadResponse")]
		public GdataDiffUploadResponse DiffUploadResponse { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diffVersionResponse")]
		public GdataDiffVersionResponse DiffVersionResponse { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadParameters")]
		public GdataDownloadParameters DownloadParameters { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hash")]
		public string Hash { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashVerified")]
		public System.Nullable<System.Boolean> HashVerified { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inline")]
		public string Inline { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPotentialRetry")]
		public System.Nullable<System.Boolean> IsPotentialRetry { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public string Length { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="md5Hash")]
		public string Md5Hash { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaId")]
		public string MediaId { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public GdataObjectId ObjectId { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenceType")]
		public System.Nullable<GdataMediaReferenceType> ReferenceType { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1Hash")]
		public string Sha1Hash { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256Hash")]
		public string Sha256Hash { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// gdata
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GdataMediaReferenceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOB_REF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INLINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET_MEDIA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPOSITE_MEDIA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIGSTORE_REF = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_VERSION_RESPONSE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_CHECKSUMS_RESPONSE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_DOWNLOAD_RESPONSE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_UPLOAD_REQUEST = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIFF_UPLOAD_RESPONSE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COSMO_BINARY_REFERENCE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARBITRARY_BYTES = 12,
	}
	
	/// <summary>
	/// A job creating reports of a specific type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Job
	{
		
		/// <summary>
		/// The creation date/time of the job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The date/time when this job will expire/expired. After a job expired, no new reports are generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// The server-generated ID of the job (max. 40 characters).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the job (max. 100 characters).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of reports this job creates. Corresponds to the ID of a ReportType.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTypeId")]
		public string ReportTypeId { get; set; }
		
		/// <summary>
		/// True if this a system-managed job that cannot be modified by the user; otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemManaged")]
		public System.Nullable<System.Boolean> SystemManaged { get; set; }
	}
	
	/// <summary>
	/// Response message for ReportingService.ListJobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobsResponse
	{
		
		/// <summary>
		/// The list of jobs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public Job[] Jobs { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in the ListJobsRequest.page_token field in the subsequent call to `ListJobs` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ReportingService.ListReportTypes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReportTypesResponse
	{
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in the ListReportTypesRequest.page_token field in the subsequent call to `ListReportTypes` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of report types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportTypes")]
		public ReportType[] ReportTypes { get; set; }
	}
	
	/// <summary>
	/// A report type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportType
	{
		
		/// <summary>
		/// The date/time when this report type was/will be deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deprecateTime")]
		public string DeprecateTime { get; set; }
		
		/// <summary>
		/// The ID of the report type (max. 100 characters).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the report type (max. 100 characters).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// True if this a system-managed report type; otherwise false. Reporting jobs for system-managed report types are created automatically and can thus not be used in the `CreateJob` method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="systemManaged")]
		public System.Nullable<System.Boolean> SystemManaged { get; set; }
	}
	
	/// <summary>
	/// Response message for ReportingService.ListReports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListReportsResponse
	{
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this value in the ListReportsRequest.page_token field in the subsequent call to `ListReports` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of report types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reports")]
		public Report[] Reports { get; set; }
	}
	
	/// <summary>
	/// A report's metadata including the URL from which the report itself can be downloaded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Report
	{
		
		/// <summary>
		/// The date/time when this report was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The URL from which the report can be downloaded (max. 1000 characters).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="downloadUrl")]
		public string DownloadUrl { get; set; }
		
		/// <summary>
		/// The end of the time period that the report instance covers. The value is exclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The server-generated ID of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The date/time when the job this report belongs to will expire/expired.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobExpireTime")]
		public string JobExpireTime { get; set; }
		
		/// <summary>
		/// The ID of the job that created this report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// The start of the time period that the report instance covers. The value is inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists jobs.
		/// Youtubereporting_jobs_list v1/jobs
		/// </summary>
		/// <param name="includeSystemManaged">If set to true, also system-managed jobs will be returned; otherwise only user-created jobs will be returned. System-managed jobs can neither be modified nor deleted.</param>
		/// <param name="onBehalfOfContentOwner">The content owner's external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).</param>
		/// <param name="pageSize">Requested page size. Server may return fewer jobs than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListReportTypesResponse.next_page_token returned in response to the previous call to the `ListJobs` method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListJobsResponse> Youtubereporting_jobs_listAsync(bool includeSystemManaged, string onBehalfOfContentOwner, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/jobs?includeSystemManaged="+includeSystemManaged+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a job and returns it.
		/// Youtubereporting_jobs_create v1/jobs
		/// </summary>
		/// <param name="onBehalfOfContentOwner">The content owner's external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Youtubereporting_jobs_createAsync(string onBehalfOfContentOwner, Job requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/jobs?onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a job.
		/// Youtubereporting_jobs_delete v1/jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The ID of the job to delete.</param>
		/// <param name="onBehalfOfContentOwner">The content owner's external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Youtubereporting_jobs_deleteAsync(string jobId, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a job.
		/// Youtubereporting_jobs_get v1/jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The ID of the job to retrieve.</param>
		/// <param name="onBehalfOfContentOwner">The content owner's external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).</param>
		/// <returns>Successful response</returns>
		public async Task<Job> Youtubereporting_jobs_getAsync(string jobId, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Job>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists reports created by a specific job. Returns NOT_FOUND if the job does not exist.
		/// Youtubereporting_jobs_reports_list v1/jobs/{jobId}/reports
		/// </summary>
		/// <param name="jobId">The ID of the job.</param>
		/// <param name="createdAfter">If set, only reports created after the specified date/time are returned.</param>
		/// <param name="onBehalfOfContentOwner">The content owner's external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).</param>
		/// <param name="pageSize">Requested page size. Server may return fewer report types than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListReportsResponse.next_page_token returned in response to the previous call to the `ListReports` method.</param>
		/// <param name="startTimeAtOrAfter">If set, only reports whose start time is greater than or equal the specified date/time are returned.</param>
		/// <param name="startTimeBefore">If set, only reports whose start time is smaller than the specified date/time are returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListReportsResponse> Youtubereporting_jobs_reports_listAsync(string jobId, string createdAfter, string onBehalfOfContentOwner, int pageSize, string pageToken, string startTimeAtOrAfter, string startTimeBefore, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/reports&createdAfter=" + (createdAfter==null? "" : System.Uri.EscapeDataString(createdAfter))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&startTimeAtOrAfter=" + (startTimeAtOrAfter==null? "" : System.Uri.EscapeDataString(startTimeAtOrAfter))+"&startTimeBefore=" + (startTimeBefore==null? "" : System.Uri.EscapeDataString(startTimeBefore));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListReportsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the metadata of a specific report.
		/// Youtubereporting_jobs_reports_get v1/jobs/{jobId}/reports/{reportId}
		/// </summary>
		/// <param name="jobId">The ID of the job.</param>
		/// <param name="reportId">The ID of the report to retrieve.</param>
		/// <param name="onBehalfOfContentOwner">The content owner's external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).</param>
		/// <returns>Successful response</returns>
		public async Task<Report> Youtubereporting_jobs_reports_getAsync(string jobId, string reportId, string onBehalfOfContentOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/reports/"+ (reportId==null? "" : System.Uri.EscapeDataString(reportId))+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Report>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Method for media download. Download is supported on the URI `/v1/media/{+name}?alt=media`.
		/// Youtubereporting_media_download v1/media/{resourceName}
		/// </summary>
		/// <param name="resourceName">Name of the media that is being downloaded.</param>
		/// <returns>Successful response</returns>
		public async Task<GdataMedia> Youtubereporting_media_downloadAsync(string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/media/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GdataMedia>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists report types.
		/// Youtubereporting_reportTypes_list v1/reportTypes
		/// </summary>
		/// <param name="includeSystemManaged">If set to true, also system-managed report types will be returned; otherwise only the report types that can be used to create new reporting jobs will be returned.</param>
		/// <param name="onBehalfOfContentOwner">The content owner's external ID on which behalf the user is acting on. If not set, the user is acting for himself (his own channel).</param>
		/// <param name="pageSize">Requested page size. Server may return fewer report types than requested. If unspecified, server will pick an appropriate default.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListReportTypesResponse.next_page_token returned in response to the previous call to the `ListReportTypes` method.</param>
		/// <returns>Successful response</returns>
		public async Task<ListReportTypesResponse> Youtubereporting_reportTypes_listAsync(bool includeSystemManaged, string onBehalfOfContentOwner, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/reportTypes?includeSystemManaged="+includeSystemManaged+"&onBehalfOfContentOwner=" + (onBehalfOfContentOwner==null? "" : System.Uri.EscapeDataString(onBehalfOfContentOwner))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListReportTypesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
