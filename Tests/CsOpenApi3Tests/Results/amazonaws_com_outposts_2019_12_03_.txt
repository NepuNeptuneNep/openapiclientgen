//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelOrderOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOrderOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Order Order { get; set; }
	}
	
	/// <summary>
	/// Information about an order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Order
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OrderId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineItem[] LineItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PaymentOption PaymentOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OrderSubmissionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OrderFulfilledDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PaymentTerm PaymentTerm { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderType OrderType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RECEIVED")]
		RECEIVED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROCESSING")]
		PROCESSING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLING")]
		INSTALLING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FULFILLED")]
		FULFILLED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED")]
		CANCELLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREPARING")]
		PREPARING = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 9,
	}
	
	/// <summary>
	/// Information about a line item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LineItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CatalogItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LineItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineItemStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShipmentInformation ShipmentInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineItemAssetInformation[] AssetInformationList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreviousLineItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreviousOrderId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LineItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREPARING")]
		PREPARING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUILDING")]
		BUILDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHIPPED")]
		SHIPPED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELIVERED")]
		DELIVERED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLING")]
		INSTALLING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLED")]
		INSTALLED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED")]
		CANCELLED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REPLACED")]
		REPLACED = 8,
	}
	
	/// <summary>
	///  Information about a line item shipment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShipmentInformation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ShipmentTrackingNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShipmentCarrier ShipmentCarrier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShipmentCarrier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DHL")]
		DHL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DBS")]
		DBS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FEDEX")]
		FEDEX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPS")]
		UPS = 3,
	}
	
	/// <summary>
	///  Information about a line item asset. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LineItemAssetInformation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MacAddressList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PaymentOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL_UPFRONT")]
		ALL_UPFRONT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_UPFRONT")]
		NO_UPFRONT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PARTIAL_UPFRONT")]
		PARTIAL_UPFRONT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PaymentTerm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THREE_YEARS")]
		THREE_YEARS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONE_YEAR")]
		ONE_YEAR = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUTPOST")]
		OUTPOST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REPLACEMENT")]
		REPLACEMENT = 1,
	}
	
	/// <summary>
	/// Information about a line item request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LineItemRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CatalogItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOutpostOutput
	{
		
		/// <summary>
		/// Information about an Outpost.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Outpost Outpost { get; set; }
	}
	
	/// <summary>
	/// Information about an Outpost.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Outpost
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostId { get; set; }
		
		/// <summary>
		/// The Amazon Web Services account ID of the Outpost owner.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\d{12}")]
		public string OwnerId { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the Outpost.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/op-[a-f0-9]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/op-[a-f0-9]{17}$")]
		public string OutpostArn { get; set; }
		
		/// <summary>
		/// The ID of the site.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/)?(os-[a-f0-9]{17})$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/)?(os-[a-f0-9]{17})$")]
		public string SiteId { get; set; }
		
		/// <summary>
		/// The name of the Outpost.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the Outpost.
		/// Max length: 1000
		/// Min length: 0
		/// Pattern: ^[\S ]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]*$")]
		public string Description { get; set; }
		
		/// <summary>
		/// The life cycle status.
		/// Max length: 20
		/// Min length: 1
		/// Pattern: ^[ A-Za-z]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[ A-Za-z]+$")]
		public string LifeCycleStatus { get; set; }
		
		/// <summary>
		/// The Availability Zone.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^([a-zA-Z]+-){1,3}([a-zA-Z]+)?(\d+[a-zA-Z]?)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([a-zA-Z]+-){1,3}([a-zA-Z]+)?(\d+[a-zA-Z]?)?$")]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// The ID of the Availability Zone.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[a-zA-Z]+\d-[a-zA-Z]+\d$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z]+\d-[a-zA-Z]+\d$")]
		public string AvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the site.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/(os-[a-f0-9]{17})$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/(os-[a-f0-9]{17})$")]
		public string SiteArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupportedHardwareType SupportedHardwareType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SupportedHardwareType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RACK")]
		RACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVER")]
		SERVER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSiteOutput
	{
		
		/// <summary>
		/// Information about a site.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Site Site { get; set; }
	}
	
	/// <summary>
	/// Information about a site.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Site
	{
		
		/// <summary>
		/// The ID of the site.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/)?(os-[a-f0-9]{17})$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/)?(os-[a-f0-9]{17})$")]
		public string SiteId { get; set; }
		
		/// <summary>
		/// The ID of the Amazon Web Services account.
		/// Max length: 12
		/// Min length: 12
		/// Pattern: \d{12}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\d{12}")]
		public string AccountId { get; set; }
		
		/// <summary>
		/// The name of the site.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the site.
		/// Max length: 1001
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1001)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the site.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/(os-[a-f0-9]{17})$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/(os-[a-f0-9]{17})$")]
		public string SiteArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatingAddressCountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatingAddressStateOrRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OperatingAddressCity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RackPhysicalProperties RackPhysicalProperties { get; set; }
	}
	
	/// <summary>
	///  Information about the physical and logistical details for racks at sites. For more information about hardware requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist">Network readiness checklist</a> in the Amazon Web Services Outposts User Guide. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RackPhysicalProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PowerDrawKva PowerDrawKva { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PowerPhase PowerPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PowerConnector PowerConnector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PowerFeedDrop PowerFeedDrop { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UplinkGbps UplinkGbps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UplinkCount UplinkCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FiberOpticCableType FiberOpticCableType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpticalStandard OpticalStandard { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaximumSupportedWeightLbs MaximumSupportedWeightLbs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PowerDrawKva
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POWER_5_KVA")]
		POWER_5_KVA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POWER_10_KVA")]
		POWER_10_KVA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POWER_15_KVA")]
		POWER_15_KVA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POWER_30_KVA")]
		POWER_30_KVA = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PowerPhase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SINGLE_PHASE")]
		SINGLE_PHASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THREE_PHASE")]
		THREE_PHASE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PowerConnector
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="L6_30P")]
		L6_30P = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IEC309")]
		IEC309 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AH530P7W")]
		AH530P7W = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AH532P6W")]
		AH532P6W = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PowerFeedDrop
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ABOVE_RACK")]
		ABOVE_RACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BELOW_RACK")]
		BELOW_RACK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UplinkGbps
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_1G")]
		UPLINK_1G = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_10G")]
		UPLINK_10G = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_40G")]
		UPLINK_40G = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_100G")]
		UPLINK_100G = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UplinkCount
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_COUNT_1")]
		UPLINK_COUNT_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_COUNT_2")]
		UPLINK_COUNT_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_COUNT_3")]
		UPLINK_COUNT_3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_COUNT_4")]
		UPLINK_COUNT_4 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_COUNT_5")]
		UPLINK_COUNT_5 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_COUNT_6")]
		UPLINK_COUNT_6 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_COUNT_7")]
		UPLINK_COUNT_7 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_COUNT_8")]
		UPLINK_COUNT_8 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_COUNT_12")]
		UPLINK_COUNT_12 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPLINK_COUNT_16")]
		UPLINK_COUNT_16 = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FiberOpticCableType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SINGLE_MODE")]
		SINGLE_MODE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MULTI_MODE")]
		MULTI_MODE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OpticalStandard
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIC_10GBASE_SR")]
		OPTIC_10GBASE_SR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIC_10GBASE_IR")]
		OPTIC_10GBASE_IR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIC_10GBASE_LR")]
		OPTIC_10GBASE_LR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIC_40GBASE_SR")]
		OPTIC_40GBASE_SR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIC_40GBASE_ESR")]
		OPTIC_40GBASE_ESR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIC_40GBASE_IR4_LR4L")]
		OPTIC_40GBASE_IR4_LR4L = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIC_40GBASE_LR4")]
		OPTIC_40GBASE_LR4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIC_100GBASE_SR4")]
		OPTIC_100GBASE_SR4 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIC_100GBASE_CWDM4")]
		OPTIC_100GBASE_CWDM4 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIC_100GBASE_LR4")]
		OPTIC_100GBASE_LR4 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIC_100G_PSM4_MSA")]
		OPTIC_100G_PSM4_MSA = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIC_1000BASE_LX")]
		OPTIC_1000BASE_LX = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPTIC_1000BASE_SX")]
		OPTIC_1000BASE_SX = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MaximumSupportedWeightLbs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_LIMIT")]
		NO_LIMIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_1400_LBS")]
		MAX_1400_LBS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_1600_LBS")]
		MAX_1600_LBS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_1800_LBS")]
		MAX_1800_LBS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_2000_LBS")]
		MAX_2000_LBS = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOutpostOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSiteOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCatalogItemOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CatalogItem CatalogItem { get; set; }
	}
	
	/// <summary>
	///  Information about a catalog item. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CatalogItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CatalogItemId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CatalogItemStatus ItemStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EC2Capacity[] EC2Capacities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float PowerKva { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> WeightLbs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> SupportedUplinkGbps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupportedStorageEnum[] SupportedStorage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogItemStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISCONTINUED")]
		DISCONTINUED = 1,
	}
	
	/// <summary>
	///  Information about EC2 capacity. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EC2Capacity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Family { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SupportedStorageEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EBS")]
		EBS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="S3")]
		S3 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionDetails ConnectionDetails { get; set; }
	}
	
	/// <summary>
	///  Information about a connection. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectionDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientPublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerPublicKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerEndpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientTunnelAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServerTunnelAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowedIps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrderOutput
	{
		
		/// <summary>
		/// Information about an order.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Order Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOutpostOutput
	{
		
		/// <summary>
		/// Information about an Outpost.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Outpost Outpost { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOutpostInstanceTypesOutput
	{
		
		/// <summary>
		/// Information about the instance types.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InstanceTypeItem[] InstanceTypes { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^(\d+)##(\S+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d+)##(\S+)$")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostId { get; set; }
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the Outpost.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/op-[a-f0-9]{17}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/op-[a-f0-9]{17}$")]
		public string OutpostArn { get; set; }
	}
	
	/// <summary>
	/// Information about an instance type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceTypeItem
	{
		
		/// <summary>
		/// The instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InstanceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSiteOutput
	{
		
		/// <summary>
		/// Information about a site.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Site Site { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSiteAddressOutput
	{
		
		/// <summary>
		/// The ID of the site.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/)?(os-[a-f0-9]{17})$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/)?(os-[a-f0-9]{17})$")]
		public string SiteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AddressType AddressType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHIPPING_ADDRESS")]
		SHIPPING_ADDRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPERATING_ADDRESS")]
		OPERATING_ADDRESS = 1,
	}
	
	/// <summary>
	///  Information about an address. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Address
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactPhoneNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine3 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string StateOrRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DistrictOrCounty { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Municipality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssetsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AssetInfo[] Assets { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^(\d+)##(\S+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d+)##(\S+)$")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Information about hardware assets. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AssetId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RackId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssetType AssetType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComputeAttributes ComputeAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AssetLocation AssetLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AssetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPUTE")]
		COMPUTE = 0,
	}
	
	/// <summary>
	///  Information about compute hardware assets. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComputeAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string HostId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ComputeAssetState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ComputeAssetState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ISOLATED")]
		ISOLATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RETIRING")]
		RETIRING = 2,
	}
	
	/// <summary>
	///  Information about the position of the asset in a rack. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssetLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float RackElevation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AssetState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RETIRING")]
		RETIRING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ISOLATED")]
		ISOLATED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCatalogItemsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CatalogItem[] CatalogItems { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^(\d+)##(\S+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d+)##(\S+)$")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CatalogItemClass
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RACK")]
		RACK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVER")]
		SERVER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOrdersOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrderSummary[] Orders { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^(\d+)##(\S+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d+)##(\S+)$")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  A summary of line items in your order. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrderSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OutpostId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OrderId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderType OrderType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrderStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LineItemStatusCounts LineItemCountsByStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OrderSubmissionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset OrderFulfilledDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LineItemStatusCounts
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOutpostsOutput
	{
		
		/// <summary>
		/// Information about the Outposts.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Outpost[] Outposts { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^(\d+)##(\S+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d+)##(\S+)$")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSitesOutput
	{
		
		/// <summary>
		/// Information about the sites.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Site[] Sites { get; set; }
		
		/// <summary>
		/// The pagination token.
		/// Max length: 2048
		/// Min length: 1
		/// Pattern: ^(\d+)##(\S+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\d+)##(\S+)$")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartConnectionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UnderlayIpAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateOutpostOutput
	{
		
		/// <summary>
		/// Information about an Outpost.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Outpost Outpost { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSiteOutput
	{
		
		/// <summary>
		/// Information about a site.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Site Site { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSiteAddressOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AddressType AddressType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSiteRackPhysicalPropertiesOutput
	{
		
		/// <summary>
		/// Information about a site.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Site Site { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CancelOrderInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOrderInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OutpostIdentifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LineItemRequest[] LineItems { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PaymentOption PaymentOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PaymentTerm PaymentTerm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOutpostInput
	{
		
		/// <summary>
		/// The name of the Outpost.
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the Outpost.
		/// Max length: 1000
		/// Min length: 0
		/// Pattern: ^[\S ]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]*$")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
		
		/// <summary>
		/// The Availability Zone.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^([a-zA-Z]+-){1,3}([a-zA-Z]+)?(\d+[a-zA-Z]?)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([a-zA-Z]+-){1,3}([a-zA-Z]+)?(\d+[a-zA-Z]?)?$")]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// The ID of the Availability Zone.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[a-zA-Z]+\d-[a-zA-Z]+\d$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z]+\d-[a-zA-Z]+\d$")]
		public string AvailabilityZoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupportedHardwareType SupportedHardwareType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSiteInput
	{
		
		/// <summary>
		/// The name of the site.
		/// Required
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the site.
		/// Max length: 1001
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1001)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address OperatingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Address ShippingAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RackPhysicalProperties RackPhysicalProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOutpostInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSiteInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCatalogItemInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrderInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOutpostInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOutpostInstanceTypesInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSiteAddressInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSiteInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAssetsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCatalogItemsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOrdersInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOutpostsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSitesInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartConnectionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceSerialNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssetId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientPublicKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int NetworkInterfaceDeviceIndex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateOutpostInput
	{
		
		/// <summary>
		/// The name of the Outpost.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the Outpost.
		/// Max length: 1000
		/// Min length: 0
		/// Pattern: ^[\S ]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]*$")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SupportedHardwareType SupportedHardwareType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSiteAddressInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AddressType AddressType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Address Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSiteInput
	{
		
		/// <summary>
		/// The name of the site.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the site.
		/// Max length: 1001
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1001)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSiteRackPhysicalPropertiesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PowerDrawKva PowerDrawKva { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PowerPhase PowerPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PowerConnector PowerConnector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PowerFeedDrop PowerFeedDrop { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UplinkGbps UplinkGbps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UplinkCount UplinkCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FiberOpticCableType FiberOpticCableType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpticalStandard OpticalStandard { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaximumSupportedWeightLbs MaximumSupportedWeightLbs { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Cancels the specified order for an Outpost.
		/// CancelOrder orders/{OrderId}/cancel
		/// </summary>
		/// <param name="OrderId"> The ID of the order. 
		/// Max length: 20
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<CancelOrderOutput> CancelOrderAsync(string OrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/"+ (OrderId==null? "" : System.Uri.EscapeDataString(OrderId))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CancelOrderOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an order for an Outpost.
		/// CreateOrder orders
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateOrderOutput> CreateOrderAsync(CreateOrderPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateOrderOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an Outpost.</p> <p>You can specify either an Availability one or an AZ ID.</p>
		/// CreateOutpost outposts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateOutpostOutput> CreateOutpostAsync(CreateOutpostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "outposts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateOutpostOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the Outposts for your Amazon Web Services account.</p> <p>Use filters to return specific results. If you specify multiple filters, the results include only the resources that match all of the specified filters. For a filter where you can specify multiple values, the results include items that match any of the values that you specify for the filter.</p>
		/// ListOutposts outposts
		/// </summary>
		/// <param name="NextToken">Max length: 2048
		/// Min length: 1
		// </param>
		/// <param name="MaxResults">Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="LifeCycleStatusFilter">Filters the results by the lifecycle status.
		/// Minimum items: 1
		/// Maximum items: 5
		// </param>
		/// <param name="AvailabilityZoneFilter">Filters the results by Availability Zone (for example, <code>us-east-1a</code>).
		/// Minimum items: 1
		/// Maximum items: 5
		// </param>
		/// <param name="AvailabilityZoneIdFilter">Filters the results by AZ ID (for example, <code>use1-az1</code>).
		/// Minimum items: 1
		/// Maximum items: 5
		// </param>
		/// <returns>Success</returns>
		public async Task<ListOutpostsOutput> ListOutpostsAsync(string NextToken, int MaxResults, string[] LifeCycleStatusFilter, string[] AvailabilityZoneFilter, string[] AvailabilityZoneIdFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "outposts?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&"+string.Join("&", LifeCycleStatusFilter.Select(z => $"LifeCycleStatusFilter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", AvailabilityZoneFilter.Select(z => $"AvailabilityZoneFilter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", AvailabilityZoneIdFilter.Select(z => $"AvailabilityZoneIdFilter={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOutpostsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a site for an Outpost.
		/// CreateSite sites
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSiteOutput> CreateSiteAsync(CreateSitePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSiteOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the Outpost sites for your Amazon Web Services account. Use filters to return specific results.</p> <p>Use filters to return specific results. If you specify multiple filters, the results include only the resources that match all of the specified filters. For a filter where you can specify multiple values, the results include items that match any of the values that you specify for the filter.</p>
		/// ListSites sites
		/// </summary>
		/// <param name="NextToken">Max length: 2048
		/// Min length: 1
		// </param>
		/// <param name="MaxResults">Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="OperatingAddressCountryCodeFilter">Filters the results by country code.</param>
		/// <param name="OperatingAddressStateOrRegionFilter">Filters the results by state or region.</param>
		/// <param name="OperatingAddressCityFilter">Filters the results by city.</param>
		/// <returns>Success</returns>
		public async Task<ListSitesOutput> ListSitesAsync(string NextToken, int MaxResults, string[] OperatingAddressCountryCodeFilter, string[] OperatingAddressStateOrRegionFilter, string[] OperatingAddressCityFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&"+string.Join("&", OperatingAddressCountryCodeFilter.Select(z => $"OperatingAddressCountryCodeFilter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", OperatingAddressStateOrRegionFilter.Select(z => $"OperatingAddressStateOrRegionFilter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", OperatingAddressCityFilter.Select(z => $"OperatingAddressCityFilter={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSitesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Outpost.
		/// DeleteOutpost outposts/{OutpostId}
		/// </summary>
		/// <param name="OutpostId"> The ID or the Amazon Resource Name (ARN) of the Outpost. 
		/// Max length: 180
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteOutpostOutput> DeleteOutpostAsync(string OutpostId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "outposts/"+ (OutpostId==null? "" : System.Uri.EscapeDataString(OutpostId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteOutpostOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified Outpost.
		/// GetOutpost outposts/{OutpostId}
		/// </summary>
		/// <param name="OutpostId"> The ID or the Amazon Resource Name (ARN) of the Outpost. 
		/// Max length: 180
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetOutpostOutput> GetOutpostAsync(string OutpostId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "outposts/"+ (OutpostId==null? "" : System.Uri.EscapeDataString(OutpostId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOutpostOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an Outpost.
		/// UpdateOutpost outposts/{OutpostId}
		/// </summary>
		/// <param name="OutpostId"> The ID or the Amazon Resource Name (ARN) of the Outpost. 
		/// Max length: 180
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateOutpostOutput> UpdateOutpostAsync(string OutpostId, UpdateOutpostPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "outposts/"+ (OutpostId==null? "" : System.Uri.EscapeDataString(OutpostId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateOutpostOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified site.
		/// DeleteSite sites/{SiteId}
		/// </summary>
		/// <param name="SiteId"> The ID or the Amazon Resource Name (ARN) of the site. 
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteSiteOutput> DeleteSiteAsync(string SiteId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (SiteId==null? "" : System.Uri.EscapeDataString(SiteId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSiteOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified Outpost site.
		/// GetSite sites/{SiteId}
		/// </summary>
		/// <param name="SiteId"> The ID or the Amazon Resource Name (ARN) of the site. 
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSiteOutput> GetSiteAsync(string SiteId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (SiteId==null? "" : System.Uri.EscapeDataString(SiteId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSiteOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified site.
		/// UpdateSite sites/{SiteId}
		/// </summary>
		/// <param name="SiteId"> The ID or the Amazon Resource Name (ARN) of the site. 
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateSiteOutput> UpdateSiteAsync(string SiteId, UpdateSitePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (SiteId==null? "" : System.Uri.EscapeDataString(SiteId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSiteOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified catalog item.
		/// GetCatalogItem catalog/item/{CatalogItemId}
		/// </summary>
		/// <param name="CatalogItemId">The ID of the catalog item.
		/// Max length: 10
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetCatalogItemOutput> GetCatalogItemAsync(string CatalogItemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "catalog/item/"+ (CatalogItemId==null? "" : System.Uri.EscapeDataString(CatalogItemId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCatalogItemOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <note> <p> Amazon Web Services uses this action to install Outpost servers.</p> </note> <p> Gets information about the specified connection. </p> <p> Use CloudTrail to monitor this action or Amazon Web Services managed policy for Amazon Web Services Outposts to secure it. For more information, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/security-iam-awsmanpol.html"> Amazon Web Services managed policies for Amazon Web Services Outposts</a> and <a href="https://docs.aws.amazon.com/outposts/latest/userguide/logging-using-cloudtrail.html"> Logging Amazon Web Services Outposts API calls with Amazon Web Services CloudTrail</a> in the <i>Amazon Web Services Outposts User Guide</i>. </p>
		/// GetConnection connections/{ConnectionId}
		/// </summary>
		/// <param name="ConnectionId"> The ID of the connection. 
		/// Max length: 1024
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetConnectionResponse> GetConnectionAsync(string ConnectionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "connections/"+ (ConnectionId==null? "" : System.Uri.EscapeDataString(ConnectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConnectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified order.
		/// GetOrder orders/{OrderId}
		/// </summary>
		/// <param name="OrderId">The ID of the order.
		/// Max length: 20
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<GetOrderOutput> GetOrderAsync(string OrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orders/"+ (OrderId==null? "" : System.Uri.EscapeDataString(OrderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOrderOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the instance types for the specified Outpost.
		/// GetOutpostInstanceTypes outposts/{OutpostId}/instanceTypes
		/// </summary>
		/// <param name="OutpostId"> The ID or the Amazon Resource Name (ARN) of the Outpost. 
		/// Max length: 180
		/// Min length: 1
		// </param>
		/// <param name="NextToken">Max length: 2048
		/// Min length: 1
		// </param>
		/// <param name="MaxResults">Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<GetOutpostInstanceTypesOutput> GetOutpostInstanceTypesAsync(string OutpostId, string NextToken, int MaxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "outposts/"+ (OutpostId==null? "" : System.Uri.EscapeDataString(OutpostId))+"/instanceTypes&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetOutpostInstanceTypesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the site address of the specified site.
		/// GetSiteAddress sites/{SiteId}/address#AddressType
		/// </summary>
		/// <param name="SiteId"> The ID or the Amazon Resource Name (ARN) of the site. 
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <param name="AddressType">The type of the address you request. </param>
		/// <returns>Success</returns>
		public async Task<GetSiteAddressOutput> GetSiteAddressAsync(string SiteId, AddressType AddressType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (SiteId==null? "" : System.Uri.EscapeDataString(SiteId))+"/address#AddressType&AddressType=" + AddressType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSiteAddressOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the hardware assets for the specified Outpost.</p> <p>Use filters to return specific results. If you specify multiple filters, the results include only the resources that match all of the specified filters. For a filter where you can specify multiple values, the results include items that match any of the values that you specify for the filter.</p>
		/// ListAssets outposts/{OutpostId}/assets
		/// </summary>
		/// <param name="OutpostId"> The ID or the Amazon Resource Name (ARN) of the Outpost. 
		/// Max length: 180
		/// Min length: 1
		// </param>
		/// <param name="HostIdFilter">Filters the results by the host ID of a Dedicated Host.</param>
		/// <param name="MaxResults">Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="NextToken">Max length: 2048
		/// Min length: 1
		// </param>
		/// <param name="StatusFilter">Filters the results by state.
		/// Minimum items: 1
		/// Maximum items: 3
		// </param>
		/// <returns>Success</returns>
		public async Task<ListAssetsOutput> ListAssetsAsync(string OutpostId, string[] HostIdFilter, int MaxResults, string NextToken, AssetState[] StatusFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "outposts/"+ (OutpostId==null? "" : System.Uri.EscapeDataString(OutpostId))+"/assets&"+string.Join("&", HostIdFilter.Select(z => $"HostIdFilter={System.Uri.EscapeDataString(z.ToString())}"))+"&MaxResults="+MaxResults+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&"+string.Join("&", StatusFilter.Select(z => $"StatusFilter={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAssetsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the items in the catalog.</p> <p>Use filters to return specific results. If you specify multiple filters, the results include only the resources that match all of the specified filters. For a filter where you can specify multiple values, the results include items that match any of the values that you specify for the filter.</p>
		/// ListCatalogItems catalog/items
		/// </summary>
		/// <param name="NextToken">Max length: 2048
		/// Min length: 1
		// </param>
		/// <param name="MaxResults">Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="ItemClassFilter">Filters the results by item class.</param>
		/// <param name="SupportedStorageFilter">Filters the results by storage option.</param>
		/// <param name="EC2FamilyFilter">Filters the results by EC2 family (for example, M5).</param>
		/// <returns>Success</returns>
		public async Task<ListCatalogItemsOutput> ListCatalogItemsAsync(string NextToken, int MaxResults, CatalogItemClass[] ItemClassFilter, SupportedStorageEnum[] SupportedStorageFilter, string[] EC2FamilyFilter, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "catalog/items?NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults+"&"+string.Join("&", ItemClassFilter.Select(z => $"ItemClassFilter={z}"))+"&"+string.Join("&", SupportedStorageFilter.Select(z => $"SupportedStorageFilter={z}"))+"&"+string.Join("&", EC2FamilyFilter.Select(z => $"EC2FamilyFilter={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCatalogItemsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the Outpost orders for your Amazon Web Services account.
		/// ListOrders list-orders
		/// </summary>
		/// <param name="OutpostIdentifierFilter"> The ID or the Amazon Resource Name (ARN) of the Outpost. 
		/// Max length: 180
		/// Min length: 1
		// </param>
		/// <param name="NextToken">Max length: 2048
		/// Min length: 1
		// </param>
		/// <param name="MaxResults">Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <returns>Success</returns>
		public async Task<ListOrdersOutput> ListOrdersAsync(string OutpostIdentifierFilter, string NextToken, int MaxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list-orders?OutpostIdentifierFilter=" + (OutpostIdentifierFilter==null? "" : System.Uri.EscapeDataString(OutpostIdentifierFilter))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&MaxResults="+MaxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOrdersOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags for the specified resource.
		/// ListTagsForResource tags/{ResourceArn}
		/// </summary>
		/// <param name="ResourceArn">The Amazon Resource Name (ARN) of the resource.
		/// Max length: 1011
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string ResourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds tags to the specified resource.
		/// TagResource tags/{ResourceArn}
		/// </summary>
		/// <param name="ResourceArn">The Amazon Resource Name (ARN) of the resource.
		/// Max length: 1011
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string ResourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <note> <p> Amazon Web Services uses this action to install Outpost servers.</p> </note> <p> Starts the connection required for Outpost server installation. </p> <p> Use CloudTrail to monitor this action or Amazon Web Services managed policy for Amazon Web Services Outposts to secure it. For more information, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/security-iam-awsmanpol.html"> Amazon Web Services managed policies for Amazon Web Services Outposts</a> and <a href="https://docs.aws.amazon.com/outposts/latest/userguide/logging-using-cloudtrail.html"> Logging Amazon Web Services Outposts API calls with Amazon Web Services CloudTrail</a> in the <i>Amazon Web Services Outposts User Guide</i>. </p>
		/// StartConnection connections
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartConnectionResponse> StartConnectionAsync(StartConnectionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "connections";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartConnectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes tags from the specified resource.
		/// UntagResource tags/{ResourceArn}#tagKeys
		/// </summary>
		/// <param name="ResourceArn">The Amazon Resource Name (ARN) of the resource.
		/// Max length: 1011
		// </param>
		/// <param name="tagKeys">The tag keys.
		/// Minimum items: 1
		/// Maximum items: 50
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string ResourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (ResourceArn==null? "" : System.Uri.EscapeDataString(ResourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the address of the specified site.</p> <p>You can't update a site address if there is an order in progress. You must wait for the order to complete or cancel the order.</p> <p>You can update the operating address before you place an order at the site, or after all Outposts that belong to the site have been deactivated.</p>
		/// UpdateSiteAddress sites/{SiteId}/address
		/// </summary>
		/// <param name="SiteId"> The ID or the Amazon Resource Name (ARN) of the site. 
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateSiteAddressOutput> UpdateSiteAddressAsync(string SiteId, UpdateSiteAddressPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (SiteId==null? "" : System.Uri.EscapeDataString(SiteId))+"/address";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSiteAddressOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Update the physical and logistical details for a rack at a site. For more information about hardware requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist">Network readiness checklist</a> in the Amazon Web Services Outposts User Guide. </p> <p>To update a rack at a site with an order of <code>IN_PROGRESS</code>, you must wait for the order to complete or cancel the order.</p>
		/// UpdateSiteRackPhysicalProperties sites/{SiteId}/rackPhysicalProperties
		/// </summary>
		/// <param name="SiteId"> The ID or the Amazon Resource Name (ARN) of the site. 
		/// Max length: 255
		/// Min length: 1
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateSiteRackPhysicalPropertiesOutput> UpdateSiteRackPhysicalPropertiesAsync(string SiteId, UpdateSiteRackPhysicalPropertiesPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (SiteId==null? "" : System.Uri.EscapeDataString(SiteId))+"/rackPhysicalProperties";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSiteRackPhysicalPropertiesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class CreateOrderPostBody
	{
		
		/// <summary>
		///  The ID or the Amazon Resource Name (ARN) of the Outpost. 
		/// Required
		/// Max length: 180
		/// Min length: 1
		/// Pattern: ^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/)?op-[a-f0-9]{17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(180)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/)?op-[a-f0-9]{17}$")]
		public string OutpostIdentifier { get; set; }
		
		/// <summary>
		/// The line items that make up the order.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public LineItemRequest[] LineItems { get; set; }
		
		/// <summary>
		/// The payment option.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PaymentOption PaymentOption { get; set; }
		
		/// <summary>
		/// The payment terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PaymentTerm PaymentTerm { get; set; }
	}
	
	public class CreateOutpostPostBody
	{
		
		/// <summary>
		/// The name of the Outpost.
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the Outpost.
		/// Max length: 1000
		/// Min length: 0
		/// Pattern: ^[\S ]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]*$")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID of the site.
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/)?(os-[a-f0-9]{17})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/)?(os-[a-f0-9]{17})$")]
		public string SiteId { get; set; }
		
		/// <summary>
		/// The Availability Zone.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^([a-zA-Z]+-){1,3}([a-zA-Z]+)?(\d+[a-zA-Z]?)?$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([a-zA-Z]+-){1,3}([a-zA-Z]+)?(\d+[a-zA-Z]?)?$")]
		public string AvailabilityZone { get; set; }
		
		/// <summary>
		/// The ID of the Availability Zone.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[a-zA-Z]+\d-[a-zA-Z]+\d$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z]+\d-[a-zA-Z]+\d$")]
		public string AvailabilityZoneId { get; set; }
		
		/// <summary>
		/// The tags to apply to the Outpost.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		///  The type of hardware for this Outpost. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SupportedHardwareType SupportedHardwareType { get; set; }
	}
	
	public class CreateSitePostBody
	{
		
		/// <summary>
		/// The name of the site.
		/// Required
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the site.
		/// Max length: 1001
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1001)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Description { get; set; }
		
		/// <summary>
		/// Additional information that you provide about site access requirements, electrician scheduling, personal protective equipment, or regulation of equipment materials that could affect your installation process. 
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: ^[\S \n]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S \n]+$")]
		public string Notes { get; set; }
		
		/// <summary>
		///  The tags to apply to a site. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		///  Information about an address. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateSitePostBodyOperatingAddress OperatingAddress { get; set; }
		
		/// <summary>
		///  Information about an address. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateSitePostBodyShippingAddress ShippingAddress { get; set; }
		
		/// <summary>
		///  Information about the physical and logistical details for racks at sites. For more information about hardware requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist">Network readiness checklist</a> in the Amazon Web Services Outposts User Guide. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateSitePostBodyRackPhysicalProperties RackPhysicalProperties { get; set; }
	}
	
	public class CreateSitePostBodyOperatingAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateOrRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DistrictOrCounty { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Municipality { get; set; }
	}
	
	public class CreateSitePostBodyShippingAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateOrRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DistrictOrCounty { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Municipality { get; set; }
	}
	
	public class CreateSitePostBodyRackPhysicalProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PowerDrawKva PowerDrawKva { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PowerPhase PowerPhase { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PowerConnector PowerConnector { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PowerFeedDrop PowerFeedDrop { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UplinkGbps UplinkGbps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UplinkCount UplinkCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FiberOpticCableType FiberOpticCableType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OpticalStandard OpticalStandard { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MaximumSupportedWeightLbs MaximumSupportedWeightLbs { get; set; }
	}
	
	public class UpdateOutpostPatchBody
	{
		
		/// <summary>
		/// The name of the Outpost.
		/// Max length: 255
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the Outpost.
		/// Max length: 1000
		/// Min length: 0
		/// Pattern: ^[\S ]*$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]*$")]
		public string Description { get; set; }
		
		/// <summary>
		///  The type of hardware for this Outpost. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SupportedHardwareType SupportedHardwareType { get; set; }
	}
	
	public class UpdateSitePatchBody
	{
		
		/// <summary>
		/// The name of the site.
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Name { get; set; }
		
		/// <summary>
		/// The description of the site.
		/// Max length: 1001
		/// Min length: 1
		/// Pattern: ^[\S ]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1001)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S ]+$")]
		public string Description { get; set; }
		
		/// <summary>
		/// Notes about a site.
		/// Max length: 2000
		/// Min length: 1
		/// Pattern: ^[\S \n]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[\S \n]+$")]
		public string Notes { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags to add to the resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StartConnectionPostBody
	{
		
		/// <summary>
		///  The serial number of the dongle. 
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^(\w+)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\w+)$")]
		public string DeviceSerialNumber { get; set; }
		
		/// <summary>
		///  The ID of the Outpost server. 
		/// Required
		/// Max length: 100
		/// Min length: 1
		/// Pattern: ^(\w+)$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(\w+)$")]
		public string AssetId { get; set; }
		
		/// <summary>
		///  The public key of the client. 
		/// Required
		/// Max length: 44
		/// Min length: 44
		/// Pattern: ^[a-zA-Z0-9/+]{43}=$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(44)]
		[System.ComponentModel.DataAnnotations.MaxLength(44)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9/+]{43}=$")]
		public string ClientPublicKey { get; set; }
		
		/// <summary>
		///  The device index of the network interface on the Outpost server. 
		/// Required
		/// Minimum: 0
		/// Maximum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, 1)]
		public int NetworkInterfaceDeviceIndex { get; set; }
	}
	
	public class UpdateSiteAddressPutBody
	{
		
		/// <summary>
		///  The type of the address. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AddressType AddressType { get; set; }
		
		/// <summary>
		///  Information about an address. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public UpdateSiteAddressPutBodyAddress Address { get; set; }
	}
	
	public class UpdateSiteAddressPutBodyAddress
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ContactPhoneNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AddressLine3 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StateOrRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DistrictOrCounty { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CountryCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Municipality { get; set; }
	}
	
	public class UpdateSiteRackPhysicalPropertiesPatchBody
	{
		
		/// <summary>
		/// The power draw, in kVA, available at the hardware placement position for the rack.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PowerDrawKva PowerDrawKva { get; set; }
		
		/// <summary>
		/// <p>The power option that you can provide for hardware. </p> <ul> <li> <p>Single-phase AC feed: 200 V to 277 V, 50 Hz or 60 Hz</p> </li> <li> <p>Three-phase AC feed: 346 V to 480 V, 50 Hz or 60 Hz</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PowerPhase PowerPhase { get; set; }
		
		/// <summary>
		/// <p>The power connector that Amazon Web Services should plan to provide for connections to the hardware. Note the correlation between <code>PowerPhase</code> and <code>PowerConnector</code>. </p> <ul> <li> <p>Single-phase AC feed</p> <ul> <li> <p> <b>L6-30P</b> – (common in US); 30A; single phase</p> </li> <li> <p> <b>IEC309 (blue)</b> – P+N+E, 6hr; 32 A; single phase</p> </li> </ul> </li> <li> <p>Three-phase AC feed</p> <ul> <li> <p> <b>AH530P7W (red)</b> – 3P+N+E, 7hr; 30A; three phase</p> </li> <li> <p> <b>AH532P6W (red)</b> – 3P+N+E, 6hr; 32A; three phase</p> </li> </ul> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PowerConnector PowerConnector { get; set; }
		
		/// <summary>
		/// Indicates whether the power feed comes above or below the rack. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PowerFeedDrop PowerFeedDrop { get; set; }
		
		/// <summary>
		/// The uplink speed the rack should support for the connection to the Region. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UplinkGbps UplinkGbps { get; set; }
		
		/// <summary>
		/// <p>Racks come with two Outpost network devices. Depending on the supported uplink speed at the site, the Outpost network devices provide a variable number of uplinks. Specify the number of uplinks for each Outpost network device that you intend to use to connect the rack to your network. Note the correlation between <code>UplinkGbps</code> and <code>UplinkCount</code>. </p> <ul> <li> <p>1Gbps - Uplinks available: 1, 2, 4, 6, 8</p> </li> <li> <p>10Gbps - Uplinks available: 1, 2, 4, 8, 12, 16</p> </li> <li> <p>40 and 100 Gbps- Uplinks available: 1, 2, 4</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UplinkCount UplinkCount { get; set; }
		
		/// <summary>
		/// The type of fiber that you will use to attach the Outpost to your network. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FiberOpticCableType FiberOpticCableType { get; set; }
		
		/// <summary>
		/// <p>The type of optical standard that you will use to attach the Outpost to your network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking">Network</a> in the Amazon Web Services Outposts User Guide. </p> <ul> <li> <p> <code>OPTIC_10GBASE_SR</code>: 10GBASE-SR</p> </li> <li> <p> <code>OPTIC_10GBASE_IR</code>: 10GBASE-IR</p> </li> <li> <p> <code>OPTIC_10GBASE_LR</code>: 10GBASE-LR</p> </li> <li> <p> <code>OPTIC_40GBASE_SR</code>: 40GBASE-SR</p> </li> <li> <p> <code>OPTIC_40GBASE_ESR</code>: 40GBASE-ESR</p> </li> <li> <p> <code>OPTIC_40GBASE_IR4_LR4L</code>: 40GBASE-IR (LR4L)</p> </li> <li> <p> <code>OPTIC_40GBASE_LR4</code>: 40GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100GBASE_SR4</code>: 100GBASE-SR4</p> </li> <li> <p> <code>OPTIC_100GBASE_CWDM4</code>: 100GBASE-CWDM4</p> </li> <li> <p> <code>OPTIC_100GBASE_LR4</code>: 100GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100G_PSM4_MSA</code>: 100G PSM4 MSA</p> </li> <li> <p> <code>OPTIC_1000BASE_LX</code>: 1000Base-LX</p> </li> <li> <p> <code>OPTIC_1000BASE_SX</code> : 1000Base-SX</p> </li> </ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OpticalStandard OpticalStandard { get; set; }
		
		/// <summary>
		/// The maximum rack weight that this site can support. <code>NO_LIMIT</code> is over 2000lbs. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public MaximumSupportedWeightLbs MaximumSupportedWeightLbs { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
