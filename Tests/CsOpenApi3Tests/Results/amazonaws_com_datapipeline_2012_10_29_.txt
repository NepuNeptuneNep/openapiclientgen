//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Contains the output of ActivatePipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivatePipelineOutput
	{
	}
	
	/// <summary>
	/// Contains the parameters for ActivatePipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivatePipelineInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterValues")]
		public ParameterValue[] ParameterValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTimestamp")]
		public System.DateTimeOffset StartTimestamp { get; set; }
	}
	
	/// <summary>
	/// A value or list of parameter values. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParameterValue
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineDeletedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServiceError
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidRequestException
	{
	}
	
	/// <summary>
	/// Contains the output of AddTags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddTagsOutput
	{
	}
	
	/// <summary>
	/// Contains the parameters for AddTags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddTagsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Tags are key/value pairs defined by a user and associated with a pipeline to control access. AWS Data Pipeline allows you to associate ten tags per pipeline. For more information, see <a href="http://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-control-access.html">Controlling User Access to Pipelines</a> in the <i>AWS Data Pipeline Developer Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Contains the output of CreatePipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePipelineOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for CreatePipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatePipelineInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="uniqueId")]
		public string UniqueId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DeactivatePipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeactivatePipelineOutput
	{
	}
	
	/// <summary>
	/// Contains the parameters for DeactivatePipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeactivatePipelineInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancelActive")]
		public System.Nullable<System.Boolean> CancelActive { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DeletePipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePipelineInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribeObjects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeObjectsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineObjects")]
		public PipelineObject[] PipelineObjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marker")]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMoreResults")]
		public System.Nullable<System.Boolean> HasMoreResults { get; set; }
	}
	
	/// <summary>
	/// Contains information about a pipeline object. This can be a logical, physical, or physical attempt pipeline object. The complete set of components of a pipeline defines the pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineObject
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Field[] Fields { get; set; }
	}
	
	/// <summary>
	/// A key-value pair that describes a property of a pipeline object. The value is specified as either a string value (<code>StringValue</code>) or a reference to another object (<code>RefValue</code>) but not as both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Field
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refValue")]
		public string RefValue { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribeObjects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeObjectsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectIds")]
		public string[] ObjectIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="evaluateExpressions")]
		public System.Nullable<System.Boolean> EvaluateExpressions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marker")]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the output of DescribePipelines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePipelinesOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineDescriptionList")]
		public PipelineDescription[] PipelineDescriptionList { get; set; }
	}
	
	/// <summary>
	/// Contains pipeline metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineDescription
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Field[] Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for DescribePipelines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePipelinesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineIds")]
		public string[] PipelineIds { get; set; }
	}
	
	/// <summary>
	/// Contains the output of EvaluateExpression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluateExpressionOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="evaluatedExpression")]
		public string EvaluatedExpression { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for EvaluateExpression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluateExpressionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskNotFoundException
	{
	}
	
	/// <summary>
	/// Contains the output of GetPipelineDefinition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPipelineDefinitionOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineObjects")]
		public PipelineObject[] PipelineObjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterObjects")]
		public ParameterObject[] ParameterObjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterValues")]
		public ParameterValue[] ParameterValues { get; set; }
	}
	
	/// <summary>
	/// Contains information about a parameter object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParameterObject
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public ParameterAttribute[] Attributes { get; set; }
	}
	
	/// <summary>
	/// The attributes allowed or specified with a parameter object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParameterAttribute
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for GetPipelineDefinition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPipelineDefinitionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Contains the output of ListPipelines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPipelinesOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineIdList")]
		public PipelineIdName[] PipelineIdList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marker")]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMoreResults")]
		public System.Nullable<System.Boolean> HasMoreResults { get; set; }
	}
	
	/// <summary>
	/// Contains the name and identifier of a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineIdName
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for ListPipelines.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPipelinesInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="marker")]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the output of PollForTask.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PollForTaskOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskObject")]
		public TaskObject TaskObject { get; set; }
	}
	
	/// <summary>
	/// Contains information about a pipeline task that is assigned to a task runner.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attemptId")]
		public string AttemptId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public PipelineObjectMap Objects { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PipelineObjectMap
	{
	}
	
	/// <summary>
	/// Contains the parameters for PollForTask.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PollForTaskInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workerGroup")]
		public string WorkerGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceIdentity")]
		public InstanceIdentity InstanceIdentity { get; set; }
	}
	
	/// <summary>
	/// <p><p>Identity information for the EC2 instance that is hosting the task runner. You can get this value by calling a metadata URI from the EC2 instance. For more information, see <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">Instance Metadata</a> in the <i>Amazon Elastic Compute Cloud User Guide.</i> Passing in this value proves that your task runner is running on an EC2 instance, and ensures the proper AWS Data Pipeline service charges are applied to your pipeline.</p></p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceIdentity
	{
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public string Document { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature { get; set; }
	}
	
	/// <summary>
	/// Contains the output of PutPipelineDefinition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutPipelineDefinitionOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="validationErrors")]
		public ValidationError[] ValidationErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validationWarnings")]
		public ValidationWarning[] ValidationWarnings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errored")]
		public bool Errored { get; set; }
	}
	
	/// <summary>
	/// Defines a validation error. Validation errors prevent pipeline activation. The set of validation errors that can be returned are defined by AWS Data Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationError
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public string[] Errors { get; set; }
	}
	
	/// <summary>
	/// Defines a validation warning. Validation warnings do not prevent pipeline activation. The set of validation warnings that can be returned are defined by AWS Data Pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationWarning
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for PutPipelineDefinition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutPipelineDefinitionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineObjects")]
		public PipelineObject[] PipelineObjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterObjects")]
		public ParameterObject[] ParameterObjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterValues")]
		public ParameterValue[] ParameterValues { get; set; }
	}
	
	/// <summary>
	/// Contains the output of QueryObjects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryObjectsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marker")]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMoreResults")]
		public System.Nullable<System.Boolean> HasMoreResults { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for QueryObjects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryObjectsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public Query Query { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sphere")]
		public string Sphere { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marker")]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
	}
	
	/// <summary>
	/// Defines the query to run against an object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Query
	{
		
		[System.Runtime.Serialization.DataMember(Name="selectors")]
		public Selector[] Selectors { get; set; }
	}
	
	/// <summary>
	/// A comparision that is used to determine whether a query should return this object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Selector
	{
		
		[System.Runtime.Serialization.DataMember(Name="fieldName")]
		public string FieldName { get; set; }
		
		/// <summary>
		/// Contains a logical operation for comparing the value of a field with a specified value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public Operator Operator { get; set; }
	}
	
	/// <summary>
	/// Contains a logical operation for comparing the value of a field with a specified value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operator
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public OperatorType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OperatorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EQ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REF_EQ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETWEEN = 4,
	}
	
	/// <summary>
	/// Contains the output of RemoveTags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveTagsOutput
	{
	}
	
	/// <summary>
	/// Contains the parameters for RemoveTags.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveTagsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tagKeys")]
		public string[] TagKeys { get; set; }
	}
	
	/// <summary>
	/// Contains the output of ReportTaskProgress.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportTaskProgressOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="canceled")]
		public bool Canceled { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for ReportTaskProgress.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportTaskProgressInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public Field[] Fields { get; set; }
	}
	
	/// <summary>
	/// Contains the output of ReportTaskRunnerHeartbeat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportTaskRunnerHeartbeatOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="terminate")]
		public bool Terminate { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for ReportTaskRunnerHeartbeat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportTaskRunnerHeartbeatInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskrunnerId")]
		public string TaskrunnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workerGroup")]
		public string WorkerGroup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostname")]
		public string Hostname { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for SetStatus.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetStatusInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectIds")]
		public string[] ObjectIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Contains the output of SetTaskStatus.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetTaskStatusOutput
	{
	}
	
	/// <summary>
	/// Contains the parameters for SetTaskStatus.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetTaskStatusInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskId")]
		public string TaskId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskStatus")]
		public TaskStatus TaskStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorId")]
		public string ErrorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorStackTrace")]
		public string ErrorStackTrace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FALSE = 2,
	}
	
	/// <summary>
	/// Contains the output of ValidatePipelineDefinition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidatePipelineDefinitionOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="validationErrors")]
		public ValidationError[] ValidationErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validationWarnings")]
		public ValidationWarning[] ValidationWarnings { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errored")]
		public bool Errored { get; set; }
	}
	
	/// <summary>
	/// Contains the parameters for ValidatePipelineDefinition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidatePipelineDefinitionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineId")]
		public string PipelineId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineObjects")]
		public PipelineObject[] PipelineObjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterObjects")]
		public ParameterObject[] ParameterObjects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterValues")]
		public ParameterValue[] ParameterValues { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Validates the specified pipeline and starts processing pipeline tasks. If the pipeline does not pass validation, activation fails.</p> <p>If you need to pause the pipeline to investigate an issue with a component, such as a data source or script, call <a>DeactivatePipeline</a>.</p> <p>To activate a finished pipeline, modify the end date for the pipeline and then activate it.</p>
		/// ActivatePipeline #X-Amz-Target=DataPipeline.ActivatePipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ActivatePipelineOutput> ActivatePipelineAsync(ActivatePipelineInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.ActivatePipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActivatePipelineOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds or modifies tags for the specified pipeline.
		/// AddTags #X-Amz-Target=DataPipeline.AddTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AddTagsOutput> AddTagsAsync(AddTagsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.AddTags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AddTagsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new, empty pipeline. Use <a>PutPipelineDefinition</a> to populate the pipeline.
		/// CreatePipeline #X-Amz-Target=DataPipeline.CreatePipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePipelineOutput> CreatePipelineAsync(CreatePipelineInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.CreatePipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreatePipelineOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deactivates the specified running pipeline. The pipeline is set to the <code>DEACTIVATING</code> state until the deactivation process completes.</p> <p>To resume a deactivated pipeline, use <a>ActivatePipeline</a>. By default, the pipeline resumes from the last completed execution. Optionally, you can specify the date and time to resume the pipeline.</p>
		/// DeactivatePipeline #X-Amz-Target=DataPipeline.DeactivatePipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeactivatePipelineOutput> DeactivatePipelineAsync(DeactivatePipelineInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.DeactivatePipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DeactivatePipelineOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a pipeline, its pipeline definition, and its run history. AWS Data Pipeline attempts to cancel instances associated with the pipeline that are currently being processed by task runners.</p> <p>Deleting a pipeline cannot be undone. You cannot query or restore a deleted pipeline. To temporarily pause a pipeline instead of deleting it, call <a>SetStatus</a> with the status set to <code>PAUSE</code> on individual components. Components that are paused by <a>SetStatus</a> can be resumed.</p>
		/// DeletePipeline #X-Amz-Target=DataPipeline.DeletePipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeletePipelineAsync(DeletePipelineInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.DeletePipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the object definitions for a set of objects associated with the pipeline. Object definitions are composed of a set of fields that define the properties of the object.
		/// DescribeObjects #X-Amz-Target=DataPipeline.DescribeObjects
		/// </summary>
		/// <param name="marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeObjectsOutput> DescribeObjectsAsync(string marker, DescribeObjectsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.DescribeObjects?marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeObjectsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves metadata about one or more pipelines. The information retrieved includes the name of the pipeline, the pipeline identifier, its current state, and the user account that owns the pipeline. Using account credentials, you can retrieve metadata about pipelines that you or your IAM users have created. If you are using an IAM user account, you can retrieve metadata about only those pipelines for which you have read permissions.</p> <p>To retrieve the full pipeline definition instead of metadata about the pipeline, call <a>GetPipelineDefinition</a>.</p>
		/// DescribePipelines #X-Amz-Target=DataPipeline.DescribePipelines
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePipelinesOutput> DescribePipelinesAsync(DescribePipelinesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.DescribePipelines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribePipelinesOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Task runners call <code>EvaluateExpression</code> to evaluate a string in the context of the specified object. For example, a task runner can evaluate SQL queries stored in Amazon S3.
		/// EvaluateExpression #X-Amz-Target=DataPipeline.EvaluateExpression
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EvaluateExpressionOutput> EvaluateExpressionAsync(EvaluateExpressionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.EvaluateExpression";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EvaluateExpressionOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the definition of the specified pipeline. You can call <code>GetPipelineDefinition</code> to retrieve the pipeline definition that you provided using <a>PutPipelineDefinition</a>.
		/// GetPipelineDefinition #X-Amz-Target=DataPipeline.GetPipelineDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPipelineDefinitionOutput> GetPipelineDefinitionAsync(GetPipelineDefinitionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.GetPipelineDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPipelineDefinitionOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the pipeline identifiers for all active pipelines that you have permission to access.
		/// ListPipelines #X-Amz-Target=DataPipeline.ListPipelines
		/// </summary>
		/// <param name="marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPipelinesOutput> ListPipelinesAsync(string marker, ListPipelinesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.ListPipelines?marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPipelinesOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Task runners call <code>PollForTask</code> to receive a task to perform from AWS Data Pipeline. The task runner specifies which tasks it can perform by setting a value for the <code>workerGroup</code> parameter. The task returned can come from any of the pipelines that match the <code>workerGroup</code> value passed in by the task runner and that was launched using the IAM user credentials specified by the task runner.</p> <p>If tasks are ready in the work queue, <code>PollForTask</code> returns a response immediately. If no tasks are available in the queue, <code>PollForTask</code> uses long-polling and holds on to a poll connection for up to a 90 seconds, during which time the first newly scheduled task is handed to the task runner. To accomodate this, set the socket timeout in your task runner to 90 seconds. The task runner should not call <code>PollForTask</code> again on the same <code>workerGroup</code> until it receives a response, and this can take up to 90 seconds. </p>
		/// PollForTask #X-Amz-Target=DataPipeline.PollForTask
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PollForTaskOutput> PollForTaskAsync(PollForTaskInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.PollForTask";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PollForTaskOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds tasks, schedules, and preconditions to the specified pipeline. You can use <code>PutPipelineDefinition</code> to populate a new pipeline.</p> <p> <code>PutPipelineDefinition</code> also validates the configuration as it adds it to the pipeline. Changes to the pipeline are saved unless one of the following three validation errors exists in the pipeline. </p> <ol> <li>An object is missing a name or identifier field.</li> <li>A string or reference field is empty.</li> <li>The number of objects in the pipeline exceeds the maximum allowed objects.</li> <li>The pipeline is in a FINISHED state.</li> </ol> <p> Pipeline object definitions are passed to the <code>PutPipelineDefinition</code> action and returned by the <a>GetPipelineDefinition</a> action. </p>
		/// PutPipelineDefinition #X-Amz-Target=DataPipeline.PutPipelineDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutPipelineDefinitionOutput> PutPipelineDefinitionAsync(PutPipelineDefinitionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.PutPipelineDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutPipelineDefinitionOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Queries the specified pipeline for the names of objects that match the specified set of conditions.
		/// QueryObjects #X-Amz-Target=DataPipeline.QueryObjects
		/// </summary>
		/// <param name="limit">Pagination limit</param>
		/// <param name="marker">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<QueryObjectsOutput> QueryObjectsAsync(string limit, string marker, QueryObjectsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.QueryObjects?limit=" + (limit==null? "" : System.Uri.EscapeDataString(limit))+"&marker=" + (marker==null? "" : System.Uri.EscapeDataString(marker));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<QueryObjectsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes existing tags from the specified pipeline.
		/// RemoveTags #X-Amz-Target=DataPipeline.RemoveTags
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RemoveTagsOutput> RemoveTagsAsync(RemoveTagsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.RemoveTags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RemoveTagsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Task runners call <code>ReportTaskProgress</code> when assigned a task to acknowledge that it has the task. If the web service does not receive this acknowledgement within 2 minutes, it assigns the task in a subsequent <a>PollForTask</a> call. After this initial acknowledgement, the task runner only needs to report progress every 15 minutes to maintain its ownership of the task. You can change this reporting time from 15 minutes by specifying a <code>reportProgressTimeout</code> field in your pipeline.</p> <p>If a task runner does not report its status after 5 minutes, AWS Data Pipeline assumes that the task runner is unable to process the task and reassigns the task in a subsequent response to <a>PollForTask</a>. Task runners should call <code>ReportTaskProgress</code> every 60 seconds.</p>
		/// ReportTaskProgress #X-Amz-Target=DataPipeline.ReportTaskProgress
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReportTaskProgressOutput> ReportTaskProgressAsync(ReportTaskProgressInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.ReportTaskProgress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReportTaskProgressOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Task runners call <code>ReportTaskRunnerHeartbeat</code> every 15 minutes to indicate that they are operational. If the AWS Data Pipeline Task Runner is launched on a resource managed by AWS Data Pipeline, the web service can use this call to detect when the task runner application has failed and restart a new instance.
		/// ReportTaskRunnerHeartbeat #X-Amz-Target=DataPipeline.ReportTaskRunnerHeartbeat
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ReportTaskRunnerHeartbeatOutput> ReportTaskRunnerHeartbeatAsync(ReportTaskRunnerHeartbeatInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.ReportTaskRunnerHeartbeat";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReportTaskRunnerHeartbeatOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Requests that the status of the specified physical or logical pipeline objects be updated in the specified pipeline. This update might not occur immediately, but is eventually consistent. The status that can be set depends on the type of object (for example, DataNode or Activity). You cannot perform this operation on <code>FINISHED</code> pipelines and attempting to do so returns <code>InvalidRequestException</code>.
		/// SetStatus #X-Amz-Target=DataPipeline.SetStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task SetStatusAsync(SetStatusInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.SetStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Task runners call <code>SetTaskStatus</code> to notify AWS Data Pipeline that a task is completed and provide information about the final status. A task runner makes this call regardless of whether the task was sucessful. A task runner does not need to call <code>SetTaskStatus</code> for tasks that are canceled by the web service during a call to <a>ReportTaskProgress</a>.
		/// SetTaskStatus #X-Amz-Target=DataPipeline.SetTaskStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SetTaskStatusOutput> SetTaskStatusAsync(SetTaskStatusInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.SetTaskStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SetTaskStatusOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Validates the specified pipeline definition to ensure that it is well formed and can be run without error.
		/// ValidatePipelineDefinition #X-Amz-Target=DataPipeline.ValidatePipelineDefinition
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ValidatePipelineDefinitionOutput> ValidatePipelineDefinitionAsync(ValidatePipelineDefinitionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=DataPipeline.ValidatePipelineDefinition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ValidatePipelineDefinitionOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ActivatePipelineX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.ActivatePipeline")]
		DataPipeline_ActivatePipeline = 0,
	}
	
	public enum AddTagsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.AddTags")]
		DataPipeline_AddTags = 0,
	}
	
	public enum CreatePipelineX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.CreatePipeline")]
		DataPipeline_CreatePipeline = 0,
	}
	
	public enum DeactivatePipelineX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.DeactivatePipeline")]
		DataPipeline_DeactivatePipeline = 0,
	}
	
	public enum DeletePipelineX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.DeletePipeline")]
		DataPipeline_DeletePipeline = 0,
	}
	
	public enum DescribeObjectsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.DescribeObjects")]
		DataPipeline_DescribeObjects = 0,
	}
	
	public enum DescribePipelinesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.DescribePipelines")]
		DataPipeline_DescribePipelines = 0,
	}
	
	public enum EvaluateExpressionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.EvaluateExpression")]
		DataPipeline_EvaluateExpression = 0,
	}
	
	public enum GetPipelineDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.GetPipelineDefinition")]
		DataPipeline_GetPipelineDefinition = 0,
	}
	
	public enum ListPipelinesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.ListPipelines")]
		DataPipeline_ListPipelines = 0,
	}
	
	public enum PollForTaskX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.PollForTask")]
		DataPipeline_PollForTask = 0,
	}
	
	public enum PutPipelineDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.PutPipelineDefinition")]
		DataPipeline_PutPipelineDefinition = 0,
	}
	
	public enum QueryObjectsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.QueryObjects")]
		DataPipeline_QueryObjects = 0,
	}
	
	public enum RemoveTagsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.RemoveTags")]
		DataPipeline_RemoveTags = 0,
	}
	
	public enum ReportTaskProgressX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.ReportTaskProgress")]
		DataPipeline_ReportTaskProgress = 0,
	}
	
	public enum ReportTaskRunnerHeartbeatX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.ReportTaskRunnerHeartbeat")]
		DataPipeline_ReportTaskRunnerHeartbeat = 0,
	}
	
	public enum SetStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.SetStatus")]
		DataPipeline_SetStatus = 0,
	}
	
	public enum SetTaskStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.SetTaskStatus")]
		DataPipeline_SetTaskStatus = 0,
	}
	
	public enum ValidatePipelineDefinitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DataPipeline.ValidatePipelineDefinition")]
		DataPipeline_ValidatePipelineDefinition = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
