//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class _401Response
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class _403Response
	{
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountResponse
	{
		
		/// <summary>
		/// The provider access token (only for `messenger`)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		/// <summary>
		/// The external api key for this account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_key")]
		public string Api_key { get; set; }
		
		/// <summary>
		/// The array of associated application ids
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public string[] Applications { get; set; }
		
		/// <summary>
		/// The external identifier for this account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// The account name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The provider (will be one of `messenger, viber_service_msg, whatsapp`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public AccountResponseProvider Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccountResponseProvider
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		messenger = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		viber_service_msg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		whatsapp = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAllAccountResponse : MessengerAccountResponse
	{
		
		/// <summary>
		/// The external api key for this account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_key")]
		public string Api_key { get; set; }
		
		/// <summary>
		/// The array of associated application ids
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public string[] Applications { get; set; }
		
		/// <summary>
		/// The external identifier for this account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// The account name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The provider (will be `viber_service_msg`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessengerAccountResponse
	{
		
		/// <summary>
		/// The provider access token
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		/// <summary>
		/// The external api key for this account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_key")]
		public string Api_key { get; set; }
		
		/// <summary>
		/// The array of associated application ids
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public string[] Applications { get; set; }
		
		/// <summary>
		/// The external identifier for this account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// The account name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The provider (will be `messenger`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VSMAccountResponse
	{
		
		/// <summary>
		/// The external api key for this account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_key")]
		public string Api_key { get; set; }
		
		/// <summary>
		/// The array of associated application ids
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public string[] Applications { get; set; }
		
		/// <summary>
		/// The external identifier for this account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// The account name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The provider (will be `viber_service_msg`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WAAccountResponse
	{
		
		/// <summary>
		/// The external api key for this account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_key")]
		public string Api_key { get; set; }
		
		/// <summary>
		/// The array of associated application ids
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public string[] Applications { get; set; }
		
		/// <summary>
		/// The external identifier for this account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// The account name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The provider (will be `whatsapp`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve all accounts you own
		/// GetAllAccounts 
		/// </summary>
		/// <param name="provider">Filter by provider</param>
		/// <param name="page_number">Page number of the results</param>
		/// <param name="page_size">Page size of the results</param>
		/// <returns>OK.</returns>
		public async Task<GetAllAccountsReturn> GetAllAccountsAsync(AccountResponseProvider provider, int page_number, int page_size, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "?provider=" + provider+"&page_number="+page_number+"&page_size="+page_size;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAllAccountsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Messenger account
		/// CreateMessengerAccount messenger
		/// </summary>
		public async Task CreateMessengerAccountAsync(CreateMessengerAccountPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "messenger";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Messenger account
		/// DeleteMessengerAccount messenger/{external_id}
		/// </summary>
		/// <param name="external_id">External id of the account you want to delete. In this case it is the Facebook Page ID.</param>
		public async Task DeleteMessengerAccountAsync(string external_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "messenger/"+ (external_id==null? "" : System.Uri.EscapeDataString(external_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Messenger account
		/// GetMessengerAccount messenger/{external_id}
		/// </summary>
		/// <param name="external_id">External id of the account you want to retrieve. In this case it is the Facebook Page ID.</param>
		/// <returns>OK.</returns>
		public async Task<MessengerAccountResponse> GetMessengerAccountAsync(string external_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "messenger/"+ (external_id==null? "" : System.Uri.EscapeDataString(external_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MessengerAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Messenger account
		/// UpdateMessengerAccount messenger/{external_id}
		/// </summary>
		/// <param name="external_id">External id of the account you want to update. In this case it is the Facebook Page ID.</param>
		/// <param name="requestBody">Request body can contain any of the following</param>
		/// <returns>OK.</returns>
		public async Task<UpdateMessengerAccountReturn> UpdateMessengerAccountAsync(string external_id, UpdateMessengerAccountPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "messenger/"+ (external_id==null? "" : System.Uri.EscapeDataString(external_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateMessengerAccountReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Viber Service Message account
		/// GetVSMAccount viber_service_msg/{external_id}
		/// </summary>
		/// <param name="external_id">External id of the account you want to retrieve. In this case it will be your Viber Service Message ID.</param>
		/// <returns>OK.</returns>
		public async Task<VSMAccountResponse> GetVSMAccountAsync(string external_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "viber_service_msg/"+ (external_id==null? "" : System.Uri.EscapeDataString(external_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VSMAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Whatsapp account
		/// GetWAAccount whatsapp/{external_id}
		/// </summary>
		/// <param name="external_id">External id of the account you want to retrieve. In this case it will be the WhatsApp number.</param>
		/// <returns>OK.</returns>
		public async Task<WAAccountResponse> GetWAAccountAsync(string external_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "whatsapp/"+ (external_id==null? "" : System.Uri.EscapeDataString(external_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WAAccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Link application to an account
		/// LinkApplication {provider}/{external_id}/applications
		/// </summary>
		/// <param name="provider">Provider of the account you want to assign an application to</param>
		/// <param name="external_id">External id of the account you want to assign an application to. This is channel dependent. For Facebook it will be your Facebook Page ID, for Viber your Viber Service Message ID and for WhatsApp your WhatsApp number.</param>
		/// <param name="requestBody">Request body can contain any of the following. Please note, the only one application can be linked to the account.</param>
		/// <returns>OK.</returns>
		public async Task<AccountResponse> LinkApplicationAsync(AccountResponseProvider provider, string external_id, LinkApplicationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+provider+"/"+ (external_id==null? "" : System.Uri.EscapeDataString(external_id))+"/applications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccountResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unlink application from an account
		/// UnliWithoutApplicationnkApplication {provider}/{external_id}/applications/{application_id}
		/// </summary>
		/// <param name="provider">Provider of the account you want to unlink an application from</param>
		/// <param name="external_id">External id of the account you want to unlink an application from</param>
		/// <param name="application_id">Id of the application you want to unlink</param>
		public async Task UnliWithoutApplicationnkApplicationAsync(AccountResponseProvider provider, string external_id, string application_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+provider+"/"+ (external_id==null? "" : System.Uri.EscapeDataString(external_id))+"/applications/"+ (application_id==null? "" : System.Uri.EscapeDataString(application_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class GetAllAccountsReturn
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GetAllAccountResponse[] _embedded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GetAllAccountsReturn_links _links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_number")]
		public System.Nullable<System.Int32> Page_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
	}
	
	public class GetAllAccountsReturn_links
	{
		
		[System.Runtime.Serialization.DataMember(Name="first")]
		public GetAllAccountsReturn_linksFirst First { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last")]
		public GetAllAccountsReturn_linksLast Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next")]
		public GetAllAccountsReturn_linksNext Next { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public GetAllAccountsReturn_linksPrev Prev { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public GetAllAccountsReturn_linksSelf Self { get; set; }
	}
	
	public class GetAllAccountsReturn_linksFirst
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class GetAllAccountsReturn_linksLast
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class GetAllAccountsReturn_linksNext
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class GetAllAccountsReturn_linksPrev
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class GetAllAccountsReturn_linksSelf
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
	}
	
	public class CreateMessengerAccountPostBody
	{
		
		/// <summary>
		/// This is the Facebook Business Page token. You can obtain the token using one of the following methods:
		///
		///* Linking your Facebook Business Page to your account [with our Dashboard tool](https://dashboard.nexmo.com/messages/social-channels/facebook-connect)
		///* Requesting a Page Access Token using the steps in the [Facebook token reference](https://developers.facebook.com/docs/pages/access-tokens/)
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		/// <summary>
		/// Contains a list of application IDs which are linked to the account. <ul> <li>There is just one application allowed per an account.</li> <li>The application type must be type "messages".</li> </ul> For more information see [Application API spec](https://developer.nexmo.com/api/application.v2)
		/// Minimum items: 0
		/// Maximum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applications")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string[] Applications { get; set; }
		
		/// <summary>
		/// This is the unique identifier within the provider's domain. In this case it is the Page ID for your Facebook Page. Go to your Facebook Page, click "Settings", click "Messenger platform " scroll down to "Messenger link" to find your Page ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// Custom account name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class UpdateMessengerAccountPatchBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public string[] Applications { get; set; }
		
		/// <summary>
		/// The new account name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class UpdateMessengerAccountReturn
	{
		
		/// <summary>
		/// The provider access token
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="access_token")]
		public string Access_token { get; set; }
		
		/// <summary>
		/// The external api key for this account
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_key")]
		public string Api_key { get; set; }
		
		/// <summary>
		/// The array of associated application ids
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public string[] Applications { get; set; }
		
		/// <summary>
		/// The external identifier for this account. In this case it is the Facebook Page ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="external_id")]
		public string External_id { get; set; }
		
		/// <summary>
		/// The account name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The provider (will be `messenger`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
	}
	
	public class LinkApplicationPostBody
	{
		
		/// <summary>
		/// There is just one application allowed per an account. The application type must be type "messages". For more information please see [Application API Spec](https://developer.nexmo.com/api/application.v2)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="application")]
		public string Application { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
