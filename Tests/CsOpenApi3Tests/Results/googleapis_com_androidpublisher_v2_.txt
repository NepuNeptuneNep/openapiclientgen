//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Apk
	{
		
		/// <summary>
		/// Represents the binary payload of an APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binary")]
		public ApkBinary Binary { get; set; }
		
		/// <summary>
		/// The version code of the APK, as specified in the APK's manifest file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public System.Nullable<System.Int32> VersionCode { get; set; }
	}
	
	/// <summary>
	/// Represents the binary payload of an APK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApkBinary
	{
		
		/// <summary>
		/// A sha1 hash of the APK payload, encoded as a hex string and matching the output of the sha1sum command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1")]
		public string Sha1 { get; set; }
		
		/// <summary>
		/// A sha256 hash of the APK payload, encoded as a hex string and matching the output of the sha256sum command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApkListing
	{
		
		/// <summary>
		/// The language code, in BCP 47 format (eg "en-US").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Describe what's new in your APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentChanges")]
		public string RecentChanges { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApkListingsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "androidpublisher#apkListingsListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("androidpublisher#apkListingsListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "androidpublisher#apkListingsListResponse";
		
		[System.Runtime.Serialization.DataMember(Name="listings")]
		public ApkListing[] Listings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApksAddExternallyHostedRequest
	{
		
		/// <summary>
		/// Defines an APK available for this application that is hosted externally and not uploaded to Google Play. This function is only available to enterprises who are using Google Play for Work, and whos application is restricted to the enterprise private channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externallyHostedApk")]
		public ExternallyHostedApk ExternallyHostedApk { get; set; }
	}
	
	/// <summary>
	/// Defines an APK available for this application that is hosted externally and not uploaded to Google Play. This function is only available to enterprises who are using Google Play for Work, and whos application is restricted to the enterprise private channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternallyHostedApk
	{
		
		/// <summary>
		/// The application label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationLabel")]
		public string ApplicationLabel { get; set; }
		
		/// <summary>
		/// A certificate (or array of certificates if a certificate-chain is used) used to signed this APK, represented as a base64 encoded byte array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateBase64s")]
		public string[] CertificateBase64s { get; set; }
		
		/// <summary>
		/// The URL at which the APK is hosted. This must be an https URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externallyHostedUrl")]
		public string ExternallyHostedUrl { get; set; }
		
		/// <summary>
		/// The SHA1 checksum of this APK, represented as a base64 encoded byte array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSha1Base64")]
		public string FileSha1Base64 { get; set; }
		
		/// <summary>
		/// The SHA256 checksum of this APK, represented as a base64 encoded byte array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSha256Base64")]
		public string FileSha256Base64 { get; set; }
		
		/// <summary>
		/// The file size in bytes of this APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSize")]
		public string FileSize { get; set; }
		
		/// <summary>
		/// The icon image from the APK, as a base64 encoded byte array.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconBase64")]
		public string IconBase64 { get; set; }
		
		/// <summary>
		/// The maximum SDK supported by this APK (optional).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximumSdk")]
		public System.Nullable<System.Int32> MaximumSdk { get; set; }
		
		/// <summary>
		/// The minimum SDK targeted by this APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumSdk")]
		public System.Nullable<System.Int32> MinimumSdk { get; set; }
		
		/// <summary>
		/// The native code environments supported by this APK (optional).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nativeCodes")]
		public string[] NativeCodes { get; set; }
		
		/// <summary>
		/// The package name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// The features required by this APK (optional).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usesFeatures")]
		public string[] UsesFeatures { get; set; }
		
		/// <summary>
		/// The permissions requested by this APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usesPermissions")]
		public ExternallyHostedApkUsesPermission[] UsesPermissions { get; set; }
		
		/// <summary>
		/// The version code of this APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public System.Nullable<System.Int32> VersionCode { get; set; }
		
		/// <summary>
		/// The version name of this APK.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionName")]
		public string VersionName { get; set; }
	}
	
	/// <summary>
	/// A permission used by this APK.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternallyHostedApkUsesPermission
	{
		
		/// <summary>
		/// Optionally, the maximum SDK version for which the permission is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxSdkVersion")]
		public System.Nullable<System.Int32> MaxSdkVersion { get; set; }
		
		/// <summary>
		/// The name of the permission requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApksAddExternallyHostedResponse
	{
		
		/// <summary>
		/// Defines an APK available for this application that is hosted externally and not uploaded to Google Play. This function is only available to enterprises who are using Google Play for Work, and whos application is restricted to the enterprise private channel
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externallyHostedApk")]
		public ExternallyHostedApk ExternallyHostedApk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApksListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="apks")]
		public Apk[] Apks { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "androidpublisher#apksListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("androidpublisher#apksListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "androidpublisher#apksListResponse";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppDetails
	{
		
		/// <summary>
		/// The user-visible support email for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactEmail")]
		public string ContactEmail { get; set; }
		
		/// <summary>
		/// The user-visible support telephone number for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactPhone")]
		public string ContactPhone { get; set; }
		
		/// <summary>
		/// The user-visible website for this app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactWebsite")]
		public string ContactWebsite { get; set; }
		
		/// <summary>
		/// Default language code, in BCP 47 format (eg "en-US").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLanguage")]
		public string DefaultLanguage { get; set; }
	}
	
	/// <summary>
	/// Represents an edit of an app. An edit allows clients to make multiple changes before committing them in one operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppEdit
	{
		
		/// <summary>
		/// The time at which the edit will expire and will be no longer valid for use in any subsequent API calls (encoded as seconds since the Epoch).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryTimeSeconds")]
		public string ExpiryTimeSeconds { get; set; }
		
		/// <summary>
		/// The ID of the edit that can be used in subsequent API calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Bundle
	{
		
		/// <summary>
		/// A sha1 hash of the upload payload, encoded as a hex string and matching the output of the sha1sum command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1")]
		public string Sha1 { get; set; }
		
		/// <summary>
		/// A sha256 hash of the upload payload, encoded as a hex string and matching the output of the sha256sum command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
		
		/// <summary>
		/// The version code of the Android App Bundle. As specified in the Android App Bundle's base module APK manifest file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public System.Nullable<System.Int32> VersionCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BundlesListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="bundles")]
		public Bundle[] Bundles { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "androidpublisher#bundlesListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("androidpublisher#bundlesListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "androidpublisher#bundlesListResponse";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Comment
	{
		
		[System.Runtime.Serialization.DataMember(Name="developerComment")]
		public DeveloperComment DeveloperComment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userComment")]
		public UserComment UserComment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeveloperComment
	{
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public Timestamp LastModified { get; set; }
		
		/// <summary>
		/// The content of the comment, i.e. reply body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Timestamp
	{
		
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public string Seconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserComment
	{
		
		/// <summary>
		/// Integer Android SDK version of the user's device at the time the review was written, e.g. 23 is Marshmallow. May be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="androidOsVersion")]
		public System.Nullable<System.Int32> AndroidOsVersion { get; set; }
		
		/// <summary>
		/// Integer version code of the app as installed at the time the review was written. May be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appVersionCode")]
		public System.Nullable<System.Int32> AppVersionCode { get; set; }
		
		/// <summary>
		/// String version name of the app as installed at the time the review was written. May be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appVersionName")]
		public string AppVersionName { get; set; }
		
		/// <summary>
		/// Codename for the reviewer's device, e.g. klte, flounder. May be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="device")]
		public string Device { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceMetadata")]
		public DeviceMetadata DeviceMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public Timestamp LastModified { get; set; }
		
		/// <summary>
		/// Untranslated text of the review, in the case where the review has been translated. If the review has not been translated this is left blank.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalText")]
		public string OriginalText { get; set; }
		
		/// <summary>
		/// Language code for the reviewer. This is taken from the device settings so is not guaranteed to match the language the review is written in. May be absent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewerLanguage")]
		public string ReviewerLanguage { get; set; }
		
		/// <summary>
		/// The star rating associated with the review, from 1 to 5.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="starRating")]
		public System.Nullable<System.Int32> StarRating { get; set; }
		
		/// <summary>
		/// The content of the comment, i.e. review body. In some cases users have been able to write a review with separate title and body; in those cases the title and body are concatenated and separated by a tab character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Number of users who have given this review a thumbs down
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbsDownCount")]
		public System.Nullable<System.Int32> ThumbsDownCount { get; set; }
		
		/// <summary>
		/// Number of users who have given this review a thumbs up
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thumbsUpCount")]
		public System.Nullable<System.Int32> ThumbsUpCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceMetadata
	{
		
		/// <summary>
		/// Device CPU make e.g. "Qualcomm"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuMake")]
		public string CpuMake { get; set; }
		
		/// <summary>
		/// Device CPU model e.g. "MSM8974"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuModel")]
		public string CpuModel { get; set; }
		
		/// <summary>
		/// Device class (e.g. tablet)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceClass")]
		public string DeviceClass { get; set; }
		
		/// <summary>
		/// OpenGL version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glEsVersion")]
		public System.Nullable<System.Int32> GlEsVersion { get; set; }
		
		/// <summary>
		/// Device manufacturer (e.g. Motorola)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// Comma separated list of native platforms (e.g. "arm", "arm7")
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nativePlatform")]
		public string NativePlatform { get; set; }
		
		/// <summary>
		/// Device model name (e.g. Droid)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productName")]
		public string ProductName { get; set; }
		
		/// <summary>
		/// Device RAM in Megabytes e.g. "2048"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ramMb")]
		public System.Nullable<System.Int32> RamMb { get; set; }
		
		/// <summary>
		/// Screen density in DPI
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenDensityDpi")]
		public System.Nullable<System.Int32> ScreenDensityDpi { get; set; }
		
		/// <summary>
		/// Screen height in pixels
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenHeightPx")]
		public System.Nullable<System.Int32> ScreenHeightPx { get; set; }
		
		/// <summary>
		/// Screen width in pixels
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="screenWidthPx")]
		public System.Nullable<System.Int32> ScreenWidthPx { get; set; }
	}
	
	/// <summary>
	/// Represents a deobfuscation file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeobfuscationFile
	{
		
		/// <summary>
		/// The type of the deobfuscation file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symbolType")]
		public string SymbolType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeobfuscationFilesUploadResponse
	{
		
		/// <summary>
		/// Represents a deobfuscation file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deobfuscationFile")]
		public DeobfuscationFile DeobfuscationFile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExpansionFile
	{
		
		/// <summary>
		/// If set this field indicates that this APK has an Expansion File uploaded to it: this APK does not reference another APK's Expansion File. The field's value is the size of the uploaded Expansion File in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSize")]
		public string FileSize { get; set; }
		
		/// <summary>
		/// If set this APK's Expansion File references another APK's Expansion File. The file_size field will not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referencesVersion")]
		public System.Nullable<System.Int32> ReferencesVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExpansionFilesUploadResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="expansionFile")]
		public ExpansionFile ExpansionFile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Image
	{
		
		/// <summary>
		/// A unique id representing this image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A sha1 hash of the image that was uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha1")]
		public string Sha1 { get; set; }
		
		/// <summary>
		/// A sha256 hash of the image that was uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sha256")]
		public string Sha256 { get; set; }
		
		/// <summary>
		/// A URL that will serve a preview of the image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImagesDeleteAllResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public Image[] Deleted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImagesListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="images")]
		public Image[] Images { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImagesUploadResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="image")]
		public Image Image { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InAppProduct
	{
		
		/// <summary>
		/// The default language of the localized data, as defined by BCP 47. e.g. "en-US", "en-GB".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLanguage")]
		public string DefaultLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultPrice")]
		public Price DefaultPrice { get; set; }
		
		/// <summary>
		/// Grace period of the subscription, specified in ISO 8601 format. It will allow developers to give their subscribers a grace period when the payment for the new recurrence period is declined. Acceptable values = "P3D" (three days), "P7D" (seven days), "P14D" (fourteen days), and "P30D" (thirty days)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gracePeriod")]
		public string GracePeriod { get; set; }
		
		/// <summary>
		/// List of localized title and description data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listings")]
		public System.Collections.Generic.Dictionary<string, InAppProductListing> Listings { get; set; }
		
		/// <summary>
		/// The package name of the parent app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Prices per buyer region. None of these prices should be zero. In-app products can never be free.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prices")]
		public System.Collections.Generic.Dictionary<string, Price> Prices { get; set; }
		
		/// <summary>
		/// Purchase type enum value. Unmodifiable after creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseType")]
		public string PurchaseType { get; set; }
		
		/// <summary>
		/// The stock-keeping-unit (SKU) of the product, unique within an app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sku")]
		public string Sku { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Subscription period, specified in ISO 8601 format. Acceptable values are "P1W" (one week), "P1M" (one month), "P3M" (three months), "P6M" (six months), and "P1Y" (one year).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriptionPeriod")]
		public string SubscriptionPeriod { get; set; }
		
		/// <summary>
		/// Trial period, specified in ISO 8601 format. Acceptable values are anything between "P7D" (seven days) and "P999D" (999 days). Seasonal subscriptions cannot have a trial period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trialPeriod")]
		public string TrialPeriod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Price
	{
		
		/// <summary>
		/// 3 letter Currency code, as defined by ISO 4217.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The price in millionths of the currency base unit represented as a string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceMicros")]
		public string PriceMicros { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InAppProductListing
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InappproductsListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="inappproduct")]
		public InAppProduct[] Inappproduct { get; set; }
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "androidpublisher#inappproductsListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("androidpublisher#inappproductsListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "androidpublisher#inappproductsListResponse";
		
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="resultPerPage")]
		public System.Nullable<System.Int32> ResultPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TokenPagination
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousPageToken")]
		public string PreviousPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Listing
	{
		
		/// <summary>
		/// Full description of the app; this may be up to 4000 characters in length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullDescription")]
		public string FullDescription { get; set; }
		
		/// <summary>
		/// Language localization code (for example, "de-AT" for Austrian German).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		/// <summary>
		/// Short description of the app (previously known as promo text); this may be up to 80 characters in length.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortDescription")]
		public string ShortDescription { get; set; }
		
		/// <summary>
		/// App's localized title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// URL of a promotional YouTube video for the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="video")]
		public string Video { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListingsListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "androidpublisher#listingsListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("androidpublisher#listingsListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "androidpublisher#listingsListResponse";
		
		[System.Runtime.Serialization.DataMember(Name="listings")]
		public Listing[] Listings { get; set; }
	}
	
	/// <summary>
	/// A ProductPurchase resource indicates the status of a user's inapp product purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProductPurchase
	{
		
		/// <summary>
		/// The consumption state of the inapp product. Possible values are:  
		///- Yet to be consumed 
		///- Consumed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumptionState")]
		public System.Nullable<System.Int32> ConsumptionState { get; set; }
		
		/// <summary>
		/// A developer-specified string that contains supplemental information about an order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerPayload")]
		public string DeveloperPayload { get; set; }
		
		/// <summary>
		/// This kind represents an inappPurchase object in the androidpublisher service.
		/// </summary>
		[System.ComponentModel.DefaultValue("androidpublisher#productPurchase")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "androidpublisher#productPurchase";
		
		/// <summary>
		/// The order id associated with the purchase of the inapp product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// The purchase state of the order. Possible values are:  
		///- Purchased 
		///- Canceled 
		///- Pending
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseState")]
		public System.Nullable<System.Int32> PurchaseState { get; set; }
		
		/// <summary>
		/// The time the product was purchased, in milliseconds since the epoch (Jan 1, 1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseTimeMillis")]
		public string PurchaseTimeMillis { get; set; }
		
		/// <summary>
		/// The type of purchase of the inapp product. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are:  
		///- Test (i.e. purchased from a license testing account) 
		///- Promo (i.e. purchased using a promo code) 
		///- Rewarded (i.e. from watching a video ad instead of paying)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseType")]
		public System.Nullable<System.Int32> PurchaseType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Review
	{
		
		/// <summary>
		/// The name of the user who wrote the review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorName")]
		public string AuthorName { get; set; }
		
		/// <summary>
		/// A repeated field containing comments for the review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public Comment[] Comments { get; set; }
		
		/// <summary>
		/// Unique identifier for this review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewId")]
		public string ReviewId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReviewReplyResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="lastEdited")]
		public Timestamp LastEdited { get; set; }
		
		/// <summary>
		/// The reply text that was applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyText")]
		public string ReplyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReviewsListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reviews")]
		public Review[] Reviews { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReviewsReplyRequest
	{
		
		/// <summary>
		/// The text to set as the reply. Replies of more than approximately 350 characters will be rejected. HTML tags will be stripped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replyText")]
		public string ReplyText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReviewsReplyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ReviewReplyResult Result { get; set; }
	}
	
	/// <summary>
	/// Information provided by the user when they complete the subscription cancellation flow (cancellation reason survey).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionCancelSurveyResult
	{
		
		/// <summary>
		/// The cancellation reason the user chose in the survey. Possible values are:  
		///- Other 
		///- I don't use this service enough 
		///- Technical issues 
		///- Cost-related reasons 
		///- I found a better app
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelSurveyReason")]
		public System.Nullable<System.Int32> CancelSurveyReason { get; set; }
		
		/// <summary>
		/// The customized input cancel reason from the user. Only present when cancelReason is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userInputCancelReason")]
		public string UserInputCancelReason { get; set; }
	}
	
	/// <summary>
	/// A SubscriptionDeferralInfo contains the data needed to defer a subscription purchase to a future expiry time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionDeferralInfo
	{
		
		/// <summary>
		/// The desired next expiry time to assign to the subscription, in milliseconds since the Epoch. The given time must be later/greater than the current expiry time for the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desiredExpiryTimeMillis")]
		public string DesiredExpiryTimeMillis { get; set; }
		
		/// <summary>
		/// The expected expiry time for the subscription. If the current expiry time for the subscription is not the value specified here, the deferral will not occur.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expectedExpiryTimeMillis")]
		public string ExpectedExpiryTimeMillis { get; set; }
	}
	
	/// <summary>
	/// Contains the price change information for a subscription that can be used to control the user journey for the price change in the app. This can be in the form of seeking confirmation from the user or tailoring the experience for a successful conversion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPriceChange
	{
		
		[System.Runtime.Serialization.DataMember(Name="newPrice")]
		public Price NewPrice { get; set; }
		
		/// <summary>
		/// The current state of the price change. Possible values are:  
		///- Outstanding: State for a pending price change waiting for the user to agree. In this state, you can optionally seek confirmation from the user using the In-App API. 
		///- Accepted: State for an accepted price change that the subscription will renew with unless it's canceled. The price change takes effect on a future date when the subscription renews. Note that the change might not occur when the subscription is renewed next.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<System.Int32> State { get; set; }
	}
	
	/// <summary>
	/// A SubscriptionPurchase resource indicates the status of a user's subscription purchase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPurchase
	{
		
		/// <summary>
		/// Whether the subscription will automatically be renewed when it reaches its current expiry time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRenewing")]
		public System.Nullable<System.Boolean> AutoRenewing { get; set; }
		
		/// <summary>
		/// The reason why a subscription was canceled or is not auto-renewing. Possible values are:  
		///- User canceled the subscription 
		///- Subscription was canceled by the system, for example because of a billing problem 
		///- Subscription was replaced with a new subscription 
		///- Subscription was canceled by the developer
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelReason")]
		public System.Nullable<System.Int32> CancelReason { get; set; }
		
		/// <summary>
		/// Information provided by the user when they complete the subscription cancellation flow (cancellation reason survey).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelSurveyResult")]
		public SubscriptionCancelSurveyResult CancelSurveyResult { get; set; }
		
		/// <summary>
		/// ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// A developer-specified string that contains supplemental information about an order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerPayload")]
		public string DeveloperPayload { get; set; }
		
		/// <summary>
		/// The email address of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="emailAddress")]
		public string EmailAddress { get; set; }
		
		/// <summary>
		/// Time at which the subscription will expire, in milliseconds since the Epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryTimeMillis")]
		public string ExpiryTimeMillis { get; set; }
		
		/// <summary>
		/// The family name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		/// <summary>
		/// The given name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="givenName")]
		public string GivenName { get; set; }
		
		/// <summary>
		/// This kind represents a subscriptionPurchase object in the androidpublisher service.
		/// </summary>
		[System.ComponentModel.DefaultValue("androidpublisher#subscriptionPurchase")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "androidpublisher#subscriptionPurchase";
		
		/// <summary>
		/// The purchase token of the originating purchase if this subscription is one of the following:  
		///- Re-signup of a canceled but non-lapsed subscription 
		///- Upgrade/downgrade from a previous subscription  For example, suppose a user originally signs up and you receive purchase token X, then the user cancels and goes through the resignup flow (before their subscription lapses) and you receive purchase token Y, and finally the user upgrades their subscription and you receive purchase token Z. If you call this API with purchase token Z, this field will be set to Y. If you call this API with purchase token Y, this field will be set to X. If you call this API with purchase token X, this field will not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedPurchaseToken")]
		public string LinkedPurchaseToken { get; set; }
		
		/// <summary>
		/// The order id of the latest recurring order associated with the purchase of the subscription.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orderId")]
		public string OrderId { get; set; }
		
		/// <summary>
		/// The payment state of the subscription. Possible values are:  
		///- Payment pending 
		///- Payment received 
		///- Free trial 
		///- Pending deferred upgrade/downgrade
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentState")]
		public System.Nullable<System.Int32> PaymentState { get; set; }
		
		/// <summary>
		/// Price of the subscription, not including tax. Price is expressed in micro-units, where 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is €1.99, price_amount_micros is 1990000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceAmountMicros")]
		public string PriceAmountMicros { get; set; }
		
		/// <summary>
		/// Contains the price change information for a subscription that can be used to control the user journey for the price change in the app. This can be in the form of seeking confirmation from the user or tailoring the experience for a successful conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceChange")]
		public SubscriptionPriceChange PriceChange { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code for the subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is "GBP".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priceCurrencyCode")]
		public string PriceCurrencyCode { get; set; }
		
		/// <summary>
		/// The Google profile id of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileId")]
		public string ProfileId { get; set; }
		
		/// <summary>
		/// The profile name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// The type of purchase of the subscription. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are:  
		///- Test (i.e. purchased from a license testing account) 
		///- Promo (i.e. purchased using a promo code)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseType")]
		public System.Nullable<System.Int32> PurchaseType { get; set; }
		
		/// <summary>
		/// Time at which the subscription was granted, in milliseconds since the Epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTimeMillis")]
		public string StartTimeMillis { get; set; }
		
		/// <summary>
		/// The time at which the subscription was canceled by the user, in milliseconds since the epoch. Only present if cancelReason is 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userCancellationTimeMillis")]
		public string UserCancellationTimeMillis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPurchasesDeferRequest
	{
		
		/// <summary>
		/// A SubscriptionDeferralInfo contains the data needed to defer a subscription purchase to a future expiry time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deferralInfo")]
		public SubscriptionDeferralInfo DeferralInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriptionPurchasesDeferResponse
	{
		
		/// <summary>
		/// The new expiry time for the subscription in milliseconds since the Epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newExpiryTimeMillis")]
		public string NewExpiryTimeMillis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Testers
	{
		
		/// <summary>
		/// A list of all Google Groups, as email addresses, that define testers for this track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleGroups")]
		public string[] GoogleGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Track
	{
		
		/// <summary>
		/// Identifier for this track.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="track")]
		public string Track1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userFraction")]
		public System.Nullable<System.Double> UserFraction { get; set; }
		
		/// <summary>
		/// Version codes to make active on this track. Note that this list should contain all versions you wish to be active, including those you wish to retain from previous releases.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCodes")]
		public int[] VersionCodes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TracksListResponse
	{
		
		/// <summary>
		/// Identifies what kind of resource this is. Value: the fixed string "androidpublisher#tracksListResponse".
		/// </summary>
		[System.ComponentModel.DefaultValue("androidpublisher#tracksListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "androidpublisher#tracksListResponse";
		
		[System.Runtime.Serialization.DataMember(Name="tracks")]
		public Track[] Tracks { get; set; }
	}
	
	/// <summary>
	/// A VoidedPurchase resource indicates a purchase that was either canceled/refunded/charged-back.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VoidedPurchase
	{
		
		/// <summary>
		/// This kind represents a voided purchase object in the androidpublisher service.
		/// </summary>
		[System.ComponentModel.DefaultValue("androidpublisher#voidedPurchase")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "androidpublisher#voidedPurchase";
		
		/// <summary>
		/// The time at which the purchase was made, in milliseconds since the epoch (Jan 1, 1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseTimeMillis")]
		public string PurchaseTimeMillis { get; set; }
		
		/// <summary>
		/// The token which uniquely identifies a one-time purchase or subscription. To uniquely identify subscription renewals use order_id (available starting from version 3 of the API).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseToken")]
		public string PurchaseToken { get; set; }
		
		/// <summary>
		/// The time at which the purchase was canceled/refunded/charged-back, in milliseconds since the epoch (Jan 1, 1970).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voidedTimeMillis")]
		public string VoidedTimeMillis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VoidedPurchasesListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="pageInfo")]
		public PageInfo PageInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenPagination")]
		public TokenPagination TokenPagination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voidedPurchases")]
		public VoidedPurchase[] VoidedPurchases { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a new edit for an app, populated with the app's current state.
		/// Androidpublisher_edits_insert {packageName}/edits
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_insertAsync(string packageName, AppEdit requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an edit for an app. Creating a new edit will automatically delete any of your previous edits so this method need only be called if you want to preemptively abandon an edit.
		/// Androidpublisher_edits_delete {packageName}/edits/{editId}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_deleteAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the edit specified. Calls will fail if the edit is no long active (e.g. has been deleted, superseded or expired).
		/// Androidpublisher_edits_get {packageName}/edits/{editId}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_getAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Androidpublisher_edits_apks_list {packageName}/edits/{editId}/apks
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_apks_listAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Androidpublisher_edits_apks_upload {packageName}/edits/{editId}/apks
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_apks_uploadAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to enterprises using Google Play for Work whose application is configured to restrict distribution to the enterprise domain.
		/// Androidpublisher_edits_apks_addexternallyhosted {packageName}/edits/{editId}/apks/externallyHosted
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_apks_addexternallyhostedAsync(string packageName, string editId, ApksAddExternallyHostedRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/externallyHosted";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads the deobfuscation file of the specified APK. If a deobfuscation or symbolication file already exists, it will be replaced. See https://developer.android.com/studio/build/shrink-code to learn more about deobfuscation files.
		/// Androidpublisher_edits_deobfuscationfiles_upload {packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}
		/// </summary>
		/// <param name="packageName">Unique identifier of the Android app for which the deobfuscation files are being uploaded; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="apkVersionCode">The version code of the APK whose deobfuscation file is being uploaded.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_deobfuscationfiles_uploadAsync(string packageName, string editId, int apkVersionCode, Androidpublisher_edits_deobfuscationfiles_uploadDeobfuscationFileType deobfuscationFileType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/deobfuscationFiles/"+deobfuscationFileType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the Expansion File configuration for the APK specified.
		/// Androidpublisher_edits_expansionfiles_get {packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="apkVersionCode">The version code of the APK whose Expansion File configuration is being read or modified.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_expansionfiles_getAsync(string packageName, string editId, int apkVersionCode, Androidpublisher_edits_expansionfiles_getExpansionFileType expansionFileType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/expansionFiles/"+expansionFileType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method. This method supports patch semantics.
		/// Androidpublisher_edits_expansionfiles_patch {packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="apkVersionCode">The version code of the APK whose Expansion File configuration is being read or modified.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_expansionfiles_patchAsync(string packageName, string editId, int apkVersionCode, Androidpublisher_edits_expansionfiles_getExpansionFileType expansionFileType, ExpansionFile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/expansionFiles/"+expansionFileType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads and attaches a new Expansion File to the APK specified.
		/// Androidpublisher_edits_expansionfiles_upload {packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="apkVersionCode">The version code of the APK whose Expansion File configuration is being read or modified.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_expansionfiles_uploadAsync(string packageName, string editId, int apkVersionCode, Androidpublisher_edits_expansionfiles_getExpansionFileType expansionFileType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/expansionFiles/"+expansionFileType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method.
		/// Androidpublisher_edits_expansionfiles_update {packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="apkVersionCode">The version code of the APK whose Expansion File configuration is being read or modified.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_expansionfiles_updateAsync(string packageName, string editId, int apkVersionCode, Androidpublisher_edits_expansionfiles_getExpansionFileType expansionFileType, ExpansionFile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/expansionFiles/"+expansionFileType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes all the APK-specific localized listings for a specified APK.
		/// Androidpublisher_edits_apklistings_deleteall {packageName}/edits/{editId}/apks/{apkVersionCode}/listings
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="apkVersionCode">The APK version code whose APK-specific listings should be read or modified.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_apklistings_deleteallAsync(string packageName, string editId, int apkVersionCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/listings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the APK-specific localized listings for a specified APK.
		/// Androidpublisher_edits_apklistings_list {packageName}/edits/{editId}/apks/{apkVersionCode}/listings
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="apkVersionCode">The APK version code whose APK-specific listings should be read or modified.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_apklistings_listAsync(string packageName, string editId, int apkVersionCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/listings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the APK-specific localized listing for a specified APK and language code.
		/// Androidpublisher_edits_apklistings_delete {packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="apkVersionCode">The APK version code whose APK-specific listings should be read or modified.</param>
		/// <param name="language">The language code (a BCP-47 language tag) of the APK-specific localized listing to read or modify. For example, to select Austrian German, pass "de-AT".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_apklistings_deleteAsync(string packageName, string editId, int apkVersionCode, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the APK-specific localized listing for a specified APK and language code.
		/// Androidpublisher_edits_apklistings_get {packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="apkVersionCode">The APK version code whose APK-specific listings should be read or modified.</param>
		/// <param name="language">The language code (a BCP-47 language tag) of the APK-specific localized listing to read or modify. For example, to select Austrian German, pass "de-AT".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_apklistings_getAsync(string packageName, string editId, int apkVersionCode, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates or creates the APK-specific localized listing for a specified APK and language code. This method supports patch semantics.
		/// Androidpublisher_edits_apklistings_patch {packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="apkVersionCode">The APK version code whose APK-specific listings should be read or modified.</param>
		/// <param name="language">The language code (a BCP-47 language tag) of the APK-specific localized listing to read or modify. For example, to select Austrian German, pass "de-AT".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_apklistings_patchAsync(string packageName, string editId, int apkVersionCode, string language, ApkListing requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates or creates the APK-specific localized listing for a specified APK and language code.
		/// Androidpublisher_edits_apklistings_update {packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="apkVersionCode">The APK version code whose APK-specific listings should be read or modified.</param>
		/// <param name="language">The language code (a BCP-47 language tag) of the APK-specific localized listing to read or modify. For example, to select Austrian German, pass "de-AT".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_apklistings_updateAsync(string packageName, string editId, int apkVersionCode, string language, ApkListing requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/apks/"+apkVersionCode+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Androidpublisher_edits_bundles_list {packageName}/edits/{editId}/bundles
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_bundles_listAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/bundles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See: https://developers.google.com/api-client-library/java/google-api-java-client/errors for an example in java.
		/// Androidpublisher_edits_bundles_upload {packageName}/edits/{editId}/bundles
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="ackBundleInstallationWarning">Must be set to true if the bundle installation may trigger a warning on user devices (for example, if installation size may be over a threshold, typically 100 MB).</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_bundles_uploadAsync(string packageName, string editId, bool ackBundleInstallationWarning, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/bundles&ackBundleInstallationWarning="+ackBundleInstallationWarning;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches app details for this edit. This includes the default language and developer support contact information.
		/// Androidpublisher_edits_details_get {packageName}/edits/{editId}/details
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_details_getAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates app details for this edit. This method supports patch semantics.
		/// Androidpublisher_edits_details_patch {packageName}/edits/{editId}/details
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_details_patchAsync(string packageName, string editId, AppDetails requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates app details for this edit.
		/// Androidpublisher_edits_details_update {packageName}/edits/{editId}/details
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_details_updateAsync(string packageName, string editId, AppDetails requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes all localized listings from an edit.
		/// Androidpublisher_edits_listings_deleteall {packageName}/edits/{editId}/listings
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_listings_deleteallAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all of the localized store listings attached to this edit.
		/// Androidpublisher_edits_listings_list {packageName}/edits/{editId}/listings
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_listings_listAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified localized store listing from an edit.
		/// Androidpublisher_edits_listings_delete {packageName}/edits/{editId}/listings/{language}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="language">The language code (a BCP-47 language tag) of the localized listing to read or modify. For example, to select Austrian German, pass "de-AT".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_listings_deleteAsync(string packageName, string editId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches information about a localized store listing.
		/// Androidpublisher_edits_listings_get {packageName}/edits/{editId}/listings/{language}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="language">The language code (a BCP-47 language tag) of the localized listing to read or modify. For example, to select Austrian German, pass "de-AT".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_listings_getAsync(string packageName, string editId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a localized store listing. This method supports patch semantics.
		/// Androidpublisher_edits_listings_patch {packageName}/edits/{editId}/listings/{language}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="language">The language code (a BCP-47 language tag) of the localized listing to read or modify. For example, to select Austrian German, pass "de-AT".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_listings_patchAsync(string packageName, string editId, string language, Listing requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a localized store listing.
		/// Androidpublisher_edits_listings_update {packageName}/edits/{editId}/listings/{language}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="language">The language code (a BCP-47 language tag) of the localized listing to read or modify. For example, to select Austrian German, pass "de-AT".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_listings_updateAsync(string packageName, string editId, string language, Listing requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes all images for the specified language and image type.
		/// Androidpublisher_edits_images_deleteall {packageName}/edits/{editId}/listings/{language}/{imageType}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="language">The language code (a BCP-47 language tag) of the localized listing whose images are to read or modified. For example, to select Austrian German, pass "de-AT".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_images_deleteallAsync(string packageName, string editId, string language, Androidpublisher_edits_images_deleteallImageType imageType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language))+"/"+imageType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all images for the specified language and image type.
		/// Androidpublisher_edits_images_list {packageName}/edits/{editId}/listings/{language}/{imageType}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="language">The language code (a BCP-47 language tag) of the localized listing whose images are to read or modified. For example, to select Austrian German, pass "de-AT".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_images_listAsync(string packageName, string editId, string language, Androidpublisher_edits_images_deleteallImageType imageType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language))+"/"+imageType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads a new image and adds it to the list of images for the specified language and image type.
		/// Androidpublisher_edits_images_upload {packageName}/edits/{editId}/listings/{language}/{imageType}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="language">The language code (a BCP-47 language tag) of the localized listing whose images are to read or modified. For example, to select Austrian German, pass "de-AT".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_images_uploadAsync(string packageName, string editId, string language, Androidpublisher_edits_images_deleteallImageType imageType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language))+"/"+imageType;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the image (specified by id) from the edit.
		/// Androidpublisher_edits_images_delete {packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="language">The language code (a BCP-47 language tag) of the localized listing whose images are to read or modified. For example, to select Austrian German, pass "de-AT".</param>
		/// <param name="imageId">Unique identifier an image within the set of images attached to this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_images_deleteAsync(string packageName, string editId, string language, Androidpublisher_edits_images_deleteallImageType imageType, string imageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/listings/"+ (language==null? "" : System.Uri.EscapeDataString(language))+"/"+imageType+"/"+ (imageId==null? "" : System.Uri.EscapeDataString(imageId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Androidpublisher_edits_testers_get {packageName}/edits/{editId}/testers/{track}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="track">The track to read or modify.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_testers_getAsync(string packageName, string editId, string track, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/testers/"+ (track==null? "" : System.Uri.EscapeDataString(track));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Androidpublisher_edits_testers_patch {packageName}/edits/{editId}/testers/{track}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="track">The track to read or modify.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_testers_patchAsync(string packageName, string editId, string track, Testers requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/testers/"+ (track==null? "" : System.Uri.EscapeDataString(track));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Androidpublisher_edits_testers_update {packageName}/edits/{editId}/testers/{track}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="track">The track to read or modify.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_testers_updateAsync(string packageName, string editId, string track, Testers requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/testers/"+ (track==null? "" : System.Uri.EscapeDataString(track));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all the track configurations for this edit.
		/// Androidpublisher_edits_tracks_list {packageName}/edits/{editId}/tracks
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_tracks_listAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/tracks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the track configuration for the specified track type. Includes the APK version codes that are in this track.
		/// Androidpublisher_edits_tracks_get {packageName}/edits/{editId}/tracks/{track}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="track">The track to read or modify.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_tracks_getAsync(string packageName, string editId, string track, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/tracks/"+ (track==null? "" : System.Uri.EscapeDataString(track));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the track configuration for the specified track type. This method supports patch semantics.
		/// Androidpublisher_edits_tracks_patch {packageName}/edits/{editId}/tracks/{track}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="track">The track to read or modify.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_tracks_patchAsync(string packageName, string editId, string track, Track requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/tracks/"+ (track==null? "" : System.Uri.EscapeDataString(track));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the track configuration for the specified track type.
		/// Androidpublisher_edits_tracks_update {packageName}/edits/{editId}/tracks/{track}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <param name="track">The track to read or modify.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_tracks_updateAsync(string packageName, string editId, string track, Track requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+"/tracks/"+ (track==null? "" : System.Uri.EscapeDataString(track));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Commits/applies the changes made in this edit back to the app.
		/// Androidpublisher_edits_commit {packageName}/edits/{editId}:commit
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_commitAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+":commit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks that the edit can be successfully committed. The edit's changes are not applied to the live app.
		/// Androidpublisher_edits_validate {packageName}/edits/{editId}:validate
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app that is being updated; for example, "com.spiffygame".</param>
		/// <param name="editId">Unique identifier for this edit.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_edits_validateAsync(string packageName, string editId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/edits/"+ (editId==null? "" : System.Uri.EscapeDataString(editId))+":validate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all the in-app products for an Android app, both subscriptions and managed in-app products..
		/// Androidpublisher_inappproducts_list {packageName}/inappproducts
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app with in-app products; for example, "com.spiffygame".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_inappproducts_listAsync(string packageName, int maxResults, int startIndex, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts&maxResults="+maxResults+"&startIndex="+startIndex+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new in-app product for an app.
		/// Androidpublisher_inappproducts_insert {packageName}/inappproducts
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app; for example, "com.spiffygame".</param>
		/// <param name="autoConvertMissingPrices">If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on the default price. Defaults to false.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_inappproducts_insertAsync(string packageName, bool autoConvertMissingPrices, InAppProduct requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts&autoConvertMissingPrices="+autoConvertMissingPrices;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an in-app product for an app.
		/// Androidpublisher_inappproducts_delete {packageName}/inappproducts/{sku}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app with the in-app product; for example, "com.spiffygame".</param>
		/// <param name="sku">Unique identifier for the in-app product.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_inappproducts_deleteAsync(string packageName, string sku, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts/"+ (sku==null? "" : System.Uri.EscapeDataString(sku));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the in-app product specified.
		/// Androidpublisher_inappproducts_get {packageName}/inappproducts/{sku}
		/// </summary>
		/// <param name="sku">Unique identifier for the in-app product.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_inappproducts_getAsync(string packageName, string sku, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts/"+ (sku==null? "" : System.Uri.EscapeDataString(sku));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the details of an in-app product. This method supports patch semantics.
		/// Androidpublisher_inappproducts_patch {packageName}/inappproducts/{sku}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app with the in-app product; for example, "com.spiffygame".</param>
		/// <param name="sku">Unique identifier for the in-app product.</param>
		/// <param name="autoConvertMissingPrices">If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on the default price. Defaults to false.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_inappproducts_patchAsync(string packageName, string sku, bool autoConvertMissingPrices, InAppProduct requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts/"+ (sku==null? "" : System.Uri.EscapeDataString(sku))+"&autoConvertMissingPrices="+autoConvertMissingPrices;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the details of an in-app product.
		/// Androidpublisher_inappproducts_update {packageName}/inappproducts/{sku}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app with the in-app product; for example, "com.spiffygame".</param>
		/// <param name="sku">Unique identifier for the in-app product.</param>
		/// <param name="autoConvertMissingPrices">If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on the default price. Defaults to false.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_inappproducts_updateAsync(string packageName, string sku, bool autoConvertMissingPrices, InAppProduct requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/inappproducts/"+ (sku==null? "" : System.Uri.EscapeDataString(sku))+"&autoConvertMissingPrices="+autoConvertMissingPrices;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refund a user's subscription or in-app purchase order.
		/// Androidpublisher_orders_refund {packageName}/orders/{orderId}:refund
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription or in-app item was purchased (for example, 'com.some.thing').</param>
		/// <param name="orderId">The order ID provided to the user when the subscription or in-app order was purchased.</param>
		/// <param name="revoke">Whether to revoke the purchased item. If set to true, access to the subscription or in-app item will be terminated immediately. If the item is a recurring subscription, all future payments will also be terminated. Consumed in-app items need to be handled by developer's app. (optional)</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_orders_refundAsync(string packageName, string orderId, bool revoke, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/orders/"+ (orderId==null? "" : System.Uri.EscapeDataString(orderId))+":refund&revoke="+revoke;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks the purchase and consumption status of an inapp item.
		/// Androidpublisher_purchases_products_get {packageName}/purchases/products/{productId}/tokens/{token}
		/// </summary>
		/// <param name="packageName">The package name of the application the inapp product was sold in (for example, 'com.some.thing').</param>
		/// <param name="productId">The inapp product SKU (for example, 'com.some.thing.inapp1').</param>
		/// <param name="token">The token provided to the user's device when the inapp product was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_products_getAsync(string packageName, string productId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Checks whether a user's subscription purchase is valid and returns its expiry time.
		/// Androidpublisher_purchases_subscriptions_get {packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="subscriptionId">The purchased subscription ID (for example, 'monthly001').</param>
		/// <param name="token">The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_subscriptions_getAsync(string packageName, string subscriptionId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a user's subscription purchase. The subscription remains valid until its expiration time.
		/// Androidpublisher_purchases_subscriptions_cancel {packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="subscriptionId">The purchased subscription ID (for example, 'monthly001').</param>
		/// <param name="token">The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_subscriptions_cancelAsync(string packageName, string subscriptionId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Defers a user's subscription purchase until a specified future expiration time.
		/// Androidpublisher_purchases_subscriptions_defer {packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="subscriptionId">The purchased subscription ID (for example, 'monthly001').</param>
		/// <param name="token">The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_subscriptions_deferAsync(string packageName, string subscriptionId, string token, SubscriptionPurchasesDeferRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token))+":defer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refunds a user's subscription purchase, but the subscription remains valid until its expiration time and it will continue to recur.
		/// Androidpublisher_purchases_subscriptions_refund {packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="subscriptionId">The purchased subscription ID (for example, 'monthly001').</param>
		/// <param name="token">The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_subscriptions_refundAsync(string packageName, string subscriptionId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token))+":refund";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Refunds and immediately revokes a user's subscription purchase. Access to the subscription will be terminated immediately and it will stop recurring.
		/// Androidpublisher_purchases_subscriptions_revoke {packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke
		/// </summary>
		/// <param name="packageName">The package name of the application for which this subscription was purchased (for example, 'com.some.thing').</param>
		/// <param name="subscriptionId">The purchased subscription ID (for example, 'monthly001').</param>
		/// <param name="token">The token provided to the user's device when the subscription was purchased.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_subscriptions_revokeAsync(string packageName, string subscriptionId, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/tokens/"+ (token==null? "" : System.Uri.EscapeDataString(token))+":revoke";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the purchases that were canceled, refunded or charged-back.
		/// Androidpublisher_purchases_voidedpurchases_list {packageName}/purchases/voidedpurchases
		/// </summary>
		/// <param name="packageName">The package name of the application for which voided purchases need to be returned (for example, 'com.some.thing').</param>
		/// <param name="endTime">The time, in milliseconds since the Epoch, of the newest voided purchase that you want to see in the response. The value of this parameter cannot be greater than the current time and is ignored if a pagination token is set. Default value is current time. Note: This filter is applied on the time at which the record is seen as voided by our systems and not the actual voided time returned in the response.</param>
		/// <param name="startTime">The time, in milliseconds since the Epoch, of the oldest voided purchase that you want to see in the response. The value of this parameter cannot be older than 30 days and is ignored if a pagination token is set. Default value is current time minus 30 days. Note: This filter is applied on the time at which the record is seen as voided by our systems and not the actual voided time returned in the response.</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_purchases_voidedpurchases_listAsync(string packageName, string endTime, int maxResults, int startIndex, string startTime, string token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/purchases/voidedpurchases&endTime=" + (endTime==null? "" : System.Uri.EscapeDataString(endTime))+"&maxResults="+maxResults+"&startIndex="+startIndex+"&startTime=" + (startTime==null? "" : System.Uri.EscapeDataString(startTime))+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of reviews. Only reviews from last week will be returned.
		/// Androidpublisher_reviews_list {packageName}/reviews
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app for which we want reviews; for example, "com.spiffygame".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_reviews_listAsync(string packageName, int maxResults, int startIndex, string token, string translationLanguage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/reviews&maxResults="+maxResults+"&startIndex="+startIndex+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&translationLanguage=" + (translationLanguage==null? "" : System.Uri.EscapeDataString(translationLanguage));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a single review.
		/// Androidpublisher_reviews_get {packageName}/reviews/{reviewId}
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app for which we want reviews; for example, "com.spiffygame".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_reviews_getAsync(string packageName, string reviewId, string translationLanguage, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/reviews/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId))+"&translationLanguage=" + (translationLanguage==null? "" : System.Uri.EscapeDataString(translationLanguage));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reply to a single review, or update an existing reply.
		/// Androidpublisher_reviews_reply {packageName}/reviews/{reviewId}:reply
		/// </summary>
		/// <param name="packageName">Unique identifier for the Android app for which we want reviews; for example, "com.spiffygame".</param>
		/// <returns>Successful response</returns>
		public async Task Androidpublisher_reviews_replyAsync(string packageName, string reviewId, ReviewsReplyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+"/reviews/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId))+":reply";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Androidpublisher_edits_deobfuscationfiles_uploadDeobfuscationFileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nativeCode = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		proguard = 1,
	}
	
	public enum Androidpublisher_edits_expansionfiles_getExpansionFileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		main = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		patch = 1,
	}
	
	public enum Androidpublisher_edits_images_deleteallImageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		featureGraphic = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		icon = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		phoneScreenshots = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		promoGraphic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sevenInchScreenshots = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tenInchScreenshots = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tvBanner = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tvScreenshots = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wearScreenshots = 8,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
