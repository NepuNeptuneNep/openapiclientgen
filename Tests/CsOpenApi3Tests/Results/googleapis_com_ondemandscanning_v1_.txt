//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An alias to a repo revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AliasContext
	{
		
		/// <summary>
		/// The alias kind.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<AliasContextKind> Kind { get; set; }
		
		/// <summary>
		/// The alias name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AliasContextKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KIND_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOVABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 3,
	}
	
	/// <summary>
	/// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalysisCompleted
	{
		
		[System.Runtime.Serialization.DataMember(Name="analysisType")]
		public string[] AnalysisType { get; set; }
	}
	
	/// <summary>
	/// AnalyzePackagesMetadata contains metadata for an active scan of a container image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzePackagesMetadata
	{
		
		/// <summary>
		/// When the scan was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource URI of the container image being scanned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
	}
	
	/// <summary>
	/// AnalyzePackagesMetadata contains metadata for an active scan of a container image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzePackagesMetadataV1
	{
		
		/// <summary>
		/// When the scan was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource URI of the container image being scanned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
	}
	
	/// <summary>
	/// AnalyzePackagesRequest is the request to analyze a list of packages and create Vulnerability Occurrences for it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzePackagesRequestV1
	{
		
		/// <summary>
		/// [DEPRECATED] Whether to include OSV data in the scan. For backwards compatibility reasons, this field can be neither removed nor renamed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeOsvData")]
		public System.Nullable<System.Boolean> IncludeOsvData { get; set; }
		
		/// <summary>
		/// The packages to analyze.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packages")]
		public PackageData[] Packages { get; set; }
		
		/// <summary>
		/// Required. The resource URI of the container image being scanned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageData
	{
		
		/// <summary>
		/// The architecture of the package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public string Architecture { get; set; }
		
		/// <summary>
		/// A bundle containing the binary and source information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="binarySourceInfo")]
		public BinarySourceInfo[] BinarySourceInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="binaryVersion")]
		public PackageVersion BinaryVersion { get; set; }
		
		/// <summary>
		/// The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability may manifest. Examples include distro or storage location for vulnerable jar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpeUri")]
		public string CpeUri { get; set; }
		
		/// <summary>
		/// The dependency chain between this package and the user's artifact. List in order from the customer's package under review first, to the current package last. Inclusive of the original package and the current package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dependencyChain")]
		public LanguagePackageDependency[] DependencyChain { get; set; }
		
		/// <summary>
		/// The path to the jar file / go binary file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileLocation")]
		public FileLocation[] FileLocation { get; set; }
		
		/// <summary>
		/// HashDigest stores the SHA512 hash digest of the jar file if the package is of type Maven. This field will be unset for non Maven packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashDigest")]
		public string HashDigest { get; set; }
		
		/// <summary>
		/// The list of licenses found that are related to a given package. Note that licenses may also be stored on the BinarySourceInfo. If there is no BinarySourceInfo (because there's no concept of source vs binary), then it will be stored here, while if there are BinarySourceInfos, it will be stored there, as one source can have multiple binaries with different licenses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public string[] Licenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maintainer")]
		public Maintainer Maintainer { get; set; }
		
		/// <summary>
		/// The OS affected by a vulnerability Used to generate the cpe_uri for OS packages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="os")]
		public string Os { get; set; }
		
		/// <summary>
		/// The version of the OS Used to generate the cpe_uri for OS packages
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
		
		/// <summary>
		/// The package being analysed for vulnerabilities
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		/// <summary>
		/// The type of package: os, maven, go, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageType")]
		public System.Nullable<PackageDataPackageType> PackageType { get; set; }
		
		/// <summary>
		/// CVEs that this package is no longer vulnerable to go/drydock-dd-custom-binary-scanning
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patchedCve")]
		public string[] PatchedCve { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public PackageVersion SourceVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unused")]
		public string Unused { get; set; }
		
		/// <summary>
		/// The version of the package being analysed
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BinarySourceInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="binaryVersion")]
		public PackageVersion BinaryVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public PackageVersion SourceVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageVersion
	{
		
		/// <summary>
		/// The licenses associated with this package. Note that this has to go on the PackageVersion level, because we can have cases with images with the same source having different licences. E.g. in Alpine, musl and musl-utils both have the same origin musl, but have different sets of licenses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public string[] Licenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Indicates a language package available between this package and the customer's resource artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LanguagePackageDependency
	{
		
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Indicates the location at which a package was found.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileLocation
	{
		
		/// <summary>
		/// For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Maintainer
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PackageDataPackageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PACKAGE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAVEN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GO = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GO_STDLIB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PYPI = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NPM = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUGET = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUBYGEMS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUST = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPOSER = 10,
	}
	
	/// <summary>
	/// AnalyzePackagesResponse contains the information necessary to find results for the given scan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzePackagesResponse
	{
		
		/// <summary>
		/// The name of the scan resource created by this successful scan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scan")]
		public string Scan { get; set; }
	}
	
	/// <summary>
	/// AnalyzePackagesResponse contains the information necessary to find results for the given scan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzePackagesResponseV1
	{
		
		/// <summary>
		/// The name of the scan resource created by this successful scan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scan")]
		public string Scan { get; set; }
	}
	
	/// <summary>
	/// Artifact describes a build product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Artifact
	{
		
		/// <summary>
		/// Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		/// <summary>
		/// Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="names")]
		public string[] Names { get; set; }
	}
	
	/// <summary>
	/// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttestationOccurrence
	{
		
		/// <summary>
		/// One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwts")]
		public Jwt[] Jwts { get; set; }
		
		/// <summary>
		/// Required. The serialized payload that is verified by one or more `signatures`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serializedPayload")]
		public string SerializedPayload { get; set; }
		
		/// <summary>
		/// One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatures")]
		public Signature[] Signatures { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Jwt
	{
		
		/// <summary>
		/// The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compactJwt")]
		public string CompactJwt { get; set; }
	}
	
	/// <summary>
	/// Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Signature
	{
		
		/// <summary>
		/// The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKeyId")]
		public string PublicKeyId { get; set; }
		
		/// <summary>
		/// The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildDefinition
	{
		
		[System.Runtime.Serialization.DataMember(Name="buildType")]
		public string BuildType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalParameters")]
		public System.Collections.Generic.Dictionary<string, object> ExternalParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="internalParameters")]
		public System.Collections.Generic.Dictionary<string, object> InternalParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolvedDependencies")]
		public ResourceDescriptor[] ResolvedDependencies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceDescriptor
	{
		
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, object> Annotations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public System.Collections.Generic.Dictionary<string, string> Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downloadLocation")]
		public string DownloadLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaType")]
		public string MediaType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="finishedOn")]
		public string FinishedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invocationId")]
		public string InvocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedOn")]
		public string StartedOn { get; set; }
	}
	
	/// <summary>
	/// Details of a build occurrence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildOccurrence
	{
		
		[System.Runtime.Serialization.DataMember(Name="inTotoSlsaProvenanceV1")]
		public InTotoSlsaProvenanceV1 InTotoSlsaProvenanceV1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intotoProvenance")]
		public InTotoProvenance IntotoProvenance { get; set; }
		
		/// <summary>
		/// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intotoStatement")]
		public InTotoStatement IntotoStatement { get; set; }
		
		/// <summary>
		/// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provenance")]
		public BuildProvenance Provenance { get; set; }
		
		/// <summary>
		/// Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provenanceBytes")]
		public string ProvenanceBytes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InTotoSlsaProvenanceV1
	{
		
		/// <summary>
		/// InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _type { get; set; }
		
		/// <summary>
		/// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicate")]
		public SlsaProvenanceV1 Predicate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="predicateType")]
		public string PredicateType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public Subject[] Subject { get; set; }
	}
	
	/// <summary>
	/// Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlsaProvenanceV1
	{
		
		[System.Runtime.Serialization.DataMember(Name="buildDefinition")]
		public BuildDefinition BuildDefinition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runDetails")]
		public RunDetails RunDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="builder")]
		public ProvenanceBuilder Builder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byproducts")]
		public ResourceDescriptor[] Byproducts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public BuildMetadata Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProvenanceBuilder
	{
		
		[System.Runtime.Serialization.DataMember(Name="builderDependencies")]
		public ResourceDescriptor[] BuilderDependencies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Collections.Generic.Dictionary<string, string> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Subject
	{
		
		/// <summary>
		/// `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public System.Collections.Generic.Dictionary<string, string> Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InTotoProvenance
	{
		
		[System.Runtime.Serialization.DataMember(Name="builderConfig")]
		public BuilderConfig BuilderConfig { get; set; }
		
		/// <summary>
		/// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public string[] Materials { get; set; }
		
		/// <summary>
		/// Other properties of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata Metadata { get; set; }
		
		/// <summary>
		/// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipe")]
		public Recipe Recipe { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuilderConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Other properties of the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metadata
	{
		
		/// <summary>
		/// The timestamp of when the build completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildFinishedOn")]
		public string BuildFinishedOn { get; set; }
		
		/// <summary>
		/// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildInvocationId")]
		public string BuildInvocationId { get; set; }
		
		/// <summary>
		/// The timestamp of when the build started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildStartedOn")]
		public string BuildStartedOn { get; set; }
		
		/// <summary>
		/// Indicates that the builder claims certain fields in this message to be complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeness")]
		public Completeness Completeness { get; set; }
		
		/// <summary>
		/// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reproducible")]
		public System.Nullable<System.Boolean> Reproducible { get; set; }
	}
	
	/// <summary>
	/// Indicates that the builder claims certain fields in this message to be complete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Completeness
	{
		
		/// <summary>
		/// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public System.Nullable<System.Boolean> Arguments { get; set; }
		
		/// <summary>
		/// If true, the builder claims that recipe.environment is claimed to be complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Nullable<System.Boolean> Environment { get; set; }
		
		/// <summary>
		/// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public System.Nullable<System.Boolean> Materials { get; set; }
	}
	
	/// <summary>
	/// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Recipe
	{
		
		/// <summary>
		/// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public string[] Arguments { get; set; }
		
		/// <summary>
		/// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definedInMaterial")]
		public string DefinedInMaterial { get; set; }
		
		/// <summary>
		/// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryPoint")]
		public string EntryPoint { get; set; }
		
		/// <summary>
		/// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string[] Environment { get; set; }
		
		/// <summary>
		/// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InTotoStatement
	{
		
		/// <summary>
		/// Always `https://in-toto.io/Statement/v0.1`.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _type { get; set; }
		
		/// <summary>
		/// `https://slsa.dev/provenance/v0.1` for SlsaProvenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicateType")]
		public string PredicateType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="provenance")]
		public InTotoProvenance Provenance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="slsaProvenance")]
		public SlsaProvenance SlsaProvenance { get; set; }
		
		/// <summary>
		/// See full explanation of fields at slsa.dev/provenance/v0.2.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slsaProvenanceZeroTwo")]
		public SlsaProvenanceZeroTwo SlsaProvenanceZeroTwo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public Subject[] Subject { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlsaProvenance
	{
		
		[System.Runtime.Serialization.DataMember(Name="builder")]
		public SlsaBuilder Builder { get; set; }
		
		/// <summary>
		/// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public Material[] Materials { get; set; }
		
		/// <summary>
		/// Other properties of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public SlsaMetadata Metadata { get; set; }
		
		/// <summary>
		/// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipe")]
		public SlsaRecipe Recipe { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlsaBuilder
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Material
	{
		
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public System.Collections.Generic.Dictionary<string, string> Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Other properties of the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlsaMetadata
	{
		
		/// <summary>
		/// The timestamp of when the build completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildFinishedOn")]
		public string BuildFinishedOn { get; set; }
		
		/// <summary>
		/// Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildInvocationId")]
		public string BuildInvocationId { get; set; }
		
		/// <summary>
		/// The timestamp of when the build started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildStartedOn")]
		public string BuildStartedOn { get; set; }
		
		/// <summary>
		/// Indicates that the builder claims certain fields in this message to be complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeness")]
		public SlsaCompleteness Completeness { get; set; }
		
		/// <summary>
		/// If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reproducible")]
		public System.Nullable<System.Boolean> Reproducible { get; set; }
	}
	
	/// <summary>
	/// Indicates that the builder claims certain fields in this message to be complete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlsaCompleteness
	{
		
		/// <summary>
		/// If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public System.Nullable<System.Boolean> Arguments { get; set; }
		
		/// <summary>
		/// If true, the builder claims that recipe.environment is claimed to be complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Nullable<System.Boolean> Environment { get; set; }
		
		/// <summary>
		/// If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public System.Nullable<System.Boolean> Materials { get; set; }
	}
	
	/// <summary>
	/// Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlsaRecipe
	{
		
		/// <summary>
		/// Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public System.Collections.Generic.Dictionary<string, object> Arguments { get; set; }
		
		/// <summary>
		/// Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definedInMaterial")]
		public string DefinedInMaterial { get; set; }
		
		/// <summary>
		/// String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryPoint")]
		public string EntryPoint { get; set; }
		
		/// <summary>
		/// Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Collections.Generic.Dictionary<string, object> Environment { get; set; }
		
		/// <summary>
		/// URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// See full explanation of fields at slsa.dev/provenance/v0.2.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlsaProvenanceZeroTwo
	{
		
		[System.Runtime.Serialization.DataMember(Name="buildConfig")]
		public System.Collections.Generic.Dictionary<string, object> BuildConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildType")]
		public string BuildType { get; set; }
		
		/// <summary>
		/// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builder")]
		public GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder Builder { get; set; }
		
		/// <summary>
		/// Identifies the event that kicked off the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invocation")]
		public GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation Invocation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial[] Materials { get; set; }
		
		/// <summary>
		/// Other properties of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Identifies the event that kicked off the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation
	{
		
		/// <summary>
		/// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configSource")]
		public GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource ConfigSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Collections.Generic.Dictionary<string, object> Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, object> Parameters { get; set; }
	}
	
	/// <summary>
	/// Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public System.Collections.Generic.Dictionary<string, string> Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entryPoint")]
		public string EntryPoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial
	{
		
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public System.Collections.Generic.Dictionary<string, string> Digest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Other properties of the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="buildFinishedOn")]
		public string BuildFinishedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildInvocationId")]
		public string BuildInvocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildStartedOn")]
		public string BuildStartedOn { get; set; }
		
		/// <summary>
		/// Indicates that the builder claims certain fields in this message to be complete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeness")]
		public GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness Completeness { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reproducible")]
		public System.Nullable<System.Boolean> Reproducible { get; set; }
	}
	
	/// <summary>
	/// Indicates that the builder claims certain fields in this message to be complete.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness
	{
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Nullable<System.Boolean> Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public System.Nullable<System.Boolean> Materials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Nullable<System.Boolean> Parameters { get; set; }
	}
	
	/// <summary>
	/// Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildProvenance
	{
		
		/// <summary>
		/// Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildOptions")]
		public System.Collections.Generic.Dictionary<string, string> BuildOptions { get; set; }
		
		/// <summary>
		/// Version string of the builder at the time this build was executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builderVersion")]
		public string BuilderVersion { get; set; }
		
		/// <summary>
		/// Output of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builtArtifacts")]
		public Artifact[] BuiltArtifacts { get; set; }
		
		/// <summary>
		/// Commands requested by the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commands")]
		public Command[] Commands { get; set; }
		
		/// <summary>
		/// Time at which the build was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public string Creator { get; set; }
		
		/// <summary>
		/// Time at which execution of the build was finished.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Required. Unique identifier of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// URI where any logs for this provenance were written.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logsUri")]
		public string LogsUri { get; set; }
		
		/// <summary>
		/// ID of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Source describes the location of the source used for the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceProvenance")]
		public Source SourceProvenance { get; set; }
		
		/// <summary>
		/// Time at which execution of the build was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Trigger identifier if the build was triggered automatically; empty if not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerId")]
		public string TriggerId { get; set; }
	}
	
	/// <summary>
	/// Command describes a step performed as part of the build pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Command
	{
		
		/// <summary>
		/// Command-line arguments used when executing this command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Working directory (relative to project source root) used when running this command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Environment variables set before running this command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public string[] Env { get; set; }
		
		/// <summary>
		/// Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID(s) of the command(s) that this command depends on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitFor")]
		public string[] WaitFor { get; set; }
	}
	
	/// <summary>
	/// Source describes the location of the source used for the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Source
	{
		
		/// <summary>
		/// If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalContexts")]
		public SourceContext[] AdditionalContexts { get; set; }
		
		/// <summary>
		/// If provided, the input binary artifacts for the build came from this location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactStorageSourceUri")]
		public string ArtifactStorageSourceUri { get; set; }
		
		/// <summary>
		/// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public SourceContext Context { get; set; }
		
		/// <summary>
		/// Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHashes")]
		public System.Collections.Generic.Dictionary<string, FileHashes> FileHashes { get; set; }
	}
	
	/// <summary>
	/// A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceContext
	{
		
		/// <summary>
		/// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudRepo")]
		public CloudRepoSourceContext CloudRepo { get; set; }
		
		/// <summary>
		/// A SourceContext referring to a Gerrit project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gerrit")]
		public GerritSourceContext Gerrit { get; set; }
		
		/// <summary>
		/// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="git")]
		public GitSourceContext Git { get; set; }
		
		/// <summary>
		/// Labels with user defined metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
	}
	
	/// <summary>
	/// A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudRepoSourceContext
	{
		
		/// <summary>
		/// An alias to a repo revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliasContext")]
		public AliasContext AliasContext { get; set; }
		
		/// <summary>
		/// A unique identifier for a Cloud Repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoId")]
		public RepoId RepoId { get; set; }
		
		/// <summary>
		/// A revision ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// A unique identifier for a Cloud Repo.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepoId
	{
		
		/// <summary>
		/// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectRepoId")]
		public ProjectRepoId ProjectRepoId { get; set; }
		
		/// <summary>
		/// A server-assigned, globally unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	/// <summary>
	/// Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProjectRepoId
	{
		
		/// <summary>
		/// The ID of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The name of the repo. Leave empty for the default repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoName")]
		public string RepoName { get; set; }
	}
	
	/// <summary>
	/// A SourceContext referring to a Gerrit project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GerritSourceContext
	{
		
		/// <summary>
		/// An alias to a repo revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aliasContext")]
		public AliasContext AliasContext { get; set; }
		
		/// <summary>
		/// The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gerritProject")]
		public string GerritProject { get; set; }
		
		/// <summary>
		/// The URI of a running Gerrit instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostUri")]
		public string HostUri { get; set; }
		
		/// <summary>
		/// A revision (commit) ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	/// <summary>
	/// A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitSourceContext
	{
		
		/// <summary>
		/// Git commit hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Git repository URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileHashes
	{
		
		/// <summary>
		/// Required. Collection of file hashes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHash")]
		public Hash[] FileHash { get; set; }
	}
	
	/// <summary>
	/// Container message for hash values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hash
	{
		
		/// <summary>
		/// Required. The type of hash that was performed, e.g. "SHA-256".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Required. The hash value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CVSS
	{
		
		[System.Runtime.Serialization.DataMember(Name="attackComplexity")]
		public System.Nullable<CVSSAttackComplexity> AttackComplexity { get; set; }
		
		/// <summary>
		/// Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attackVector")]
		public System.Nullable<CVSSAttackVector> AttackVector { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public System.Nullable<CVSSAuthentication> Authentication { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availabilityImpact")]
		public System.Nullable<CVSSAvailabilityImpact> AvailabilityImpact { get; set; }
		
		/// <summary>
		/// The base score is a function of the base metric scores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseScore")]
		public System.Nullable<System.Single> BaseScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confidentialityImpact")]
		public CVSSAvailabilityImpact ConfidentialityImpact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exploitabilityScore")]
		public System.Nullable<System.Single> ExploitabilityScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="impactScore")]
		public System.Nullable<System.Single> ImpactScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integrityImpact")]
		public CVSSAvailabilityImpact IntegrityImpact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privilegesRequired")]
		public System.Nullable<CVSSPrivilegesRequired> PrivilegesRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<CVSSScope> Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userInteraction")]
		public System.Nullable<CVSSUserInteraction> UserInteraction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CVSSAttackComplexity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_LOW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_HIGH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_COMPLEXITY_MEDIUM = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CVSSAttackVector
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_NETWORK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_ADJACENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_LOCAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTACK_VECTOR_PHYSICAL = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CVSSAuthentication
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATION_MULTIPLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATION_SINGLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHENTICATION_NONE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CVSSAvailabilityImpact
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_HIGH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_NONE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_PARTIAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPACT_COMPLETE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CVSSPrivilegesRequired
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGES_REQUIRED_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGES_REQUIRED_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGES_REQUIRED_LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVILEGES_REQUIRED_HIGH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CVSSScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOPE_UNCHANGED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCOPE_CHANGED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CVSSUserInteraction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_INTERACTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_INTERACTION_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_INTERACTION_REQUIRED = 2,
	}
	
	/// <summary>
	/// The category to which the update belongs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Category
	{
		
		/// <summary>
		/// The identifier of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		/// <summary>
		/// The localized name of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ComplianceOccurrence
	{
		
		[System.Runtime.Serialization.DataMember(Name="nonComplianceReason")]
		public string NonComplianceReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonCompliantFiles")]
		public NonCompliantFile[] NonCompliantFiles { get; set; }
	}
	
	/// <summary>
	/// Details about files that caused a compliance check to fail. display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NonCompliantFile
	{
		
		/// <summary>
		/// Command to display the non-compliant files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayCommand")]
		public string DisplayCommand { get; set; }
		
		/// <summary>
		/// Empty if `display_command` is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Explains why a file is non compliant for a CIS check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DSSEAttestationOccurrence
	{
		
		/// <summary>
		/// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envelope")]
		public Envelope Envelope { get; set; }
		
		/// <summary>
		/// Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always "application/vnd.in-toto+json".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statement")]
		public InTotoStatement Statement { get; set; }
	}
	
	/// <summary>
	/// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Envelope
	{
		
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payloadType")]
		public string PayloadType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatures")]
		public EnvelopeSignature[] Signatures { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnvelopeSignature
	{
		
		[System.Runtime.Serialization.DataMember(Name="keyid")]
		public string Keyid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sig")]
		public string Sig { get; set; }
	}
	
	/// <summary>
	/// The period during which some deployable was active in a runtime.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentOccurrence
	{
		
		/// <summary>
		/// Address of the runtime element hosting this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Configuration used to create this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		/// <summary>
		/// Required. Beginning of the lifetime of this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployTime")]
		public string DeployTime { get; set; }
		
		/// <summary>
		/// Platform hosting this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public System.Nullable<DeploymentOccurrencePlatform> Platform { get; set; }
		
		/// <summary>
		/// Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string[] ResourceUri { get; set; }
		
		/// <summary>
		/// End of the lifetime of this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="undeployTime")]
		public string UndeployTime { get; set; }
		
		/// <summary>
		/// Identity of the user that triggered this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEmail")]
		public string UserEmail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeploymentOccurrencePlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GKE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLEX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 3,
	}
	
	/// <summary>
	/// Provides information about the analysis status of a discovered resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DiscoveryOccurrence
	{
		
		/// <summary>
		/// Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analysisCompleted")]
		public AnalysisCompleted AnalysisCompleted { get; set; }
		
		/// <summary>
		/// Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analysisError")]
		public Status[] AnalysisError { get; set; }
		
		/// <summary>
		/// The status of discovery for the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analysisStatus")]
		public System.Nullable<DiscoveryOccurrenceAnalysisStatus> AnalysisStatus { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="analysisStatusError")]
		public Status AnalysisStatusError { get; set; }
		
		/// <summary>
		/// Output only. The time occurrences related to this discovery occurrence were archived.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="archiveTime")]
		public string ArchiveTime { get; set; }
		
		/// <summary>
		/// Whether the resource is continuously analyzed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continuousAnalysis")]
		public System.Nullable<DiscoveryOccurrenceContinuousAnalysis> ContinuousAnalysis { get; set; }
		
		/// <summary>
		/// The CPE of the resource being scanned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpe")]
		public string Cpe { get; set; }
		
		/// <summary>
		/// The last time this resource was scanned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastScanTime")]
		public string LastScanTime { get; set; }
		
		/// <summary>
		/// The status of an SBOM generation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sbomStatus")]
		public SBOMStatus SbomStatus { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DiscoveryOccurrenceAnalysisStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANALYSIS_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCANNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED_SUCCESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED_FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINISHED_UNSUPPORTED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DiscoveryOccurrenceContinuousAnalysis
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS_ANALYSIS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 2,
	}
	
	/// <summary>
	/// The status of an SBOM generation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SBOMStatus
	{
		
		/// <summary>
		/// If there was an error generating an SBOM, this will indicate what that error was.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// The progress of the SBOM generation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sbomState")]
		public System.Nullable<SBOMStatusSbomState> SbomState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SBOMStatusSbomState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SBOM_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 2,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// A set of properties that uniquely identify a given Docker image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Fingerprint
	{
		
		/// <summary>
		/// Required. The layer ID of the final layer in the Docker image's v1 representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="v1Name")]
		public string V1Name { get; set; }
		
		/// <summary>
		/// Required. The ordered list of v2 blobs that represent a given image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="v2Blob")]
		public string[] V2Blob { get; set; }
		
		/// <summary>
		/// Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="v2Name")]
		public string V2Name { get; set; }
	}
	
	/// <summary>
	/// Indicates the location at which a package was found.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GrafeasV1FileLocation
	{
		
		/// <summary>
		/// For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filePath")]
		public string FilePath { get; set; }
	}
	
	/// <summary>
	/// The unique identifier of the update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Identity
	{
		
		/// <summary>
		/// The revision number of the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public System.Nullable<System.Int32> Revision { get; set; }
		
		/// <summary>
		/// The revision independent identifier of the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateId")]
		public string UpdateId { get; set; }
	}
	
	/// <summary>
	/// Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageOccurrence
	{
		
		/// <summary>
		/// Output only. This contains the base image URL for the derived image occurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseResourceUrl")]
		public string BaseResourceUrl { get; set; }
		
		/// <summary>
		/// Output only. The number of layers by which this image differs from the associated image basis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Int32> Distance { get; set; }
		
		/// <summary>
		/// A set of properties that uniquely identify a given Docker image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fingerprint")]
		public Fingerprint Fingerprint { get; set; }
		
		/// <summary>
		/// This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layerInfo")]
		public Layer[] LayerInfo { get; set; }
	}
	
	/// <summary>
	/// Layer holds metadata specific to a layer of a Docker image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Layer
	{
		
		/// <summary>
		/// The recovered arguments to the Dockerfile directive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public string Arguments { get; set; }
		
		/// <summary>
		/// Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directive")]
		public string Directive { get; set; }
	}
	
	/// <summary>
	/// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Justification
	{
		
		/// <summary>
		/// Additional details on why this justification was chosen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// The justification type for this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="justificationType")]
		public System.Nullable<JustificationJustificationType> JustificationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JustificationJustificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JUSTIFICATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPONENT_NOT_PRESENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VULNERABLE_CODE_NOT_PRESENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VULNERABLE_CODE_NOT_IN_EXECUTE_PATH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INLINE_MITIGATIONS_ALREADY_EXIST = 5,
	}
	
	/// <summary>
	/// License information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class License
	{
		
		/// <summary>
		/// Comments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public string Comments { get; set; }
		
		/// <summary>
		/// Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// ListVulnerabilitiesResponse contains a single page of vulnerabilities resulting from a scan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVulnerabilitiesResponseV1
	{
		
		/// <summary>
		/// A page token that can be used in a subsequent call to ListVulnerabilities to continue retrieving results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of Vulnerability Occurrences resulting from a scan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurrences")]
		public Occurrence[] Occurrences { get; set; }
	}
	
	/// <summary>
	/// An instance of an analysis type that has been found on a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Occurrence
	{
		
		/// <summary>
		/// Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attestation")]
		public AttestationOccurrence Attestation { get; set; }
		
		/// <summary>
		/// Details of a build occurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="build")]
		public BuildOccurrence Build { get; set; }
		
		/// <summary>
		/// An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compliance")]
		public ComplianceOccurrence Compliance { get; set; }
		
		/// <summary>
		/// Output only. The time this occurrence was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The period during which some deployable was active in a runtime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployment")]
		public DeploymentOccurrence Deployment { get; set; }
		
		/// <summary>
		/// Provides information about the analysis status of a discovered resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="discovery")]
		public DiscoveryOccurrence Discovery { get; set; }
		
		/// <summary>
		/// Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at the top level of the Occurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dsseAttestation")]
		public DSSEAttestationOccurrence DsseAttestation { get; set; }
		
		/// <summary>
		/// MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envelope")]
		public Envelope Envelope { get; set; }
		
		/// <summary>
		/// Details of the derived image portion of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ImageOccurrence Image { get; set; }
		
		/// <summary>
		/// Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<OccurrenceKind> Kind { get; set; }
		
		/// <summary>
		/// Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noteName")]
		public string NoteName { get; set; }
		
		/// <summary>
		/// Details on how a particular software package was installed on a system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="package")]
		public PackageOccurrence Package { get; set; }
		
		/// <summary>
		/// A description of actions that can be taken to remedy the note.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remediation")]
		public string Remediation { get; set; }
		
		/// <summary>
		/// Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUri")]
		public string ResourceUri { get; set; }
		
		/// <summary>
		/// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sbomReference")]
		public SBOMReferenceOccurrence SbomReference { get; set; }
		
		/// <summary>
		/// Output only. The time this occurrence was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgrade")]
		public UpgradeOccurrence Upgrade { get; set; }
		
		/// <summary>
		/// An occurrence of a severity vulnerability on a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerability")]
		public VulnerabilityOccurrence Vulnerability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OccurrenceKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOTE_KIND_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VULNERABILITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUILD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PACKAGE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPLOYMENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISCOVERY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTESTATION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPGRADE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLIANCE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DSSE_ATTESTATION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VULNERABILITY_ASSESSMENT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SBOM_REFERENCE = 12,
	}
	
	/// <summary>
	/// Details on how a particular software package was installed on a system.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageOccurrence
	{
		
		/// <summary>
		/// Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="architecture")]
		public System.Nullable<PackageOccurrenceArchitecture> Architecture { get; set; }
		
		/// <summary>
		/// Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpeUri")]
		public string CpeUri { get; set; }
		
		/// <summary>
		/// License information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="license")]
		public License License { get; set; }
		
		/// <summary>
		/// All of the places within the filesystem versions of this package have been found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location[] Location { get; set; }
		
		/// <summary>
		/// Required. Output only. The name of the installed package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageType")]
		public string PackageType { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public Version Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PackageOccurrenceArchitecture
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ARCHITECTURE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X86 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X64 = 2,
	}
	
	/// <summary>
	/// An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpeUri")]
		public string CpeUri { get; set; }
		
		/// <summary>
		/// The path from which we gathered that this package/version is installed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public Version Version { get; set; }
	}
	
	/// <summary>
	/// Version contains structured information about the version of a package.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Version
	{
		
		/// <summary>
		/// Used to correct mistakes in the version numbering scheme.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="epoch")]
		public System.Nullable<System.Int32> Epoch { get; set; }
		
		/// <summary>
		/// Human readable version string. This string is of the form :- and is only set when kind is NORMAL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		/// <summary>
		/// Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclusive")]
		public System.Nullable<System.Boolean> Inclusive { get; set; }
		
		/// <summary>
		/// Required. Distinguishes between sentinel MIN/MAX versions and normal versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<VersionKind> Kind { get; set; }
		
		/// <summary>
		/// Required only when version kind is NORMAL. The main part of the version name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The iteration of the package build from the above version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VersionKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERSION_KIND_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINIMUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAXIMUM = 3,
	}
	
	/// <summary>
	/// The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SBOMReferenceOccurrence
	{
		
		/// <summary>
		/// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public SbomReferenceIntotoPayload Payload { get; set; }
		
		/// <summary>
		/// The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payloadType")]
		public string PayloadType { get; set; }
		
		/// <summary>
		/// The signatures over the payload.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatures")]
		public EnvelopeSignature[] Signatures { get; set; }
	}
	
	/// <summary>
	/// The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SbomReferenceIntotoPayload
	{
		
		/// <summary>
		/// Identifier for the schema of the Statement.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string _type { get; set; }
		
		/// <summary>
		/// A predicate which describes the SBOM being referenced.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicate")]
		public SbomReferenceIntotoPredicate Predicate { get; set; }
		
		/// <summary>
		/// URI identifying the type of the Predicate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicateType")]
		public string PredicateType { get; set; }
		
		/// <summary>
		/// Set of software artifacts that the attestation applies to. Each element represents a single software artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public Subject[] Subject { get; set; }
	}
	
	/// <summary>
	/// A predicate which describes the SBOM being referenced.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SbomReferenceIntotoPredicate
	{
		
		/// <summary>
		/// A map of algorithm to digest of the contents of the SBOM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public System.Collections.Generic.Dictionary<string, string> Digest { get; set; }
		
		/// <summary>
		/// The location of the SBOM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The mime type of the SBOM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The person or system referring this predicate to the consumer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referrerId")]
		public string ReferrerId { get; set; }
	}
	
	/// <summary>
	/// An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability). For Windows, both distribution and windows_update contain information for the Windows update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpgradeOccurrence
	{
		
		/// <summary>
		/// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distribution")]
		public UpgradeDistribution Distribution { get; set; }
		
		/// <summary>
		/// Required for non-Windows OS. The package this Upgrade is for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parsedVersion")]
		public Version ParsedVersion { get; set; }
		
		/// <summary>
		/// Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="windowsUpdate")]
		public WindowsUpdate WindowsUpdate { get; set; }
	}
	
	/// <summary>
	/// The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpgradeDistribution
	{
		
		/// <summary>
		/// The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public string Classification { get; set; }
		
		/// <summary>
		/// Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpeUri")]
		public string CpeUri { get; set; }
		
		/// <summary>
		/// The cve tied to this Upgrade.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cve")]
		public string[] Cve { get; set; }
		
		/// <summary>
		/// The severity as specified by the upstream operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
	}
	
	/// <summary>
	/// Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WindowsUpdate
	{
		
		/// <summary>
		/// The list of categories to which the update belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categories")]
		public Category[] Categories { get; set; }
		
		/// <summary>
		/// The localized description of the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The unique identifier of the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public Identity Identity { get; set; }
		
		/// <summary>
		/// The Microsoft Knowledge Base article IDs that are associated with the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kbArticleIds")]
		public string[] KbArticleIds { get; set; }
		
		/// <summary>
		/// The last published timestamp of the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastPublishedTimestamp")]
		public string LastPublishedTimestamp { get; set; }
		
		/// <summary>
		/// The hyperlink to the support information for the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportUrl")]
		public string SupportUrl { get; set; }
		
		/// <summary>
		/// The localized title of the update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// An occurrence of a severity vulnerability on a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VulnerabilityOccurrence
	{
		
		/// <summary>
		/// Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssScore")]
		public System.Nullable<System.Single> CvssScore { get; set; }
		
		/// <summary>
		/// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssV2")]
		public CVSS CvssV2 { get; set; }
		
		/// <summary>
		/// Output only. CVSS version used to populate cvss_score and severity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssVersion")]
		public System.Nullable<VulnerabilityOccurrenceCvssVersion> CvssVersion { get; set; }
		
		/// <summary>
		/// Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cvssv3")]
		public CVSS Cvssv3 { get; set; }
		
		/// <summary>
		/// The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveSeverity")]
		public System.Nullable<VulnerabilityOccurrenceEffectiveSeverity> EffectiveSeverity { get; set; }
		
		/// <summary>
		/// Occurrence-specific extra details about the vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extraDetails")]
		public string ExtraDetails { get; set; }
		
		/// <summary>
		/// Output only. Whether at least one of the affected packages has a fix available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixAvailable")]
		public System.Nullable<System.Boolean> FixAvailable { get; set; }
		
		/// <summary>
		/// Output only. A detailed description of this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longDescription")]
		public string LongDescription { get; set; }
		
		/// <summary>
		/// Required. The set of affected locations and their fixes (if available) within the associated resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageIssue")]
		public PackageIssue[] PackageIssue { get; set; }
		
		/// <summary>
		/// Output only. URLs related to this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedUrls")]
		public RelatedUrl[] RelatedUrls { get; set; }
		
		/// <summary>
		/// Output only. The note provider assigned severity of this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public VulnerabilityOccurrenceEffectiveSeverity Severity { get; set; }
		
		/// <summary>
		/// Output only. A one sentence description of this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortDescription")]
		public string ShortDescription { get; set; }
		
		/// <summary>
		/// The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vexAssessment")]
		public VexAssessment VexAssessment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VulnerabilityOccurrenceCvssVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CVSS_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CVSS_VERSION_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CVSS_VERSION_3 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VulnerabilityOccurrenceEffectiveSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEVERITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINIMAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOW = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 5,
	}
	
	/// <summary>
	/// A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PackageIssue
	{
		
		/// <summary>
		/// Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedCpeUri")]
		public string AffectedCpeUri { get; set; }
		
		/// <summary>
		/// Required. The package this vulnerability was found in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedPackage")]
		public string AffectedPackage { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="affectedVersion")]
		public Version AffectedVersion { get; set; }
		
		/// <summary>
		/// Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveSeverity")]
		public VulnerabilityOccurrenceEffectiveSeverity EffectiveSeverity { get; set; }
		
		/// <summary>
		/// The location at which this package was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileLocation")]
		public GrafeasV1FileLocation[] FileLocation { get; set; }
		
		/// <summary>
		/// Output only. Whether a fix is available for this package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixAvailable")]
		public System.Nullable<System.Boolean> FixAvailable { get; set; }
		
		/// <summary>
		/// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedCpeUri")]
		public string FixedCpeUri { get; set; }
		
		/// <summary>
		/// The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedPackage")]
		public string FixedPackage { get; set; }
		
		/// <summary>
		/// Version contains structured information about the version of a package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedVersion")]
		public Version FixedVersion { get; set; }
		
		/// <summary>
		/// The type of package (e.g. OS, MAVEN, GO).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageType")]
		public string PackageType { get; set; }
	}
	
	/// <summary>
	/// Metadata for any related URL information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelatedUrl
	{
		
		/// <summary>
		/// Label to describe usage of the URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Specific URL associated with the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VexAssessment
	{
		
		/// <summary>
		/// Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cve")]
		public string Cve { get; set; }
		
		/// <summary>
		/// Contains information about the impact of this vulnerability, this will change with time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impacts")]
		public string[] Impacts { get; set; }
		
		/// <summary>
		/// Justification provides the justification when the state of the assessment if NOT_AFFECTED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="justification")]
		public Justification Justification { get; set; }
		
		/// <summary>
		/// The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noteName")]
		public string NoteName { get; set; }
		
		/// <summary>
		/// Holds a list of references associated with this vulnerability item and assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relatedUris")]
		public RelatedUrl[] RelatedUris { get; set; }
		
		/// <summary>
		/// Specifies details on how to handle (and presumably, fix) a vulnerability.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remediations")]
		public Remediation[] Remediations { get; set; }
		
		/// <summary>
		/// Provides the state of this Vulnerability assessment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<VexAssessmentState> State { get; set; }
		
		/// <summary>
		/// The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vulnerabilityId")]
		public string VulnerabilityId { get; set; }
	}
	
	/// <summary>
	/// Specifies details on how to handle (and presumably, fix) a vulnerability.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Remediation
	{
		
		/// <summary>
		/// Contains a comprehensive human-readable discussion of the remediation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// The type of remediation that can be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remediationType")]
		public System.Nullable<RemediationRemediationType> RemediationType { get; set; }
		
		/// <summary>
		/// Metadata for any related URL information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remediationUri")]
		public RelatedUrl RemediationUri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RemediationRemediationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REMEDIATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MITIGATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_FIX_PLANNED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE_AVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VENDOR_FIX = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKAROUND = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VexAssessmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AFFECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_AFFECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDER_INVESTIGATION = 4,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
		/// Ondemandscanning_projects_locations_operations_delete v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Ondemandscanning_projects_locations_operations_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Ondemandscanning_projects_locations_operations_get v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Ondemandscanning_projects_locations_operations_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Ondemandscanning_projects_locations_operations_list v1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Ondemandscanning_projects_locations_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Ondemandscanning_projects_locations_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Ondemandscanning_projects_locations_operations_cancelAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
		/// Ondemandscanning_projects_locations_operations_wait v1/{name}:wait
		/// </summary>
		/// <param name="name">The name of the operation resource to wait on.</param>
		/// <param name="timeout">The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also specified, the shorter one will be used.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Ondemandscanning_projects_locations_operations_waitAsync(string name, string timeout, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":wait&timeout=" + (timeout==null? "" : System.Uri.EscapeDataString(timeout));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiates an analysis of the provided packages.
		/// Ondemandscanning_projects_locations_scans_analyzePackages v1/{parent}/scans:analyzePackages
		/// </summary>
		/// <param name="parent">Required. The parent of the resource for which analysis is requested. Format: projects/[project_name]/locations/[location]</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Ondemandscanning_projects_locations_scans_analyzePackagesAsync(string parent, AnalyzePackagesRequestV1 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/scans:analyzePackages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists vulnerabilities resulting from a successfully completed scan.
		/// Ondemandscanning_projects_locations_scans_vulnerabilities_list v1/{parent}/vulnerabilities
		/// </summary>
		/// <param name="parent">Required. The parent of the collection of Vulnerabilities being requested. Format: projects/[project_name]/locations/[location]/scans/[scan_id]</param>
		/// <param name="pageSize">The number of vulnerabilities to retrieve.</param>
		/// <param name="pageToken">The page token, resulting from a previous call to ListVulnerabilities.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVulnerabilitiesResponseV1> Ondemandscanning_projects_locations_scans_vulnerabilities_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/vulnerabilities&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListVulnerabilitiesResponseV1>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
