//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorV2
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorized_payment_method")]
		public Authorized_payment_method Authorized_payment_method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="correlation_id")]
		public string Correlation_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error_code")]
		public string Error_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error_messages")]
		public string[] Error_messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fraud_status")]
		public string Fraud_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Authorized_payment_method
	{
		
		[System.Runtime.Serialization.DataMember(Name="number_of_days")]
		public System.Nullable<System.Int32> Number_of_days { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="number_of_installments")]
		public System.Nullable<System.Int32> Number_of_installments { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public Authorized_payment_methodType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Authorized_payment_methodType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="invoice")]
		invoice = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fixed_amount")]
		fixed_amount = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="base_account")]
		base_account = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="direct_debit")]
		direct_debit = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="direct_bank_transfer")]
		direct_bank_transfer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="b2b_invoice")]
		b2b_invoice = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="card")]
		card = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="slice_it_by_card")]
		slice_it_by_card = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pay_later_by_card")]
		pay_later_by_card = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pay_by_card")]
		pay_by_card = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="fixed_sum_credit")]
		fixed_sum_credit = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Address
	{
		
		/// <summary>
		/// ‘Attn.’ (if applicable). Only applicable for B2B customers.
		/// Max length: 99
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attention")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public string Attention { get; set; }
		
		/// <summary>
		/// Customer’s city.
		/// Max length: 99
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="city")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public string City { get; set; }
		
		/// <summary>
		/// Customer’s country. This value overrides the purchase country if they are different. Should follow the standard of ISO 3166 alpha-2. E.g. GB, US, DE, SE.
		/// Pattern: ^[A-Za-z]{2,2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{2,2}$")]
		public string Country { get; set; }
		
		/// <summary>
		/// Customer’s email address.
		/// Max length: 99
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public string Email { get; set; }
		
		/// <summary>
		/// Customers family name in UTF-8 encoding.
		///Cannot be only numbers, must be more than 1 character.
		///Allowed special characters: -'’.
		///More information can be found [in this link](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-data-requirements/#details-needed-per-market)
		/// Max length: 99
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public string Family_name { get; set; }
		
		/// <summary>
		/// Customers given name in UTF-8 encoding.
		///Cannot be only numbers, must be more than 1 character.
		///Allowed special characters: -'’.
		///More information can be found [in this link](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-data-requirements/#details-needed-per-market)
		/// Max length: 99
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public string Given_name { get; set; }
		
		/// <summary>
		/// Organization name (if applicable). Only applicable for B2B customers.
		/// Max length: 99
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_name")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public string Organization_name { get; set; }
		
		/// <summary>
		/// Phone number. Preferably a mobile phone number.
		/// Max length: 99
		/// Min length: 5
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		[System.ComponentModel.DataAnnotations.MinLength(5)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public string Phone { get; set; }
		
		/// <summary>
		/// Customer’s postal code. Validation according to Universal Postal Union addressing systems.
		///E.g. 12345, W1G OPW.
		/// Max length: 10
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// Customer’s region or state - Mandatory for US and AU market. Validations according to ISO 3166-2 format, e.g. OH, NJ, etc.
		/// Max length: 99
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public string Region { get; set; }
		
		/// <summary>
		/// Customer’s street address. Regional formatting is required, as follows:
		///UK/US/FR: 33 Cavendish Square
		///Rest of EU: De Ruijterkade 7
		/// Max length: 99
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_address")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public string Street_address { get; set; }
		
		/// <summary>
		/// Customer’s street address. Second Line. 
		/// Max length: 99
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_address2")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(99)]
		public string Street_address2 { get; set; }
		
		/// <summary>
		/// Customer’s Title. Allowed values per country:
		///UK - "Mr", "Ms"
		///DE - "Herr", "Frau"
		///AT: "Herr, "Frau"
		///CH: de-CH: "Herr, "Frau" it-CH: "Sig.", "Sig.ra" fr-CH: "M", "Mme" 
		///BE: "Dhr.", "Mevr."
		///NL: "Dhr.", "Mevr."
		/// Max length: 20
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Asset_urls
	{
		
		/// <summary>
		/// URL of the descriptive asset. Using this dynamic asset will make sure that any copy update of Klarna will automatically be propagated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descriptive")]
		public string Descriptive { get; set; }
		
		/// <summary>
		/// URL of the standard asset. Using this dynamic asset will make sure that any copy update of Klarna will automatically be propagated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standard")]
		public string Standard { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attachment
	{
		
		/// <summary>
		/// The content of the extra merchant data should be presented as a string inside this property. The body should be an object containing any of the keys and sub-objects described below serialized to JSON. More information on that object can be found [here](https://developers.klarna.com/api/#attachment-schema).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The content type of the body. It is usually represented as "application/vnd.klarna.internal.emd-v2+json"
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content_type")]
		public string Content_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Create_order_request
	{
		
		/// <summary>
		/// Authorization token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization_token")]
		public string Authorization_token { get; set; }
		
		/// <summary>
		/// Allow merchant to trigger auto capturing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auto_capture")]
		public System.Nullable<System.Boolean> Auto_capture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		/// <summary>
		/// Promo codes - The array could be used to define which of the configured payment options within a payment category (pay_later, pay_over_time, etc.) should be shown for this purchase. Discuss with the delivery manager to know about the promo codes that will be configured for your account. The feature could also be used to provide promotional offers to specific customers (eg: 0% financing). Please be informed that the usage of this feature can have commercial implications. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_payment_method_ids")]
		public string[] Custom_payment_method_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Customer Customer { get; set; }
		
		/// <summary>
		/// Used to define the language and region of the customer. The locale follows the format of (RFC 1766)[https://datatracker.ietf.org/doc/rfc1766/], meaning its value consists of language-country.
		///The following values are applicable:
		///
		///AT: "de-AT", "de-DE", "en-DE"
		///BE: "be-BE", "nl-BE", "fr-BE", "en-BE"
		///CH: "it-CH", "de-CH", "fr-CH", "en-CH"
		///DE: "de-DE", "de-AT", "en-DE"
		///DK: "da-DK", "en-DK"
		///ES: "es-ES", "ca-ES", "en-ES"
		///FI: "fi-FI", "sv-FI", "en-FI"
		///GB: "en-GB"
		///IT: "it-IT", "en-IT"
		///NL: "nl-NL", "en-NL"
		///NO: "nb-NO", "en-NO"
		///PL: "pl-PL", "en-PL"
		///SE: "sv-SE", "en-SE"
		///US: "en-US".
		/// Pattern: ^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)
		/// Max length: 6000
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_data")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(6000)]
		public string Merchant_data { get; set; }
		
		/// <summary>
		/// Used for storing merchant's internal order number or other reference.
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_reference1")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Merchant_reference1 { get; set; }
		
		/// <summary>
		/// Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters).
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_reference2")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Merchant_reference2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchant_urls")]
		public Merchant_urls Merchant_urls { get; set; }
		
		/// <summary>
		/// Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_amount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public long Order_amount { get; set; }
		
		/// <summary>
		/// The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_lines")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Order_line[] Order_lines { get; set; }
		
		/// <summary>
		/// Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_tax_amount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> Order_tax_amount { get; set; }
		
		/// <summary>
		/// Available payment method categories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_method_categories")]
		public Payment_method_category[] Payment_method_categories { get; set; }
		
		/// <summary>
		/// The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.
		/// Required
		/// Pattern: ^[A-Za-z]{2,2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchase_country")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{2,2}$")]
		public string Purchase_country { get; set; }
		
		/// <summary>
		/// The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.
		/// Required
		/// Pattern: ^[A-Za-z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchase_currency")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{3,3}$")]
		public string Purchase_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public Address Shipping_address { get; set; }
		
		/// <summary>
		/// The current status of the session. Possible values: 'complete', 'incomplete' where 'complete' is set when the order has been placed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Create_order_requestStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Customer
	{
		
		/// <summary>
		/// Customer’s date of birth. The format is ‘yyyy-mm-dd’
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public string Date_of_birth { get; set; }
		
		/// <summary>
		/// Customer’s gender - ‘male’ or ‘female’
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// Last four digits of the customer's social security number. This value is available for US customers.
		/// Pattern: ^([0-9]{4}|[0-9]{9})$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_four_ssn")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9]{4}|[0-9]{9})$")]
		public string Last_four_ssn { get; set; }
		
		/// <summary>
		/// The customer's national identification number. This value is available for EU customers utilizing national identification numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="national_identification_number")]
		public string National_identification_number { get; set; }
		
		/// <summary>
		/// Organization entity type. Only applicable for B2B customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_entity_type")]
		public System.Nullable<CustomerOrganization_entity_type> Organization_entity_type { get; set; }
		
		/// <summary>
		/// Organization registration id. Only applicable for B2B customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_registration_id")]
		public string Organization_registration_id { get; set; }
		
		/// <summary>
		/// Customer’s Title. Allowed values per country:
		///UK - "Mr", "Ms"
		///DE - "Herr", "Frau"
		///AT: "Herr, "Frau"
		///CH: de-CH: "Herr, "Frau" it-CH: "Sig.", "Sig.ra" fr-CH: "M", "Mme" 
		///BE: "Dhr.", "Mevr."
		///NL: "Dhr.", "Mevr."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Type of customer in the session. If nothing is added, a B2C session will be the default. If it is a b2b-session, you should enter organization to trigger a B2B session.
		/// Pattern: ^(person|organization)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(person|organization)$")]
		public string Type { get; set; }
		
		/// <summary>
		/// VAT ID. Only applicable for B2B customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vat_id")]
		public string Vat_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CustomerOrganization_entity_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LIMITED_COMPANY")]
		LIMITED_COMPANY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUBLIC_LIMITED_COMPANY")]
		PUBLIC_LIMITED_COMPANY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENTREPRENEURIAL_COMPANY")]
		ENTREPRENEURIAL_COMPANY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LIMITED_PARTNERSHIP_LIMITED_COMPANY")]
		LIMITED_PARTNERSHIP_LIMITED_COMPANY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LIMITED_PARTNERSHIP")]
		LIMITED_PARTNERSHIP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GENERAL_PARTNERSHIP")]
		GENERAL_PARTNERSHIP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REGISTERED_SOLE_TRADER")]
		REGISTERED_SOLE_TRADER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOLE_TRADER")]
		SOLE_TRADER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CIVIL_LAW_PARTNERSHIP")]
		CIVIL_LAW_PARTNERSHIP = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PUBLIC_INSTITUTION")]
		PUBLIC_INSTITUTION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Merchant_urls
	{
		
		/// <summary>
		/// URL for receiving the authorization token when payment is completed. Used for Authorization Callback.
		/// Max length: 2000
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string Authorization { get; set; }
		
		/// <summary>
		/// URL of the merchant confirmation page. The consumer will be redirected back to the confirmation page if the consumer is sent to the redirect URL after placing the order. Insert {session.id} and/or {order.id} as placeholder to connect either of those IDs to the URL(max 2000 characters).
		/// Max length: 2000
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confirmation")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string Confirmation { get; set; }
		
		/// <summary>
		/// URL for notifications on pending orders. Insert {session.id} and/or {order.id} as placeholder to connect either of those IDs to the URL (max 2000 characters).
		/// Max length: 2000
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notification")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string Notification { get; set; }
		
		/// <summary>
		/// URL that will be requested when an order is completed. Should be different than checkout and confirmation URLs. Insert {session.id} and/or {order.id} as placeholder to connect either of those IDs to the URL (max 2000 characters).
		/// Max length: 2000
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="push")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		public string Push { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Order_line
	{
		
		/// <summary>
		/// URL to an image that can be later embedded in communications between Klarna and the customer. (max 1024 characters).
		/// A minimum of 250x250 px resolution is recommended for the image to look good in the Klarna app, and below 50x50 px won't even show. We recommend using a good sized image (650x650 px or more), however the file size must not exceed 12MB.
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Used for storing merchant's internal order number or other reference. Pass through field. (max 1024 characters)
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_data")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Merchant_data { get; set; }
		
		/// <summary>
		/// Descriptive name of the order line item.
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="product_identifiers")]
		public Product_identifiers Product_identifiers { get; set; }
		
		/// <summary>
		/// URL to the product in the merchant’s webshop that can be later used in communications between Klarna and the customer. (max 1024 characters)
		/// Max length: 1024
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_url")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		public string Product_url { get; set; }
		
		/// <summary>
		/// Quantity of the order line item. Must be a non-negative number.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public long Quantity { get; set; }
		
		/// <summary>
		/// Unit used to describe the quantity, e.g. kg, pcs, etc. If defined the value has to be 1-8 characters.
		/// Max length: 8
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity_unit")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string Quantity_unit { get; set; }
		
		/// <summary>
		/// Client facing article number, SKU or similar. Max length is 256 characters.
		/// Max length: 256
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public Subscription Subscription { get; set; }
		
		/// <summary>
		/// Tax rate of the order line. Non-negative value. The percentage value is represented with two implicit decimals. I.e 1900 = 19%.
		/// Minimum: 0
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tax_rate")]
		[System.ComponentModel.DataAnnotations.Range(0, 10000)]
		public System.Nullable<System.Int64> Tax_rate { get; set; }
		
		/// <summary>
		/// Total amount of the order line. Must be defined as minor units. Includes tax and discount. Eg: 2500=25 euros
		///Value = (quantity x unit_price) - total_discount_amount. 
		///(max value: 100000000)
		/// Required
		/// Maximum: 100000000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total_amount")]
		[System.ComponentModel.DataAnnotations.Range(System.Int64.MinValue, 100000000)]
		public long Total_amount { get; set; }
		
		/// <summary>
		/// Non-negative minor units. Includes tax. Eg: 500=5 euros
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_discount_amount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> Total_discount_amount { get; set; }
		
		/// <summary>
		/// Total tax amount of the order line. Must be within ±1 of total_amount - total_amount 10000 / (10000 + tax_rate). Negative when type is discount.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tax_amount")]
		public System.Nullable<System.Int64> Total_tax_amount { get; set; }
		
		/// <summary>
		/// Type of the order line item. The possible values are:
		///
		///physical
		///discount
		///shipping_fee
		///sales_tax
		///digital
		///gift_card
		///store_credit
		///surcharge
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Price for a single unit of the order line. Must be defined as minor units. Includes tax, excludes discount. (max value: 100000000)
		/// Required
		/// Maximum: 100000000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit_price")]
		[System.ComponentModel.DataAnnotations.Range(System.Int64.MinValue, 100000000)]
		public long Unit_price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Product_identifiers
	{
		
		/// <summary>
		/// The product's brand name as generally recognized by consumers. If no brand is available for a product, do not supply any value.
		/// Max length: 70
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brand")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Brand { get; set; }
		
		/// <summary>
		/// The product's category path as used in the merchant's webshop. Include the full and most detailed category and separate the segments with ' > '
		/// Max length: 750
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category_path")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(750)]
		public string Category_path { get; set; }
		
		/// <summary>
		/// Color to be shown to the end customer (max 64 characters).
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Color { get; set; }
		
		/// <summary>
		/// The product's Global Trade Item Number (GTIN). Common types of GTIN are EAN, ISBN or UPC. Exclude dashes and spaces, where possible
		/// Max length: 50
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="global_trade_item_number")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Global_trade_item_number { get; set; }
		
		/// <summary>
		/// The product's Manufacturer Part Number (MPN), which - together with the brand - uniquely identifies a product. Only submit MPNs assigned by a manufacturer and use the most specific MPN possible
		/// Max length: 70
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturer_part_number")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Manufacturer_part_number { get; set; }
		
		/// <summary>
		/// Size to be shown to the end customer (max 64 characters).
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Subscription
	{
		
		/// <summary>
		/// The cadence unit for this.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public SubscriptionInterval Interval { get; set; }
		
		/// <summary>
		/// The number of intervals
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interval_count")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Interval_count { get; set; }
		
		/// <summary>
		/// The name of the subscription product
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SubscriptionInterval
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DAY")]
		DAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEEK")]
		WEEK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONTH")]
		MONTH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YEAR")]
		YEAR = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Payment_method_category
	{
		
		[System.Runtime.Serialization.DataMember(Name="asset_urls")]
		public Asset_urls Asset_urls { get; set; }
		
		/// <summary>
		/// ID of the payment method category to be used while loading the widget later.
		///The possible values are:<ul><li>klarna</li><li>pay_later</li><li>pay_now</li><li>pay_over_time</li><li>direct_bank_transfer</li><li>direct_debit</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public string Identifier { get; set; }
		
		/// <summary>
		/// Name of the payment method category. These names are dynamic depending on what payment method is in the category. Using this dynamic asset will make sure that any copy update of Klarna will automatically be propagated, or any updates of included payment methods by you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Create_order_requestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="incomplete")]
		incomplete = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Customer_read
	{
		
		/// <summary>
		/// Customer’s date of birth. The format is ‘yyyy-mm-dd’
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public string Date_of_birth { get; set; }
		
		/// <summary>
		/// Customer’s gender - ‘male’ or ‘female’
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// Organization entity type. Only applicable for B2B customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_entity_type")]
		public CustomerOrganization_entity_type Organization_entity_type { get; set; }
		
		/// <summary>
		/// Organization registration id. Only applicable for B2B customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organization_registration_id")]
		public string Organization_registration_id { get; set; }
		
		/// <summary>
		/// Customer’s Title. Allowed values per country:
		///UK - "Mr", "Ms"
		///DE - "Herr", "Frau"
		///AT: "Herr, "Frau"
		///CH: de-CH: "Herr, "Frau" it-CH: "Sig.", "Sig.ra" fr-CH: "M", "Mme" 
		///BE: "Dhr.", "Mevr."
		///NL: "Dhr.", "Mevr."
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Type of customer in the session. If nothing is added, a B2C session will be the default. If it is a b2b-session, you should enter organization to trigger a B2B session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// VAT ID. Only applicable for B2B customers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vat_id")]
		public string Vat_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Customer_read_create_token
	{
		
		/// <summary>
		/// Customer’s date of birth. The format is ‘yyyy-mm-dd’
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_of_birth")]
		public string Date_of_birth { get; set; }
		
		/// <summary>
		/// Customer’s gender - ‘male’ or ‘female’
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Customer_token_creation_request
	{
		
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Customer Customer { get; set; }
		
		/// <summary>
		/// Description of the purpose of the token.
		/// Required
		/// Max length: 255
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Description { get; set; }
		
		/// <summary>
		/// Intended use for the token.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intended_use")]
		public Customer_token_creation_requestIntended_use Intended_use { get; set; }
		
		/// <summary>
		/// RFC 1766 customer's locale.
		/// Required
		/// Pattern: ^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locale")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$")]
		public string Locale { get; set; }
		
		/// <summary>
		/// ISO 3166 alpha-2 purchase country.
		/// Required
		/// Pattern: ^[A-Za-z]{2,2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchase_country")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{2,2}$")]
		public string Purchase_country { get; set; }
		
		/// <summary>
		/// ISO 4217 purchase currency.
		/// Required
		/// Pattern: ^[A-Za-z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchase_currency")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{3,3}$")]
		public string Purchase_currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Customer_token_creation_requestIntended_use
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBSCRIPTION")]
		SUBSCRIPTION = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Customer_token_creation_response
	{
		
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Customer_read_create_token Customer { get; set; }
		
		/// <summary>
		/// Used to connect customers with payment method when it is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_method_reference")]
		public string Payment_method_reference { get; set; }
		
		/// <summary>
		/// URL to redirect the customer to after placing the order. This is a Klarna URL where Klarna will place a cookie in the customer’s browser (if redirected) and redirect the customer back to the confirmation URL provided by the merchant. This is not a mandatory step but a recommended one to improve the returning customer’s experience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_url")]
		public string Redirect_url { get; set; }
		
		/// <summary>
		/// Generated customer token. This token will be used to create a new order for the subscription using the Create a New order using token API.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token_id")]
		public string Token_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Merchant_session
	{
		
		/// <summary>
		/// Client token to be passed to the JS client while initializing the JS SDK in the next step.
		/// Required
		/// Max length: 4096
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_token")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string Client_token { get; set; }
		
		/// <summary>
		/// Available payment method categories for this particular session
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_method_categories")]
		public Payment_method_category[] Payment_method_categories { get; set; }
		
		/// <summary>
		/// ID of the created session. Please use this ID to share with Klarna for identifying any issues during integration.
		/// Required
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="session_id")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Session_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Options
	{
		
		/// <summary>
		/// Color for the border of elements within the iFrame. Value should be a CSS hex color, e.g. "#FF9900"
		/// Pattern: ^#[A-Fa-f0-9]{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color_border")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^#[A-Fa-f0-9]{6}$")]
		public string Color_border { get; set; }
		
		/// <summary>
		/// Color for the border of elements within the iFrame when selected by the customer. Value should be a CSS hex color, e.g. "#FF9900"
		/// Pattern: ^#[A-Fa-f0-9]{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color_border_selected")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^#[A-Fa-f0-9]{6}$")]
		public string Color_border_selected { get; set; }
		
		/// <summary>
		/// Color for the bullet points within the iFrame. Value should be a CSS hex color, e.g. "#FF9900"
		/// Pattern: ^#[A-Fa-f0-9]{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color_details")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^#[A-Fa-f0-9]{6}$")]
		public string Color_details { get; set; }
		
		/// <summary>
		/// Color for the texts within the iFrame. Value should be a CSS hex color, e.g. "#FF9900"
		/// Pattern: ^#[A-Fa-f0-9]{6}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color_text")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^#[A-Fa-f0-9]{6}$")]
		public string Color_text { get; set; }
		
		/// <summary>
		/// Radius for the border of elements within the iFrame.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="radius_border")]
		public string Radius_border { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Order
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorized_payment_method")]
		public Authorized_payment_method Authorized_payment_method { get; set; }
		
		/// <summary>
		/// Fraud status for the order. Either ACCEPTED or PENDING. If ACCEPTED, the order could be captured. If PENDING, please wait till you receive the notification from Klarna in the notification URL that the order has been approved. You can find additional information here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fraud_status")]
		public string Fraud_status { get; set; }
		
		/// <summary>
		/// Unique order ID of the transaction. This ID will be used for all order management processes.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_id")]
		public string Order_id { get; set; }
		
		/// <summary>
		/// URL to redirect the customer to after placing the order. This is a Klarna URL to which the merchant should redirect the customer to. Klarna will place a cookie in the customer’s browser (if redirected) and redirect the customer back to the confirmation URL provided by the merchant. This is not a mandatory step but a recommended one to improve the returning customer’s experience. It is a spontaneous step and does not harm the customer’s experience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_url")]
		public string Redirect_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Session
	{
		
		/// <summary>
		/// The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acquiring_channel")]
		public System.Nullable<SessionAcquiring_channel> Acquiring_channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachment")]
		public Attachment Attachment { get; set; }
		
		/// <summary>
		/// Authorization token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization_token")]
		public string Authorization_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		/// <summary>
		/// Token to be passed to the JS client
		/// Max length: 4096
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_token")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string Client_token { get; set; }
		
		/// <summary>
		/// Promo codes - The array could be used to define which of the configured payment options within a payment category (pay_later, pay_over_time, etc.) should be shown for this purchase. Discuss with the delivery manager to know about the promo codes that will be configured for your account. The feature could also be used to provide promotional offers to specific customers (eg: 0% financing). Please be informed that the usage of this feature can have commercial implications. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_payment_method_ids")]
		public string[] Custom_payment_method_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Customer Customer { get; set; }
		
		/// <summary>
		/// Design package to use in the session. This can only by used if a custom design has been implemented for Klarna Payments and agreed upon in the agreement. It might have a financial impact. Delivery manager will provide the value for the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="design")]
		public string Design { get; set; }
		
		/// <summary>
		/// Session expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public System.Nullable<System.DateTimeOffset> Expires_at { get; set; }
		
		/// <summary>
		/// Intent for the session. The field is designed to let partners inform Klarna of the purpose of the customer’s session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intent")]
		public System.Nullable<SessionIntent> Intent { get; set; }
		
		/// <summary>
		/// Used to define the language and region of the customer. The locale follows the format of (RFC 1766)[https://datatracker.ietf.org/doc/rfc1766/], meaning its value consists of language-country.
		///The following values are applicable:
		///
		///AT: "de-AT", "de-DE", "en-DE"
		///BE: "be-BE", "nl-BE", "fr-BE", "en-BE"
		///CH: "it-CH", "de-CH", "fr-CH", "en-CH"
		///DE: "de-DE", "de-AT", "en-DE"
		///DK: "da-DK", "en-DK"
		///ES: "es-ES", "ca-ES", "en-ES"
		///FI: "fi-FI", "sv-FI", "en-FI"
		///GB: "en-GB"
		///IT: "it-IT", "en-IT"
		///NL: "nl-NL", "en-NL"
		///NO: "nb-NO", "en-NO"
		///PL: "pl-PL", "en-PL"
		///SE: "sv-SE", "en-SE"
		///US: "en-US".
		/// Pattern: ^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)
		/// Max length: 6000
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_data")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(6000)]
		public string Merchant_data { get; set; }
		
		/// <summary>
		/// Used for storing merchant's internal order number or other reference.
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_reference1")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Merchant_reference1 { get; set; }
		
		/// <summary>
		/// Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters).
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_reference2")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Merchant_reference2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchant_urls")]
		public Merchant_urls Merchant_urls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Options Options { get; set; }
		
		/// <summary>
		/// Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_amount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> Order_amount { get; set; }
		
		/// <summary>
		/// The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_lines")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Order_line[] Order_lines { get; set; }
		
		/// <summary>
		/// Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_tax_amount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> Order_tax_amount { get; set; }
		
		/// <summary>
		/// Available payment method categories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_method_categories")]
		public Payment_method_category[] Payment_method_categories { get; set; }
		
		/// <summary>
		/// The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.
		/// Pattern: ^[A-Za-z]{2,2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchase_country")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{2,2}$")]
		public string Purchase_country { get; set; }
		
		/// <summary>
		/// The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.
		/// Pattern: ^[A-Za-z]{3,3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchase_currency")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{3,3}$")]
		public string Purchase_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public Address Shipping_address { get; set; }
		
		/// <summary>
		/// The current status of the session. Possible values: 'complete', 'incomplete' where 'complete' is set when the order has been placed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Create_order_requestStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SessionAcquiring_channel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ECOMMERCE")]
		ECOMMERCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_STORE")]
		IN_STORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TELESALES")]
		TELESALES = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SessionIntent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="buy")]
		buy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tokenize")]
		tokenize = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="buy_and_tokenize")]
		buy_and_tokenize = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Session_create
	{
		
		/// <summary>
		/// The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acquiring_channel")]
		public SessionAcquiring_channel Acquiring_channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachment")]
		public Attachment Attachment { get; set; }
		
		/// <summary>
		/// Authorization token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization_token")]
		public string Authorization_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		/// <summary>
		/// Token to be passed to the JS client
		/// Max length: 4096
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_token")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string Client_token { get; set; }
		
		/// <summary>
		/// Promo codes - The array could be used to define which of the configured payment options within a payment category (pay_later, pay_over_time, etc.) should be shown for this purchase. Discuss with the delivery manager to know about the promo codes that will be configured for your account. The feature could also be used to provide promotional offers to specific customers (eg: 0% financing). Please be informed that the usage of this feature can have commercial implications. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_payment_method_ids")]
		public string[] Custom_payment_method_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Customer Customer { get; set; }
		
		/// <summary>
		/// Design package to use in the session. This can only by used if a custom design has been implemented for Klarna Payments and agreed upon in the agreement. It might have a financial impact. Delivery manager will provide the value for the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="design")]
		public string Design { get; set; }
		
		/// <summary>
		/// Session expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public System.Nullable<System.DateTimeOffset> Expires_at { get; set; }
		
		/// <summary>
		/// Intent for the session. The field is designed to let partners inform Klarna of the purpose of the customer’s session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intent")]
		public SessionIntent Intent { get; set; }
		
		/// <summary>
		/// Used to define the language and region of the customer. The locale follows the format of (RFC 1766)[https://datatracker.ietf.org/doc/rfc1766/], meaning its value consists of language-country.
		///The following values are applicable:
		///
		///AT: "de-AT", "de-DE", "en-DE"
		///BE: "be-BE", "nl-BE", "fr-BE", "en-BE"
		///CH: "it-CH", "de-CH", "fr-CH", "en-CH"
		///DE: "de-DE", "de-AT", "en-DE"
		///DK: "da-DK", "en-DK"
		///ES: "es-ES", "ca-ES", "en-ES"
		///FI: "fi-FI", "sv-FI", "en-FI"
		///GB: "en-GB"
		///IT: "it-IT", "en-IT"
		///NL: "nl-NL", "en-NL"
		///NO: "nb-NO", "en-NO"
		///PL: "pl-PL", "en-PL"
		///SE: "sv-SE", "en-SE"
		///US: "en-US". Default value is "en-US".
		/// Pattern: ^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)
		/// Max length: 6000
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_data")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(6000)]
		public string Merchant_data { get; set; }
		
		/// <summary>
		/// Used for storing merchant's internal order number or other reference.
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_reference1")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Merchant_reference1 { get; set; }
		
		/// <summary>
		/// Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters).
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_reference2")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Merchant_reference2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchant_urls")]
		public Merchant_urls Merchant_urls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Options Options { get; set; }
		
		/// <summary>
		/// Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_amount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public long Order_amount { get; set; }
		
		/// <summary>
		/// The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order_lines")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Order_line[] Order_lines { get; set; }
		
		/// <summary>
		/// Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_tax_amount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> Order_tax_amount { get; set; }
		
		/// <summary>
		/// Available payment method categories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_method_categories")]
		public Payment_method_category[] Payment_method_categories { get; set; }
		
		/// <summary>
		/// The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.
		/// Required
		/// Pattern: ^[A-Za-z]{2,2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchase_country")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{2,2}$")]
		public string Purchase_country { get; set; }
		
		/// <summary>
		/// The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.
		/// Required
		/// Pattern: ^[A-Za-z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purchase_currency")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{3,3}$")]
		public string Purchase_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public Address Shipping_address { get; set; }
		
		/// <summary>
		/// The current status of the session. Possible values: 'complete', 'incomplete' where 'complete' is set when the order has been placed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Create_order_requestStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Session_read
	{
		
		/// <summary>
		/// The acquiring channel in which the session takes place. Ecommerce is default unless specified. Any other values should be defined in the agreement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="acquiring_channel")]
		public SessionAcquiring_channel Acquiring_channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachment")]
		public Attachment Attachment { get; set; }
		
		/// <summary>
		/// Authorization token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorization_token")]
		public string Authorization_token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billing_address")]
		public Address Billing_address { get; set; }
		
		/// <summary>
		/// Token to be passed to the JS client
		/// Max length: 4096
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_token")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string Client_token { get; set; }
		
		/// <summary>
		/// Promo codes - The array could be used to define which of the configured payment options within a payment category (pay_later, pay_over_time, etc.) should be shown for this purchase. Discuss with the delivery manager to know about the promo codes that will be configured for your account. The feature could also be used to provide promotional offers to specific customers (eg: 0% financing). Please be informed that the usage of this feature can have commercial implications. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_payment_method_ids")]
		public string[] Custom_payment_method_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customer")]
		public Customer_read Customer { get; set; }
		
		/// <summary>
		/// Design package to use in the session. This can only by used if a custom design has been implemented for Klarna Payments and agreed upon in the agreement. It might have a financial impact. Delivery manager will provide the value for the parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="design")]
		public string Design { get; set; }
		
		/// <summary>
		/// Session expiration date
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expires_at")]
		public System.Nullable<System.DateTimeOffset> Expires_at { get; set; }
		
		/// <summary>
		/// Intent for the session. The field is designed to let partners inform Klarna of the purpose of the customer’s session.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intent")]
		public SessionIntent Intent { get; set; }
		
		/// <summary>
		/// Used to define the language and region of the customer. The locale follows the format of (RFC 1766)[https://datatracker.ietf.org/doc/rfc1766/], meaning its value consists of language-country.
		///The following values are applicable:
		///
		///AT: "de-AT", "de-DE", "en-DE"
		///BE: "be-BE", "nl-BE", "fr-BE", "en-BE"
		///CH: "it-CH", "de-CH", "fr-CH", "en-CH"
		///DE: "de-DE", "de-AT", "en-DE"
		///DK: "da-DK", "en-DK"
		///ES: "es-ES", "ca-ES", "en-ES"
		///FI: "fi-FI", "sv-FI", "en-FI"
		///GB: "en-GB"
		///IT: "it-IT", "en-IT"
		///NL: "nl-NL", "en-NL"
		///NO: "nb-NO", "en-NO"
		///PL: "pl-PL", "en-PL"
		///SE: "sv-SE", "en-SE"
		///US: "en-US".
		/// Pattern: ^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{2,2}(?:-[A-Za-z]{2,2})*$")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Pass through field to send any information about the order to be used later for reference while retrieving the order details (max 6000 characters)
		/// Max length: 6000
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_data")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(6000)]
		public string Merchant_data { get; set; }
		
		/// <summary>
		/// Used for storing merchant's internal order number or other reference.
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_reference1")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Merchant_reference1 { get; set; }
		
		/// <summary>
		/// Used for storing merchant's internal order number or other reference. The value is available in the settlement files. (max 255 characters).
		/// Max length: 255
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merchant_reference2")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		public string Merchant_reference2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchant_urls")]
		public Merchant_urls Merchant_urls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Options Options { get; set; }
		
		/// <summary>
		/// Total amount of the order including tax and any available discounts. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_amount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> Order_amount { get; set; }
		
		/// <summary>
		/// The array containing list of line items that are part of this order. Maximum of 1000 line items could be processed in a single order.
		/// Minimum items: 1
		/// Maximum items: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_lines")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		public Order_line[] Order_lines { get; set; }
		
		/// <summary>
		/// Total tax amount of the order. The value should be in non-negative minor units. Eg: 25 Euros should be 2500.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="order_tax_amount")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> Order_tax_amount { get; set; }
		
		/// <summary>
		/// Available payment method categories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payment_method_categories")]
		public Payment_method_category[] Payment_method_categories { get; set; }
		
		/// <summary>
		/// The purchase country of the customer. The billing country always overrides purchase country if the values are different. Formatted according to ISO 3166 alpha-2 standard, e.g. GB, SE, DE, US, etc.
		/// Pattern: ^[A-Za-z]{2,2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchase_country")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{2,2}$")]
		public string Purchase_country { get; set; }
		
		/// <summary>
		/// The purchase currency of the order. Formatted according to ISO 4217 standard, e.g. USD, EUR, SEK, GBP, etc.
		/// Pattern: ^[A-Za-z]{3,3}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchase_currency")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{3,3}$")]
		public string Purchase_currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shipping_address")]
		public Address Shipping_address { get; set; }
		
		/// <summary>
		/// The current status of the session. Possible values: 'complete', 'incomplete' where 'complete' is set when the order has been placed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Create_order_requestStatus Status { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Cancel an existing authorization
		/// Use this API call to cancel/release an authorization. If the `authorization_token` received during a Klarna Payments won’t be used to place an order immediately you could release the authorization.
		/// Read more on **[Cancel an existing authorization](https://docs.klarna.com/klarna-payments/other-actions/cancel-an-authorization/)**.
		/// CancelAuthorization payments/v1/authorizations/{authorizationToken}
		/// </summary>
		public async Task CancelAuthorizationAsync(string authorizationToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payments/v1/authorizations/"+ (authorizationToken==null? "" : System.Uri.EscapeDataString(authorizationToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate a consumer token
		/// Use this API call to create a Klarna Customer Token.<br/>After having obtained an `authorization_token` for a successful authorization, this can be used to create a purchase token instead of placing the order. Creating a Klarna Customer Token results in Klarna storing customer and payment method details.
		/// Read more on **[Generate a consumer token](https://docs.klarna.com/klarna-payments/in-depth-knowledge/customer-token/)**.
		/// PurchaseToken payments/v1/authorizations/{authorizationToken}/customer-token
		/// </summary>
		/// <returns>Token was successfully created.</returns>
		public async Task<Customer_token_creation_response> PurchaseTokenAsync(string authorizationToken, Customer_token_creation_request requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payments/v1/authorizations/"+ (authorizationToken==null? "" : System.Uri.EscapeDataString(authorizationToken))+"/customer-token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Customer_token_creation_response>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a new order
		/// Use this API call to create a new order. Placing an order towards Klarna means that the Klarna Payments session will be closed and that an order will be created in Klarna's system.<br/>When you have received the `authorization_token` for a successful authorization you can place the order. Among the other order details in this request, you include a URL to the confirmation page for the customer.<br/>When the Order has been successfully placed at Klarna, you need to handle it either through the Merchant Portal or using [Klarna’s Order Management API](#order-management-api).
		/// Read more on **[Create a new order](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-3-create-an-order/)**.
		/// CreateOrder payments/v1/authorizations/{authorizationToken}/order
		/// </summary>
		/// <returns>Order was successfully created.</returns>
		public async Task<Order> CreateOrderAsync(string authorizationToken, Create_order_request requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payments/v1/authorizations/"+ (authorizationToken==null? "" : System.Uri.EscapeDataString(authorizationToken))+"/order";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Order>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a new payment session
		/// Use this API call to create a Klarna Payments session.<br/>When a session is created you will receive the available `payment_method_categories` for the session, a `session_id` and a `client_token`. The `session_id` can be used to read or update the session using the REST API. The `client_token` should be passed to the browser.
		/// Read more on **[Create a new payment session](https://docs.klarna.com/klarna-payments/integrate-with-klarna-payments/step-1-initiate-a-payment/)**.
		/// CreateCreditSession payments/v1/sessions
		/// </summary>
		/// <param name="requestBody">session_request</param>
		/// <returns>successful operation</returns>
		public async Task<Merchant_session> CreateCreditSessionAsync(Session_create requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payments/v1/sessions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Merchant_session>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Read an existing payment session
		/// Use this API call to read a Klarna Payments session. You can read the Klarna Payments session at any time after it has been created, to get information about it. This will return all data that has been collected during the session.
		/// Read more on **[Read an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/check-the-details-of-a-payment-session/)**.
		/// ReadCreditSession payments/v1/sessions/{session_id}
		/// </summary>
		/// <param name="session_id">session_id</param>
		/// <returns>successful operation</returns>
		public async Task<Session_read> ReadCreditSessionAsync(string session_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payments/v1/sessions/"+ (session_id==null? "" : System.Uri.EscapeDataString(session_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Session_read>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing payment session
		/// Use this API call to update a Klarna Payments session with new details, in case something in the order has changed and the checkout has been reloaded. Including if the consumer adds a new item to the cart or if consumer details are updated.
		/// Read more on **[Update an existing payment session](https://docs.klarna.com/klarna-payments/other-actions/update-the-cart/)**.
		/// UpdateCreditSession payments/v1/sessions/{session_id}
		/// </summary>
		/// <param name="session_id">session_id</param>
		/// <param name="requestBody">session_request</param>
		public async Task UpdateCreditSessionAsync(string session_id, Session requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payments/v1/sessions/"+ (session_id==null? "" : System.Uri.EscapeDataString(session_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
