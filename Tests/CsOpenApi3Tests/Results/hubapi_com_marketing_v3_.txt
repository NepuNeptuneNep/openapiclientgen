//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchInputMarketingEventCreateRequestParams
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public MarketingEventCreateRequestParams[] Inputs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarketingEventCreateRequestParams
	{
		
		/// <summary>
		/// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
		///In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customProperties")]
		public PropertyValue[] CustomProperties { get; set; }
		
		/// <summary>
		/// The end date and time of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		/// <summary>
		/// Indicates if the marketing event has been cancelled.  Defaults to `false`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventCancelled")]
		public System.Nullable<System.Boolean> EventCancelled { get; set; }
		
		/// <summary>
		/// The description of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventDescription")]
		public string EventDescription { get; set; }
		
		/// <summary>
		/// The name of the marketing event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		/// <summary>
		/// The name of the organizer of the marketing event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventOrganizer")]
		public string EventOrganizer { get; set; }
		
		/// <summary>
		/// Describes what type of event this is.  For example: `WEBINAR`, `CONFERENCE`, `WORKSHOP`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		/// <summary>
		/// A URL in the external event application where the marketing event can be managed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventUrl")]
		public string EventUrl { get; set; }
		
		/// <summary>
		/// The accountId that is associated with this marketing event in the external event application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="externalAccountId")]
		public string ExternalAccountId { get; set; }
		
		/// <summary>
		/// The id of the marketing event in the external event application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="externalEventId")]
		public string ExternalEventId { get; set; }
		
		/// <summary>
		/// The start date and time of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PropertyValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="isLargeValue")]
		public System.Nullable<System.Boolean> IsLargeValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="persistenceTimestamp")]
		public System.Nullable<System.Int64> PersistenceTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectedByUser")]
		public bool SelectedByUser { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="selectedByUserTimestamp")]
		public long SelectedByUserTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public PropertyValueSource Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceId")]
		public string SourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceLabel")]
		public string SourceLabel { get; set; }
		
		/// <summary>
		/// Source metadata encoded as a base64 string. For example: `ZXhhbXBsZSBzdHJpbmc=`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceMetadata")]
		public string SourceMetadata { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sourceVid")]
		public int[] SourceVid { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public long Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedByUserId")]
		public System.Nullable<System.Int32> UpdatedByUserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="useTimestampAsPersistenceTimestamp")]
		public System.Nullable<System.Boolean> UseTimestampAsPersistenceTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PropertyValueSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMPORT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		API = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANALYTICS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIGRATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALESFORCE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRATION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS_WEB = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WAL_INCREMENTAL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOWS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CALCULATED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOCIAL = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATCH_UPDATE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNALS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIDEN = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANIES = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEALS = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSISTS = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRESENTATIONS = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TALLY = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIDEKICK = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRM_UI = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERGE_CONTACTS = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PORTAL_USER_ASSOCIATOR = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRATIONS_PLATFORM = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BCC_TO_CRM = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORWARD_TO_CRM = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGAGEMENTS = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALES = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEISENBERG = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEADIN = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GMAIL_INTEGRATION = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACADEMY = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALES_MESSAGES = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVATARS_SERVICE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERGE_COMPANIES = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEQUENCES = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY_FAMILIES = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE_IOS = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE_ANDROID = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACTS = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSOCIATIONS = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTENSION = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOT = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEGRATIONS_SYNC = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTOMATION_PLATFORM = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVERSATIONS = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL_INTEGRATION = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_MEMBERSHIP = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUOTES = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BET_ASSIGNMENT = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUOTAS = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BET_CRM_CONNECTOR = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEETINGS = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERGE_OBJECTS = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECYCLING_BIN = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADS = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AI_GROUP = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMUNICATOR = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SETTINGS = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROPERTY_SETTINGS = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIPELINE_SETTINGS = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPANY_INSIGHTS = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEHAVIORAL_EVENTS = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENTS = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOALS = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PORTAL_OBJECT_SYNC = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVALS = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILE_MANAGER = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MARKETPLACE = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_PROCESSING = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORECASTING = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SLACK_INTEGRATION = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRM_UI_BULK_ACTION = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_CONTACT_DELETE_ACTION = 78,
	}
	
	/// <summary>
	/// List of marketing event details to create or update
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchInputMarketingEventEmailSubscriber
	{
		
		/// <summary>
		/// List of marketing event details to create or update
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public MarketingEventEmailSubscriber[] Inputs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarketingEventEmailSubscriber
	{
		
		[System.Runtime.Serialization.DataMember(Name="contactProperties")]
		public System.Collections.Generic.Dictionary<string, string> ContactProperties { get; set; }
		
		/// <summary>
		/// The email address of the contact in HubSpot to associate with the event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The date and time at which the contact subscribed to the event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactionDateTime")]
		public long InteractionDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchInputMarketingEventExternalUniqueIdentifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public MarketingEventExternalUniqueIdentifier[] Inputs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarketingEventExternalUniqueIdentifier
	{
		
		/// <summary>
		/// The id of the application that created the marketing event in HubSpot.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public int AppId { get; set; }
		
		/// <summary>
		/// The accountId that is associated with this marketing event in the external event application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="externalAccountId")]
		public string ExternalAccountId { get; set; }
		
		/// <summary>
		/// The id of the marketing event in the external event application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="externalEventId")]
		public string ExternalEventId { get; set; }
	}
	
	/// <summary>
	/// List of HubSpot contacts to subscribe to the marketing event
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchInputMarketingEventSubscriber
	{
		
		/// <summary>
		/// List of HubSpot contacts to subscribe to the marketing event
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public MarketingEventSubscriber[] Inputs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarketingEventSubscriber
	{
		
		/// <summary>
		/// The date and time at which the contact subscribed to the event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interactionDateTime")]
		public long InteractionDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vid")]
		public System.Nullable<System.Int32> Vid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchResponseMarketingEventPublicDefaultResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="completedAt")]
		public System.DateTimeOffset CompletedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public StandardError[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public System.Collections.Generic.Dictionary<string, string> Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numErrors")]
		public System.Nullable<System.Int32> NumErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedAt")]
		public System.Nullable<System.DateTimeOffset> RequestedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public MarketingEventPublicDefaultResponse[] Results { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public System.DateTimeOffset StartedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BatchResponseMarketingEventPublicDefaultResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StandardError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="context")]
		public System.Collections.Generic.Dictionary<string, string[]> Context { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorDetail[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="links")]
		public System.Collections.Generic.Dictionary<string, string> Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subCategory")]
		public string SubCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorDetail
	{
		
		/// <summary>
		/// The status code associated with the error detail
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Context about the error condition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public System.Collections.Generic.Dictionary<string, string[]> Context { get; set; }
		
		/// <summary>
		/// The name of the field or parameter in which the error was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="in")]
		public string In { get; set; }
		
		/// <summary>
		/// A human readable message describing the error along with remediation steps where appropriate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A specific category that contains more specific detail about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCategory")]
		public string SubCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarketingEventPublicDefaultResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
		///In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customProperties")]
		public PropertyValue[] CustomProperties { get; set; }
		
		/// <summary>
		/// The end date and time of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		/// <summary>
		/// Indicates if the marketing event has been cancelled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventCancelled")]
		public System.Nullable<System.Boolean> EventCancelled { get; set; }
		
		/// <summary>
		/// The description of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventDescription")]
		public string EventDescription { get; set; }
		
		/// <summary>
		/// The name of the marketing event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		/// <summary>
		/// The name of the organizer of the marketing event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventOrganizer")]
		public string EventOrganizer { get; set; }
		
		/// <summary>
		/// The type of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		/// <summary>
		/// A URL in the external event application where the marketing event can be managed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventUrl")]
		public string EventUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The start date and time of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BatchResponseMarketingEventPublicDefaultResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchResponseSubscriberEmailResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="completedAt")]
		public System.DateTimeOffset CompletedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public StandardError[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public System.Collections.Generic.Dictionary<string, string> Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numErrors")]
		public System.Nullable<System.Int32> NumErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedAt")]
		public System.Nullable<System.DateTimeOffset> RequestedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public SubscriberEmailResponse[] Results { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public System.DateTimeOffset StartedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BatchResponseMarketingEventPublicDefaultResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriberEmailResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vid")]
		public int Vid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchResponseSubscriberVidResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="completedAt")]
		public System.DateTimeOffset CompletedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public StandardError[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public System.Collections.Generic.Dictionary<string, string> Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numErrors")]
		public System.Nullable<System.Int32> NumErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedAt")]
		public System.Nullable<System.DateTimeOffset> RequestedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public SubscriberVidResponse[] Results { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public System.DateTimeOffset StartedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BatchResponseMarketingEventPublicDefaultResponseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubscriberVidResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vid")]
		public int Vid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public MarketingEventExternalUniqueIdentifier[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// The error category
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Context about the error condition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public System.Collections.Generic.Dictionary<string, string[]> Context { get; set; }
		
		/// <summary>
		/// A unique identifier for the request. Include this value with any error reports or support tickets
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="correlationId")]
		public string CorrelationId { get; set; }
		
		/// <summary>
		/// further information about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorDetail[] Errors { get; set; }
		
		/// <summary>
		/// A map of link names to associated URIs containing documentation about the error or recommended remediation steps
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public System.Collections.Generic.Dictionary<string, string> Links { get; set; }
		
		/// <summary>
		/// A human readable message describing the error along with remediation steps where appropriate
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// A specific category that contains more specific detail about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subCategory")]
		public string SubCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventDetailSettings
	{
		
		/// <summary>
		/// The id of the application the settings are for
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public int AppId { get; set; }
		
		/// <summary>
		/// The url that will be used to fetch marketing event details by id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventDetailsUrl")]
		public string EventDetailsUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventDetailSettingsUrl
	{
		
		/// <summary>
		/// The url that will be used to fetch marketing event details by id. Must contain a `%s` character sequence that will be substituted with the event id. For example: `https://my.event.app/events/%s`
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventDetailsUrl")]
		public string EventDetailsUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarketingEventCompleteRequestParams
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.DateTimeOffset EndDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.DateTimeOffset StartDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarketingEventDefaultResponse
	{
		
		/// <summary>
		/// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
		///In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customProperties")]
		public PropertyValue[] CustomProperties { get; set; }
		
		/// <summary>
		/// The end date and time of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		/// <summary>
		/// Indicates if the marketing event has been cancelled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventCancelled")]
		public System.Nullable<System.Boolean> EventCancelled { get; set; }
		
		/// <summary>
		/// The description of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventDescription")]
		public string EventDescription { get; set; }
		
		/// <summary>
		/// The name of the marketing event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		/// <summary>
		/// The name of the organizer of the marketing event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventOrganizer")]
		public string EventOrganizer { get; set; }
		
		/// <summary>
		/// The type of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		/// <summary>
		/// The URL in the external event application where the marketing event can be managed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventUrl")]
		public string EventUrl { get; set; }
		
		/// <summary>
		/// The start date and time of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarketingEventPublicReadResponse
	{
		
		/// <summary>
		/// The number of HubSpot contacts that attended this marketing event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attendees")]
		public int Attendees { get; set; }
		
		/// <summary>
		/// The number of HubSpot contacts that registered for this marketing event, but later cancelled their registration.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cancellations")]
		public int Cancellations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
		///In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customProperties")]
		public PropertyValue[] CustomProperties { get; set; }
		
		/// <summary>
		/// The end date and time of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		/// <summary>
		/// Indicates if the marketing event has been cancelled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventCancelled")]
		public System.Nullable<System.Boolean> EventCancelled { get; set; }
		
		/// <summary>
		/// The description of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventDescription")]
		public string EventDescription { get; set; }
		
		/// <summary>
		/// The name of the marketing event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		/// <summary>
		/// The name of the organizer of the marketing event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventOrganizer")]
		public string EventOrganizer { get; set; }
		
		/// <summary>
		/// The type of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		/// <summary>
		/// A URL in the external event application where the marketing event can be managed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventUrl")]
		public string EventUrl { get; set; }
		
		/// <summary>
		/// The id of the marketing event in the external event application.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="externalEventId")]
		public string ExternalEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The number of HubSpot contacts that registered for this marketing event, but did not attend. This field only had a value when the event is over.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="noShows")]
		public int NoShows { get; set; }
		
		/// <summary>
		/// The number of HubSpot contacts that registered for this marketing event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="registrants")]
		public int Registrants { get; set; }
		
		/// <summary>
		/// The start date and time of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarketingEventUpdateRequestParams
	{
		
		/// <summary>
		/// A list of PropertyValues. These can be whatever kind of property names and values you want. However, they must already exist on the HubSpot account's definition of the MarketingEvent Object. If they don't they will be filtered out and not set.
		///In order to do this you'll need to create a new PropertyGroup on the HubSpot account's MarketingEvent object for your specific app and create the Custom Property you want to track on that HubSpot account. Do not create any new default properties on the MarketingEvent object as that will apply to all HubSpot accounts.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customProperties")]
		public PropertyValue[] CustomProperties { get; set; }
		
		/// <summary>
		/// The end date and time of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		/// <summary>
		/// Indicates if the marketing event has been cancelled. Defaults to `false`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventCancelled")]
		public System.Nullable<System.Boolean> EventCancelled { get; set; }
		
		/// <summary>
		/// The description of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventDescription")]
		public string EventDescription { get; set; }
		
		/// <summary>
		/// The name of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventName")]
		public string EventName { get; set; }
		
		/// <summary>
		/// The name of the organizer of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventOrganizer")]
		public string EventOrganizer { get; set; }
		
		/// <summary>
		/// Describes what type of event this is.  For example: `WEBINAR`, `CONFERENCE`, `WORKSHOP`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		/// <summary>
		/// A URL in the external event application where the marketing event can be managed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventUrl")]
		public string EventUrl { get; set; }
		
		/// <summary>
		/// The start date and time of the marketing event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Record
		/// Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids.
		/// Post_SlashmarketingSlashv3Slashmarketing_eventsSlashattendanceSlashexternalEventIdSlashsubscriberStateSlashcreate_create marketing/v3/marketing-events/attendance/{externalEventId}/{subscriberState}/create
		/// </summary>
		/// <param name="externalEventId">The id of the marketing event</param>
		/// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: 'register', 'attend' or 'cancel'.</param>
		/// <param name="externalAccountId">The account id associated with the marketing event</param>
		/// <param name="requestBody">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
		/// <returns>successful operation</returns>
		public async Task<BatchResponseSubscriberVidResponse> Post_SlashmarketingSlashv3Slashmarketing_eventsSlashattendanceSlashexternalEventIdSlashsubscriberStateSlashcreate_createAsync(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventSubscriber requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/attendance/"+ (externalEventId==null? "" : System.Uri.EscapeDataString(externalEventId))+"/"+ (subscriberState==null? "" : System.Uri.EscapeDataString(subscriberState))+"/create&externalAccountId=" + (externalAccountId==null? "" : System.Uri.EscapeDataString(externalAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchResponseSubscriberVidResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Record
		/// Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. If contact is not present it will be automatically created.
		/// Post_SlashmarketingSlashv3Slashmarketing_eventsSlashattendanceSlashexternalEventIdSlashsubscriberStateSlashemail_create_createByEmail marketing/v3/marketing-events/attendance/{externalEventId}/{subscriberState}/email-create
		/// </summary>
		/// <param name="externalEventId">The id of the marketing event</param>
		/// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event. For example: 'register', 'attend' or 'cancel'.</param>
		/// <param name="externalAccountId">The account id associated with the marketing event</param>
		/// <param name="requestBody">The details of the contacts to subscribe to the event. Parameters of join and left time if state is Attended.</param>
		/// <returns>successful operation</returns>
		public async Task<BatchResponseSubscriberEmailResponse> Post_SlashmarketingSlashv3Slashmarketing_eventsSlashattendanceSlashexternalEventIdSlashsubscriberStateSlashemail_create_createByEmailAsync(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventEmailSubscriber requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/attendance/"+ (externalEventId==null? "" : System.Uri.EscapeDataString(externalEventId))+"/"+ (subscriberState==null? "" : System.Uri.EscapeDataString(subscriberState))+"/email-create&externalAccountId=" + (externalAccountId==null? "" : System.Uri.EscapeDataString(externalAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchResponseSubscriberEmailResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a marketing event
		/// Creates a new marketing event in HubSpot
		/// Post_SlashmarketingSlashv3Slashmarketing_eventsSlashevents_create marketing/v3/marketing-events/events
		/// </summary>
		/// <param name="requestBody">The details of the marketing event to create</param>
		/// <returns>successful operation</returns>
		public async Task<MarketingEventDefaultResponse> Post_SlashmarketingSlashv3Slashmarketing_eventsSlashevents_createAsync(MarketingEventCreateRequestParams requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/events";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MarketingEventDefaultResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete multiple marketing events
		/// Bulk delete a number of marketing events in HubSpot
		/// Post_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashdelete_archiveBatch marketing/v3/marketing-events/events/delete
		/// </summary>
		/// <param name="requestBody">The details of the marketing events to delete</param>
		public async Task Post_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashdelete_archiveBatchAsync(BatchInputMarketingEventExternalUniqueIdentifier requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/events/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for marketing events
		/// Search for marketing events that have an event id that starts with the query string
		/// Get_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashsearch_doSearch marketing/v3/marketing-events/events/search
		/// </summary>
		/// <param name="q">The id of the marketing event in the external event application</param>
		/// <returns>successful operation</returns>
		public async Task<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging> Get_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashsearch_doSearchAsync(string q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/events/search?q=" + (q==null? "" : System.Uri.EscapeDataString(q));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CollectionResponseMarketingEventExternalUniqueIdentifierNoPaging>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update multiple marketing events
		/// Upset multiple Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
		/// Post_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashupsert_doUpsert marketing/v3/marketing-events/events/upsert
		/// </summary>
		/// <param name="requestBody">The details of the marketing events to upsert</param>
		/// <returns>successful operation</returns>
		public async Task<BatchResponseMarketingEventPublicDefaultResponse> Post_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashupsert_doUpsertAsync(BatchInputMarketingEventCreateRequestParams requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/events/upsert";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchResponseMarketingEventPublicDefaultResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a marketing event
		/// Deletes an existing Marketing Event with the specified id, if one exists.
		/// Delete_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventId_archive marketing/v3/marketing-events/events/{externalEventId}
		/// </summary>
		/// <param name="externalEventId">The id of the marketing event to delete</param>
		/// <param name="externalAccountId">The account id associated with the marketing event</param>
		public async Task Delete_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventId_archiveAsync(string externalEventId, string externalAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/events/"+ (externalEventId==null? "" : System.Uri.EscapeDataString(externalEventId))+"&externalAccountId=" + (externalAccountId==null? "" : System.Uri.EscapeDataString(externalAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a marketing event
		/// Returns the details of the Marketing Event with the specified id, if one exists.
		/// Get_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventId_getById marketing/v3/marketing-events/events/{externalEventId}
		/// </summary>
		/// <param name="externalEventId">The id of the marketing event to return</param>
		/// <param name="externalAccountId">The account id associated with the marketing event</param>
		/// <returns>successful operation</returns>
		public async Task<MarketingEventPublicReadResponse> Get_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventId_getByIdAsync(string externalEventId, string externalAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/events/"+ (externalEventId==null? "" : System.Uri.EscapeDataString(externalEventId))+"&externalAccountId=" + (externalAccountId==null? "" : System.Uri.EscapeDataString(externalAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MarketingEventPublicReadResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a marketing event
		/// Updates an existing Marketing Event with the specified id, if one exists.
		/// Patch_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventId_update marketing/v3/marketing-events/events/{externalEventId}
		/// </summary>
		/// <param name="externalEventId">The id of the marketing event to update</param>
		/// <param name="externalAccountId">The account id associated with the marketing event</param>
		/// <param name="requestBody">The details of the marketing event to update</param>
		/// <returns>successful operation</returns>
		public async Task<MarketingEventPublicDefaultResponse> Patch_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventId_updateAsync(string externalEventId, string externalAccountId, MarketingEventUpdateRequestParams requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/events/"+ (externalEventId==null? "" : System.Uri.EscapeDataString(externalEventId))+"&externalAccountId=" + (externalAccountId==null? "" : System.Uri.EscapeDataString(externalAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MarketingEventPublicDefaultResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or update a marketing event
		/// Upsets a Marketing Event. If there is an existing Marketing event with the specified id, it will be updated; otherwise a new event will be created.
		/// Put_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventId_replace marketing/v3/marketing-events/events/{externalEventId}
		/// </summary>
		/// <param name="externalEventId">The id of the marketing event to upsert</param>
		/// <param name="requestBody">The details of the marketing event to upsert</param>
		/// <returns>successful operation</returns>
		public async Task<MarketingEventPublicDefaultResponse> Put_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventId_replaceAsync(string externalEventId, MarketingEventCreateRequestParams requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/events/"+ (externalEventId==null? "" : System.Uri.EscapeDataString(externalEventId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MarketingEventPublicDefaultResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Mark a marketing event as cancelled
		/// Mark a marketing event as cancelled.
		/// Post_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventIdSlashcancel_doCancel marketing/v3/marketing-events/events/{externalEventId}/cancel
		/// </summary>
		/// <param name="externalEventId">The id of the marketing event to mark as cancelled</param>
		/// <param name="externalAccountId">The account id associated with the marketing event</param>
		/// <returns>successful operation</returns>
		public async Task<MarketingEventDefaultResponse> Post_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventIdSlashcancel_doCancelAsync(string externalEventId, string externalAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/events/"+ (externalEventId==null? "" : System.Uri.EscapeDataString(externalEventId))+"/cancel&externalAccountId=" + (externalAccountId==null? "" : System.Uri.EscapeDataString(externalAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MarketingEventDefaultResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Post_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventIdSlashcomplete_complete marketing/v3/marketing-events/events/{externalEventId}/complete
		/// </summary>
		/// <returns>successful operation</returns>
		public async Task<MarketingEventDefaultResponse> Post_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventIdSlashcomplete_completeAsync(string externalEventId, string externalAccountId, MarketingEventCompleteRequestParams requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/events/"+ (externalEventId==null? "" : System.Uri.EscapeDataString(externalEventId))+"/complete&externalAccountId=" + (externalAccountId==null? "" : System.Uri.EscapeDataString(externalAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<MarketingEventDefaultResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Record
		/// Record a subscription state between multiple HubSpot contacts and a marketing event, using contact email addresses. Note that the contact must already exist in HubSpot; a contact will not be created.
		/// Post_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventIdSlashsubscriberStateSlashemail_upsert_doEmailUpsertById marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/email-upsert
		/// </summary>
		/// <param name="externalEventId">The id of the marketing event</param>
		/// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event</param>
		/// <param name="externalAccountId">The account id associated with the marketing event</param>
		/// <param name="requestBody">The details of the contacts to subscribe to the event</param>
		public async Task Post_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventIdSlashsubscriberStateSlashemail_upsert_doEmailUpsertByIdAsync(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventEmailSubscriber requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/events/"+ (externalEventId==null? "" : System.Uri.EscapeDataString(externalEventId))+"/"+ (subscriberState==null? "" : System.Uri.EscapeDataString(subscriberState))+"/email-upsert&externalAccountId=" + (externalAccountId==null? "" : System.Uri.EscapeDataString(externalAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Record
		/// Record a subscription state between multiple HubSpot contacts and a marketing event, using HubSpot contact ids. Note that the contact must already exist in HubSpot; a contact will not be create.
		/// Post_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventIdSlashsubscriberStateSlashupsert_doUpsertById marketing/v3/marketing-events/events/{externalEventId}/{subscriberState}/upsert
		/// </summary>
		/// <param name="externalEventId">The id of the marketing event</param>
		/// <param name="subscriberState">The new subscriber state for the HubSpot contacts and the specified marketing event</param>
		/// <param name="externalAccountId">The account id associated with the marketing event</param>
		/// <param name="requestBody">The details of the contacts to subscribe to the event</param>
		public async Task Post_SlashmarketingSlashv3Slashmarketing_eventsSlasheventsSlashexternalEventIdSlashsubscriberStateSlashupsert_doUpsertByIdAsync(string externalEventId, string subscriberState, string externalAccountId, BatchInputMarketingEventSubscriber requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/events/"+ (externalEventId==null? "" : System.Uri.EscapeDataString(externalEventId))+"/"+ (subscriberState==null? "" : System.Uri.EscapeDataString(subscriberState))+"/upsert&externalAccountId=" + (externalAccountId==null? "" : System.Uri.EscapeDataString(externalAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the application settings
		/// Retrieve the current settings for the application.
		/// Get_SlashmarketingSlashv3Slashmarketing_eventsSlashappIdSlashsettings_getAll marketing/v3/marketing-events/{appId}/settings
		/// </summary>
		/// <param name="appId">The id of the application to retrieve the settings for.</param>
		/// <returns>successful operation</returns>
		public async Task<EventDetailSettings> Get_SlashmarketingSlashv3Slashmarketing_eventsSlashappIdSlashsettings_getAllAsync(int appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/"+appId+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventDetailSettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the application settings
		/// Create or update the current settings for the application.
		/// Post_SlashmarketingSlashv3Slashmarketing_eventsSlashappIdSlashsettings_create marketing/v3/marketing-events/{appId}/settings
		/// </summary>
		/// <param name="appId">The id of the application to update the settings for.</param>
		/// <param name="requestBody">The new application settings</param>
		/// <returns>successful operation</returns>
		public async Task<EventDetailSettings> Post_SlashmarketingSlashv3Slashmarketing_eventsSlashappIdSlashsettings_createAsync(int appId, EventDetailSettingsUrl requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "marketing/v3/marketing-events/"+appId+"/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EventDetailSettings>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
