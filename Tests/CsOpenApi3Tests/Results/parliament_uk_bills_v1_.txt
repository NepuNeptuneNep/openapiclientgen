//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AmendmentDecision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NoDecision")]
		NoDecision = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Withdrawn")]
		Withdrawn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Disagreed")]
		Disagreed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotMoved")]
		NotMoved = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Agreed")]
		Agreed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmendmentDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="amendmentId")]
		public System.Nullable<System.Int32> AmendmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendmentLines")]
		public AmendmentLine[] AmendmentLines { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendmentNote")]
		public string AmendmentNote { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendmentPosition")]
		public string AmendmentPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendmentType")]
		public System.Nullable<AmendmentDetailAmendmentType> AmendmentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billId")]
		public System.Nullable<System.Int32> BillId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billStageId")]
		public System.Nullable<System.Int32> BillStageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clause")]
		public System.Nullable<System.Int32> Clause { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="decision")]
		public AmendmentDecision Decision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="explanatoryText")]
		public string ExplanatoryText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="explanatoryTextPrefix")]
		public string ExplanatoryTextPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineNumber")]
		public System.Nullable<System.Int32> LineNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marshalledListText")]
		public string MarshalledListText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Int32> Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sponsors")]
		public AmendmentMember[] Sponsors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmendmentLine
	{
		
		[System.Runtime.Serialization.DataMember(Name="hangingIndentation")]
		public string HangingIndentation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageType")]
		public string ImageType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indentation")]
		public System.Nullable<System.Int32> Indentation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isImage")]
		public System.Nullable<System.Boolean> IsImage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AmendmentDetailAmendmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EditLongTitle")]
		EditLongTitle = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EditBillBody")]
		EditBillBody = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AddClauseOrSchedule")]
		AddClauseOrSchedule = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteClauseOrSchedule")]
		DeleteClauseOrSchedule = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmendmentMember
	{
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public System.Nullable<AmendmentMemberHouse> House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isLead")]
		public System.Nullable<System.Boolean> IsLead { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberFrom")]
		public string MemberFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberId")]
		public System.Nullable<System.Int32> MemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberPage")]
		public string MemberPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberPhoto")]
		public string MemberPhoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party")]
		public string Party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partyColour")]
		public string PartyColour { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AmendmentMemberHouse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="All")]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Commons")]
		Commons = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lords")]
		Lords = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unassigned")]
		Unassigned = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmendmentSearchItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="amendmentId")]
		public System.Nullable<System.Int32> AmendmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendmentPosition")]
		public string AmendmentPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amendmentType")]
		public AmendmentDetailAmendmentType AmendmentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billId")]
		public System.Nullable<System.Int32> BillId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billStageId")]
		public System.Nullable<System.Int32> BillStageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clause")]
		public System.Nullable<System.Int32> Clause { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="decision")]
		public AmendmentDecision Decision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lineNumber")]
		public System.Nullable<System.Int32> LineNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marshalledListText")]
		public string MarshalledListText { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public System.Nullable<System.Int32> Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sponsors")]
		public AmendmentMember[] Sponsors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summaryText")]
		public string[] SummaryText { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AmendmentSearchItemSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AmendmentSearchItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AmendmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EditLongTitle")]
		EditLongTitle = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EditBillBody")]
		EditBillBody = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AddClauseOrSchedule")]
		AddClauseOrSchedule = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteClauseOrSchedule")]
		DeleteClauseOrSchedule = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bill
	{
		
		[System.Runtime.Serialization.DataMember(Name="agent")]
		public BillAgent Agent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billId")]
		public System.Nullable<System.Int32> BillId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billTypeId")]
		public System.Nullable<System.Int32> BillTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billWithdrawn")]
		public System.Nullable<System.DateTimeOffset> BillWithdrawn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentHouse")]
		public AmendmentMemberHouse CurrentHouse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentStage")]
		public StageSummary CurrentStage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includedSessionIds")]
		public int[] IncludedSessionIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="introducedSessionId")]
		public System.Nullable<System.Int32> IntroducedSessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAct")]
		public System.Nullable<System.Boolean> IsAct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefeated")]
		public System.Nullable<System.Boolean> IsDefeated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdate")]
		public System.Nullable<System.DateTimeOffset> LastUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longTitle")]
		public string LongTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originatingHouse")]
		public AmendmentMemberHouse OriginatingHouse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="petitionInformation")]
		public string PetitionInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="petitioningPeriod")]
		public string PetitioningPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="promoters")]
		public Promoter[] Promoters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shortTitle")]
		public string ShortTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sponsors")]
		public Sponsor[] Sponsors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillAgent
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneNo")]
		public string PhoneNo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StageSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public AmendmentMemberHouse House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public System.Nullable<System.Int32> SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stageId")]
		public System.Nullable<System.Int32> StageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stageSittings")]
		public BillStageSitting[] StageSittings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillStageSitting
	{
		
		[System.Runtime.Serialization.DataMember(Name="billId")]
		public System.Nullable<System.Int32> BillId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billStageId")]
		public System.Nullable<System.Int32> BillStageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stageId")]
		public System.Nullable<System.Int32> StageId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Promoter
	{
		
		[System.Runtime.Serialization.DataMember(Name="organisationName")]
		public string OrganisationName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organisationUrl")]
		public string OrganisationUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sponsor
	{
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public Member Member { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organisation")]
		public Organisation Organisation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Member
	{
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public AmendmentMemberHouse House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberFrom")]
		public string MemberFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberId")]
		public System.Nullable<System.Int32> MemberId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberPage")]
		public string MemberPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberPhoto")]
		public string MemberPhoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="party")]
		public string Party { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partyColour")]
		public string PartyColour { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Organisation
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillPublication
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayDate")]
		public System.Nullable<System.DateTimeOffset> DisplayDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="files")]
		public PublicationDocument[] Files { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public AmendmentMemberHouse House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PublicationLink[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicationType")]
		public PublicationType PublicationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicationDocument
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentLength")]
		public System.Nullable<System.Int32> ContentLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicationLink
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicationType
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillPublicationList
	{
		
		[System.Runtime.Serialization.DataMember(Name="billId")]
		public System.Nullable<System.Int32> BillId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publications")]
		public BillPublication[] Publications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BillSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TitleAscending")]
		TitleAscending = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TitleDescending")]
		TitleDescending = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DateUpdatedAscending")]
		DateUpdatedAscending = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DateUpdatedDescending")]
		DateUpdatedDescending = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillStageDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="committee")]
		public Committee Committee { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public AmendmentMemberHouse House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdate")]
		public System.Nullable<System.DateTimeOffset> LastUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextStageBillStageId")]
		public System.Nullable<System.Int32> NextStageBillStageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousStageBillStageId")]
		public System.Nullable<System.Int32> PreviousStageBillStageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public System.Nullable<System.Int32> SessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stageId")]
		public System.Nullable<System.Int32> StageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stageSittings")]
		public BillStageSitting[] StageSittings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Committee
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public System.Nullable<CommitteeHouse> House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CommitteeHouse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Commons")]
		Commons = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lords")]
		Lords = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Joint")]
		Joint = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillStagePublicationList
	{
		
		[System.Runtime.Serialization.DataMember(Name="billStageId")]
		public System.Nullable<System.Int32> BillStageId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publications")]
		public Publication[] Publications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sittings")]
		public BillStageSittingPublicationList[] Sittings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Publication
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayDate")]
		public System.Nullable<System.DateTimeOffset> DisplayDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="files")]
		public PublicationDocument[] Files { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public PublicationLink[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicationType")]
		public PublicationType PublicationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillStageSittingPublicationList
	{
		
		[System.Runtime.Serialization.DataMember(Name="publications")]
		public Publication[] Publications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sittingId")]
		public System.Nullable<System.Int32> SittingId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillStageSittingSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public BillStageSitting[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="billId")]
		public System.Nullable<System.Int32> BillId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billTypeId")]
		public System.Nullable<System.Int32> BillTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billWithdrawn")]
		public System.Nullable<System.DateTimeOffset> BillWithdrawn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentHouse")]
		public AmendmentMemberHouse CurrentHouse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentStage")]
		public StageSummary CurrentStage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includedSessionIds")]
		public int[] IncludedSessionIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="introducedSessionId")]
		public System.Nullable<System.Int32> IntroducedSessionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAct")]
		public System.Nullable<System.Boolean> IsAct { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefeated")]
		public System.Nullable<System.Boolean> IsDefeated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdate")]
		public System.Nullable<System.DateTimeOffset> LastUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originatingHouse")]
		public AmendmentMemberHouse OriginatingHouse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shortTitle")]
		public string ShortTitle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillSummarySearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public BillSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillType
	{
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<BillTypeCategory> Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BillTypeCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Public")]
		Public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Private")]
		Private = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hybrid")]
		Hybrid = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BillTypeSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public BillType[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Decision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="All")]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NoDecision")]
		NoDecision = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Withdrawn")]
		Withdrawn = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Disagreed")]
		Disagreed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NotMoved")]
		NotMoved = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Agreed")]
		Agreed = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum House
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="All")]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Commons")]
		Commons = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lords")]
		Lords = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unassigned")]
		Unassigned = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewsArticlesSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayDate")]
		public System.Nullable<System.DateTimeOffset> DisplayDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewsArticlesSummarySearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public NewsArticlesSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OriginatingHouse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="All")]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Commons")]
		Commons = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Lords")]
		Lords = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProblemDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PublicationTypeSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public PublicationType[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StageReference
	{
		
		[System.Runtime.Serialization.DataMember(Name="house")]
		public AmendmentMemberHouse House { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StageReferenceSearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public StageReference[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StageSummarySearchResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public StageSummary[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="itemsPerPage")]
		public System.Nullable<System.Int32> ItemsPerPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalResults")]
		public System.Nullable<System.Int32> TotalResults { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of Bill types.
		/// ApiV1BillTypesGetByCategoryAndSkipAndTake api/v1/BillTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BillTypeSearchResult> ApiV1BillTypesGetByCategoryAndSkipAndTakeAsync(BillTypeCategory Category, int Skip, int Take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/BillTypes?Category=" + Category+"&Skip="+Skip+"&Take="+Take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillTypeSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Bills.
		/// ApiV1BillsGetBySearchTermAndSessionAndCurrentHouseAndOriginatingHouseAndMemberIdAndDepartmentIdAndBillStageAndBillStagesExcludedAndIsDefeatedAndIsWithdrawnAndBillTypeAndSortOrderAndBillIdsAndSkipAndTake api/v1/Bills
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BillSummarySearchResult> ApiV1BillsGetBySearchTermAndSessionAndCurrentHouseAndOriginatingHouseAndMemberIdAndDepartmentIdAndBillStageAndBillStagesExcludedAndIsDefeatedAndIsWithdrawnAndBillTypeAndSortOrderAndBillIdsAndSkipAndTakeAsync(
					string SearchTerm, 
					int Session, 
					AmendmentMemberHouse CurrentHouse, 
					OriginatingHouse OriginatingHouse, 
					int MemberId, 
					int DepartmentId, 
					int[] BillStage, 
					int[] BillStagesExcluded, 
					bool IsDefeated, 
					bool IsWithdrawn, 
					int[] BillType, 
					BillSortOrder SortOrder, 
					int[] BillIds, 
					int Skip, 
					int Take, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Bills?SearchTerm=" + (SearchTerm==null? "" : System.Uri.EscapeDataString(SearchTerm))+"&Session="+Session+"&CurrentHouse=" + CurrentHouse+"&OriginatingHouse=" + OriginatingHouse+"&MemberId="+MemberId+"&DepartmentId="+DepartmentId+"&"+string.Join("&", BillStage.Select(z => $"BillStage={z}"))+"&"+string.Join("&", BillStagesExcluded.Select(z => $"BillStagesExcluded={z}"))+"&IsDefeated="+IsDefeated+"&IsWithdrawn="+IsWithdrawn+"&"+string.Join("&", BillType.Select(z => $"BillType={z}"))+"&SortOrder=" + SortOrder+"&"+string.Join("&", BillIds.Select(z => $"BillIds={z}"))+"&Skip="+Skip+"&Take="+Take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillSummarySearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a Bill.
		/// ApiV1Bills_billIdGet api/v1/Bills/{billId}
		/// </summary>
		/// <param name="billId">Bill with ID specified</param>
		/// <returns>Success</returns>
		public async Task<Bill> ApiV1Bills_billIdGetAsync(int billId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Bills/"+billId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Bill>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of news articles for a Bill.
		/// ApiV1Bills_billIdNewsArticlesGetBySkipAndTake api/v1/Bills/{billId}/NewsArticles
		/// </summary>
		/// <returns>Success</returns>
		public async Task<NewsArticlesSummarySearchResult> ApiV1Bills_billIdNewsArticlesGetBySkipAndTakeAsync(int billId, int Skip, int Take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Bills/"+billId+"/NewsArticles?Skip="+Skip+"&Take="+Take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NewsArticlesSummarySearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of Bill publications.
		/// ApiV1Bills_billIdPublicationsGet api/v1/Bills/{billId}/Publications
		/// </summary>
		/// <param name="billId">Publications relating to Bill with Bill ID specified</param>
		/// <returns>Success</returns>
		public async Task<BillPublicationList> ApiV1Bills_billIdPublicationsGetAsync(int billId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Bills/"+billId+"/Publications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillPublicationList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all Bill stages.
		/// ApiV1Bills_billIdStagesGetBySkipAndTake api/v1/Bills/{billId}/Stages
		/// </summary>
		/// <param name="billId">Stages relating to a Bill with Bill ID specified</param>
		/// <returns>Success</returns>
		public async Task<StageSummarySearchResult> ApiV1Bills_billIdStagesGetBySkipAndTakeAsync(int billId, int Skip, int Take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Bills/"+billId+"/Stages?Skip="+Skip+"&Take="+Take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StageSummarySearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a Bill stage.
		/// ApiV1Bills_billIdStages_billStageIdGet api/v1/Bills/{billId}/Stages/{billStageId}
		/// </summary>
		/// <param name="billId">Bill stage relating to Bill with Bill ID specified</param>
		/// <param name="billStageId">Bill stage with ID specified</param>
		/// <returns>Success</returns>
		public async Task<BillStageDetails> ApiV1Bills_billIdStages_billStageIdGetAsync(int billId, int billStageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Bills/"+billId+"/Stages/"+billStageId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillStageDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of amendments.
		/// ApiV1Bills_billIdStages_billStageIdAmendmentsGetBySearchTermAndDecisionAndMemberIdAndSkipAndTake api/v1/Bills/{billId}/Stages/{billStageId}/Amendments
		/// </summary>
		/// <param name="billId">Amendments relating to a Bill with Bill ID specified</param>
		/// <param name="billStageId">Amendments relating to a Bill stage with Bill stage ID specified</param>
		/// <returns>Success</returns>
		public async Task<AmendmentSearchItemSearchResult> ApiV1Bills_billIdStages_billStageIdAmendmentsGetBySearchTermAndDecisionAndMemberIdAndSkipAndTakeAsync(int billId, int billStageId, string SearchTerm, Decision Decision, int MemberId, int Skip, int Take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Bills/"+billId+"/Stages/"+billStageId+"/Amendments?SearchTerm=" + (SearchTerm==null? "" : System.Uri.EscapeDataString(SearchTerm))+"&Decision=" + Decision+"&MemberId="+MemberId+"&Skip="+Skip+"&Take="+Take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AmendmentSearchItemSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an amendment.
		/// ApiV1Bills_billIdStages_billStageIdAmendments_amendmentIdGet api/v1/Bills/{billId}/Stages/{billStageId}/Amendments/{amendmentId}
		/// </summary>
		/// <param name="billId">Amendment relating to a bill with bill ID specified</param>
		/// <param name="billStageId">Amendment relating to a bill stage with bill stage ID specified</param>
		/// <param name="amendmentId">Amendment with amendment ID specified</param>
		/// <returns>Success</returns>
		public async Task<AmendmentDetail> ApiV1Bills_billIdStages_billStageIdAmendments_amendmentIdGetAsync(int billId, int billStageId, int amendmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Bills/"+billId+"/Stages/"+billStageId+"/Amendments/"+amendmentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AmendmentDetail>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of Bill stage publications.
		/// ApiV1Bills_billIdStages_stageIdPublicationsGet api/v1/Bills/{billId}/Stages/{stageId}/Publications
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BillStagePublicationList> ApiV1Bills_billIdStages_stageIdPublicationsGetAsync(int billId, int stageId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Bills/"+billId+"/Stages/"+stageId+"/Publications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillStagePublicationList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of publication types.
		/// ApiV1PublicationTypesGetBySkipAndTake api/v1/PublicationTypes
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PublicationTypeSearchResult> ApiV1PublicationTypesGetBySkipAndTakeAsync(int Skip, int Take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/PublicationTypes?Skip="+Skip+"&Take="+Take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublicationTypeSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return information on a document.
		/// ApiV1Publications_publicationIdDocuments_documentIdGet api/v1/Publications/{publicationId}/Documents/{documentId}
		/// </summary>
		/// <param name="publicationId">Document with publication Id specified</param>
		/// <param name="documentId">Document with Id specified</param>
		/// <returns>Success</returns>
		public async Task<PublicationDocument> ApiV1Publications_publicationIdDocuments_documentIdGetAsync(int publicationId, int documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Publications/"+publicationId+"/Documents/"+documentId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PublicationDocument>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a document.
		/// ApiV1Publications_publicationIdDocuments_documentIdDownloadGet api/v1/Publications/{publicationId}/Documents/{documentId}/Download
		/// </summary>
		/// <param name="publicationId">Document with publication Id specified</param>
		/// <param name="documentId">Document with Id specified</param>
		/// <returns>Success</returns>
		public async Task ApiV1Publications_publicationIdDocuments_documentIdDownloadGetAsync(int publicationId, int documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Publications/"+publicationId+"/Documents/"+documentId+"/Download";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an Rss feed of a certain Bill.
		/// ApiV1RssBills_id_rssGet api/v1/Rss/Bills/{id}.rss
		/// </summary>
		/// <param name="id">Id of Bill</param>
		/// <returns>Success</returns>
		public async Task ApiV1RssBills_id_rssGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Rss/Bills/"+id+".rss";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an Rss feed of all Bills.
		/// ApiV1RssAllbills_rssGet api/v1/Rss/allbills.rss
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1RssAllbills_rssGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Rss/allbills.rss";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an Rss feed of private Bills.
		/// ApiV1RssPrivatebills_rssGet api/v1/Rss/privatebills.rss
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1RssPrivatebills_rssGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Rss/privatebills.rss";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an Rss feed of public Bills.
		/// ApiV1RssPublicbills_rssGet api/v1/Rss/publicbills.rss
		/// </summary>
		/// <returns>Success</returns>
		public async Task ApiV1RssPublicbills_rssGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Rss/publicbills.rss";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Sittings.
		/// ApiV1SittingsGetByHouseAndDateFromAndDateToAndSkipAndTake api/v1/Sittings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BillStageSittingSearchResult> ApiV1SittingsGetByHouseAndDateFromAndDateToAndSkipAndTakeAsync(AmendmentMemberHouse House, System.DateTimeOffset DateFrom, System.DateTimeOffset DateTo, int Skip, int Take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Sittings?House=" + House+"&DateFrom=" + DateFrom.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&DateTo=" + DateTo.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Skip="+Skip+"&Take="+Take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BillStageSittingSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Bill stages.
		/// ApiV1StagesGetBySkipAndTake api/v1/Stages
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StageReferenceSearchResult> ApiV1StagesGetBySkipAndTakeAsync(int Skip, int Take, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/Stages?Skip="+Skip+"&Take="+Take;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StageReferenceSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
