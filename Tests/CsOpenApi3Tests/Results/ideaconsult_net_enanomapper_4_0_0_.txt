//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dataset
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataEntry")]
		public string DataEntry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feature")]
		public string Feature { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="model_uri")]
		public string Model_uri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Facet
	{
		
		[System.Runtime.Serialization.DataMember(Name="facet")]
		public string Facet1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Investigation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _childDocuments_ { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assay")]
		public string Assay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_uuid")]
		public string Document_uuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectendpoint")]
		public string Effectendpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpoint")]
		public string Endpoint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpointcategory")]
		public string Endpointcategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="err")]
		public System.Nullable<System.Double> Err { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errQualifier")]
		public string ErrQualifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="guidance")]
		public string Guidance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="investigation")]
		public string Investigation1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loQualifier")]
		public string LoQualifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loValue")]
		public System.Nullable<System.Double> LoValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner_name")]
		public string Owner_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicname")]
		public string Publicname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public string Reference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference_owner")]
		public string Reference_owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reference_year")]
		public string Reference_year { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resulttype")]
		public string Resulttype { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s_uuid")]
		public string S_uuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="studyResultType")]
		public string StudyResultType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="substanceType")]
		public string SubstanceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textValue")]
		public string TextValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topcategory")]
		public string Topcategory { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type_s")]
		public string Type_s { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upQualifier")]
		public string UpQualifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upValue")]
		public System.Nullable<System.Double> UpValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public string Updated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SolrQuery
	{
		
		[System.Runtime.Serialization.DataMember(Name="facet")]
		public string Facet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public System.Nullable<System.Int32> Rows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public System.Nullable<System.Boolean> Sort { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int32> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SolrResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public SolrResponseResponse Response { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseHeader")]
		public SolrResponseResponseHeader ResponseHeader { get; set; }
	}
	
	public class SolrResponseResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="docs")]
		public string[] Docs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxScore")]
		public System.Nullable<System.Double> MaxScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numFound")]
		public System.Nullable<System.Int32> NumFound { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int32> Start { get; set; }
	}
	
	public class SolrResponseResponseHeader
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> QTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="params")]
		public string Params { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zkConnected")]
		public System.Nullable<System.Boolean> ZkConnected { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Substance
	{
		
		[System.Runtime.Serialization.DataMember(Name="substance")]
		public string Substance1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubstanceComposition
	{
		
		[System.Runtime.Serialization.DataMember(Name="composition")]
		public string Composition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feature")]
		public string Feature { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubstanceStudy
	{
		
		[System.Runtime.Serialization.DataMember(Name="study")]
		public string Study { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubstanceStudySummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="facet")]
		public string Facet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="facet")]
		public string Facet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="params")]
		public QueryBodyParams Params { get; set; }
	}
	
	public class QueryBodyParams
	{
		
		[System.Runtime.Serialization.DataMember(Name="fl")]
		public string[] Fl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public System.Nullable<System.Int32> Rows { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Details of multiple studies
		/// Multiple studies in tabular form
		/// GetInvestigationResults enm/{db}/investigation
		/// </summary>
		/// <param name="db">Database ID</param>
		/// <param name="type">query type</param>
		/// <param name="search">Search parameter, UUID of the investigation or a substance</param>
		/// <param name="inchikey">Search parameter, InChI key(s) of the substance component(s), comma delimited</param>
		/// <param name="id">Search parameter, chemical structure or substance identifier(s), comma delimited</param>
		/// <param name="page">Starting page</param>
		/// <param name="pagesize">Page size</param>
		/// <returns>OK. Entries found</returns>
		public async Task<Investigation> GetInvestigationResultsAsync(GetInvestigationResultsDb db, GetInvestigationResultsType type, string search, string inchikey, string id, int page, int pagesize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enm/"+db+"/investigation?type=" + type+"&search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&inchikey=" + (inchikey==null? "" : System.Uri.EscapeDataString(inchikey))+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&page="+page+"&pagesize="+pagesize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Investigation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exact chemical structure search
		/// Returns compounds found
		/// SearchByIdentifier enm/{db}/query/compound/{term}/{representation}
		/// </summary>
		/// <param name="db">Database ID</param>
		/// <param name="term">search term type</param>
		/// <param name="search">Compound identifier (SMILES, InChI, name, registry identifiers)</param>
		/// <param name="b64search">Base64 encoded mol file; if included, will be used instead of the 'search' parameter</param>
		/// <param name="casesens">Case sensitive search if yes</param>
		/// <param name="bundle_uri">Bundle URI</param>
		/// <param name="sameas">Ontology URI to define groups of columns</param>
		/// <param name="page">Starting page</param>
		/// <param name="pagesize">Page size</param>
		/// <returns>OK. Entries found</returns>
		public async Task<Dataset> SearchByIdentifierAsync(GetInvestigationResultsDb db, SearchByIdentifierTerm term, SearchByIdentifierRepresentation representation, string search, string b64search, bool casesens, string bundle_uri, string sameas, int page, int pagesize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enm/"+db+"/query/compound/"+term+"/"+representation+"?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&b64search=" + (b64search==null? "" : System.Uri.EscapeDataString(b64search))+"&casesens="+casesens+"&bundle_uri=" + (bundle_uri==null? "" : System.Uri.EscapeDataString(bundle_uri))+"&sameas=" + (sameas==null? "" : System.Uri.EscapeDataString(sameas))+"&page="+page+"&pagesize="+pagesize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Dataset>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Exact similarity search
		/// Returns similar compounds
		/// SearchBySimilarity enm/{db}/query/similarity
		/// </summary>
		/// <param name="db">Database ID</param>
		/// <param name="search">Compound identifier (SMILES, InChI, name, registry identifiers)</param>
		/// <param name="b64search">Base64 encoded mol file; if included, will be used instead of the 'search' parameter</param>
		/// <param name="type">Defines the expected content of the search parameter</param>
		/// <param name="threshold">Similarity threshold</param>
		/// <param name="dataset_uri">Restrict the search within the AMBIT dataset specified with the URI</param>
		/// <param name="filterBySubstance">Restrict the search within the set of structures with assigned substances</param>
		/// <param name="bundle_uri">If the structure is used in the specified bundle URI, the selection tag will be returned</param>
		/// <param name="sameas">Ontology URI to define groups of columns</param>
		/// <param name="mol">Only for application/json; to include mol as JSON field</param>
		/// <param name="page">Starting page</param>
		/// <param name="pagesize">Page size</param>
		/// <returns>OK. Entries found</returns>
		public async Task<Dataset> SearchBySimilarityAsync(GetInvestigationResultsDb db, string search, string b64search, SearchBySimilarityType type, double threshold, string dataset_uri, bool filterBySubstance, string bundle_uri, string sameas, bool mol, int page, int pagesize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enm/"+db+"/query/similarity?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&b64search=" + (b64search==null? "" : System.Uri.EscapeDataString(b64search))+"&type=" + type+"&threshold="+threshold+"&dataset_uri=" + (dataset_uri==null? "" : System.Uri.EscapeDataString(dataset_uri))+"&filterBySubstance="+filterBySubstance+"&bundle_uri=" + (bundle_uri==null? "" : System.Uri.EscapeDataString(bundle_uri))+"&sameas=" + (sameas==null? "" : System.Uri.EscapeDataString(sameas))+"&mol="+mol+"&page="+page+"&pagesize="+pagesize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Dataset>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Substructure search
		/// Returns compounds with the specified substructure
		/// SearchBySmarts enm/{db}/query/smarts
		/// </summary>
		/// <param name="db">Database ID</param>
		/// <param name="search">Compound identifier (SMILES, InChI, name, registry identifiers)</param>
		/// <param name="b64search">Base64 encoded mol file; if included, will be used instead of the 'search' parameter</param>
		/// <param name="type">Defines the expected content of the search parameter</param>
		/// <param name="dataset_uri">Restrict the search within the AMBIT dataset specified with the URI</param>
		/// <param name="filterBySubstance">Restrict the search within the set of structures with assigned substances</param>
		/// <param name="bundle_uri">If the structure is used in the specified bundle URI, the selection tag will be returned</param>
		/// <param name="sameas">Ontology URI to define groups of columns</param>
		/// <param name="mol">Only for application/json; to include mol as JSON field</param>
		/// <param name="page">Starting page</param>
		/// <param name="pagesize">Page size</param>
		/// <returns>OK. Entries found</returns>
		public async Task<Dataset> SearchBySmartsAsync(GetInvestigationResultsDb db, string search, string b64search, SearchBySimilarityType type, string dataset_uri, bool filterBySubstance, string bundle_uri, string sameas, bool mol, int page, int pagesize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enm/"+db+"/query/smarts?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&b64search=" + (b64search==null? "" : System.Uri.EscapeDataString(b64search))+"&type=" + type+"&dataset_uri=" + (dataset_uri==null? "" : System.Uri.EscapeDataString(dataset_uri))+"&filterBySubstance="+filterBySubstance+"&bundle_uri=" + (bundle_uri==null? "" : System.Uri.EscapeDataString(bundle_uri))+"&sameas=" + (sameas==null? "" : System.Uri.EscapeDataString(sameas))+"&mol="+mol+"&page="+page+"&pagesize="+pagesize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Dataset>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search endpoint summary
		/// Returns endpoint summary
		/// GetEndpointSummary enm/{db}/query/study
		/// </summary>
		/// <param name="db">Database ID</param>
		/// <param name="top">Top endpoint category</param>
		/// <param name="category">Endpoint category (The value in the protocol.category.code field)</param>
		/// <returns>OK.</returns>
		public async Task<Facet> GetEndpointSummaryAsync(GetInvestigationResultsDb db, GetEndpointSummaryTop top, string category, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enm/"+db+"/query/study?top=" + top+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Facet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List substances
		/// Returns a list of substances, according to the search criteria
		/// GetSubstances enm/{db}/substance
		/// </summary>
		/// <param name="db">Database ID</param>
		/// <param name="search">Search parameter</param>
		/// <param name="compound_uri">If type=related finds all substances containing this compound; if typ =reference - finds all substances with this compound as reference structure</param>
		/// <param name="bundle_uri">Retrieves if selected in this bundle</param>
		/// <param name="addDummySubstance">Adds a compound record as substance in JSON; only if type=related</param>
		/// <param name="studysummary">If true retrieves study summary for each substance</param>
		/// <param name="page">Starting page</param>
		/// <param name="pagesize">Page size</param>
		/// <returns>OK. Substances found</returns>
		public async Task<Substance> GetSubstancesAsync(GetInvestigationResultsDb db, string search, GetSubstancesType type, string compound_uri, string bundle_uri, bool addDummySubstance, bool studysummary, int page, int pagesize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enm/"+db+"/substance?search=" + (search==null? "" : System.Uri.EscapeDataString(search))+"&type=" + type+"&compound_uri=" + (compound_uri==null? "" : System.Uri.EscapeDataString(compound_uri))+"&bundle_uri=" + (bundle_uri==null? "" : System.Uri.EscapeDataString(bundle_uri))+"&addDummySubstance="+addDummySubstance+"&studysummary="+studysummary+"&page="+page+"&pagesize="+pagesize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Substance>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a substance
		/// Returns substance representation
		/// GetSubstanceByUUID enm/{db}/substance/{uuid}
		/// </summary>
		/// <param name="db">Database ID</param>
		/// <param name="uuid">Substance UUID</param>
		/// <param name="property_uris_">Property URIs</param>
		/// <param name="page">Starting page</param>
		/// <param name="pagesize">Page size</param>
		/// <returns>OK. Substances found</returns>
		public async Task<Substance> GetSubstanceByUUIDAsync(GetInvestigationResultsDb db, string uuid, string property_uris_, int page, int pagesize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enm/"+db+"/substance/"+ (uuid==null? "" : System.Uri.EscapeDataString(uuid))+"&property_uris[]=" + (property_uris_==null? "" : System.Uri.EscapeDataString(property_uris_))+"&page="+page+"&pagesize="+pagesize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Substance>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Substance composition
		/// Returns substance composition
		/// GetSubstanceComposition enm/{db}/substance/{uuid}/composition
		/// </summary>
		/// <param name="db">Database ID</param>
		/// <param name="uuid">Substance UUID</param>
		/// <param name="all">true (Show all compositions) false (do not show hidden compositions)</param>
		/// <param name="page">Starting page</param>
		/// <param name="pagesize">Page size</param>
		/// <returns>OK. compositions found</returns>
		public async Task<SubstanceComposition> GetSubstanceCompositionAsync(GetInvestigationResultsDb db, string uuid, bool all, int page, int pagesize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enm/"+db+"/substance/"+ (uuid==null? "" : System.Uri.EscapeDataString(uuid))+"/composition&all="+all+"&page="+page+"&pagesize="+pagesize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubstanceComposition>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get substance composition as a dataset
		/// Returns substance composition
		/// GetSubstanceStructures enm/{db}/substance/{uuid}/structures
		/// </summary>
		/// <param name="db">Database ID</param>
		/// <param name="uuid">Substance UUID</param>
		/// <param name="page">Starting page</param>
		/// <param name="pagesize">Page size</param>
		/// <returns>OK. compositions found</returns>
		public async Task<Dataset> GetSubstanceStructuresAsync(GetInvestigationResultsDb db, string uuid, int page, int pagesize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enm/"+db+"/substance/"+ (uuid==null? "" : System.Uri.EscapeDataString(uuid))+"/structures&page="+page+"&pagesize="+pagesize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Dataset>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// get substance study
		/// Returns substance study representation
		/// GetSubstanceStudy enm/{db}/substance/{uuid}/study
		/// </summary>
		/// <param name="db">Database ID</param>
		/// <param name="uuid">Substance UUID</param>
		/// <param name="top">Top endpoint category</param>
		/// <param name="category">Endpoint category (The value in the protocol.category.code field)</param>
		/// <param name="property_uri">Property URI https://data.enanomapper.net/property/{UUID} , see Property service</param>
		/// <param name="property">Property UUID</param>
		/// <param name="investigation_uuid">Investigation UUID, a code to link different studies</param>
		/// <param name="page">Starting page</param>
		/// <param name="pagesize">Page size</param>
		/// <returns>OK. Substances found</returns>
		public async Task<SubstanceStudy> GetSubstanceStudyAsync(GetInvestigationResultsDb db, string uuid, GetSubstanceStudyTop top, string category, string property_uri, string property, string investigation_uuid, int page, int pagesize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enm/"+db+"/substance/"+ (uuid==null? "" : System.Uri.EscapeDataString(uuid))+"/study&top=" + top+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&property_uri=" + (property_uri==null? "" : System.Uri.EscapeDataString(property_uri))+"&property=" + (property==null? "" : System.Uri.EscapeDataString(property))+"&investigation_uuid=" + (investigation_uuid==null? "" : System.Uri.EscapeDataString(investigation_uuid))+"&page="+page+"&pagesize="+pagesize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubstanceStudy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get study summary for the substance
		/// Study summary
		/// GetSubstanceStudySummary enm/{db}/substance/{uuid}/studySummary
		/// </summary>
		/// <param name="db">Database ID</param>
		/// <param name="uuid">Substance UUID</param>
		/// <param name="top">Top endpoint category</param>
		/// <param name="category">Endpoint category (The value in the protocol.category.code field)</param>
		/// <param name="property_uri">Property URI https://data.enanomapper.net/property/{UUID} , see Property service</param>
		/// <param name="property">Property UUID, see Property service</param>
		/// <param name="result">If true will group by topcategory,endpointcategory,interpretation result</param>
		/// <param name="page">Starting page</param>
		/// <param name="pagesize">Page size</param>
		/// <returns>OK.</returns>
		public async Task<SubstanceStudySummary> GetSubstanceStudySummaryAsync(GetInvestigationResultsDb db, string uuid, GetSubstanceStudySummaryTop top, string category, string property_uri, string property, bool result, int page, int pagesize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "enm/"+db+"/substance/"+ (uuid==null? "" : System.Uri.EscapeDataString(uuid))+"/studySummary&top=" + top+"&category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&property_uri=" + (property_uri==null? "" : System.Uri.EscapeDataString(property_uri))+"&property=" + (property==null? "" : System.Uri.EscapeDataString(property))+"&result="+result+"&page="+page+"&pagesize="+pagesize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SubstanceStudySummary>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Apache Solr powered search
		/// GET is simpler to use, but imposes restrictions on the complexity and the lenght of the parameters.
		/// Solrquery_get select
		/// </summary>
		/// <param name="q">The query</param>
		/// <param name="fq">Filter query</param>
		/// <param name="fl">Field list</param>
		/// <param name="start">Starting page</param>
		/// <param name="rows">Page size</param>
		/// <param name="wt">Response format</param>
		/// <returns>Query performed successfully</returns>
		public async Task<SolrResponse> Solrquery_getAsync(string q, string fq, string fl, int start, int rows, Solrquery_getWt wt, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "select?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&fq=" + (fq==null? "" : System.Uri.EscapeDataString(fq))+"&fl=" + (fl==null? "" : System.Uri.EscapeDataString(fl))+"&start="+start+"&rows="+rows+"&wt=" + wt;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SolrResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Apache Solr powered search
		/// POST is more complex to use, but also allows for much for complex and lengthy queries.
		/// Solrquery_post select
		/// </summary>
		/// <param name="wt">Response format</param>
		/// <param name="requestBody">a JSON object with Solr query parameters</param>
		/// <returns>Query performed successfully</returns>
		public async Task<SolrResponse> Solrquery_postAsync(Solrquery_postWt wt, QueryBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "select?wt=" + wt;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SolrResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetInvestigationResultsDb
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		calibrate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enanomapper = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		enpra = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		marina = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nanogenotox = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nanoinformatix = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nanoreg1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nanoreg2 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		nanotest = 8,
	}
	
	public enum GetInvestigationResultsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		byinvestigation = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		byassay = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bysubstance = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		byprovider = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bycitation = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bystudytype = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bystructure_inchikey = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bystructure_smiles = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bystructure_name = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bysubstance_name = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bysubstance_type = 10,
	}
	
	public enum SearchByIdentifierTerm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		search = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		url = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inchikey = 2,
	}
	
	public enum SearchByIdentifierRepresentation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		smiles = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reach = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stdinchi = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stdinchikey = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		names = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		iupac_name = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		synonym = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cas = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		einecs = 9,
	}
	
	public enum SearchBySimilarityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		smiles = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mol = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		url = 2,
	}
	
	public enum GetEndpointSummaryTop
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="P-CHEM")]
		PMinusCHEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECOTOX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENV FATE")]
		ENV_FATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPOSURE = 4,
	}
	
	public enum GetSubstancesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		substancetype = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		like = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		regexp = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		uuif = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompTox = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOI = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reliability = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		purposeFlag = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		studyResultType = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		isRobustStudy = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		citation = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		citationowner = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		topcategory = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		endpointcategory = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="params")]
		_params = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		owner_name = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		owner_uuid = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		related = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reference = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		facet = 20,
	}
	
	public enum GetSubstanceStudyTop
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="P-CHEM")]
		PMinusCHEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECOTOX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENV FATE")]
		ENV_FATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPOSURE = 4,
	}
	
	public enum GetSubstanceStudySummaryTop
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="P-CHEM")]
		PMinusCHEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECOTOX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENV FATE")]
		ENV_FATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPOSURE = 4,
	}
	
	public enum Solrquery_getWt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xml = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		csv = 2,
	}
	
	public enum Solrquery_postWt
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xml = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
