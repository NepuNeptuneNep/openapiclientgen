//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get all APIs
		/// This call fetches all the APIs present in the specified workspace
		/// 
		/// Response contains an array named `apis` which would contain all the details of APIs present in the workspace.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// GetAllApIs apis
		/// </summary>
		/// <param name="workspace">Only return APIs that are inside the given workspace.</param>
		/// <param name="since">Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format.</param>
		/// <param name="until">Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format.</param>
		/// <param name="createdBy">Only return APIs that have been created by the user ID represented by the given value.</param>
		/// <param name="updatedBy">Only return APIs that have been updated by the user ID represented by the given value.</param>
		/// <param name="isPublic">Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false.</param>
		/// <param name="name">Only return APIs whose name includes the given value. Matching is case insensitive.</param>
		/// <param name="summary">Only return APIs whose summary includes the given value. Matching is case insensitive.</param>
		/// <param name="description">Only return APIs whose description includes the given value. Matching is case insensitive.</param>
		/// <param name="sort">The value of sort can be one of the names of the fields included in the response.</param>
		/// <param name="direction">The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field.</param>
		public async Task GetAllApIsAsync(string workspace, string since, string until, string createdBy, string updatedBy, string isPublic, string name, string summary, string description, string sort, string direction, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis?workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace))+"&since=" + (since==null? "" : System.Uri.EscapeDataString(since))+"&until=" + (until==null? "" : System.Uri.EscapeDataString(until))+"&createdBy=" + (createdBy==null? "" : System.Uri.EscapeDataString(createdBy))+"&updatedBy=" + (updatedBy==null? "" : System.Uri.EscapeDataString(updatedBy))+"&isPublic=" + (isPublic==null? "" : System.Uri.EscapeDataString(isPublic))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&summary=" + (summary==null? "" : System.Uri.EscapeDataString(summary))+"&description=" + (description==null? "" : System.Uri.EscapeDataString(description))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&direction=" + (direction==null? "" : System.Uri.EscapeDataString(direction));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create API
		/// This call creates a new API with a default API Version.
		/// 
		/// Request body should contain an `api` object which should atleast have a property `name`.
		/// 
		/// Response contains an `api` object with all the details related to the created API, namely, `id`, `name`, `summary`, `description`, etc.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// CreateApi apis
		/// </summary>
		/// <returns>Create API</returns>
		public async Task<CreateApiReturn> CreateApiAsync(string workspace, CreateApiPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis?workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateApiReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an API
		/// This call deletes an existing API having the specified id.
		/// 
		/// Response contains an `api` object with `id` of the API which was deleted.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// DeleteAnApi apis/{apiId}
		/// </summary>
		/// <returns>Delete an API</returns>
		public async Task<DeleteAnApiReturn> DeleteAnApiAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteAnApiReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Single API
		/// This call fetches a single API having the specified id.
		/// 
		/// Response contains an `api` object with all the details related to the queried API, namely, `id`, `name`, `summary`, `description` etc.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// SingleApi apis/{apiId}
		/// </summary>
		/// <returns>Get single API</returns>
		public async Task<SingleApiReturn> SingleApiAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SingleApiReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an API
		/// This call updates an existing API .
		/// 
		/// Request body should contain an `api` object which should have the fields to be updated. Only `name`, `summary` and `description` fields can be edited for an API.
		/// 
		/// Response contains an `api` object with all the details related to the created API, namely, `id`, `name`, `summary`, `description` etc.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// UpdateAnApi apis/{apiId}
		/// </summary>
		/// <returns>Update an API</returns>
		public async Task<UpdateAnApiReturn> UpdateAnApiAsync(UpdateAnApiPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateAnApiReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get All API Versions
		/// This call fetches details about the all the API Versions in the specified API.
		/// 
		/// The response will contain an array `versions` object which would be a list of all the API Version along with their details.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// GetAllApiVersions apis/{apiId}/versions
		/// </summary>
		/// <returns>Get All API versions</returns>
		public async Task<GetAllApiVersionsReturn> GetAllApiVersionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetAllApiVersionsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create API Version
		/// This call creates a new API version in the specified API.
		/// 
		/// Request body should contain a `version` object which should have fields:
		/// 
		/// <table>
		/// <tr>
		/// <td>name</td>
		/// <td>Required. Name of the API Version</td>
		/// </tr>
		/// <tr>
		/// <td>source</td>
		/// <td>
		/// If specified, it will copy the contents of the specified api version to create a new api verison.
		/// <table>
		/// <tr>
		/// <td>id</td>
		/// <td>Required. Id of the apiversion from where the details are to be copied</td>
		/// </tr>
		/// <tr>
		/// <td>schema</td>
		/// <td>Boolean. If true then copies the schema from the specified api version</td>
		/// </tr>
		/// <tr>
		/// <td>relations</td>
		/// <td>Object. {"&lt;relationType&gt;": true/false}.
		/// Allowed relation types are `mock`, `monitor`, `documentation`, `contracttest`, `integrationtest`, `testsuite`, `environment`
		/// Relation types which should be copied over to the new api verison</td>
		/// </tr>
		/// </table>
		/// </td>
		/// </tr>
		/// </table>
		/// 
		/// Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api`.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// CreateApiVersion apis/{apiId}/versions
		/// </summary>
		/// <returns>Create API version</returns>
		public async Task<CreateApiVersionReturn> CreateApiVersionAsync(CreateApiVersionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateApiVersionReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an API Version
		/// This call deletes an existing API Version having the specified id.
		/// 
		/// Response contains an `version` object with `id` of the API Version which was deleted.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// DeleteAnApiVersion apis/{apiId}/versions/{apiVersionId}
		/// </summary>
		/// <returns>Delete an API version</returns>
		public async Task<DeleteAnApiVersionReturn> DeleteAnApiVersionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteAnApiVersionReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an API Version
		/// This call fetches details about the specified API Version.
		/// 
		/// The response will contain a `version` object which would contain all the details of the API Version.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// GetAnApiVersion apis/{apiId}/versions/{apiVersionId}
		/// </summary>
		/// <returns>Get an API version</returns>
		public async Task<GetAnApiVersionReturn> GetAnApiVersionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetAnApiVersionReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an API Version
		/// This call updates an existing API Version.
		/// 
		/// Request body should contain a `version` object with the fields which need to be updated. Only field which can be updated is `name`.
		/// 
		/// Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api` etc.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// UpdateAnApiVersion apis/{apiId}/versions/{apiVersionId}
		/// </summary>
		/// <returns>Update an API version</returns>
		public async Task<UpdateAnApiVersionReturn> UpdateAnApiVersionAsync(UpdateAnApiVersionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateAnApiVersionReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get contract test relations
		/// This call fetches all the relations by type which are linked to the specified API version along with their details.
		/// 
		/// The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// GetContractTestRelations apis/{apiId}/versions/{apiVersionId}/contracttest
		/// </summary>
		/// <returns>Get contract test relations</returns>
		public async Task<GetContractTestRelationsReturn> GetContractTestRelationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}/contracttest";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetContractTestRelationsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get  documentation relations
		/// This call fetches all the relations by type which are linked to the specified API version along with their details.
		/// 
		/// The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// GetDocumentationRelations apis/{apiId}/versions/{apiVersionId}/documentation
		/// </summary>
		/// <returns>Get documentation relations</returns>
		public async Task<GetDocumentationRelationsReturn> GetDocumentationRelationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}/documentation";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetDocumentationRelationsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get environment relations
		/// This call fetches all the relations by type which are linked to the specified API version along with their details.
		/// 
		/// The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// GetEnvironmentRelations apis/{apiId}/versions/{apiVersionId}/environment
		/// </summary>
		/// <returns>Get environment relations</returns>
		public async Task<GetEnvironmentRelationsReturn> GetEnvironmentRelationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}/environment";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetEnvironmentRelationsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get integration test relations
		/// This call fetches all the relations by type which are linked to the specified API version along with their details.
		/// 
		/// The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// GetIntegrationTestRelations apis/{apiId}/versions/{apiVersionId}/integrationtest
		/// </summary>
		/// <returns>Get integration test relations</returns>
		public async Task<GetIntegrationTestRelationsReturn> GetIntegrationTestRelationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}/integrationtest";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetIntegrationTestRelationsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get monitor relations
		/// This call fetches all the relations by type which are linked to the specified API version along with their details.
		/// 
		/// The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// GetMonitorRelations apis/{apiId}/versions/{apiVersionId}/monitor
		/// </summary>
		/// <returns>Get monitor relations</returns>
		public async Task<GetMonitorRelationsReturn> GetMonitorRelationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}/monitor";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetMonitorRelationsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get linked relations
		/// This call fetches all the relations which are linked to the specified API version along with their details.
		/// 
		/// The response will contain a `relations` object which lists all the relation types which are linked to the API version. Each of the relation type will be an object which details the relations of this type.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// GetLinkedRelations apis/{apiId}/versions/{apiVersionId}/relations
		/// </summary>
		/// <returns>Get linked relations for an API version</returns>
		public async Task<GetLinkedRelationsReturn> GetLinkedRelationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}/relations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetLinkedRelationsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create relations
		/// This call allows you to add existing Postman entities as new relations to an API. The request body should contain the relations to be created along with an array of entity IDs.
		/// 
		/// <table>
		/// <tr>
		/// <th>Relation</th>
		/// <th>Entity ID type</th>
		/// <tr>
		/// <tr>
		/// <td>contracttest</td>
		/// <td>Collection UIDs</td>
		/// </tr>
		/// <tr>
		/// <td>integrationtest</td>
		/// <td>Collection UIDs</td>
		/// </tr>
		/// <tr>
		/// <td>documentation</td>
		/// <td>Collection UIDs</td>
		/// </tr>
		/// <tr>
		/// <td>testsuite</td>
		/// <td>Collection UIDs</td>
		/// </tr>
		/// <tr>
		/// <td>environment</td>
		/// <td>Environment UIDs</td>
		/// </tr>
		/// <tr>
		/// <td>mock</td>
		/// <td>Mock IDs</td>
		/// </tr>
		/// <tr>
		/// <td>monitor</td>
		/// <td>Monitor IDs</td>
		/// </tr>
		/// </table>
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// CreateRelations apis/{apiId}/versions/{apiVersionId}/relations
		/// </summary>
		/// <returns>Create multiple relations from existing collections</returns>
		public async Task<CreateRelationsReturn> CreateRelationsAsync(CreateRelationsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}/relations";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateRelationsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Schema
		/// This call creates a new schema.
		/// 
		/// Request body should contain a `schema` object which should atleast have these properties with `string` values:
		/// 
		/// - **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.
		/// - **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.
		/// - **`schema`**: Optional. If passed, must be the content of the schema as a `string`.
		/// 
		/// Response contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// CreateSchema apis/{apiId}/versions/{apiVersionId}/schemas
		/// </summary>
		/// <returns>Create schema</returns>
		public async Task<CreateSchemaReturn> CreateSchemaAsync(CreateSchemaPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}/schemas";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateSchemaReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get Schema
		/// This call fetches a single schema having the specified id.
		/// 
		/// Response contains a `schema` object with all the details related to the schema, namely, `id`, `language`, `type`, `schema` etc.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// GetSchema apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}
		/// </summary>
		/// <returns>Get schema</returns>
		public async Task<GetSchemaReturn> GetSchemaAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetSchemaReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Schema
		/// This call updates an existing schema.
		/// 
		/// Request body should contain a `schema` object which should atleast have these properties with `string` values:
		/// 
		/// - **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.
		/// - **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.
		/// - **`schema`**: Optional. If passed, must be the content of the schema as a `string`.
		/// 
		/// Response contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// UpdateSchema apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}
		/// </summary>
		/// <returns>Update schema</returns>
		public async Task<UpdateSchemaReturn> UpdateSchemaAsync(UpdateSchemaPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateSchemaReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create collection from schema
		/// This call creates a collection and links it to an API as one or multiple relations.
		/// 
		/// Request body requires two keys:
		/// - `name` - Name of the collection to be created.
		/// - `relations` - A list of relation(s) to be created.
		/// 
		/// The allowed relation types are `contracttest`, `integrationtest`, `testsuite`, and `documentation`.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// CreateCollectionFromSchema apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}/collections
		/// </summary>
		/// <returns>Create collection from schema</returns>
		public async Task<CreateCollectionFromSchemaReturn> CreateCollectionFromSchemaAsync(string workspace, CreateCollectionFromSchemaPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}/schemas/{schemaId}/collections?workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateCollectionFromSchemaReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get test suite relations
		/// This call fetches all the relations by type which are linked to the specified API version along with their details.
		/// 
		/// The response will contain an array with key `{{relationType}}`. Each of the item will consist of all the details related each of the relation.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// GetTestSuiteRelations apis/{apiId}/versions/{apiVersionId}/testsuite
		/// </summary>
		/// <returns>Get test suite relations</returns>
		public async Task<GetTestSuiteRelationsReturn> GetTestSuiteRelationsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}/testsuite";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<GetTestSuiteRelationsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Sync relations with schema
		/// This call allows you to keep the relation in sync with the API schema.
		/// 
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// SyncRelationsWithSchema apis/{apiId}/versions/{apiVersionId}/{entityType}/{entityId}/syncWithSchema
		/// </summary>
		/// <returns>Successful sync</returns>
		public async Task<SyncRelationsWithSchemaReturn> SyncRelationsWithSchemaAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apis/{apiId}/versions/{apiVersionId}/{entityType}/{entityId}/syncWithSchema";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SyncRelationsWithSchemaReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// All Collections
		/// The `/collections` endpoint returns a list of all [collections](https://www.getpostman.com/docs/collections) that are accessible by you. The list includes your own collections and the collections that you have subscribed to.
		/// 
		/// The response contains an array of collection information containing the `name`, `id`, `owner` and `uid` of each collection.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// AllCollections collections
		/// </summary>
		/// <returns>Valid Response</returns>
		public async Task<AllCollectionsReturn> AllCollectionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AllCollectionsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Collection
		/// This endpoint allows you to create collections using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).
		/// 
		/// On successful creation of the collection, the response returns the collection `name`, `id` and the `uid`.
		/// 
		/// You can also specify the context of a workspace to create a collection in directly by passing the `workspace` as a query param.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// CreateCollection collections
		/// </summary>
		/// <returns>Create Collection in a Workspace</returns>
		public async Task<CreateCollectionReturn> CreateCollectionAsync(CreateCollectionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateCollectionReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a Fork
		/// This endpoint allows you to create a fork from an existing collection.
		/// 
		/// On successful creation of the collection, the response returns the collection `name`, `id`, `uid` along with `fork` information.
		/// 
		/// You can also specify the context of a workspace to fork a collection in by passing the `workspace` as a query param.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// CreateAFork collections/fork/{collection_uid}
		/// </summary>
		/// <param name="workspace">Workspace ID is required to create a fork</param>
		public async Task CreateAForkAsync(string workspace, CreateAForkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/fork/{collection_uid}?workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Merge a Fork
		/// This endpoint allows you to merge a forked collection back to its destination collection.
		/// 
		/// On successful creation of the collection, the response returns the collection `name`, `id` and `uid`.
		/// 
		/// You need to specify the fork UID (as `source`) and destination collection UID (as `destination`) in the request body.
		/// 
		/// Optionally, you can also specify the merge strategy as either `deleteSource` or `updateSourceWithDestination`. Following is an explanation of the merge strategies
		/// 
		/// | Merge Strategy | Behaviour |
		/// | --- | --- |
		/// | deleteSource | Forked collection is deleted after merging |
		/// | updateSourceWithDestination | Forked collection is up to date with changes in destination collection |
		/// 
		/// If the collections cannot be merged (due to conflicts), appropriate error messages will be returned.
		/// 
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// MergeAFork collections/merge
		/// </summary>
		public async Task MergeAForkAsync(MergeAForkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/merge";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Collection
		/// This endpoint allows you to delete an existing collection.
		/// 
		/// On successful deletion of the collection, the response returns the `id` and `uid`.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// DeleteCollection collections/{collection_uid}
		/// </summary>
		/// <returns>Collection Deleted</returns>
		public async Task<DeleteCollectionReturn> DeleteCollectionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/{collection_uid}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteCollectionReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Single Collection
		/// Access the contents of a collection that is accessible to you using its unique id (`uid`).
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// SingleCollection collections/{collection_uid}
		/// </summary>
		/// <returns>Valid Response</returns>
		public async Task<SingleCollectionReturn> SingleCollectionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/{collection_uid}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SingleCollectionReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Collection
		/// This endpoint allows you to update an existing collection using the Postman Collection v2 format. For more information about the v2 schema, check the format [here](https://schema.getpostman.com/json/collection/v2.0.0/docs/index.html).
		/// 
		/// On successful updation of the collection, the response returns the collection `name`, `id` and `uid`.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// 
		/// Note: Please be careful when trying to update the collection, as the existing collection will be replaced by the request body.
		/// UpdateCollection collections/{collection_uid}
		/// </summary>
		/// <returns>Collection Updated</returns>
		public async Task<UpdateCollectionReturn> UpdateCollectionAsync(UpdateCollectionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections/{collection_uid}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateCollectionReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// All Environments
		/// The `/environments` endpoint returns a list of all [environments](https://www.getpostman.com/docs/environments) that belong to you..
		/// 
		/// The response contains an array of environments' information containing the `name`, `id`, `owner` and `uid` of each environment.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// AllEnvironments environments
		/// </summary>
		/// <returns>Valid Response</returns>
		public async Task<AllEnvironmentsReturn> AllEnvironmentsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AllEnvironmentsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Environment
		/// A sample body is added to the request that conforms to the following JSON schema:
		/// 
		/// ```json
		/// {
		/// "type": "object",
		/// "properties": {
		/// "environment": {
		/// "type": "object",
		/// "properties": {
		/// "name": {
		/// "type": "string",
		/// "maxLength": 254,
		/// "minLength": 1
		/// },
		/// "values": {
		/// "type": "array",
		/// "maxItems": 100,
		/// "additionalItems": false,
		/// "items": {
		/// "type": "object",
		/// "properties": {
		/// "key": {
		/// "type": "string",
		/// "maxLength": 254
		/// "minLength": 1
		/// },
		/// "value": { "type": "string" },
		/// "enabled": { "type": "boolean" }
		/// },
		/// "required": ["key", "value"]
		/// }
		/// }
		/// },
		/// "required": ["name"]
		/// }
		/// },
		/// "required": ["environment"]
		/// }
		/// ```
		/// 
		/// On successful creation of the environment, the API returns the environment name and `id`.
		/// 
		/// You can also specify the context of a workspace to create an environment in directly by passing the `workspace` as a query param.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// CreateEnvironment environments
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<CreateEnvironmentReturn> CreateEnvironmentAsync(CreateEnvironmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateEnvironmentReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Environment
		/// This endpoint allows you to delete a single environment based on an environment's unique `uid`.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// DeleteEnvironment environments/{environment_uid}
		/// </summary>
		/// <returns>Environment Deleted</returns>
		public async Task<DeleteEnvironmentReturn> DeleteEnvironmentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments/{environment_uid}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteEnvironmentReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Single Environment
		/// Access the contents of an environment that is accessible to you using its unique id (`uid`).
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// SingleEnvironment environments/{environment_uid}
		/// </summary>
		/// <returns>Valid Response</returns>
		public async Task<SingleEnvironmentReturn> SingleEnvironmentAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments/{environment_uid}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SingleEnvironmentReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Environment
		/// This endpoint replaces an existing environment.
		/// 
		/// A sample body is added to the request that conforms to the following JSON schema:
		/// 
		/// ```json
		/// {
		/// "type": "object",
		/// "properties": {
		/// "environment": {
		/// "type": "object",
		/// "properties": {
		/// "name": {
		/// "type": "string",
		/// "maxLength": 254,
		/// "minLength": 1
		/// },
		/// "values": {
		/// "type": "array",
		/// "maxItems": 100,
		/// "additionalItems": false,
		/// "items": {
		/// "type": "object",
		/// "properties": {
		/// "key": {
		/// "type": "string",
		/// "maxLength": 254,
		/// "minLength": 1
		/// },
		/// "value": {
		/// "type": "string",
		/// "maxLength": 254,
		/// "minLength": 1
		/// },
		/// "type": {
		/// "type": "string"
		/// },
		/// "enabled": {
		/// "type": "boolean"
		/// }
		/// },
		/// "required": [
		/// "key",
		/// "value"
		/// ]
		/// }
		/// }
		/// }
		/// }
		/// },
		/// "required": [
		/// "environment"
		/// ]
		/// }
		/// ```
		/// 
		/// On successful updation of the environment, the API returns the environment name and `id`.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// UpdateEnvironment environments/{environment_uid}
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<UpdateEnvironmentReturn> UpdateEnvironmentAsync(UpdateEnvironmentPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "environments/{environment_uid}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateEnvironmentReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Import external API specification
		/// This endpoint allows you to import external API specifications into Postman.
		/// 
		/// Currently, this endpoint only supports the <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md">OpenAPI</a> specification, for which the `importType` will be `openapi`.
		/// 
		/// On a successful import, the response will be an array with each element contaning `id`, `name` and `uid` of entities created.
		/// 
		/// Supported `type`s:
		/// 
		/// - string
		/// - json
		/// - file
		/// 
		/// The `input` parameter should be defined based on the `type`.
		/// 
		/// > To import a file, request body must be form-data with `type` param set to `file`.
		/// 
		/// **Note**: Refer to examples for different scenarios.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header.
		/// ImportExternalApiSpecification import/openapi
		/// </summary>
		/// <returns>Success: Import to a specific workspace with workspace ID passed as a query parameter</returns>
		public async Task<ImportExternalApiSpecificationReturn> ImportExternalApiSpecificationAsync(ImportExternalApiSpecificationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "import/openapi";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ImportExternalApiSpecificationReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// API Key Owner
		/// the `/me` Postman API endpoint lets you access information about the authenticated user. You can retrieve the authenticated user's username, full name, e-mail address, and any other available information.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// ApiKeyOwner me
		/// </summary>
		/// <returns>Valid Response</returns>
		public async Task<ApiKeyOwnerReturn> ApiKeyOwnerAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApiKeyOwnerReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// All Mocks
		/// This endpoint fetches all the mocks that you have created.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// AllMocks mocks
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<AllMocksReturn> AllMocksAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mocks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AllMocksReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Mock
		/// This endpoint allows you to create a mock on a collection. You can also provide an environment UID to resolve any environment variables in the collection.
		/// 
		/// You can also specify the context of a workspace to create a mock in directly by passing the `workspace` as a query param.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// CreateMock mocks
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<CreateMockReturn> CreateMockAsync(CreateMockPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mocks";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateMockReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Mock
		/// This endpoint allows you to delete an existing mock using its `uid`.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// DeleteMock mocks/{mock_uid}
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<DeleteMockReturn> DeleteMockAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mocks/{mock_uid}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteMockReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Single Mock
		/// This endpoint fetches you the basic information about a single mock using its `uid`.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// SingleMock mocks/{mock_uid}
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<SingleMockReturn> SingleMockAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mocks/{mock_uid}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SingleMockReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Mock
		/// This endpoint allows you to update a mock you have created using its `uid`. The endpoint allows you to edit fields,
		/// * name
		/// * environment
		/// * description
		/// * private
		/// * versionTag
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// UpdateMock mocks/{mock_uid}
		/// </summary>
		/// <returns>success Response</returns>
		public async Task<UpdateMockReturn> UpdateMockAsync(UpdateMockPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mocks/{mock_uid}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateMockReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Publish Mock
		/// This endpoint publishes the mock you have created using its `uid`
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter.
		/// PublishMock mocks/{mock_uid}/publish
		/// </summary>
		/// <returns>Success Response</returns>
		public async Task<PublishMockReturn> PublishMockAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mocks/{mock_uid}/publish";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PublishMockReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Unpublish Mock
		/// This endpoint unpublishes the mock you have created using its `uid`
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key ` request header or `apikey` URL query parameter.
		/// UnpublishMock mocks/{mock_uid}/unpublish
		/// </summary>
		/// <returns>Success Response</returns>
		public async Task<UnpublishMockReturn> UnpublishMockAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mocks/{mock_uid}/unpublish";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UnpublishMockReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// All Monitors
		/// The `/monitors` endpoint returns a list of all [monitors](https://monitor.getpostman.com/) that are accessible by you.
		/// 
		/// The response contains an array of monitors information containing the `name`, `id`, `owner` and `uid` of each monitor.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// AllMonitors monitors
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<AllMonitorsReturn> AllMonitorsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "monitors";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AllMonitorsReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Monitor
		/// This endpoint allows you to create a monitor.
		/// 
		/// Some sample `cron` values are:
		/// 
		/// | Frequency                  | Cron Pattern   |
		/// |-----------------------|----------------|
		/// | Every 5 minutes       | `*/5 * * * *`  |
		/// | Every 30 minutes     | `*/30 * * * *` |
		/// | Every Hour         | `0 */1 * * *`  |
		/// | Every 6 Hours      | `0 */6 * * *`  |
		/// | Every day at 5pm    | `0 17 * * *`   |
		/// | Every Monday at 12pm  | `0 12 * * MON` |
		/// | Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |
		/// 
		/// Note: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules.
		/// 
		/// For more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
		/// 
		/// You can also specify the context of a workspace to create a monitor in directly by passing the `workspace` as a query param.
		/// 
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// CreateMonitor monitors
		/// </summary>
		/// <returns>Create Monitor in a Workspace</returns>
		public async Task<CreateMonitorReturn> CreateMonitorAsync(CreateMonitorPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "monitors";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateMonitorReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Monitor
		/// This endpoint can be used to delete an existing monitor using its `uid`.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// DeleteMonitor monitors/{monitor_uid}
		/// </summary>
		/// <returns>Monitor Deleted</returns>
		public async Task<DeleteMonitorReturn> DeleteMonitorAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "monitors/{monitor_uid}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteMonitorReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Single Monitor
		/// This endpoint fetches you basic information about the monitor using its `uid`.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// SingleMonitor monitors/{monitor_uid}
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<SingleMonitorReturn> SingleMonitorAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "monitors/{monitor_uid}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SingleMonitorReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Monitor
		/// This endpoint allows you to update a monitor using its `uid`. Only the monitor name and its schedule can be updated.
		/// 
		/// Some example `cron` values are:
		/// 
		/// | Frequency                  | Cron Pattern   |
		/// |-----------------------|----------------|
		/// | Every 5 minutes       | `*/5 * * * *`  |
		/// | Every 30 minutes     | `*/30 * * * *` |
		/// | Every Hour         | `0 */1 * * *`  |
		/// | Every 6 Hours      | `0 */6 * * *`  |
		/// | Every day at 5pm    | `0 17 * * *`   |
		/// | Every Monday at 12pm  | `0 12 * * MON` |
		/// | Every weekday (Monday - Friday) at 6am | `0 6 * * MON-FRI` |
		/// 
		/// Note: Currently, you can only create monitors at some limited schedules. You can head to [Postman Monitors](https://monitor.getpostman.com) to see the allowed schedules.
		/// 
		/// For more information about the format of the `timezone` value, check this [list of time zones.](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// UpdateMonitor monitors/{monitor_uid}
		/// </summary>
		/// <returns>Monitor Updated</returns>
		public async Task<UpdateMonitorReturn> UpdateMonitorAsync(UpdateMonitorPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "monitors/{monitor_uid}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateMonitorReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Run a Monitor
		/// This endpoint will run the monitor instantly and wait for the monitor to run completely. It responds with the run results.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// RunAMonitor monitors/{monitor_uid}/run
		/// </summary>
		/// <returns>Monitor Run with Errors</returns>
		public async Task<RunAMonitorReturn> RunAMonitorAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "monitors/{monitor_uid}/run";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RunAMonitorReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Webhook
		/// Create a webhook that triggers a collection with your custom payload.
		/// 
		/// You can specify the webhook name and the collection to trigger by using the following attributes of the `webhook` object on your JSON body:
		/// 
		/// * `name`: the name of the webhook that you're creating.
		/// * `collection`: the ID of the collection that you want to trigger once this webhook is called.
		/// 
		/// Once created, the webhook URL can be retrieved by accessing the `webhookUrl` attribute of the `webhook` object on the response JSON payload.
		/// CreateWebhook webhooks
		/// </summary>
		public async Task CreateWebhookAsync(string workspace, CreateWebhookPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks?workspace=" + (workspace==null? "" : System.Uri.EscapeDataString(workspace));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// All workspaces
		/// The `/workspaces` endpoint returns a list of all [workspaces](https://www.getpostman.com/docs/v6/postman/workspaces/intro_to_workspaces) that is accessible by you. The list includes your own workspaces and the workspaces that you have access to.
		/// 
		/// The response contains an array of collection information containing the `name`, `id`, and `type` of each workspace.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// AllWorkspaces workspaces
		/// </summary>
		/// <returns>Valid Response</returns>
		public async Task<AllWorkspacesReturn> AllWorkspacesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<AllWorkspacesReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create Workspace
		/// This endpoint allows you to create a workspace and populate it with entities like `collections`, `environments`, `mocks` and `monitors` using their `uid`.
		/// 
		/// On successful creation of the workspace, the response returns the workspcae `name` and `id`.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// CreateWorkspace workspaces
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<CreateWorkspaceReturn> CreateWorkspaceAsync(CreateWorkspacePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<CreateWorkspaceReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete Workspace
		/// This endpoint allows you to delete an existing workspace.
		/// 
		/// On successful deletion of the workspace, the response returns the `id`.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// DeleteWorkspace workspaces/{workspace_id}
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<DeleteWorkspaceReturn> DeleteWorkspaceAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_id}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<DeleteWorkspaceReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Single workspace
		/// Access the contents of a workspace that is accessible to you using its id (`id`). Includes the collections, environments, mocks and monitors of that workspace.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// SingleWorkspace workspaces/{workspace_id}
		/// </summary>
		/// <returns>Valid Response</returns>
		public async Task<SingleWorkspaceReturn> SingleWorkspaceAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_id}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SingleWorkspaceReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update Workspace
		/// This endpoint allows you to update a workspace and update it's association to entities like `collections`, `environments`, `mocks` and `monitors` using their `uid`.
		/// 
		/// On successful updation of the workspace, the response returns the workspcae `name` and `id`.
		/// 
		/// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
		/// 
		/// **Note** : The endpoint expects you to send the desired state of the workspace in terms of the associated entities so be careful when trying to update these entities.
		/// 
		/// For eg. if your workspace has collections A and B, and in the update call, you send C's uid in the collections array, then A and B would be removed from the workspace and C would be added.
		/// UpdateWorkspace workspaces/{workspace_id}
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<UpdateWorkspaceReturn> UpdateWorkspaceAsync(UpdateWorkspacePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "workspaces/{workspace_id}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<UpdateWorkspaceReturn>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
	
	public class CreateApiPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="api")]
		public CreateApiPostBodyApi Api { get; set; }
	}
	
	public class CreateApiPostBodyApi
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	public class CreateApiReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="api")]
		public CreateApiReturnApi Api { get; set; }
	}
	
	public class CreateApiReturnApi
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class DeleteAnApiReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="api")]
		public DeleteAnApiReturnApi Api { get; set; }
	}
	
	public class DeleteAnApiReturnApi
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class SingleApiReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="api")]
		public SingleApiReturnApi Api { get; set; }
	}
	
	public class SingleApiReturnApi
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class UpdateAnApiPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="api")]
		public UpdateAnApiPutBodyApi Api { get; set; }
	}
	
	public class UpdateAnApiPutBodyApi
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class UpdateAnApiReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="api")]
		public UpdateAnApiReturnApi Api { get; set; }
	}
	
	public class UpdateAnApiReturnApi
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetAllApiVersionsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public GetAllApiVersionsReturnVersions[] GetAllApiVersionsReturnVersions { get; set; }
	}
	
	public class GetAllApiVersionsReturnVersions
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class CreateApiVersionPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public CreateApiVersionPostBodyVersion Version { get; set; }
	}
	
	public class CreateApiVersionPostBodyVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public CreateApiVersionPostBodyVersionSource Source { get; set; }
	}
	
	public class CreateApiVersionPostBodyVersionSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relations")]
		public CreateApiVersionPostBodyVersionSourceRelations Relations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public System.Nullable<System.Boolean> Schema { get; set; }
	}
	
	public class CreateApiVersionPostBodyVersionSourceRelations
	{
		
		[System.Runtime.Serialization.DataMember(Name="documentation")]
		public System.Nullable<System.Boolean> Documentation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mock")]
		public System.Nullable<System.Boolean> Mock { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public System.Nullable<System.Boolean> Monitor { get; set; }
	}
	
	public class CreateApiVersionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public CreateApiVersionReturnVersion Version { get; set; }
	}
	
	public class CreateApiVersionReturnVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class DeleteAnApiVersionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public DeleteAnApiVersionReturnVersion Version { get; set; }
	}
	
	public class DeleteAnApiVersionReturnVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class GetAnApiVersionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public GetAnApiVersionReturnVersion Version { get; set; }
	}
	
	public class GetAnApiVersionReturnVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string[] Schema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public string UpdatedBy { get; set; }
	}
	
	public class UpdateAnApiVersionPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public UpdateAnApiVersionPutBodyVersion Version { get; set; }
	}
	
	public class UpdateAnApiVersionPutBodyVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class UpdateAnApiVersionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public UpdateAnApiVersionReturnVersion Version { get; set; }
	}
	
	public class UpdateAnApiVersionReturnVersion
	{
		
		[System.Runtime.Serialization.DataMember(Name="api")]
		public string Api { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedBy")]
		public string UpdatedBy { get; set; }
	}
	
	public class GetContractTestRelationsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="contracttest")]
		public GetContractTestRelationsReturnContracttest[] GetContractTestRelationsReturnContracttest { get; set; }
	}
	
	public class GetContractTestRelationsReturnContracttest
	{
		
		[System.Runtime.Serialization.DataMember(Name="collectionId")]
		public string CollectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetDocumentationRelationsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="documentation")]
		public GetDocumentationRelationsReturnDocumentation[] GetDocumentationRelationsReturnDocumentation { get; set; }
	}
	
	public class GetDocumentationRelationsReturnDocumentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="collectionId")]
		public string CollectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetEnvironmentRelationsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public GetEnvironmentRelationsReturnEnvironment[] GetEnvironmentRelationsReturnEnvironment { get; set; }
	}
	
	public class GetEnvironmentRelationsReturnEnvironment
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetIntegrationTestRelationsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="integrationtest")]
		public GetIntegrationTestRelationsReturnIntegrationtest[] GetIntegrationTestRelationsReturnIntegrationtest { get; set; }
	}
	
	public class GetIntegrationTestRelationsReturnIntegrationtest
	{
		
		[System.Runtime.Serialization.DataMember(Name="collectionId")]
		public string CollectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetMonitorRelationsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public GetMonitorRelationsReturnMonitor[] GetMonitorRelationsReturnMonitor { get; set; }
	}
	
	public class GetMonitorRelationsReturnMonitor
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monitorId")]
		public string MonitorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetLinkedRelationsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="relations")]
		public GetLinkedRelationsReturnRelations Relations { get; set; }
	}
	
	public class GetLinkedRelationsReturnRelations
	{
		
		[System.Runtime.Serialization.DataMember(Name="contracttest")]
		public GetLinkedRelationsReturnRelationsContracttest Contracttest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="integrationtest")]
		public GetLinkedRelationsReturnRelationsIntegrationtest Integrationtest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mock")]
		public GetLinkedRelationsReturnRelationsMock Mock { get; set; }
	}
	
	public class GetLinkedRelationsReturnRelationsContracttest
	{
		
		[System.Runtime.Serialization.DataMember(Name="2a9b8fa8-88b7-4b86-8372-8e3f6f6e07f2")]
		public GetLinkedRelationsReturnRelationsContracttest_2a9b8fa8_88b7_4b86_8372_8e3f6f6e07f2 _2a9b8fa8_88b7_4b86_8372_8e3f6f6e07f2 { get; set; }
	}
	
	public class GetLinkedRelationsReturnRelationsContracttest_2a9b8fa8_88b7_4b86_8372_8e3f6f6e07f2
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetLinkedRelationsReturnRelationsIntegrationtest
	{
		
		[System.Runtime.Serialization.DataMember(Name="521b0486-ab91-4d3a-9189-43c9380a0533")]
		public GetLinkedRelationsReturnRelationsIntegrationtest_521b0486_ab91_4d3a_9189_43c9380a0533 _521b0486_ab91_4d3a_9189_43c9380a0533 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="a236b715-e682-460b-97b6-c1db24f7612e")]
		public GetLinkedRelationsReturnRelationsIntegrationtestA236b715_e682_460b_97b6_c1db24f7612e A236b715_e682_460b_97b6_c1db24f7612e { get; set; }
	}
	
	public class GetLinkedRelationsReturnRelationsIntegrationtest_521b0486_ab91_4d3a_9189_43c9380a0533
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetLinkedRelationsReturnRelationsIntegrationtestA236b715_e682_460b_97b6_c1db24f7612e
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetLinkedRelationsReturnRelationsMock
	{
		
		[System.Runtime.Serialization.DataMember(Name="4ccd755f-2c80-481b-a262-49b55e12f5e1")]
		public GetLinkedRelationsReturnRelationsMock_4ccd755f_2c80_481b_a262_49b55e12f5e1 _4ccd755f_2c80_481b_a262_49b55e12f5e1 { get; set; }
	}
	
	public class GetLinkedRelationsReturnRelationsMock_4ccd755f_2c80_481b_a262_49b55e12f5e1
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class CreateRelationsPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="contracttest")]
		public string[] Contracttest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentation")]
		public string[] Documentation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mock")]
		public string[] Mock { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testsuite")]
		public string[] Testsuite { get; set; }
	}
	
	public class CreateRelationsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="contracttest")]
		public string[] Contracttest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="documentation")]
		public string[] Documentation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testsuite")]
		public string[] Testsuite { get; set; }
	}
	
	public class CreateSchemaPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public CreateSchemaPostBodySchema Schema { get; set; }
	}
	
	public class CreateSchemaPostBodySchema
	{
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class CreateSchemaReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public CreateSchemaReturnSchema Schema { get; set; }
	}
	
	public class CreateSchemaReturnSchema
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateBy")]
		public string UpdateBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetSchemaReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public GetSchemaReturnSchema Schema { get; set; }
	}
	
	public class GetSchemaReturnSchema
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateBy")]
		public string UpdateBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class UpdateSchemaPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public UpdateSchemaPutBodySchema Schema { get; set; }
	}
	
	public class UpdateSchemaPutBodySchema
	{
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class UpdateSchemaReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public UpdateSchemaReturnSchema Schema { get; set; }
	}
	
	public class UpdateSchemaReturnSchema
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updateBy")]
		public string UpdateBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class CreateCollectionFromSchemaPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relations")]
		public CreateCollectionFromSchemaPostBodyRelations[] CreateCollectionFromSchemaPostBodyRelations { get; set; }
	}
	
	public class CreateCollectionFromSchemaPostBodyRelations
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class CreateCollectionFromSchemaReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public CreateCollectionFromSchemaReturnCollection Collection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relations")]
		public CreateCollectionFromSchemaReturnRelations[] CreateCollectionFromSchemaReturnRelations { get; set; }
	}
	
	public class CreateCollectionFromSchemaReturnCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class CreateCollectionFromSchemaReturnRelations
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class GetTestSuiteRelationsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="testsuite")]
		public GetTestSuiteRelationsReturnTestsuite[] GetTestSuiteRelationsReturnTestsuite { get; set; }
	}
	
	public class GetTestSuiteRelationsReturnTestsuite
	{
		
		[System.Runtime.Serialization.DataMember(Name="collectionId")]
		public string CollectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class SyncRelationsWithSchemaReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	public class AllCollectionsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="collections")]
		public AllCollectionsReturnCollections[] AllCollectionsReturnCollections { get; set; }
	}
	
	public class AllCollectionsReturnCollections
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class CreateCollectionPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public CreateCollectionPostBodyCollection Collection { get; set; }
	}
	
	public class CreateCollectionPostBodyCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public CreateCollectionPostBodyCollectionInfo Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public CreateCollectionPostBodyCollectionItem[] CreateCollectionPostBodyCollectionItem { get; set; }
	}
	
	public class CreateCollectionPostBodyCollectionInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
	}
	
	public class CreateCollectionPostBodyCollectionItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public CreateCollectionPostBodyCollectionItemItem[] CreateCollectionPostBodyCollectionItemItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class CreateCollectionPostBodyCollectionItemItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public CreateCollectionPostBodyCollectionItemItemRequest Request { get; set; }
	}
	
	public class CreateCollectionPostBodyCollectionItemItemRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public CreateCollectionPostBodyCollectionItemItemRequestBody Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="header")]
		public CreateCollectionPostBodyCollectionItemItemRequestHeader[] CreateCollectionPostBodyCollectionItemItemRequestHeader { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class CreateCollectionPostBodyCollectionItemItemRequestBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="raw")]
		public string Raw { get; set; }
	}
	
	public class CreateCollectionPostBodyCollectionItemItemRequestHeader
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class CreateCollectionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public CreateCollectionReturnCollection Collection { get; set; }
	}
	
	public class CreateCollectionReturnCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class CreateAForkPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class MergeAForkPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public string Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public string Strategy { get; set; }
	}
	
	public class DeleteCollectionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public DeleteCollectionReturnCollection Collection { get; set; }
	}
	
	public class DeleteCollectionReturnCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class SingleCollectionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public SingleCollectionReturnCollection Collection { get; set; }
	}
	
	public class SingleCollectionReturnCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public SingleCollectionReturnCollectionInfo Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public SingleCollectionReturnCollectionItem[] SingleCollectionReturnCollectionItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public string[] Variables { get; set; }
	}
	
	public class SingleCollectionReturnCollectionInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _postman_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
	}
	
	public class SingleCollectionReturnCollectionItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="event")]
		public SingleCollectionReturnCollectionItemEvent[] SingleCollectionReturnCollectionItemEvent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public SingleCollectionReturnCollectionItemRequest Request { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public string[] Response { get; set; }
	}
	
	public class SingleCollectionReturnCollectionItemEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="listen")]
		public string Listen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="script")]
		public SingleCollectionReturnCollectionItemEventScript Script { get; set; }
	}
	
	public class SingleCollectionReturnCollectionItemEventScript
	{
		
		[System.Runtime.Serialization.DataMember(Name="exec")]
		public string Exec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class SingleCollectionReturnCollectionItemRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public SingleCollectionReturnCollectionItemRequestBody Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="header")]
		public SingleCollectionReturnCollectionItemRequestHeader[] SingleCollectionReturnCollectionItemRequestHeader { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class SingleCollectionReturnCollectionItemRequestBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="formdata")]
		public string[] Formdata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
	}
	
	public class SingleCollectionReturnCollectionItemRequestHeader
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class UpdateCollectionPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public UpdateCollectionPutBodyCollection Collection { get; set; }
	}
	
	public class UpdateCollectionPutBodyCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public UpdateCollectionPutBodyCollectionInfo Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public UpdateCollectionPutBodyCollectionItem[] UpdateCollectionPutBodyCollectionItem { get; set; }
	}
	
	public class UpdateCollectionPutBodyCollectionInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _postman_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
	}
	
	public class UpdateCollectionPutBodyCollectionItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public UpdateCollectionPutBodyCollectionItemItem[] UpdateCollectionPutBodyCollectionItemItem { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class UpdateCollectionPutBodyCollectionItemItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public UpdateCollectionPutBodyCollectionItemItemRequest Request { get; set; }
	}
	
	public class UpdateCollectionPutBodyCollectionItemItemRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public UpdateCollectionPutBodyCollectionItemItemRequestBody Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="header")]
		public UpdateCollectionPutBodyCollectionItemItemRequestHeader[] UpdateCollectionPutBodyCollectionItemItemRequestHeader { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class UpdateCollectionPutBodyCollectionItemItemRequestBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="raw")]
		public string Raw { get; set; }
	}
	
	public class UpdateCollectionPutBodyCollectionItemItemRequestHeader
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class UpdateCollectionReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public UpdateCollectionReturnCollection Collection { get; set; }
	}
	
	public class UpdateCollectionReturnCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class AllEnvironmentsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public AllEnvironmentsReturnEnvironments[] AllEnvironmentsReturnEnvironments { get; set; }
	}
	
	public class AllEnvironmentsReturnEnvironments
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class CreateEnvironmentPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public CreateEnvironmentPostBodyEnvironment Environment { get; set; }
	}
	
	public class CreateEnvironmentPostBodyEnvironment
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public CreateEnvironmentPostBodyEnvironmentValues[] CreateEnvironmentPostBodyEnvironmentValues { get; set; }
	}
	
	public class CreateEnvironmentPostBodyEnvironmentValues
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class CreateEnvironmentReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public CreateEnvironmentReturnEnvironment Environment { get; set; }
	}
	
	public class CreateEnvironmentReturnEnvironment
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class DeleteEnvironmentReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public DeleteEnvironmentReturnEnvironment Environment { get; set; }
	}
	
	public class DeleteEnvironmentReturnEnvironment
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class SingleEnvironmentReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public SingleEnvironmentReturnEnvironment Environment { get; set; }
	}
	
	public class SingleEnvironmentReturnEnvironment
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public SingleEnvironmentReturnEnvironmentValues[] SingleEnvironmentReturnEnvironmentValues { get; set; }
	}
	
	public class SingleEnvironmentReturnEnvironmentValues
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hovered")]
		public System.Nullable<System.Boolean> Hovered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class UpdateEnvironmentPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public UpdateEnvironmentPutBodyEnvironment Environment { get; set; }
	}
	
	public class UpdateEnvironmentPutBodyEnvironment
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public UpdateEnvironmentPutBodyEnvironmentValues[] UpdateEnvironmentPutBodyEnvironmentValues { get; set; }
	}
	
	public class UpdateEnvironmentPutBodyEnvironmentValues
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class UpdateEnvironmentReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public UpdateEnvironmentReturnEnvironment Environment { get; set; }
	}
	
	public class UpdateEnvironmentReturnEnvironment
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public ImportExternalApiSpecificationPostBodyInput Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public ImportExternalApiSpecificationPostBodyInputInfo Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openapi")]
		public string Openapi { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public ImportExternalApiSpecificationPostBodyInputPaths Paths { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="servers")]
		public ImportExternalApiSpecificationPostBodyInputServers[] ImportExternalApiSpecificationPostBodyInputServers { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="license")]
		public ImportExternalApiSpecificationPostBodyInputInfoLicense License { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputInfoLicense
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputPaths
	{
		
		[System.Runtime.Serialization.DataMember(Name="/pets")]
		public ImportExternalApiSpecificationPostBodyInputPathsSlashpets Slashpets { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputPathsSlashpets
	{
		
		[System.Runtime.Serialization.DataMember(Name="get")]
		public ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGet Get { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGet
	{
		
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetParameters[] ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponses Responses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="in")]
		public string In { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public System.Nullable<System.Boolean> Required { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetParametersSchema Schema { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetParametersSchema
	{
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponses
	{
		
		[System.Runtime.Serialization.DataMember(Name="default")]
		public ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefault Default { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefault
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefaultContent Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefaultContent
	{
		
		[System.Runtime.Serialization.DataMember(Name="application/json")]
		public ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefaultContentApplicationSlashjson ApplicationSlashjson { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefaultContentApplicationSlashjson
	{
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefaultContentApplicationSlashjsonSchema Schema { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefaultContentApplicationSlashjsonSchema
	{
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefaultContentApplicationSlashjsonSchemaProperties Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="required")]
		public string[] Required { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefaultContentApplicationSlashjsonSchemaProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefaultContentApplicationSlashjsonSchemaPropertiesCode Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefaultContentApplicationSlashjsonSchemaPropertiesMessage Message { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefaultContentApplicationSlashjsonSchemaPropertiesCode
	{
		
		[System.Runtime.Serialization.DataMember(Name="format")]
		public string Format { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputPathsSlashpetsGetResponsesDefaultContentApplicationSlashjsonSchemaPropertiesMessage
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ImportExternalApiSpecificationPostBodyInputServers
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ImportExternalApiSpecificationReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="collections")]
		public ImportExternalApiSpecificationReturnCollections[] ImportExternalApiSpecificationReturnCollections { get; set; }
	}
	
	public class ImportExternalApiSpecificationReturnCollections
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class ApiKeyOwnerReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public ApiKeyOwnerReturnOperations[] ApiKeyOwnerReturnOperations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public ApiKeyOwnerReturnUser User { get; set; }
	}
	
	public class ApiKeyOwnerReturnOperations
	{
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Double> Limit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overage")]
		public System.Nullable<System.Double> Overage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public System.Nullable<System.Double> Usage { get; set; }
	}
	
	public class ApiKeyOwnerReturnUser
	{
		
		[System.Runtime.Serialization.DataMember(Name="avatar")]
		public string Avatar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isPublic")]
		public System.Nullable<System.Boolean> IsPublic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class AllMocksReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="mocks")]
		public AllMocksReturnMocks[] AllMocksReturnMocks { get; set; }
	}
	
	public class AllMocksReturnMocks
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mockUrl")]
		public string MockUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class CreateMockPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="mock")]
		public CreateMockPostBodyMock Mock { get; set; }
	}
	
	public class CreateMockPostBodyMock
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
	}
	
	public class CreateMockReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="mock")]
		public CreateMockReturnMock Mock { get; set; }
	}
	
	public class CreateMockReturnMock
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mockUrl")]
		public string MockUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class DeleteMockReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="mock")]
		public DeleteMockReturnMock Mock { get; set; }
	}
	
	public class DeleteMockReturnMock
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class SingleMockReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="mock")]
		public SingleMockReturnMock Mock { get; set; }
	}
	
	public class SingleMockReturnMock
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mockUrl")]
		public string MockUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class UpdateMockPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="mock")]
		public UpdateMockPutBodyMock Mock { get; set; }
	}
	
	public class UpdateMockPutBodyMock
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="private")]
		public System.Nullable<System.Boolean> Private { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionTag")]
		public string VersionTag { get; set; }
	}
	
	public class UpdateMockReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="mock")]
		public UpdateMockReturnMock Mock { get; set; }
	}
	
	public class UpdateMockReturnMock
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public UpdateMockReturnMockConfig Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mockUrl")]
		public string MockUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class UpdateMockReturnMockConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public string[] Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="matchBody")]
		public System.Nullable<System.Boolean> MatchBody { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="matchQueryParams")]
		public System.Nullable<System.Boolean> MatchQueryParams { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="matchWildcards")]
		public System.Nullable<System.Boolean> MatchWildcards { get; set; }
	}
	
	public class PublishMockReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="mock")]
		public PublishMockReturnMock Mock { get; set; }
	}
	
	public class PublishMockReturnMock
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class UnpublishMockReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="mock")]
		public UnpublishMockReturnMock Mock { get; set; }
	}
	
	public class UnpublishMockReturnMock
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class AllMonitorsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="monitors")]
		public AllMonitorsReturnMonitors[] AllMonitorsReturnMonitors { get; set; }
	}
	
	public class AllMonitorsReturnMonitors
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class CreateMonitorPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public CreateMonitorPostBodyMonitor Monitor { get; set; }
	}
	
	public class CreateMonitorPostBodyMonitor
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public string Environment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public CreateMonitorPostBodyMonitorSchedule Schedule { get; set; }
	}
	
	public class CreateMonitorPostBodyMonitorSchedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="cron")]
		public string Cron { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	public class CreateMonitorReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public CreateMonitorReturnMonitor Monitor { get; set; }
	}
	
	public class CreateMonitorReturnMonitor
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class DeleteMonitorReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public DeleteMonitorReturnMonitor Monitor { get; set; }
	}
	
	public class DeleteMonitorReturnMonitor
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class SingleMonitorReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public SingleMonitorReturnMonitor Monitor { get; set; }
	}
	
	public class SingleMonitorReturnMonitor
	{
		
		[System.Runtime.Serialization.DataMember(Name="collectionUid")]
		public string CollectionUid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distribution")]
		public string[] Distribution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentUid")]
		public string EnvironmentUid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastRun")]
		public SingleMonitorReturnMonitorLastRun LastRun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notifications")]
		public SingleMonitorReturnMonitorNotifications Notifications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public SingleMonitorReturnMonitorOptions Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public SingleMonitorReturnMonitorSchedule Schedule { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class SingleMonitorReturnMonitorLastRun
	{
		
		[System.Runtime.Serialization.DataMember(Name="finishedAt")]
		public string FinishedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public string StartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public SingleMonitorReturnMonitorLastRunStats Stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class SingleMonitorReturnMonitorLastRunStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="assertions")]
		public SingleMonitorReturnMonitorLastRunStatsAssertions Assertions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public SingleMonitorReturnMonitorLastRunStatsRequests Requests { get; set; }
	}
	
	public class SingleMonitorReturnMonitorLastRunStatsAssertions
	{
		
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public System.Nullable<System.Double> Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class SingleMonitorReturnMonitorLastRunStatsRequests
	{
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class SingleMonitorReturnMonitorNotifications
	{
		
		[System.Runtime.Serialization.DataMember(Name="onError")]
		public SingleMonitorReturnMonitorNotificationsOnError[] SingleMonitorReturnMonitorNotificationsOnError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onFailure")]
		public SingleMonitorReturnMonitorNotificationsOnFailure[] SingleMonitorReturnMonitorNotificationsOnFailure { get; set; }
	}
	
	public class SingleMonitorReturnMonitorNotificationsOnError
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	public class SingleMonitorReturnMonitorNotificationsOnFailure
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
	}
	
	public class SingleMonitorReturnMonitorOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="followRedirects")]
		public System.Nullable<System.Boolean> FollowRedirects { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestDelay")]
		public System.Nullable<System.Double> RequestDelay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestTimeout")]
		public System.Nullable<System.Double> RequestTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strictSSL")]
		public System.Nullable<System.Boolean> StrictSSL { get; set; }
	}
	
	public class SingleMonitorReturnMonitorSchedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="cron")]
		public string Cron { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextRun")]
		public string NextRun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	public class UpdateMonitorPutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public UpdateMonitorPutBodyMonitor Monitor { get; set; }
	}
	
	public class UpdateMonitorPutBodyMonitor
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public UpdateMonitorPutBodyMonitorSchedule Schedule { get; set; }
	}
	
	public class UpdateMonitorPutBodyMonitorSchedule
	{
		
		[System.Runtime.Serialization.DataMember(Name="cron")]
		public string Cron { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	public class UpdateMonitorReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="monitor")]
		public UpdateMonitorReturnMonitor Monitor { get; set; }
	}
	
	public class UpdateMonitorReturnMonitor
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class RunAMonitorReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="run")]
		public RunAMonitorReturnRun Run { get; set; }
	}
	
	public class RunAMonitorReturnRun
	{
		
		[System.Runtime.Serialization.DataMember(Name="executions")]
		public RunAMonitorReturnRunExecutions[] RunAMonitorReturnRunExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failures")]
		public RunAMonitorReturnRunFailures[] RunAMonitorReturnRunFailures { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public RunAMonitorReturnRunInfo Info { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stats")]
		public RunAMonitorReturnRunStats Stats { get; set; }
	}
	
	public class RunAMonitorReturnRunExecutions
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Double> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="item")]
		public RunAMonitorReturnRunExecutionsItem Item { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="request")]
		public RunAMonitorReturnRunExecutionsRequest Request { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="response")]
		public RunAMonitorReturnRunExecutionsResponse Response { get; set; }
	}
	
	public class RunAMonitorReturnRunExecutionsItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class RunAMonitorReturnRunExecutionsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public RunAMonitorReturnRunExecutionsRequestBody Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public RunAMonitorReturnRunExecutionsRequestHeaders Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class RunAMonitorReturnRunExecutionsRequestBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentLength")]
		public System.Nullable<System.Double> ContentLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
	}
	
	public class RunAMonitorReturnRunExecutionsRequestHeaders
	{
		
		[System.Runtime.Serialization.DataMember(Name="accept")]
		public string Accept { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accept-encoding")]
		public string Accept_encoding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content-length")]
		public System.Nullable<System.Double> Content_length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content-type")]
		public string Content_type { get; set; }
	}
	
	public class RunAMonitorReturnRunExecutionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public RunAMonitorReturnRunExecutionsResponseBody Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Double> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public RunAMonitorReturnRunExecutionsResponseHeaders Headers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseSize")]
		public System.Nullable<System.Double> ResponseSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseTime")]
		public System.Nullable<System.Double> ResponseTime { get; set; }
	}
	
	public class RunAMonitorReturnRunExecutionsResponseBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentLength")]
		public System.Nullable<System.Double> ContentLength { get; set; }
	}
	
	public class RunAMonitorReturnRunExecutionsResponseHeaders
	{
		
		[System.Runtime.Serialization.DataMember(Name="connection")]
		public string Connection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content-encoding")]
		public string Content_encoding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="content-type")]
		public string Content_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transfer-encoding")]
		public string Transfer_encoding { get; set; }
	}
	
	public class RunAMonitorReturnRunFailures
	{
		
		[System.Runtime.Serialization.DataMember(Name="assertion")]
		public RunAMonitorReturnRunFailuresAssertion Assertion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public System.Nullable<System.Double> ExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class RunAMonitorReturnRunFailuresAssertion
	{
		
		[System.Runtime.Serialization.DataMember(Name="Status code is 400")]
		public System.Nullable<System.Boolean> Status_code_is_400 { get; set; }
	}
	
	public class RunAMonitorReturnRunInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="collectionUid")]
		public string CollectionUid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="finishedAt")]
		public string FinishedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monitorId")]
		public string MonitorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public string StartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class RunAMonitorReturnRunStats
	{
		
		[System.Runtime.Serialization.DataMember(Name="assertions")]
		public RunAMonitorReturnRunStatsAssertions Assertions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public RunAMonitorReturnRunStatsRequests Requests { get; set; }
	}
	
	public class RunAMonitorReturnRunStatsAssertions
	{
		
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public System.Nullable<System.Double> Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class RunAMonitorReturnRunStatsRequests
	{
		
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public System.Nullable<System.Double> Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class CreateWebhookPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="webhook")]
		public CreateWebhookPostBodyWebhook Webhook { get; set; }
	}
	
	public class CreateWebhookPostBodyWebhook
	{
		
		[System.Runtime.Serialization.DataMember(Name="collection")]
		public string Collection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class AllWorkspacesReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="workspaces")]
		public AllWorkspacesReturnWorkspaces[] AllWorkspacesReturnWorkspaces { get; set; }
	}
	
	public class AllWorkspacesReturnWorkspaces
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class CreateWorkspacePostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public CreateWorkspacePostBodyWorkspace Workspace { get; set; }
	}
	
	public class CreateWorkspacePostBodyWorkspace
	{
		
		[System.Runtime.Serialization.DataMember(Name="collections")]
		public CreateWorkspacePostBodyWorkspaceCollections[] CreateWorkspacePostBodyWorkspaceCollections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public CreateWorkspacePostBodyWorkspaceEnvironments[] CreateWorkspacePostBodyWorkspaceEnvironments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mocks")]
		public CreateWorkspacePostBodyWorkspaceMocks[] CreateWorkspacePostBodyWorkspaceMocks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monitors")]
		public CreateWorkspacePostBodyWorkspaceMonitors[] CreateWorkspacePostBodyWorkspaceMonitors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class CreateWorkspacePostBodyWorkspaceCollections
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class CreateWorkspacePostBodyWorkspaceEnvironments
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class CreateWorkspacePostBodyWorkspaceMocks
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class CreateWorkspacePostBodyWorkspaceMonitors
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class CreateWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public CreateWorkspaceReturnWorkspace Workspace { get; set; }
	}
	
	public class CreateWorkspaceReturnWorkspace
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class DeleteWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public DeleteWorkspaceReturnWorkspace Workspace { get; set; }
	}
	
	public class DeleteWorkspaceReturnWorkspace
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class SingleWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public SingleWorkspaceReturnWorkspace Workspace { get; set; }
	}
	
	public class SingleWorkspaceReturnWorkspace
	{
		
		[System.Runtime.Serialization.DataMember(Name="collections")]
		public SingleWorkspaceReturnWorkspaceCollections[] SingleWorkspaceReturnWorkspaceCollections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public SingleWorkspaceReturnWorkspaceEnvironments[] SingleWorkspaceReturnWorkspaceEnvironments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class SingleWorkspaceReturnWorkspaceCollections
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class SingleWorkspaceReturnWorkspaceEnvironments
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class UpdateWorkspacePutBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public UpdateWorkspacePutBodyWorkspace Workspace { get; set; }
	}
	
	public class UpdateWorkspacePutBodyWorkspace
	{
		
		[System.Runtime.Serialization.DataMember(Name="collections")]
		public UpdateWorkspacePutBodyWorkspaceCollections[] UpdateWorkspacePutBodyWorkspaceCollections { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public UpdateWorkspacePutBodyWorkspaceEnvironments[] UpdateWorkspacePutBodyWorkspaceEnvironments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mocks")]
		public UpdateWorkspacePutBodyWorkspaceMocks[] UpdateWorkspacePutBodyWorkspaceMocks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monitors")]
		public UpdateWorkspacePutBodyWorkspaceMonitors[] UpdateWorkspacePutBodyWorkspaceMonitors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class UpdateWorkspacePutBodyWorkspaceCollections
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class UpdateWorkspacePutBodyWorkspaceEnvironments
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
	}
	
	public class UpdateWorkspacePutBodyWorkspaceMocks
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class UpdateWorkspacePutBodyWorkspaceMonitors
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	public class UpdateWorkspaceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="workspace")]
		public UpdateWorkspaceReturnWorkspace Workspace { get; set; }
	}
	
	public class UpdateWorkspaceReturnWorkspace
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
