//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An SSL certificate that a user has been authorized to administer. A user is authorized to administer any certificate that applies to one of their authorized domains.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizedCertificate
	{
		
		/// <summary>
		/// An SSL certificate obtained from a certificate authority.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateRawData")]
		public CertificateRawData CertificateRawData { get; set; }
		
		/// <summary>
		/// The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Aggregate count of the domain mappings with this certificate mapped. This count includes domain mappings on applications for which the user does not have VIEWER permissions.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainMappingsCount")]
		public System.Nullable<System.Int32> DomainMappingsCount { get; set; }
		
		/// <summary>
		/// Topmost applicable domains of this certificate. This certificate applies to these domains and their subdomains. Example: example.com.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainNames")]
		public string[] DomainNames { get; set; }
		
		/// <summary>
		/// The time when this certificate expires. To update the renewal time on this certificate, upload an SSL certificate with a different expiration time using AuthorizedCertificates.UpdateAuthorizedCertificate.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// Relative name of the certificate. This is a unique value autogenerated on AuthorizedCertificate resource creation. Example: 12345.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A certificate managed by App Engine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedCertificate")]
		public ManagedCertificate ManagedCertificate { get; set; }
		
		/// <summary>
		/// Full path to the AuthorizedCertificate resource in the API. Example: apps/myapp/authorizedCertificates/12345.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The full paths to user visible Domain Mapping resources that have this certificate mapped. Example: apps/myapp/domainMappings/example.com.This may not represent the full list of mapped domain mappings if the user does not have VIEWER permissions on all of the applications that have this certificate mapped. See domain_mappings_count for a complete count.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibleDomainMappings")]
		public string[] VisibleDomainMappings { get; set; }
	}
	
	/// <summary>
	/// An SSL certificate obtained from a certificate authority.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateRawData
	{
		
		/// <summary>
		/// Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKey")]
		public string PrivateKey { get; set; }
		
		/// <summary>
		/// PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE----- 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicCertificate")]
		public string PublicCertificate { get; set; }
	}
	
	/// <summary>
	/// A certificate managed by App Engine.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedCertificate
	{
		
		/// <summary>
		/// Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRenewalTime")]
		public string LastRenewalTime { get; set; }
		
		/// <summary>
		/// Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ManagedCertificateStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ManagedCertificateStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSPECIFIED_STATUS")]
		UNSPECIFIED_STATUS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_RETRYING_INTERNAL")]
		FAILED_RETRYING_INTERNAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_RETRYING_NOT_VISIBLE")]
		FAILED_RETRYING_NOT_VISIBLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_PERMANENTLY_NOT_VISIBLE")]
		FAILED_PERMANENTLY_NOT_VISIBLE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_RETRYING_CAA_FORBIDDEN")]
		FAILED_RETRYING_CAA_FORBIDDEN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_RETRYING_CAA_CHECKING")]
		FAILED_RETRYING_CAA_CHECKING = 7,
	}
	
	/// <summary>
	/// A domain that a user has been authorized to administer. To authorize use of a domain, verify ownership via Search Console (https://search.google.com/search-console/welcome).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizedDomain
	{
		
		/// <summary>
		/// Fully qualified domain name of the domain authorized for use. Example: example.com.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Full path to the AuthorizedDomain resource in the API. Example: apps/myapp/authorizedDomains/example.com.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// ContainerState contains the externally-visible container state that is used to communicate the state and reasoning for that state to the CLH. This data is not persisted by CCFE, but is instead derived from CCFE's internal representation of the container state.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContainerState
	{
		
		/// <summary>
		/// Containers transition between and within states based on reasons sent from various systems. CCFE will provide the CLH with reasons for the current state per system.The current systems that CCFE supports are: Service Management (Inception) Data Governance (Wipeout) Abuse (Ares) Billing (Internal Cloud Billing API)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentReasons")]
		public Reasons CurrentReasons { get; set; }
		
		/// <summary>
		/// Containers transition between and within states based on reasons sent from various systems. CCFE will provide the CLH with reasons for the current state per system.The current systems that CCFE supports are: Service Management (Inception) Data Governance (Wipeout) Abuse (Ares) Billing (Internal Cloud Billing API)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousReasons")]
		public Reasons PreviousReasons { get; set; }
		
		/// <summary>
		/// The current state of the container. This state is the culmination of all of the opinions from external systems that CCFE knows about of the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ContainerStateState> State { get; set; }
	}
	
	/// <summary>
	/// Containers transition between and within states based on reasons sent from various systems. CCFE will provide the CLH with reasons for the current state per system.The current systems that CCFE supports are: Service Management (Inception) Data Governance (Wipeout) Abuse (Ares) Billing (Internal Cloud Billing API)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Reasons
	{
		
		[System.Runtime.Serialization.DataMember(Name="abuse")]
		public System.Nullable<ReasonsAbuse> Abuse { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="billing")]
		public System.Nullable<ReasonsBilling> Billing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataGovernance")]
		public System.Nullable<ReasonsDataGovernance> DataGovernance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceManagement")]
		public System.Nullable<ReasonsServiceManagement> ServiceManagement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReasonsAbuse
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ABUSE_UNKNOWN_REASON")]
		ABUSE_UNKNOWN_REASON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ABUSE_CONTROL_PLANE_SYNC")]
		ABUSE_CONTROL_PLANE_SYNC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUSPEND")]
		SUSPEND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REINSTATE")]
		REINSTATE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReasonsBilling
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BILLING_UNKNOWN_REASON")]
		BILLING_UNKNOWN_REASON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BILLING_CONTROL_PLANE_SYNC")]
		BILLING_CONTROL_PLANE_SYNC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROBATION")]
		PROBATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOSE")]
		CLOSE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPEN")]
		OPEN = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReasonsDataGovernance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA_GOVERNANCE_UNKNOWN_REASON")]
		DATA_GOVERNANCE_UNKNOWN_REASON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATA_GOVERNANCE_CONTROL_PLANE_SYNC")]
		DATA_GOVERNANCE_CONTROL_PLANE_SYNC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIDE")]
		HIDE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNHIDE")]
		UNHIDE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PURGE")]
		PURGE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReasonsServiceManagement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVICE_MANAGEMENT_UNKNOWN_REASON")]
		SERVICE_MANAGEMENT_UNKNOWN_REASON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVICE_MANAGEMENT_CONTROL_PLANE_SYNC")]
		SERVICE_MANAGEMENT_CONTROL_PLANE_SYNC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVATION")]
		ACTIVATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PREPARE_DEACTIVATION")]
		PREPARE_DEACTIVATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ABORT_DEACTIVATION")]
		ABORT_DEACTIVATION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMMIT_DEACTIVATION")]
		COMMIT_DEACTIVATION = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ContainerStateState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_STATE")]
		UNKNOWN_STATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ON")]
		ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 3,
	}
	
	/// <summary>
	/// Metadata for the given google.longrunning.Operation during a google.appengine.v1.CreateVersionRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVersionMetadataV1
	{
		
		/// <summary>
		/// The Cloud Build ID if one was created as part of the version create. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudBuildId")]
		public string CloudBuildId { get; set; }
	}
	
	/// <summary>
	/// Metadata for the given google.longrunning.Operation during a google.appengine.v1alpha.CreateVersionRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVersionMetadataV1Alpha
	{
		
		/// <summary>
		/// The Cloud Build ID if one was created as part of the version create. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudBuildId")]
		public string CloudBuildId { get; set; }
	}
	
	/// <summary>
	/// Metadata for the given google.longrunning.Operation during a google.appengine.v1beta.CreateVersionRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVersionMetadataV1Beta
	{
		
		/// <summary>
		/// The Cloud Build ID if one was created as part of the version create. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudBuildId")]
		public string CloudBuildId { get; set; }
	}
	
	/// <summary>
	/// A domain serving an App Engine application.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainMapping
	{
		
		/// <summary>
		/// Relative name of the domain serving the application. Example: example.com.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Full path to the DomainMapping resource in the API. Example: apps/myapp/domainMapping/example.com.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The resource records required to configure this domain mapping. These records must be added to the domain's DNS configuration in order to serve the application via this domain mapping.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceRecords")]
		public ResourceRecord[] ResourceRecords { get; set; }
		
		/// <summary>
		/// SSL configuration for a DomainMapping resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslSettings")]
		public SslSettings SslSettings { get; set; }
	}
	
	/// <summary>
	/// A DNS resource record.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceRecord
	{
		
		/// <summary>
		/// Relative name of the object affected by this record. Only applicable for CNAME records. Example: 'www'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Data for this record. Values vary by record type, as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rrdata")]
		public string Rrdata { get; set; }
		
		/// <summary>
		/// Resource record type. Example: AAAA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ResourceRecordType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceRecordType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="A")]
		A = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AAAA")]
		AAAA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CNAME")]
		CNAME = 2,
	}
	
	/// <summary>
	/// SSL configuration for a DomainMapping resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SslSettings
	{
		
		/// <summary>
		/// ID of the AuthorizedCertificate resource configuring SSL for the application. Clearing this field will remove SSL support.By default, a managed certificate is automatically created for every domain mapping. To omit SSL support or to configure SSL manually, specify no_managed_certificate on a CREATE or UPDATE request. You must be authorized to administer the AuthorizedCertificate resource to manually map it to a DomainMapping resource. Example: 12345.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateId")]
		public string CertificateId { get; set; }
		
		/// <summary>
		/// Whether the mapped certificate is an App Engine managed certificate. Managed certificates are created by default with a domain mapping. To opt out, specify no_managed_certificate on a CREATE or UPDATE request.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isManagedCertificate")]
		public System.Nullable<System.Boolean> IsManagedCertificate { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// Metadata for the given google.cloud.location.Location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleAppengineV1betaLocationMetadata
	{
		
		/// <summary>
		/// App Engine flexible environment is available in the given location.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flexibleEnvironmentAvailable")]
		public System.Nullable<System.Boolean> FlexibleEnvironmentAvailable { get; set; }
		
		/// <summary>
		/// Output only. Search API (https://cloud.google.com/appengine/docs/standard/python/search) is available in the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchApiAvailable")]
		public System.Nullable<System.Boolean> SearchApiAvailable { get; set; }
		
		/// <summary>
		/// App Engine standard environment is available in the given location.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardEnvironmentAvailable")]
		public System.Nullable<System.Boolean> StandardEnvironmentAvailable { get; set; }
	}
	
	/// <summary>
	/// Response message for AuthorizedCertificates.ListAuthorizedCertificates.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuthorizedCertificatesResponse
	{
		
		/// <summary>
		/// The SSL certificates the user is authorized to administer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificates")]
		public AuthorizedCertificate[] Certificates { get; set; }
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for AuthorizedDomains.ListAuthorizedDomains.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAuthorizedDomainsResponse
	{
		
		/// <summary>
		/// The authorized domains belonging to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public AuthorizedDomain[] Domains { get; set; }
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for DomainMappings.ListDomainMappings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDomainMappingsResponse
	{
		
		/// <summary>
		/// The domain mappings for the application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainMappings")]
		public DomainMapping[] DomainMappings { get; set; }
		
		/// <summary>
		/// Continuation token for fetching the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: "us-east1".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: "projects/example-project/locations/us-east1"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Operation
	{
		
		/// <summary>
		/// If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Metadata for the given google.cloud.location.Location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationMetadata
	{
		
		/// <summary>
		/// App Engine flexible environment is available in the given location.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flexibleEnvironmentAvailable")]
		public System.Nullable<System.Boolean> FlexibleEnvironmentAvailable { get; set; }
		
		/// <summary>
		/// Output only. Search API (https://cloud.google.com/appengine/docs/standard/python/search) is available in the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchApiAvailable")]
		public System.Nullable<System.Boolean> SearchApiAvailable { get; set; }
		
		/// <summary>
		/// App Engine standard environment is available in the given location.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="standardEnvironmentAvailable")]
		public System.Nullable<System.Boolean> StandardEnvironmentAvailable { get; set; }
	}
	
	/// <summary>
	/// Metadata for the given google.longrunning.Operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationMetadataV1
	{
		
		/// <summary>
		/// Metadata for the given google.longrunning.Operation during a google.appengine.v1.CreateVersionRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createVersionMetadata")]
		public CreateVersionMetadataV1 CreateVersionMetadata { get; set; }
		
		/// <summary>
		/// Time that this operation completed.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Ephemeral message that may change every time the operation is polled. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ephemeralMessage")]
		public string EphemeralMessage { get; set; }
		
		/// <summary>
		/// Time that this operation was created.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		/// <summary>
		/// API method that initiated this operation. Example: google.appengine.v1.Versions.CreateVersion.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// User who requested this operation.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
		
		/// <summary>
		/// Durable messages that persist on every operation poll. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warning")]
		public string[] Warning { get; set; }
	}
	
	/// <summary>
	/// Metadata for the given google.longrunning.Operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationMetadataV1Alpha
	{
		
		/// <summary>
		/// Metadata for the given google.longrunning.Operation during a google.appengine.v1alpha.CreateVersionRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createVersionMetadata")]
		public CreateVersionMetadataV1Alpha CreateVersionMetadata { get; set; }
		
		/// <summary>
		/// Time that this operation completed.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Ephemeral message that may change every time the operation is polled. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ephemeralMessage")]
		public string EphemeralMessage { get; set; }
		
		/// <summary>
		/// Time that this operation was created.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		/// <summary>
		/// API method that initiated this operation. Example: google.appengine.v1alpha.Versions.CreateVersion.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// User who requested this operation.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
		
		/// <summary>
		/// Durable messages that persist on every operation poll. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warning")]
		public string[] Warning { get; set; }
	}
	
	/// <summary>
	/// Metadata for the given google.longrunning.Operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationMetadataV1Beta
	{
		
		/// <summary>
		/// Metadata for the given google.longrunning.Operation during a google.appengine.v1beta.CreateVersionRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createVersionMetadata")]
		public CreateVersionMetadataV1Beta CreateVersionMetadata { get; set; }
		
		/// <summary>
		/// Time that this operation completed.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Ephemeral message that may change every time the operation is polled. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ephemeralMessage")]
		public string EphemeralMessage { get; set; }
		
		/// <summary>
		/// Time that this operation was created.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTime")]
		public string InsertTime { get; set; }
		
		/// <summary>
		/// API method that initiated this operation. Example: google.appengine.v1beta.Versions.CreateVersion.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="method")]
		public string Method { get; set; }
		
		/// <summary>
		/// Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// User who requested this operation.@OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
		
		/// <summary>
		/// Durable messages that persist on every operation poll. @OutputOnly
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warning")]
		public string[] Warning { get; set; }
	}
	
	/// <summary>
	/// The request sent to CLHs during project events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectEvent
	{
		
		/// <summary>
		/// The unique ID for this project event. CLHs can use this value to dedup repeated calls. required
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phase")]
		public System.Nullable<ProjectEventPhase> Phase { get; set; }
		
		/// <summary>
		/// ProjectsMetadata is the metadata CCFE stores about the all the relevant projects (tenant, consumer, producer).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectMetadata")]
		public ProjectsMetadata ProjectMetadata { get; set; }
		
		/// <summary>
		/// ContainerState contains the externally-visible container state that is used to communicate the state and reasoning for that state to the CLH. This data is not persisted by CCFE, but is instead derived from CCFE's internal representation of the container state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public ContainerState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectEventPhase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BEFORE_RESOURCE_HANDLING")]
		BEFORE_RESOURCE_HANDLING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AFTER_RESOURCE_HANDLING")]
		AFTER_RESOURCE_HANDLING = 2,
	}
	
	/// <summary>
	/// ProjectsMetadata is the metadata CCFE stores about the all the relevant projects (tenant, consumer, producer).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectsMetadata
	{
		
		/// <summary>
		/// The consumer project id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerProjectId")]
		public string ConsumerProjectId { get; set; }
		
		/// <summary>
		/// The consumer project number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerProjectNumber")]
		public string ConsumerProjectNumber { get; set; }
		
		/// <summary>
		/// The CCFE state of the consumer project. It is the same state that is communicated to the CLH during project events. Notice that this field is not set in the DB, it is only set in this proto when communicated to CLH in the side channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumerProjectState")]
		public ContainerStateState ConsumerProjectState { get; set; }
		
		/// <summary>
		/// The service account authorized to operate on the consumer project. Note: CCFE only propagates P4SA with default tag to CLH.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="p4ServiceAccount")]
		public string P4ServiceAccount { get; set; }
		
		/// <summary>
		/// The producer project id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producerProjectId")]
		public string ProducerProjectId { get; set; }
		
		/// <summary>
		/// The producer project number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="producerProjectNumber")]
		public string ProducerProjectNumber { get; set; }
		
		/// <summary>
		/// The tenant project id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantProjectId")]
		public string TenantProjectId { get; set; }
		
		/// <summary>
		/// The tenant project number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tenantProjectNumber")]
		public string TenantProjectNumber { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists all SSL certificates the user is authorized to administer.
		/// Appengine_apps_authorizedCertificates_list v1alpha/apps/{appsId}/authorizedCertificates
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Application resource. Example: apps/myapp.</param>
		/// <param name="pageSize">Maximum results to return per page.</param>
		/// <param name="pageToken">Continuation token for fetching the next page of results.</param>
		/// <param name="view">Controls the set of fields returned in the LIST response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAuthorizedCertificatesResponse> Appengine_apps_authorizedCertificates_listAsync(string appsId, int pageSize, string pageToken, Appengine_apps_authorizedCertificates_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/authorizedCertificates&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAuthorizedCertificatesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploads the specified SSL certificate.
		/// Appengine_apps_authorizedCertificates_create v1alpha/apps/{appsId}/authorizedCertificates
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Application resource. Example: apps/myapp.</param>
		/// <returns>Successful response</returns>
		public async Task<AuthorizedCertificate> Appengine_apps_authorizedCertificates_createAsync(string appsId, AuthorizedCertificate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/authorizedCertificates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorizedCertificate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified SSL certificate.
		/// Appengine_apps_authorizedCertificates_delete v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource to delete. Example: apps/myapp/authorizedCertificates/12345.</param>
		/// <param name="authorizedCertificatesId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Appengine_apps_authorizedCertificates_deleteAsync(string appsId, string authorizedCertificatesId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/authorizedCertificates/"+ (authorizedCertificatesId==null? "" : System.Uri.EscapeDataString(authorizedCertificatesId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified SSL certificate.
		/// Appengine_apps_authorizedCertificates_get v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/authorizedCertificates/12345.</param>
		/// <param name="authorizedCertificatesId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="view">Controls the set of fields returned in the GET response.</param>
		/// <returns>Successful response</returns>
		public async Task<AuthorizedCertificate> Appengine_apps_authorizedCertificates_getAsync(string appsId, string authorizedCertificatesId, Appengine_apps_authorizedCertificates_listView view, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/authorizedCertificates/"+ (authorizedCertificatesId==null? "" : System.Uri.EscapeDataString(authorizedCertificatesId))+"&view=" + view;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorizedCertificate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be applicable to the same domains as the original certificate. The certificate display_name may also be updated.
		/// Appengine_apps_authorizedCertificates_patch v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource to update. Example: apps/myapp/authorizedCertificates/12345.</param>
		/// <param name="authorizedCertificatesId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="updateMask">Standard field mask for the set of fields to be updated. Updates are only supported on the certificate_raw_data and display_name fields.</param>
		/// <returns>Successful response</returns>
		public async Task<AuthorizedCertificate> Appengine_apps_authorizedCertificates_patchAsync(string appsId, string authorizedCertificatesId, string updateMask, AuthorizedCertificate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/authorizedCertificates/"+ (authorizedCertificatesId==null? "" : System.Uri.EscapeDataString(authorizedCertificatesId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AuthorizedCertificate>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all domains the user is authorized to administer.
		/// Appengine_apps_authorizedDomains_list v1alpha/apps/{appsId}/authorizedDomains
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Application resource. Example: apps/myapp.</param>
		/// <param name="pageSize">Maximum results to return per page.</param>
		/// <param name="pageToken">Continuation token for fetching the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAuthorizedDomainsResponse> Appengine_apps_authorizedDomains_listAsync(string appsId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/authorizedDomains&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAuthorizedDomainsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the domain mappings on an application.
		/// Appengine_apps_domainMappings_list v1alpha/apps/{appsId}/domainMappings
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Application resource. Example: apps/myapp.</param>
		/// <param name="pageSize">Maximum results to return per page.</param>
		/// <param name="pageToken">Continuation token for fetching the next page of results.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDomainMappingsResponse> Appengine_apps_domainMappings_listAsync(string appsId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/domainMappings&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDomainMappingsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see AuthorizedDomains.ListAuthorizedDomains.
		/// Appengine_apps_domainMappings_create v1alpha/apps/{appsId}/domainMappings
		/// </summary>
		/// <param name="appsId">Part of `parent`. Name of the parent Application resource. Example: apps/myapp.</param>
		/// <param name="noManagedCertificate">Whether a managed certificate should be provided by App Engine. If true, a certificate ID must be manaually set in the DomainMapping resource to configure SSL for this domain. If false, a managed certificate will be provisioned and a certificate ID will be automatically populated.</param>
		/// <param name="overrideStrategy">Whether the domain creation should override any existing mappings for this domain. By default, overrides are rejected.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_domainMappings_createAsync(string appsId, bool noManagedCertificate, Appengine_apps_domainMappings_createOverrideStrategy overrideStrategy, DomainMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/domainMappings&noManagedCertificate="+noManagedCertificate+"&overrideStrategy=" + overrideStrategy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource.
		/// Appengine_apps_domainMappings_delete v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource to delete. Example: apps/myapp/domainMappings/example.com.</param>
		/// <param name="domainMappingsId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_domainMappings_deleteAsync(string appsId, string domainMappingsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/domainMappings/"+ (domainMappingsId==null? "" : System.Uri.EscapeDataString(domainMappingsId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified domain mapping.
		/// Appengine_apps_domainMappings_get v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource requested. Example: apps/myapp/domainMappings/example.com.</param>
		/// <param name="domainMappingsId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<DomainMapping> Appengine_apps_domainMappings_getAsync(string appsId, string domainMappingsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/domainMappings/"+ (domainMappingsId==null? "" : System.Uri.EscapeDataString(domainMappingsId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainMapping>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to administer the associated domain in order to update a DomainMapping resource.
		/// Appengine_apps_domainMappings_patch v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Name of the resource to update. Example: apps/myapp/domainMappings/example.com.</param>
		/// <param name="domainMappingsId">Part of `name`. See documentation of `appsId`.</param>
		/// <param name="noManagedCertificate">Whether a managed certificate should be provided by App Engine. If true, a certificate ID must be manually set in the DomainMapping resource to configure SSL for this domain. If false, a managed certificate will be provisioned and a certificate ID will be automatically populated. Only applicable if ssl_settings.certificate_id is specified in the update mask.</param>
		/// <param name="updateMask">Required. Standard field mask for the set of fields to be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_domainMappings_patchAsync(string appsId, string domainMappingsId, bool noManagedCertificate, string updateMask, DomainMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/domainMappings/"+ (domainMappingsId==null? "" : System.Uri.EscapeDataString(domainMappingsId))+"&noManagedCertificate="+noManagedCertificate+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Appengine_apps_locations_list v1alpha/apps/{appsId}/locations
		/// </summary>
		/// <param name="appsId">Part of `name`. The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like "displayName=tokyo", and is documented in more detail in AIP-160 (https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the next_page_token field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Appengine_apps_locations_listAsync(string appsId, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a location.
		/// Appengine_apps_locations_get v1alpha/apps/{appsId}/locations/{locationsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. Resource name for the location.</param>
		/// <param name="locationsId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Location> Appengine_apps_locations_getAsync(string appsId, string locationsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/locations/"+ (locationsId==null? "" : System.Uri.EscapeDataString(locationsId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Location>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
		/// Appengine_apps_operations_list v1alpha/apps/{appsId}/operations
		/// </summary>
		/// <param name="appsId">Part of `name`. The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Appengine_apps_operations_listAsync(string appsId, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Appengine_apps_operations_get v1alpha/apps/{appsId}/operations/{operationsId}
		/// </summary>
		/// <param name="appsId">Part of `name`. The name of the operation resource.</param>
		/// <param name="operationsId">Part of `name`. See documentation of `appsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_apps_operations_getAsync(string appsId, string operationsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/apps/"+ (appsId==null? "" : System.Uri.EscapeDataString(appsId))+"/operations/"+ (operationsId==null? "" : System.Uri.EscapeDataString(operationsId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Appengine_projects_locations_list v1alpha/projects/{projectsId}/locations
		/// </summary>
		/// <param name="projectsId">Part of `name`. The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like "displayName=tokyo", and is documented in more detail in AIP-160 (https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the next_page_token field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Appengine_projects_locations_listAsync(string projectsId, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/projects/"+ (projectsId==null? "" : System.Uri.EscapeDataString(projectsId))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about a location.
		/// Appengine_projects_locations_get v1alpha/projects/{projectsId}/locations/{locationsId}
		/// </summary>
		/// <param name="projectsId">Part of `name`. Resource name for the location.</param>
		/// <param name="locationsId">Part of `name`. See documentation of `projectsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Location> Appengine_projects_locations_getAsync(string projectsId, string locationsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/projects/"+ (projectsId==null? "" : System.Uri.EscapeDataString(projectsId))+"/locations/"+ (locationsId==null? "" : System.Uri.EscapeDataString(locationsId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Location>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
		/// Appengine_projects_locations_operations_list v1alpha/projects/{projectsId}/locations/{locationsId}/operations
		/// </summary>
		/// <param name="projectsId">Part of `name`. The name of the operation's parent resource.</param>
		/// <param name="locationsId">Part of `name`. See documentation of `projectsId`.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Appengine_projects_locations_operations_listAsync(string projectsId, string locationsId, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/projects/"+ (projectsId==null? "" : System.Uri.EscapeDataString(projectsId))+"/locations/"+ (locationsId==null? "" : System.Uri.EscapeDataString(locationsId))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Appengine_projects_locations_operations_get v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}
		/// </summary>
		/// <param name="projectsId">Part of `name`. The name of the operation resource.</param>
		/// <param name="locationsId">Part of `name`. See documentation of `projectsId`.</param>
		/// <param name="operationsId">Part of `name`. See documentation of `projectsId`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Appengine_projects_locations_operations_getAsync(string projectsId, string locationsId, string operationsId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha/projects/"+ (projectsId==null? "" : System.Uri.EscapeDataString(projectsId))+"/locations/"+ (locationsId==null? "" : System.Uri.EscapeDataString(locationsId))+"/operations/"+ (operationsId==null? "" : System.Uri.EscapeDataString(operationsId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Appengine_apps_authorizedCertificates_listView
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BASIC_CERTIFICATE")]
		BASIC_CERTIFICATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FULL_CERTIFICATE")]
		FULL_CERTIFICATE = 1,
	}
	
	public enum Appengine_apps_domainMappings_createOverrideStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSPECIFIED_DOMAIN_OVERRIDE_STRATEGY")]
		UNSPECIFIED_DOMAIN_OVERRIDE_STRATEGY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRICT")]
		STRICT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OVERRIDE")]
		OVERRIDE = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
