//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AllEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Group = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseSecurityGroup = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseEvent = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseVirtualMachine = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseFirewallRule = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseIPSet = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseL2Network = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseFirewall = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseService = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseServiceGroup = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseVnic = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VirtualMachine = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2Instance = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Host = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vnic = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vmknic = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VxlanLayer2Network = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VlanL2Network = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cluster = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecurityTag = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourcePool = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXIPSet = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2IPSet = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXSecurityGroup = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2SecurityGroup = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Flow = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProblemEvent = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Application = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tier = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXFirewallRule = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2SGFirewallRule = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXRedirectRule = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VCenterManager = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXVManager = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseManager = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseNSXManager = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXService = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2Service = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXDistributedFirewall = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2Firewall = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXServiceGroup = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DistributedVirtualSwitch = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DistributedVirtualPortgroup = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VCDatacenter = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Datastore = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Folder = 46,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiError
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ErrorDetail[] Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string[] Target { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Application : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="create_time")]
		public System.Nullable<System.Int64> Create_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_modified_by")]
		public string Last_modified_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_modified_time")]
		public System.Nullable<System.Int64> Last_modified_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AristaSwitchDataSource
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AristaSwitchDataSourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseDataSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public string Entity_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public System.Nullable<BaseDataSourceEntity_type> Entity_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// proxy vm which should register this vcenter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proxy_id")]
		public string Proxy_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BaseDataSourceEntity_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CiscoSwitchDataSource = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DellSwitchDataSource = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AristaSwitchDataSource = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BrocadeSwitchDataSource = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JuniperSwitchDataSource = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VCenterDataSource = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXVManagerDataSource = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UCSManagerDataSource = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HPVCManagerDataSource = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HPOneViewDataSource = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PanFirewallDataSource = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckpointFirewallDataSource = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseDataSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip")]
		public string Ip { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// proxy vm which should register this vcenter
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="proxy_id")]
		public string Proxy_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public string Entity_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public System.Nullable<BaseEntityEntity_type> Entity_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BaseEntityEntity_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VirtualMachine = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2Instance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vnic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vmknic = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VxlanLayer2Network = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VlanL2Network = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cluster = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecurityTag = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourcePool = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXIPSet = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2IPSet = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXSecurityGroup = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2SecurityGroup = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Flow = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProblemEvent = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Application = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tier = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXFirewallRule = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2SGFirewallRule = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXRedirectRule = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VCenterManager = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXVManager = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXService = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2Service = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXDistributedFirewall = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2Firewall = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXServiceGroup = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DistributedVirtualSwitch = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DistributedVirtualPortgroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VCDatacenter = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Datastore = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Folder = 33,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseEvent : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="admin_state")]
		public System.Nullable<BaseEventAdmin_state> Admin_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="anchor_entities")]
		public Reference[] Anchor_entities { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="archived")]
		public System.Nullable<System.Boolean> Archived { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_tags")]
		public string[] Event_tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_time_epoch_ms")]
		public System.Nullable<System.Int64> Event_time_epoch_ms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="related_entities")]
		public Reference[] Related_entities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BaseEventAdmin_state
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Reference
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public string Entity_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public BaseEntityEntity_type Entity_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseFirewall : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="exclusions")]
		public Reference[] Exclusions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firewall_rules")]
		public RuleSet[] Firewall_rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuleSet
	{
		
		[System.Runtime.Serialization.DataMember(Name="firewall")]
		public Reference Firewall { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rule_set_type")]
		public System.Nullable<RuleSetRule_set_type> Rule_set_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public Reference[] Rules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RuleSetRule_set_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSX_STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSX_REDIRECT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_STANDARD = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseFirewallRule : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<BaseFirewallRuleAction> Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_any")]
		public System.Nullable<System.Boolean> Destination_any { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_inversion")]
		public System.Nullable<System.Boolean> Destination_inversion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public Reference[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port_ranges")]
		public PortRange[] Port_ranges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rule_id")]
		public string Rule_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="section_id")]
		public string Section_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="section_name")]
		public string Section_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sequence_number")]
		public System.Nullable<System.Int32> Sequence_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_any")]
		public System.Nullable<System.Boolean> Service_any { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="services")]
		public Reference[] Services { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_any")]
		public System.Nullable<System.Boolean> Source_any { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_inversion")]
		public System.Nullable<System.Boolean> Source_inversion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public Reference[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BaseFirewallRuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO_NOT_REDIRECT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PortRange
	{
		
		[System.Runtime.Serialization.DataMember(Name="display")]
		public string Display { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int32> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iana_name")]
		public string Iana_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iana_port_display")]
		public string Iana_port_display { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int32> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseIPSet : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="direct_destination_rules")]
		public RuleSet[] Direct_destination_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="direct_source_rules")]
		public RuleSet[] Direct_source_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indirect_destination_rules")]
		public RuleSet[] Indirect_destination_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indirect_source_rules")]
		public RuleSet[] Indirect_source_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip_addresses")]
		public IpV4Address[] Ip_addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip_numeric_ranges")]
		public IpNumericRange[] Ip_numeric_ranges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip_ranges")]
		public IpAddressRange[] Ip_ranges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent_security_groups")]
		public Reference[] Parent_security_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translated_vm_count")]
		public System.Nullable<System.Int32> Translated_vm_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public string Vendor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_id")]
		public string Vendor_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IpV4Address
	{
		
		[System.Runtime.Serialization.DataMember(Name="ip_address")]
		public string Ip_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="netmask")]
		public string Netmask { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="network_address")]
		public string Network_address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IpNumericRange
	{
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int64> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int64> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IpAddressRange
	{
		
		[System.Runtime.Serialization.DataMember(Name="end_ip")]
		public string End_ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_ip")]
		public string Start_ip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseL2Network : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="gateways")]
		public string[] Gateways { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="network_addresses")]
		public string[] Network_addresses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseManager
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseNSXManager
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseSecurityGroup : Group
	{
		
		[System.Runtime.Serialization.DataMember(Name="direct_destination_rules")]
		public RuleSet[] Direct_destination_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="direct_members")]
		public Reference[] Direct_members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="direct_source_rules")]
		public RuleSet[] Direct_source_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="excluded_members")]
		public Reference[] Excluded_members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indirect_destination_rules")]
		public RuleSet[] Indirect_destination_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indirect_source_rules")]
		public RuleSet[] Indirect_source_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public Reference[] Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parents")]
		public Reference[] Parents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="translated_vm_count")]
		public System.Nullable<System.Int32> Translated_vm_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_id")]
		public string Vendor_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseService : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="port_ranges")]
		public PortRange[] Port_ranges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public string Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseServiceGroup
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseVirtualMachine
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaseVnic : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="ip_addresses")]
		public IpV4Address[] Ip_addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layer2_network")]
		public Reference Layer2_network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vlan")]
		public Vlan Vlan { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vm")]
		public Reference Vm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Vlan
	{
		
		[System.Runtime.Serialization.DataMember(Name="begin")]
		public System.Nullable<System.Int32> Begin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int32> End { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BrocadeSwitchDataSource
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BrocadeSwitchDataSourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckpointFirewallDataSource
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckpointFirewallDataSourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CiscoSwitchDataSource : SwitchDataSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="switch_type")]
		public System.Nullable<CiscoSwitchDataSourceSwitch_type> Switch_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CiscoSwitchDataSourceSwitch_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATALYST_3000 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATALYST_4500 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATALYST_6500 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXUS_5K = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXUS_7K = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXUS_9K = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CiscoSwitchDataSourceRequest : SwitchDataSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="switch_type")]
		public CiscoSwitchDataSourceSwitch_type Switch_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CiscoSwitchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATALYST_3000 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATALYST_4500 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATALYST_6500 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXUS_5K = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXUS_7K = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXUS_9K = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cluster
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceEntityId
	{
		
		/// <summary>
		/// Entity Identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public string Entity_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public BaseDataSourceEntity_type Entity_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public DataSourceEntityId[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CiscoSwitchDataSource = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DellSwitchDataSource = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AristaSwitchDataSource = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BrocadeSwitchDataSource = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JuniperSwitchDataSource = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VCenterDataSource = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXVManagerDataSource = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UCSManagerDataSource = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HPVCManagerDataSource = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HPOneViewDataSource = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PanFirewallDataSource = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckpointFirewallDataSource = 11,
	}
	
	/// <summary>
	/// Datasource Health state
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasourceHealth
	{
		
		[System.Runtime.Serialization.DataMember(Name="health_error_code")]
		public string Health_error_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="health_message")]
		public string Health_message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="health_status")]
		public System.Nullable<DatasourceHealthHealth_status> Health_status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatasourceHealthHealth_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTHY_WITH_WARNINGS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHEALTHY = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Datastore
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DellSwitchDataSource : SwitchDataSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="switch_type")]
		public System.Nullable<DellSwitchDataSourceSwitch_type> Switch_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DellSwitchDataSourceSwitch_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_10_MXL_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POWERCONNECT_8024 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S4048 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Z9100 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S6000 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DellSwitchDataSourceRequest : SwitchDataSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="switch_type")]
		public DellSwitchDataSourceSwitch_type Switch_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DellSwitchType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_10_MXL_10 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POWERCONNECT_8024 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S4048 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Z9100 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S6000 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DistributedVirtualPortgroup
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DistributedVirtualSwitch
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Domain
	{
		
		[System.Runtime.Serialization.DataMember(Name="domain_type")]
		public System.Nullable<DomainDomain_type> Domain_type { get; set; }
		
		/// <summary>
		/// domain value, not required for LOCAL domain
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DomainDomain_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LDAP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2Firewall
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EC2FirewallDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INBOUND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTBOUND = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2IPSet
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2Instance : BaseVirtualMachine
	{
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpc")]
		public Reference Vpc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2NetworkInterface
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2SGFirewallRule : BaseFirewallRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public EC2FirewallDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner_security_group")]
		public Reference Owner_security_group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpc")]
		public Reference Vpc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2SecurityGroup : BaseSecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vpc")]
		public Reference Vpc { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EC2Service
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityId
	{
		
		/// <summary>
		/// Entity Identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public string Entity_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public BaseEntityEntity_type Entity_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityIdWithTime
	{
		
		/// <summary>
		/// Entity Identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public string Entity_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public BaseEntityEntity_type Entity_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int64> Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityName : EntityIdWithTime
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VirtualMachine = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2Instance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Host = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vnic = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vmknic = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VxlanLayer2Network = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VlanL2Network = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cluster = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SecurityTag = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResourcePool = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXIPSet = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2IPSet = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXSecurityGroup = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2SecurityGroup = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Flow = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ProblemEvent = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Application = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tier = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXFirewallRule = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2SGFirewallRule = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXRedirectRule = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VCenterManager = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXVManager = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXService = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2Service = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXDistributedFirewall = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC2Firewall = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSXServiceGroup = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DistributedVirtualSwitch = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DistributedVirtualPortgroup = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VCDatacenter = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Datastore = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Folder = 33,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FirewallAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REDIRECT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DO_NOT_REDIRECT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FirewallDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INOUT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Flow : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="destination_cluster")]
		public Reference Destination_cluster { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_datacenter")]
		public Reference Destination_datacenter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_folders")]
		public Reference[] Destination_folders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_host")]
		public Reference Destination_host { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_ip")]
		public IpV4Address Destination_ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_ip_sets")]
		public Reference[] Destination_ip_sets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_l2_network")]
		public Reference Destination_l2_network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_resource_pool")]
		public Reference Destination_resource_pool { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_security_groups")]
		public Reference[] Destination_security_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_security_tags")]
		public Reference[] Destination_security_tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_vm")]
		public Reference Destination_vm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_vm_tags")]
		public string[] Destination_vm_tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_vnic")]
		public Reference Destination_vnic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_vpc")]
		public Reference Destination_vpc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firewall_action")]
		public BaseFirewallRuleAction Firewall_action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flow_tag")]
		public FlowTag[] Flow_tag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port")]
		public PortRange Port { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public System.Nullable<FlowProtocol> Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_cluster")]
		public Reference Source_cluster { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_datacenter")]
		public Reference Source_datacenter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_folders")]
		public Reference[] Source_folders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_host")]
		public Reference Source_host { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_ip")]
		public IpV4Address Source_ip { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_ip_sets")]
		public Reference[] Source_ip_sets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_l2_network")]
		public Reference Source_l2_network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_resource_pool")]
		public Reference Source_resource_pool { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_security_groups")]
		public Reference[] Source_security_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_security_tags")]
		public Reference[] Source_security_tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_vm")]
		public Reference Source_vm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_vm_tags")]
		public string[] Source_vm_tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_vnic")]
		public Reference Source_vnic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_vpc")]
		public Reference Source_vpc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="traffic_type")]
		public System.Nullable<FlowTraffic_type> Traffic_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="within_host")]
		public System.Nullable<System.Boolean> Within_host { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FlowTag
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_TRAFFIC_TYPE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_INTERNET_TRAFFIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_EAST_WEST_TRAFFIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_VM_VM_TRAFFIC = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_VM_PHY_TRAFFIC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_PHY_PHY_TRAFFIC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_SRC_IP_VMKNIC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_DST_IP_VMKNIC = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_SRC_IP_VM = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_DST_IP_VM = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_SRC_IP_INTERNET = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_DST_IP_INTERNET = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_SRC_IP_PHYSICAL = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_DST_IP_PHYSICAL = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_SAME_HOST = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_DIFF_HOST = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_SHARED_SERVICE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_NOT_SHARED_SERVICE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_NETWORK_SWITCHED = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_NETWORK_ROUTED = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_NETWORK_UNKNOWN = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_SRC_IP_VTEP = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_DST_IP_VTEP = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_UNICAST = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_BROADCAST = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_MULTICAST = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_SRC_IP_LINK_LOCAL = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_DST_IP_LINK_LOCAL = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_SRC_IP_CLASS_E = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_DST_IP_CLASS_E = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_SRC_IP_CLASS_A_RESERVED = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_DST_IP_CLASS_A_RESERVED = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_INVALID_IP_PACKETS = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_NOT_ANALYZED = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_GENERIC_INTERNET_SRC_IP = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_SNAT_DNAT_FLOW = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_MULTINICS = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_SRC_VC = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_DST_VC = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_SRC_AWS = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_DST_AWS = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_WITHIN_DC = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_DIFF_DC = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_WITHIN_VPC = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_DIFF_VPC = 44,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FlowProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FlowTraffic_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNET_TRAFFIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EAST_WEST_TRAFFIC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FlowTrafficType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNET_TRAFFIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EAST_WEST_TRAFFIC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Folder
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Group : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public Reference[] Members { get; set; }
	}
	
	/// <summary>
	/// EntityType currently restricted to VirtualMachine
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupMembershipCriteria
	{
		
		/// <summary>
		/// Ip Address membership definition
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ip_address_membership_criteria")]
		public IpAddressMembershipCriteria Ip_address_membership_criteria { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="membership_type")]
		public System.Nullable<GroupMembershipCriteriaMembership_type> Membership_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="search_membership_criteria")]
		public SearchMembershipCriteria Search_membership_criteria { get; set; }
	}
	
	/// <summary>
	/// Ip Address membership definition
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IpAddressMembershipCriteria
	{
		
		[System.Runtime.Serialization.DataMember(Name="ip_addresses")]
		public string[] Ip_addresses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GroupMembershipCriteriaMembership_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SearchMembershipCriteria = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IPAddressMembershipCriteria = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchMembershipCriteria
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public AllEntityType Entity_type { get; set; }
		
		/// <summary>
		/// As defined in search end point
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HPOneViewManagerDataSource
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HPOneViewManagerDataSourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HPVCManagerDataSource
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HPVCManagerDataSourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Host : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public Reference Cluster { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connection_state")]
		public string Connection_state { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datastores")]
		public Reference[] Datastores { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maintenance_mode")]
		public string Maintenance_mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nsx_manager")]
		public Reference Nsx_manager { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_tag")]
		public string Service_tag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vcenter_manager")]
		public Reference Vcenter_manager { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_id")]
		public string Vendor_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vm_count")]
		public System.Nullable<System.Int32> Vm_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vmknics")]
		public Reference[] Vmknics { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JuniperSwitchDataSource
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JuniperSwitchDataSourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MetaEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Group = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseSecurityGroup = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseEvent = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseVirtualMachine = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseFirewallRule = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseIPSet = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseL2Network = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseManager = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseNSXManager = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseFirewall = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseService = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseServiceGroup = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BaseVnic = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MicroSecGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public Reference Entity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NSXControllerDataCollection
	{
		
		[System.Runtime.Serialization.DataMember(Name="controller_password")]
		public string Controller_password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NSXDistributedFirewall : BaseFirewall
	{
		
		[System.Runtime.Serialization.DataMember(Name="vendor_id")]
		public string Vendor_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NSXFirewallRule : BaseFirewallRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public FirewallDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logging_enabled")]
		public System.Nullable<System.Boolean> Logging_enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nsx_managers")]
		public Reference[] Nsx_managers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<NSXFirewallRuleScope> Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NSXFirewallRuleScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIVERSAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLOBAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NSXIPSet : BaseIPSet
	{
		
		[System.Runtime.Serialization.DataMember(Name="nsx_managers")]
		public Reference[] Nsx_managers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public NSXFirewallRuleScope Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NSXRedirectRule : BaseFirewallRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public FirewallDirection Direction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logging_enabled")]
		public System.Nullable<System.Boolean> Logging_enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="service_profile")]
		public string Service_profile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NSXSecurityGroup : BaseSecurityGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="ip_sets")]
		public Reference[] Ip_sets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nsx_managers")]
		public Reference[] Nsx_managers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public NSXFirewallRuleScope Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="security_tags")]
		public Reference[] Security_tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NSXService : BaseService
	{
		
		[System.Runtime.Serialization.DataMember(Name="nsx_managers")]
		public Reference[] Nsx_managers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public NSXFirewallRuleScope Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_id")]
		public string Vendor_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NSXServiceGroup : BaseServiceGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="nsx_managers")]
		public Reference[] Nsx_managers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public NSXFirewallRuleScope Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_id")]
		public string Vendor_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NSXVManager : BaseNSXManager
	{
		
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip_address")]
		public IpV4Address Ip_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary_nsx_manager")]
		public Reference Primary_nsx_manager { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vm")]
		public Reference Vm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NSXVManagerDataSource : BaseDataSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="central_cli_enabled")]
		public System.Nullable<System.Boolean> Central_cli_enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public PasswordCredentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipfix_enabled")]
		public System.Nullable<System.Boolean> Ipfix_enabled { get; set; }
		
		/// <summary>
		/// Associated vcenter data source entity Id
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vcenter_id")]
		public string Vcenter_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PasswordCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NSXVManagerDataSourceRequest : BaseDataSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="central_cli_enabled")]
		public System.Nullable<System.Boolean> Central_cli_enabled { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public PasswordCredentials Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipfix_enabled")]
		public System.Nullable<System.Boolean> Ipfix_enabled { get; set; }
		
		/// <summary>
		/// Associated vcenter data source entity Id
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vcenter_id")]
		public string Vcenter_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NameRequestParam
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity_id")]
		public string Entity_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int64> Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public NameRequestParam[] Entities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public EntityName[] Entities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Node
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public System.Nullable<NodeEntity_type> Entity_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip_address")]
		public string Ip_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="node_id")]
		public string Node_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="node_type")]
		public System.Nullable<NodeNode_type> Node_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NodeEntity_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Node = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NodeNode_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROXY_VM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM_VM = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NodeId
	{
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public NodeEntity_type Entity_type { get; set; }
		
		/// <summary>
		/// Entity Identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NodeListResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public NodeId[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NodeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Node = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagedListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.Int64> End_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public EntityId[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.Int64> Start_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PagedListResponseWithTime
	{
		
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.Int64> End_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public EntityIdWithTime[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.Int64> Start_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PanFirewallDataSource
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PanFirewallDataSourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProblemEvent : BaseEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="event_close_time_epoch_ms")]
		public System.Nullable<System.Int64> Event_close_time_epoch_ms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public System.Nullable<ProblemEventSeverity> Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProblemEventSeverity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRITICAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MODERATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Protocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecommendedRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public System.Nullable<RecommendedRuleAction> Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinations")]
		public Reference[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="port_ranges")]
		public SimplePortRange[] Port_ranges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="protocols")]
		public string[] Protocols { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public Reference[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecommendedRuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DROP = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimplePortRange
	{
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int32> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int32> Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecommendedRules
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public RecommendedRule[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time_range")]
		public TimeRange Time_range { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeRange
	{
		
		[System.Runtime.Serialization.DataMember(Name="end_time")]
		public System.Nullable<System.Int64> End_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start_time")]
		public System.Nullable<System.Int64> Start_time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecommendedRulesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="group_1")]
		public MicroSecGroup Group_1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group_2")]
		public MicroSecGroup Group_2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time_range")]
		public TimeRange Time_range { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourcePool : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="vcenter_manager")]
		public Reference Vcenter_manager { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_id")]
		public string Vendor_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SNMP2cConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="community_string")]
		public string Community_string { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SNMP3Config
	{
		
		[System.Runtime.Serialization.DataMember(Name="authentication_password")]
		public string Authentication_password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authentication_type")]
		public System.Nullable<SNMP3ConfigAuthentication_type> Authentication_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="context_name")]
		public string Context_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy_password")]
		public string Privacy_password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy_type")]
		public System.Nullable<SNMP3ConfigPrivacy_type> Privacy_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SNMP3ConfigAuthentication_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_AUTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD5 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SNMP3ConfigPrivacy_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES128 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES192 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES256 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3DES")]
		_3DES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PRIV = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SNMPConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="config_snmp_2c")]
		public SNMP2cConfig Config_snmp_2c { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="config_snmp_3")]
		public SNMP3Config Config_snmp_3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snmp_enabled")]
		public System.Nullable<System.Boolean> Snmp_enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="snmp_version")]
		public System.Nullable<SNMPConfigSnmp_version> Snmp_version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SNMPConfigSnmp_version
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		v2c = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		v3 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScopeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIVERSAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLOBAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="cursor")]
		public string Cursor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity_type")]
		public AllEntityType Entity_type { get; set; }
		
		/// <summary>
		/// query filter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Int32> Size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sort_by")]
		public SortByClause Sort_by { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time_range")]
		public TimeRange Time_range { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SortByClause
	{
		
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<SortByClauseOrder> Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SortByClauseOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecurityTag : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="direct_security_groups")]
		public Reference[] Direct_security_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nsx_manager")]
		public Reference Nsx_manager { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="security_groups")]
		public Reference[] Security_groups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_id")]
		public string Vendor_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SimpleListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public EntityId[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total_count")]
		public System.Nullable<System.Int32> Total_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SwitchDataSource : BaseDataSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public PasswordCredentials Credentials { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SwitchDataSourceRequest : BaseDataSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public PasswordCredentials Credentials { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tier : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="application")]
		public Reference Application { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="group_membership_criteria")]
		public GroupMembershipCriteria[] Group_membership_criteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TierListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Tier[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TierRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="group_membership_criteria")]
		public GroupMembershipCriteria[] Group_membership_criteria { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Token
	{
		
		/// <summary>
		/// expiry epoch time in secs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public System.Nullable<System.Int64> Expiry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UCSManagerDataSource
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UCSManagerDataSourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserCredential
	{
		
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public Domain Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VCDatacenter
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VCenterDataSource : BaseDataSource
	{
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public PasswordCredentials Credentials { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VCenterDataSourceRequest : BaseDataSourceRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public PasswordCredentials Credentials { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VCenterManager : BaseManager
	{
		
		[System.Runtime.Serialization.DataMember(Name="fqdn")]
		public string Fqdn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip_address")]
		public IpV4Address Ip_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nsx_manager")]
		public Reference Nsx_manager { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vm")]
		public Reference Vm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VPC : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="cidr_block")]
		public IpV4Address Cidr_block { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="default_vpc")]
		public System.Nullable<System.Boolean> Default_vpc { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_synched_time")]
		public System.Nullable<System.Int64> Last_synched_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_id")]
		public string Vendor_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VersionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="api_version")]
		public string Api_version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VirtualMachine : BaseVirtualMachine
	{
		
		[System.Runtime.Serialization.DataMember(Name="applied_to_destination_rules")]
		public RuleSet[] Applied_to_destination_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applied_to_source_rules")]
		public RuleSet[] Applied_to_source_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cluster")]
		public Reference Cluster { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datacenter")]
		public Reference Datacenter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datastores")]
		public Reference[] Datastores { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destination_inversion_rules")]
		public RuleSet[] Destination_inversion_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="folders")]
		public Reference[] Folders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="host")]
		public Reference Host { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layer2_networks")]
		public Reference[] Layer2_networks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nsx_manager")]
		public Reference Nsx_manager { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resource_pool")]
		public Reference Resource_pool { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="security_tags")]
		public Reference[] Security_tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_inversion_rules")]
		public RuleSet[] Source_inversion_rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vcenter_manager")]
		public Reference Vcenter_manager { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vendor_id")]
		public string Vendor_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vlans")]
		public Vlan[] Vlans { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VlanL2Network : BaseL2Network
	{
		
		[System.Runtime.Serialization.DataMember(Name="distributed_virtual_portgroups")]
		public Reference[] Distributed_virtual_portgroups { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="distributed_virtual_switches")]
		public Reference[] Distributed_virtual_switches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vlan_id")]
		public string Vlan_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Vmknic : BaseEntity
	{
		
		[System.Runtime.Serialization.DataMember(Name="host")]
		public Reference Host { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip_addresses")]
		public IpV4Address[] Ip_addresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="layer2_network")]
		public Reference Layer2_network { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vlan")]
		public Vlan Vlan { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Vnic
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VxlanLayer2Network : BaseL2Network
	{
		
		[System.Runtime.Serialization.DataMember(Name="nsx_managers")]
		public Reference[] Nsx_managers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public NSXFirewallRuleScope Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segment_id")]
		public System.Nullable<System.Int32> Segment_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vteps")]
		public Reference[] Vteps { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete an auth token.
		/// Deletes the auth token provided in Authorization header.
		/// Deleting an expired or invalid token will result in 401 Unauthorized error.
		/// Delete auth/token
		/// </summary>
		public async Task DeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an auth token
		/// <html><body> vRealize Network Insight supports token based authentication.Tokens are non-modifiable identifiers returned by the system when the user has successfully authenticated using valid credentials. Token expires after expiry time returned in the response. All API requests must provide the auth token in Authorization header in following format.<br> Authorization &#58; NetworkInsight {token} <br> If a token is invalid or expired, 401-Unauthorized error gets returned in the response of the API request. </body></html>
		/// Create auth/token
		/// </summary>
		/// <param name="requestBody">User Credentials</param>
		/// <returns>Success</returns>
		public async Task<Token> CreateAsync(UserCredential requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Token>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List arista switch data sources
		/// List arista switch data sources
		/// ListAristaSwitches data-sources/arista-switches
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DataSourceListResponse> ListAristaSwitchesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/arista-switches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSourceListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an arista switch data source
		/// Add arista switch data source
		/// AddAristaSwitch data-sources/arista-switches
		/// </summary>
		/// <param name="requestBody">Add a cisco switch as datasource</param>
		public async Task AddAristaSwitchAsync(AristaSwitchDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/arista-switches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an arista switch data source
		/// Delete an arista switch data source
		/// DeleteAristaSwitch data-sources/arista-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DeleteAristaSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/arista-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show arista switch data source details
		/// Show arista switch data source details
		/// GetAristaSwitch data-sources/arista-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<AristaSwitchDataSource> GetAristaSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/arista-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AristaSwitchDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an arista switch data source
		/// Update an switch data source
		/// UpdateAristaSwitch data-sources/arista-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<AristaSwitchDataSource> UpdateAristaSwitchAsync(string id, AristaSwitchDataSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/arista-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AristaSwitchDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable an arista switch data source
		/// Disable an arista switch data source
		/// DisableAristaSwitch data-sources/arista-switches/{id}/disable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DisableAristaSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/arista-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable an arista switch data source
		/// Enable an arista switch data source
		/// EnableAristaSwitch data-sources/arista-switches/{id}/enable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task EnableAristaSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/arista-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show snmp config for arista switch data source
		/// Show snmp config for arista switch data source
		/// GetAristaSwitchSnmpConfig data-sources/arista-switches/{id}/snmp-config
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<SNMPConfig> GetAristaSwitchSnmpConfigAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/arista-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/snmp-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SNMPConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update snmp config for arista switch data source
		/// Update snmp config for arista switch data source
		/// UpdateAristaSwitchSnmpConfig data-sources/arista-switches/{id}/snmp-config
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<SNMPConfig> UpdateAristaSwitchSnmpConfigAsync(string id, SNMPConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/arista-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/snmp-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SNMPConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List brocade switch data sources
		/// List brocade switch data sources
		/// ListBrocadeSwitches data-sources/brocade-switches
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DataSourceListResponse> ListBrocadeSwitchesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/brocade-switches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSourceListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a brocade switch data source
		/// Add brocade switch as a data source
		/// AddBrocadeSwitch data-sources/brocade-switches
		/// </summary>
		public async Task AddBrocadeSwitchAsync(BrocadeSwitchDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/brocade-switches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a brocade switch data source
		/// Delete a brocade switch data source
		/// DeleteBrocadeSwitch data-sources/brocade-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DeleteBrocadeSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/brocade-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show brocade switch data source details
		/// Show brocade switch data source details
		/// GetBrocadeSwitch data-sources/brocade-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<BrocadeSwitchDataSource> GetBrocadeSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/brocade-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BrocadeSwitchDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a brocade switch data source
		/// Update a brocade switch data source. Only credentials, nickname and notes can be updated.
		/// UpdateBrocadeSwitch data-sources/brocade-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<BrocadeSwitchDataSource> UpdateBrocadeSwitchAsync(string id, BrocadeSwitchDataSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/brocade-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BrocadeSwitchDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable a brocade switch data source
		/// DisableBrocadeSwitch data-sources/brocade-switches/{id}/disable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DisableBrocadeSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/brocade-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable a brocade switch data source
		/// EnableBrocadeSwitch data-sources/brocade-switches/{id}/enable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task EnableBrocadeSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/brocade-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show snmp config for brocade switch data source
		/// Show snmp config for brocade switch data source
		/// GetBrocadeSwitchSnmpConfig data-sources/brocade-switches/{id}/snmp-config
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<SNMPConfig> GetBrocadeSwitchSnmpConfigAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/brocade-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/snmp-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SNMPConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update snmp config for brocade switch data source
		/// Update snmp config for brocade switch data source
		/// UpdateBrocadeSwitchSnmpConfig data-sources/brocade-switches/{id}/snmp-config
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<SNMPConfig> UpdateBrocadeSwitchSnmpConfigAsync(string id, SNMPConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/brocade-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/snmp-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SNMPConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List checkpoint firewall data sources
		/// List checkpoint firewall data sources
		/// ListCheckpointFirewalls data-sources/checkpoint-firewalls
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DataSourceListResponse> ListCheckpointFirewallsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/checkpoint-firewalls";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSourceListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a checkpoint firewall
		/// Add checkpoint firewall as data source
		/// AddCheckpointFirewall data-sources/checkpoint-firewalls
		/// </summary>
		/// <param name="requestBody">Add a vSec Checkpoint firewall as data source</param>
		public async Task AddCheckpointFirewallAsync(CheckpointFirewallDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/checkpoint-firewalls";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a checkpoint firewall data source
		/// Delete a checkpoint firewall data source
		/// DeleteCheckpointFirewall data-sources/checkpoint-firewalls/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DeleteCheckpointFirewallAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/checkpoint-firewalls/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show checkpoint firewall data source details
		/// Show checkpoint firewall data source details
		/// GetCheckpointFirewall data-sources/checkpoint-firewalls/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<CheckpointFirewallDataSource> GetCheckpointFirewallAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/checkpoint-firewalls/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckpointFirewallDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a checkpoint firewall data source
		/// Update a checkpoint firewall data source
		/// UpdateCheckpointFirewall data-sources/checkpoint-firewalls/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<CheckpointFirewallDataSource> UpdateCheckpointFirewallAsync(string id, CheckpointFirewallDataSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/checkpoint-firewalls/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckpointFirewallDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable a checkpoint firewall data source
		/// Disable a checkpoint firewall data source
		/// DisableCheckpointFirewall data-sources/checkpoint-firewalls/{id}/disable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DisableCheckpointFirewallAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/checkpoint-firewalls/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable a checkpoint firewall data source
		/// Enable a checkpoint firewall data source
		/// EnableCheckpointFirewall data-sources/checkpoint-firewalls/{id}/enable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task EnableCheckpointFirewallAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/checkpoint-firewalls/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List cisco switch data sources
		/// List cisco switch data sources
		/// ListCiscoSwitches data-sources/cisco-switches
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DataSourceListResponse> ListCiscoSwitchesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/cisco-switches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSourceListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a cisco switch data source
		/// Add cisco switch as data source. User must provide one of ip or fqdn field in the request body.
		/// Appropriate proxy id is retrieved from infra/nodes URL to select the proxy node.
		/// AddCiscoSwitch data-sources/cisco-switches
		/// </summary>
		/// <param name="requestBody">Add a cisco switch as datasource.</param>
		public async Task AddCiscoSwitchAsync(CiscoSwitchDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/cisco-switches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a cisco switch data source
		/// Delete a cisco switch data source
		/// DeleteCiscoSwitch data-sources/cisco-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DeleteCiscoSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/cisco-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show cisco switch data source details
		/// Show cisco switch data source details
		/// GetCiscoSwitch data-sources/cisco-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<CiscoSwitchDataSource> GetCiscoSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/cisco-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CiscoSwitchDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a cisco switch data source
		/// Update a cisco switch data source. Only credentials, nickname and notes can be updated.
		/// UpdateCiscoSwitch data-sources/cisco-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<CiscoSwitchDataSource> UpdateCiscoSwitchAsync(string id, CiscoSwitchDataSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/cisco-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CiscoSwitchDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable a cisco switch data source
		/// Disable a cisco switch data source
		/// DisableCiscoSwitch data-sources/cisco-switches/{id}/disable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DisableCiscoSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/cisco-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable a cisco switch data source
		/// Enable a cisco switch data source
		/// EnableCiscoSwitch data-sources/cisco-switches/{id}/enable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task EnableCiscoSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/cisco-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show snmp config for cisco switch data source
		/// Show snmp config for cisco switch data source
		/// GetCiscoSwitchSnmpConfig data-sources/cisco-switches/{id}/snmp-config
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<SNMPConfig> GetCiscoSwitchSnmpConfigAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/cisco-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/snmp-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SNMPConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update snmp config for cisco switch data source
		/// Update snmp config for cisco switch data source
		/// UpdateCiscoSwitchSnmpConfig data-sources/cisco-switches/{id}/snmp-config
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<SNMPConfig> UpdateCiscoSwitchSnmpConfigAsync(string id, SNMPConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/cisco-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/snmp-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SNMPConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List dell switch data sources
		/// List dell switch data sources
		/// ListDellSwitches data-sources/dell-switches
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DataSourceListResponse> ListDellSwitchesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/dell-switches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSourceListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a dell switch data source
		/// Add a dell switch as data source
		/// AddDellSwitch data-sources/dell-switches
		/// </summary>
		public async Task AddDellSwitchAsync(DellSwitchDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/dell-switches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a dell switch data source
		/// Delete a data source
		/// DeleteDellSwitch data-sources/dell-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DeleteDellSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/dell-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show dell switch data source details
		/// Get a dell switch data source details
		/// GetDellSwitch data-sources/dell-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<DellSwitchDataSource> GetDellSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/dell-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DellSwitchDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a dell switch data source
		/// Update a dell switch data source. Only credentials, nickname and notes can be updated
		/// UpdateDellSwitch data-sources/dell-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<DellSwitchDataSource> UpdateDellSwitchAsync(string id, DellSwitchDataSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/dell-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DellSwitchDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable a dell switch data source
		/// Disable a dell switch data source
		/// DisableDellSwitch data-sources/dell-switches/{id}/disable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DisableDellSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/dell-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable a dell switch data source
		/// Enable a dell switch data source
		/// EnableDellSwitch data-sources/dell-switches/{id}/enable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task EnableDellSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/dell-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show snmp config for dell switch data source
		/// Show snmp config for dell switch data source
		/// GetDellSwitchSnmpConfig data-sources/dell-switches/{id}/snmp-config
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<SNMPConfig> GetDellSwitchSnmpConfigAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/dell-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/snmp-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SNMPConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update snmp config for dell switch data source
		/// Update snmp config for dell switch data source
		/// UpdateDellSwitchSnmpConfig data-sources/dell-switches/{id}/snmp-config
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<SNMPConfig> UpdateDellSwitchSnmpConfigAsync(string id, SNMPConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/dell-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/snmp-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SNMPConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List hp oneview manager data sources
		/// List hp oneview manager data sources
		/// ListHpovManagers data-sources/hpov-managers
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DataSourceListResponse> ListHpovManagersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpov-managers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSourceListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a hp oneview manager data source
		/// Add a hp oneview manager data source
		/// AddHpovManager data-sources/hpov-managers
		/// </summary>
		public async Task AddHpovManagerAsync(HPOneViewManagerDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpov-managers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a hp oneview data source
		/// Delete a hp oneview data source
		/// DeleteHpovManager data-sources/hpov-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DeleteHpovManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpov-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show hp oneview data source details
		/// Show hp oneview data source details
		/// GetHpovManager data-sources/hpov-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<HPOneViewManagerDataSource> GetHpovManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpov-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HPOneViewManagerDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a hp oneview data source
		/// Update a hp oneview data source
		/// UpdateHpovManager data-sources/hpov-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<HPOneViewManagerDataSource> UpdateHpovManagerAsync(string id, HPOneViewManagerDataSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpov-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HPOneViewManagerDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable a hp oneview data source
		/// Disable a hp oneview data source
		/// DisableHpovManager data-sources/hpov-managers/{id}/disable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DisableHpovManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpov-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable a hp oneview data source
		/// Enable a hp oneview data source
		/// EnableHpovManager data-sources/hpov-managers/{id}/enable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task EnableHpovManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpov-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List hpvc manager data sources
		/// List hpvc manager data sources
		/// ListHpvcManagers data-sources/hpvc-managers
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DataSourceListResponse> ListHpvcManagersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpvc-managers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSourceListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a hpvc manager data source
		/// Add hpvc manager data source
		/// AddHpvcManager data-sources/hpvc-managers
		/// </summary>
		/// <param name="requestBody">Add a switch as datasource</param>
		public async Task AddHpvcManagerAsync(HPVCManagerDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpvc-managers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a hpvc manager data source
		/// Delete a hpvc manager data source
		/// DeleteHpvcManager data-sources/hpvc-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DeleteHpvcManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpvc-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show hpvc data source details
		/// Show hpvc data source details
		/// GetHpvcManager data-sources/hpvc-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<HPVCManagerDataSource> GetHpvcManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpvc-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HPVCManagerDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a hpvc manager data source
		/// Update a hpvc manager data source
		/// UpdateHpvcManager data-sources/hpvc-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<HPVCManagerDataSource> UpdateHpvcManagerAsync(string id, HPVCManagerDataSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpvc-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HPVCManagerDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable a hpvc manager data source
		/// Disable a hpvc manager data source
		/// DisableHpvcManager data-sources/hpvc-managers/{id}/disable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DisableHpvcManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpvc-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable a hpvc manager data source
		/// Enable a hpvc manager data source
		/// EnableHpvcManager data-sources/hpvc-managers/{id}/enable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task EnableHpvcManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/hpvc-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List juniper switch data sources
		/// List juniper switch data sources
		/// ListJuniperSwitches data-sources/juniper-switches
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DataSourceListResponse> ListJuniperSwitchesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/juniper-switches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSourceListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a juniper switch as data source
		/// Add switch Datasource
		/// AddJuniperSwitch data-sources/juniper-switches
		/// </summary>
		/// <param name="requestBody">Add a cisco switch as datasource</param>
		public async Task AddJuniperSwitchAsync(JuniperSwitchDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/juniper-switches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a juniper switch data source
		/// Delete a juniper switch data source
		/// DeleteJuniperSwitch data-sources/juniper-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DeleteJuniperSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/juniper-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show juniper switch data source details
		/// Show juniper switch data source details
		/// GetJuniperSwitch data-sources/juniper-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<JuniperSwitchDataSource> GetJuniperSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/juniper-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JuniperSwitchDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a juniper switch data source
		/// Update a juniper switch data source
		/// UpdateJuniperSwitch data-sources/juniper-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<JuniperSwitchDataSource> UpdateJuniperSwitchAsync(string id, JuniperSwitchDataSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/juniper-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<JuniperSwitchDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable a juniper switch data source
		/// Disable a juniper switch data source
		/// DisableJuniperSwitch data-sources/juniper-switches/{id}/disable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DisableJuniperSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/juniper-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable a juniper switch data source
		/// Enable a juniper switch data source
		/// EnableJuniperSwitch data-sources/juniper-switches/{id}/enable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task EnableJuniperSwitchAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/juniper-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show snmp config for juniper switch data source
		/// Show snmp config for juniper switch data source
		/// GetJuniperSwitchSnmpConfig data-sources/juniper-switches/{id}/snmp-config
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<SNMPConfig> GetJuniperSwitchSnmpConfigAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/juniper-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/snmp-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SNMPConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update snmp config for a juniper switch data source
		/// Update snmp config for a juniper switch data source
		/// UpdateJuniperSwitchSnmpConfig data-sources/juniper-switches/{id}/snmp-config
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<SNMPConfig> UpdateJuniperSwitchSnmpConfigAsync(string id, SNMPConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/juniper-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/snmp-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SNMPConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List nsx-v manager data sources
		/// List nsx-v manager data sources
		/// ListNsxvManagers data-sources/nsxv-managers
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DataSourceListResponse> ListNsxvManagersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/nsxv-managers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSourceListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a nsx-v manager data source
		/// Add a nsx-v manager data source
		/// AddNsxvManagerDatasource data-sources/nsxv-managers
		/// </summary>
		public async Task AddNsxvManagerDatasourceAsync(NSXVManagerDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/nsxv-managers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a nsx-v manager data source
		/// Delete a nsx-v manager data source
		/// DeleteNsxvManager data-sources/nsxv-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DeleteNsxvManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/nsxv-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show nsx-v manager data source details
		/// Show nsx-v manager data source details
		/// GetNsxvManager data-sources/nsxv-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<NSXVManagerDataSource> GetNsxvManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/nsxv-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NSXVManagerDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a nsx-v manager data source
		/// Update a nsx-v manager data source
		/// UpdateNsxvManager data-sources/nsxv-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<NSXVManagerDataSource> UpdateNsxvManagerAsync(string id, NSXVManagerDataSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/nsxv-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NSXVManagerDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show nsx controller-cluster details
		/// Show nsx controller-cluster details
		/// GetNsxvControllerCluster data-sources/nsxv-managers/{id}/controller-cluster
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<NSXControllerDataCollection> GetNsxvControllerClusterAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/nsxv-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/controller-cluster";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NSXControllerDataCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update nsx controller-cluster details
		/// Update nsx controller-cluster details
		/// UpdateNsxvControllerCluster data-sources/nsxv-managers/{id}/controller-cluster
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<NSXControllerDataCollection> UpdateNsxvControllerClusterAsync(string id, NSXControllerDataCollection requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/nsxv-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/controller-cluster";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NSXControllerDataCollection>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable a nsx-v manager data source
		/// Disable a nsx-v manager data source
		/// DisableNsxvManager data-sources/nsxv-managers/{id}/disable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DisableNsxvManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/nsxv-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable a nsx-v manager data source
		/// Enable a nsx-v manager data source
		/// EnableNsxvManager data-sources/nsxv-managers/{id}/enable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task EnableNsxvManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/nsxv-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List panorama firewall data sources
		/// List panorama firewall data sources
		/// ListPanoramaFirewalls data-sources/panorama-firewalls
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DataSourceListResponse> ListPanoramaFirewallsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/panorama-firewalls";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSourceListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create panorama firewall data source
		/// Add panorama firewall as data source
		/// AddPanoramaFirewall data-sources/panorama-firewalls
		/// </summary>
		/// <param name="requestBody">Add a panorama firewall as datasource</param>
		public async Task AddPanoramaFirewallAsync(PanFirewallDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/panorama-firewalls";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a panorama firewall data source
		/// Delete a panorama firewall data source
		/// DeletePanoramaFirewall data-sources/panorama-firewalls/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DeletePanoramaFirewallAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/panorama-firewalls/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show panorama firewall data source details
		/// Show panorama firewall data source details
		/// GetPanoramaFirewall data-sources/panorama-firewalls/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<PanFirewallDataSource> GetPanoramaFirewallAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/panorama-firewalls/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PanFirewallDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a panorama firewall data source
		/// Update a panorama firewall data source
		/// UpdatePanoramaFirewall data-sources/panorama-firewalls/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<PanFirewallDataSource> UpdatePanoramaFirewallAsync(string id, PanFirewallDataSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/panorama-firewalls/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PanFirewallDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable a panorama firewall data source
		/// Disable a panorama firewall data source
		/// DisablePanoramaFirewall data-sources/panorama-firewalls/{id}/disable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DisablePanoramaFirewallAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/panorama-firewalls/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable a panorama firewall data source
		/// Enable a panorama firewall data source
		/// EnablePanoramaFirewall data-sources/panorama-firewalls/{id}/enable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task EnablePanoramaFirewallAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/panorama-firewalls/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ucs manager data sources
		/// List ucs manager data sources
		/// ListUcsManagers data-sources/ucs-managers
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DataSourceListResponse> ListUcsManagersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/ucs-managers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSourceListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an ucs manager data source
		/// Add an ucs manager as data source
		/// AddUcsManager data-sources/ucs-managers
		/// </summary>
		public async Task AddUcsManagerAsync(UCSManagerDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/ucs-managers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an ucs manager data source
		/// Delete an ucs manager data source
		/// DeleteUcsManager data-sources/ucs-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DeleteUcsManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/ucs-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show ucs manager data source details
		/// Show ucs manager data source details
		/// GetUcsManager data-sources/ucs-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<UCSManagerDataSource> GetUcsManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/ucs-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UCSManagerDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an ucs manager data source
		/// Update an ucs manager data source
		/// UpdateUcsManager data-sources/ucs-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<UCSManagerDataSource> UpdateUcsManagerAsync(string id, UCSManagerDataSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/ucs-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UCSManagerDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable an ucs manager data source
		/// Disable an ucs manager data source
		/// DisableUcsManager data-sources/ucs-managers/{id}/disable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DisableUcsManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/ucs-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable an ucs manager data source
		/// Enable an ucs manager data source
		/// EnableUcsManager data-sources/ucs-managers/{id}/enable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task EnableUcsManagerAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/ucs-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show snmp config for ucs fabric interconnects
		/// Show snmp config for ucs fabric interconnects
		/// GetUcsSnmpConfig data-sources/ucs-managers/{id}/snmp-config
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<SNMPConfig> GetUcsSnmpConfigAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/ucs-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/snmp-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SNMPConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update snmp config for ucs fabric interconnects
		/// Update snmp config for ucs fabric interconnects
		/// UpdateUcsSnmpConfig data-sources/ucs-managers/{id}/snmp-config
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<SNMPConfig> UpdateUcsSnmpConfigAsync(string id, SNMPConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/ucs-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/snmp-config";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SNMPConfig>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List vCenter data sources
		/// List vCenter data sources
		/// ListVcenters data-sources/vcenters
		/// </summary>
		/// <returns>OK</returns>
		public async Task<DataSourceListResponse> ListVcentersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/vcenters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DataSourceListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a vCenter data source
		/// Add a vcenter data source. User must provide one of ip or fqdn field in the request body.
		/// Appropriate proxy id is retrieved from infra/nodes URL to select the proxy node.
		/// AddVcenterDatasource data-sources/vcenters
		/// </summary>
		/// <param name="requestBody">VCenter Credentials</param>
		public async Task AddVcenterDatasourceAsync(VCenterDataSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/vcenters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a vCenter data source
		/// Delete a data source
		/// DeleteVcenter data-sources/vcenters/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		public async Task DeleteVcenterAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/vcenters/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show vCenter data source details
		/// Show vCenter data source details
		/// GetVcenter data-sources/vcenters/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<VCenterDataSource> GetVcenterAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/vcenters/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VCenterDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a vCenter data source.
		/// Update a vcenter data source. Only nickname, notes and credentials can be updated.
		/// UpdateVcenter data-sources/vcenters/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<VCenterDataSource> UpdateVcenterAsync(string id, VCenterDataSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/vcenters/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VCenterDataSource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disable a vCenter data source
		/// Disable a vCenter data source
		/// DisableVcenter data-sources/vcenters/{id}/disable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task DisableVcenterAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/vcenters/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enable a vCenter data source
		/// Enable a vCenter data source
		/// EnableVcenter data-sources/vcenters/{id}/enable
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task EnableVcenterAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "data-sources/vcenters/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List clusters
		/// List clusters
		/// ListClusters entities/clusters
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListClustersAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/clusters?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show cluster details
		/// Show cluster details
		/// GetCluster entities/clusters/{id}
		/// </summary>
		/// <param name="time">time in epoch seconds</param>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<Cluster> GetClusterAsync(long time, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/clusters/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Cluster>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List datastores
		/// List datastores
		/// ListDatastores entities/datastores
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListDatastoresAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/datastores?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show datastore details
		/// Show datastore details
		/// GetDatastore entities/datastores/{id}
		/// </summary>
		/// <param name="time">time in epoch seconds</param>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<Datastore> GetDatastoreAsync(long time, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/datastores/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Datastore>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List distributed virtual portgroups
		/// List distributed virtual portgroups
		/// ListDistributedVirtualPortgroups entities/distributed-virtual-portgroups
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListDistributedVirtualPortgroupsAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/distributed-virtual-portgroups?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show distributed virtual portgroup details
		/// Show distributed virtual portgroup details
		/// GetDistributedVirtualPortgroup entities/distributed-virtual-portgroups/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<DistributedVirtualPortgroup> GetDistributedVirtualPortgroupAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/distributed-virtual-portgroups/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistributedVirtualPortgroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List distributed virtual switches
		/// List distributed virtual switches
		/// ListDistributedVirtualSwitches entities/distributed-virtual-switches
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListDistributedVirtualSwitchesAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/distributed-virtual-switches?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show distributed virtual switch details
		/// Show distributed virtual switch details
		/// GetDistributedVirtualSwitch entities/distributed-virtual-switches/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<DistributedVirtualSwitch> GetDistributedVirtualSwitchAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/distributed-virtual-switches/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DistributedVirtualSwitch>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List firewall rules
		/// List firewall rules
		/// ListFirewallRules entities/firewall-rules
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListFirewallRulesAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/firewall-rules?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show firewall rule details
		/// Show firewall rule details
		/// GetFirewallRule entities/firewall-rules/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<BaseFirewallRule> GetFirewallRuleAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/firewall-rules/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BaseFirewallRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List firewalls
		/// List firewalls
		/// ListFirewalls entities/firewalls
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListFirewallsAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/firewalls?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show firewall details
		/// Show firewall details
		/// GetFirewall entities/firewalls/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<BaseFirewallRule> GetFirewallAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/firewalls/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BaseFirewallRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List flows
		/// List flows
		/// GetFlows entities/flows
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> GetFlowsAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/flows?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show flow details
		/// Show flow details
		/// GetFlow entities/flows/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<Flow> GetFlowAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/flows/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Flow>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List folders
		/// List folders
		/// ListFolders entities/folders
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListFoldersAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/folders?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show folder details
		/// Show folder details
		/// GetFolder entities/folders/{id}
		/// </summary>
		/// <param name="time">time in epoch seconds</param>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<Folder> GetFolderAsync(long time, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/folders/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Folder>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List hosts
		/// List hosts
		/// ListHosts entities/hosts
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListHostsAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/hosts?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show host details
		/// Show host details
		/// GetHost entities/hosts/{id}
		/// </summary>
		/// <param name="time">time in epoch seconds</param>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<Host> GetHostAsync(long time, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/hosts/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Host>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List ip sets
		/// List ip sets
		/// ListIPSets entities/ip-sets
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListIPSetsAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/ip-sets?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show ip set details
		/// Show ip set details
		/// GetIPSet entities/ip-sets/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<BaseIPSet> GetIPSetAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/ip-sets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BaseIPSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List layer2 networks
		/// List layer2 networks
		/// ListLayer2Networks entities/layer2-networks
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListLayer2NetworksAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/layer2-networks?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show layer2 network details
		/// Show layer2 network details
		/// GetLayer2Network entities/layer2-networks/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<BaseL2Network> GetLayer2NetworkAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/layer2-networks/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BaseL2Network>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get names for entities
		/// Get names for entities.Limit of 1000 entities in a single request.
		/// GetNames entities/names
		/// </summary>
		/// <param name="requestBody">Names Request</param>
		/// <returns>OK</returns>
		public async Task<NamesResponse> GetNamesAsync(NamesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/names";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NamesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get name of an entity
		/// Get name of an entity
		/// GetName entities/names/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<EntityName> GetNameAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/names/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EntityName>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List nsx managers
		/// List nsx managers
		/// ListNSXManagers entities/nsx-managers
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListNSXManagersAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/nsx-managers?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show nsx manager details
		/// Show nsx manager details
		/// GetNSXManager entities/nsx-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<BaseNSXManager> GetNSXManagerAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/nsx-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BaseNSXManager>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List problems
		/// List problem events.
		/// ListProblemEvents entities/problems
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListProblemEventsAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/problems?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show problem details
		/// Show problem event details.
		/// GetProblemEvent entities/problems/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<ProblemEvent> GetProblemEventAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/problems/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ProblemEvent>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List security groups
		/// List security groups
		/// ListSecurityGroups entities/security-groups
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListSecurityGroupsAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/security-groups?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show security group details
		/// Show security group details
		/// GetSecurityGroup entities/security-groups/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<BaseSecurityGroup> GetSecurityGroupAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/security-groups/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BaseSecurityGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List security tags
		/// List security tags
		/// ListSecurityTags entities/security-tags
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListSecurityTagsAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/security-tags?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show security tag details
		/// Show security tag details
		/// GetSecurityTag entities/security-tags/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<SecurityTag> GetSecurityTagAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/security-tags/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SecurityTag>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List service groups
		/// List service groups
		/// ListServiceGroups entities/service-groups
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListServiceGroupsAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/service-groups?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show service group details
		/// Show service group details
		/// GetServiceGroup entities/service-groups/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<BaseServiceGroup> GetServiceGroupAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/service-groups/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BaseServiceGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List services
		/// List services
		/// ListServices entities/services
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListServicesAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/services?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show service details
		/// Show service details
		/// GetService entities/services/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<BaseService> GetServiceAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BaseService>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List vCenter datacenters
		/// List vCenter datacenters
		/// ListDatacenters entities/vc-datacenters
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListDatacentersAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/vc-datacenters?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show vCenter datacenter details
		/// Show vCenter datacenter details
		/// GetDatacenter entities/vc-datacenters/{id}
		/// </summary>
		/// <param name="time">time in epoch seconds</param>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<VCDatacenter> GetDatacenterAsync(long time, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/vc-datacenters/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"?time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VCDatacenter>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List vCenter managers
		/// List vCenter managers
		/// ListVcenterManagers entities/vcenter-managers
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListVcenterManagersAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/vcenter-managers?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show vCenter manager details
		/// Show vCenter manager details
		/// GetVcenterManager entities/vcenter-managers/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<VCenterManager> GetVcenterManagerAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/vcenter-managers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VCenterManager>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List vmknics
		/// List vmknics
		/// ListVmknics entities/vmknics
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListVmknicsAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/vmknics?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show vmknic details
		/// Show vmknic details
		/// GetVmknic entities/vmknics/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<Vmknic> GetVmknicAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/vmknics/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Vmknic>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List vms
		/// List vms
		/// ListVms entities/vms
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListVmsAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/vms?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show vm details
		/// Show vm details
		/// GetVm entities/vms/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<BaseVirtualMachine> GetVmAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/vms/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BaseVirtualMachine>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List vnics
		/// List vnics
		/// ListVnics entities/vnics
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponseWithTime> ListVnicsAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/vnics?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show vnic details
		/// Show vnic details
		/// GetVnic entities/vnics/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <param name="time">time in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<BaseVnic> GetVnicAsync(string id, long time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "entities/vnics/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&time="+time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BaseVnic>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List applications
		/// List applications
		/// ListApplications groups/applications
		/// </summary>
		/// <param name="size">page size of results</param>
		/// <param name="cursor">cursor from previous response</param>
		/// <param name="start_time">start time for query in epoch seconds</param>
		/// <param name="end_time">end time for query in epoch seconds</param>
		/// <returns>OK</returns>
		public async Task<PagedListResponse> ListApplicationsAsync(double size, string cursor, double start_time, double end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/applications?size="+size+"&cursor=" + (cursor==null? "" : System.Uri.EscapeDataString(cursor))+"&start_time="+start_time+"&end_time="+end_time;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an application
		/// Application is a group of tiers. A tier is a group of virtual machines based on membership criteria. Tiers are bound to single
		/// application. An application name is unique and should not conflict with another application name.
		/// AddApplication groups/applications
		/// </summary>
		public async Task AddApplicationAsync(ApplicationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/applications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an application
		/// Deleting an application deletes all the tiers of the application along with the application
		/// DeleteApplication groups/applications/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		public async Task DeleteApplicationAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/applications/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show application details
		/// Show application details
		/// GetApplication groups/applications/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<Application> GetApplicationAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/applications/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Application>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List tiers of an application
		/// List tiers of an application
		/// ListApplicationTiers groups/applications/{id}/tiers
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<TierListResponse> ListApplicationTiersAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/applications/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/tiers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TierListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create tier in application
		/// Create a tier of an application by with specified membership criteria. The membership criteria id defined in terms of
		/// virtual machines or ip addresses/subnet. Please refer to API Guide on how to construct membership criteria.
		/// AddTier groups/applications/{id}/tiers
		/// </summary>
		/// <param name="id">entity id</param>
		public async Task AddTierAsync(string id, TierRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/applications/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/tiers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete tier
		/// Delete tier of an application
		/// DeleteTier groups/applications/{id}/tiers/{tier_id}
		/// </summary>
		/// <param name="id">entity id</param>
		public async Task DeleteTierAsync(string id, string tier_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/applications/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/tiers/{tier_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show tier details
		/// Show tier details
		/// GetApplicationTier groups/applications/{id}/tiers/{tier_id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<Tier> GetApplicationTierAsync(string id, string tier_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/applications/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/tiers/{tier_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tier>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show tier details
		/// Show tier details
		/// GetTier groups/tiers/{tier_id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Tier> GetTierAsync(string tier_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "groups/tiers/{tier_id}";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Tier>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show version info
		/// Show version info
		/// GetVersion info/version
		/// </summary>
		/// <returns>OK</returns>
		public async Task<VersionResponse> GetVersionAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "info/version";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VersionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List nodes
		/// Get list of infrastructure nodes. Only admin users can retrieve this information.
		/// ListNodes infra/nodes
		/// </summary>
		/// <returns>OK</returns>
		public async Task<NodeListResult> ListNodesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "infra/nodes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NodeListResult>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Show node details
		/// Get details of infrastructure nodes. Only admin users can get this information. The proxy id is
		/// required for adding a data source for selecting appropriate proxy node to add the data source.
		/// GetNode infra/nodes/{id}
		/// </summary>
		/// <param name="id">entity id</param>
		/// <returns>OK</returns>
		public async Task<Node> GetNodeAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "infra/nodes/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Node>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get logical recommended rules
		/// Get recommended firewall rules based on the flow data gathered by vRealize Network Insight.
		/// This API provides service to retrieve recommended rules based on flow traffic that is observed between
		/// two groups OR for a single group based on all the inbound and outboud traffic for that group.
		/// In case two groups are provided, both the groups should be of same type.
		/// Currently supported groups are Application, Tier, NSXSecurityGroup, EC2SecurityGroup.
		/// ListRecommendedRules micro-seg/recommended-rules
		/// </summary>
		/// <param name="requestBody">Recommended Rules Request</param>
		/// <returns>Success</returns>
		public async Task<RecommendedRules> ListRecommendedRulesAsync(RecommendedRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "micro-seg/recommended-rules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RecommendedRules>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Export recommended rules for NSX-V
		/// Export recommended firewall rules based on the flow data gathered by vRealize Network Insight in NSX-V compatible
		/// format
		/// ExportNsxRecommendedRules micro-seg/recommended-rules/nsx
		/// </summary>
		/// <param name="requestBody">NSX Recommended Rules Request</param>
		/// <returns>Success</returns>
		public async Task ExportNsxRecommendedRulesAsync(RecommendedRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "micro-seg/recommended-rules/nsx";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search entities
		/// Using search API you can search vRealize Network Insight entities by specifying entity type and filter expression.
		/// A filter expression is a predicate expression (similar to SQL where clause) used to define the search criteria.
		/// Please refer to API Guide on details of how to construct filter expression. A successful search request will return a
		/// list of entity ids that matches the search criteria.
		/// SearchEntities search
		/// </summary>
		/// <param name="requestBody">Search Request</param>
		/// <returns>Success</returns>
		public async Task<PagedListResponseWithTime> SearchEntitiesAsync(SearchRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PagedListResponseWithTime>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
